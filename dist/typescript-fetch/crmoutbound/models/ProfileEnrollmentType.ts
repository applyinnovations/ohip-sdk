/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { CustomerType } from './CustomerType';
import {
    CustomerTypeFromJSON,
    CustomerTypeFromJSONTyped,
    CustomerTypeToJSON,
} from './CustomerType';
import type { GuestProfileTypeAddresses } from './GuestProfileTypeAddresses';
import {
    GuestProfileTypeAddressesFromJSON,
    GuestProfileTypeAddressesFromJSONTyped,
    GuestProfileTypeAddressesToJSON,
} from './GuestProfileTypeAddresses';
import type { ProfileEnrollmentTypeProfileMemberships } from './ProfileEnrollmentTypeProfileMemberships';
import {
    ProfileEnrollmentTypeProfileMembershipsFromJSON,
    ProfileEnrollmentTypeProfileMembershipsFromJSONTyped,
    ProfileEnrollmentTypeProfileMembershipsToJSON,
} from './ProfileEnrollmentTypeProfileMemberships';
import type { ProfileEnrollmentTypeUrls } from './ProfileEnrollmentTypeUrls';
import {
    ProfileEnrollmentTypeUrlsFromJSON,
    ProfileEnrollmentTypeUrlsFromJSONTyped,
    ProfileEnrollmentTypeUrlsToJSON,
} from './ProfileEnrollmentTypeUrls';
import type { ProfileStatusType } from './ProfileStatusType';
import {
    ProfileStatusTypeFromJSON,
    ProfileStatusTypeFromJSONTyped,
    ProfileStatusTypeToJSON,
} from './ProfileStatusType';
import type { ProfileTypeKeywords } from './ProfileTypeKeywords';
import {
    ProfileTypeKeywordsFromJSON,
    ProfileTypeKeywordsFromJSONTyped,
    ProfileTypeKeywordsToJSON,
} from './ProfileTypeKeywords';
import type { ProfileTypeType } from './ProfileTypeType';
import {
    ProfileTypeTypeFromJSON,
    ProfileTypeTypeFromJSONTyped,
    ProfileTypeTypeToJSON,
} from './ProfileTypeType';
import type { ResCommunicationTypeEmails } from './ResCommunicationTypeEmails';
import {
    ResCommunicationTypeEmailsFromJSON,
    ResCommunicationTypeEmailsFromJSONTyped,
    ResCommunicationTypeEmailsToJSON,
} from './ResCommunicationTypeEmails';
import type { ResCommunicationTypeTelephones } from './ResCommunicationTypeTelephones';
import {
    ResCommunicationTypeTelephonesFromJSON,
    ResCommunicationTypeTelephonesFromJSONTyped,
    ResCommunicationTypeTelephonesToJSON,
} from './ResCommunicationTypeTelephones';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type provides the detailed information about the profile and its children.
 * @export
 * @interface ProfileEnrollmentType
 */
export interface ProfileEnrollmentType {
    /**
     * 
     * @type {CustomerType}
     * @memberof ProfileEnrollmentType
     */
    customer?: CustomerType;
    /**
     * 
     * @type {GuestProfileTypeAddresses}
     * @memberof ProfileEnrollmentType
     */
    addresses?: GuestProfileTypeAddresses;
    /**
     * 
     * @type {ResCommunicationTypeTelephones}
     * @memberof ProfileEnrollmentType
     */
    telephones?: ResCommunicationTypeTelephones;
    /**
     * 
     * @type {ResCommunicationTypeEmails}
     * @memberof ProfileEnrollmentType
     */
    emails?: ResCommunicationTypeEmails;
    /**
     * 
     * @type {ProfileEnrollmentTypeUrls}
     * @memberof ProfileEnrollmentType
     */
    urls?: ProfileEnrollmentTypeUrls;
    /**
     * 
     * @type {ProfileEnrollmentTypeProfileMemberships}
     * @memberof ProfileEnrollmentType
     */
    profileMemberships?: ProfileEnrollmentTypeProfileMemberships;
    /**
     * 
     * @type {ProfileTypeKeywords}
     * @memberof ProfileEnrollmentType
     */
    keywords?: ProfileTypeKeywords;
    /**
     * 
     * @type {ProfileTypeType}
     * @memberof ProfileEnrollmentType
     */
    profileType?: ProfileTypeType;
    /**
     * 
     * @type {ProfileStatusType}
     * @memberof ProfileEnrollmentType
     */
    statusCode?: ProfileStatusType;
    /**
     * Hotel which this profile is registered with. This attribute is not used for configuration.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    registeredProperty?: string;
    /**
     * Hotel which this profile is to be registered. This attribute is only used during creation of profile.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    requestForHotel?: string;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    lastModifierId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ProfileEnrollmentType
     */
    profileId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ProfileEnrollmentType
     */
    reservationId?: UniqueIDType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof ProfileEnrollmentType
     */
    enrollmentCode?: CodeDescriptionType;
    /**
     * Enrollment details will be fetched from this External database.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    externalDatabaseID?: string;
    /**
     * Hotel Code, It is used to filter hotel specific children to this specific hotel code.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    hotelId?: string;
    /**
     * UserID/LoginID of the user who is enrolling the Guest.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    userId?: string;
    /**
     * EmployeeID of the user who is enrolling the Guest.
     * @type {string}
     * @memberof ProfileEnrollmentType
     */
    employeeId?: string;
}

/**
 * Check if a given object implements the ProfileEnrollmentType interface.
 */
export function instanceOfProfileEnrollmentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileEnrollmentTypeFromJSON(json: any): ProfileEnrollmentType {
    return ProfileEnrollmentTypeFromJSONTyped(json, false);
}

export function ProfileEnrollmentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileEnrollmentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customer': !exists(json, 'customer') ? undefined : CustomerTypeFromJSON(json['customer']),
        'addresses': !exists(json, 'addresses') ? undefined : GuestProfileTypeAddressesFromJSON(json['addresses']),
        'telephones': !exists(json, 'telephones') ? undefined : ResCommunicationTypeTelephonesFromJSON(json['telephones']),
        'emails': !exists(json, 'emails') ? undefined : ResCommunicationTypeEmailsFromJSON(json['emails']),
        'urls': !exists(json, 'urls') ? undefined : ProfileEnrollmentTypeUrlsFromJSON(json['urls']),
        'profileMemberships': !exists(json, 'profileMemberships') ? undefined : ProfileEnrollmentTypeProfileMembershipsFromJSON(json['profileMemberships']),
        'keywords': !exists(json, 'keywords') ? undefined : ProfileTypeKeywordsFromJSON(json['keywords']),
        'profileType': !exists(json, 'profileType') ? undefined : ProfileTypeTypeFromJSON(json['profileType']),
        'statusCode': !exists(json, 'statusCode') ? undefined : ProfileStatusTypeFromJSON(json['statusCode']),
        'registeredProperty': !exists(json, 'registeredProperty') ? undefined : json['registeredProperty'],
        'requestForHotel': !exists(json, 'requestForHotel') ? undefined : json['requestForHotel'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'reservationId': !exists(json, 'reservationId') ? undefined : UniqueIDTypeFromJSON(json['reservationId']),
        'enrollmentCode': !exists(json, 'enrollmentCode') ? undefined : CodeDescriptionTypeFromJSON(json['enrollmentCode']),
        'externalDatabaseID': !exists(json, 'externalDatabaseID') ? undefined : json['externalDatabaseID'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'employeeId': !exists(json, 'employeeId') ? undefined : json['employeeId'],
    };
}

export function ProfileEnrollmentTypeToJSON(value?: ProfileEnrollmentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customer': CustomerTypeToJSON(value.customer),
        'addresses': GuestProfileTypeAddressesToJSON(value.addresses),
        'telephones': ResCommunicationTypeTelephonesToJSON(value.telephones),
        'emails': ResCommunicationTypeEmailsToJSON(value.emails),
        'urls': ProfileEnrollmentTypeUrlsToJSON(value.urls),
        'profileMemberships': ProfileEnrollmentTypeProfileMembershipsToJSON(value.profileMemberships),
        'keywords': ProfileTypeKeywordsToJSON(value.keywords),
        'profileType': ProfileTypeTypeToJSON(value.profileType),
        'statusCode': ProfileStatusTypeToJSON(value.statusCode),
        'registeredProperty': value.registeredProperty,
        'requestForHotel': value.requestForHotel,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'reservationId': UniqueIDTypeToJSON(value.reservationId),
        'enrollmentCode': CodeDescriptionTypeToJSON(value.enrollmentCode),
        'externalDatabaseID': value.externalDatabaseID,
        'hotelId': value.hotelId,
        'userId': value.userId,
        'employeeId': value.employeeId,
    };
}

