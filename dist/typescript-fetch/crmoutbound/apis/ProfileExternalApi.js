"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetExternalProfilesProfileTypeEnum = exports.ProfileExternalApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ProfileExternalApi extends runtime.BaseAPI {
    /**
     * This API will validate and check an IATA number. <p><strong>OperationId:</strong>checkIataNumber</p>
     * Validate IATA number.
     */
    checkIataNumberRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.iataNumber === null || requestParameters.iataNumber === undefined) {
                throw new runtime.RequiredError('iataNumber', 'Required parameter requestParameters.iataNumber was null or undefined when calling checkIataNumber.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling checkIataNumber.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
                headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/travelAgents/{iataNumber}`.replace(`{${"iataNumber"}}`, encodeURIComponent(String(requestParameters.iataNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IataNumberDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will validate and check an IATA number. <p><strong>OperationId:</strong>checkIataNumber</p>
     * Validate IATA number.
     */
    checkIataNumber(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.checkIataNumberRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * After searching for profiles in an external system using getExternalProfiles, proceed to use this API knowing the external profile ID in the path.  The result will be a new profile created in OPERA. <p><strong>OperationId:</strong>downloadExternalProfile</p>
     * Download a Profile from external system
     */
    downloadExternalProfileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling downloadExternalProfile.');
            }
            if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
                throw new runtime.RequiredError('chainCode', 'Required parameter requestParameters.chainCode was null or undefined when calling downloadExternalProfile.');
            }
            if (requestParameters.profileExternalId === null || requestParameters.profileExternalId === undefined) {
                throw new runtime.RequiredError('profileExternalId', 'Required parameter requestParameters.profileExternalId was null or undefined when calling downloadExternalProfile.');
            }
            const queryParameters = {};
            if (requestParameters.externalDatabaseId !== undefined) {
                queryParameters['externalDatabaseId'] = requestParameters.externalDatabaseId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
                headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/chains/{chainCode}/externalProfiles/{profileExternalId}`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"profileExternalId"}}`, encodeURIComponent(String(requestParameters.profileExternalId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProfileFromJSON)(jsonValue));
        });
    }
    /**
     * After searching for profiles in an external system using getExternalProfiles, proceed to use this API knowing the external profile ID in the path.  The result will be a new profile created in OPERA. <p><strong>OperationId:</strong>downloadExternalProfile</p>
     * Download a Profile from external system
     */
    downloadExternalProfile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.downloadExternalProfileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you want to search for profiles in an external system. The response will include a list of profiles that exist in the external system, based on your search criteria.  For example, you want to see if the external system has a profile for Mr David Smith.  The GET API will send a request to external system, and the response will include a list of any profiles that exist for Mr Davis Smith in that system.  If a profile does exist, and the user would like to \'download\' that profile into OPERA, you would then proceed to use the downlodExternalProfiles API.
     * Retrieve profiles from external system
     */
    getExternalProfilesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getExternalProfiles.');
            }
            if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
                throw new runtime.RequiredError('chainCode', 'Required parameter requestParameters.chainCode was null or undefined when calling getExternalProfiles.');
            }
            const queryParameters = {};
            if (requestParameters.externalDatabaseId !== undefined) {
                queryParameters['externalDatabaseId'] = requestParameters.externalDatabaseId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.profileId) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdType) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.city !== undefined) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.postalCode !== undefined) {
                queryParameters['postalCode'] = requestParameters.postalCode;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.countryCode !== undefined) {
                queryParameters['countryCode'] = requestParameters.countryCode;
            }
            if (requestParameters.keyword !== undefined) {
                queryParameters['keyword'] = requestParameters.keyword;
            }
            if (requestParameters.communication !== undefined) {
                queryParameters['communication'] = requestParameters.communication;
            }
            if (requestParameters.membershipNumber !== undefined) {
                queryParameters['membershipNumber'] = requestParameters.membershipNumber;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.arNumber !== undefined) {
                queryParameters['arNumber'] = requestParameters.arNumber;
            }
            if (requestParameters.birthDate !== undefined) {
                queryParameters['birthDate'] = requestParameters.birthDate.toISOString().substring(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/chains/{chainCode}/externalProfiles`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ExternalProfilesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you want to search for profiles in an external system. The response will include a list of profiles that exist in the external system, based on your search criteria.  For example, you want to see if the external system has a profile for Mr David Smith.  The GET API will send a request to external system, and the response will include a list of any profiles that exist for Mr Davis Smith in that system.  If a profile does exist, and the user would like to \'download\' that profile into OPERA, you would then proceed to use the downlodExternalProfiles API.
     * Retrieve profiles from external system
     */
    getExternalProfiles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getExternalProfilesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you have a guest profile and you want to get the offers available from an external system. <p><strong>OperationId:</strong>getGamingOffers</p>
     * Get offers that can be attached for a profile
     */
    getGamingOffersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipNo === null || requestParameters.membershipNo === undefined) {
                throw new runtime.RequiredError('membershipNo', 'Required parameter requestParameters.membershipNo was null or undefined when calling getGamingOffers.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getGamingOffers.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/gamingOffers/{membershipNo}`.replace(`{${"membershipNo"}}`, encodeURIComponent(String(requestParameters.membershipNo))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GamingOffersFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you have a guest profile and you want to get the offers available from an external system. <p><strong>OperationId:</strong>getGamingOffers</p>
     * Get offers that can be attached for a profile
     */
    getGamingOffers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGamingOffersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request for the fetch player statistics WS operation <p><strong>OperationId:</strong>getPlayerStatistics</p>
     * Retrieve player statistics
     */
    getPlayerStatisticsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getPlayerStatistics.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getPlayerStatistics.');
            }
            const queryParameters = {};
            if (requestParameters.playerId !== undefined) {
                queryParameters['playerId'] = requestParameters.playerId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/playerStatistics/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchPlayerStatisticsRSFromJSON)(jsonValue));
        });
    }
    /**
     * Request for the fetch player statistics WS operation <p><strong>OperationId:</strong>getPlayerStatistics</p>
     * Retrieve player statistics
     */
    getPlayerStatistics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPlayerStatisticsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you want to fetch full address information for a given address Id. <p><strong>OperationId:</strong>getValidatedAddress</p>
     * Get full Address information from third party system for a given external Address ID. The external Address ID is fetched from valdatedAddresses service.
     */
    getValidatedAddressRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.externalAddressId === null || requestParameters.externalAddressId === undefined) {
                throw new runtime.RequiredError('externalAddressId', 'Required parameter requestParameters.externalAddressId was null or undefined when calling getValidatedAddress.');
            }
            const queryParameters = {};
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/validatedAddresses/{externalAddressId}`.replace(`{${"externalAddressId"}}`, encodeURIComponent(String(requestParameters.externalAddressId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatedAddressFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you want to fetch full address information for a given address Id. <p><strong>OperationId:</strong>getValidatedAddress</p>
     * Get full Address information from third party system for a given external Address ID. The external Address ID is fetched from valdatedAddresses service.
     */
    getValidatedAddress(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getValidatedAddressRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you want to validate address from a third party vendor. The response will be a list of addresses with its address ID based on the search criteria. <p><strong>OperationId:</strong>getValidatedAddresses</p>
     * Retrive valid addresses from a third party vendor.
     */
    getValidatedAddressesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.addressText === null || requestParameters.addressText === undefined) {
                throw new runtime.RequiredError('addressText', 'Required parameter requestParameters.addressText was null or undefined when calling getValidatedAddresses.');
            }
            if (requestParameters.country === null || requestParameters.country === undefined) {
                throw new runtime.RequiredError('country', 'Required parameter requestParameters.country was null or undefined when calling getValidatedAddresses.');
            }
            const queryParameters = {};
            if (requestParameters.addressText !== undefined) {
                queryParameters['addressText'] = requestParameters.addressText;
            }
            if (requestParameters.country !== undefined) {
                queryParameters['country'] = requestParameters.country;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/validatedAddresses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatedAddressesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you want to validate address from a third party vendor. The response will be a list of addresses with its address ID based on the search criteria. <p><strong>OperationId:</strong>getValidatedAddresses</p>
     * Retrive valid addresses from a third party vendor.
     */
    getValidatedAddresses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getValidatedAddressesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you want to validate membership numbers from external system. <p><strong>OperationId:</strong>validateMembershipNumber</p>
     * Validate Membership Number attached to a membership
     */
    validateMembershipNumberRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
                throw new runtime.RequiredError('chainCode', 'Required parameter requestParameters.chainCode was null or undefined when calling validateMembershipNumber.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling validateMembershipNumber.');
            }
            if (requestParameters.membershipNo === null || requestParameters.membershipNo === undefined) {
                throw new runtime.RequiredError('membershipNo', 'Required parameter requestParameters.membershipNo was null or undefined when calling validateMembershipNumber.');
            }
            if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
                throw new runtime.RequiredError('membershipType', 'Required parameter requestParameters.membershipType was null or undefined when calling validateMembershipNumber.');
            }
            const queryParameters = {};
            if (requestParameters.membershipNo !== undefined) {
                queryParameters['membershipNo'] = requestParameters.membershipNo;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/chains/{chainCode}/validateMembershipNumber`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidateMembershipNumberFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you want to validate membership numbers from external system. <p><strong>OperationId:</strong>validateMembershipNumber</p>
     * Validate Membership Number attached to a membership
     */
    validateMembershipNumber(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateMembershipNumberRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ProfileExternalApi = ProfileExternalApi;
/**
 * @export
 */
exports.GetExternalProfilesProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
};
