"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * oAuth API for OHIP
 * REST API to obtain an OAuth token from the Oracle Hospitality Integration Platform.  <p>For authenticating to Distribution APIs please use the Early Release OPERA Cloud Distribution Authentication API.</p><br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2TokenResponseToJSON = exports.OAuth2TokenResponseFromJSONTyped = exports.OAuth2TokenResponseFromJSON = exports.instanceOfOAuth2TokenResponse = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the OAuth2TokenResponse interface.
 */
function instanceOfOAuth2TokenResponse(value) {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    return isInstance;
}
exports.instanceOfOAuth2TokenResponse = instanceOfOAuth2TokenResponse;
function OAuth2TokenResponseFromJSON(json) {
    return OAuth2TokenResponseFromJSONTyped(json, false);
}
exports.OAuth2TokenResponseFromJSON = OAuth2TokenResponseFromJSON;
function OAuth2TokenResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accessToken': json['access_token'],
        'expiresIn': !(0, runtime_1.exists)(json, 'expires_in') ? undefined : json['expires_in'],
        'tokenType': !(0, runtime_1.exists)(json, 'token_type') ? undefined : json['token_type'],
        'oracleTkContext': !(0, runtime_1.exists)(json, 'oracle_tk_context') ? undefined : json['oracle_tk_context'],
    };
}
exports.OAuth2TokenResponseFromJSONTyped = OAuth2TokenResponseFromJSONTyped;
function OAuth2TokenResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'access_token': value.accessToken,
        'expires_in': value.expiresIn,
        'token_type': value.tokenType,
        'oracle_tk_context': value.oracleTkContext,
    };
}
exports.OAuth2TokenResponseToJSON = OAuth2TokenResponseToJSON;
