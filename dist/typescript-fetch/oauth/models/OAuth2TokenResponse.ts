/* tslint:disable */
/* eslint-disable */
/**
 * oAuth API for OHIP
 * REST API to obtain an OAuth token from the Oracle Hospitality Integration Platform.  <p>For authenticating to Distribution APIs please use the Early Release OPERA Cloud Distribution Authentication API.</p><br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * OAuth2 token object sent as a response to the token request
 * @export
 * @interface OAuth2TokenResponse
 */
export interface OAuth2TokenResponse {
    /**
     * The access token.  Include this in the header for every subsequent request.
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    accessToken: string;
    /**
     * Time in seconds for the access token to expire (typically, 3600 i.e. 60 minutes)
     * @type {number}
     * @memberof OAuth2TokenResponse
     */
    expiresIn?: number;
    /**
     * The type of access token issued (Bearer).
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    tokenType?: string;
    /**
     * Always user_assertion.
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    oracleTkContext?: string;
}

/**
 * Check if a given object implements the OAuth2TokenResponse interface.
 */
export function instanceOfOAuth2TokenResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;

    return isInstance;
}

export function OAuth2TokenResponseFromJSON(json: any): OAuth2TokenResponse {
    return OAuth2TokenResponseFromJSONTyped(json, false);
}

export function OAuth2TokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2TokenResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'expiresIn': !exists(json, 'expires_in') ? undefined : json['expires_in'],
        'tokenType': !exists(json, 'token_type') ? undefined : json['token_type'],
        'oracleTkContext': !exists(json, 'oracle_tk_context') ? undefined : json['oracle_tk_context'],
    };
}

export function OAuth2TokenResponseToJSON(value?: OAuth2TokenResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.accessToken,
        'expires_in': value.expiresIn,
        'token_type': value.tokenType,
        'oracle_tk_context': value.oracleTkContext,
    };
}

