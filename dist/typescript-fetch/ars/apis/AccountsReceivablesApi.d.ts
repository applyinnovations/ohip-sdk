/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Account, AccountComment, AccountCriteria, AccountFixedCharge, AccountTrace, AccountsInfo, ArAccountCopy, ArAgingCycles, ArChargesPostingCriteria, ArCompressInvoices, ArCreditCardPayments, ArCreditCardPaymentsToTransfer, ArFolioPrinters, ArInvoice, ArInvoiceDetails, ArInvoicesAccount, ArOldBalances, ArPayments, ArPaymentsToBeCreated, ArTransactions, BatchChargesToPost, CompressedARInvoices, CreditToInvoices, Invoice, InvoiceAppliedPayments, InvoicePayment, InvoicePostings, Invoices, InvoicesAndPaymentsToTransfer, InvoicesOnHold, InvoicesPayments, ProfileAging, ProfileYearView, Reminders, RemindersHistory, ReversePayment, StatementHistory, Statements, StatementsToBeGenerated, Status, TransferDirectBillsToAr, TransferPostings, UnlinkInvoiceFromStatement } from '../models/index';
export interface CompressARInvoicesRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arCompressInvoices?: ArCompressInvoices;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyARAccountRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountCopy?: ArAccountCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAccountRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAccountCommentRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    value?: string;
    hotel?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAccountFixedChargeRequest {
    fixedChargeId?: string;
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAccountTraceRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceID?: string;
    traceOn?: string;
    traceText?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeletePaymentsFromInvoiceRequest {
    transactionId?: string;
    invoiceId?: string;
    hotelId?: string;
    trxNo?: Array<number>;
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierID?: number;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARAgingCyclesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARCreditCardPaymentsRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endDate?: Date;
    startDate?: Date;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARFolioPrintersRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    balance?: number;
    overrideCreditHoldCheck?: boolean;
    cashierId?: number;
    profileId?: string;
    accountNo?: string;
    accountName?: string;
    guestProfileId?: string;
    guestProfileIdContext?: string;
    guestProfileType?: string;
    folioWindowNo?: Array<number>;
    chargeCashierId?: Array<number>;
    chargeTransactionCode?: Array<string>;
    articleCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    postingQuantity?: Array<number>;
    postingReference?: Array<string>;
    postingRemark?: Array<string>;
    checkNumber?: Array<string>;
    arrangementCode?: Array<string>;
    applyRoutingInstructions?: Array<boolean>;
    usePackageAllowance?: Array<boolean>;
    autoPosting?: Array<boolean>;
    financialTransactionId?: Array<string>;
    financialTransactionIdContext?: Array<string>;
    financialTransactionType?: Array<string>;
    reference?: string;
    remark?: string;
    folioType?: string;
    generateFiscalFolio?: boolean;
    queueName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    profileId?: Array<string>;
    profileIdContext?: string;
    profileType?: string;
    accountID?: Array<string>;
    accountNo?: Array<string>;
    accountName?: Array<string>;
    canBeModified?: Array<boolean>;
    closeDate?: Array<Date>;
    fiscalBillNo?: Array<string>;
    folioDate?: Array<Date>;
    folioNo?: Array<number>;
    folioStatus?: Set<GetARStatementsFolioStatusEnum>;
    folioTypeName?: Array<string>;
    internalFolioWindowID?: Array<string>;
    invoiceNo?: Array<number>;
    invoiceType?: Set<GetARStatementsInvoiceTypeEnum>;
    postingDate?: Array<Date>;
    revenueDate?: Array<Date>;
    statementNo?: Array<number>;
    status?: Array<string>;
    transferDate?: Array<Date>;
    invoiceTransactionCode?: Array<string>;
    transactionDate?: Array<Date>;
    transactionNo?: Array<number>;
    invoiceHotelIds?: Array<string>;
    reservationId?: string;
    reservationIdContext?: string;
    reservationType?: string;
    guestProfileId?: string;
    guestProfileIdContext?: string;
    guestProfileType?: string;
    age?: Array<number>;
    guestName?: Array<string>;
    originalAmount?: number;
    originalAmountCurrencyCode?: string;
    amount?: number;
    currencyCode?: string;
    paymentsAmount?: number;
    paymentsCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    reference?: Array<string>;
    remark?: Array<string>;
    adjusted?: Array<boolean>;
    parentInvoiceNo?: Array<number>;
    compressed?: Array<boolean>;
    compressedDate?: Array<Date>;
    transferredOut?: Array<boolean>;
    transferredIn?: Array<boolean>;
    marketDescription?: string;
    marketHotelId?: string;
    marketCode?: string;
    marketGroup?: string;
    roomClassDescription?: string;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceDescription?: string;
    sourceHotelId?: string;
    sourceCode?: string;
    sourceGroup?: string;
    cashierId?: number;
    cashierName?: string;
    transactionHotelId?: string;
    printTrxReceipt?: boolean;
    accountInvoiceTransactionCode?: string;
    transactionDescription?: string;
    transactionGroup?: string;
    transactionSubGroup?: string;
    universalProductCode?: string;
    routingInstructionsId?: number;
    articleCode?: Array<string>;
    articleHotelIds?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    articleDescription?: Array<string>;
    transactionCode?: Array<string>;
    articleAmount?: number;
    articleCurrencyCode?: string;
    availableForPostIt?: boolean;
    color?: GetARStatementsColorEnum;
    articleUniversalProductCode?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetARStatementsCardOrTokenEnum;
    cardType?: GetARStatementsCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetARStatementsProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    invoicePaymentCardId?: string;
    invoicePaymentCardIdContext?: string;
    invoicePaymentCardIdType?: string;
    currentAuthorizedAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmount?: number;
    approvalAmountCurrencyCode?: string;
    type?: string;
    addresseeProfileId?: string;
    addresseeProfileIdContext?: string;
    addresseeProfileType?: string;
    name?: string;
    city?: string;
    phone?: string;
    allowPartialTransferYn?: Array<boolean>;
    printed?: Array<boolean>;
    printedDate?: Array<Date>;
    storedFolioId?: string;
    storedFolioIdContext?: string;
    storedFolioType?: string;
    storedFolioName?: Array<string>;
    storedDebitFolioId?: string;
    storedDebitFolioIdContext?: string;
    storedDebitFolioType?: string;
    storedDebitFolioName?: Array<string>;
    balanceForwardDate?: Date;
    inclFolios?: boolean;
    inclPrinted?: boolean;
    inclZero?: boolean;
    filterEndDate?: Date;
    filterStartDate?: Date;
    statementText?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARTransactionsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accounts?: string;
    endDate?: Date;
    startDate?: Date;
    fromAmount?: number;
    fromCurrencyCode?: string;
    toAmount?: number;
    toCurrencyCode?: string;
    guestName?: string;
    invoices?: Array<number>;
    folios?: Array<string>;
    fiscalBillNo?: string;
    accountName?: string;
    addresseName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAccountRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountNo?: string;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    fetchInstructions?: Set<GetAccountFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    balance?: GetAccountsBalanceEnum;
    batchStatement?: boolean;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    type?: string;
    accountNo?: Array<string>;
    accountName?: string;
    accountId?: Array<string>;
    accountIdContext?: Array<string>;
    accountType?: Array<string>;
    includeStatementHistoryIndicator?: boolean;
    includeReminderHistoryIndicator?: boolean;
    superSearch?: string;
    searchHotelIds?: Array<string>;
    attributeName?: Array<string>;
    orderType?: Set<GetAccountsOrderTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAppliedInvoicePaymentsRequest {
    accountId?: string;
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInvoiceAppliedPaymentsRequest {
    accountId?: string;
    transactionId?: string;
    invoiceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInvoicePaymentDetailRequest {
    transactionId?: string;
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    accountNo?: string;
    accountName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInvoicePostingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    canBeModified?: boolean;
    closeDate?: Date;
    fiscalBillNo?: string;
    folioDate?: Date;
    folioNo?: number;
    folioStatus?: GetInvoicePostingsFolioStatusEnum;
    folioTypeName?: string;
    internalFolioWindowID?: string;
    invoiceNo?: number;
    invoiceType?: GetInvoicePostingsInvoiceTypeEnum;
    postingDate?: Date;
    revenueDate?: Date;
    statementNo?: number;
    status?: string;
    transferDate?: Date;
    postingTransactionCode?: string;
    transactionDate?: Date;
    transactionNo?: number;
    cashierId?: number;
    hotelId?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationType?: string;
    guestProfileId?: string;
    guestProfileIdContext?: string;
    guestProfileType?: string;
    age?: number;
    guestName?: string;
    originalAmount?: number;
    originalAmountCurrencyCode?: string;
    amount?: number;
    currencyCode?: string;
    paymentsAmount?: number;
    paymentsCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    reference?: string;
    remark?: string;
    adjusted?: boolean;
    parentInvoiceNo?: number;
    compressed?: boolean;
    compressedDate?: Date;
    transferredOut?: boolean;
    transferredIn?: boolean;
    marketDescription?: string;
    marketHotelId?: string;
    marketCode?: string;
    marketGroup?: string;
    roomClassDescription?: string;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceDescription?: string;
    sourceHotelId?: string;
    sourceCode?: string;
    sourceGroup?: string;
    cashierInfoCashierId?: number;
    cashierName?: string;
    transactionHotelId?: string;
    printTrxReceipt?: boolean;
    invoicePostingsTransactionCode?: string;
    transactionDescription?: string;
    transactionGroup?: string;
    transactionSubGroup?: string;
    universalProductCode?: string;
    routingInstructionsId?: number;
    articleCode?: Array<string>;
    articleHotelIds?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    articleDescription?: Array<string>;
    transactionCode?: Array<string>;
    articleAmount?: number;
    articleCurrencyCode?: string;
    availableForPostIt?: boolean;
    color?: GetInvoicePostingsColorEnum;
    articleUniversalProductCode?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetInvoicePostingsCardOrTokenEnum;
    cardType?: GetInvoicePostingsCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetInvoicePostingsProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    paymentCardIdContext?: string;
    paymentCardIdType?: string;
    currentAuthorizedAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmount?: number;
    approvalAmountCurrencyCode?: string;
    addresseeType?: string;
    addressProfileId?: string;
    addressProfileIdContext?: string;
    addressProfileIdType?: string;
    name?: string;
    city?: string;
    phone?: string;
    allowPartialTransferYn?: boolean;
    printed?: boolean;
    printedDate?: Date;
    storedFolioId?: string;
    storedFolioIdContext?: string;
    storedFolioType?: string;
    storedFolioName?: string;
    storedDebitFolioId?: string;
    storedDebitFolioIdContext?: string;
    storedDebitFolioType?: string;
    storedDebitFolioName?: string;
    accountId?: string;
    accountIdContext?: string;
    accountType?: string;
    accountNo?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    additionalFilterCashierId?: number;
    additionalFilterTransactionCode?: Array<string>;
    additionalFilterTransactionSubGroupCode?: Array<string>;
    end?: Date;
    start?: Date;
    referenceWildCard?: string;
    supplementWildCard?: string;
    checkNumberWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInvoicesOnHoldRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    id?: string;
    accountIdContext?: string;
    accountType?: string;
    accountNo?: string;
    accountName?: string;
    endDate?: Date;
    startDate?: Date;
    folios?: string;
    invoices?: number;
    fiscalBillNo?: string;
    guestName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInvoicesPaymentsRequest {
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inclDetails?: boolean;
    inclZeroBalance?: boolean;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    end?: Date;
    start?: Date;
    guestDisplayName?: string;
    remark?: string;
    reference?: string;
    invoiceNo?: Array<number>;
    addresseeName?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationType?: string;
    printed?: boolean;
    unBilled?: boolean;
    folioNo?: Array<string>;
    fiscalBillNo?: string;
    statementNo?: number;
    fetchInstructions?: Set<GetInvoicesPaymentsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileAgingRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currency?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileYearViewRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currency?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRemindersRequest {
    accounts?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    profiles?: Array<string>;
    accountNo?: Array<string>;
    accountName?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRemindersHistoryRequest {
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    profileId?: string;
    accountIdContext?: string;
    accountType?: string;
    accountNo?: string;
    accountName?: string;
    dateSent?: Date;
    reportFileNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStatementsRequest {
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    accountNo?: Array<string>;
    accountName?: Array<string>;
    canBeModified?: Array<boolean>;
    closeDate?: Array<Date>;
    fiscalBillNo?: Array<string>;
    folioDate?: Array<Date>;
    folioNo?: Array<number>;
    folioStatus?: Set<GetStatementsFolioStatusEnum>;
    folioTypeName?: Array<string>;
    internalFolioWindowID?: Array<string>;
    invoiceNo?: Array<number>;
    invoiceType?: Set<GetStatementsInvoiceTypeEnum>;
    postingDate?: Array<Date>;
    revenueDate?: Array<Date>;
    statementNo?: Array<number>;
    status?: Array<string>;
    transferDate?: Array<Date>;
    invoiceTransactionCode?: Array<string>;
    transactionDate?: Array<Date>;
    transactionNo?: Array<number>;
    invoiceHotelIds?: Array<string>;
    reservationId?: string;
    reservationIdContext?: string;
    reservationType?: string;
    guestProfileId?: string;
    guestProfileIdContext?: string;
    guestProfileType?: string;
    age?: Array<number>;
    guestName?: Array<string>;
    originalAmount?: number;
    originalAmountCurrencyCode?: string;
    amount?: number;
    currencyCode?: string;
    paymentsAmount?: number;
    paymentsCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    reference?: Array<string>;
    remark?: Array<string>;
    adjusted?: Array<boolean>;
    parentInvoiceNo?: Array<number>;
    compressed?: Array<boolean>;
    compressedDate?: Array<Date>;
    transferredOut?: Array<boolean>;
    transferredIn?: Array<boolean>;
    marketDescription?: string;
    marketHotelId?: string;
    marketCode?: string;
    marketGroup?: string;
    roomClassDescription?: string;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceDescription?: string;
    sourceHotelId?: string;
    sourceCode?: string;
    sourceGroup?: string;
    cashierId?: number;
    cashierName?: string;
    transactionHotelId?: string;
    printTrxReceipt?: boolean;
    accountInvoiceTransactionCode?: string;
    transactionDescription?: string;
    transactionGroup?: string;
    transactionSubGroup?: string;
    universalProductCode?: string;
    routingInstructionsId?: number;
    articleCode?: Array<string>;
    articleHotelIds?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    articleDescription?: Array<string>;
    transactionCode?: Array<string>;
    articleAmount?: number;
    articleCurrencyCode?: string;
    availableForPostIt?: boolean;
    color?: GetStatementsColorEnum;
    articleUniversalProductCode?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetStatementsCardOrTokenEnum;
    cardType?: GetStatementsCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetStatementsProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    invoicePaymentCardId?: string;
    invoicePaymentCardIdContext?: string;
    invoicePaymentCardIdType?: string;
    currentAuthorizedAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmount?: number;
    approvalAmountCurrencyCode?: string;
    type?: string;
    addresseeProfileId?: string;
    addresseeProfileIdContext?: string;
    addresseeProfileType?: string;
    name?: string;
    city?: string;
    phone?: string;
    allowPartialTransferYn?: Array<boolean>;
    printed?: Array<boolean>;
    printedDate?: Array<Date>;
    storedFolioId?: string;
    storedFolioIdContext?: string;
    storedFolioType?: string;
    storedFolioName?: Array<string>;
    storedDebitFolioId?: string;
    storedDebitFolioIdContext?: string;
    storedDebitFolioType?: string;
    storedDebitFolioName?: Array<string>;
    balanceForwardDate?: Date;
    inclFolios?: boolean;
    inclPrinted?: boolean;
    inclZero?: boolean;
    filterEndDate?: Date;
    filterStartDate?: Date;
    statementText?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStatementsHistoryRequest {
    accountId?: string;
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountNo?: string;
    accountName?: string;
    dateSent?: Date;
    reportFileNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostARChargesRequest {
    accountId?: string;
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arChargesPostingCriteria?: ArChargesPostingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAROldBalancesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arOldBalances?: ArOldBalances;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostARPaymentsRequest {
    accountId?: string;
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arPaymentsToBeCreated?: ArPaymentsToBeCreated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAccountRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountCriteria?: AccountCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAccountCommentRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountComment?: AccountComment;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAccountFixedChargeRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountFixedCharge?: AccountFixedCharge;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAccountTraceRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTrace?: AccountTrace;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBatchChargesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchChargesToPost?: BatchChargesToPost;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostChargesToARRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arChargesPostingCriteria?: ArChargesPostingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCreditToInvoicesRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditToInvoices?: CreditToInvoices;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostInvoiceRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arInvoice?: ArInvoice;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRemindersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reminders?: Reminders;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReversePaymentRequest {
    transactionId?: string;
    accountId?: string;
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reversePayment?: ReversePayment;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostStatementsRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    statementsToBeGenerated?: StatementsToBeGenerated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutARInvoicesAccountRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arInvoicesAccount?: ArInvoicesAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAccountRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    account?: Account;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAccountCommentRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountComment?: AccountComment;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAccountFixedChargeRequest {
    fixedChargeId?: string;
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountFixedCharge?: AccountFixedCharge;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAccountTraceRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTrace?: AccountTrace;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInvoiceRequest {
    invoiceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoice?: Invoice;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInvoiceDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoice?: Invoice;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInvoicesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoices?: Invoices;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemovePaymentsFromInvoiceRequest {
    transactionId?: string;
    hotelId?: string;
    trxNo?: Array<number>;
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierID?: number;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ReopenInvoicesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoices?: Invoices;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface TransferARCreditCardPaymentsRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arCreditCardPaymentsToTransfer?: ArCreditCardPaymentsToTransfer;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface TransferDirectBillsToArRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transferDirectBillsToAr?: TransferDirectBillsToAr;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface TransferInvoicesAndPaymentsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoicesAndPaymentsToTransfer?: InvoicesAndPaymentsToTransfer;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface TransferPostingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transferPostings?: TransferPostings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface UncompressARInvoicesRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    invoice?: Invoice;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface UnlinkInvoiceFromStatementRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    unlinkInvoiceFromStatement?: UnlinkInvoiceFromStatement;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class AccountsReceivablesApi extends runtime.BaseAPI {
    /**
     * Use this API to combine two or more invoices into one invoice <p><strong>OperationId:</strong>compressARInvoices</p>
     * Combines Account receivable invoices
     */
    compressARInvoicesRaw(requestParameters: CompressARInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompressedARInvoices>>;
    /**
     * Use this API to combine two or more invoices into one invoice <p><strong>OperationId:</strong>compressARInvoices</p>
     * Combines Account receivable invoices
     */
    compressARInvoices(requestParameters: CompressARInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompressedARInvoices>;
    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account
     */
    copyARAccountRaw(requestParameters: CopyARAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account
     */
    copyARAccount(requestParameters: CopyARAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete account detail for given unique account id. Use get accounts to find account id. <p><strong>OperationId:</strong>deleteAccount</p>
     * Delete Account
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete account detail for given unique account id. Use get accounts to find account id. <p><strong>OperationId:</strong>deleteAccount</p>
     * Delete Account
     */
    deleteAccount(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete notes from a given account id. Use get account with an instruction to get note id. <p><strong>OperationId:</strong>deleteAccountComment</p>
     * Delete Account Comment
     */
    deleteAccountCommentRaw(requestParameters: DeleteAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete notes from a given account id. Use get account with an instruction to get note id. <p><strong>OperationId:</strong>deleteAccountComment</p>
     * Delete Account Comment
     */
    deleteAccountComment(requestParameters: DeleteAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete fixed charges for a given account receivable id. Use getaccounts to find an account id. <p><strong>OperationId:</strong>deleteAccountFixedCharge</p>
     * Delete fixed charges
     */
    deleteAccountFixedChargeRaw(requestParameters: DeleteAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete fixed charges for a given account receivable id. Use getaccounts to find an account id. <p><strong>OperationId:</strong>deleteAccountFixedCharge</p>
     * Delete fixed charges
     */
    deleteAccountFixedCharge(requestParameters: DeleteAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteAccountTrace</p>
     * This API facilitates deletion of account traces.
     */
    deleteAccountTraceRaw(requestParameters: DeleteAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteAccountTrace</p>
     * This API facilitates deletion of account traces.
     */
    deleteAccountTrace(requestParameters: DeleteAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete payments from invoice.<br><p><strong><mark>This API is deprecated. Please use removePaymentsFromInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>deletePaymentsFromInvoice</p>
     * Delete payments from invoice
     * @deprecated
     */
    deletePaymentsFromInvoiceRaw(requestParameters: DeletePaymentsFromInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete payments from invoice.<br><p><strong><mark>This API is deprecated. Please use removePaymentsFromInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>deletePaymentsFromInvoice</p>
     * Delete payments from invoice
     * @deprecated
     */
    deletePaymentsFromInvoice(requestParameters: DeletePaymentsFromInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to get account receivable profile\'s aging summary including account name, summary, credit limit, total outstanding balance, etc. per aging bucket. <p><strong>OperationId:</strong>getARAgingCycles</p>
     * Get given AR account\'s aging detail
     */
    getARAgingCyclesRaw(requestParameters: GetARAgingCyclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArAgingCycles>>;
    /**
     * Use this API to get account receivable profile\'s aging summary including account name, summary, credit limit, total outstanding balance, etc. per aging bucket. <p><strong>OperationId:</strong>getARAgingCycles</p>
     * Get given AR account\'s aging detail
     */
    getARAgingCycles(requestParameters: GetARAgingCyclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArAgingCycles>;
    /**
     * Use this API to get lists of folios for guests who checked out using a credit card payment transaction code that has an account receivable associated with it. It also lists payments made prior to check out if the payment was made using a credit card transaction code that has a an account receivable associated with it. <p><strong>OperationId:</strong>getARCreditCardPayments</p>
     * Get account receivable folios which are paid using credit cards
     */
    getARCreditCardPaymentsRaw(requestParameters: GetARCreditCardPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArCreditCardPayments>>;
    /**
     * Use this API to get lists of folios for guests who checked out using a credit card payment transaction code that has an account receivable associated with it. It also lists payments made prior to check out if the payment was made using a credit card transaction code that has a an account receivable associated with it. <p><strong>OperationId:</strong>getARCreditCardPayments</p>
     * Get account receivable folios which are paid using credit cards
     */
    getARCreditCardPayments(requestParameters: GetARCreditCardPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArCreditCardPayments>;
    /**
     * Use this API to find account receivable folio printers <p><strong>OperationId:</strong>getARFolioPrinters</p>
     * Get list of account receivable folio printers
     */
    getARFolioPrintersRaw(requestParameters: GetARFolioPrintersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArFolioPrinters>>;
    /**
     * Use this API to find account receivable folio printers <p><strong>OperationId:</strong>getARFolioPrinters</p>
     * Get list of account receivable folio printers
     */
    getARFolioPrinters(requestParameters: GetARFolioPrintersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArFolioPrinters>;
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes. <p><strong>OperationId:</strong>getARStatements</p>
     * Get given profile\'s account receivable statements
     */
    getARStatementsRaw(requestParameters: GetARStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statements>>;
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes. <p><strong>OperationId:</strong>getARStatements</p>
     * Get given profile\'s account receivable statements
     */
    getARStatements(requestParameters: GetARStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statements>;
    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    getARTransactionsRaw(requestParameters: GetARTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArTransactions>>;
    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    getARTransactions(requestParameters: GetARTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArTransactions>;
    /**
     * Use this API to search for account receivable type account\'s  detail for given account id. <p><strong>OperationId:</strong>getAccount</p>
     * Get account
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;
    /**
     * Use this API to search for account receivable type account\'s  detail for given account id. <p><strong>OperationId:</strong>getAccount</p>
     * Get account
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;
    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    getAccountsRaw(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsInfo>>;
    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    getAccounts(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsInfo>;
    /**
     * Use this API to get applied payment details for AR invoices. <p><strong>OperationId:</strong>getAppliedInvoicePayments</p>
     * Get account receivable invoice\'s payment history
     */
    getAppliedInvoicePaymentsRaw(requestParameters: GetAppliedInvoicePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceAppliedPayments>>;
    /**
     * Use this API to get applied payment details for AR invoices. <p><strong>OperationId:</strong>getAppliedInvoicePayments</p>
     * Get account receivable invoice\'s payment history
     */
    getAppliedInvoicePayments(requestParameters: GetAppliedInvoicePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceAppliedPayments>;
    /**
     * Use this API to get applied payment details for AR invoices.<br><p><strong><mark>This API is deprecated. Please use getAppliedInvoicePayments instead</mark></strong></p> <p><strong>OperationId:</strong>getInvoiceAppliedPayments</p>
     * Get account receivable invoice\'s payment history
     * @deprecated
     */
    getInvoiceAppliedPaymentsRaw(requestParameters: GetInvoiceAppliedPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceAppliedPayments>>;
    /**
     * Use this API to get applied payment details for AR invoices.<br><p><strong><mark>This API is deprecated. Please use getAppliedInvoicePayments instead</mark></strong></p> <p><strong>OperationId:</strong>getInvoiceAppliedPayments</p>
     * Get account receivable invoice\'s payment history
     * @deprecated
     */
    getInvoiceAppliedPayments(requestParameters: GetInvoiceAppliedPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceAppliedPayments>;
    /**
     * Use this API to get AR account\'s invoice and payment details including credit, debit, amount due date, etc. <p><strong>OperationId:</strong>getInvoicePaymentDetail</p>
     * Get account receivable invoice and payment details
     */
    getInvoicePaymentDetailRaw(requestParameters: GetInvoicePaymentDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicePayment>>;
    /**
     * Use this API to get AR account\'s invoice and payment details including credit, debit, amount due date, etc. <p><strong>OperationId:</strong>getInvoicePaymentDetail</p>
     * Get account receivable invoice and payment details
     */
    getInvoicePaymentDetail(requestParameters: GetInvoicePaymentDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicePayment>;
    /**
     * Use this API to get account receivable postings. <p><strong>OperationId:</strong>getInvoicePostings</p>
     * Get account receivable invoice postings
     */
    getInvoicePostingsRaw(requestParameters: GetInvoicePostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicePostings>>;
    /**
     * Use this API to get account receivable postings. <p><strong>OperationId:</strong>getInvoicePostings</p>
     * Get account receivable invoice postings
     */
    getInvoicePostings(requestParameters: GetInvoicePostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicePostings>;
    /**
     * Use this API to get list of account receivable invoices which are put on hold. <p><strong>OperationId:</strong>getInvoicesOnHold</p>
     * Get list of hold invoices for account receivable
     */
    getInvoicesOnHoldRaw(requestParameters: GetInvoicesOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesOnHold>>;
    /**
     * Use this API to get list of account receivable invoices which are put on hold. <p><strong>OperationId:</strong>getInvoicesOnHold</p>
     * Get list of hold invoices for account receivable
     */
    getInvoicesOnHold(requestParameters: GetInvoicesOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesOnHold>;
    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    getInvoicesPaymentsRaw(requestParameters: GetInvoicesPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesPayments>>;
    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    getInvoicesPayments(requestParameters: GetInvoicesPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesPayments>;
    /**
     * Use this API to get profile\'s account receivable summary including fixed charges, account balance, statements, reminder history, etc. <p><strong>OperationId:</strong>getProfileAging</p>
     * Get given profile\'s aging detail
     */
    getProfileAgingRaw(requestParameters: GetProfileAgingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileAging>>;
    /**
     * Use this API to get profile\'s account receivable summary including fixed charges, account balance, statements, reminder history, etc. <p><strong>OperationId:</strong>getProfileAging</p>
     * Get given profile\'s aging detail
     */
    getProfileAging(requestParameters: GetProfileAgingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileAging>;
    /**
     * Use this API to get a month-by-month total of accrued debits, accrued credits, and a net total for the selected account data. <p><strong>OperationId:</strong>getProfileYearView</p>
     * Get given profile\'s yearly account receivable detail
     */
    getProfileYearViewRaw(requestParameters: GetProfileYearViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileYearView>>;
    /**
     * Use this API to get a month-by-month total of accrued debits, accrued credits, and a net total for the selected account data. <p><strong>OperationId:</strong>getProfileYearView</p>
     * Get given profile\'s yearly account receivable detail
     */
    getProfileYearView(requestParameters: GetProfileYearViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileYearView>;
    /**
     * Use this API to get AR account holders\' reminder letter that includes detail of payment due, their current account balance, or for other purposes. <p><strong>OperationId:</strong>getReminders</p>
     * Get account receivable\'s reminder statements
     */
    getRemindersRaw(requestParameters: GetRemindersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reminders>>;
    /**
     * Use this API to get AR account holders\' reminder letter that includes detail of payment due, their current account balance, or for other purposes. <p><strong>OperationId:</strong>getReminders</p>
     * Get account receivable\'s reminder statements
     */
    getReminders(requestParameters: GetRemindersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reminders>;
    /**
     * Use this API to get history of reminder letters prepared for AR account. <p><strong>OperationId:</strong>getRemindersHistory</p>
     * Get history of reminder letters for a given account receivable
     */
    getRemindersHistoryRaw(requestParameters: GetRemindersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemindersHistory>>;
    /**
     * Use this API to get history of reminder letters prepared for AR account. <p><strong>OperationId:</strong>getRemindersHistory</p>
     * Get history of reminder letters for a given account receivable
     */
    getRemindersHistory(requestParameters: GetRemindersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemindersHistory>;
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes.<br><p><strong><mark>This API is deprecated. Please use getARStatements instead</mark></strong></p> <p><strong>OperationId:</strong>getStatements</p>
     * Get given profile\'s account receivable statements
     * @deprecated
     */
    getStatementsRaw(requestParameters: GetStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statements>>;
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes.<br><p><strong><mark>This API is deprecated. Please use getARStatements instead</mark></strong></p> <p><strong>OperationId:</strong>getStatements</p>
     * Get given profile\'s account receivable statements
     * @deprecated
     */
    getStatements(requestParameters: GetStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statements>;
    /**
     * Use this API to find the history of statements prepared for AR accounts. <p><strong>OperationId:</strong>getStatementsHistory</p>
     * Get given profile\'s account receivable statements history
     */
    getStatementsHistoryRaw(requestParameters: GetStatementsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatementHistory>>;
    /**
     * Use this API to find the history of statements prepared for AR accounts. <p><strong>OperationId:</strong>getStatementsHistory</p>
     * Get given profile\'s account receivable statements history
     */
    getStatementsHistory(requestParameters: GetStatementsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatementHistory>;
    /**
     * Use this API to post charges to account receivable account.<br><p><strong><mark>This API is deprecated. Please use postChargesToAR instead</mark></strong></p> <p><strong>OperationId:</strong>postARCharges</p>
     * Add charges to account receivable
     * @deprecated
     */
    postARChargesRaw(requestParameters: PostARChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to post charges to account receivable account.<br><p><strong><mark>This API is deprecated. Please use postChargesToAR instead</mark></strong></p> <p><strong>OperationId:</strong>postARCharges</p>
     * Add charges to account receivable
     * @deprecated
     */
    postARCharges(requestParameters: PostARChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add old balances from external accounting systems into OPERA Accounts Receivable. <p><strong>OperationId:</strong>postAROldBalances</p>
     * Add old balances from external accounting systems
     */
    postAROldBalancesRaw(requestParameters: PostAROldBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add old balances from external accounting systems into OPERA Accounts Receivable. <p><strong>OperationId:</strong>postAROldBalances</p>
     * Add old balances from external accounting systems
     */
    postAROldBalances(requestParameters: PostAROldBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to make payment to AR accounts for a list of reservations. <p><strong>OperationId:</strong>postARPayments</p>
     * Add payment to an account receivable account for a list of reservations
     */
    postARPaymentsRaw(requestParameters: PostARPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArPayments>>;
    /**
     * Use this API to make payment to AR accounts for a list of reservations. <p><strong>OperationId:</strong>postARPayments</p>
     * Add payment to an account receivable account for a list of reservations
     */
    postARPayments(requestParameters: PostARPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArPayments>;
    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    postAccountRaw(requestParameters: PostAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    postAccount(requestParameters: PostAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add a note for a given account id. Use get accounts to find account id. <p><strong>OperationId:</strong>postAccountComment</p>
     * Create Account Comment
     */
    postAccountCommentRaw(requestParameters: PostAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add a note for a given account id. Use get accounts to find account id. <p><strong>OperationId:</strong>postAccountComment</p>
     * Create Account Comment
     */
    postAccountComment(requestParameters: PostAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create fixed charges for a given account id of account receivable. Use get accounts to find an account id. <p><strong>OperationId:</strong>postAccountFixedCharge</p>
     * Create fixed charges
     */
    postAccountFixedChargeRaw(requestParameters: PostAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create fixed charges for a given account id of account receivable. Use get accounts to find an account id. <p><strong>OperationId:</strong>postAccountFixedCharge</p>
     * Create fixed charges
     */
    postAccountFixedCharge(requestParameters: PostAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add a trace for a given account id. Use getaccounts to find account id. <p><strong>OperationId:</strong>postAccountTrace</p>
     * Add a trace to an account receivable account
     */
    postAccountTraceRaw(requestParameters: PostAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add a trace for a given account id. Use getaccounts to find account id. <p><strong>OperationId:</strong>postAccountTrace</p>
     * Add a trace to an account receivable account
     */
    postAccountTrace(requestParameters: PostAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a batch process for simultaneously post a one-time charge to multiple account receivable accounts. <p><strong>OperationId:</strong>postBatchCharges</p>
     * Create process to charge on multiple account receivables
     */
    postBatchChargesRaw(requestParameters: PostBatchChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a batch process for simultaneously post a one-time charge to multiple account receivable accounts. <p><strong>OperationId:</strong>postBatchCharges</p>
     * Create process to charge on multiple account receivables
     */
    postBatchCharges(requestParameters: PostBatchChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to post charges to account receivable account. <p><strong>OperationId:</strong>postChargesToAR</p>
     * Add charges to account receivable
     */
    postChargesToARRaw(requestParameters: PostChargesToARRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to post charges to account receivable account. <p><strong>OperationId:</strong>postChargesToAR</p>
     * Add charges to account receivable
     */
    postChargesToAR(requestParameters: PostChargesToARRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add credits to account receivable invoices. <p><strong>OperationId:</strong>postCreditToInvoices</p>
     * Add credits to AR invoices
     */
    postCreditToInvoicesRaw(requestParameters: PostCreditToInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add credits to account receivable invoices. <p><strong>OperationId:</strong>postCreditToInvoices</p>
     * Add credits to AR invoices
     */
    postCreditToInvoices(requestParameters: PostCreditToInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new invoice for an AR account. <p><strong>OperationId:</strong>postInvoice</p>
     * Create account receivable invoices
     */
    postInvoiceRaw(requestParameters: PostInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArInvoiceDetails>>;
    /**
     * Use this API to create a new invoice for an AR account. <p><strong>OperationId:</strong>postInvoice</p>
     * Create account receivable invoices
     */
    postInvoice(requestParameters: PostInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArInvoiceDetails>;
    /**
     * Use this API to generate a reminder statement which includes payment due,  current account balance, and etc. of account receivable account holder. <p><strong>OperationId:</strong>postReminders</p>
     * Generate reminders
     */
    postRemindersRaw(requestParameters: PostRemindersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to generate a reminder statement which includes payment due,  current account balance, and etc. of account receivable account holder. <p><strong>OperationId:</strong>postReminders</p>
     * Generate reminders
     */
    postReminders(requestParameters: PostRemindersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to reverse payment that occurred accidently or via user error. <p><strong>OperationId:</strong>postReversePayment</p>
     * Reverse Payment
     */
    postReversePaymentRaw(requestParameters: PostReversePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to reverse payment that occurred accidently or via user error. <p><strong>OperationId:</strong>postReversePayment</p>
     * Reverse Payment
     */
    postReversePayment(requestParameters: PostReversePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to generate statement for a given account receivable id. It includes the account balance as of the current business date, an aging summary that shows how long outstanding balances have been \"on the books\" for each aging level set up for given property. <p><strong>OperationId:</strong>postStatements</p>
     * Generate a statement for a given account receivable
     */
    postStatementsRaw(requestParameters: PostStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to generate statement for a given account receivable id. It includes the account balance as of the current business date, an aging summary that shows how long outstanding balances have been \"on the books\" for each aging level set up for given property. <p><strong>OperationId:</strong>postStatements</p>
     * Generate a statement for a given account receivable
     */
    postStatements(requestParameters: PostStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update existing AR invoice for a given profile and/or a reservation. <p><strong>OperationId:</strong>putARInvoicesAccount</p>
     * Change Account receivable invoice for an AR account
     */
    putARInvoicesAccountRaw(requestParameters: PutARInvoicesAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update existing AR invoice for a given profile and/or a reservation. <p><strong>OperationId:</strong>putARInvoicesAccount</p>
     * Change Account receivable invoice for an AR account
     */
    putARInvoicesAccount(requestParameters: PutARInvoicesAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    putAccountRaw(requestParameters: PutAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    putAccount(requestParameters: PutAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update existing account note. Use get account to find noteid <p><strong>OperationId:</strong>putAccountComment</p>
     * Change Account Comment
     */
    putAccountCommentRaw(requestParameters: PutAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update existing account note. Use get account to find noteid <p><strong>OperationId:</strong>putAccountComment</p>
     * Change Account Comment
     */
    putAccountComment(requestParameters: PutAccountCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update existing fixed charges for a given account receivable. <p><strong>OperationId:</strong>putAccountFixedCharge</p>
     * Update fixed charge detail
     */
    putAccountFixedChargeRaw(requestParameters: PutAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update existing fixed charges for a given account receivable. <p><strong>OperationId:</strong>putAccountFixedCharge</p>
     * Update fixed charge detail
     */
    putAccountFixedCharge(requestParameters: PutAccountFixedChargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putAccountTrace</p>
     * This API facilitates modification of account traces.
     */
    putAccountTraceRaw(requestParameters: PutAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putAccountTrace</p>
     * This API facilitates modification of account traces.
     */
    putAccountTrace(requestParameters: PutAccountTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc.<br><p><strong><mark>This API is deprecated. Please use putInvoiceDetails instead</mark></strong></p> <p><strong>OperationId:</strong>putInvoice</p>
     * Update invoice detail.
     * @deprecated
     */
    putInvoiceRaw(requestParameters: PutInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc.<br><p><strong><mark>This API is deprecated. Please use putInvoiceDetails instead</mark></strong></p> <p><strong>OperationId:</strong>putInvoice</p>
     * Update invoice detail.
     * @deprecated
     */
    putInvoice(requestParameters: PutInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc. <p><strong>OperationId:</strong>putInvoiceDetails</p>
     * Update invoice detail.
     */
    putInvoiceDetailsRaw(requestParameters: PutInvoiceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc. <p><strong>OperationId:</strong>putInvoiceDetails</p>
     * Update invoice detail.
     */
    putInvoiceDetails(requestParameters: PutInvoiceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to close (\"freeze\") one or more selected invoices at any point after they have been created. When an invoice has been closed, no new postings to the invoice can be made, transaction reference or supplemental information can be edited, or adjustments to transaction codes can be made. However, payments can be posted to an invoice after it has been closed. <p><strong>OperationId:</strong>putInvoices</p>
     * Close account receivable invoices
     */
    putInvoicesRaw(requestParameters: PutInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to close (\"freeze\") one or more selected invoices at any point after they have been created. When an invoice has been closed, no new postings to the invoice can be made, transaction reference or supplemental information can be edited, or adjustments to transaction codes can be made. However, payments can be posted to an invoice after it has been closed. <p><strong>OperationId:</strong>putInvoices</p>
     * Close account receivable invoices
     */
    putInvoices(requestParameters: PutInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete payments from invoice. <p><strong>OperationId:</strong>removePaymentsFromInvoice</p>
     * Delete payments from invoice
     */
    removePaymentsFromInvoiceRaw(requestParameters: RemovePaymentsFromInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete payments from invoice. <p><strong>OperationId:</strong>removePaymentsFromInvoice</p>
     * Delete payments from invoice
     */
    removePaymentsFromInvoice(requestParameters: RemovePaymentsFromInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to unfreeze or reopen invoice for account receivable. <p><strong>OperationId:</strong>reopenInvoices</p>
     * Reopen account receivable closed invoice
     */
    reopenInvoicesRaw(requestParameters: ReopenInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to unfreeze or reopen invoice for account receivable. <p><strong>OperationId:</strong>reopenInvoices</p>
     * Reopen account receivable closed invoice
     */
    reopenInvoices(requestParameters: ReopenInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to transfer credit card payment transactions to Accounts Receivable. <p><strong>OperationId:</strong>transferARCreditCardPayments</p>
     * Move credit card payment to account receivable
     */
    transferARCreditCardPaymentsRaw(requestParameters: TransferARCreditCardPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to transfer credit card payment transactions to Accounts Receivable. <p><strong>OperationId:</strong>transferARCreditCardPayments</p>
     * Move credit card payment to account receivable
     */
    transferARCreditCardPayments(requestParameters: TransferARCreditCardPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to transfer direct bills to account receivable account <p><strong>OperationId:</strong>transferDirectBillsToAr</p>
     * Move direct bills to account receivable
     */
    transferDirectBillsToArRaw(requestParameters: TransferDirectBillsToArRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to transfer direct bills to account receivable account <p><strong>OperationId:</strong>transferDirectBillsToAr</p>
     * Move direct bills to account receivable
     */
    transferDirectBillsToAr(requestParameters: TransferDirectBillsToArRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to move all or a portion of an invoice or a payment from one AR account to another AR account <p><strong>OperationId:</strong>transferInvoicesAndPayments</p>
     * Move an invoice or a payment to another AR account
     */
    transferInvoicesAndPaymentsRaw(requestParameters: TransferInvoicesAndPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to move all or a portion of an invoice or a payment from one AR account to another AR account <p><strong>OperationId:</strong>transferInvoicesAndPayments</p>
     * Move an invoice or a payment to another AR account
     */
    transferInvoicesAndPayments(requestParameters: TransferInvoicesAndPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to transfer postings from one account receivable invoice to another account receivable invoice. <p><strong>OperationId:</strong>transferPostings</p>
     * Transfer postings
     */
    transferPostingsRaw(requestParameters: TransferPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to transfer postings from one account receivable invoice to another account receivable invoice. <p><strong>OperationId:</strong>transferPostings</p>
     * Transfer postings
     */
    transferPostings(requestParameters: TransferPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to reverse compressing account receivable invoices and break single combined invoice into individual invoices. <p><strong>OperationId:</strong>uncompressARInvoices</p>
     * Reverse the compressing invoice process
     */
    uncompressARInvoicesRaw(requestParameters: UncompressARInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to reverse compressing account receivable invoices and break single combined invoice into individual invoices. <p><strong>OperationId:</strong>uncompressARInvoices</p>
     * Reverse the compressing invoice process
     */
    uncompressARInvoices(requestParameters: UncompressARInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to remove the invoice from the statement before that invoice can be included in a different statement. <p><strong>OperationId:</strong>unlinkInvoiceFromStatement</p>
     * Unlink invoices from a statement
     */
    unlinkInvoiceFromStatementRaw(requestParameters: UnlinkInvoiceFromStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to remove the invoice from the statement before that invoice can be included in a different statement. <p><strong>OperationId:</strong>unlinkInvoiceFromStatement</p>
     * Unlink invoices from a statement
     */
    unlinkInvoiceFromStatement(requestParameters: UnlinkInvoiceFromStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetARStatementsFolioStatusEnum: {
    readonly Deposit: "Deposit";
    readonly Void: "Void";
    readonly Ok: "Ok";
    readonly Zero: "Zero";
    readonly Compress: "Compress";
    readonly Converted: "Converted";
    readonly Internal: "Internal";
};
export type GetARStatementsFolioStatusEnum = typeof GetARStatementsFolioStatusEnum[keyof typeof GetARStatementsFolioStatusEnum];
/**
 * @export
 */
export declare const GetARStatementsInvoiceTypeEnum: {
    readonly Normal: "Normal";
    readonly Credit: "Credit";
    readonly OldBalance: "OldBalance";
    readonly PasserBy: "PasserBy";
};
export type GetARStatementsInvoiceTypeEnum = typeof GetARStatementsInvoiceTypeEnum[keyof typeof GetARStatementsInvoiceTypeEnum];
/**
 * @export
 */
export declare const GetARStatementsColorEnum: {
    readonly Red: "Red";
    readonly DarkRed: "DarkRed";
    readonly Green: "Green";
    readonly DarkGreen: "DarkGreen";
    readonly LightGreen: "LightGreen";
    readonly Orange: "Orange";
    readonly White: "White";
    readonly Yellow: "Yellow";
    readonly DarkYellow: "DarkYellow";
    readonly Purple: "Purple";
    readonly Brown: "Brown";
    readonly Gray: "Gray";
    readonly Aqua: "Aqua";
    readonly Chocolate: "Chocolate";
    readonly Blue: "Blue";
    readonly LightBlue: "LightBlue";
    readonly DarkBlue: "DarkBlue";
    readonly Cyan: "Cyan";
    readonly DarkCyan: "DarkCyan";
    readonly Magenta: "Magenta";
    readonly DarkMagenta: "DarkMagenta";
    readonly Black: "Black";
};
export type GetARStatementsColorEnum = typeof GetARStatementsColorEnum[keyof typeof GetARStatementsColorEnum];
/**
 * @export
 */
export declare const GetARStatementsCardOrTokenEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type GetARStatementsCardOrTokenEnum = typeof GetARStatementsCardOrTokenEnum[keyof typeof GetARStatementsCardOrTokenEnum];
/**
 * @export
 */
export declare const GetARStatementsCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type GetARStatementsCardTypeEnum = typeof GetARStatementsCardTypeEnum[keyof typeof GetARStatementsCardTypeEnum];
/**
 * @export
 */
export declare const GetARStatementsProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type GetARStatementsProcessingEnum = typeof GetARStatementsProcessingEnum[keyof typeof GetARStatementsProcessingEnum];
/**
 * @export
 */
export declare const GetAccountFetchInstructionsEnum: {
    readonly Account: "Account";
    readonly Aging: "Aging";
    readonly FixedCharges: "FixedCharges";
    readonly Invoices: "Invoices";
    readonly Payments: "Payments";
    readonly Summary: "Summary";
    readonly Comments: "Comments";
    readonly Traces: "Traces";
    readonly Reminder: "Reminder";
    readonly Statement: "Statement";
    readonly Indicators: "Indicators";
    readonly YearView: "YearView";
};
export type GetAccountFetchInstructionsEnum = typeof GetAccountFetchInstructionsEnum[keyof typeof GetAccountFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetAccountsBalanceEnum: {
    readonly All: "All";
    readonly Open: "Open";
    readonly Zero: "Zero";
};
export type GetAccountsBalanceEnum = typeof GetAccountsBalanceEnum[keyof typeof GetAccountsBalanceEnum];
/**
 * @export
 */
export declare const GetAccountsOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetAccountsOrderTypeEnum = typeof GetAccountsOrderTypeEnum[keyof typeof GetAccountsOrderTypeEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsFolioStatusEnum: {
    readonly Deposit: "Deposit";
    readonly Void: "Void";
    readonly Ok: "Ok";
    readonly Zero: "Zero";
    readonly Compress: "Compress";
    readonly Converted: "Converted";
    readonly Internal: "Internal";
};
export type GetInvoicePostingsFolioStatusEnum = typeof GetInvoicePostingsFolioStatusEnum[keyof typeof GetInvoicePostingsFolioStatusEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsInvoiceTypeEnum: {
    readonly Normal: "Normal";
    readonly Credit: "Credit";
    readonly OldBalance: "OldBalance";
    readonly PasserBy: "PasserBy";
};
export type GetInvoicePostingsInvoiceTypeEnum = typeof GetInvoicePostingsInvoiceTypeEnum[keyof typeof GetInvoicePostingsInvoiceTypeEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsColorEnum: {
    readonly Red: "Red";
    readonly DarkRed: "DarkRed";
    readonly Green: "Green";
    readonly DarkGreen: "DarkGreen";
    readonly LightGreen: "LightGreen";
    readonly Orange: "Orange";
    readonly White: "White";
    readonly Yellow: "Yellow";
    readonly DarkYellow: "DarkYellow";
    readonly Purple: "Purple";
    readonly Brown: "Brown";
    readonly Gray: "Gray";
    readonly Aqua: "Aqua";
    readonly Chocolate: "Chocolate";
    readonly Blue: "Blue";
    readonly LightBlue: "LightBlue";
    readonly DarkBlue: "DarkBlue";
    readonly Cyan: "Cyan";
    readonly DarkCyan: "DarkCyan";
    readonly Magenta: "Magenta";
    readonly DarkMagenta: "DarkMagenta";
    readonly Black: "Black";
};
export type GetInvoicePostingsColorEnum = typeof GetInvoicePostingsColorEnum[keyof typeof GetInvoicePostingsColorEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsCardOrTokenEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type GetInvoicePostingsCardOrTokenEnum = typeof GetInvoicePostingsCardOrTokenEnum[keyof typeof GetInvoicePostingsCardOrTokenEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type GetInvoicePostingsCardTypeEnum = typeof GetInvoicePostingsCardTypeEnum[keyof typeof GetInvoicePostingsCardTypeEnum];
/**
 * @export
 */
export declare const GetInvoicePostingsProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type GetInvoicePostingsProcessingEnum = typeof GetInvoicePostingsProcessingEnum[keyof typeof GetInvoicePostingsProcessingEnum];
/**
 * @export
 */
export declare const GetInvoicesPaymentsFetchInstructionsEnum: {
    readonly Invoices: "Invoices";
    readonly Payments: "Payments";
};
export type GetInvoicesPaymentsFetchInstructionsEnum = typeof GetInvoicesPaymentsFetchInstructionsEnum[keyof typeof GetInvoicesPaymentsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetStatementsFolioStatusEnum: {
    readonly Deposit: "Deposit";
    readonly Void: "Void";
    readonly Ok: "Ok";
    readonly Zero: "Zero";
    readonly Compress: "Compress";
    readonly Converted: "Converted";
    readonly Internal: "Internal";
};
export type GetStatementsFolioStatusEnum = typeof GetStatementsFolioStatusEnum[keyof typeof GetStatementsFolioStatusEnum];
/**
 * @export
 */
export declare const GetStatementsInvoiceTypeEnum: {
    readonly Normal: "Normal";
    readonly Credit: "Credit";
    readonly OldBalance: "OldBalance";
    readonly PasserBy: "PasserBy";
};
export type GetStatementsInvoiceTypeEnum = typeof GetStatementsInvoiceTypeEnum[keyof typeof GetStatementsInvoiceTypeEnum];
/**
 * @export
 */
export declare const GetStatementsColorEnum: {
    readonly Red: "Red";
    readonly DarkRed: "DarkRed";
    readonly Green: "Green";
    readonly DarkGreen: "DarkGreen";
    readonly LightGreen: "LightGreen";
    readonly Orange: "Orange";
    readonly White: "White";
    readonly Yellow: "Yellow";
    readonly DarkYellow: "DarkYellow";
    readonly Purple: "Purple";
    readonly Brown: "Brown";
    readonly Gray: "Gray";
    readonly Aqua: "Aqua";
    readonly Chocolate: "Chocolate";
    readonly Blue: "Blue";
    readonly LightBlue: "LightBlue";
    readonly DarkBlue: "DarkBlue";
    readonly Cyan: "Cyan";
    readonly DarkCyan: "DarkCyan";
    readonly Magenta: "Magenta";
    readonly DarkMagenta: "DarkMagenta";
    readonly Black: "Black";
};
export type GetStatementsColorEnum = typeof GetStatementsColorEnum[keyof typeof GetStatementsColorEnum];
/**
 * @export
 */
export declare const GetStatementsCardOrTokenEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type GetStatementsCardOrTokenEnum = typeof GetStatementsCardOrTokenEnum[keyof typeof GetStatementsCardOrTokenEnum];
/**
 * @export
 */
export declare const GetStatementsCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type GetStatementsCardTypeEnum = typeof GetStatementsCardTypeEnum[keyof typeof GetStatementsCardTypeEnum];
/**
 * @export
 */
export declare const GetStatementsProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type GetStatementsProcessingEnum = typeof GetStatementsProcessingEnum[keyof typeof GetStatementsProcessingEnum];
