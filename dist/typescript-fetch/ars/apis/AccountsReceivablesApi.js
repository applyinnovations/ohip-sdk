"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStatementsProcessingEnum = exports.GetStatementsCardTypeEnum = exports.GetStatementsCardOrTokenEnum = exports.GetStatementsColorEnum = exports.GetStatementsInvoiceTypeEnum = exports.GetStatementsFolioStatusEnum = exports.GetInvoicesPaymentsFetchInstructionsEnum = exports.GetInvoicePostingsProcessingEnum = exports.GetInvoicePostingsCardTypeEnum = exports.GetInvoicePostingsCardOrTokenEnum = exports.GetInvoicePostingsColorEnum = exports.GetInvoicePostingsInvoiceTypeEnum = exports.GetInvoicePostingsFolioStatusEnum = exports.GetAccountsOrderTypeEnum = exports.GetAccountsBalanceEnum = exports.GetAccountFetchInstructionsEnum = exports.GetARStatementsProcessingEnum = exports.GetARStatementsCardTypeEnum = exports.GetARStatementsCardOrTokenEnum = exports.GetARStatementsColorEnum = exports.GetARStatementsInvoiceTypeEnum = exports.GetARStatementsFolioStatusEnum = exports.AccountsReceivablesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AccountsReceivablesApi extends runtime.BaseAPI {
    /**
     * Use this API to combine two or more invoices into one invoice <p><strong>OperationId:</strong>compressARInvoices</p>
     * Combines Account receivable invoices
     */
    compressARInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling compressARInvoices.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling compressARInvoices.');
            }
            if (requestParameters.arCompressInvoices === null || requestParameters.arCompressInvoices === undefined) {
                throw new runtime.RequiredError('arCompressInvoices', 'Required parameter requestParameters.arCompressInvoices was null or undefined when calling compressARInvoices.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/compressInvoices`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArCompressInvoicesToJSON)(requestParameters.arCompressInvoices),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompressedARInvoicesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to combine two or more invoices into one invoice <p><strong>OperationId:</strong>compressARInvoices</p>
     * Combines Account receivable invoices
     */
    compressARInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.compressARInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account
     */
    copyARAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling copyARAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyARAccount.');
            }
            if (requestParameters.arAccountCopy === null || requestParameters.arAccountCopy === undefined) {
                throw new runtime.RequiredError('arAccountCopy', 'Required parameter requestParameters.arAccountCopy was null or undefined when calling copyARAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/copyAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArAccountCopyToJSON)(requestParameters.arAccountCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account
     */
    copyARAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyARAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete account detail for given unique account id. Use get accounts to find account id. <p><strong>OperationId:</strong>deleteAccount</p>
     * Delete Account
     */
    deleteAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deleteAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete account detail for given unique account id. Use get accounts to find account id. <p><strong>OperationId:</strong>deleteAccount</p>
     * Delete Account
     */
    deleteAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete notes from a given account id. Use get account with an instruction to get note id. <p><strong>OperationId:</strong>deleteAccountComment</p>
     * Delete Account Comment
     */
    deleteAccountCommentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deleteAccountComment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteAccountComment.');
            }
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.value !== undefined) {
                queryParameters['value'] = requestParameters.value;
            }
            if (requestParameters.hotel !== undefined) {
                queryParameters['hotel'] = requestParameters.hotel;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/comments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete notes from a given account id. Use get account with an instruction to get note id. <p><strong>OperationId:</strong>deleteAccountComment</p>
     * Delete Account Comment
     */
    deleteAccountComment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAccountCommentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete fixed charges for a given account receivable id. Use getaccounts to find an account id. <p><strong>OperationId:</strong>deleteAccountFixedCharge</p>
     * Delete fixed charges
     */
    deleteAccountFixedChargeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fixedChargeId === null || requestParameters.fixedChargeId === undefined) {
                throw new runtime.RequiredError('fixedChargeId', 'Required parameter requestParameters.fixedChargeId was null or undefined when calling deleteAccountFixedCharge.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deleteAccountFixedCharge.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteAccountFixedCharge.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/fixedCharges/{fixedChargeId}`.replace(`{${"fixedChargeId"}}`, encodeURIComponent(String(requestParameters.fixedChargeId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete fixed charges for a given account receivable id. Use getaccounts to find an account id. <p><strong>OperationId:</strong>deleteAccountFixedCharge</p>
     * Delete fixed charges
     */
    deleteAccountFixedCharge(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAccountFixedChargeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteAccountTrace</p>
     * This API facilitates deletion of account traces.
     */
    deleteAccountTraceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deleteAccountTrace.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteAccountTrace.');
            }
            const queryParameters = {};
            if (requestParameters.traceID !== undefined) {
                queryParameters['traceID'] = requestParameters.traceID;
            }
            if (requestParameters.traceOn !== undefined) {
                queryParameters['traceOn'] = requestParameters.traceOn;
            }
            if (requestParameters.traceText !== undefined) {
                queryParameters['traceText'] = requestParameters.traceText;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/traces`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteAccountTrace</p>
     * This API facilitates deletion of account traces.
     */
    deleteAccountTrace(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAccountTraceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete payments from invoice.<br><p><strong><mark>This API is deprecated. Please use removePaymentsFromInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>deletePaymentsFromInvoice</p>
     * Delete payments from invoice
     * @deprecated
     */
    deletePaymentsFromInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling deletePaymentsFromInvoice.');
            }
            if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
                throw new runtime.RequiredError('invoiceId', 'Required parameter requestParameters.invoiceId was null or undefined when calling deletePaymentsFromInvoice.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePaymentsFromInvoice.');
            }
            if (requestParameters.trxNo === null || requestParameters.trxNo === undefined) {
                throw new runtime.RequiredError('trxNo', 'Required parameter requestParameters.trxNo was null or undefined when calling deletePaymentsFromInvoice.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deletePaymentsFromInvoice.');
            }
            const queryParameters = {};
            if (requestParameters.trxNo) {
                queryParameters['trxNo'] = requestParameters.trxNo;
            }
            if (requestParameters.accountId !== undefined) {
                queryParameters['accountId'] = requestParameters.accountId;
            }
            if (requestParameters.cashierID !== undefined) {
                queryParameters['cashierID'] = requestParameters.cashierID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/invoices/{invoiceId}/transactions/{transactionId}/paymentsFromInvoice`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete payments from invoice.<br><p><strong><mark>This API is deprecated. Please use removePaymentsFromInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>deletePaymentsFromInvoice</p>
     * Delete payments from invoice
     * @deprecated
     */
    deletePaymentsFromInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePaymentsFromInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get account receivable profile\'s aging summary including account name, summary, credit limit, total outstanding balance, etc. per aging bucket. <p><strong>OperationId:</strong>getARAgingCycles</p>
     * Get given AR account\'s aging detail
     */
    getARAgingCyclesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getARAgingCycles.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/agingCycles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArAgingCyclesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get account receivable profile\'s aging summary including account name, summary, credit limit, total outstanding balance, etc. per aging bucket. <p><strong>OperationId:</strong>getARAgingCycles</p>
     * Get given AR account\'s aging detail
     */
    getARAgingCycles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getARAgingCyclesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get lists of folios for guests who checked out using a credit card payment transaction code that has an account receivable associated with it. It also lists payments made prior to check out if the payment was made using a credit card transaction code that has a an account receivable associated with it. <p><strong>OperationId:</strong>getARCreditCardPayments</p>
     * Get account receivable folios which are paid using credit cards
     */
    getARCreditCardPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getARCreditCardPayments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getARCreditCardPayments.');
            }
            const queryParameters = {};
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/creditcard/payments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArCreditCardPaymentsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get lists of folios for guests who checked out using a credit card payment transaction code that has an account receivable associated with it. It also lists payments made prior to check out if the payment was made using a credit card transaction code that has a an account receivable associated with it. <p><strong>OperationId:</strong>getARCreditCardPayments</p>
     * Get account receivable folios which are paid using credit cards
     */
    getARCreditCardPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getARCreditCardPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to find account receivable folio printers <p><strong>OperationId:</strong>getARFolioPrinters</p>
     * Get list of account receivable folio printers
     */
    getARFolioPrintersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getARFolioPrinters.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getARFolioPrinters.');
            }
            const queryParameters = {};
            if (requestParameters.balance !== undefined) {
                queryParameters['balance'] = requestParameters.balance;
            }
            if (requestParameters.overrideCreditHoldCheck !== undefined) {
                queryParameters['overrideCreditHoldCheck'] = requestParameters.overrideCreditHoldCheck;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.guestProfileId !== undefined) {
                queryParameters['guestProfileId'] = requestParameters.guestProfileId;
            }
            if (requestParameters.guestProfileIdContext !== undefined) {
                queryParameters['guestProfileIdContext'] = requestParameters.guestProfileIdContext;
            }
            if (requestParameters.guestProfileType !== undefined) {
                queryParameters['guestProfileType'] = requestParameters.guestProfileType;
            }
            if (requestParameters.folioWindowNo) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.chargeCashierId) {
                queryParameters['chargeCashierId'] = requestParameters.chargeCashierId;
            }
            if (requestParameters.chargeTransactionCode) {
                queryParameters['chargeTransactionCode'] = requestParameters.chargeTransactionCode;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.postingQuantity) {
                queryParameters['postingQuantity'] = requestParameters.postingQuantity;
            }
            if (requestParameters.postingReference) {
                queryParameters['postingReference'] = requestParameters.postingReference;
            }
            if (requestParameters.postingRemark) {
                queryParameters['postingRemark'] = requestParameters.postingRemark;
            }
            if (requestParameters.checkNumber) {
                queryParameters['checkNumber'] = requestParameters.checkNumber;
            }
            if (requestParameters.arrangementCode) {
                queryParameters['arrangementCode'] = requestParameters.arrangementCode;
            }
            if (requestParameters.applyRoutingInstructions) {
                queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
            }
            if (requestParameters.usePackageAllowance) {
                queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
            }
            if (requestParameters.autoPosting) {
                queryParameters['autoPosting'] = requestParameters.autoPosting;
            }
            if (requestParameters.financialTransactionId) {
                queryParameters['financialTransactionId'] = requestParameters.financialTransactionId;
            }
            if (requestParameters.financialTransactionIdContext) {
                queryParameters['financialTransactionIdContext'] = requestParameters.financialTransactionIdContext;
            }
            if (requestParameters.financialTransactionType) {
                queryParameters['financialTransactionType'] = requestParameters.financialTransactionType;
            }
            if (requestParameters.reference !== undefined) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.remark !== undefined) {
                queryParameters['remark'] = requestParameters.remark;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            if (requestParameters.generateFiscalFolio !== undefined) {
                queryParameters['generateFiscalFolio'] = requestParameters.generateFiscalFolio;
            }
            if (requestParameters.queueName !== undefined) {
                queryParameters['queueName'] = requestParameters.queueName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/folioPrinters`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArFolioPrintersFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to find account receivable folio printers <p><strong>OperationId:</strong>getARFolioPrinters</p>
     * Get list of account receivable folio printers
     */
    getARFolioPrinters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getARFolioPrintersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes. <p><strong>OperationId:</strong>getARStatements</p>
     * Get given profile\'s account receivable statements
     */
    getARStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.profileId) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.accountID) {
                queryParameters['accountID'] = requestParameters.accountID;
            }
            if (requestParameters.accountNo) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.canBeModified) {
                queryParameters['canBeModified'] = requestParameters.canBeModified;
            }
            if (requestParameters.closeDate) {
                queryParameters['closeDate'] = requestParameters.closeDate;
            }
            if (requestParameters.fiscalBillNo) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioNo) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.invoiceType) {
                queryParameters['invoiceType'] = requestParameters.invoiceType;
            }
            if (requestParameters.postingDate) {
                queryParameters['postingDate'] = requestParameters.postingDate;
            }
            if (requestParameters.revenueDate) {
                queryParameters['revenueDate'] = requestParameters.revenueDate;
            }
            if (requestParameters.statementNo) {
                queryParameters['statementNo'] = requestParameters.statementNo;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.transferDate) {
                queryParameters['transferDate'] = requestParameters.transferDate;
            }
            if (requestParameters.invoiceTransactionCode) {
                queryParameters['invoiceTransactionCode'] = requestParameters.invoiceTransactionCode;
            }
            if (requestParameters.transactionDate) {
                queryParameters['transactionDate'] = requestParameters.transactionDate;
            }
            if (requestParameters.transactionNo) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.invoiceHotelIds) {
                queryParameters['invoiceHotelIds'] = requestParameters.invoiceHotelIds;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationType !== undefined) {
                queryParameters['reservationType'] = requestParameters.reservationType;
            }
            if (requestParameters.guestProfileId !== undefined) {
                queryParameters['guestProfileId'] = requestParameters.guestProfileId;
            }
            if (requestParameters.guestProfileIdContext !== undefined) {
                queryParameters['guestProfileIdContext'] = requestParameters.guestProfileIdContext;
            }
            if (requestParameters.guestProfileType !== undefined) {
                queryParameters['guestProfileType'] = requestParameters.guestProfileType;
            }
            if (requestParameters.age) {
                queryParameters['age'] = requestParameters.age;
            }
            if (requestParameters.guestName) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.originalAmount !== undefined) {
                queryParameters['originalAmount'] = requestParameters.originalAmount;
            }
            if (requestParameters.originalAmountCurrencyCode !== undefined) {
                queryParameters['originalAmountCurrencyCode'] = requestParameters.originalAmountCurrencyCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.paymentsAmount !== undefined) {
                queryParameters['paymentsAmount'] = requestParameters.paymentsAmount;
            }
            if (requestParameters.paymentsCurrencyCode !== undefined) {
                queryParameters['paymentsCurrencyCode'] = requestParameters.paymentsCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.reference) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.remark) {
                queryParameters['remark'] = requestParameters.remark;
            }
            if (requestParameters.adjusted) {
                queryParameters['adjusted'] = requestParameters.adjusted;
            }
            if (requestParameters.parentInvoiceNo) {
                queryParameters['parentInvoiceNo'] = requestParameters.parentInvoiceNo;
            }
            if (requestParameters.compressed) {
                queryParameters['compressed'] = requestParameters.compressed;
            }
            if (requestParameters.compressedDate) {
                queryParameters['compressedDate'] = requestParameters.compressedDate;
            }
            if (requestParameters.transferredOut) {
                queryParameters['transferredOut'] = requestParameters.transferredOut;
            }
            if (requestParameters.transferredIn) {
                queryParameters['transferredIn'] = requestParameters.transferredIn;
            }
            if (requestParameters.marketDescription !== undefined) {
                queryParameters['marketDescription'] = requestParameters.marketDescription;
            }
            if (requestParameters.marketHotelId !== undefined) {
                queryParameters['marketHotelId'] = requestParameters.marketHotelId;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.marketGroup !== undefined) {
                queryParameters['marketGroup'] = requestParameters.marketGroup;
            }
            if (requestParameters.roomClassDescription !== undefined) {
                queryParameters['roomClassDescription'] = requestParameters.roomClassDescription;
            }
            if (requestParameters.roomClassHotelId !== undefined) {
                queryParameters['roomClassHotelId'] = requestParameters.roomClassHotelId;
            }
            if (requestParameters.roomClassCode !== undefined) {
                queryParameters['roomClassCode'] = requestParameters.roomClassCode;
            }
            if (requestParameters.sourceDescription !== undefined) {
                queryParameters['sourceDescription'] = requestParameters.sourceDescription;
            }
            if (requestParameters.sourceHotelId !== undefined) {
                queryParameters['sourceHotelId'] = requestParameters.sourceHotelId;
            }
            if (requestParameters.sourceCode !== undefined) {
                queryParameters['sourceCode'] = requestParameters.sourceCode;
            }
            if (requestParameters.sourceGroup !== undefined) {
                queryParameters['sourceGroup'] = requestParameters.sourceGroup;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.cashierName !== undefined) {
                queryParameters['cashierName'] = requestParameters.cashierName;
            }
            if (requestParameters.transactionHotelId !== undefined) {
                queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
            }
            if (requestParameters.printTrxReceipt !== undefined) {
                queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
            }
            if (requestParameters.accountInvoiceTransactionCode !== undefined) {
                queryParameters['accountInvoiceTransactionCode'] = requestParameters.accountInvoiceTransactionCode;
            }
            if (requestParameters.transactionDescription !== undefined) {
                queryParameters['transactionDescription'] = requestParameters.transactionDescription;
            }
            if (requestParameters.transactionGroup !== undefined) {
                queryParameters['transactionGroup'] = requestParameters.transactionGroup;
            }
            if (requestParameters.transactionSubGroup !== undefined) {
                queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
            }
            if (requestParameters.universalProductCode !== undefined) {
                queryParameters['universalProductCode'] = requestParameters.universalProductCode;
            }
            if (requestParameters.routingInstructionsId !== undefined) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.articleHotelIds) {
                queryParameters['articleHotelIds'] = requestParameters.articleHotelIds;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.articleDescription) {
                queryParameters['articleDescription'] = requestParameters.articleDescription;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.articleAmount !== undefined) {
                queryParameters['articleAmount'] = requestParameters.articleAmount;
            }
            if (requestParameters.articleCurrencyCode !== undefined) {
                queryParameters['articleCurrencyCode'] = requestParameters.articleCurrencyCode;
            }
            if (requestParameters.availableForPostIt !== undefined) {
                queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
            }
            if (requestParameters.color !== undefined) {
                queryParameters['color'] = requestParameters.color;
            }
            if (requestParameters.articleUniversalProductCode) {
                queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substring(0, 10);
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.invoicePaymentCardId !== undefined) {
                queryParameters['invoicePaymentCardId'] = requestParameters.invoicePaymentCardId;
            }
            if (requestParameters.invoicePaymentCardIdContext !== undefined) {
                queryParameters['invoicePaymentCardIdContext'] = requestParameters.invoicePaymentCardIdContext;
            }
            if (requestParameters.invoicePaymentCardIdType !== undefined) {
                queryParameters['invoicePaymentCardIdType'] = requestParameters.invoicePaymentCardIdType;
            }
            if (requestParameters.currentAuthorizedAmount !== undefined) {
                queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmount !== undefined) {
                queryParameters['approvalAmount'] = requestParameters.approvalAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.addresseeProfileId !== undefined) {
                queryParameters['addresseeProfileId'] = requestParameters.addresseeProfileId;
            }
            if (requestParameters.addresseeProfileIdContext !== undefined) {
                queryParameters['addresseeProfileIdContext'] = requestParameters.addresseeProfileIdContext;
            }
            if (requestParameters.addresseeProfileType !== undefined) {
                queryParameters['addresseeProfileType'] = requestParameters.addresseeProfileType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.city !== undefined) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.phone !== undefined) {
                queryParameters['phone'] = requestParameters.phone;
            }
            if (requestParameters.allowPartialTransferYn) {
                queryParameters['allowPartialTransferYn'] = requestParameters.allowPartialTransferYn;
            }
            if (requestParameters.printed) {
                queryParameters['printed'] = requestParameters.printed;
            }
            if (requestParameters.printedDate) {
                queryParameters['printedDate'] = requestParameters.printedDate;
            }
            if (requestParameters.storedFolioId !== undefined) {
                queryParameters['storedFolioId'] = requestParameters.storedFolioId;
            }
            if (requestParameters.storedFolioIdContext !== undefined) {
                queryParameters['storedFolioIdContext'] = requestParameters.storedFolioIdContext;
            }
            if (requestParameters.storedFolioType !== undefined) {
                queryParameters['storedFolioType'] = requestParameters.storedFolioType;
            }
            if (requestParameters.storedFolioName) {
                queryParameters['storedFolioName'] = requestParameters.storedFolioName;
            }
            if (requestParameters.storedDebitFolioId !== undefined) {
                queryParameters['storedDebitFolioId'] = requestParameters.storedDebitFolioId;
            }
            if (requestParameters.storedDebitFolioIdContext !== undefined) {
                queryParameters['storedDebitFolioIdContext'] = requestParameters.storedDebitFolioIdContext;
            }
            if (requestParameters.storedDebitFolioType !== undefined) {
                queryParameters['storedDebitFolioType'] = requestParameters.storedDebitFolioType;
            }
            if (requestParameters.storedDebitFolioName) {
                queryParameters['storedDebitFolioName'] = requestParameters.storedDebitFolioName;
            }
            if (requestParameters.balanceForwardDate !== undefined) {
                queryParameters['balanceForwardDate'] = requestParameters.balanceForwardDate.toISOString().substring(0, 10);
            }
            if (requestParameters.inclFolios !== undefined) {
                queryParameters['inclFolios'] = requestParameters.inclFolios;
            }
            if (requestParameters.inclPrinted !== undefined) {
                queryParameters['inclPrinted'] = requestParameters.inclPrinted;
            }
            if (requestParameters.inclZero !== undefined) {
                queryParameters['inclZero'] = requestParameters.inclZero;
            }
            if (requestParameters.filterEndDate !== undefined) {
                queryParameters['filterEndDate'] = requestParameters.filterEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.filterStartDate !== undefined) {
                queryParameters['filterStartDate'] = requestParameters.filterStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.statementText !== undefined) {
                queryParameters['statementText'] = requestParameters.statementText;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/statements`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatementsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes. <p><strong>OperationId:</strong>getARStatements</p>
     * Get given profile\'s account receivable statements
     */
    getARStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getARStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    getARTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getARTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.accounts !== undefined) {
                queryParameters['accounts'] = requestParameters.accounts;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.fromAmount !== undefined) {
                queryParameters['fromAmount'] = requestParameters.fromAmount;
            }
            if (requestParameters.fromCurrencyCode !== undefined) {
                queryParameters['fromCurrencyCode'] = requestParameters.fromCurrencyCode;
            }
            if (requestParameters.toAmount !== undefined) {
                queryParameters['toAmount'] = requestParameters.toAmount;
            }
            if (requestParameters.toCurrencyCode !== undefined) {
                queryParameters['toCurrencyCode'] = requestParameters.toCurrencyCode;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.invoices) {
                queryParameters['invoices'] = requestParameters.invoices;
            }
            if (requestParameters.folios) {
                queryParameters['folios'] = requestParameters.folios;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.addresseName !== undefined) {
                queryParameters['addresseName'] = requestParameters.addresseName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/arTransactions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArTransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    getARTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getARTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to search for account receivable type account\'s  detail for given account id. <p><strong>OperationId:</strong>getAccount</p>
     * Get account
     */
    getAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAccount.');
            }
            const queryParameters = {};
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AccountFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to search for account receivable type account\'s  detail for given account id. <p><strong>OperationId:</strong>getAccount</p>
     * Get account
     */
    getAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    getAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.balance !== undefined) {
                queryParameters['balance'] = requestParameters.balance;
            }
            if (requestParameters.batchStatement !== undefined) {
                queryParameters['batchStatement'] = requestParameters.batchStatement;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.accountNo) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.accountId) {
                queryParameters['accountId'] = requestParameters.accountId;
            }
            if (requestParameters.accountIdContext) {
                queryParameters['accountIdContext'] = requestParameters.accountIdContext;
            }
            if (requestParameters.accountType) {
                queryParameters['accountType'] = requestParameters.accountType;
            }
            if (requestParameters.includeStatementHistoryIndicator !== undefined) {
                queryParameters['includeStatementHistoryIndicator'] = requestParameters.includeStatementHistoryIndicator;
            }
            if (requestParameters.includeReminderHistoryIndicator !== undefined) {
                queryParameters['includeReminderHistoryIndicator'] = requestParameters.includeReminderHistoryIndicator;
            }
            if (requestParameters.superSearch !== undefined) {
                queryParameters['superSearch'] = requestParameters.superSearch;
            }
            if (requestParameters.searchHotelIds) {
                queryParameters['searchHotelIds'] = requestParameters.searchHotelIds;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/accounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AccountsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    getAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get applied payment details for AR invoices. <p><strong>OperationId:</strong>getAppliedInvoicePayments</p>
     * Get account receivable invoice\'s payment history
     */
    getAppliedInvoicePaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAppliedInvoicePayments.');
            }
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getAppliedInvoicePayments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAppliedInvoicePayments.');
            }
            const queryParameters = {};
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/accounts/{accountId}/invoiceAppliedPayments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoiceAppliedPaymentsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get applied payment details for AR invoices. <p><strong>OperationId:</strong>getAppliedInvoicePayments</p>
     * Get account receivable invoice\'s payment history
     */
    getAppliedInvoicePayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppliedInvoicePaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get applied payment details for AR invoices.<br><p><strong><mark>This API is deprecated. Please use getAppliedInvoicePayments instead</mark></strong></p> <p><strong>OperationId:</strong>getInvoiceAppliedPayments</p>
     * Get account receivable invoice\'s payment history
     * @deprecated
     */
    getInvoiceAppliedPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getInvoiceAppliedPayments.');
            }
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getInvoiceAppliedPayments.');
            }
            if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
                throw new runtime.RequiredError('invoiceId', 'Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceAppliedPayments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getInvoiceAppliedPayments.');
            }
            const queryParameters = {};
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/invoices/{invoiceId}/transactions/{transactionId}/accounts/{accountId}/invoiceAppliedPayments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoiceAppliedPaymentsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get applied payment details for AR invoices.<br><p><strong><mark>This API is deprecated. Please use getAppliedInvoicePayments instead</mark></strong></p> <p><strong>OperationId:</strong>getInvoiceAppliedPayments</p>
     * Get account receivable invoice\'s payment history
     * @deprecated
     */
    getInvoiceAppliedPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInvoiceAppliedPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get AR account\'s invoice and payment details including credit, debit, amount due date, etc. <p><strong>OperationId:</strong>getInvoicePaymentDetail</p>
     * Get account receivable invoice and payment details
     */
    getInvoicePaymentDetailRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getInvoicePaymentDetail.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getInvoicePaymentDetail.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getInvoicePaymentDetail.');
            }
            const queryParameters = {};
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/transactions/{transactionId}/invoicePaymentDetails`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoicePaymentFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get AR account\'s invoice and payment details including credit, debit, amount due date, etc. <p><strong>OperationId:</strong>getInvoicePaymentDetail</p>
     * Get account receivable invoice and payment details
     */
    getInvoicePaymentDetail(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInvoicePaymentDetailRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get account receivable postings. <p><strong>OperationId:</strong>getInvoicePostings</p>
     * Get account receivable invoice postings
     */
    getInvoicePostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.canBeModified !== undefined) {
                queryParameters['canBeModified'] = requestParameters.canBeModified;
            }
            if (requestParameters.closeDate !== undefined) {
                queryParameters['closeDate'] = requestParameters.closeDate.toISOString().substring(0, 10);
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substring(0, 10);
            }
            if (requestParameters.folioNo !== undefined) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus !== undefined) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.invoiceType !== undefined) {
                queryParameters['invoiceType'] = requestParameters.invoiceType;
            }
            if (requestParameters.postingDate !== undefined) {
                queryParameters['postingDate'] = requestParameters.postingDate.toISOString().substring(0, 10);
            }
            if (requestParameters.revenueDate !== undefined) {
                queryParameters['revenueDate'] = requestParameters.revenueDate.toISOString().substring(0, 10);
            }
            if (requestParameters.statementNo !== undefined) {
                queryParameters['statementNo'] = requestParameters.statementNo;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.transferDate !== undefined) {
                queryParameters['transferDate'] = requestParameters.transferDate.toISOString().substring(0, 10);
            }
            if (requestParameters.postingTransactionCode !== undefined) {
                queryParameters['postingTransactionCode'] = requestParameters.postingTransactionCode;
            }
            if (requestParameters.transactionDate !== undefined) {
                queryParameters['transactionDate'] = requestParameters.transactionDate.toISOString().substring(0, 10);
            }
            if (requestParameters.transactionNo !== undefined) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationType !== undefined) {
                queryParameters['reservationType'] = requestParameters.reservationType;
            }
            if (requestParameters.guestProfileId !== undefined) {
                queryParameters['guestProfileId'] = requestParameters.guestProfileId;
            }
            if (requestParameters.guestProfileIdContext !== undefined) {
                queryParameters['guestProfileIdContext'] = requestParameters.guestProfileIdContext;
            }
            if (requestParameters.guestProfileType !== undefined) {
                queryParameters['guestProfileType'] = requestParameters.guestProfileType;
            }
            if (requestParameters.age !== undefined) {
                queryParameters['age'] = requestParameters.age;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.originalAmount !== undefined) {
                queryParameters['originalAmount'] = requestParameters.originalAmount;
            }
            if (requestParameters.originalAmountCurrencyCode !== undefined) {
                queryParameters['originalAmountCurrencyCode'] = requestParameters.originalAmountCurrencyCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.paymentsAmount !== undefined) {
                queryParameters['paymentsAmount'] = requestParameters.paymentsAmount;
            }
            if (requestParameters.paymentsCurrencyCode !== undefined) {
                queryParameters['paymentsCurrencyCode'] = requestParameters.paymentsCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.reference !== undefined) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.remark !== undefined) {
                queryParameters['remark'] = requestParameters.remark;
            }
            if (requestParameters.adjusted !== undefined) {
                queryParameters['adjusted'] = requestParameters.adjusted;
            }
            if (requestParameters.parentInvoiceNo !== undefined) {
                queryParameters['parentInvoiceNo'] = requestParameters.parentInvoiceNo;
            }
            if (requestParameters.compressed !== undefined) {
                queryParameters['compressed'] = requestParameters.compressed;
            }
            if (requestParameters.compressedDate !== undefined) {
                queryParameters['compressedDate'] = requestParameters.compressedDate.toISOString().substring(0, 10);
            }
            if (requestParameters.transferredOut !== undefined) {
                queryParameters['transferredOut'] = requestParameters.transferredOut;
            }
            if (requestParameters.transferredIn !== undefined) {
                queryParameters['transferredIn'] = requestParameters.transferredIn;
            }
            if (requestParameters.marketDescription !== undefined) {
                queryParameters['marketDescription'] = requestParameters.marketDescription;
            }
            if (requestParameters.marketHotelId !== undefined) {
                queryParameters['marketHotelId'] = requestParameters.marketHotelId;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.marketGroup !== undefined) {
                queryParameters['marketGroup'] = requestParameters.marketGroup;
            }
            if (requestParameters.roomClassDescription !== undefined) {
                queryParameters['roomClassDescription'] = requestParameters.roomClassDescription;
            }
            if (requestParameters.roomClassHotelId !== undefined) {
                queryParameters['roomClassHotelId'] = requestParameters.roomClassHotelId;
            }
            if (requestParameters.roomClassCode !== undefined) {
                queryParameters['roomClassCode'] = requestParameters.roomClassCode;
            }
            if (requestParameters.sourceDescription !== undefined) {
                queryParameters['sourceDescription'] = requestParameters.sourceDescription;
            }
            if (requestParameters.sourceHotelId !== undefined) {
                queryParameters['sourceHotelId'] = requestParameters.sourceHotelId;
            }
            if (requestParameters.sourceCode !== undefined) {
                queryParameters['sourceCode'] = requestParameters.sourceCode;
            }
            if (requestParameters.sourceGroup !== undefined) {
                queryParameters['sourceGroup'] = requestParameters.sourceGroup;
            }
            if (requestParameters.cashierInfoCashierId !== undefined) {
                queryParameters['cashierInfoCashierId'] = requestParameters.cashierInfoCashierId;
            }
            if (requestParameters.cashierName !== undefined) {
                queryParameters['cashierName'] = requestParameters.cashierName;
            }
            if (requestParameters.transactionHotelId !== undefined) {
                queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
            }
            if (requestParameters.printTrxReceipt !== undefined) {
                queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
            }
            if (requestParameters.invoicePostingsTransactionCode !== undefined) {
                queryParameters['invoicePostingsTransactionCode'] = requestParameters.invoicePostingsTransactionCode;
            }
            if (requestParameters.transactionDescription !== undefined) {
                queryParameters['transactionDescription'] = requestParameters.transactionDescription;
            }
            if (requestParameters.transactionGroup !== undefined) {
                queryParameters['transactionGroup'] = requestParameters.transactionGroup;
            }
            if (requestParameters.transactionSubGroup !== undefined) {
                queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
            }
            if (requestParameters.universalProductCode !== undefined) {
                queryParameters['universalProductCode'] = requestParameters.universalProductCode;
            }
            if (requestParameters.routingInstructionsId !== undefined) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.articleHotelIds) {
                queryParameters['articleHotelIds'] = requestParameters.articleHotelIds;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.articleDescription) {
                queryParameters['articleDescription'] = requestParameters.articleDescription;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.articleAmount !== undefined) {
                queryParameters['articleAmount'] = requestParameters.articleAmount;
            }
            if (requestParameters.articleCurrencyCode !== undefined) {
                queryParameters['articleCurrencyCode'] = requestParameters.articleCurrencyCode;
            }
            if (requestParameters.availableForPostIt !== undefined) {
                queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
            }
            if (requestParameters.color !== undefined) {
                queryParameters['color'] = requestParameters.color;
            }
            if (requestParameters.articleUniversalProductCode) {
                queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substring(0, 10);
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardId !== undefined) {
                queryParameters['cardId'] = requestParameters.cardId;
            }
            if (requestParameters.paymentCardIdContext !== undefined) {
                queryParameters['PaymentCardIdContext'] = requestParameters.paymentCardIdContext;
            }
            if (requestParameters.paymentCardIdType !== undefined) {
                queryParameters['paymentCardIdType'] = requestParameters.paymentCardIdType;
            }
            if (requestParameters.currentAuthorizedAmount !== undefined) {
                queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmount !== undefined) {
                queryParameters['approvalAmount'] = requestParameters.approvalAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.addresseeType !== undefined) {
                queryParameters['addresseeType'] = requestParameters.addresseeType;
            }
            if (requestParameters.addressProfileId !== undefined) {
                queryParameters['addressProfileId'] = requestParameters.addressProfileId;
            }
            if (requestParameters.addressProfileIdContext !== undefined) {
                queryParameters['addressProfileIdContext'] = requestParameters.addressProfileIdContext;
            }
            if (requestParameters.addressProfileIdType !== undefined) {
                queryParameters['addressProfileIdType'] = requestParameters.addressProfileIdType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.city !== undefined) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.phone !== undefined) {
                queryParameters['phone'] = requestParameters.phone;
            }
            if (requestParameters.allowPartialTransferYn !== undefined) {
                queryParameters['allowPartialTransferYn'] = requestParameters.allowPartialTransferYn;
            }
            if (requestParameters.printed !== undefined) {
                queryParameters['printed'] = requestParameters.printed;
            }
            if (requestParameters.printedDate !== undefined) {
                queryParameters['printedDate'] = requestParameters.printedDate.toISOString().substring(0, 10);
            }
            if (requestParameters.storedFolioId !== undefined) {
                queryParameters['storedFolioId'] = requestParameters.storedFolioId;
            }
            if (requestParameters.storedFolioIdContext !== undefined) {
                queryParameters['storedFolioIdContext'] = requestParameters.storedFolioIdContext;
            }
            if (requestParameters.storedFolioType !== undefined) {
                queryParameters['storedFolioType'] = requestParameters.storedFolioType;
            }
            if (requestParameters.storedFolioName !== undefined) {
                queryParameters['storedFolioName'] = requestParameters.storedFolioName;
            }
            if (requestParameters.storedDebitFolioId !== undefined) {
                queryParameters['storedDebitFolioId'] = requestParameters.storedDebitFolioId;
            }
            if (requestParameters.storedDebitFolioIdContext !== undefined) {
                queryParameters['storedDebitFolioIdContext'] = requestParameters.storedDebitFolioIdContext;
            }
            if (requestParameters.storedDebitFolioType !== undefined) {
                queryParameters['storedDebitFolioType'] = requestParameters.storedDebitFolioType;
            }
            if (requestParameters.storedDebitFolioName !== undefined) {
                queryParameters['storedDebitFolioName'] = requestParameters.storedDebitFolioName;
            }
            if (requestParameters.accountId !== undefined) {
                queryParameters['accountId'] = requestParameters.accountId;
            }
            if (requestParameters.accountIdContext !== undefined) {
                queryParameters['accountIdContext'] = requestParameters.accountIdContext;
            }
            if (requestParameters.accountType !== undefined) {
                queryParameters['accountType'] = requestParameters.accountType;
            }
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.additionalFilterCashierId !== undefined) {
                queryParameters['additionalFilterCashierId'] = requestParameters.additionalFilterCashierId;
            }
            if (requestParameters.additionalFilterTransactionCode) {
                queryParameters['additionalFilterTransactionCode'] = requestParameters.additionalFilterTransactionCode;
            }
            if (requestParameters.additionalFilterTransactionSubGroupCode) {
                queryParameters['additionalFilterTransactionSubGroupCode'] = requestParameters.additionalFilterTransactionSubGroupCode;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            if (requestParameters.referenceWildCard !== undefined) {
                queryParameters['referenceWildCard'] = requestParameters.referenceWildCard;
            }
            if (requestParameters.supplementWildCard !== undefined) {
                queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
            }
            if (requestParameters.checkNumberWildCard !== undefined) {
                queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/invoicePostings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoicePostingsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get account receivable postings. <p><strong>OperationId:</strong>getInvoicePostings</p>
     * Get account receivable invoice postings
     */
    getInvoicePostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInvoicePostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get list of account receivable invoices which are put on hold. <p><strong>OperationId:</strong>getInvoicesOnHold</p>
     * Get list of hold invoices for account receivable
     */
    getInvoicesOnHoldRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getInvoicesOnHold.');
            }
            const queryParameters = {};
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.accountIdContext !== undefined) {
                queryParameters['accountIdContext'] = requestParameters.accountIdContext;
            }
            if (requestParameters.accountType !== undefined) {
                queryParameters['accountType'] = requestParameters.accountType;
            }
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.folios !== undefined) {
                queryParameters['folios'] = requestParameters.folios;
            }
            if (requestParameters.invoices !== undefined) {
                queryParameters['invoices'] = requestParameters.invoices;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/invoicesOnHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoicesOnHoldFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get list of account receivable invoices which are put on hold. <p><strong>OperationId:</strong>getInvoicesOnHold</p>
     * Get list of hold invoices for account receivable
     */
    getInvoicesOnHold(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInvoicesOnHoldRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    getInvoicesPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getInvoicesPayments.');
            }
            const queryParameters = {};
            if (requestParameters.inclDetails !== undefined) {
                queryParameters['inclDetails'] = requestParameters.inclDetails;
            }
            if (requestParameters.inclZeroBalance !== undefined) {
                queryParameters['inclZeroBalance'] = requestParameters.inclZeroBalance;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            if (requestParameters.guestDisplayName !== undefined) {
                queryParameters['guestDisplayName'] = requestParameters.guestDisplayName;
            }
            if (requestParameters.remark !== undefined) {
                queryParameters['remark'] = requestParameters.remark;
            }
            if (requestParameters.reference !== undefined) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.invoiceNo) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.addresseeName !== undefined) {
                queryParameters['addresseeName'] = requestParameters.addresseeName;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationType !== undefined) {
                queryParameters['reservationType'] = requestParameters.reservationType;
            }
            if (requestParameters.printed !== undefined) {
                queryParameters['printed'] = requestParameters.printed;
            }
            if (requestParameters.unBilled !== undefined) {
                queryParameters['unBilled'] = requestParameters.unBilled;
            }
            if (requestParameters.folioNo) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.statementNo !== undefined) {
                queryParameters['statementNo'] = requestParameters.statementNo;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/invoicePayments/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InvoicesPaymentsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    getInvoicesPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInvoicesPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get profile\'s account receivable summary including fixed charges, account balance, statements, reminder history, etc. <p><strong>OperationId:</strong>getProfileAging</p>
     * Get given profile\'s aging detail
     */
    getProfileAgingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getProfileAging.');
            }
            const queryParameters = {};
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/aging`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProfileAgingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get profile\'s account receivable summary including fixed charges, account balance, statements, reminder history, etc. <p><strong>OperationId:</strong>getProfileAging</p>
     * Get given profile\'s aging detail
     */
    getProfileAging(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProfileAgingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a month-by-month total of accrued debits, accrued credits, and a net total for the selected account data. <p><strong>OperationId:</strong>getProfileYearView</p>
     * Get given profile\'s yearly account receivable detail
     */
    getProfileYearViewRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getProfileYearView.');
            }
            const queryParameters = {};
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/yearViews`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProfileYearViewFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a month-by-month total of accrued debits, accrued credits, and a net total for the selected account data. <p><strong>OperationId:</strong>getProfileYearView</p>
     * Get given profile\'s yearly account receivable detail
     */
    getProfileYearView(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProfileYearViewRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get AR account holders\' reminder letter that includes detail of payment due, their current account balance, or for other purposes. <p><strong>OperationId:</strong>getReminders</p>
     * Get account receivable\'s reminder statements
     */
    getRemindersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accounts === null || requestParameters.accounts === undefined) {
                throw new runtime.RequiredError('accounts', 'Required parameter requestParameters.accounts was null or undefined when calling getReminders.');
            }
            const queryParameters = {};
            if (requestParameters.accounts) {
                queryParameters['accounts'] = requestParameters.accounts;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.profiles) {
                queryParameters['profiles'] = requestParameters.profiles;
            }
            if (requestParameters.accountNo) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/accountReminders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RemindersFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get AR account holders\' reminder letter that includes detail of payment due, their current account balance, or for other purposes. <p><strong>OperationId:</strong>getReminders</p>
     * Get account receivable\'s reminder statements
     */
    getReminders(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRemindersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get history of reminder letters prepared for AR account. <p><strong>OperationId:</strong>getRemindersHistory</p>
     * Get history of reminder letters for a given account receivable
     */
    getRemindersHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getRemindersHistory.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.accountIdContext !== undefined) {
                queryParameters['accountIdContext'] = requestParameters.accountIdContext;
            }
            if (requestParameters.accountType !== undefined) {
                queryParameters['accountType'] = requestParameters.accountType;
            }
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.dateSent !== undefined) {
                queryParameters['dateSent'] = requestParameters.dateSent.toISOString().substring(0, 10);
            }
            if (requestParameters.reportFileNameWildCard !== undefined) {
                queryParameters['reportFileNameWildCard'] = requestParameters.reportFileNameWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/accounts/{accountId}/remindersHistory`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RemindersHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get history of reminder letters prepared for AR account. <p><strong>OperationId:</strong>getRemindersHistory</p>
     * Get history of reminder letters for a given account receivable
     */
    getRemindersHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRemindersHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes.<br><p><strong><mark>This API is deprecated. Please use getARStatements instead</mark></strong></p> <p><strong>OperationId:</strong>getStatements</p>
     * Get given profile\'s account receivable statements
     * @deprecated
     */
    getStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getStatements.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.accountNo) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.canBeModified) {
                queryParameters['canBeModified'] = requestParameters.canBeModified;
            }
            if (requestParameters.closeDate) {
                queryParameters['closeDate'] = requestParameters.closeDate;
            }
            if (requestParameters.fiscalBillNo) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioNo) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.invoiceType) {
                queryParameters['invoiceType'] = requestParameters.invoiceType;
            }
            if (requestParameters.postingDate) {
                queryParameters['postingDate'] = requestParameters.postingDate;
            }
            if (requestParameters.revenueDate) {
                queryParameters['revenueDate'] = requestParameters.revenueDate;
            }
            if (requestParameters.statementNo) {
                queryParameters['statementNo'] = requestParameters.statementNo;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.transferDate) {
                queryParameters['transferDate'] = requestParameters.transferDate;
            }
            if (requestParameters.invoiceTransactionCode) {
                queryParameters['invoiceTransactionCode'] = requestParameters.invoiceTransactionCode;
            }
            if (requestParameters.transactionDate) {
                queryParameters['transactionDate'] = requestParameters.transactionDate;
            }
            if (requestParameters.transactionNo) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.invoiceHotelIds) {
                queryParameters['invoiceHotelIds'] = requestParameters.invoiceHotelIds;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationType !== undefined) {
                queryParameters['reservationType'] = requestParameters.reservationType;
            }
            if (requestParameters.guestProfileId !== undefined) {
                queryParameters['guestProfileId'] = requestParameters.guestProfileId;
            }
            if (requestParameters.guestProfileIdContext !== undefined) {
                queryParameters['guestProfileIdContext'] = requestParameters.guestProfileIdContext;
            }
            if (requestParameters.guestProfileType !== undefined) {
                queryParameters['guestProfileType'] = requestParameters.guestProfileType;
            }
            if (requestParameters.age) {
                queryParameters['age'] = requestParameters.age;
            }
            if (requestParameters.guestName) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.originalAmount !== undefined) {
                queryParameters['originalAmount'] = requestParameters.originalAmount;
            }
            if (requestParameters.originalAmountCurrencyCode !== undefined) {
                queryParameters['originalAmountCurrencyCode'] = requestParameters.originalAmountCurrencyCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.paymentsAmount !== undefined) {
                queryParameters['paymentsAmount'] = requestParameters.paymentsAmount;
            }
            if (requestParameters.paymentsCurrencyCode !== undefined) {
                queryParameters['paymentsCurrencyCode'] = requestParameters.paymentsCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.reference) {
                queryParameters['reference'] = requestParameters.reference;
            }
            if (requestParameters.remark) {
                queryParameters['remark'] = requestParameters.remark;
            }
            if (requestParameters.adjusted) {
                queryParameters['adjusted'] = requestParameters.adjusted;
            }
            if (requestParameters.parentInvoiceNo) {
                queryParameters['parentInvoiceNo'] = requestParameters.parentInvoiceNo;
            }
            if (requestParameters.compressed) {
                queryParameters['compressed'] = requestParameters.compressed;
            }
            if (requestParameters.compressedDate) {
                queryParameters['compressedDate'] = requestParameters.compressedDate;
            }
            if (requestParameters.transferredOut) {
                queryParameters['transferredOut'] = requestParameters.transferredOut;
            }
            if (requestParameters.transferredIn) {
                queryParameters['transferredIn'] = requestParameters.transferredIn;
            }
            if (requestParameters.marketDescription !== undefined) {
                queryParameters['marketDescription'] = requestParameters.marketDescription;
            }
            if (requestParameters.marketHotelId !== undefined) {
                queryParameters['marketHotelId'] = requestParameters.marketHotelId;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.marketGroup !== undefined) {
                queryParameters['marketGroup'] = requestParameters.marketGroup;
            }
            if (requestParameters.roomClassDescription !== undefined) {
                queryParameters['roomClassDescription'] = requestParameters.roomClassDescription;
            }
            if (requestParameters.roomClassHotelId !== undefined) {
                queryParameters['roomClassHotelId'] = requestParameters.roomClassHotelId;
            }
            if (requestParameters.roomClassCode !== undefined) {
                queryParameters['roomClassCode'] = requestParameters.roomClassCode;
            }
            if (requestParameters.sourceDescription !== undefined) {
                queryParameters['sourceDescription'] = requestParameters.sourceDescription;
            }
            if (requestParameters.sourceHotelId !== undefined) {
                queryParameters['sourceHotelId'] = requestParameters.sourceHotelId;
            }
            if (requestParameters.sourceCode !== undefined) {
                queryParameters['sourceCode'] = requestParameters.sourceCode;
            }
            if (requestParameters.sourceGroup !== undefined) {
                queryParameters['sourceGroup'] = requestParameters.sourceGroup;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.cashierName !== undefined) {
                queryParameters['cashierName'] = requestParameters.cashierName;
            }
            if (requestParameters.transactionHotelId !== undefined) {
                queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
            }
            if (requestParameters.printTrxReceipt !== undefined) {
                queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
            }
            if (requestParameters.accountInvoiceTransactionCode !== undefined) {
                queryParameters['accountInvoiceTransactionCode'] = requestParameters.accountInvoiceTransactionCode;
            }
            if (requestParameters.transactionDescription !== undefined) {
                queryParameters['transactionDescription'] = requestParameters.transactionDescription;
            }
            if (requestParameters.transactionGroup !== undefined) {
                queryParameters['transactionGroup'] = requestParameters.transactionGroup;
            }
            if (requestParameters.transactionSubGroup !== undefined) {
                queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
            }
            if (requestParameters.universalProductCode !== undefined) {
                queryParameters['universalProductCode'] = requestParameters.universalProductCode;
            }
            if (requestParameters.routingInstructionsId !== undefined) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.articleHotelIds) {
                queryParameters['articleHotelIds'] = requestParameters.articleHotelIds;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.articleDescription) {
                queryParameters['articleDescription'] = requestParameters.articleDescription;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.articleAmount !== undefined) {
                queryParameters['articleAmount'] = requestParameters.articleAmount;
            }
            if (requestParameters.articleCurrencyCode !== undefined) {
                queryParameters['articleCurrencyCode'] = requestParameters.articleCurrencyCode;
            }
            if (requestParameters.availableForPostIt !== undefined) {
                queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
            }
            if (requestParameters.color !== undefined) {
                queryParameters['color'] = requestParameters.color;
            }
            if (requestParameters.articleUniversalProductCode) {
                queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substring(0, 10);
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.invoicePaymentCardId !== undefined) {
                queryParameters['invoicePaymentCardId'] = requestParameters.invoicePaymentCardId;
            }
            if (requestParameters.invoicePaymentCardIdContext !== undefined) {
                queryParameters['invoicePaymentCardIdContext'] = requestParameters.invoicePaymentCardIdContext;
            }
            if (requestParameters.invoicePaymentCardIdType !== undefined) {
                queryParameters['invoicePaymentCardIdType'] = requestParameters.invoicePaymentCardIdType;
            }
            if (requestParameters.currentAuthorizedAmount !== undefined) {
                queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmount !== undefined) {
                queryParameters['approvalAmount'] = requestParameters.approvalAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.addresseeProfileId !== undefined) {
                queryParameters['addresseeProfileId'] = requestParameters.addresseeProfileId;
            }
            if (requestParameters.addresseeProfileIdContext !== undefined) {
                queryParameters['addresseeProfileIdContext'] = requestParameters.addresseeProfileIdContext;
            }
            if (requestParameters.addresseeProfileType !== undefined) {
                queryParameters['addresseeProfileType'] = requestParameters.addresseeProfileType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.city !== undefined) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.phone !== undefined) {
                queryParameters['phone'] = requestParameters.phone;
            }
            if (requestParameters.allowPartialTransferYn) {
                queryParameters['allowPartialTransferYn'] = requestParameters.allowPartialTransferYn;
            }
            if (requestParameters.printed) {
                queryParameters['printed'] = requestParameters.printed;
            }
            if (requestParameters.printedDate) {
                queryParameters['printedDate'] = requestParameters.printedDate;
            }
            if (requestParameters.storedFolioId !== undefined) {
                queryParameters['storedFolioId'] = requestParameters.storedFolioId;
            }
            if (requestParameters.storedFolioIdContext !== undefined) {
                queryParameters['storedFolioIdContext'] = requestParameters.storedFolioIdContext;
            }
            if (requestParameters.storedFolioType !== undefined) {
                queryParameters['storedFolioType'] = requestParameters.storedFolioType;
            }
            if (requestParameters.storedFolioName) {
                queryParameters['storedFolioName'] = requestParameters.storedFolioName;
            }
            if (requestParameters.storedDebitFolioId !== undefined) {
                queryParameters['storedDebitFolioId'] = requestParameters.storedDebitFolioId;
            }
            if (requestParameters.storedDebitFolioIdContext !== undefined) {
                queryParameters['storedDebitFolioIdContext'] = requestParameters.storedDebitFolioIdContext;
            }
            if (requestParameters.storedDebitFolioType !== undefined) {
                queryParameters['storedDebitFolioType'] = requestParameters.storedDebitFolioType;
            }
            if (requestParameters.storedDebitFolioName) {
                queryParameters['storedDebitFolioName'] = requestParameters.storedDebitFolioName;
            }
            if (requestParameters.balanceForwardDate !== undefined) {
                queryParameters['balanceForwardDate'] = requestParameters.balanceForwardDate.toISOString().substring(0, 10);
            }
            if (requestParameters.inclFolios !== undefined) {
                queryParameters['inclFolios'] = requestParameters.inclFolios;
            }
            if (requestParameters.inclPrinted !== undefined) {
                queryParameters['inclPrinted'] = requestParameters.inclPrinted;
            }
            if (requestParameters.inclZero !== undefined) {
                queryParameters['inclZero'] = requestParameters.inclZero;
            }
            if (requestParameters.filterEndDate !== undefined) {
                queryParameters['filterEndDate'] = requestParameters.filterEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.filterStartDate !== undefined) {
                queryParameters['filterStartDate'] = requestParameters.filterStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.statementText !== undefined) {
                queryParameters['statementText'] = requestParameters.statementText;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/accounts/{accountId}/statements`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatementsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to prepare statement for an AR account holders. It is typically prepared for billing purposes.<br><p><strong><mark>This API is deprecated. Please use getARStatements instead</mark></strong></p> <p><strong>OperationId:</strong>getStatements</p>
     * Get given profile\'s account receivable statements
     * @deprecated
     */
    getStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to find the history of statements prepared for AR accounts. <p><strong>OperationId:</strong>getStatementsHistory</p>
     * Get given profile\'s account receivable statements history
     */
    getStatementsHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getStatementsHistory.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getStatementsHistory.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getStatementsHistory.');
            }
            const queryParameters = {};
            if (requestParameters.accountNo !== undefined) {
                queryParameters['accountNo'] = requestParameters.accountNo;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.dateSent !== undefined) {
                queryParameters['dateSent'] = requestParameters.dateSent.toISOString().substring(0, 10);
            }
            if (requestParameters.reportFileNameWildCard !== undefined) {
                queryParameters['reportFileNameWildCard'] = requestParameters.reportFileNameWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/accounts/{accountId}/statementsHistory`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatementHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to find the history of statements prepared for AR accounts. <p><strong>OperationId:</strong>getStatementsHistory</p>
     * Get given profile\'s account receivable statements history
     */
    getStatementsHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStatementsHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to post charges to account receivable account.<br><p><strong><mark>This API is deprecated. Please use postChargesToAR instead</mark></strong></p> <p><strong>OperationId:</strong>postARCharges</p>
     * Add charges to account receivable
     * @deprecated
     */
    postARChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postARCharges.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling postARCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postARCharges.');
            }
            if (requestParameters.arChargesPostingCriteria === null || requestParameters.arChargesPostingCriteria === undefined) {
                throw new runtime.RequiredError('arChargesPostingCriteria', 'Required parameter requestParameters.arChargesPostingCriteria was null or undefined when calling postARCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/accounts/{accountId}/charges`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArChargesPostingCriteriaToJSON)(requestParameters.arChargesPostingCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to post charges to account receivable account.<br><p><strong><mark>This API is deprecated. Please use postChargesToAR instead</mark></strong></p> <p><strong>OperationId:</strong>postARCharges</p>
     * Add charges to account receivable
     * @deprecated
     */
    postARCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postARChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add old balances from external accounting systems into OPERA Accounts Receivable. <p><strong>OperationId:</strong>postAROldBalances</p>
     * Add old balances from external accounting systems
     */
    postAROldBalancesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.arOldBalances === null || requestParameters.arOldBalances === undefined) {
                throw new runtime.RequiredError('arOldBalances', 'Required parameter requestParameters.arOldBalances was null or undefined when calling postAROldBalances.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/oldBalances`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArOldBalancesToJSON)(requestParameters.arOldBalances),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add old balances from external accounting systems into OPERA Accounts Receivable. <p><strong>OperationId:</strong>postAROldBalances</p>
     * Add old balances from external accounting systems
     */
    postAROldBalances(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAROldBalancesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to make payment to AR accounts for a list of reservations. <p><strong>OperationId:</strong>postARPayments</p>
     * Add payment to an account receivable account for a list of reservations
     */
    postARPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postARPayments.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling postARPayments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postARPayments.');
            }
            if (requestParameters.arPaymentsToBeCreated === null || requestParameters.arPaymentsToBeCreated === undefined) {
                throw new runtime.RequiredError('arPaymentsToBeCreated', 'Required parameter requestParameters.arPaymentsToBeCreated was null or undefined when calling postARPayments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/accounts/{accountId}/payments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArPaymentsToBeCreatedToJSON)(requestParameters.arPaymentsToBeCreated),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArPaymentsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to make payment to AR accounts for a list of reservations. <p><strong>OperationId:</strong>postARPayments</p>
     * Add payment to an account receivable account for a list of reservations
     */
    postARPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postARPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    postAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAccount.');
            }
            if (requestParameters.accountCriteria === null || requestParameters.accountCriteria === undefined) {
                throw new runtime.RequiredError('accountCriteria', 'Required parameter requestParameters.accountCriteria was null or undefined when calling postAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountCriteriaToJSON)(requestParameters.accountCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    postAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add a note for a given account id. Use get accounts to find account id. <p><strong>OperationId:</strong>postAccountComment</p>
     * Create Account Comment
     */
    postAccountCommentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postAccountComment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAccountComment.');
            }
            if (requestParameters.accountComment === null || requestParameters.accountComment === undefined) {
                throw new runtime.RequiredError('accountComment', 'Required parameter requestParameters.accountComment was null or undefined when calling postAccountComment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/comments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountCommentToJSON)(requestParameters.accountComment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add a note for a given account id. Use get accounts to find account id. <p><strong>OperationId:</strong>postAccountComment</p>
     * Create Account Comment
     */
    postAccountComment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAccountCommentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create fixed charges for a given account id of account receivable. Use get accounts to find an account id. <p><strong>OperationId:</strong>postAccountFixedCharge</p>
     * Create fixed charges
     */
    postAccountFixedChargeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postAccountFixedCharge.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAccountFixedCharge.');
            }
            if (requestParameters.accountFixedCharge === null || requestParameters.accountFixedCharge === undefined) {
                throw new runtime.RequiredError('accountFixedCharge', 'Required parameter requestParameters.accountFixedCharge was null or undefined when calling postAccountFixedCharge.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/fixedCharges`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountFixedChargeToJSON)(requestParameters.accountFixedCharge),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create fixed charges for a given account id of account receivable. Use get accounts to find an account id. <p><strong>OperationId:</strong>postAccountFixedCharge</p>
     * Create fixed charges
     */
    postAccountFixedCharge(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAccountFixedChargeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add a trace for a given account id. Use getaccounts to find account id. <p><strong>OperationId:</strong>postAccountTrace</p>
     * Add a trace to an account receivable account
     */
    postAccountTraceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postAccountTrace.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAccountTrace.');
            }
            if (requestParameters.accountTrace === null || requestParameters.accountTrace === undefined) {
                throw new runtime.RequiredError('accountTrace', 'Required parameter requestParameters.accountTrace was null or undefined when calling postAccountTrace.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/traces`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountTraceToJSON)(requestParameters.accountTrace),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add a trace for a given account id. Use getaccounts to find account id. <p><strong>OperationId:</strong>postAccountTrace</p>
     * Add a trace to an account receivable account
     */
    postAccountTrace(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAccountTraceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a batch process for simultaneously post a one-time charge to multiple account receivable accounts. <p><strong>OperationId:</strong>postBatchCharges</p>
     * Create process to charge on multiple account receivables
     */
    postBatchChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBatchCharges.');
            }
            if (requestParameters.batchChargesToPost === null || requestParameters.batchChargesToPost === undefined) {
                throw new runtime.RequiredError('batchChargesToPost', 'Required parameter requestParameters.batchChargesToPost was null or undefined when calling postBatchCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/batchCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchChargesToPostToJSON)(requestParameters.batchChargesToPost),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a batch process for simultaneously post a one-time charge to multiple account receivable accounts. <p><strong>OperationId:</strong>postBatchCharges</p>
     * Create process to charge on multiple account receivables
     */
    postBatchCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBatchChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to post charges to account receivable account. <p><strong>OperationId:</strong>postChargesToAR</p>
     * Add charges to account receivable
     */
    postChargesToARRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postChargesToAR.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChargesToAR.');
            }
            if (requestParameters.arChargesPostingCriteria === null || requestParameters.arChargesPostingCriteria === undefined) {
                throw new runtime.RequiredError('arChargesPostingCriteria', 'Required parameter requestParameters.arChargesPostingCriteria was null or undefined when calling postChargesToAR.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/charges`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArChargesPostingCriteriaToJSON)(requestParameters.arChargesPostingCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to post charges to account receivable account. <p><strong>OperationId:</strong>postChargesToAR</p>
     * Add charges to account receivable
     */
    postChargesToAR(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChargesToARRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add credits to account receivable invoices. <p><strong>OperationId:</strong>postCreditToInvoices</p>
     * Add credits to AR invoices
     */
    postCreditToInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postCreditToInvoices.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCreditToInvoices.');
            }
            if (requestParameters.creditToInvoices === null || requestParameters.creditToInvoices === undefined) {
                throw new runtime.RequiredError('creditToInvoices', 'Required parameter requestParameters.creditToInvoices was null or undefined when calling postCreditToInvoices.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/applyCreditToInvoices`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditToInvoicesToJSON)(requestParameters.creditToInvoices),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add credits to account receivable invoices. <p><strong>OperationId:</strong>postCreditToInvoices</p>
     * Add credits to AR invoices
     */
    postCreditToInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCreditToInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new invoice for an AR account. <p><strong>OperationId:</strong>postInvoice</p>
     * Create account receivable invoices
     */
    postInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postInvoice.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postInvoice.');
            }
            if (requestParameters.arInvoice === null || requestParameters.arInvoice === undefined) {
                throw new runtime.RequiredError('arInvoice', 'Required parameter requestParameters.arInvoice was null or undefined when calling postInvoice.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/invoices`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArInvoiceToJSON)(requestParameters.arInvoice),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArInvoiceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new invoice for an AR account. <p><strong>OperationId:</strong>postInvoice</p>
     * Create account receivable invoices
     */
    postInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to generate a reminder statement which includes payment due,  current account balance, and etc. of account receivable account holder. <p><strong>OperationId:</strong>postReminders</p>
     * Generate reminders
     */
    postRemindersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reminders === null || requestParameters.reminders === undefined) {
                throw new runtime.RequiredError('reminders', 'Required parameter requestParameters.reminders was null or undefined when calling postReminders.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/accountReminders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RemindersToJSON)(requestParameters.reminders),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to generate a reminder statement which includes payment due,  current account balance, and etc. of account receivable account holder. <p><strong>OperationId:</strong>postReminders</p>
     * Generate reminders
     */
    postReminders(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRemindersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to reverse payment that occurred accidently or via user error. <p><strong>OperationId:</strong>postReversePayment</p>
     * Reverse Payment
     */
    postReversePaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.reversePayment === null || requestParameters.reversePayment === undefined) {
                throw new runtime.RequiredError('reversePayment', 'Required parameter requestParameters.reversePayment was null or undefined when calling postReversePayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/accounts/{accountId}/transactions/{transactionId}/reversePayment`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReversePaymentToJSON)(requestParameters.reversePayment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to reverse payment that occurred accidently or via user error. <p><strong>OperationId:</strong>postReversePayment</p>
     * Reverse Payment
     */
    postReversePayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReversePaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to generate statement for a given account receivable id. It includes the account balance as of the current business date, an aging summary that shows how long outstanding balances have been \"on the books\" for each aging level set up for given property. <p><strong>OperationId:</strong>postStatements</p>
     * Generate a statement for a given account receivable
     */
    postStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling postStatements.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postStatements.');
            }
            if (requestParameters.statementsToBeGenerated === null || requestParameters.statementsToBeGenerated === undefined) {
                throw new runtime.RequiredError('statementsToBeGenerated', 'Required parameter requestParameters.statementsToBeGenerated was null or undefined when calling postStatements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/statements`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.StatementsToBeGeneratedToJSON)(requestParameters.statementsToBeGenerated),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to generate statement for a given account receivable id. It includes the account balance as of the current business date, an aging summary that shows how long outstanding balances have been \"on the books\" for each aging level set up for given property. <p><strong>OperationId:</strong>postStatements</p>
     * Generate a statement for a given account receivable
     */
    postStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing AR invoice for a given profile and/or a reservation. <p><strong>OperationId:</strong>putARInvoicesAccount</p>
     * Change Account receivable invoice for an AR account
     */
    putARInvoicesAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.arInvoicesAccount === null || requestParameters.arInvoicesAccount === undefined) {
                throw new runtime.RequiredError('arInvoicesAccount', 'Required parameter requestParameters.arInvoicesAccount was null or undefined when calling putARInvoicesAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/invoicesAccount`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArInvoicesAccountToJSON)(requestParameters.arInvoicesAccount),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing AR invoice for a given profile and/or a reservation. <p><strong>OperationId:</strong>putARInvoicesAccount</p>
     * Change Account receivable invoice for an AR account
     */
    putARInvoicesAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putARInvoicesAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    putAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling putAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAccount.');
            }
            if (requestParameters.account === null || requestParameters.account === undefined) {
                throw new runtime.RequiredError('account', 'Required parameter requestParameters.account was null or undefined when calling putAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountToJSON)(requestParameters.account),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    putAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing account note. Use get account to find noteid <p><strong>OperationId:</strong>putAccountComment</p>
     * Change Account Comment
     */
    putAccountCommentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling putAccountComment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAccountComment.');
            }
            if (requestParameters.accountComment === null || requestParameters.accountComment === undefined) {
                throw new runtime.RequiredError('accountComment', 'Required parameter requestParameters.accountComment was null or undefined when calling putAccountComment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/comments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountCommentToJSON)(requestParameters.accountComment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing account note. Use get account to find noteid <p><strong>OperationId:</strong>putAccountComment</p>
     * Change Account Comment
     */
    putAccountComment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAccountCommentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing fixed charges for a given account receivable. <p><strong>OperationId:</strong>putAccountFixedCharge</p>
     * Update fixed charge detail
     */
    putAccountFixedChargeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fixedChargeId === null || requestParameters.fixedChargeId === undefined) {
                throw new runtime.RequiredError('fixedChargeId', 'Required parameter requestParameters.fixedChargeId was null or undefined when calling putAccountFixedCharge.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling putAccountFixedCharge.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAccountFixedCharge.');
            }
            if (requestParameters.accountFixedCharge === null || requestParameters.accountFixedCharge === undefined) {
                throw new runtime.RequiredError('accountFixedCharge', 'Required parameter requestParameters.accountFixedCharge was null or undefined when calling putAccountFixedCharge.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/fixedCharges/{fixedChargeId}`.replace(`{${"fixedChargeId"}}`, encodeURIComponent(String(requestParameters.fixedChargeId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountFixedChargeToJSON)(requestParameters.accountFixedCharge),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing fixed charges for a given account receivable. <p><strong>OperationId:</strong>putAccountFixedCharge</p>
     * Update fixed charge detail
     */
    putAccountFixedCharge(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAccountFixedChargeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putAccountTrace</p>
     * This API facilitates modification of account traces.
     */
    putAccountTraceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling putAccountTrace.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAccountTrace.');
            }
            if (requestParameters.accountTrace === null || requestParameters.accountTrace === undefined) {
                throw new runtime.RequiredError('accountTrace', 'Required parameter requestParameters.accountTrace was null or undefined when calling putAccountTrace.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/traces`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AccountTraceToJSON)(requestParameters.accountTrace),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putAccountTrace</p>
     * This API facilitates modification of account traces.
     */
    putAccountTrace(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAccountTraceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc.<br><p><strong><mark>This API is deprecated. Please use putInvoiceDetails instead</mark></strong></p> <p><strong>OperationId:</strong>putInvoice</p>
     * Update invoice detail.
     * @deprecated
     */
    putInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
                throw new runtime.RequiredError('invoiceId', 'Required parameter requestParameters.invoiceId was null or undefined when calling putInvoice.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putInvoice.');
            }
            if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
                throw new runtime.RequiredError('invoice', 'Required parameter requestParameters.invoice was null or undefined when calling putInvoice.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoiceToJSON)(requestParameters.invoice),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc.<br><p><strong><mark>This API is deprecated. Please use putInvoiceDetails instead</mark></strong></p> <p><strong>OperationId:</strong>putInvoice</p>
     * Update invoice detail.
     * @deprecated
     */
    putInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc. <p><strong>OperationId:</strong>putInvoiceDetails</p>
     * Update invoice detail.
     */
    putInvoiceDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putInvoiceDetails.');
            }
            if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
                throw new runtime.RequiredError('invoice', 'Required parameter requestParameters.invoice was null or undefined when calling putInvoiceDetails.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/invoices`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoiceToJSON)(requestParameters.invoice),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update or transfer invoice detail such as amount, transaction code, etc. <p><strong>OperationId:</strong>putInvoiceDetails</p>
     * Update invoice detail.
     */
    putInvoiceDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putInvoiceDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to close (\"freeze\") one or more selected invoices at any point after they have been created. When an invoice has been closed, no new postings to the invoice can be made, transaction reference or supplemental information can be edited, or adjustments to transaction codes can be made. However, payments can be posted to an invoice after it has been closed. <p><strong>OperationId:</strong>putInvoices</p>
     * Close account receivable invoices
     */
    putInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.invoices === null || requestParameters.invoices === undefined) {
                throw new runtime.RequiredError('invoices', 'Required parameter requestParameters.invoices was null or undefined when calling putInvoices.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/invoices/close`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoicesToJSON)(requestParameters.invoices),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to close (\"freeze\") one or more selected invoices at any point after they have been created. When an invoice has been closed, no new postings to the invoice can be made, transaction reference or supplemental information can be edited, or adjustments to transaction codes can be made. However, payments can be posted to an invoice after it has been closed. <p><strong>OperationId:</strong>putInvoices</p>
     * Close account receivable invoices
     */
    putInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete payments from invoice. <p><strong>OperationId:</strong>removePaymentsFromInvoice</p>
     * Delete payments from invoice
     */
    removePaymentsFromInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling removePaymentsFromInvoice.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removePaymentsFromInvoice.');
            }
            if (requestParameters.trxNo === null || requestParameters.trxNo === undefined) {
                throw new runtime.RequiredError('trxNo', 'Required parameter requestParameters.trxNo was null or undefined when calling removePaymentsFromInvoice.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling removePaymentsFromInvoice.');
            }
            const queryParameters = {};
            if (requestParameters.trxNo) {
                queryParameters['trxNo'] = requestParameters.trxNo;
            }
            if (requestParameters.accountId !== undefined) {
                queryParameters['accountId'] = requestParameters.accountId;
            }
            if (requestParameters.cashierID !== undefined) {
                queryParameters['cashierID'] = requestParameters.cashierID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/paymentsFromInvoice`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete payments from invoice. <p><strong>OperationId:</strong>removePaymentsFromInvoice</p>
     * Delete payments from invoice
     */
    removePaymentsFromInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removePaymentsFromInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to unfreeze or reopen invoice for account receivable. <p><strong>OperationId:</strong>reopenInvoices</p>
     * Reopen account receivable closed invoice
     */
    reopenInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.invoices === null || requestParameters.invoices === undefined) {
                throw new runtime.RequiredError('invoices', 'Required parameter requestParameters.invoices was null or undefined when calling reopenInvoices.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reopenInvoices`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoicesToJSON)(requestParameters.invoices),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to unfreeze or reopen invoice for account receivable. <p><strong>OperationId:</strong>reopenInvoices</p>
     * Reopen account receivable closed invoice
     */
    reopenInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reopenInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to transfer credit card payment transactions to Accounts Receivable. <p><strong>OperationId:</strong>transferARCreditCardPayments</p>
     * Move credit card payment to account receivable
     */
    transferARCreditCardPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling transferARCreditCardPayments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferARCreditCardPayments.');
            }
            if (requestParameters.arCreditCardPaymentsToTransfer === null || requestParameters.arCreditCardPaymentsToTransfer === undefined) {
                throw new runtime.RequiredError('arCreditCardPaymentsToTransfer', 'Required parameter requestParameters.arCreditCardPaymentsToTransfer was null or undefined when calling transferARCreditCardPayments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/arCreditCard/transfer`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArCreditCardPaymentsToTransferToJSON)(requestParameters.arCreditCardPaymentsToTransfer),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to transfer credit card payment transactions to Accounts Receivable. <p><strong>OperationId:</strong>transferARCreditCardPayments</p>
     * Move credit card payment to account receivable
     */
    transferARCreditCardPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferARCreditCardPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to transfer direct bills to account receivable account <p><strong>OperationId:</strong>transferDirectBillsToAr</p>
     * Move direct bills to account receivable
     */
    transferDirectBillsToArRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferDirectBillsToAr.');
            }
            if (requestParameters.transferDirectBillsToAr === null || requestParameters.transferDirectBillsToAr === undefined) {
                throw new runtime.RequiredError('transferDirectBillsToAr', 'Required parameter requestParameters.transferDirectBillsToAr was null or undefined when calling transferDirectBillsToAr.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/directBillsToAR`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransferDirectBillsToArToJSON)(requestParameters.transferDirectBillsToAr),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to transfer direct bills to account receivable account <p><strong>OperationId:</strong>transferDirectBillsToAr</p>
     * Move direct bills to account receivable
     */
    transferDirectBillsToAr(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferDirectBillsToArRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to move all or a portion of an invoice or a payment from one AR account to another AR account <p><strong>OperationId:</strong>transferInvoicesAndPayments</p>
     * Move an invoice or a payment to another AR account
     */
    transferInvoicesAndPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.invoicesAndPaymentsToTransfer === null || requestParameters.invoicesAndPaymentsToTransfer === undefined) {
                throw new runtime.RequiredError('invoicesAndPaymentsToTransfer', 'Required parameter requestParameters.invoicesAndPaymentsToTransfer was null or undefined when calling transferInvoicesAndPayments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/transferInvoicesAndPayments`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoicesAndPaymentsToTransferToJSON)(requestParameters.invoicesAndPaymentsToTransfer),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to move all or a portion of an invoice or a payment from one AR account to another AR account <p><strong>OperationId:</strong>transferInvoicesAndPayments</p>
     * Move an invoice or a payment to another AR account
     */
    transferInvoicesAndPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferInvoicesAndPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to transfer postings from one account receivable invoice to another account receivable invoice. <p><strong>OperationId:</strong>transferPostings</p>
     * Transfer postings
     */
    transferPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transferPostings === null || requestParameters.transferPostings === undefined) {
                throw new runtime.RequiredError('transferPostings', 'Required parameter requestParameters.transferPostings was null or undefined when calling transferPostings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/transferPostings`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransferPostingsToJSON)(requestParameters.transferPostings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to transfer postings from one account receivable invoice to another account receivable invoice. <p><strong>OperationId:</strong>transferPostings</p>
     * Transfer postings
     */
    transferPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to reverse compressing account receivable invoices and break single combined invoice into individual invoices. <p><strong>OperationId:</strong>uncompressARInvoices</p>
     * Reverse the compressing invoice process
     */
    uncompressARInvoicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling uncompressARInvoices.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling uncompressARInvoices.');
            }
            if (requestParameters.invoice === null || requestParameters.invoice === undefined) {
                throw new runtime.RequiredError('invoice', 'Required parameter requestParameters.invoice was null or undefined when calling uncompressARInvoices.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/accounts/{accountId}/uncompressInvoices`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InvoiceToJSON)(requestParameters.invoice),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to reverse compressing account receivable invoices and break single combined invoice into individual invoices. <p><strong>OperationId:</strong>uncompressARInvoices</p>
     * Reverse the compressing invoice process
     */
    uncompressARInvoices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uncompressARInvoicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to remove the invoice from the statement before that invoice can be included in a different statement. <p><strong>OperationId:</strong>unlinkInvoiceFromStatement</p>
     * Unlink invoices from a statement
     */
    unlinkInvoiceFromStatementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling unlinkInvoiceFromStatement.');
            }
            if (requestParameters.unlinkInvoiceFromStatement === null || requestParameters.unlinkInvoiceFromStatement === undefined) {
                throw new runtime.RequiredError('unlinkInvoiceFromStatement', 'Required parameter requestParameters.unlinkInvoiceFromStatement was null or undefined when calling unlinkInvoiceFromStatement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/unlink/invoiceFromStatement`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UnlinkInvoiceFromStatementToJSON)(requestParameters.unlinkInvoiceFromStatement),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to remove the invoice from the statement before that invoice can be included in a different statement. <p><strong>OperationId:</strong>unlinkInvoiceFromStatement</p>
     * Unlink invoices from a statement
     */
    unlinkInvoiceFromStatement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unlinkInvoiceFromStatementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AccountsReceivablesApi = AccountsReceivablesApi;
/**
 * @export
 */
exports.GetARStatementsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetARStatementsInvoiceTypeEnum = {
    Normal: 'Normal',
    Credit: 'Credit',
    OldBalance: 'OldBalance',
    PasserBy: 'PasserBy'
};
/**
 * @export
 */
exports.GetARStatementsColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
};
/**
 * @export
 */
exports.GetARStatementsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetARStatementsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetARStatementsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetAccountFetchInstructionsEnum = {
    Account: 'Account',
    Aging: 'Aging',
    FixedCharges: 'FixedCharges',
    Invoices: 'Invoices',
    Payments: 'Payments',
    Summary: 'Summary',
    Comments: 'Comments',
    Traces: 'Traces',
    Reminder: 'Reminder',
    Statement: 'Statement',
    Indicators: 'Indicators',
    YearView: 'YearView'
};
/**
 * @export
 */
exports.GetAccountsBalanceEnum = {
    All: 'All',
    Open: 'Open',
    Zero: 'Zero'
};
/**
 * @export
 */
exports.GetAccountsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetInvoicePostingsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetInvoicePostingsInvoiceTypeEnum = {
    Normal: 'Normal',
    Credit: 'Credit',
    OldBalance: 'OldBalance',
    PasserBy: 'PasserBy'
};
/**
 * @export
 */
exports.GetInvoicePostingsColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
};
/**
 * @export
 */
exports.GetInvoicePostingsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetInvoicePostingsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetInvoicePostingsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetInvoicesPaymentsFetchInstructionsEnum = {
    Invoices: 'Invoices',
    Payments: 'Payments'
};
/**
 * @export
 */
exports.GetStatementsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetStatementsInvoiceTypeEnum = {
    Normal: 'Normal',
    Credit: 'Credit',
    OldBalance: 'OldBalance',
    PasserBy: 'PasserBy'
};
/**
 * @export
 */
exports.GetStatementsColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
};
/**
 * @export
 */
exports.GetStatementsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetStatementsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetStatementsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
