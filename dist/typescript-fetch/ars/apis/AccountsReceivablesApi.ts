/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtorsâ€™ accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountsInfo,
  ArTransactions,
  CopyARAccountRequest,
  ExceptionDetailType,
  InvoicesPayments,
  PostAccountRequest,
  PutAccountRequest,
  Status,
} from '../models';
import {
    AccountsInfoFromJSON,
    AccountsInfoToJSON,
    ArTransactionsFromJSON,
    ArTransactionsToJSON,
    CopyARAccountRequestFromJSON,
    CopyARAccountRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    InvoicesPaymentsFromJSON,
    InvoicesPaymentsToJSON,
    PostAccountRequestFromJSON,
    PostAccountRequestToJSON,
    PutAccountRequestFromJSON,
    PutAccountRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface CopyARAccountOperationRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountCopy?: CopyARAccountRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetARTransactionsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accounts?: string;
    endDate?: Date;
    startDate?: Date;
    fromAmount?: number;
    fromCurrencyCode?: string;
    toAmount?: number;
    toCurrencyCode?: string;
    guestName?: string;
    invoices?: Array<number>;
    folios?: Array<string>;
    fiscalBillNo?: string;
    accountName?: string;
    addresseName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    balance?: GetAccountsBalanceEnum;
    batchStatement?: boolean;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    profileId?: string;
    profileIdContext?: string;
    profileType?: string;
    type?: string;
    accountNo?: Array<string>;
    accountName?: string;
    accountId?: Array<string>;
    accountIdContext?: Array<string>;
    accountType?: Array<string>;
    includeStatementHistoryIndicator?: boolean;
    includeReminderHistoryIndicator?: boolean;
    superSearch?: string;
    searchHotelIds?: Array<string>;
    attributeName?: Array<string>;
    orderType?: Set<GetAccountsOrderTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInvoicesPaymentsRequest {
    accountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inclDetails?: boolean;
    inclZeroBalance?: boolean;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    end?: Date;
    start?: Date;
    guestDisplayName?: string;
    remark?: string;
    reference?: string;
    invoiceNo?: Array<number>;
    addresseeName?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationType?: string;
    printed?: boolean;
    unBilled?: boolean;
    folioNo?: Array<string>;
    fiscalBillNo?: string;
    statementNo?: number;
    fetchInstructions?: Set<GetInvoicesPaymentsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAccountOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountCriteria?: PostAccountRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAccountOperationRequest {
    accountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    account?: PutAccountRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AccountsReceivablesApi extends runtime.BaseAPI {

    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account 
     */
    async copyARAccountRaw(requestParameters: CopyARAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/accounts/{accountId}/copyAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyARAccountRequestToJSON(requestParameters.arAccountCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create account receivable to multiple hotels by copying from source hotel. <p><strong>OperationId:</strong>copyARAccount</p>
     * Copy account receivable account 
     */
    async copyARAccount(requestParameters: CopyARAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyARAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    async getARTransactionsRaw(requestParameters: GetARTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArTransactions>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.accounts !== undefined) {
            queryParameters['accounts'] = requestParameters.accounts;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fromAmount !== undefined) {
            queryParameters['fromAmount'] = requestParameters.fromAmount;
        }

        if (requestParameters.fromCurrencyCode !== undefined) {
            queryParameters['fromCurrencyCode'] = requestParameters.fromCurrencyCode;
        }

        if (requestParameters.toAmount !== undefined) {
            queryParameters['toAmount'] = requestParameters.toAmount;
        }

        if (requestParameters.toCurrencyCode !== undefined) {
            queryParameters['toCurrencyCode'] = requestParameters.toCurrencyCode;
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.invoices) {
            queryParameters['invoices'] = requestParameters.invoices;
        }

        if (requestParameters.folios) {
            queryParameters['folios'] = requestParameters.folios;
        }

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.accountName !== undefined) {
            queryParameters['accountName'] = requestParameters.accountName;
        }

        if (requestParameters.addresseName !== undefined) {
            queryParameters['addresseName'] = requestParameters.addresseName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/arTransactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArTransactionsFromJSON(jsonValue));
    }

    /**
     * Use this API to get list of transaction data for a given account receivable account number and list of hotels <p><strong>OperationId:</strong>getARTransactions</p>
     * Get AR transactions.
     */
    async getARTransactions(requestParameters: GetARTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArTransactions> {
        const response = await this.getARTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    async getAccountsRaw(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.balance !== undefined) {
            queryParameters['balance'] = requestParameters.balance;
        }

        if (requestParameters.batchStatement !== undefined) {
            queryParameters['batchStatement'] = requestParameters.batchStatement;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdContext !== undefined) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.accountNo) {
            queryParameters['accountNo'] = requestParameters.accountNo;
        }

        if (requestParameters.accountName !== undefined) {
            queryParameters['accountName'] = requestParameters.accountName;
        }

        if (requestParameters.accountId) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.accountIdContext) {
            queryParameters['accountIdContext'] = requestParameters.accountIdContext;
        }

        if (requestParameters.accountType) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.includeStatementHistoryIndicator !== undefined) {
            queryParameters['includeStatementHistoryIndicator'] = requestParameters.includeStatementHistoryIndicator;
        }

        if (requestParameters.includeReminderHistoryIndicator !== undefined) {
            queryParameters['includeReminderHistoryIndicator'] = requestParameters.includeReminderHistoryIndicator;
        }

        if (requestParameters.superSearch !== undefined) {
            queryParameters['superSearch'] = requestParameters.superSearch;
        }

        if (requestParameters.searchHotelIds) {
            queryParameters['searchHotelIds'] = requestParameters.searchHotelIds;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to search for AR Accounts for a given OPERA Profile id. API returns contain a list of AR Accounts and their AR information. <p><strong>OperationId:</strong>getAccounts</p>
     * Get given profile\'s account receivable detail
     */
    async getAccounts(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsInfo> {
        const response = await this.getAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    async getInvoicesPaymentsRaw(requestParameters: GetInvoicesPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicesPayments>> {
        const queryParameters: any = {};

        if (requestParameters.inclDetails !== undefined) {
            queryParameters['inclDetails'] = requestParameters.inclDetails;
        }

        if (requestParameters.inclZeroBalance !== undefined) {
            queryParameters['inclZeroBalance'] = requestParameters.inclZeroBalance;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.guestDisplayName !== undefined) {
            queryParameters['guestDisplayName'] = requestParameters.guestDisplayName;
        }

        if (requestParameters.remark !== undefined) {
            queryParameters['remark'] = requestParameters.remark;
        }

        if (requestParameters.reference !== undefined) {
            queryParameters['reference'] = requestParameters.reference;
        }

        if (requestParameters.invoiceNo) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        if (requestParameters.addresseeName !== undefined) {
            queryParameters['addresseeName'] = requestParameters.addresseeName;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationType !== undefined) {
            queryParameters['reservationType'] = requestParameters.reservationType;
        }

        if (requestParameters.printed !== undefined) {
            queryParameters['printed'] = requestParameters.printed;
        }

        if (requestParameters.unBilled !== undefined) {
            queryParameters['unBilled'] = requestParameters.unBilled;
        }

        if (requestParameters.folioNo) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.statementNo !== undefined) {
            queryParameters['statementNo'] = requestParameters.statementNo;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/invoicePayments/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicesPaymentsFromJSON(jsonValue));
    }

    /**
     * Use this API to get payment data for account receivable invoices. <p><strong>OperationId:</strong>getInvoicesPayments</p>
     * Get payment detail for account\'s invoices
     */
    async getInvoicesPayments(requestParameters: GetInvoicesPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicesPayments> {
        const response = await this.getInvoicesPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    async postAccountRaw(requestParameters: PostAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/accounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAccountRequestToJSON(requestParameters.accountCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new account receivable type account for given OPERA profile id. Prior creating account, need to use getProfile to find OPERA profile\'s id.  <p><strong>OperationId:</strong>postAccount</p>
     * Create an account receivable account
     */
    async postAccount(requestParameters: PostAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    async putAccountRaw(requestParameters: PutAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAccountRequestToJSON(requestParameters.account),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update existing account using account id and further detail. Use get account to get account detail prior updating. <p><strong>OperationId:</strong>putAccount</p>
     * Update a account receivable account
     */
    async putAccount(requestParameters: PutAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccountsBalanceEnum = {
    All: 'All',
    Open: 'Open',
    Zero: 'Zero'
} as const;
export type GetAccountsBalanceEnum = typeof GetAccountsBalanceEnum[keyof typeof GetAccountsBalanceEnum];
/**
 * @export
 */
export const GetAccountsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetAccountsOrderTypeEnum = typeof GetAccountsOrderTypeEnum[keyof typeof GetAccountsOrderTypeEnum];
/**
 * @export
 */
export const GetInvoicesPaymentsFetchInstructionsEnum = {
    Invoices: 'Invoices',
    Payments: 'Payments'
} as const;
export type GetInvoicesPaymentsFetchInstructionsEnum = typeof GetInvoicesPaymentsFetchInstructionsEnum[keyof typeof GetInvoicesPaymentsFetchInstructionsEnum];
