"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepaidCardRedemptionTypeToJSON = exports.PrepaidCardRedemptionTypeFromJSONTyped = exports.PrepaidCardRedemptionTypeFromJSON = exports.instanceOfPrepaidCardRedemptionType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the PrepaidCardRedemptionType interface.
 */
function instanceOfPrepaidCardRedemptionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPrepaidCardRedemptionType = instanceOfPrepaidCardRedemptionType;
function PrepaidCardRedemptionTypeFromJSON(json) {
    return PrepaidCardRedemptionTypeFromJSONTyped(json, false);
}
exports.PrepaidCardRedemptionTypeFromJSON = PrepaidCardRedemptionTypeFromJSON;
function PrepaidCardRedemptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cardNo': !(0, runtime_1.exists)(json, 'cardNo') ? undefined : json['cardNo'],
        'pin': !(0, runtime_1.exists)(json, 'pin') ? undefined : json['pin'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['interfaceId']),
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'transactionCode': !(0, runtime_1.exists)(json, 'transactionCode') ? undefined : json['transactionCode'],
        'reference': !(0, runtime_1.exists)(json, 'reference') ? undefined : json['reference'],
    };
}
exports.PrepaidCardRedemptionTypeFromJSONTyped = PrepaidCardRedemptionTypeFromJSONTyped;
function PrepaidCardRedemptionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cardNo': value.cardNo,
        'pin': value.pin,
        'interfaceId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.interfaceId),
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'transactionCode': value.transactionCode,
        'reference': value.reference,
    };
}
exports.PrepaidCardRedemptionTypeToJSON = PrepaidCardRedemptionTypeToJSON;
