"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationInfoTypeToJSON = exports.AuthorizationInfoTypeFromJSONTyped = exports.AuthorizationInfoTypeFromJSON = exports.instanceOfAuthorizationInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the AuthorizationInfoType interface.
 */
function instanceOfAuthorizationInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAuthorizationInfoType = instanceOfAuthorizationInfoType;
function AuthorizationInfoTypeFromJSON(json) {
    return AuthorizationInfoTypeFromJSONTyped(json, false);
}
exports.AuthorizationInfoTypeFromJSON = AuthorizationInfoTypeFromJSON;
function AuthorizationInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'approvalAmount': !(0, runtime_1.exists)(json, 'approvalAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['approvalAmount']),
        'approvalCode': !(0, runtime_1.exists)(json, 'approvalCode') ? undefined : json['approvalCode'],
        'originalAuthSequence': !(0, runtime_1.exists)(json, 'originalAuthSequence') ? undefined : json['originalAuthSequence'],
        'vendorTranId': !(0, runtime_1.exists)(json, 'vendorTranId') ? undefined : json['vendorTranId'],
    };
}
exports.AuthorizationInfoTypeFromJSONTyped = AuthorizationInfoTypeFromJSONTyped;
function AuthorizationInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'approvalAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.approvalAmount),
        'approvalCode': value.approvalCode,
        'originalAuthSequence': value.originalAuthSequence,
        'vendorTranId': value.vendorTranId,
    };
}
exports.AuthorizationInfoTypeToJSON = AuthorizationInfoTypeToJSON;
