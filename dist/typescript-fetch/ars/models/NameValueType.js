"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameValueTypeToJSON = exports.NameValueTypeFromJSONTyped = exports.NameValueTypeFromJSON = exports.instanceOfNameValueType = void 0;
const runtime_1 = require("../runtime");
const CodeListType_1 = require("./CodeListType");
const NameValueDataTypeType_1 = require("./NameValueDataTypeType");
const NameValueOriginType_1 = require("./NameValueOriginType");
/**
 * Check if a given object implements the NameValueType interface.
 */
function instanceOfNameValueType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfNameValueType = instanceOfNameValueType;
function NameValueTypeFromJSON(json) {
    return NameValueTypeFromJSONTyped(json, false);
}
exports.NameValueTypeFromJSON = NameValueTypeFromJSON;
function NameValueTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : (0, NameValueDataTypeType_1.NameValueDataTypeTypeFromJSON)(json['dataType']),
        'formatString': !(0, runtime_1.exists)(json, 'formatString') ? undefined : json['formatString'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'origin': !(0, runtime_1.exists)(json, 'origin') ? undefined : (0, NameValueOriginType_1.NameValueOriginTypeFromJSON)(json['origin']),
        'usageInstruction': !(0, runtime_1.exists)(json, 'usageInstruction') ? undefined : (0, CodeListType_1.CodeListTypeFromJSON)(json['usageInstruction']),
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
    };
}
exports.NameValueTypeFromJSONTyped = NameValueTypeFromJSONTyped;
function NameValueTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dataType': (0, NameValueDataTypeType_1.NameValueDataTypeTypeToJSON)(value.dataType),
        'formatString': value.formatString,
        'name': value.name,
        'origin': (0, NameValueOriginType_1.NameValueOriginTypeToJSON)(value.origin),
        'usageInstruction': (0, CodeListType_1.CodeListTypeToJSON)(value.usageInstruction),
        'value': value.value,
    };
}
exports.NameValueTypeToJSON = NameValueTypeToJSON;
