"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARApplyPaymentCriteriaTypeToJSON = exports.ARApplyPaymentCriteriaTypeFromJSONTyped = exports.ARApplyPaymentCriteriaTypeFromJSON = exports.instanceOfARApplyPaymentCriteriaType = void 0;
const runtime_1 = require("../runtime");
const ARAccountCriteriaType_1 = require("./ARAccountCriteriaType");
const ARApplyType_1 = require("./ARApplyType");
const ARPaymentInvoicesTypeInner_1 = require("./ARPaymentInvoicesTypeInner");
const ARPaymentType_1 = require("./ARPaymentType");
/**
 * Check if a given object implements the ARApplyPaymentCriteriaType interface.
 */
function instanceOfARApplyPaymentCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARApplyPaymentCriteriaType = instanceOfARApplyPaymentCriteriaType;
function ARApplyPaymentCriteriaTypeFromJSON(json) {
    return ARApplyPaymentCriteriaTypeFromJSONTyped(json, false);
}
exports.ARApplyPaymentCriteriaTypeFromJSON = ARApplyPaymentCriteriaTypeFromJSON;
function ARApplyPaymentCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'account': !(0, runtime_1.exists)(json, 'account') ? undefined : (0, ARAccountCriteriaType_1.ARAccountCriteriaTypeFromJSON)(json['account']),
        'invoices': !(0, runtime_1.exists)(json, 'invoices') ? undefined : (json['invoices'].map(ARPaymentInvoicesTypeInner_1.ARPaymentInvoicesTypeInnerFromJSON)),
        'payments': !(0, runtime_1.exists)(json, 'payments') ? undefined : (json['payments'].map(ARPaymentType_1.ARPaymentTypeFromJSON)),
        'applyType': !(0, runtime_1.exists)(json, 'applyType') ? undefined : (0, ARApplyType_1.ARApplyTypeFromJSON)(json['applyType']),
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
    };
}
exports.ARApplyPaymentCriteriaTypeFromJSONTyped = ARApplyPaymentCriteriaTypeFromJSONTyped;
function ARApplyPaymentCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'account': (0, ARAccountCriteriaType_1.ARAccountCriteriaTypeToJSON)(value.account),
        'invoices': value.invoices === undefined ? undefined : (value.invoices.map(ARPaymentInvoicesTypeInner_1.ARPaymentInvoicesTypeInnerToJSON)),
        'payments': value.payments === undefined ? undefined : (value.payments.map(ARPaymentType_1.ARPaymentTypeToJSON)),
        'applyType': (0, ARApplyType_1.ARApplyTypeToJSON)(value.applyType),
        'cashierId': value.cashierId,
    };
}
exports.ARApplyPaymentCriteriaTypeToJSON = ARApplyPaymentCriteriaTypeToJSON;
