"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARTransactionTypeToJSON = exports.ARTransactionTypeFromJSONTyped = exports.ARTransactionTypeFromJSON = exports.instanceOfARTransactionType = void 0;
const runtime_1 = require("../runtime");
const AccountInvoiceInfoType_1 = require("./AccountInvoiceInfoType");
const AccountPaymentInfoType_1 = require("./AccountPaymentInfoType");
/**
 * Check if a given object implements the ARTransactionType interface.
 */
function instanceOfARTransactionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARTransactionType = instanceOfARTransactionType;
function ARTransactionTypeFromJSON(json) {
    return ARTransactionTypeFromJSONTyped(json, false);
}
exports.ARTransactionTypeFromJSON = ARTransactionTypeFromJSON;
function ARTransactionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'invoices': !(0, runtime_1.exists)(json, 'invoices') ? undefined : (json['invoices'].map(AccountInvoiceInfoType_1.AccountInvoiceInfoTypeFromJSON)),
        'payments': !(0, runtime_1.exists)(json, 'payments') ? undefined : (json['payments'].map(AccountPaymentInfoType_1.AccountPaymentInfoTypeFromJSON)),
    };
}
exports.ARTransactionTypeFromJSONTyped = ARTransactionTypeFromJSONTyped;
function ARTransactionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'invoices': value.invoices === undefined ? undefined : (value.invoices.map(AccountInvoiceInfoType_1.AccountInvoiceInfoTypeToJSON)),
        'payments': value.payments === undefined ? undefined : (value.payments.map(AccountPaymentInfoType_1.AccountPaymentInfoTypeToJSON)),
    };
}
exports.ARTransactionTypeToJSON = ARTransactionTypeToJSON;
