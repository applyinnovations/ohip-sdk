"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARCreditCardPaymentInfoTypeToJSON = exports.ARCreditCardPaymentInfoTypeFromJSONTyped = exports.ARCreditCardPaymentInfoTypeFromJSON = exports.instanceOfARCreditCardPaymentInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const ProfileId_1 = require("./ProfileId");
/**
 * Check if a given object implements the ARCreditCardPaymentInfoType interface.
 */
function instanceOfARCreditCardPaymentInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARCreditCardPaymentInfoType = instanceOfARCreditCardPaymentInfoType;
function ARCreditCardPaymentInfoTypeFromJSON(json) {
    return ARCreditCardPaymentInfoTypeFromJSONTyped(json, false);
}
exports.ARCreditCardPaymentInfoTypeFromJSON = ARCreditCardPaymentInfoTypeFromJSON;
function ARCreditCardPaymentInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'fiscalFolioNo': !(0, runtime_1.exists)(json, 'fiscalFolioNo') ? undefined : json['fiscalFolioNo'],
        'folioNo': !(0, runtime_1.exists)(json, 'folioNo') ? undefined : json['folioNo'],
        'guestName': !(0, runtime_1.exists)(json, 'guestName') ? undefined : json['guestName'],
        'postingDate': !(0, runtime_1.exists)(json, 'postingDate') ? undefined : json['postingDate'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'reference': !(0, runtime_1.exists)(json, 'reference') ? undefined : json['reference'],
        'remark': !(0, runtime_1.exists)(json, 'remark') ? undefined : json['remark'],
        'transactionDate': !(0, runtime_1.exists)(json, 'transactionDate') ? undefined : json['transactionDate'],
        'transactionNo': !(0, runtime_1.exists)(json, 'transactionNo') ? undefined : json['transactionNo'],
    };
}
exports.ARCreditCardPaymentInfoTypeFromJSONTyped = ARCreditCardPaymentInfoTypeFromJSONTyped;
function ARCreditCardPaymentInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'fiscalFolioNo': value.fiscalFolioNo,
        'folioNo': value.folioNo,
        'guestName': value.guestName,
        'postingDate': value.postingDate,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'reference': value.reference,
        'remark': value.remark,
        'transactionDate': value.transactionDate,
        'transactionNo': value.transactionNo,
    };
}
exports.ARCreditCardPaymentInfoTypeToJSON = ARCreditCardPaymentInfoTypeToJSON;
