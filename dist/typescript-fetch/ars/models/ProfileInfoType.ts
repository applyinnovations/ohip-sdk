/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtorsâ€™ accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Provides information about attached profiles to the block.
 * @export
 * @interface ProfileInfoType
 */
export interface ProfileInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ProfileInfoType
     */
    profileId?: UniqueIDType;
    /**
     * Name for the profile attached to the block.
     * @type {string}
     * @memberof ProfileInfoType
     */
    name?: string;
    /**
     * City for the profile attached to the block.
     * @type {string}
     * @memberof ProfileInfoType
     */
    city?: string;
    /**
     * Phone for the profile attached to the block.
     * @type {string}
     * @memberof ProfileInfoType
     */
    phone?: string;
    /**
     * Defines the type of Linked profiles for a block.
     * @type {string}
     * @memberof ProfileInfoType
     */
    type?: string;
}

/**
 * Check if a given object implements the ProfileInfoType interface.
 */
export function instanceOfProfileInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileInfoTypeFromJSON(json: any): ProfileInfoType {
    return ProfileInfoTypeFromJSONTyped(json, false);
}

export function ProfileInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function ProfileInfoTypeToJSON(value?: ProfileInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'name': value.name,
        'city': value.city,
        'phone': value.phone,
        'type': value.type,
    };
}

