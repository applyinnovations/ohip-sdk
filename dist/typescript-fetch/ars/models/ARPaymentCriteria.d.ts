/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ARAccountCriteriaType } from './ARAccountCriteriaType';
import type { ARApplyType } from './ARApplyType';
import type { ARPaymentInvoicesTypeInner } from './ARPaymentInvoicesTypeInner';
import type { CashieringPaymentMethodType } from './CashieringPaymentMethodType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { PaymentTaxType } from './PaymentTaxType';
import type { PostPaymentActionType } from './PostPaymentActionType';
import type { PrepaidCardRedemptionType } from './PrepaidCardRedemptionType';
import type { RedemptionType } from './RedemptionType';
/**
 * Criteria for applying payments to invoices or posting an unallocated payment to an AR Account.
 * @export
 * @interface ARPaymentCriteria
 */
export interface ARPaymentCriteria {
    /**
     *
     * @type {ARAccountCriteriaType}
     * @memberof ARPaymentCriteria
     */
    account?: ARAccountCriteriaType;
    /**
     *
     * @type {PostPaymentActionType}
     * @memberof ARPaymentCriteria
     */
    action?: PostPaymentActionType;
    /**
     * Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available.
     * @type {boolean}
     * @memberof ARPaymentCriteria
     */
    applyCCSurcharge?: boolean;
    /**
     * Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest.
     * @type {boolean}
     * @memberof ARPaymentCriteria
     */
    applyCurrencyTaxes?: boolean;
    /**
     *
     * @type {ARApplyType}
     * @memberof ARPaymentCriteria
     */
    applyType?: ARApplyType;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ARPaymentCriteria
     */
    cashierId?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ARPaymentCriteria
     */
    changeDueAmount?: CurrencyAmountType;
    /**
     * User Defined Comments. Used for Deposit Payment postings.
     * @type {string}
     * @memberof ARPaymentCriteria
     */
    comments?: string;
    /**
     * Information regarding Complimentary Bucket Redemption object.
     * @type {Array<RedemptionType>}
     * @memberof ARPaymentCriteria
     */
    compRedemptions?: Array<RedemptionType>;
    /**
     * Payment Tax record.
     * @type {Array<PaymentTaxType>}
     * @memberof ARPaymentCriteria
     */
    creditablePaymentTaxes?: Array<PaymentTaxType>;
    /**
     *
     * @type {number}
     * @memberof ARPaymentCriteria
     */
    folioWindowNo?: number;
    /**
     * Property code.
     * @type {string}
     * @memberof ARPaymentCriteria
     */
    hotelId?: string;
    /**
     * AR Invoice to which the payment will be applied.
     * @type {Array<ARPaymentInvoicesTypeInner>}
     * @memberof ARPaymentCriteria
     */
    invoices?: Array<ARPaymentInvoicesTypeInner>;
    /**
     *
     * @type {PaymentTaxType}
     * @memberof ARPaymentCriteria
     */
    manualPaymentTaxInfo?: PaymentTaxType;
    /**
     * Flag to override account receivable credit limit
     * @type {boolean}
     * @memberof ARPaymentCriteria
     */
    overrideARCreditLimit?: boolean;
    /**
     * Flag to allow a rebate by Credit Card
     * @type {boolean}
     * @memberof ARPaymentCriteria
     */
    overrideInsufficientCC?: boolean;
    /**
     *
     * @type {CashieringPaymentMethodType}
     * @memberof ARPaymentCriteria
     */
    paymentMethod?: CashieringPaymentMethodType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ARPaymentCriteria
     */
    postingAmount?: CurrencyAmountType;
    /**
     * User-defined posting reference.
     * @type {string}
     * @memberof ARPaymentCriteria
     */
    postingReference?: string;
    /**
     * User-defined posting remark.
     * @type {string}
     * @memberof ARPaymentCriteria
     */
    postingRemark?: string;
    /**
     * A prepaid redemption info object to be used for posting a payment.
     * @type {Array<PrepaidCardRedemptionType>}
     * @memberof ARPaymentCriteria
     */
    prepaidCardRedemptions?: Array<PrepaidCardRedemptionType>;
    /**
     * Sequence of the payment in a batch request.
     * @type {number}
     * @memberof ARPaymentCriteria
     */
    sequenceNo?: number;
    /**
     * Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made.
     * @type {string}
     * @memberof ARPaymentCriteria
     */
    terminalId?: string;
    /**
     * Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest.
     * @type {boolean}
     * @memberof ARPaymentCriteria
     */
    vATOffset?: boolean;
}
/**
 * Check if a given object implements the ARPaymentCriteria interface.
 */
export declare function instanceOfARPaymentCriteria(value: object): boolean;
export declare function ARPaymentCriteriaFromJSON(json: any): ARPaymentCriteria;
export declare function ARPaymentCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARPaymentCriteria;
export declare function ARPaymentCriteriaToJSON(value?: ARPaymentCriteria | null): any;
