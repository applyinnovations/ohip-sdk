/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtorsâ€™ accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashierInfoType } from './CashierInfoType';
import {
    CashierInfoTypeFromJSON,
    CashierInfoTypeFromJSONTyped,
    CashierInfoTypeToJSON,
} from './CashierInfoType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ResPaymentCardType } from './ResPaymentCardType';
import {
    ResPaymentCardTypeFromJSON,
    ResPaymentCardTypeFromJSONTyped,
    ResPaymentCardTypeToJSON,
} from './ResPaymentCardType';

/**
 * Details of an AR Payment.
 * @export
 * @interface ARPaymentType
 */
export interface ARPaymentType {
    /**
     * The Aging age of the payment.
     * @type {number}
     * @memberof ARPaymentType
     */
    age?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARPaymentType
     */
    amount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARPaymentType
     */
    amountUsed?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARPaymentType
     */
    balance?: CurrencyAmountType;
    /**
     * User-defined posting reference.
     * @type {string}
     * @memberof ARPaymentType
     */
    reference?: string;
    /**
     * User-defined posting remark.
     * @type {string}
     * @memberof ARPaymentType
     */
    remark?: string;
    /**
     * 
     * @type {CashierInfoType}
     * @memberof ARPaymentType
     */
    cashierInfo?: CashierInfoType;
    /**
     * 
     * @type {ResPaymentCardType}
     * @memberof ARPaymentType
     */
    paymentCard?: ResPaymentCardType;
    /**
     * 
     * @type {boolean}
     * @memberof ARPaymentType
     */
    transferredOut?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ARPaymentType
     */
    transferredIn?: boolean;
    /**
     * Property code.
     * @type {string}
     * @memberof ARPaymentType
     */
    hotelId?: string;
    /**
     * Unique Transaction Identifier of the Payment.
     * @type {number}
     * @memberof ARPaymentType
     */
    transactionNo?: number;
    /**
     * Date of the Payment.
     * @type {Date}
     * @memberof ARPaymentType
     */
    transactionDate?: Date;
    /**
     * Transaction code of the Payment.
     * @type {string}
     * @memberof ARPaymentType
     */
    transactionCode?: string;
    /**
     * Posting date of the invoice.
     * @type {Date}
     * @memberof ARPaymentType
     */
    postingDate?: Date;
    /**
     * Revenue date ID of the invoice.
     * @type {Date}
     * @memberof ARPaymentType
     */
    revenueDate?: Date;
    /**
     * Transfer of the invoice.
     * @type {Date}
     * @memberof ARPaymentType
     */
    transferDate?: Date;
    /**
     * When this PostingType is used to return the postings generated by a batch request, the sequence number is used to relate to the Request's sequence number.
     * @type {number}
     * @memberof ARPaymentType
     */
    sequenceNo?: number;
}

/**
 * Check if a given object implements the ARPaymentType interface.
 */
export function instanceOfARPaymentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARPaymentTypeFromJSON(json: any): ARPaymentType {
    return ARPaymentTypeFromJSONTyped(json, false);
}

export function ARPaymentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARPaymentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'age': !exists(json, 'age') ? undefined : json['age'],
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'amountUsed': !exists(json, 'amountUsed') ? undefined : CurrencyAmountTypeFromJSON(json['amountUsed']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'remark': !exists(json, 'remark') ? undefined : json['remark'],
        'cashierInfo': !exists(json, 'cashierInfo') ? undefined : CashierInfoTypeFromJSON(json['cashierInfo']),
        'paymentCard': !exists(json, 'paymentCard') ? undefined : ResPaymentCardTypeFromJSON(json['paymentCard']),
        'transferredOut': !exists(json, 'transferredOut') ? undefined : json['transferredOut'],
        'transferredIn': !exists(json, 'transferredIn') ? undefined : json['transferredIn'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'postingDate': !exists(json, 'postingDate') ? undefined : (new Date(json['postingDate'])),
        'revenueDate': !exists(json, 'revenueDate') ? undefined : (new Date(json['revenueDate'])),
        'transferDate': !exists(json, 'transferDate') ? undefined : (new Date(json['transferDate'])),
        'sequenceNo': !exists(json, 'sequenceNo') ? undefined : json['sequenceNo'],
    };
}

export function ARPaymentTypeToJSON(value?: ARPaymentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'age': value.age,
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'amountUsed': CurrencyAmountTypeToJSON(value.amountUsed),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'reference': value.reference,
        'remark': value.remark,
        'cashierInfo': CashierInfoTypeToJSON(value.cashierInfo),
        'paymentCard': ResPaymentCardTypeToJSON(value.paymentCard),
        'transferredOut': value.transferredOut,
        'transferredIn': value.transferredIn,
        'hotelId': value.hotelId,
        'transactionNo': value.transactionNo,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString().substr(0,10)),
        'transactionCode': value.transactionCode,
        'postingDate': value.postingDate === undefined ? undefined : (value.postingDate.toISOString().substr(0,10)),
        'revenueDate': value.revenueDate === undefined ? undefined : (value.revenueDate.toISOString().substr(0,10)),
        'transferDate': value.transferDate === undefined ? undefined : (value.transferDate.toISOString().substr(0,10)),
        'sequenceNo': value.sequenceNo,
    };
}

