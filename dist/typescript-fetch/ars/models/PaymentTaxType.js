"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentTaxTypeToJSON = exports.PaymentTaxTypeFromJSONTyped = exports.PaymentTaxTypeFromJSON = exports.instanceOfPaymentTaxType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PaymentTax_1 = require("./PaymentTax");
/**
 * Check if a given object implements the PaymentTaxType interface.
 */
function instanceOfPaymentTaxType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPaymentTaxType = instanceOfPaymentTaxType;
function PaymentTaxTypeFromJSON(json) {
    return PaymentTaxTypeFromJSONTyped(json, false);
}
exports.PaymentTaxTypeFromJSON = PaymentTaxTypeFromJSON;
function PaymentTaxTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'availableCredit': !(0, runtime_1.exists)(json, 'availableCredit') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['availableCredit']),
        'folioWindowNo': !(0, runtime_1.exists)(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'nonTaxableAmount': !(0, runtime_1.exists)(json, 'nonTaxableAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['nonTaxableAmount']),
        'paymentDate': !(0, runtime_1.exists)(json, 'paymentDate') ? undefined : json['paymentDate'],
        'paymentType': !(0, runtime_1.exists)(json, 'paymentType') ? undefined : (0, PaymentTax_1.PaymentTaxFromJSON)(json['paymentType']),
        'taxInvoiceNo': !(0, runtime_1.exists)(json, 'taxInvoiceNo') ? undefined : json['taxInvoiceNo'],
        'taxableAmount': !(0, runtime_1.exists)(json, 'taxableAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['taxableAmount']),
        'transactionCode': !(0, runtime_1.exists)(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDate': !(0, runtime_1.exists)(json, 'transactionDate') ? undefined : json['transactionDate'],
        'transactionDescription': !(0, runtime_1.exists)(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'transactionNo': !(0, runtime_1.exists)(json, 'transactionNo') ? undefined : json['transactionNo'],
    };
}
exports.PaymentTaxTypeFromJSONTyped = PaymentTaxTypeFromJSONTyped;
function PaymentTaxTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'availableCredit': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.availableCredit),
        'folioWindowNo': value.folioWindowNo,
        'nonTaxableAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.nonTaxableAmount),
        'paymentDate': value.paymentDate,
        'paymentType': (0, PaymentTax_1.PaymentTaxToJSON)(value.paymentType),
        'taxInvoiceNo': value.taxInvoiceNo,
        'taxableAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.taxableAmount),
        'transactionCode': value.transactionCode,
        'transactionDate': value.transactionDate,
        'transactionDescription': value.transactionDescription,
        'transactionNo': value.transactionNo,
    };
}
exports.PaymentTaxTypeToJSON = PaymentTaxTypeToJSON;
