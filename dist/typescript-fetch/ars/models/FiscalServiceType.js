"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiscalServiceTypeToJSON = exports.FiscalServiceTypeFromJSONTyped = exports.FiscalServiceTypeFromJSON = exports.instanceOfFiscalServiceType = void 0;
const runtime_1 = require("../runtime");
const FiscalFolioInstruction_1 = require("./FiscalFolioInstruction");
const FolioQueueType_1 = require("./FolioQueueType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the FiscalServiceType interface.
 */
function instanceOfFiscalServiceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFiscalServiceType = instanceOfFiscalServiceType;
function FiscalServiceTypeFromJSON(json) {
    return FiscalServiceTypeFromJSONTyped(json, false);
}
exports.FiscalServiceTypeFromJSON = FiscalServiceTypeFromJSON;
function FiscalServiceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'fiscalTerminal': !(0, runtime_1.exists)(json, 'fiscalTerminal') ? undefined : json['fiscalTerminal'],
        'folioQueueName': !(0, runtime_1.exists)(json, 'folioQueueName') ? undefined : (0, FolioQueueType_1.FolioQueueTypeFromJSON)(json['folioQueueName']),
        'folioSeqId': !(0, runtime_1.exists)(json, 'folioSeqId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['folioSeqId']),
        'instructions': !(0, runtime_1.exists)(json, 'instructions') ? undefined : (0, FiscalFolioInstruction_1.FiscalFolioInstructionFromJSON)(json['instructions']),
        'invoiceCurrencyCode': !(0, runtime_1.exists)(json, 'invoiceCurrencyCode') ? undefined : json['invoiceCurrencyCode'],
    };
}
exports.FiscalServiceTypeFromJSONTyped = FiscalServiceTypeFromJSONTyped;
function FiscalServiceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'fiscalTerminal': value.fiscalTerminal,
        'folioQueueName': (0, FolioQueueType_1.FolioQueueTypeToJSON)(value.folioQueueName),
        'folioSeqId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.folioSeqId),
        'instructions': (0, FiscalFolioInstruction_1.FiscalFolioInstructionToJSON)(value.instructions),
        'invoiceCurrencyCode': value.invoiceCurrencyCode,
    };
}
exports.FiscalServiceTypeToJSON = FiscalServiceTypeToJSON;
