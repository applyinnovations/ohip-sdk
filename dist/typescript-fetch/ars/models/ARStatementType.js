"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARStatementTypeToJSON = exports.ARStatementTypeFromJSONTyped = exports.ARStatementTypeFromJSON = exports.instanceOfARStatementType = void 0;
const runtime_1 = require("../runtime");
const ARInvoiceType_1 = require("./ARInvoiceType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const StatementType_1 = require("./StatementType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ARStatementType interface.
 */
function instanceOfARStatementType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARStatementType = instanceOfARStatementType;
function ARStatementTypeFromJSON(json) {
    return ARStatementTypeFromJSONTyped(json, false);
}
exports.ARStatementTypeFromJSON = ARStatementTypeFromJSON;
function ARStatementTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['balance']),
        'accountId': !(0, runtime_1.exists)(json, 'accountId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['accountId']),
        'invoices': !(0, runtime_1.exists)(json, 'invoices') ? undefined : (json['invoices'].map(ARInvoiceType_1.ARInvoiceTypeFromJSON)),
        'statementNo': !(0, runtime_1.exists)(json, 'statementNo') ? undefined : json['statementNo'],
        'reportSeqNo': !(0, runtime_1.exists)(json, 'reportSeqNo') ? undefined : json['reportSeqNo'],
        'inclFolios': !(0, runtime_1.exists)(json, 'inclFolios') ? undefined : json['inclFolios'],
        'statementName': !(0, runtime_1.exists)(json, 'statementName') ? undefined : json['statementName'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, StatementType_1.StatementTypeFromJSON)(json['type']),
        'reportFileName': !(0, runtime_1.exists)(json, 'reportFileName') ? undefined : json['reportFileName'],
    };
}
exports.ARStatementTypeFromJSONTyped = ARStatementTypeFromJSONTyped;
function ARStatementTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'balance': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.balance),
        'accountId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.accountId),
        'invoices': value.invoices === undefined ? undefined : (value.invoices.map(ARInvoiceType_1.ARInvoiceTypeToJSON)),
        'statementNo': value.statementNo,
        'reportSeqNo': value.reportSeqNo,
        'inclFolios': value.inclFolios,
        'statementName': value.statementName,
        'type': (0, StatementType_1.StatementTypeToJSON)(value.type),
        'reportFileName': value.reportFileName,
    };
}
exports.ARStatementTypeToJSON = ARStatementTypeToJSON;
