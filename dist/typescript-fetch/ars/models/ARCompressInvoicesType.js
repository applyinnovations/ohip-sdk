"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARCompressInvoicesTypeToJSON = exports.ARCompressInvoicesTypeFromJSONTyped = exports.ARCompressInvoicesTypeFromJSON = exports.instanceOfARCompressInvoicesType = void 0;
const runtime_1 = require("../runtime");
const ARAccountCriteriaType_1 = require("./ARAccountCriteriaType");
const ARInvoiceType_1 = require("./ARInvoiceType");
/**
 * Check if a given object implements the ARCompressInvoicesType interface.
 */
function instanceOfARCompressInvoicesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARCompressInvoicesType = instanceOfARCompressInvoicesType;
function ARCompressInvoicesTypeFromJSON(json) {
    return ARCompressInvoicesTypeFromJSONTyped(json, false);
}
exports.ARCompressInvoicesTypeFromJSON = ARCompressInvoicesTypeFromJSON;
function ARCompressInvoicesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'account': !(0, runtime_1.exists)(json, 'account') ? undefined : (0, ARAccountCriteriaType_1.ARAccountCriteriaTypeFromJSON)(json['account']),
        'invoices': !(0, runtime_1.exists)(json, 'invoices') ? undefined : (json['invoices'].map(ARInvoiceType_1.ARInvoiceTypeFromJSON)),
        'reference': !(0, runtime_1.exists)(json, 'reference') ? undefined : json['reference'],
        'remark': !(0, runtime_1.exists)(json, 'remark') ? undefined : json['remark'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'folioTypeName': !(0, runtime_1.exists)(json, 'folioTypeName') ? undefined : json['folioTypeName'],
    };
}
exports.ARCompressInvoicesTypeFromJSONTyped = ARCompressInvoicesTypeFromJSONTyped;
function ARCompressInvoicesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'account': (0, ARAccountCriteriaType_1.ARAccountCriteriaTypeToJSON)(value.account),
        'invoices': value.invoices === undefined ? undefined : (value.invoices.map(ARInvoiceType_1.ARInvoiceTypeToJSON)),
        'reference': value.reference,
        'remark': value.remark,
        'cashierId': value.cashierId,
        'folioTypeName': value.folioTypeName,
    };
}
exports.ARCompressInvoicesTypeToJSON = ARCompressInvoicesTypeToJSON;
