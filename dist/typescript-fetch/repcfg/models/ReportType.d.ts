/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ExternalUrlInfoType } from './ExternalUrlInfoType';
import type { ReportModuleTypeType } from './ReportModuleTypeType';
import type { TranslationTextType1000 } from './TranslationTextType1000';
import type { UniqueIDType } from './UniqueIDType';
import type { WatermarkType } from './WatermarkType';
/**
 * Contains details about the report application module from the DB.
 * @export
 * @interface ReportType
 */
export interface ReportType {
    /**
     *
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    moduleId?: UniqueIDType;
    /**
     * Report name.
     * @type {string}
     * @memberof ReportType
     */
    reportName?: string;
    /**
     *
     * @type {ReportModuleTypeType}
     * @memberof ReportType
     */
    moduleType?: ReportModuleTypeType;
    /**
     *
     * @type {TranslationTextType1000}
     * @memberof ReportType
     */
    reportDescription?: TranslationTextType1000;
    /**
     *
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    reportGroupId?: UniqueIDType;
    /**
     * Report group.
     * @type {string}
     * @memberof ReportType
     */
    reportGroup?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ReportType
     */
    attachedReports?: Array<UniqueIDType>;
    /**
     *
     * @type {string}
     * @memberof ReportType
     */
    reportGroupDescription?: string;
    /**
     *
     * @type {TranslationTextType1000}
     * @memberof ReportType
     */
    translatableReportGroupDescription?: TranslationTextType1000;
    /**
     * The hotel code that the report is associated with.
     * @type {string}
     * @memberof ReportType
     */
    hotel?: string;
    /**
     * Form which is run to collect parameter information to generate the report.
     * @type {string}
     * @memberof ReportType
     */
    formToRun?: string;
    /**
     * Report language code.
     * @type {string}
     * @memberof ReportType
     */
    languageCode?: string;
    /**
     * Flag which indicates whether the report requires parameters.
     * @type {boolean}
     * @memberof ReportType
     */
    hasParameters?: boolean;
    /**
     * Flag which indicates whether the report is a sample provided in the application.
     * @type {boolean}
     * @memberof ReportType
     */
    sample?: boolean;
    /**
     * Flag which indicates whether the report is customized by the user.
     * @type {boolean}
     * @memberof ReportType
     */
    customized?: boolean;
    /**
     *
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    customizedRtfAttachId?: UniqueIDType;
    /**
     * Flag which indicates if the report can be run separately.
     * @type {boolean}
     * @memberof ReportType
     */
    canRunSeperate?: boolean;
    /**
     * Flag which indicates if the report can be run for multiple properties.
     * @type {boolean}
     * @memberof ReportType
     */
    multiPropertyReport?: boolean;
    /**
     * Flag which indicates whether the report requires a procedure.
     * @type {boolean}
     * @memberof ReportType
     */
    procedureRequired?: boolean;
    /**
     * Flag which indicates whether the report is user defined.
     * @type {boolean}
     * @memberof ReportType
     */
    userDefinedReport?: boolean;
    /**
     * Flag which indicates whether the report is protected.
     * @type {boolean}
     * @memberof ReportType
     */
    protectedReport?: boolean;
    /**
     * Flag to indicate whether this is a system report.
     * @type {boolean}
     * @memberof ReportType
     */
    systemReport?: boolean;
    /**
     * Report default destination.
     * @type {string}
     * @memberof ReportType
     */
    destination?: string;
    /**
     * Default printer name.
     * @type {string}
     * @memberof ReportType
     */
    defaultPrinterName?: string;
    /**
     * Number of copies configured for report.
     * @type {number}
     * @memberof ReportType
     */
    copies?: number;
    /**
     * Flag to indicate whether this is a shift report.
     * @type {boolean}
     * @memberof ReportType
     */
    shiftReport?: boolean;
    /**
     * Set to ODT for BI Publisher reports.
     * @type {string}
     * @memberof ReportType
     */
    dataSourceType?: string;
    /**
     * Data source for BI Publisher reports.
     * @type {string}
     * @memberof ReportType
     */
    dataSource?: string;
    /**
     * A comma separated list of Opera V5 application indicators for which the report is enabled.
     * @type {string}
     * @memberof ReportType
     */
    usedInApp?: string;
    /**
     * A flag indicating that the report has been certified for use with Opera 9.
     * @type {boolean}
     * @memberof ReportType
     */
    opera9Certified?: boolean;
    /**
     *
     * @type {WatermarkType}
     * @memberof ReportType
     */
    watermarkDetails?: WatermarkType;
    /**
     *
     * @type {ExternalUrlInfoType}
     * @memberof ReportType
     */
    externalReportUrl?: ExternalUrlInfoType;
    /**
     * Rows for Key Packet report group.
     * @type {number}
     * @memberof ReportType
     */
    rowsPerPage?: number;
    /**
     * Columns for Key Packet report group.
     * @type {number}
     * @memberof ReportType
     */
    columnsPerPage?: number;
    /**
     * Flag to indicate whether the report can be exported to Excel.
     * @type {boolean}
     * @memberof ReportType
     */
    excelOutput?: boolean;
}
/**
 * Check if a given object implements the ReportType interface.
 */
export declare function instanceOfReportType(value: object): boolean;
export declare function ReportTypeFromJSON(json: any): ReportType;
export declare function ReportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportType;
export declare function ReportTypeToJSON(value?: ReportType | null): any;
