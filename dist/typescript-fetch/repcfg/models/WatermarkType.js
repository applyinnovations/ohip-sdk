"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatermarkTypeToJSON = exports.WatermarkTypeFromJSONTyped = exports.WatermarkTypeFromJSON = exports.instanceOfWatermarkType = void 0;
const runtime_1 = require("../runtime");
const WatermarkModeType_1 = require("./WatermarkModeType");
/**
 * Check if a given object implements the WatermarkType interface.
 */
function instanceOfWatermarkType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfWatermarkType = instanceOfWatermarkType;
function WatermarkTypeFromJSON(json) {
    return WatermarkTypeFromJSONTyped(json, false);
}
exports.WatermarkTypeFromJSON = WatermarkTypeFromJSON;
function WatermarkTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'mode': !(0, runtime_1.exists)(json, 'mode') ? undefined : (0, WatermarkModeType_1.WatermarkModeTypeFromJSON)(json['mode']),
        'text': !(0, runtime_1.exists)(json, 'text') ? undefined : json['text'],
        'font': !(0, runtime_1.exists)(json, 'font') ? undefined : json['font'],
        'fontSize': !(0, runtime_1.exists)(json, 'fontSize') ? undefined : json['fontSize'],
        'xPosition': !(0, runtime_1.exists)(json, 'xPosition') ? undefined : json['xPosition'],
        'yPosition': !(0, runtime_1.exists)(json, 'yPosition') ? undefined : json['yPosition'],
        'angle': !(0, runtime_1.exists)(json, 'angle') ? undefined : json['angle'],
        'red': !(0, runtime_1.exists)(json, 'red') ? undefined : json['red'],
        'green': !(0, runtime_1.exists)(json, 'green') ? undefined : json['green'],
        'blue': !(0, runtime_1.exists)(json, 'blue') ? undefined : json['blue'],
    };
}
exports.WatermarkTypeFromJSONTyped = WatermarkTypeFromJSONTyped;
function WatermarkTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'mode': (0, WatermarkModeType_1.WatermarkModeTypeToJSON)(value.mode),
        'text': value.text,
        'font': value.font,
        'fontSize': value.fontSize,
        'xPosition': value.xPosition,
        'yPosition': value.yPosition,
        'angle': value.angle,
        'red': value.red,
        'green': value.green,
        'blue': value.blue,
    };
}
exports.WatermarkTypeToJSON = WatermarkTypeToJSON;
