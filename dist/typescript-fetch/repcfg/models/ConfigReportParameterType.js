"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigReportParameterTypeToJSON = exports.ConfigReportParameterTypeFromJSONTyped = exports.ConfigReportParameterTypeFromJSON = exports.instanceOfConfigReportParameterType = void 0;
const runtime_1 = require("../runtime");
const ParamDataType_1 = require("./ParamDataType");
/**
 * Check if a given object implements the ConfigReportParameterType interface.
 */
function instanceOfConfigReportParameterType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConfigReportParameterType = instanceOfConfigReportParameterType;
function ConfigReportParameterTypeFromJSON(json) {
    return ConfigReportParameterTypeFromJSONTyped(json, false);
}
exports.ConfigReportParameterTypeFromJSON = ConfigReportParameterTypeFromJSON;
function ConfigReportParameterTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'label': !(0, runtime_1.exists)(json, 'label') ? undefined : json['label'],
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : (0, ParamDataType_1.ParamDataTypeFromJSON)(json['dataType']),
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
        'dateOffset': !(0, runtime_1.exists)(json, 'dateOffset') ? undefined : json['dateOffset'],
        'lovSql': !(0, runtime_1.exists)(json, 'lovSql') ? undefined : json['lovSql'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
    };
}
exports.ConfigReportParameterTypeFromJSONTyped = ConfigReportParameterTypeFromJSONTyped;
function ConfigReportParameterTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'label': value.label,
        'dataType': (0, ParamDataType_1.ParamDataTypeToJSON)(value.dataType),
        'value': value.value,
        'dateOffset': value.dateOffset,
        'lovSql': value.lovSql,
        'sequence': value.sequence,
    };
}
exports.ConfigReportParameterTypeToJSON = ConfigReportParameterTypeToJSON;
