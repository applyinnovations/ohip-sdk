/**
 * OPERA Cloud Report Master Data Management API
 * APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { GenericReports, ReportParameters, ReportTextConfigurationsCopy, Reports, Status } from '../models/index';
export interface ChangeGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericReports: GenericReports;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyReportTextConfigurationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reportTextConfigurationsCopy: ReportTextConfigurationsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReportParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeGroup?: string;
    includeInternalReports?: boolean;
    includeRnAReports?: boolean;
    includeUnpublished?: boolean;
    includeWatermarkDetails?: boolean;
    limit?: number;
    multiPropertyOnly?: boolean;
    protectedReportParam?: boolean;
    scheduled?: boolean;
    name?: string;
    group?: string;
    hotel?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericReports: GenericReports;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ReportApi extends runtime.BaseAPI {
    /**
     * Use this API to update generic reports. <p><strong>OperationId:</strong>changeGenericReports</p>
     * Update generic reports.
     */
    changeGenericReportsRaw(requestParameters: ChangeGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericReports>>;
    /**
     * Use this API to update generic reports. <p><strong>OperationId:</strong>changeGenericReports</p>
     * Update generic reports.
     */
    changeGenericReports(requestParameters: ChangeGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericReports>;
    /**
     *  <p><strong>OperationId:</strong>copyReportTextConfiguration</p>
     * Operation to copy report text configuration.
     */
    copyReportTextConfigurationRaw(requestParameters: CopyReportTextConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>copyReportTextConfiguration</p>
     * Operation to copy report text configuration.
     */
    copyReportTextConfiguration(requestParameters: CopyReportTextConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete generic reports based on hotelId, Id, contextId. <p><strong>OperationId:</strong>deleteGenericReports</p>
     * Delete generic reports.
     */
    deleteGenericReportsRaw(requestParameters: DeleteGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete generic reports based on hotelId, Id, contextId. <p><strong>OperationId:</strong>deleteGenericReports</p>
     * Delete generic reports.
     */
    deleteGenericReports(requestParameters: DeleteGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to return report parameters based on search criteria such as id, idContext, type. <p><strong>OperationId:</strong>getReportParameters</p>
     * Return report parameters.
     */
    getReportParametersRaw(requestParameters: GetReportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportParameters>>;
    /**
     * Use this API to return report parameters based on search criteria such as id, idContext, type. <p><strong>OperationId:</strong>getReportParameters</p>
     * Return report parameters.
     */
    getReportParameters(requestParameters: GetReportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportParameters>;
    /**
     * Use this API to return reports based on search criteria such as excludeGroup, includeInternalReports, includeRnAReports, includeUnpublished, includeWatermarkDetails, limit, multiPropertyOnly, protectedReportParam, scheduled, name, group, hotel, id, idContext, type. <p><strong>OperationId:</strong>getReports</p>
     * Return reports.
     */
    getReportsRaw(requestParameters: GetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reports>>;
    /**
     * Use this API to return reports based on search criteria such as excludeGroup, includeInternalReports, includeRnAReports, includeUnpublished, includeWatermarkDetails, limit, multiPropertyOnly, protectedReportParam, scheduled, name, group, hotel, id, idContext, type. <p><strong>OperationId:</strong>getReports</p>
     * Return reports.
     */
    getReports(requestParameters: GetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reports>;
    /**
     * Use this API to create generic reports. <p><strong>OperationId:</strong>postGenericReports</p>
     * Create generic reports.
     */
    postGenericReportsRaw(requestParameters: PostGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create generic reports. <p><strong>OperationId:</strong>postGenericReports</p>
     * Create generic reports.
     */
    postGenericReports(requestParameters: PostGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
