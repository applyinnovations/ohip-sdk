"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostBillingChargesInBatchCriteriaTypeToJSON = exports.PostBillingChargesInBatchCriteriaTypeFromJSONTyped = exports.PostBillingChargesInBatchCriteriaTypeFromJSON = exports.instanceOfPostBillingChargesInBatchCriteriaType = void 0;
const runtime_1 = require("../runtime");
const ChargeCriteriaType_1 = require("./ChargeCriteriaType");
const ReservationId_1 = require("./ReservationId");
/**
 * Check if a given object implements the PostBillingChargesInBatchCriteriaType interface.
 */
function instanceOfPostBillingChargesInBatchCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPostBillingChargesInBatchCriteriaType = instanceOfPostBillingChargesInBatchCriteriaType;
function PostBillingChargesInBatchCriteriaTypeFromJSON(json) {
    return PostBillingChargesInBatchCriteriaTypeFromJSONTyped(json, false);
}
exports.PostBillingChargesInBatchCriteriaTypeFromJSON = PostBillingChargesInBatchCriteriaTypeFromJSON;
function PostBillingChargesInBatchCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'charges': !(0, runtime_1.exists)(json, 'charges') ? undefined : (json['charges'].map(ChargeCriteriaType_1.ChargeCriteriaTypeFromJSON)),
        'reservations': !(0, runtime_1.exists)(json, 'reservations') ? undefined : (json['reservations'].map(ReservationId_1.ReservationIdFromJSON)),
    };
}
exports.PostBillingChargesInBatchCriteriaTypeFromJSONTyped = PostBillingChargesInBatchCriteriaTypeFromJSONTyped;
function PostBillingChargesInBatchCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'charges': value.charges === undefined ? undefined : (value.charges.map(ChargeCriteriaType_1.ChargeCriteriaTypeToJSON)),
        'reservations': value.reservations === undefined ? undefined : (value.reservations.map(ReservationId_1.ReservationIdToJSON)),
    };
}
exports.PostBillingChargesInBatchCriteriaTypeToJSON = PostBillingChargesInBatchCriteriaTypeToJSON;
