"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepositPaymentCriteriaTypeToJSON = exports.DepositPaymentCriteriaTypeFromJSONTyped = exports.DepositPaymentCriteriaTypeFromJSON = exports.instanceOfDepositPaymentCriteriaType = void 0;
const runtime_1 = require("../runtime");
const CashieringPaymentMethodType_1 = require("./CashieringPaymentMethodType");
const CompRedemptionsType_1 = require("./CompRedemptionsType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PaymentTaxType_1 = require("./PaymentTaxType");
const PaymentTaxesType_1 = require("./PaymentTaxesType");
const PostPaymentActionType_1 = require("./PostPaymentActionType");
const PrepaidCardRedemptionsType_1 = require("./PrepaidCardRedemptionsType");
const ProfileId_1 = require("./ProfileId");
const ReceiptType_1 = require("./ReceiptType");
const ReservationId_1 = require("./ReservationId");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the DepositPaymentCriteriaType interface.
 */
function instanceOfDepositPaymentCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDepositPaymentCriteriaType = instanceOfDepositPaymentCriteriaType;
function DepositPaymentCriteriaTypeFromJSON(json) {
    return DepositPaymentCriteriaTypeFromJSONTyped(json, false);
}
exports.DepositPaymentCriteriaTypeFromJSON = DepositPaymentCriteriaTypeFromJSON;
function DepositPaymentCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'action': !(0, runtime_1.exists)(json, 'action') ? undefined : (0, PostPaymentActionType_1.PostPaymentActionTypeFromJSON)(json['action']),
        'applyCCSurcharge': !(0, runtime_1.exists)(json, 'applyCCSurcharge') ? undefined : json['applyCCSurcharge'],
        'applyCurrencyTaxes': !(0, runtime_1.exists)(json, 'applyCurrencyTaxes') ? undefined : json['applyCurrencyTaxes'],
        'associatedTrxNo': !(0, runtime_1.exists)(json, 'associatedTrxNo') ? undefined : json['associatedTrxNo'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'changeDueAmount': !(0, runtime_1.exists)(json, 'changeDueAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['changeDueAmount']),
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'compRedemptions': !(0, runtime_1.exists)(json, 'compRedemptions') ? undefined : (0, CompRedemptionsType_1.CompRedemptionsTypeFromJSON)(json['compRedemptions']),
        'creditablePaymentTaxes': !(0, runtime_1.exists)(json, 'creditablePaymentTaxes') ? undefined : (0, PaymentTaxesType_1.PaymentTaxesTypeFromJSON)(json['creditablePaymentTaxes']),
        'depositPolicyId': !(0, runtime_1.exists)(json, 'depositPolicyId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['depositPolicyId']),
        'folioWindowNo': !(0, runtime_1.exists)(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'guaranteeCode': !(0, runtime_1.exists)(json, 'guaranteeCode') ? undefined : json['guaranteeCode'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'manualPaymentTaxInfo': !(0, runtime_1.exists)(json, 'manualPaymentTaxInfo') ? undefined : (0, PaymentTaxType_1.PaymentTaxTypeFromJSON)(json['manualPaymentTaxInfo']),
        'overrideARCreditLimit': !(0, runtime_1.exists)(json, 'overrideARCreditLimit') ? undefined : json['overrideARCreditLimit'],
        'overrideInsufficientCC': !(0, runtime_1.exists)(json, 'overrideInsufficientCC') ? undefined : json['overrideInsufficientCC'],
        'overrideInventoryCheck': !(0, runtime_1.exists)(json, 'overrideInventoryCheck') ? undefined : json['overrideInventoryCheck'],
        'paymentMethod': !(0, runtime_1.exists)(json, 'paymentMethod') ? undefined : (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeFromJSON)(json['paymentMethod']),
        'postingAmount': !(0, runtime_1.exists)(json, 'postingAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['postingAmount']),
        'postingReference': !(0, runtime_1.exists)(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !(0, runtime_1.exists)(json, 'postingRemark') ? undefined : json['postingRemark'],
        'prepaidCardRedemptions': !(0, runtime_1.exists)(json, 'prepaidCardRedemptions') ? undefined : (0, PrepaidCardRedemptionsType_1.PrepaidCardRedemptionsTypeFromJSON)(json['prepaidCardRedemptions']),
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'receiptType': !(0, runtime_1.exists)(json, 'receiptType') ? undefined : (0, ReceiptType_1.ReceiptTypeFromJSON)(json['receiptType']),
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'terminalId': !(0, runtime_1.exists)(json, 'terminalId') ? undefined : json['terminalId'],
        'updateReservationPaymentMethod': !(0, runtime_1.exists)(json, 'updateReservationPaymentMethod') ? undefined : json['updateReservationPaymentMethod'],
        'vATOffset': !(0, runtime_1.exists)(json, 'vATOffset') ? undefined : json['vATOffset'],
    };
}
exports.DepositPaymentCriteriaTypeFromJSONTyped = DepositPaymentCriteriaTypeFromJSONTyped;
function DepositPaymentCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'action': (0, PostPaymentActionType_1.PostPaymentActionTypeToJSON)(value.action),
        'applyCCSurcharge': value.applyCCSurcharge,
        'applyCurrencyTaxes': value.applyCurrencyTaxes,
        'associatedTrxNo': value.associatedTrxNo,
        'cashierId': value.cashierId,
        'changeDueAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.changeDueAmount),
        'comments': value.comments,
        'compRedemptions': (0, CompRedemptionsType_1.CompRedemptionsTypeToJSON)(value.compRedemptions),
        'creditablePaymentTaxes': (0, PaymentTaxesType_1.PaymentTaxesTypeToJSON)(value.creditablePaymentTaxes),
        'depositPolicyId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.depositPolicyId),
        'folioWindowNo': value.folioWindowNo,
        'guaranteeCode': value.guaranteeCode,
        'hotelId': value.hotelId,
        'manualPaymentTaxInfo': (0, PaymentTaxType_1.PaymentTaxTypeToJSON)(value.manualPaymentTaxInfo),
        'overrideARCreditLimit': value.overrideARCreditLimit,
        'overrideInsufficientCC': value.overrideInsufficientCC,
        'overrideInventoryCheck': value.overrideInventoryCheck,
        'paymentMethod': (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeToJSON)(value.paymentMethod),
        'postingAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.postingAmount),
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'prepaidCardRedemptions': (0, PrepaidCardRedemptionsType_1.PrepaidCardRedemptionsTypeToJSON)(value.prepaidCardRedemptions),
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'receiptType': (0, ReceiptType_1.ReceiptTypeToJSON)(value.receiptType),
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'terminalId': value.terminalId,
        'updateReservationPaymentMethod': value.updateReservationPaymentMethod,
        'vATOffset': value.vATOffset,
    };
}
exports.DepositPaymentCriteriaTypeToJSON = DepositPaymentCriteriaTypeToJSON;
