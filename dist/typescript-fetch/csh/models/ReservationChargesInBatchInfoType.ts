/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorType } from './ErrorType';
import {
    ErrorTypeFromJSON,
    ErrorTypeFromJSONTyped,
    ErrorTypeToJSON,
} from './ErrorType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Result of charges in batch for each reservation.
 * @export
 * @interface ReservationChargesInBatchInfoType
 */
export interface ReservationChargesInBatchInfoType {
    /**
     * 
     * @type {ReservationId}
     * @memberof ReservationChargesInBatchInfoType
     */
    reservationId?: ReservationId;
    /**
     * Arrival date of the reservation.
     * @type {string}
     * @memberof ReservationChargesInBatchInfoType
     */
    arrivalDate?: string;
    /**
     * Departure date of the reservation.
     * @type {string}
     * @memberof ReservationChargesInBatchInfoType
     */
    departureDate?: string;
    /**
     * Guest name associated to the reservation.
     * @type {string}
     * @memberof ReservationChargesInBatchInfoType
     */
    guestName?: string;
    /**
     * Room number associated to the reservation.
     * @type {string}
     * @memberof ReservationChargesInBatchInfoType
     */
    roomId?: string;
    /**
     * Indicator that tells whether posting is allowed for the reservation
     * @type {boolean}
     * @memberof ReservationChargesInBatchInfoType
     */
    postingAllowed?: boolean;
    /**
     * Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors.
     * @type {object}
     * @memberof ReservationChargesInBatchInfoType
     */
    success?: object;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ReservationChargesInBatchInfoType
     */
    warnings?: Array<WarningType>;
    /**
     * An error that occurred during the processing of a message.
     * @type {Array<ErrorType>}
     * @memberof ReservationChargesInBatchInfoType
     */
    errors?: Array<ErrorType>;
}

/**
 * Check if a given object implements the ReservationChargesInBatchInfoType interface.
 */
export function instanceOfReservationChargesInBatchInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationChargesInBatchInfoTypeFromJSON(json: any): ReservationChargesInBatchInfoType {
    return ReservationChargesInBatchInfoTypeFromJSONTyped(json, false);
}

export function ReservationChargesInBatchInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationChargesInBatchInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !exists(json, 'departureDate') ? undefined : json['departureDate'],
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'postingAllowed': !exists(json, 'postingAllowed') ? undefined : json['postingAllowed'],
        'success': !exists(json, 'success') ? undefined : json['success'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorTypeFromJSON)),
    };
}

export function ReservationChargesInBatchInfoTypeToJSON(value?: ReservationChargesInBatchInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationId': ReservationIdToJSON(value.reservationId),
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
        'guestName': value.guestName,
        'roomId': value.roomId,
        'postingAllowed': value.postingAllowed,
        'success': value.success,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorTypeToJSON)),
    };
}

