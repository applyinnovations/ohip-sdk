"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateReconciliationTypeToJSON = exports.CertificateReconciliationTypeFromJSONTyped = exports.CertificateReconciliationTypeFromJSON = exports.instanceOfCertificateReconciliationType = void 0;
const runtime_1 = require("../runtime");
const FBAStatusType_1 = require("./FBAStatusType");
const ReservationId_1 = require("./ReservationId");
/**
 * Check if a given object implements the CertificateReconciliationType interface.
 */
function instanceOfCertificateReconciliationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCertificateReconciliationType = instanceOfCertificateReconciliationType;
function CertificateReconciliationTypeFromJSON(json) {
    return CertificateReconciliationTypeFromJSONTyped(json, false);
}
exports.CertificateReconciliationTypeFromJSON = CertificateReconciliationTypeFromJSON;
function CertificateReconciliationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, FBAStatusType_1.FBAStatusTypeFromJSON)(json['status']),
        'monetaryValue': !(0, runtime_1.exists)(json, 'monetaryValue') ? undefined : json['monetaryValue'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'postedAmount': !(0, runtime_1.exists)(json, 'postedAmount') ? undefined : json['postedAmount'],
        'reimbursedAmount': !(0, runtime_1.exists)(json, 'reimbursedAmount') ? undefined : json['reimbursedAmount'],
        'postingDateTime': !(0, runtime_1.exists)(json, 'postingDateTime') ? undefined : json['postingDateTime'],
        'postingBusinessDate': !(0, runtime_1.exists)(json, 'postingBusinessDate') ? undefined : json['postingBusinessDate'],
        'settlementDateTime': !(0, runtime_1.exists)(json, 'settlementDateTime') ? undefined : json['settlementDateTime'],
        'settlementBusinessDate': !(0, runtime_1.exists)(json, 'settlementBusinessDate') ? undefined : json['settlementBusinessDate'],
        'reimbursementDateTime': !(0, runtime_1.exists)(json, 'reimbursementDateTime') ? undefined : json['reimbursementDateTime'],
        'reimbursementBusinessDate': !(0, runtime_1.exists)(json, 'reimbursementBusinessDate') ? undefined : json['reimbursementBusinessDate'],
        'fbaBillGenDate': !(0, runtime_1.exists)(json, 'fbaBillGenDate') ? undefined : json['fbaBillGenDate'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
        'currencySymbol': !(0, runtime_1.exists)(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'decimalPlaces': !(0, runtime_1.exists)(json, 'decimalPlaces') ? undefined : json['decimalPlaces'],
        'flexibleBenefitAward': !(0, runtime_1.exists)(json, 'flexibleBenefitAward') ? undefined : json['flexibleBenefitAward'],
        'posted': !(0, runtime_1.exists)(json, 'posted') ? undefined : json['posted'],
        'settled': !(0, runtime_1.exists)(json, 'settled') ? undefined : json['settled'],
        'reimbursed': !(0, runtime_1.exists)(json, 'reimbursed') ? undefined : json['reimbursed'],
        'resettleAllowed': !(0, runtime_1.exists)(json, 'resettleAllowed') ? undefined : json['resettleAllowed'],
        'reimburseAllowed': !(0, runtime_1.exists)(json, 'reimburseAllowed') ? undefined : json['reimburseAllowed'],
        'orphanCertificate': !(0, runtime_1.exists)(json, 'orphanCertificate') ? undefined : json['orphanCertificate'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'fBAStatus': !(0, runtime_1.exists)(json, 'fBAStatus') ? undefined : (0, FBAStatusType_1.FBAStatusTypeFromJSON)(json['fBAStatus']),
        'certificateNumber': !(0, runtime_1.exists)(json, 'certificateNumber') ? undefined : json['certificateNumber'],
    };
}
exports.CertificateReconciliationTypeFromJSONTyped = CertificateReconciliationTypeFromJSONTyped;
function CertificateReconciliationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'status': (0, FBAStatusType_1.FBAStatusTypeToJSON)(value.status),
        'monetaryValue': value.monetaryValue,
        'amount': value.amount,
        'postedAmount': value.postedAmount,
        'reimbursedAmount': value.reimbursedAmount,
        'postingDateTime': value.postingDateTime,
        'postingBusinessDate': value.postingBusinessDate,
        'settlementDateTime': value.settlementDateTime,
        'settlementBusinessDate': value.settlementBusinessDate,
        'reimbursementDateTime': value.reimbursementDateTime,
        'reimbursementBusinessDate': value.reimbursementBusinessDate,
        'fbaBillGenDate': value.fbaBillGenDate,
        'currencyCode': value.currencyCode,
        'currencySymbol': value.currencySymbol,
        'decimalPlaces': value.decimalPlaces,
        'flexibleBenefitAward': value.flexibleBenefitAward,
        'posted': value.posted,
        'settled': value.settled,
        'reimbursed': value.reimbursed,
        'resettleAllowed': value.resettleAllowed,
        'reimburseAllowed': value.reimburseAllowed,
        'orphanCertificate': value.orphanCertificate,
        'hotelId': value.hotelId,
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'fBAStatus': (0, FBAStatusType_1.FBAStatusTypeToJSON)(value.fBAStatus),
        'certificateNumber': value.certificateNumber,
    };
}
exports.CertificateReconciliationTypeToJSON = CertificateReconciliationTypeToJSON;
