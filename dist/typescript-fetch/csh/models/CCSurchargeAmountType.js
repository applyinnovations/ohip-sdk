"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CCSurchargeAmountTypeToJSON = exports.CCSurchargeAmountTypeFromJSONTyped = exports.CCSurchargeAmountTypeFromJSON = exports.instanceOfCCSurchargeAmountType = void 0;
const runtime_1 = require("../runtime");
const CCSurchargeInfoType_1 = require("./CCSurchargeInfoType");
const CashieringPaymentMethodType_1 = require("./CashieringPaymentMethodType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the CCSurchargeAmountType interface.
 */
function instanceOfCCSurchargeAmountType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCCSurchargeAmountType = instanceOfCCSurchargeAmountType;
function CCSurchargeAmountTypeFromJSON(json) {
    return CCSurchargeAmountTypeFromJSONTyped(json, false);
}
exports.CCSurchargeAmountTypeFromJSON = CCSurchargeAmountTypeFromJSON;
function CCSurchargeAmountTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'paymentMethod': !(0, runtime_1.exists)(json, 'paymentMethod') ? undefined : (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeFromJSON)(json['paymentMethod']),
        'surchargeAmount': !(0, runtime_1.exists)(json, 'surchargeAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['surchargeAmount']),
        'surchargeInfo': !(0, runtime_1.exists)(json, 'surchargeInfo') ? undefined : (0, CCSurchargeInfoType_1.CCSurchargeInfoTypeFromJSON)(json['surchargeInfo']),
    };
}
exports.CCSurchargeAmountTypeFromJSONTyped = CCSurchargeAmountTypeFromJSONTyped;
function CCSurchargeAmountTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'paymentMethod': (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeToJSON)(value.paymentMethod),
        'surchargeAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.surchargeAmount),
        'surchargeInfo': (0, CCSurchargeInfoType_1.CCSurchargeInfoTypeToJSON)(value.surchargeInfo),
    };
}
exports.CCSurchargeAmountTypeToJSON = CCSurchargeAmountTypeToJSON;
