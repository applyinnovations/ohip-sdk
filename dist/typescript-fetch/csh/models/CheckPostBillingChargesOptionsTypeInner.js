"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckPostBillingChargesOptionsTypeInnerToJSON = exports.CheckPostBillingChargesOptionsTypeInnerFromJSONTyped = exports.CheckPostBillingChargesOptionsTypeInnerFromJSON = exports.instanceOfCheckPostBillingChargesOptionsTypeInner = void 0;
const runtime_1 = require("../runtime");
const ChargeCriteriaType_1 = require("./ChargeCriteriaType");
const CheckPostBillingChargesOptionsTypeInnerRoomRouting_1 = require("./CheckPostBillingChargesOptionsTypeInnerRoomRouting");
/**
 * Check if a given object implements the CheckPostBillingChargesOptionsTypeInner interface.
 */
function instanceOfCheckPostBillingChargesOptionsTypeInner(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCheckPostBillingChargesOptionsTypeInner = instanceOfCheckPostBillingChargesOptionsTypeInner;
function CheckPostBillingChargesOptionsTypeInnerFromJSON(json) {
    return CheckPostBillingChargesOptionsTypeInnerFromJSONTyped(json, false);
}
exports.CheckPostBillingChargesOptionsTypeInnerFromJSON = CheckPostBillingChargesOptionsTypeInnerFromJSON;
function CheckPostBillingChargesOptionsTypeInnerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'consumable': !(0, runtime_1.exists)(json, 'consumable') ? undefined : (0, ChargeCriteriaType_1.ChargeCriteriaTypeFromJSON)(json['consumable']),
        'packageAllowance': !(0, runtime_1.exists)(json, 'packageAllowance') ? undefined : json['packageAllowance'],
        'roomRouting': !(0, runtime_1.exists)(json, 'roomRouting') ? undefined : (0, CheckPostBillingChargesOptionsTypeInnerRoomRouting_1.CheckPostBillingChargesOptionsTypeInnerRoomRoutingFromJSON)(json['roomRouting']),
    };
}
exports.CheckPostBillingChargesOptionsTypeInnerFromJSONTyped = CheckPostBillingChargesOptionsTypeInnerFromJSONTyped;
function CheckPostBillingChargesOptionsTypeInnerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'consumable': (0, ChargeCriteriaType_1.ChargeCriteriaTypeToJSON)(value.consumable),
        'packageAllowance': value.packageAllowance,
        'roomRouting': (0, CheckPostBillingChargesOptionsTypeInnerRoomRouting_1.CheckPostBillingChargesOptionsTypeInnerRoomRoutingToJSON)(value.roomRouting),
    };
}
exports.CheckPostBillingChargesOptionsTypeInnerToJSON = CheckPostBillingChargesOptionsTypeInnerToJSON;
