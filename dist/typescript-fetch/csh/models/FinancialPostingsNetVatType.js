"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinancialPostingsNetVatTypeToJSON = exports.FinancialPostingsNetVatTypeFromJSONTyped = exports.FinancialPostingsNetVatTypeFromJSON = exports.instanceOfFinancialPostingsNetVatType = void 0;
const runtime_1 = require("../runtime");
const DetailPostingType_1 = require("./DetailPostingType");
const PostingBreakdownType_1 = require("./PostingBreakdownType");
/**
 * Check if a given object implements the FinancialPostingsNetVatType interface.
 */
function instanceOfFinancialPostingsNetVatType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFinancialPostingsNetVatType = instanceOfFinancialPostingsNetVatType;
function FinancialPostingsNetVatTypeFromJSON(json) {
    return FinancialPostingsNetVatTypeFromJSONTyped(json, false);
}
exports.FinancialPostingsNetVatTypeFromJSON = FinancialPostingsNetVatTypeFromJSON;
function FinancialPostingsNetVatTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'posting': !(0, runtime_1.exists)(json, 'posting') ? undefined : (0, DetailPostingType_1.DetailPostingTypeFromJSON)(json['posting']),
        'postingBreakdown': !(0, runtime_1.exists)(json, 'postingBreakdown') ? undefined : (0, PostingBreakdownType_1.PostingBreakdownTypeFromJSON)(json['postingBreakdown']),
    };
}
exports.FinancialPostingsNetVatTypeFromJSONTyped = FinancialPostingsNetVatTypeFromJSONTyped;
function FinancialPostingsNetVatTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'posting': (0, DetailPostingType_1.DetailPostingTypeToJSON)(value.posting),
        'postingBreakdown': (0, PostingBreakdownType_1.PostingBreakdownTypeToJSON)(value.postingBreakdown),
    };
}
exports.FinancialPostingsNetVatTypeToJSON = FinancialPostingsNetVatTypeToJSON;
