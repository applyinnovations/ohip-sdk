/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityLogType } from './ActivityLogType';
import {
    ActivityLogTypeFromJSON,
    ActivityLogTypeFromJSONTyped,
    ActivityLogTypeToJSON,
} from './ActivityLogType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { SummaryPostingType } from './SummaryPostingType';
import {
    SummaryPostingTypeFromJSON,
    SummaryPostingTypeFromJSONTyped,
    SummaryPostingTypeToJSON,
} from './SummaryPostingType';

/**
 * Details of a Posting transaction change.
 * @export
 * @interface PostingActivityDetailType
 */
export interface PostingActivityDetailType {
    /**
     * 
     * @type {string}
     * @memberof PostingActivityDetailType
     */
    hotelId?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof PostingActivityDetailType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {ActivityLogType}
     * @memberof PostingActivityDetailType
     */
    activity?: ActivityLogType;
    /**
     * List of postings.
     * @type {Array<SummaryPostingType>}
     * @memberof PostingActivityDetailType
     */
    oldInfo?: Array<SummaryPostingType>;
    /**
     * List of postings.
     * @type {Array<SummaryPostingType>}
     * @memberof PostingActivityDetailType
     */
    newInfo?: Array<SummaryPostingType>;
}

/**
 * Check if a given object implements the PostingActivityDetailType interface.
 */
export function instanceOfPostingActivityDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostingActivityDetailTypeFromJSON(json: any): PostingActivityDetailType {
    return PostingActivityDetailTypeFromJSONTyped(json, false);
}

export function PostingActivityDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostingActivityDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'activity': !exists(json, 'activity') ? undefined : ActivityLogTypeFromJSON(json['activity']),
        'oldInfo': !exists(json, 'oldInfo') ? undefined : ((json['oldInfo'] as Array<any>).map(SummaryPostingTypeFromJSON)),
        'newInfo': !exists(json, 'newInfo') ? undefined : ((json['newInfo'] as Array<any>).map(SummaryPostingTypeFromJSON)),
    };
}

export function PostingActivityDetailTypeToJSON(value?: PostingActivityDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'activity': ActivityLogTypeToJSON(value.activity),
        'oldInfo': value.oldInfo === undefined ? undefined : ((value.oldInfo as Array<any>).map(SummaryPostingTypeToJSON)),
        'newInfo': value.newInfo === undefined ? undefined : ((value.newInfo as Array<any>).map(SummaryPostingTypeToJSON)),
    };
}

