"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangeRateTransactionGenerateTaxTypeToJSON = exports.ExchangeRateTransactionGenerateTaxTypeFromJSONTyped = exports.ExchangeRateTransactionGenerateTaxTypeFromJSON = exports.instanceOfExchangeRateTransactionGenerateTaxType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the ExchangeRateTransactionGenerateTaxType interface.
 */
function instanceOfExchangeRateTransactionGenerateTaxType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExchangeRateTransactionGenerateTaxType = instanceOfExchangeRateTransactionGenerateTaxType;
function ExchangeRateTransactionGenerateTaxTypeFromJSON(json) {
    return ExchangeRateTransactionGenerateTaxTypeFromJSONTyped(json, false);
}
exports.ExchangeRateTransactionGenerateTaxTypeFromJSON = ExchangeRateTransactionGenerateTaxTypeFromJSON;
function ExchangeRateTransactionGenerateTaxTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'taxAmount': !(0, runtime_1.exists)(json, 'taxAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['taxAmount']),
    };
}
exports.ExchangeRateTransactionGenerateTaxTypeFromJSONTyped = ExchangeRateTransactionGenerateTaxTypeFromJSONTyped;
function ExchangeRateTransactionGenerateTaxTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'description': value.description,
        'taxAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.taxAmount),
    };
}
exports.ExchangeRateTransactionGenerateTaxTypeToJSON = ExchangeRateTransactionGenerateTaxTypeToJSON;
