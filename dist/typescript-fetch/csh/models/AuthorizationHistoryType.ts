/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizationHistoryTypeCardPaymentInformation } from './AuthorizationHistoryTypeCardPaymentInformation';
import {
    AuthorizationHistoryTypeCardPaymentInformationFromJSON,
    AuthorizationHistoryTypeCardPaymentInformationFromJSONTyped,
    AuthorizationHistoryTypeCardPaymentInformationToJSON,
} from './AuthorizationHistoryTypeCardPaymentInformation';
import type { AuthorizationHistoryTypeStatus } from './AuthorizationHistoryTypeStatus';
import {
    AuthorizationHistoryTypeStatusFromJSON,
    AuthorizationHistoryTypeStatusFromJSONTyped,
    AuthorizationHistoryTypeStatusToJSON,
} from './AuthorizationHistoryTypeStatus';
import type { CardAuthorizationTransactionType } from './CardAuthorizationTransactionType';
import {
    CardAuthorizationTransactionTypeFromJSON,
    CardAuthorizationTransactionTypeFromJSONTyped,
    CardAuthorizationTransactionTypeToJSON,
} from './CardAuthorizationTransactionType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Information on a single credit card authorization transaction.
 * @export
 * @interface AuthorizationHistoryType
 */
export interface AuthorizationHistoryType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AuthorizationHistoryType
     */
    approvalAmount?: CurrencyAmountType;
    /**
     * The corresponding business date for this record.
     * @type {Date}
     * @memberof AuthorizationHistoryType
     */
    businessDate?: Date;
    /**
     * 
     * @type {AuthorizationHistoryTypeCardPaymentInformation}
     * @memberof AuthorizationHistoryType
     */
    cardPaymentInformation?: AuthorizationHistoryTypeCardPaymentInformation;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof AuthorizationHistoryType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof AuthorizationHistoryType
     */
    creatorId?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof AuthorizationHistoryType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof AuthorizationHistoryType
     */
    lastModifyDateTime?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof AuthorizationHistoryType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {AuthorizationHistoryTypeStatus}
     * @memberof AuthorizationHistoryType
     */
    status?: AuthorizationHistoryTypeStatus;
    /**
     * 
     * @type {CardAuthorizationTransactionType}
     * @memberof AuthorizationHistoryType
     */
    transactionType?: CardAuthorizationTransactionType;
    /**
     * History type can only be either Settlement or Authorization or Payment or Refunds.
     * @type {string}
     * @memberof AuthorizationHistoryType
     */
    type?: AuthorizationHistoryTypeTypeEnum;
}


/**
 * @export
 */
export const AuthorizationHistoryTypeTypeEnum = {
    Settlement: 'Settlement',
    Authorization: 'Authorization',
    Payment: 'Payment',
    Refunds: 'Refunds'
} as const;
export type AuthorizationHistoryTypeTypeEnum = typeof AuthorizationHistoryTypeTypeEnum[keyof typeof AuthorizationHistoryTypeTypeEnum];


/**
 * Check if a given object implements the AuthorizationHistoryType interface.
 */
export function instanceOfAuthorizationHistoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizationHistoryTypeFromJSON(json: any): AuthorizationHistoryType {
    return AuthorizationHistoryTypeFromJSONTyped(json, false);
}

export function AuthorizationHistoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizationHistoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'approvalAmount': !exists(json, 'approvalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['approvalAmount']),
        'businessDate': !exists(json, 'businessDate') ? undefined : (new Date(json['businessDate'])),
        'cardPaymentInformation': !exists(json, 'cardPaymentInformation') ? undefined : AuthorizationHistoryTypeCardPaymentInformationFromJSON(json['cardPaymentInformation']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'status': !exists(json, 'status') ? undefined : AuthorizationHistoryTypeStatusFromJSON(json['status']),
        'transactionType': !exists(json, 'transactionType') ? undefined : CardAuthorizationTransactionTypeFromJSON(json['transactionType']),
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function AuthorizationHistoryTypeToJSON(value?: AuthorizationHistoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'approvalAmount': CurrencyAmountTypeToJSON(value.approvalAmount),
        'businessDate': value.businessDate === undefined ? undefined : (value.businessDate.toISOString().substr(0,10)),
        'cardPaymentInformation': AuthorizationHistoryTypeCardPaymentInformationToJSON(value.cardPaymentInformation),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substr(0,10)),
        'status': AuthorizationHistoryTypeStatusToJSON(value.status),
        'transactionType': CardAuthorizationTransactionTypeToJSON(value.transactionType),
        'type': value.type,
    };
}

