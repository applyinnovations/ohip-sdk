"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BillingChargeTypeToJSON = exports.BillingChargeTypeFromJSONTyped = exports.BillingChargeTypeFromJSON = exports.instanceOfBillingChargeType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the BillingChargeType interface.
 */
function instanceOfBillingChargeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBillingChargeType = instanceOfBillingChargeType;
function BillingChargeTypeFromJSON(json) {
    return BillingChargeTypeFromJSONTyped(json, false);
}
exports.BillingChargeTypeFromJSON = BillingChargeTypeFromJSON;
function BillingChargeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'transactionNo': !(0, runtime_1.exists)(json, 'transactionNo') ? undefined : json['transactionNo'],
        'price': !(0, runtime_1.exists)(json, 'price') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['price']),
        'quantity': !(0, runtime_1.exists)(json, 'quantity') ? undefined : json['quantity'],
        'reference': !(0, runtime_1.exists)(json, 'reference') ? undefined : json['reference'],
        'remark': !(0, runtime_1.exists)(json, 'remark') ? undefined : json['remark'],
        'checkNumber': !(0, runtime_1.exists)(json, 'checkNumber') ? undefined : json['checkNumber'],
        'revenueDate': !(0, runtime_1.exists)(json, 'revenueDate') ? undefined : json['revenueDate'],
        'covers': !(0, runtime_1.exists)(json, 'covers') ? undefined : json['covers'],
        'arrangementCode': !(0, runtime_1.exists)(json, 'arrangementCode') ? undefined : json['arrangementCode'],
        'approvalCode': !(0, runtime_1.exists)(json, 'approvalCode') ? undefined : json['approvalCode'],
        'approvalStatus': !(0, runtime_1.exists)(json, 'approvalStatus') ? undefined : json['approvalStatus'],
        'approvalDate': !(0, runtime_1.exists)(json, 'approvalDate') ? undefined : json['approvalDate'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
    };
}
exports.BillingChargeTypeFromJSONTyped = BillingChargeTypeFromJSONTyped;
function BillingChargeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactionNo': value.transactionNo,
        'price': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.price),
        'quantity': value.quantity,
        'reference': value.reference,
        'remark': value.remark,
        'checkNumber': value.checkNumber,
        'revenueDate': value.revenueDate,
        'covers': value.covers,
        'arrangementCode': value.arrangementCode,
        'approvalCode': value.approvalCode,
        'approvalStatus': value.approvalStatus,
        'approvalDate': value.approvalDate,
        'cashierId': value.cashierId,
    };
}
exports.BillingChargeTypeToJSON = BillingChargeTypeToJSON;
