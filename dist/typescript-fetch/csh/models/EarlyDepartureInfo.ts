/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EarlyDepartureInfoType } from './EarlyDepartureInfoType';
import {
    EarlyDepartureInfoTypeFromJSON,
    EarlyDepartureInfoTypeFromJSONTyped,
    EarlyDepartureInfoTypeToJSON,
} from './EarlyDepartureInfoType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response for Early departure verification. Contains information regarding early departure penalty amount if applicable and any errors or warnings as to why the early departure cannot be done. Possible error codes are: FOF00152: An early departure could result in a change to the room rate, due to the reduced length of stay. FOF00153: Exchange Rates not setup for {currency code} . FOF00155: The partially consumed package(s) will be charged to the guest account. FOF00156: There is a Rate Code Restriction for {restriction information}. FOF00157: The reservation status is not valid for an early departure. FOF00158: Early Departure is not required as the reservation is already in Due Out status.
 * @export
 * @interface EarlyDepartureInfo
 */
export interface EarlyDepartureInfo {
    /**
     * 
     * @type {EarlyDepartureInfoType}
     * @memberof EarlyDepartureInfo
     */
    earlyDepartureDetails?: EarlyDepartureInfoType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof EarlyDepartureInfo
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof EarlyDepartureInfo
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the EarlyDepartureInfo interface.
 */
export function instanceOfEarlyDepartureInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EarlyDepartureInfoFromJSON(json: any): EarlyDepartureInfo {
    return EarlyDepartureInfoFromJSONTyped(json, false);
}

export function EarlyDepartureInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EarlyDepartureInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'earlyDepartureDetails': !exists(json, 'earlyDepartureDetails') ? undefined : EarlyDepartureInfoTypeFromJSON(json['earlyDepartureDetails']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function EarlyDepartureInfoToJSON(value?: EarlyDepartureInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'earlyDepartureDetails': EarlyDepartureInfoTypeToJSON(value.earlyDepartureDetails),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

