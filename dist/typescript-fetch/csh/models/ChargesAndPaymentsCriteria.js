"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChargesAndPaymentsCriteriaToJSON = exports.ChargesAndPaymentsCriteriaFromJSONTyped = exports.ChargesAndPaymentsCriteriaFromJSON = exports.instanceOfChargesAndPaymentsCriteria = void 0;
const runtime_1 = require("../runtime");
const ChargeCriteriaType_1 = require("./ChargeCriteriaType");
const PaymentCriteriaType_1 = require("./PaymentCriteriaType");
/**
 * Check if a given object implements the ChargesAndPaymentsCriteria interface.
 */
function instanceOfChargesAndPaymentsCriteria(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChargesAndPaymentsCriteria = instanceOfChargesAndPaymentsCriteria;
function ChargesAndPaymentsCriteriaFromJSON(json) {
    return ChargesAndPaymentsCriteriaFromJSONTyped(json, false);
}
exports.ChargesAndPaymentsCriteriaFromJSON = ChargesAndPaymentsCriteriaFromJSON;
function ChargesAndPaymentsCriteriaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'charges': !(0, runtime_1.exists)(json, 'charges') ? undefined : (json['charges'].map(ChargeCriteriaType_1.ChargeCriteriaTypeFromJSON)),
        'payments': !(0, runtime_1.exists)(json, 'payments') ? undefined : (json['payments'].map(PaymentCriteriaType_1.PaymentCriteriaTypeFromJSON)),
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
    };
}
exports.ChargesAndPaymentsCriteriaFromJSONTyped = ChargesAndPaymentsCriteriaFromJSONTyped;
function ChargesAndPaymentsCriteriaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'charges': value.charges === undefined ? undefined : (value.charges.map(ChargeCriteriaType_1.ChargeCriteriaTypeToJSON)),
        'payments': value.payments === undefined ? undefined : (value.payments.map(PaymentCriteriaType_1.PaymentCriteriaTypeToJSON)),
        'cashierId': value.cashierId,
    };
}
exports.ChargesAndPaymentsCriteriaToJSON = ChargesAndPaymentsCriteriaToJSON;
