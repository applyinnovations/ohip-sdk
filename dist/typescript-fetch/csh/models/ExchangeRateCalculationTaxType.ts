/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ExchangeRateTransactionGenerateTaxType } from './ExchangeRateTransactionGenerateTaxType';
import {
    ExchangeRateTransactionGenerateTaxTypeFromJSON,
    ExchangeRateTransactionGenerateTaxTypeFromJSONTyped,
    ExchangeRateTransactionGenerateTaxTypeToJSON,
} from './ExchangeRateTransactionGenerateTaxType';

/**
 * Detailed information about exchange rate calculation service tax.
 * @export
 * @interface ExchangeRateCalculationTaxType
 */
export interface ExchangeRateCalculationTaxType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ExchangeRateCalculationTaxType
     */
    percentageAppliedOn?: CurrencyAmountType;
    /**
     * Based Amount in local currency to be added on top of computed service tax based on Percentage.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    baseAmount?: number;
    /**
     * Percentage to be multiplied to Percentage Applied On to get the service tax.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    percentage?: number;
    /**
     * Minimum service tax in local currency to be charged
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    minServiceTax?: number;
    /**
     * Maximum service tax in local currency to be charged.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    maxServiceTax?: number;
    /**
     * Exchange rate calculation tax information based on Transaction Code Generate.
     * @type {Array<ExchangeRateTransactionGenerateTaxType>}
     * @memberof ExchangeRateCalculationTaxType
     */
    exchangeRateTransactionGenerateTaxes?: Array<ExchangeRateTransactionGenerateTaxType>;
}

/**
 * Check if a given object implements the ExchangeRateCalculationTaxType interface.
 */
export function instanceOfExchangeRateCalculationTaxType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExchangeRateCalculationTaxTypeFromJSON(json: any): ExchangeRateCalculationTaxType {
    return ExchangeRateCalculationTaxTypeFromJSONTyped(json, false);
}

export function ExchangeRateCalculationTaxTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeRateCalculationTaxType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'percentageAppliedOn': !exists(json, 'percentageAppliedOn') ? undefined : CurrencyAmountTypeFromJSON(json['percentageAppliedOn']),
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'minServiceTax': !exists(json, 'minServiceTax') ? undefined : json['minServiceTax'],
        'maxServiceTax': !exists(json, 'maxServiceTax') ? undefined : json['maxServiceTax'],
        'exchangeRateTransactionGenerateTaxes': !exists(json, 'exchangeRateTransactionGenerateTaxes') ? undefined : ((json['exchangeRateTransactionGenerateTaxes'] as Array<any>).map(ExchangeRateTransactionGenerateTaxTypeFromJSON)),
    };
}

export function ExchangeRateCalculationTaxTypeToJSON(value?: ExchangeRateCalculationTaxType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'percentageAppliedOn': CurrencyAmountTypeToJSON(value.percentageAppliedOn),
        'baseAmount': value.baseAmount,
        'percentage': value.percentage,
        'minServiceTax': value.minServiceTax,
        'maxServiceTax': value.maxServiceTax,
        'exchangeRateTransactionGenerateTaxes': value.exchangeRateTransactionGenerateTaxes === undefined ? undefined : ((value.exchangeRateTransactionGenerateTaxes as Array<any>).map(ExchangeRateTransactionGenerateTaxTypeToJSON)),
    };
}

