"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionTypeToJSON = exports.TransactionTypeFromJSONTyped = exports.TransactionTypeFromJSON = exports.instanceOfTransactionType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
/**
 * Check if a given object implements the TransactionType interface.
 */
function instanceOfTransactionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTransactionType = instanceOfTransactionType;
function TransactionTypeFromJSON(json) {
    return TransactionTypeFromJSONTyped(json, false);
}
exports.TransactionTypeFromJSON = TransactionTypeFromJSON;
function TransactionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'transactionCode': !(0, runtime_1.exists)(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDate': !(0, runtime_1.exists)(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'transactionDescription': !(0, runtime_1.exists)(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'transactionNo': !(0, runtime_1.exists)(json, 'transactionNo') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['transactionNo']),
    };
}
exports.TransactionTypeFromJSONTyped = TransactionTypeFromJSONTyped;
function TransactionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactionCode': value.transactionCode,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString().substr(0, 10)),
        'transactionDescription': value.transactionDescription,
        'transactionNo': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.transactionNo),
    };
}
exports.TransactionTypeToJSON = TransactionTypeToJSON;
