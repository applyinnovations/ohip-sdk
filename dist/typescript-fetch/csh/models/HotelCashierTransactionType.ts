/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashierTransactionType } from './CashierTransactionType';
import {
    CashierTransactionTypeFromJSON,
    CashierTransactionTypeFromJSONTyped,
    CashierTransactionTypeToJSON,
} from './CashierTransactionType';

/**
 * Cashier Shift amounts for each Hotel group by currency code
 * @export
 * @interface HotelCashierTransactionType
 */
export interface HotelCashierTransactionType {
    /**
     * Hotel's transaction in cashier shift.
     * @type {Array<CashierTransactionType>}
     * @memberof HotelCashierTransactionType
     */
    transactions?: Array<CashierTransactionType>;
    /**
     * Hotel Code.
     * @type {string}
     * @memberof HotelCashierTransactionType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the HotelCashierTransactionType interface.
 */
export function instanceOfHotelCashierTransactionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelCashierTransactionTypeFromJSON(json: any): HotelCashierTransactionType {
    return HotelCashierTransactionTypeFromJSONTyped(json, false);
}

export function HotelCashierTransactionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelCashierTransactionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactions': !exists(json, 'transactions') ? undefined : ((json['transactions'] as Array<any>).map(CashierTransactionTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function HotelCashierTransactionTypeToJSON(value?: HotelCashierTransactionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactions': value.transactions === undefined ? undefined : ((value.transactions as Array<any>).map(CashierTransactionTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

