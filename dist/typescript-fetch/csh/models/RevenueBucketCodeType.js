"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevenueBucketCodeTypeToJSON = exports.RevenueBucketCodeTypeFromJSONTyped = exports.RevenueBucketCodeTypeFromJSON = exports.instanceOfRevenueBucketCodeType = void 0;
const runtime_1 = require("../runtime");
const BucketTypeType_1 = require("./BucketTypeType");
const TrxInfoType_1 = require("./TrxInfoType");
/**
 * Check if a given object implements the RevenueBucketCodeType interface.
 */
function instanceOfRevenueBucketCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRevenueBucketCodeType = instanceOfRevenueBucketCodeType;
function RevenueBucketCodeTypeFromJSON(json) {
    return RevenueBucketCodeTypeFromJSONTyped(json, false);
}
exports.RevenueBucketCodeTypeFromJSON = RevenueBucketCodeTypeFromJSON;
function RevenueBucketCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'transactionCodes': !(0, runtime_1.exists)(json, 'transactionCodes') ? undefined : (json['transactionCodes'].map(TrxInfoType_1.TrxInfoTypeFromJSON)),
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'revenueBucketType': !(0, runtime_1.exists)(json, 'revenueBucketType') ? undefined : json['revenueBucketType'],
        'pointsEligible': !(0, runtime_1.exists)(json, 'pointsEligible') ? undefined : json['pointsEligible'],
        'bucketValue': !(0, runtime_1.exists)(json, 'bucketValue') ? undefined : json['bucketValue'],
        'bucketType': !(0, runtime_1.exists)(json, 'bucketType') ? undefined : (0, BucketTypeType_1.BucketTypeTypeFromJSON)(json['bucketType']),
    };
}
exports.RevenueBucketCodeTypeFromJSONTyped = RevenueBucketCodeTypeFromJSONTyped;
function RevenueBucketCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'transactionCodes': value.transactionCodes === undefined ? undefined : (value.transactionCodes.map(TrxInfoType_1.TrxInfoTypeToJSON)),
        'code': value.code,
        'hotelId': value.hotelId,
        'revenueBucketType': value.revenueBucketType,
        'pointsEligible': value.pointsEligible,
        'bucketValue': value.bucketValue,
        'bucketType': (0, BucketTypeType_1.BucketTypeTypeToJSON)(value.bucketType),
    };
}
exports.RevenueBucketCodeTypeToJSON = RevenueBucketCodeTypeToJSON;
