"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvanceRoomChargesCriteriaTypeToJSON = exports.AdvanceRoomChargesCriteriaTypeFromJSONTyped = exports.AdvanceRoomChargesCriteriaTypeFromJSON = exports.instanceOfAdvanceRoomChargesCriteriaType = void 0;
const runtime_1 = require("../runtime");
const CashieringEventType_1 = require("./CashieringEventType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the AdvanceRoomChargesCriteriaType interface.
 */
function instanceOfAdvanceRoomChargesCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAdvanceRoomChargesCriteriaType = instanceOfAdvanceRoomChargesCriteriaType;
function AdvanceRoomChargesCriteriaTypeFromJSON(json) {
    return AdvanceRoomChargesCriteriaTypeFromJSONTyped(json, false);
}
exports.AdvanceRoomChargesCriteriaTypeFromJSON = AdvanceRoomChargesCriteriaTypeFromJSON;
function AdvanceRoomChargesCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'postForEntireStay': !(0, runtime_1.exists)(json, 'postForEntireStay') ? undefined : json['postForEntireStay'],
        'endDateToCharge': !(0, runtime_1.exists)(json, 'endDateToCharge') ? undefined : json['endDateToCharge'],
        'verifyOnly': !(0, runtime_1.exists)(json, 'verifyOnly') ? undefined : json['verifyOnly'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : (0, CashieringEventType_1.CashieringEventTypeFromJSON)(json['eventType']),
    };
}
exports.AdvanceRoomChargesCriteriaTypeFromJSONTyped = AdvanceRoomChargesCriteriaTypeFromJSONTyped;
function AdvanceRoomChargesCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'postForEntireStay': value.postForEntireStay,
        'endDateToCharge': value.endDateToCharge,
        'verifyOnly': value.verifyOnly,
        'cashierId': value.cashierId,
        'eventType': (0, CashieringEventType_1.CashieringEventTypeToJSON)(value.eventType),
    };
}
exports.AdvanceRoomChargesCriteriaTypeToJSON = AdvanceRoomChargesCriteriaTypeToJSON;
