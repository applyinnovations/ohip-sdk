"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentCriteriaTypeToJSON = exports.PaymentCriteriaTypeFromJSONTyped = exports.PaymentCriteriaTypeFromJSON = exports.instanceOfPaymentCriteriaType = void 0;
const runtime_1 = require("../runtime");
const CashieringPaymentMethodType_1 = require("./CashieringPaymentMethodType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PaymentTaxType_1 = require("./PaymentTaxType");
const PostPaymentActionType_1 = require("./PostPaymentActionType");
const PrepaidCardRedemptionType_1 = require("./PrepaidCardRedemptionType");
const RedemptionType_1 = require("./RedemptionType");
/**
 * Check if a given object implements the PaymentCriteriaType interface.
 */
function instanceOfPaymentCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPaymentCriteriaType = instanceOfPaymentCriteriaType;
function PaymentCriteriaTypeFromJSON(json) {
    return PaymentCriteriaTypeFromJSONTyped(json, false);
}
exports.PaymentCriteriaTypeFromJSON = PaymentCriteriaTypeFromJSON;
function PaymentCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'paymentMethod': !(0, runtime_1.exists)(json, 'paymentMethod') ? undefined : (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeFromJSON)(json['paymentMethod']),
        'postingAmount': !(0, runtime_1.exists)(json, 'postingAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['postingAmount']),
        'postingReference': !(0, runtime_1.exists)(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !(0, runtime_1.exists)(json, 'postingRemark') ? undefined : json['postingRemark'],
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'applyCCSurcharge': !(0, runtime_1.exists)(json, 'applyCCSurcharge') ? undefined : json['applyCCSurcharge'],
        'manualPaymentTaxInfo': !(0, runtime_1.exists)(json, 'manualPaymentTaxInfo') ? undefined : (0, PaymentTaxType_1.PaymentTaxTypeFromJSON)(json['manualPaymentTaxInfo']),
        'creditablePaymentTaxes': !(0, runtime_1.exists)(json, 'creditablePaymentTaxes') ? undefined : (json['creditablePaymentTaxes'].map(PaymentTaxType_1.PaymentTaxTypeFromJSON)),
        'terminalId': !(0, runtime_1.exists)(json, 'terminalId') ? undefined : json['terminalId'],
        'overrideInsufficientCC': !(0, runtime_1.exists)(json, 'overrideInsufficientCC') ? undefined : json['overrideInsufficientCC'],
        'changeDueAmount': !(0, runtime_1.exists)(json, 'changeDueAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['changeDueAmount']),
        'compRedemptions': !(0, runtime_1.exists)(json, 'compRedemptions') ? undefined : (json['compRedemptions'].map(RedemptionType_1.RedemptionTypeFromJSON)),
        'overrideARCreditLimit': !(0, runtime_1.exists)(json, 'overrideARCreditLimit') ? undefined : json['overrideARCreditLimit'],
        'applyCurrencyTaxes': !(0, runtime_1.exists)(json, 'applyCurrencyTaxes') ? undefined : json['applyCurrencyTaxes'],
        'vATOffset': !(0, runtime_1.exists)(json, 'vATOffset') ? undefined : json['vATOffset'],
        'action': !(0, runtime_1.exists)(json, 'action') ? undefined : (0, PostPaymentActionType_1.PostPaymentActionTypeFromJSON)(json['action']),
        'prepaidCardRedemptions': !(0, runtime_1.exists)(json, 'prepaidCardRedemptions') ? undefined : (json['prepaidCardRedemptions'].map(PrepaidCardRedemptionType_1.PrepaidCardRedemptionTypeFromJSON)),
        'folioWindowNo': !(0, runtime_1.exists)(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'originalInvoice': !(0, runtime_1.exists)(json, 'originalInvoice') ? undefined : json['originalInvoice'],
        'invoiceType': !(0, runtime_1.exists)(json, 'invoiceType') ? undefined : json['invoiceType'],
    };
}
exports.PaymentCriteriaTypeFromJSONTyped = PaymentCriteriaTypeFromJSONTyped;
function PaymentCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'paymentMethod': (0, CashieringPaymentMethodType_1.CashieringPaymentMethodTypeToJSON)(value.paymentMethod),
        'postingAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.postingAmount),
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'comments': value.comments,
        'applyCCSurcharge': value.applyCCSurcharge,
        'manualPaymentTaxInfo': (0, PaymentTaxType_1.PaymentTaxTypeToJSON)(value.manualPaymentTaxInfo),
        'creditablePaymentTaxes': value.creditablePaymentTaxes === undefined ? undefined : (value.creditablePaymentTaxes.map(PaymentTaxType_1.PaymentTaxTypeToJSON)),
        'terminalId': value.terminalId,
        'overrideInsufficientCC': value.overrideInsufficientCC,
        'changeDueAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.changeDueAmount),
        'compRedemptions': value.compRedemptions === undefined ? undefined : (value.compRedemptions.map(RedemptionType_1.RedemptionTypeToJSON)),
        'overrideARCreditLimit': value.overrideARCreditLimit,
        'applyCurrencyTaxes': value.applyCurrencyTaxes,
        'vATOffset': value.vATOffset,
        'action': (0, PostPaymentActionType_1.PostPaymentActionTypeToJSON)(value.action),
        'prepaidCardRedemptions': value.prepaidCardRedemptions === undefined ? undefined : (value.prepaidCardRedemptions.map(PrepaidCardRedemptionType_1.PrepaidCardRedemptionTypeToJSON)),
        'folioWindowNo': value.folioWindowNo,
        'cashierId': value.cashierId,
        'originalInvoice': value.originalInvoice,
        'invoiceType': value.invoiceType,
    };
}
exports.PaymentCriteriaTypeToJSON = PaymentCriteriaTypeToJSON;
