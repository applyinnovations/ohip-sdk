/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { ExchangeRateTransactionGenerateTaxType } from './ExchangeRateTransactionGenerateTaxType';
/**
 * Detailed information about exchange rate calculation service tax.
 * @export
 * @interface ExchangeRateCalculationTaxType
 */
export interface ExchangeRateCalculationTaxType {
    /**
     * Based Amount in local currency to be added on top of computed service tax based on Percentage.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    baseAmount?: number;
    /**
     * Exchange rate calculation tax information based on Transaction Code Generate.
     * @type {Array<ExchangeRateTransactionGenerateTaxType>}
     * @memberof ExchangeRateCalculationTaxType
     */
    exchangeRateTransactionGenerateTaxes?: Array<ExchangeRateTransactionGenerateTaxType>;
    /**
     * Maximum service tax in local currency to be charged.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    maxServiceTax?: number;
    /**
     * Minimum service tax in local currency to be charged
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    minServiceTax?: number;
    /**
     * Percentage to be multiplied to Percentage Applied On to get the service tax.
     * @type {number}
     * @memberof ExchangeRateCalculationTaxType
     */
    percentage?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ExchangeRateCalculationTaxType
     */
    percentageAppliedOn?: CurrencyAmountType;
}
/**
 * Check if a given object implements the ExchangeRateCalculationTaxType interface.
 */
export declare function instanceOfExchangeRateCalculationTaxType(value: object): boolean;
export declare function ExchangeRateCalculationTaxTypeFromJSON(json: any): ExchangeRateCalculationTaxType;
export declare function ExchangeRateCalculationTaxTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeRateCalculationTaxType;
export declare function ExchangeRateCalculationTaxTypeToJSON(value?: ExchangeRateCalculationTaxType | null): any;
