/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationInfoType } from './ReservationInfoType';
import {
    ReservationInfoTypeFromJSON,
    ReservationInfoTypeFromJSONTyped,
    ReservationInfoTypeToJSON,
} from './ReservationInfoType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * 
 * @export
 * @interface AdvanceRoomChargesInfoType
 */
export interface AdvanceRoomChargesInfoType {
    /**
     * 
     * @type {TimeSpanType}
     * @memberof AdvanceRoomChargesInfoType
     */
    availablePostingDates?: TimeSpanType;
    /**
     * 
     * @type {ReservationInfoType}
     * @memberof AdvanceRoomChargesInfoType
     */
    reservation?: ReservationInfoType;
    /**
     * Indicates if the advance folio has been generated for the entire stay.
     * @type {boolean}
     * @memberof AdvanceRoomChargesInfoType
     */
    generatedForEntireStay?: boolean;
    /**
     * Indicates the date of the stay until which the advance bill has been generated .
     * @type {Date}
     * @memberof AdvanceRoomChargesInfoType
     */
    lastRoomAndTaxPostedDate?: Date;
}

/**
 * Check if a given object implements the AdvanceRoomChargesInfoType interface.
 */
export function instanceOfAdvanceRoomChargesInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdvanceRoomChargesInfoTypeFromJSON(json: any): AdvanceRoomChargesInfoType {
    return AdvanceRoomChargesInfoTypeFromJSONTyped(json, false);
}

export function AdvanceRoomChargesInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdvanceRoomChargesInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availablePostingDates': !exists(json, 'availablePostingDates') ? undefined : TimeSpanTypeFromJSON(json['availablePostingDates']),
        'reservation': !exists(json, 'reservation') ? undefined : ReservationInfoTypeFromJSON(json['reservation']),
        'generatedForEntireStay': !exists(json, 'generatedForEntireStay') ? undefined : json['generatedForEntireStay'],
        'lastRoomAndTaxPostedDate': !exists(json, 'lastRoomAndTaxPostedDate') ? undefined : (new Date(json['lastRoomAndTaxPostedDate'])),
    };
}

export function AdvanceRoomChargesInfoTypeToJSON(value?: AdvanceRoomChargesInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availablePostingDates': TimeSpanTypeToJSON(value.availablePostingDates),
        'reservation': ReservationInfoTypeToJSON(value.reservation),
        'generatedForEntireStay': value.generatedForEntireStay,
        'lastRoomAndTaxPostedDate': value.lastRoomAndTaxPostedDate === undefined ? undefined : (value.lastRoomAndTaxPostedDate.toISOString().substr(0,10)),
    };
}

