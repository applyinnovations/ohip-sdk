"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationFolioInfoTypeToJSON = exports.ReservationFolioInfoTypeFromJSONTyped = exports.ReservationFolioInfoTypeFromJSON = exports.instanceOfReservationFolioInfoType = void 0;
const runtime_1 = require("../runtime");
const FolioWindowType_1 = require("./FolioWindowType");
const ReservationInfoType_1 = require("./ReservationInfoType");
/**
 * Check if a given object implements the ReservationFolioInfoType interface.
 */
function instanceOfReservationFolioInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationFolioInfoType = instanceOfReservationFolioInfoType;
function ReservationFolioInfoTypeFromJSON(json) {
    return ReservationFolioInfoTypeFromJSONTyped(json, false);
}
exports.ReservationFolioInfoTypeFromJSON = ReservationFolioInfoTypeFromJSON;
function ReservationFolioInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'autoCheckInAllowed': !(0, runtime_1.exists)(json, 'autoCheckInAllowed') ? undefined : json['autoCheckInAllowed'],
        'correctionTrxExists': !(0, runtime_1.exists)(json, 'correctionTrxExists') ? undefined : json['correctionTrxExists'],
        'deferredTaxesPosted': !(0, runtime_1.exists)(json, 'deferredTaxesPosted') ? undefined : json['deferredTaxesPosted'],
        'folioHistory': !(0, runtime_1.exists)(json, 'folioHistory') ? undefined : (json['folioHistory'].map(FolioWindowType_1.FolioWindowTypeFromJSON)),
        'folioWindows': !(0, runtime_1.exists)(json, 'folioWindows') ? undefined : (json['folioWindows'].map(FolioWindowType_1.FolioWindowTypeFromJSON)),
        'postStayChargeAllowed': !(0, runtime_1.exists)(json, 'postStayChargeAllowed') ? undefined : json['postStayChargeAllowed'],
        'postToNoShowCancelAllowed': !(0, runtime_1.exists)(json, 'postToNoShowCancelAllowed') ? undefined : json['postToNoShowCancelAllowed'],
        'preStayChargeAllowed': !(0, runtime_1.exists)(json, 'preStayChargeAllowed') ? undefined : json['preStayChargeAllowed'],
        'reservationInfo': !(0, runtime_1.exists)(json, 'reservationInfo') ? undefined : (0, ReservationInfoType_1.ReservationInfoTypeFromJSON)(json['reservationInfo']),
        'roomAndTaxPosted': !(0, runtime_1.exists)(json, 'roomAndTaxPosted') ? undefined : json['roomAndTaxPosted'],
        'stampDutyExists': !(0, runtime_1.exists)(json, 'stampDutyExists') ? undefined : json['stampDutyExists'],
    };
}
exports.ReservationFolioInfoTypeFromJSONTyped = ReservationFolioInfoTypeFromJSONTyped;
function ReservationFolioInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'autoCheckInAllowed': value.autoCheckInAllowed,
        'correctionTrxExists': value.correctionTrxExists,
        'deferredTaxesPosted': value.deferredTaxesPosted,
        'folioHistory': value.folioHistory === undefined ? undefined : (value.folioHistory.map(FolioWindowType_1.FolioWindowTypeToJSON)),
        'folioWindows': value.folioWindows === undefined ? undefined : (value.folioWindows.map(FolioWindowType_1.FolioWindowTypeToJSON)),
        'postStayChargeAllowed': value.postStayChargeAllowed,
        'postToNoShowCancelAllowed': value.postToNoShowCancelAllowed,
        'preStayChargeAllowed': value.preStayChargeAllowed,
        'reservationInfo': (0, ReservationInfoType_1.ReservationInfoTypeToJSON)(value.reservationInfo),
        'roomAndTaxPosted': value.roomAndTaxPosted,
        'stampDutyExists': value.stampDutyExists,
    };
}
exports.ReservationFolioInfoTypeToJSON = ReservationFolioInfoTypeToJSON;
