"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GamingRequestStatusTypeToJSON = exports.GamingRequestStatusTypeFromJSONTyped = exports.GamingRequestStatusTypeFromJSON = exports.instanceOfGamingRequestStatusType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the GamingRequestStatusType interface.
 */
function instanceOfGamingRequestStatusType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfGamingRequestStatusType = instanceOfGamingRequestStatusType;
function GamingRequestStatusTypeFromJSON(json) {
    return GamingRequestStatusTypeFromJSONTyped(json, false);
}
exports.GamingRequestStatusTypeFromJSON = GamingRequestStatusTypeFromJSON;
function GamingRequestStatusTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'statusCode': !(0, runtime_1.exists)(json, 'statusCode') ? undefined : json['statusCode'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'messageId': !(0, runtime_1.exists)(json, 'messageId') ? undefined : json['messageId'],
        'messageText': !(0, runtime_1.exists)(json, 'messageText') ? undefined : json['messageText'],
        'requestDate': !(0, runtime_1.exists)(json, 'requestDate') ? undefined : json['requestDate'],
    };
}
exports.GamingRequestStatusTypeFromJSONTyped = GamingRequestStatusTypeFromJSONTyped;
function GamingRequestStatusTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'statusCode': value.statusCode,
        'status': value.status,
        'messageId': value.messageId,
        'messageText': value.messageText,
        'requestDate': value.requestDate,
    };
}
exports.GamingRequestStatusTypeToJSON = GamingRequestStatusTypeToJSON;
