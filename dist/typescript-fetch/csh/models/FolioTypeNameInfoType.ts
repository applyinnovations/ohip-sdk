/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of a Folio Type configuration.
 * @export
 * @interface FolioTypeNameInfoType
 */
export interface FolioTypeNameInfoType {
    /**
     * Property where the Folio Type exists.
     * @type {string}
     * @memberof FolioTypeNameInfoType
     */
    hotelId?: string;
    /**
     * The Folio Type.
     * @type {string}
     * @memberof FolioTypeNameInfoType
     */
    folioTypeName?: string;
    /**
     * The report name which should be used as the Folio for printing.
     * @type {string}
     * @memberof FolioTypeNameInfoType
     */
    folioReportName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof FolioTypeNameInfoType
     */
    folioReportModuleId?: UniqueIDType;
    /**
     * The Language Code for which the folio is effective.
     * @type {string}
     * @memberof FolioTypeNameInfoType
     */
    folioLanguageCode?: string;
}

/**
 * Check if a given object implements the FolioTypeNameInfoType interface.
 */
export function instanceOfFolioTypeNameInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FolioTypeNameInfoTypeFromJSON(json: any): FolioTypeNameInfoType {
    return FolioTypeNameInfoTypeFromJSONTyped(json, false);
}

export function FolioTypeNameInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioTypeNameInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'folioTypeName': !exists(json, 'folioTypeName') ? undefined : json['folioTypeName'],
        'folioReportName': !exists(json, 'folioReportName') ? undefined : json['folioReportName'],
        'folioReportModuleId': !exists(json, 'folioReportModuleId') ? undefined : UniqueIDTypeFromJSON(json['folioReportModuleId']),
        'folioLanguageCode': !exists(json, 'folioLanguageCode') ? undefined : json['folioLanguageCode'],
    };
}

export function FolioTypeNameInfoTypeToJSON(value?: FolioTypeNameInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'folioTypeName': value.folioTypeName,
        'folioReportName': value.folioReportName,
        'folioReportModuleId': UniqueIDTypeToJSON(value.folioReportModuleId),
        'folioLanguageCode': value.folioLanguageCode,
    };
}

