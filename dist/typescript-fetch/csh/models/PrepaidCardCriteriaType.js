"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepaidCardCriteriaTypeToJSON = exports.PrepaidCardCriteriaTypeFromJSONTyped = exports.PrepaidCardCriteriaTypeFromJSON = exports.instanceOfPrepaidCardCriteriaType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PrepaidCardDetailsType_1 = require("./PrepaidCardDetailsType");
const ProfileId_1 = require("./ProfileId");
const ReservationId_1 = require("./ReservationId");
const SaleCriteriaType_1 = require("./SaleCriteriaType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the PrepaidCardCriteriaType interface.
 */
function instanceOfPrepaidCardCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPrepaidCardCriteriaType = instanceOfPrepaidCardCriteriaType;
function PrepaidCardCriteriaTypeFromJSON(json) {
    return PrepaidCardCriteriaTypeFromJSONTyped(json, false);
}
exports.PrepaidCardCriteriaTypeFromJSON = PrepaidCardCriteriaTypeFromJSON;
function PrepaidCardCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'cardDetails': !(0, runtime_1.exists)(json, 'cardDetails') ? undefined : (0, PrepaidCardDetailsType_1.PrepaidCardDetailsTypeFromJSON)(json['cardDetails']),
        'cardNo': !(0, runtime_1.exists)(json, 'cardNo') ? undefined : json['cardNo'],
        'cardNumberMasked': !(0, runtime_1.exists)(json, 'cardNumberMasked') ? undefined : json['cardNumberMasked'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'firstName': !(0, runtime_1.exists)(json, 'firstName') ? undefined : json['firstName'],
        'giftCard': !(0, runtime_1.exists)(json, 'giftCard') ? undefined : json['giftCard'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['interfaceId']),
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'pinCode': !(0, runtime_1.exists)(json, 'pinCode') ? undefined : json['pinCode'],
        'postChargeToRoom': !(0, runtime_1.exists)(json, 'postChargeToRoom') ? undefined : json['postChargeToRoom'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'purgeDate': !(0, runtime_1.exists)(json, 'purgeDate') ? undefined : json['purgeDate'],
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'saleCriteria': !(0, runtime_1.exists)(json, 'saleCriteria') ? undefined : (0, SaleCriteriaType_1.SaleCriteriaTypeFromJSON)(json['saleCriteria']),
        'vendorInterfaceID': !(0, runtime_1.exists)(json, 'vendorInterfaceID') ? undefined : json['vendorInterfaceID'],
    };
}
exports.PrepaidCardCriteriaTypeFromJSONTyped = PrepaidCardCriteriaTypeFromJSONTyped;
function PrepaidCardCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'cardDetails': (0, PrepaidCardDetailsType_1.PrepaidCardDetailsTypeToJSON)(value.cardDetails),
        'cardNo': value.cardNo,
        'cardNumberMasked': value.cardNumberMasked,
        'cashierId': value.cashierId,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'firstName': value.firstName,
        'giftCard': value.giftCard,
        'hotelId': value.hotelId,
        'interfaceId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.interfaceId),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'name': value.name,
        'pinCode': value.pinCode,
        'postChargeToRoom': value.postChargeToRoom,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'purgeDate': value.purgeDate,
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'saleCriteria': (0, SaleCriteriaType_1.SaleCriteriaTypeToJSON)(value.saleCriteria),
        'vendorInterfaceID': value.vendorInterfaceID,
    };
}
exports.PrepaidCardCriteriaTypeToJSON = PrepaidCardCriteriaTypeToJSON;
