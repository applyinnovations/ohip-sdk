/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CardAuthorizationTransactionType } from './CardAuthorizationTransactionType';
import type { CashieringPaymentMethodType } from './CashieringPaymentMethodType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { ProfileId } from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Contains the credit card criteria for authorization.
 * @export
 * @interface CCAuthorizationCriteriaType
 */
export interface CCAuthorizationCriteriaType {
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CCAuthorizationCriteriaType
     */
    amount?: CurrencyAmountType;
    /**
     * Session Id registered in the WebSocket component for asynchronous Credit Card handling.
     * @type {string}
     * @memberof CCAuthorizationCriteriaType
     */
    ccRequestId?: string;
    /**
     * Flag to indicate if the approval amount should be calculated before authorization. If this is true and if the amount is 0 the approval amount will be calculated based on the rules.
     * @type {boolean}
     * @memberof CCAuthorizationCriteriaType
     */
    evaluateApprovalAmount?: boolean;
    /**
     * The folio window where this authorization is applied.
     * @type {number}
     * @memberof CCAuthorizationCriteriaType
     */
    folioView?: number;
    /**
     * Identifies the hotel code to authorize a credit card amount for.
     * @type {string}
     * @memberof CCAuthorizationCriteriaType
     */
    hotelId?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CCAuthorizationCriteriaType
     */
    incidentalAmount?: CurrencyAmountType;
    /**
     *
     * @type {CashieringPaymentMethodType}
     * @memberof CCAuthorizationCriteriaType
     */
    payment?: CashieringPaymentMethodType;
    /**
     *
     * @type {ProfileId}
     * @memberof CCAuthorizationCriteriaType
     */
    profileId?: ProfileId;
    /**
     *
     * @type {UniqueIDType}
     * @memberof CCAuthorizationCriteriaType
     */
    reservationId?: UniqueIDType;
    /**
     *
     * @type {CardAuthorizationTransactionType}
     * @memberof CCAuthorizationCriteriaType
     */
    sourceOfAuthorization?: CardAuthorizationTransactionType;
    /**
     * Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected.
     * @type {string}
     * @memberof CCAuthorizationCriteriaType
     */
    terminalId?: string;
    /**
     * Update the card details on the reservations for Chip and Pin Authorizations.
     * @type {boolean}
     * @memberof CCAuthorizationCriteriaType
     */
    updateReservation?: boolean;
}
/**
 * Check if a given object implements the CCAuthorizationCriteriaType interface.
 */
export declare function instanceOfCCAuthorizationCriteriaType(value: object): boolean;
export declare function CCAuthorizationCriteriaTypeFromJSON(json: any): CCAuthorizationCriteriaType;
export declare function CCAuthorizationCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CCAuthorizationCriteriaType;
export declare function CCAuthorizationCriteriaTypeToJSON(value?: CCAuthorizationCriteriaType | null): any;
