"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResCommunicationTypeTelephonesToJSON = exports.ResCommunicationTypeTelephonesFromJSONTyped = exports.ResCommunicationTypeTelephonesFromJSON = exports.instanceOfResCommunicationTypeTelephones = void 0;
const runtime_1 = require("../runtime");
const TelephoneInfoType_1 = require("./TelephoneInfoType");
/**
 * Check if a given object implements the ResCommunicationTypeTelephones interface.
 */
function instanceOfResCommunicationTypeTelephones(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfResCommunicationTypeTelephones = instanceOfResCommunicationTypeTelephones;
function ResCommunicationTypeTelephonesFromJSON(json) {
    return ResCommunicationTypeTelephonesFromJSONTyped(json, false);
}
exports.ResCommunicationTypeTelephonesFromJSON = ResCommunicationTypeTelephonesFromJSON;
function ResCommunicationTypeTelephonesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'telephoneInfo': !(0, runtime_1.exists)(json, 'telephoneInfo') ? undefined : (json['telephoneInfo'].map(TelephoneInfoType_1.TelephoneInfoTypeFromJSON)),
        'hasMore': !(0, runtime_1.exists)(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !(0, runtime_1.exists)(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !(0, runtime_1.exists)(json, 'count') ? undefined : json['count'],
    };
}
exports.ResCommunicationTypeTelephonesFromJSONTyped = ResCommunicationTypeTelephonesFromJSONTyped;
function ResCommunicationTypeTelephonesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'telephoneInfo': value.telephoneInfo === undefined ? undefined : (value.telephoneInfo.map(TelephoneInfoType_1.TelephoneInfoTypeToJSON)),
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
    };
}
exports.ResCommunicationTypeTelephonesToJSON = ResCommunicationTypeTelephonesToJSON;
