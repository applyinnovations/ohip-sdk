/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PayeeInfoType } from './PayeeInfoType';
import {
    PayeeInfoTypeFromJSON,
    PayeeInfoTypeFromJSONTyped,
    PayeeInfoTypeToJSON,
} from './PayeeInfoType';
import type { ReceiptType } from './ReceiptType';
import {
    ReceiptTypeFromJSON,
    ReceiptTypeFromJSONTyped,
    ReceiptTypeToJSON,
} from './ReceiptType';

/**
 * Contains Receipt Details.
 * @export
 * @interface ReceiptSummaryType
 */
export interface ReceiptSummaryType {
    /**
     * 
     * @type {PayeeInfoType}
     * @memberof ReceiptSummaryType
     */
    payeeInfo?: PayeeInfoType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ReceiptSummaryType
     */
    receiptAmount?: CurrencyAmountType;
    /**
     * Custom Number.
     * @type {Array<string>}
     * @memberof ReceiptSummaryType
     */
    customNumbers?: Array<string>;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof ReceiptSummaryType
     */
    start?: Date;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof ReceiptSummaryType
     */
    end?: Date;
    /**
     * Receipt Number.
     * @type {number}
     * @memberof ReceiptSummaryType
     */
    receiptNo?: number;
    /**
     * Receipt Type Description.
     * @type {string}
     * @memberof ReceiptSummaryType
     */
    receiptTypeDescription?: string;
    /**
     * Transaction Number.
     * @type {string}
     * @memberof ReceiptSummaryType
     */
    transactionNo?: string;
    /**
     * 
     * @type {ReceiptType}
     * @memberof ReceiptSummaryType
     */
    receiptType?: ReceiptType;
    /**
     * Tax Invoice Number of the Receipt.
     * @type {string}
     * @memberof ReceiptSummaryType
     */
    taxInvoice?: string;
}

/**
 * Check if a given object implements the ReceiptSummaryType interface.
 */
export function instanceOfReceiptSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReceiptSummaryTypeFromJSON(json: any): ReceiptSummaryType {
    return ReceiptSummaryTypeFromJSONTyped(json, false);
}

export function ReceiptSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'payeeInfo': !exists(json, 'payeeInfo') ? undefined : PayeeInfoTypeFromJSON(json['payeeInfo']),
        'receiptAmount': !exists(json, 'receiptAmount') ? undefined : CurrencyAmountTypeFromJSON(json['receiptAmount']),
        'customNumbers': !exists(json, 'customNumbers') ? undefined : json['customNumbers'],
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'receiptNo': !exists(json, 'receiptNo') ? undefined : json['receiptNo'],
        'receiptTypeDescription': !exists(json, 'receiptTypeDescription') ? undefined : json['receiptTypeDescription'],
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
        'receiptType': !exists(json, 'receiptType') ? undefined : ReceiptTypeFromJSON(json['receiptType']),
        'taxInvoice': !exists(json, 'taxInvoice') ? undefined : json['taxInvoice'],
    };
}

export function ReceiptSummaryTypeToJSON(value?: ReceiptSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payeeInfo': PayeeInfoTypeToJSON(value.payeeInfo),
        'receiptAmount': CurrencyAmountTypeToJSON(value.receiptAmount),
        'customNumbers': value.customNumbers,
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0,10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0,10)),
        'receiptNo': value.receiptNo,
        'receiptTypeDescription': value.receiptTypeDescription,
        'transactionNo': value.transactionNo,
        'receiptType': ReceiptTypeToJSON(value.receiptType),
        'taxInvoice': value.taxInvoice,
    };
}

