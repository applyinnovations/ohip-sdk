/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { FolioWindowType } from './FolioWindowType';
import type { ReservationInfoType } from './ReservationInfoType';
/**
 * Each folio will include summary and/or detailed information.
 * @export
 * @interface ReservationFolioInfoType
 */
export interface ReservationFolioInfoType {
    /**
     *
     * @type {ReservationInfoType}
     * @memberof ReservationFolioInfoType
     */
    reservationInfo?: ReservationInfoType;
    /**
     * The Folio Window information of the reservation.
     * @type {Array<FolioWindowType>}
     * @memberof ReservationFolioInfoType
     */
    folioWindows?: Array<FolioWindowType>;
    /**
     * Folio History element contains all generated folios
     * @type {Array<FolioWindowType>}
     * @memberof ReservationFolioInfoType
     */
    folioHistory?: Array<FolioWindowType>;
    /**
     * Computed flag specifying that the reservation has met the criteria which allows charges to be posted after being checked-out.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    postStayChargeAllowed?: boolean;
    /**
     * Computed flag specifying that the reservation has met the criteria which allows charges to be posted before checking-in.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    preStayChargeAllowed?: boolean;
    /**
     * Flag specifying that the reservation can be auto check in when Auto Checkin Pseudo Room parameter is active.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    autoCheckInAllowed?: boolean;
    /**
     * Flag specifying that the reservation can post if the reservation status was No Show or Cancelled.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    postToNoShowCancelAllowed?: boolean;
    /**
     * Stamp Duty posted in at least one folio window.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    stampDutyExists?: boolean;
    /**
     * Flag to check if the room and tax are already posted.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    roomAndTaxPosted?: boolean;
    /**
     * Flag applicable only when ALLOW_DEFERRED_TAXES is ON for the resort. Set to true only when there are any unsettled transactions on any of the windows with the deferred tax entry posted. Set to false only when there are unsettled transactions on any of the windows without deferred tax entry.
     * @type {string}
     * @memberof ReservationFolioInfoType
     */
    deferredTaxesPosted?: string;
    /**
     * Flag indicating if a folio window contains a correction trx. A correction trx indicates a pending required fiscal action over the folio window. Applicable only in Greece.
     * @type {boolean}
     * @memberof ReservationFolioInfoType
     */
    correctionTrxExists?: boolean;
}
/**
 * Check if a given object implements the ReservationFolioInfoType interface.
 */
export declare function instanceOfReservationFolioInfoType(value: object): boolean;
export declare function ReservationFolioInfoTypeFromJSON(json: any): ReservationFolioInfoType;
export declare function ReservationFolioInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationFolioInfoType;
export declare function ReservationFolioInfoTypeToJSON(value?: ReservationFolioInfoType | null): any;
