"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationChargesInBatchInfoTypeToJSON = exports.ReservationChargesInBatchInfoTypeFromJSONTyped = exports.ReservationChargesInBatchInfoTypeFromJSON = exports.instanceOfReservationChargesInBatchInfoType = void 0;
const runtime_1 = require("../runtime");
const ErrorsType_1 = require("./ErrorsType");
const ReservationId_1 = require("./ReservationId");
const WarningsType_1 = require("./WarningsType");
/**
 * Check if a given object implements the ReservationChargesInBatchInfoType interface.
 */
function instanceOfReservationChargesInBatchInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationChargesInBatchInfoType = instanceOfReservationChargesInBatchInfoType;
function ReservationChargesInBatchInfoTypeFromJSON(json) {
    return ReservationChargesInBatchInfoTypeFromJSONTyped(json, false);
}
exports.ReservationChargesInBatchInfoTypeFromJSON = ReservationChargesInBatchInfoTypeFromJSON;
function ReservationChargesInBatchInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'arrivalDate': !(0, runtime_1.exists)(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !(0, runtime_1.exists)(json, 'departureDate') ? undefined : json['departureDate'],
        'errors': !(0, runtime_1.exists)(json, 'errors') ? undefined : (0, ErrorsType_1.ErrorsTypeFromJSON)(json['errors']),
        'guestName': !(0, runtime_1.exists)(json, 'guestName') ? undefined : json['guestName'],
        'postingAllowed': !(0, runtime_1.exists)(json, 'postingAllowed') ? undefined : json['postingAllowed'],
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'success': !(0, runtime_1.exists)(json, 'success') ? undefined : json['success'],
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (0, WarningsType_1.WarningsTypeFromJSON)(json['warnings']),
    };
}
exports.ReservationChargesInBatchInfoTypeFromJSONTyped = ReservationChargesInBatchInfoTypeFromJSONTyped;
function ReservationChargesInBatchInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
        'errors': (0, ErrorsType_1.ErrorsTypeToJSON)(value.errors),
        'guestName': value.guestName,
        'postingAllowed': value.postingAllowed,
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'roomId': value.roomId,
        'success': value.success,
        'warnings': (0, WarningsType_1.WarningsTypeToJSON)(value.warnings),
    };
}
exports.ReservationChargesInBatchInfoTypeToJSON = ReservationChargesInBatchInfoTypeToJSON;
