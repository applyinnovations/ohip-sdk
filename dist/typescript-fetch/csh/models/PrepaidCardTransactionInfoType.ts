/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PrepaidCardTransactionSourceType } from './PrepaidCardTransactionSourceType';
import {
    PrepaidCardTransactionSourceTypeFromJSON,
    PrepaidCardTransactionSourceTypeFromJSONTyped,
    PrepaidCardTransactionSourceTypeToJSON,
} from './PrepaidCardTransactionSourceType';
import type { PrepaidCardTrxTypeType } from './PrepaidCardTrxTypeType';
import {
    PrepaidCardTrxTypeTypeFromJSON,
    PrepaidCardTrxTypeTypeFromJSONTyped,
    PrepaidCardTrxTypeTypeToJSON,
} from './PrepaidCardTrxTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Prepaid Card Transactions
 * @export
 * @interface PrepaidCardTransactionInfoType
 */
export interface PrepaidCardTransactionInfoType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardTransactionInfoType
     */
    amount?: CurrencyAmountType;
    /**
     * 
     * @type {PrepaidCardTrxTypeType}
     * @memberof PrepaidCardTransactionInfoType
     */
    type?: PrepaidCardTrxTypeType;
    /**
     * Prepaid card transaction date.
     * @type {Date}
     * @memberof PrepaidCardTransactionInfoType
     */
    date?: Date;
    /**
     * Opera transaction number.
     * @type {number}
     * @memberof PrepaidCardTransactionInfoType
     */
    transactionNo?: number;
    /**
     * Vendor transaction number.
     * @type {string}
     * @memberof PrepaidCardTransactionInfoType
     */
    vendorTransactionNo?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof PrepaidCardTransactionInfoType
     */
    profileId?: UniqueIDType;
    /**
     * 
     * @type {PrepaidCardTransactionSourceType}
     * @memberof PrepaidCardTransactionInfoType
     */
    source?: PrepaidCardTransactionSourceType;
    /**
     * Indicate if the transaction is cancellable or not.
     * @type {boolean}
     * @memberof PrepaidCardTransactionInfoType
     */
    cancellable?: boolean;
}

/**
 * Check if a given object implements the PrepaidCardTransactionInfoType interface.
 */
export function instanceOfPrepaidCardTransactionInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrepaidCardTransactionInfoTypeFromJSON(json: any): PrepaidCardTransactionInfoType {
    return PrepaidCardTransactionInfoTypeFromJSONTyped(json, false);
}

export function PrepaidCardTransactionInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrepaidCardTransactionInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'type': !exists(json, 'type') ? undefined : PrepaidCardTrxTypeTypeFromJSON(json['type']),
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
        'vendorTransactionNo': !exists(json, 'vendorTransactionNo') ? undefined : json['vendorTransactionNo'],
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'source': !exists(json, 'source') ? undefined : PrepaidCardTransactionSourceTypeFromJSON(json['source']),
        'cancellable': !exists(json, 'cancellable') ? undefined : json['cancellable'],
    };
}

export function PrepaidCardTransactionInfoTypeToJSON(value?: PrepaidCardTransactionInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'type': PrepaidCardTrxTypeTypeToJSON(value.type),
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
        'transactionNo': value.transactionNo,
        'vendorTransactionNo': value.vendorTransactionNo,
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'source': PrepaidCardTransactionSourceTypeToJSON(value.source),
        'cancellable': value.cancellable,
    };
}

