/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { DetailPostingType } from './DetailPostingType';
import {
    DetailPostingTypeFromJSON,
    DetailPostingTypeFromJSONTyped,
    DetailPostingTypeToJSON,
} from './DetailPostingType';
import type { TrxInfoType } from './TrxInfoType';
import {
    TrxInfoTypeFromJSON,
    TrxInfoTypeFromJSONTyped,
    TrxInfoTypeToJSON,
} from './TrxInfoType';

/**
 * Collection of Reservations and their information.
 * @export
 * @interface FinancialPostingsType
 */
export interface FinancialPostingsType {
    /**
     * Details of the transaction(Posting).
     * @type {Array<DetailPostingType>}
     * @memberof FinancialPostingsType
     */
    postings?: Array<DetailPostingType>;
    /**
     * List of Transaction codes info.
     * @type {Array<TrxInfoType>}
     * @memberof FinancialPostingsType
     */
    transactionCodes?: Array<TrxInfoType>;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalDebit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalCredit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    overallTotal?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalForAllPages?: CurrencyAmountType;
    /**
     * Indicates the number of journal entries.
     * @type {number}
     * @memberof FinancialPostingsType
     */
    totalEntriesCount?: number;
}

/**
 * Check if a given object implements the FinancialPostingsType interface.
 */
export function instanceOfFinancialPostingsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FinancialPostingsTypeFromJSON(json: any): FinancialPostingsType {
    return FinancialPostingsTypeFromJSONTyped(json, false);
}

export function FinancialPostingsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinancialPostingsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'postings': !exists(json, 'postings') ? undefined : ((json['postings'] as Array<any>).map(DetailPostingTypeFromJSON)),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(TrxInfoTypeFromJSON)),
        'totalDebit': !exists(json, 'totalDebit') ? undefined : CurrencyAmountTypeFromJSON(json['totalDebit']),
        'totalCredit': !exists(json, 'totalCredit') ? undefined : CurrencyAmountTypeFromJSON(json['totalCredit']),
        'overallTotal': !exists(json, 'overallTotal') ? undefined : CurrencyAmountTypeFromJSON(json['overallTotal']),
        'totalForAllPages': !exists(json, 'totalForAllPages') ? undefined : CurrencyAmountTypeFromJSON(json['totalForAllPages']),
        'totalEntriesCount': !exists(json, 'totalEntriesCount') ? undefined : json['totalEntriesCount'],
    };
}

export function FinancialPostingsTypeToJSON(value?: FinancialPostingsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'postings': value.postings === undefined ? undefined : ((value.postings as Array<any>).map(DetailPostingTypeToJSON)),
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(TrxInfoTypeToJSON)),
        'totalDebit': CurrencyAmountTypeToJSON(value.totalDebit),
        'totalCredit': CurrencyAmountTypeToJSON(value.totalCredit),
        'overallTotal': CurrencyAmountTypeToJSON(value.overallTotal),
        'totalForAllPages': CurrencyAmountTypeToJSON(value.totalForAllPages),
        'totalEntriesCount': value.totalEntriesCount,
    };
}

