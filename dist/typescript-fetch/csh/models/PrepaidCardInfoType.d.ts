/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { PrepaidCardTransactionInfoType } from './PrepaidCardTransactionInfoType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Detailed information about the prepaid card.
 * @export
 * @interface PrepaidCardInfoType
 */
export interface PrepaidCardInfoType {
    /**
     * Hotel context for the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    hotelId?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof PrepaidCardInfoType
     */
    reservationId?: UniqueIDType;
    /**
     * Prepaid card number.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    cardNo?: string;
    /**
     * Masked Prepaid card / account number.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    cardNumberMasked?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof PrepaidCardInfoType
     */
    interfaceId?: UniqueIDType;
    /**
     * Initial Load Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    initialLoadDate?: string;
    /**
     * Issue Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    issueDate?: string;
    /**
     * Validity of the prepaid card amount.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    validUntil?: string;
    /**
     * Expiry Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    expiryDate?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    initialCredit?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    totalDebit?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    totalCredit?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    balance?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    availableCashoutAmount?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    reservedAmount?: CurrencyAmountType;
    /**
     * Prepaid card transaction details.
     * @type {Array<PrepaidCardTransactionInfoType>}
     * @memberof PrepaidCardInfoType
     */
    prepaidCardTransactions?: Array<PrepaidCardTransactionInfoType>;
    /**
     * Indicate if vendor transactions are included on the transactions list.
     * @type {boolean}
     * @memberof PrepaidCardInfoType
     */
    vendorTransactionsActive?: boolean;
    /**
     * Indicate if opera transactions are included on the transactions list.
     * @type {boolean}
     * @memberof PrepaidCardInfoType
     */
    operaTransactionsActive?: boolean;
    /**
     * Indicates a gift card type.
     * @type {boolean}
     * @memberof PrepaidCardInfoType
     */
    giftCard?: boolean;
}
/**
 * Check if a given object implements the PrepaidCardInfoType interface.
 */
export declare function instanceOfPrepaidCardInfoType(value: object): boolean;
export declare function PrepaidCardInfoTypeFromJSON(json: any): PrepaidCardInfoType;
export declare function PrepaidCardInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrepaidCardInfoType;
export declare function PrepaidCardInfoTypeToJSON(value?: PrepaidCardInfoType | null): any;
