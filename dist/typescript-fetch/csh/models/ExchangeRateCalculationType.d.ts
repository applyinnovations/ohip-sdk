/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { CurrencyExchangeType } from './CurrencyExchangeType';
import type { ExchangeRateCalculationTaxType } from './ExchangeRateCalculationTaxType';
/**
 * Currency conversion calculation type.
 * @export
 * @interface ExchangeRateCalculationType
 */
export interface ExchangeRateCalculationType {
    /**
     * Property code where the currency is being converted.
     * @type {string}
     * @memberof ExchangeRateCalculationType
     */
    hotelId?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ExchangeRateCalculationType
     */
    fromCurrencyAmount?: CurrencyAmountType;
    /**
     * Date on which exchange rate was obtained.
     * @type {string}
     * @memberof ExchangeRateCalculationType
     */
    exchangeDate?: string;
    /**
     * Buy or Sell for calculation.
     * @type {boolean}
     * @memberof ExchangeRateCalculationType
     */
    sell?: boolean;
    /**
     * Exchange references.
     * @type {string}
     * @memberof ExchangeRateCalculationType
     */
    exchangeReference?: string;
    /**
     *
     * @type {CurrencyExchangeType}
     * @memberof ExchangeRateCalculationType
     */
    exchangeType?: CurrencyExchangeType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ExchangeRateCalculationType
     */
    toCurrencyAmount?: CurrencyAmountType;
    /**
     * Date on which the exchange is to take place.
     * @type {string}
     * @memberof ExchangeRateCalculationType
     */
    date?: string;
    /**
     * Buy commission for the foreign currency.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    buyCommission?: number;
    /**
     * Amount by which the exchange was rounded.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    roundingAmount?: number;
    /**
     * Pure calculated amount.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    calculatedAmount?: number;
    /**
     * Exchange Rate.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    exchangeRate?: number;
    /**
     * Exchange rate against Euro.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    euroExchangeRate?: number;
    /**
     * Amount in Euro for the exchange.
     * @type {number}
     * @memberof ExchangeRateCalculationType
     */
    euroAmount?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ExchangeRateCalculationType
     */
    serviceTax?: CurrencyAmountType;
    /**
     * Exchange Information - text presentation of the exchange operation including formula, buy rate, etc.
     * @type {string}
     * @memberof ExchangeRateCalculationType
     */
    exchangeInformation?: string;
    /**
     *
     * @type {ExchangeRateCalculationTaxType}
     * @memberof ExchangeRateCalculationType
     */
    exchangeRateCalculationTax?: ExchangeRateCalculationTaxType;
}
/**
 * Check if a given object implements the ExchangeRateCalculationType interface.
 */
export declare function instanceOfExchangeRateCalculationType(value: object): boolean;
export declare function ExchangeRateCalculationTypeFromJSON(json: any): ExchangeRateCalculationType;
export declare function ExchangeRateCalculationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeRateCalculationType;
export declare function ExchangeRateCalculationTypeToJSON(value?: ExchangeRateCalculationType | null): any;
