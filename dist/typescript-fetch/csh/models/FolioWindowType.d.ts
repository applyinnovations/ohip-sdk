/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CompAccountingType } from './CompAccountingType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { FiscalFolioInstruction } from './FiscalFolioInstruction';
import type { FiscalResponseType } from './FiscalResponseType';
import type { FolioSplitInfoType } from './FolioSplitInfoType';
import type { FolioType } from './FolioType';
import type { FolioWindowExchangeAmounts } from './FolioWindowExchangeAmounts';
import type { PayeeInfoType } from './PayeeInfoType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import type { TransactionServiceTypeType } from './TransactionServiceTypeType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * A folio window view which holds the set of folios for a reservation.
 * @export
 * @interface FolioWindowType
 */
export interface FolioWindowType {
    /**
     * Flag to indicate if an Acknowledgement Receipt is generated for the folio window. Applicable only in the Philippines.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    ackBIRReceiptExists?: boolean;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    balance?: CurrencyAmountType;
    /**
     *
     * @type {CompAccountingType}
     * @memberof FolioWindowType
     */
    compAccountingInfo?: CompAccountingType;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof FolioWindowType
     */
    count?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitBalance?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitPayment?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitRevenue?: CurrencyAmountType;
    /**
     * Flag to notify if the current folio has any postings.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    emptyFolio?: boolean;
    /**
     * Flag to notify if the entire window has any postings.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    emptyWindow?: boolean;
    /**
     *
     * @type {FolioWindowExchangeAmounts}
     * @memberof FolioWindowType
     */
    exchange?: FolioWindowExchangeAmounts;
    /**
     *
     * @type {FiscalFolioInstruction}
     * @memberof FolioWindowType
     */
    fiscalFolioInstruction?: FiscalFolioInstruction;
    /**
     *
     * @type {FiscalResponseType}
     * @memberof FolioWindowType
     */
    fiscalResponseType?: FiscalResponseType;
    /**
     * Contains the folio split posting information.
     * @type {Array<FolioSplitInfoType>}
     * @memberof FolioWindowType
     */
    folioSplitInfo?: Array<FolioSplitInfoType>;
    /**
     *
     * @type {number}
     * @memberof FolioWindowType
     */
    folioWindowNo?: number;
    /**
     *
     * @type {Array<FolioType>}
     * @memberof FolioWindowType
     */
    folios?: Array<FolioType>;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    hasMore?: boolean;
    /**
     * Internal window ID which is unique to the reservation. This ID can only be used for reference.
     * @type {string}
     * @memberof FolioWindowType
     */
    internalFolioWindowID?: string;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof FolioWindowType
     */
    limit?: number;
    /**
     * Flag to indicate if an Official Receipt is generated for the folio window. Applicable only in the Philippines.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    officialBIRReceiptExists?: boolean;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof FolioWindowType
     */
    offset?: number;
    /**
     *
     * @type {PayeeInfoType}
     * @memberof FolioWindowType
     */
    payeeInfo?: PayeeInfoType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    payment?: CurrencyAmountType;
    /**
     *
     * @type {ReservationPaymentMethodType}
     * @memberof FolioWindowType
     */
    paymentMethod?: ReservationPaymentMethodType;
    /**
     * The receipt number of the transaction, if there is a receipt generated.
     * @type {number}
     * @memberof FolioWindowType
     */
    receiptNo?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    revenue?: CurrencyAmountType;
    /**
     * Details about service type postings.
     * @type {Array<TransactionServiceTypeType>}
     * @memberof FolioWindowType
     */
    serviceTypeInfo?: Array<TransactionServiceTypeType>;
    /**
     * This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    simpleFolio?: boolean;
    /**
     *
     * @type {UniqueIDType}
     * @memberof FolioWindowType
     */
    storedFolioId?: UniqueIDType;
    /**
     * Name of the Stored Folio.
     * @type {string}
     * @memberof FolioWindowType
     */
    storedFolioName?: string;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof FolioWindowType
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof FolioWindowType
     */
    totalResults?: number;
    /**
     * Unique Transaction Identifier.
     * @type {number}
     * @memberof FolioWindowType
     */
    transactionNo?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    vATOffsetAmount?: CurrencyAmountType;
}
/**
 * Check if a given object implements the FolioWindowType interface.
 */
export declare function instanceOfFolioWindowType(value: object): boolean;
export declare function FolioWindowTypeFromJSON(json: any): FolioWindowType;
export declare function FolioWindowTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioWindowType;
export declare function FolioWindowTypeToJSON(value?: FolioWindowType | null): any;
