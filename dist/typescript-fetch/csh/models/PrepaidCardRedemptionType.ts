/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Redemption information.
 * @export
 * @interface PrepaidCardRedemptionType
 */
export interface PrepaidCardRedemptionType {
    /**
     * Prepaid card number.
     * @type {string}
     * @memberof PrepaidCardRedemptionType
     */
    cardNo?: string;
    /**
     * Prepaid card number.
     * @type {string}
     * @memberof PrepaidCardRedemptionType
     */
    pin?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof PrepaidCardRedemptionType
     */
    interfaceId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardRedemptionType
     */
    amount?: CurrencyAmountType;
    /**
     * The associated redemption transaction code.
     * @type {string}
     * @memberof PrepaidCardRedemptionType
     */
    transactionCode?: string;
    /**
     * Additional information regarding the redemption.
     * @type {string}
     * @memberof PrepaidCardRedemptionType
     */
    reference?: string;
}

/**
 * Check if a given object implements the PrepaidCardRedemptionType interface.
 */
export function instanceOfPrepaidCardRedemptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrepaidCardRedemptionTypeFromJSON(json: any): PrepaidCardRedemptionType {
    return PrepaidCardRedemptionTypeFromJSONTyped(json, false);
}

export function PrepaidCardRedemptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrepaidCardRedemptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cardNo': !exists(json, 'cardNo') ? undefined : json['cardNo'],
        'pin': !exists(json, 'pin') ? undefined : json['pin'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
    };
}

export function PrepaidCardRedemptionTypeToJSON(value?: PrepaidCardRedemptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cardNo': value.cardNo,
        'pin': value.pin,
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'transactionCode': value.transactionCode,
        'reference': value.reference,
    };
}

