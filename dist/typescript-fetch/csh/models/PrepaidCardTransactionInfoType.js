"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepaidCardTransactionInfoTypeToJSON = exports.PrepaidCardTransactionInfoTypeFromJSONTyped = exports.PrepaidCardTransactionInfoTypeFromJSON = exports.instanceOfPrepaidCardTransactionInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PrepaidCardTransactionSourceType_1 = require("./PrepaidCardTransactionSourceType");
const PrepaidCardTrxTypeType_1 = require("./PrepaidCardTrxTypeType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the PrepaidCardTransactionInfoType interface.
 */
function instanceOfPrepaidCardTransactionInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPrepaidCardTransactionInfoType = instanceOfPrepaidCardTransactionInfoType;
function PrepaidCardTransactionInfoTypeFromJSON(json) {
    return PrepaidCardTransactionInfoTypeFromJSONTyped(json, false);
}
exports.PrepaidCardTransactionInfoTypeFromJSON = PrepaidCardTransactionInfoTypeFromJSON;
function PrepaidCardTransactionInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, PrepaidCardTrxTypeType_1.PrepaidCardTrxTypeTypeFromJSON)(json['type']),
        'date': !(0, runtime_1.exists)(json, 'date') ? undefined : json['date'],
        'transactionNo': !(0, runtime_1.exists)(json, 'transactionNo') ? undefined : json['transactionNo'],
        'vendorTransactionNo': !(0, runtime_1.exists)(json, 'vendorTransactionNo') ? undefined : json['vendorTransactionNo'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['profileId']),
        'source': !(0, runtime_1.exists)(json, 'source') ? undefined : (0, PrepaidCardTransactionSourceType_1.PrepaidCardTransactionSourceTypeFromJSON)(json['source']),
        'cancellable': !(0, runtime_1.exists)(json, 'cancellable') ? undefined : json['cancellable'],
    };
}
exports.PrepaidCardTransactionInfoTypeFromJSONTyped = PrepaidCardTransactionInfoTypeFromJSONTyped;
function PrepaidCardTransactionInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'type': (0, PrepaidCardTrxTypeType_1.PrepaidCardTrxTypeTypeToJSON)(value.type),
        'date': value.date,
        'transactionNo': value.transactionNo,
        'vendorTransactionNo': value.vendorTransactionNo,
        'profileId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.profileId),
        'source': (0, PrepaidCardTransactionSourceType_1.PrepaidCardTransactionSourceTypeToJSON)(value.source),
        'cancellable': value.cancellable,
    };
}
exports.PrepaidCardTransactionInfoTypeToJSON = PrepaidCardTransactionInfoTypeToJSON;
