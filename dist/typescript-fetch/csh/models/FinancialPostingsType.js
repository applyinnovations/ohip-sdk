"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinancialPostingsTypeToJSON = exports.FinancialPostingsTypeFromJSONTyped = exports.FinancialPostingsTypeFromJSON = exports.instanceOfFinancialPostingsType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const DetailPostingsType_1 = require("./DetailPostingsType");
const TrxCodesInfoType_1 = require("./TrxCodesInfoType");
/**
 * Check if a given object implements the FinancialPostingsType interface.
 */
function instanceOfFinancialPostingsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFinancialPostingsType = instanceOfFinancialPostingsType;
function FinancialPostingsTypeFromJSON(json) {
    return FinancialPostingsTypeFromJSONTyped(json, false);
}
exports.FinancialPostingsTypeFromJSON = FinancialPostingsTypeFromJSON;
function FinancialPostingsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'overallTotal': !(0, runtime_1.exists)(json, 'overallTotal') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['overallTotal']),
        'postings': !(0, runtime_1.exists)(json, 'postings') ? undefined : (0, DetailPostingsType_1.DetailPostingsTypeFromJSON)(json['postings']),
        'totalCredit': !(0, runtime_1.exists)(json, 'totalCredit') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalCredit']),
        'totalDebit': !(0, runtime_1.exists)(json, 'totalDebit') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalDebit']),
        'totalEntriesCount': !(0, runtime_1.exists)(json, 'totalEntriesCount') ? undefined : json['totalEntriesCount'],
        'totalForAllPages': !(0, runtime_1.exists)(json, 'totalForAllPages') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalForAllPages']),
        'transactionCodes': !(0, runtime_1.exists)(json, 'transactionCodes') ? undefined : (0, TrxCodesInfoType_1.TrxCodesInfoTypeFromJSON)(json['transactionCodes']),
    };
}
exports.FinancialPostingsTypeFromJSONTyped = FinancialPostingsTypeFromJSONTyped;
function FinancialPostingsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'overallTotal': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.overallTotal),
        'postings': (0, DetailPostingsType_1.DetailPostingsTypeToJSON)(value.postings),
        'totalCredit': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalCredit),
        'totalDebit': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalDebit),
        'totalEntriesCount': value.totalEntriesCount,
        'totalForAllPages': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalForAllPages),
        'transactionCodes': (0, TrxCodesInfoType_1.TrxCodesInfoTypeToJSON)(value.transactionCodes),
    };
}
exports.FinancialPostingsTypeToJSON = FinancialPostingsTypeToJSON;
