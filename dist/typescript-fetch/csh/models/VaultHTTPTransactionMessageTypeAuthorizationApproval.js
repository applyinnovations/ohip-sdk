"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON = exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped = exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON = exports.instanceOfVaultHTTPTransactionMessageTypeAuthorizationApproval = void 0;
const runtime_1 = require("../runtime");
const CardAuthorizationTransactionType_1 = require("./CardAuthorizationTransactionType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const ProfileId_1 = require("./ProfileId");
const ReservationPaymentMethodType_1 = require("./ReservationPaymentMethodType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the VaultHTTPTransactionMessageTypeAuthorizationApproval interface.
 */
function instanceOfVaultHTTPTransactionMessageTypeAuthorizationApproval(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfVaultHTTPTransactionMessageTypeAuthorizationApproval = instanceOfVaultHTTPTransactionMessageTypeAuthorizationApproval;
function VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON(json) {
    return VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped(json, false);
}
exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON = VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON;
function VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'approvalAmount': !(0, runtime_1.exists)(json, 'approvalAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['approvalAmount']),
        'approvalCode': !(0, runtime_1.exists)(json, 'approvalCode') ? undefined : json['approvalCode'],
        'authorizedPaymentRecord': !(0, runtime_1.exists)(json, 'authorizedPaymentRecord') ? undefined : (0, ReservationPaymentMethodType_1.ReservationPaymentMethodTypeFromJSON)(json['authorizedPaymentRecord']),
        'cardSwiped': !(0, runtime_1.exists)(json, 'cardSwiped') ? undefined : json['cardSwiped'],
        'originalAuthSequence': !(0, runtime_1.exists)(json, 'originalAuthSequence') ? undefined : json['originalAuthSequence'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'sourceOfAuthorization': !(0, runtime_1.exists)(json, 'sourceOfAuthorization') ? undefined : (0, CardAuthorizationTransactionType_1.CardAuthorizationTransactionTypeFromJSON)(json['sourceOfAuthorization']),
    };
}
exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped = VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped;
function VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'approvalAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.approvalAmount),
        'approvalCode': value.approvalCode,
        'authorizedPaymentRecord': (0, ReservationPaymentMethodType_1.ReservationPaymentMethodTypeToJSON)(value.authorizedPaymentRecord),
        'cardSwiped': value.cardSwiped,
        'originalAuthSequence': value.originalAuthSequence,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'sourceOfAuthorization': (0, CardAuthorizationTransactionType_1.CardAuthorizationTransactionTypeToJSON)(value.sourceOfAuthorization),
    };
}
exports.VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON = VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON;
