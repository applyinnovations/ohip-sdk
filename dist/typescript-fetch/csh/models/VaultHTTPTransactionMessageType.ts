/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { ErrorType } from './ErrorType';
import {
    ErrorTypeFromJSON,
    ErrorTypeFromJSONTyped,
    ErrorTypeToJSON,
} from './ErrorType';
import type { VaultHTTPTransactionMessageTypeAuthorizationApproval } from './VaultHTTPTransactionMessageTypeAuthorizationApproval';
import {
    VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON,
    VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped,
    VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON,
} from './VaultHTTPTransactionMessageTypeAuthorizationApproval';
import type { VaultHTTPTransactionType } from './VaultHTTPTransactionType';
import {
    VaultHTTPTransactionTypeFromJSON,
    VaultHTTPTransactionTypeFromJSONTyped,
    VaultHTTPTransactionTypeToJSON,
} from './VaultHTTPTransactionType';

/**
 * 
 * @export
 * @interface VaultHTTPTransactionMessageType
 */
export interface VaultHTTPTransactionMessageType {
    /**
     * 
     * @type {VaultHTTPTransactionMessageTypeAuthorizationApproval}
     * @memberof VaultHTTPTransactionMessageType
     */
    authorizationApproval?: VaultHTTPTransactionMessageTypeAuthorizationApproval;
    /**
     * The HTTP request entity content. The needs to use escape characters.
     * @type {string}
     * @memberof VaultHTTPTransactionMessageType
     */
    escapedRequestContent?: string;
    /**
     * The HTTP response entity content. The needs to use escape characters.
     * @type {string}
     * @memberof VaultHTTPTransactionMessageType
     */
    escapedResponseContent?: string;
    /**
     * 
     * @type {ErrorType}
     * @memberof VaultHTTPTransactionMessageType
     */
    hTTPError?: ErrorType;
    /**
     * 
     * @type {DateRangeType}
     * @memberof VaultHTTPTransactionMessageType
     */
    hTTPTransactionDuration?: DateRangeType;
    /**
     * The hotel context of the transaction.
     * @type {string}
     * @memberof VaultHTTPTransactionMessageType
     */
    hotelId?: string;
    /**
     * 
     * @type {VaultHTTPTransactionType}
     * @memberof VaultHTTPTransactionMessageType
     */
    type?: VaultHTTPTransactionType;
}

/**
 * Check if a given object implements the VaultHTTPTransactionMessageType interface.
 */
export function instanceOfVaultHTTPTransactionMessageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VaultHTTPTransactionMessageTypeFromJSON(json: any): VaultHTTPTransactionMessageType {
    return VaultHTTPTransactionMessageTypeFromJSONTyped(json, false);
}

export function VaultHTTPTransactionMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultHTTPTransactionMessageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationApproval': !exists(json, 'authorizationApproval') ? undefined : VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON(json['authorizationApproval']),
        'escapedRequestContent': !exists(json, 'escapedRequestContent') ? undefined : json['escapedRequestContent'],
        'escapedResponseContent': !exists(json, 'escapedResponseContent') ? undefined : json['escapedResponseContent'],
        'hTTPError': !exists(json, 'hTTPError') ? undefined : ErrorTypeFromJSON(json['hTTPError']),
        'hTTPTransactionDuration': !exists(json, 'hTTPTransactionDuration') ? undefined : DateRangeTypeFromJSON(json['hTTPTransactionDuration']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'type': !exists(json, 'type') ? undefined : VaultHTTPTransactionTypeFromJSON(json['type']),
    };
}

export function VaultHTTPTransactionMessageTypeToJSON(value?: VaultHTTPTransactionMessageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationApproval': VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON(value.authorizationApproval),
        'escapedRequestContent': value.escapedRequestContent,
        'escapedResponseContent': value.escapedResponseContent,
        'hTTPError': ErrorTypeToJSON(value.hTTPError),
        'hTTPTransactionDuration': DateRangeTypeToJSON(value.hTTPTransactionDuration),
        'hotelId': value.hotelId,
        'type': VaultHTTPTransactionTypeToJSON(value.type),
    };
}

