"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangeRateCalculationTaxTypeToJSON = exports.ExchangeRateCalculationTaxTypeFromJSONTyped = exports.ExchangeRateCalculationTaxTypeFromJSON = exports.instanceOfExchangeRateCalculationTaxType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const ExchangeRateTransactionGenerateTaxType_1 = require("./ExchangeRateTransactionGenerateTaxType");
/**
 * Check if a given object implements the ExchangeRateCalculationTaxType interface.
 */
function instanceOfExchangeRateCalculationTaxType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExchangeRateCalculationTaxType = instanceOfExchangeRateCalculationTaxType;
function ExchangeRateCalculationTaxTypeFromJSON(json) {
    return ExchangeRateCalculationTaxTypeFromJSONTyped(json, false);
}
exports.ExchangeRateCalculationTaxTypeFromJSON = ExchangeRateCalculationTaxTypeFromJSON;
function ExchangeRateCalculationTaxTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'percentageAppliedOn': !(0, runtime_1.exists)(json, 'percentageAppliedOn') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['percentageAppliedOn']),
        'baseAmount': !(0, runtime_1.exists)(json, 'baseAmount') ? undefined : json['baseAmount'],
        'percentage': !(0, runtime_1.exists)(json, 'percentage') ? undefined : json['percentage'],
        'minServiceTax': !(0, runtime_1.exists)(json, 'minServiceTax') ? undefined : json['minServiceTax'],
        'maxServiceTax': !(0, runtime_1.exists)(json, 'maxServiceTax') ? undefined : json['maxServiceTax'],
        'exchangeRateTransactionGenerateTaxes': !(0, runtime_1.exists)(json, 'exchangeRateTransactionGenerateTaxes') ? undefined : (json['exchangeRateTransactionGenerateTaxes'].map(ExchangeRateTransactionGenerateTaxType_1.ExchangeRateTransactionGenerateTaxTypeFromJSON)),
    };
}
exports.ExchangeRateCalculationTaxTypeFromJSONTyped = ExchangeRateCalculationTaxTypeFromJSONTyped;
function ExchangeRateCalculationTaxTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'percentageAppliedOn': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.percentageAppliedOn),
        'baseAmount': value.baseAmount,
        'percentage': value.percentage,
        'minServiceTax': value.minServiceTax,
        'maxServiceTax': value.maxServiceTax,
        'exchangeRateTransactionGenerateTaxes': value.exchangeRateTransactionGenerateTaxes === undefined ? undefined : (value.exchangeRateTransactionGenerateTaxes.map(ExchangeRateTransactionGenerateTaxType_1.ExchangeRateTransactionGenerateTaxTypeToJSON)),
    };
}
exports.ExchangeRateCalculationTaxTypeToJSON = ExchangeRateCalculationTaxTypeToJSON;
