/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CCSurchargeInfoType } from './CCSurchargeInfoType';
import {
    CCSurchargeInfoTypeFromJSON,
    CCSurchargeInfoTypeFromJSONTyped,
    CCSurchargeInfoTypeToJSON,
} from './CCSurchargeInfoType';
import type { CashieringPaymentMethodType } from './CashieringPaymentMethodType';
import {
    CashieringPaymentMethodTypeFromJSON,
    CashieringPaymentMethodTypeFromJSONTyped,
    CashieringPaymentMethodTypeToJSON,
} from './CashieringPaymentMethodType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Information regarding the Surcharge amount which will be applied to a payment.
 * @export
 * @interface CCSurchargeAmountType
 */
export interface CCSurchargeAmountType {
    /**
     * Property where the payment is being posted.
     * @type {string}
     * @memberof CCSurchargeAmountType
     */
    hotelId?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CCSurchargeAmountType
     */
    surchargeAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CCSurchargeInfoType}
     * @memberof CCSurchargeAmountType
     */
    surchargeInfo?: CCSurchargeInfoType;
    /**
     * 
     * @type {CashieringPaymentMethodType}
     * @memberof CCSurchargeAmountType
     */
    paymentMethod?: CashieringPaymentMethodType;
}

/**
 * Check if a given object implements the CCSurchargeAmountType interface.
 */
export function instanceOfCCSurchargeAmountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CCSurchargeAmountTypeFromJSON(json: any): CCSurchargeAmountType {
    return CCSurchargeAmountTypeFromJSONTyped(json, false);
}

export function CCSurchargeAmountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CCSurchargeAmountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'surchargeAmount': !exists(json, 'surchargeAmount') ? undefined : CurrencyAmountTypeFromJSON(json['surchargeAmount']),
        'surchargeInfo': !exists(json, 'surchargeInfo') ? undefined : CCSurchargeInfoTypeFromJSON(json['surchargeInfo']),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : CashieringPaymentMethodTypeFromJSON(json['paymentMethod']),
    };
}

export function CCSurchargeAmountTypeToJSON(value?: CCSurchargeAmountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'surchargeAmount': CurrencyAmountTypeToJSON(value.surchargeAmount),
        'surchargeInfo': CCSurchargeInfoTypeToJSON(value.surchargeInfo),
        'paymentMethod': CashieringPaymentMethodTypeToJSON(value.paymentMethod),
    };
}

