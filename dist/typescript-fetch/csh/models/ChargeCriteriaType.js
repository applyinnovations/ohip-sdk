"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChargeCriteriaTypeToJSON = exports.ChargeCriteriaTypeFromJSONTyped = exports.ChargeCriteriaTypeFromJSON = exports.instanceOfChargeCriteriaType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ChargeCriteriaType interface.
 */
function instanceOfChargeCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChargeCriteriaType = instanceOfChargeCriteriaType;
function ChargeCriteriaTypeFromJSON(json) {
    return ChargeCriteriaTypeFromJSONTyped(json, false);
}
exports.ChargeCriteriaTypeFromJSON = ChargeCriteriaTypeFromJSON;
function ChargeCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'transactionCode': !(0, runtime_1.exists)(json, 'transactionCode') ? undefined : json['transactionCode'],
        'articleCode': !(0, runtime_1.exists)(json, 'articleCode') ? undefined : json['articleCode'],
        'price': !(0, runtime_1.exists)(json, 'price') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['price']),
        'postingQuantity': !(0, runtime_1.exists)(json, 'postingQuantity') ? undefined : json['postingQuantity'],
        'postingReference': !(0, runtime_1.exists)(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !(0, runtime_1.exists)(json, 'postingRemark') ? undefined : json['postingRemark'],
        'checkNumber': !(0, runtime_1.exists)(json, 'checkNumber') ? undefined : json['checkNumber'],
        'arrangementCode': !(0, runtime_1.exists)(json, 'arrangementCode') ? undefined : json['arrangementCode'],
        'applyRoutingInstructions': !(0, runtime_1.exists)(json, 'applyRoutingInstructions') ? undefined : json['applyRoutingInstructions'],
        'usePackageAllowance': !(0, runtime_1.exists)(json, 'usePackageAllowance') ? undefined : json['usePackageAllowance'],
        'autoPosting': !(0, runtime_1.exists)(json, 'autoPosting') ? undefined : json['autoPosting'],
        'financialTransactionIdList': !(0, runtime_1.exists)(json, 'financialTransactionIdList') ? undefined : (json['financialTransactionIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'folioWindowNo': !(0, runtime_1.exists)(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'cashierId': !(0, runtime_1.exists)(json, 'cashierId') ? undefined : json['cashierId'],
        'covers': !(0, runtime_1.exists)(json, 'covers') ? undefined : json['covers'],
    };
}
exports.ChargeCriteriaTypeFromJSONTyped = ChargeCriteriaTypeFromJSONTyped;
function ChargeCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactionCode': value.transactionCode,
        'articleCode': value.articleCode,
        'price': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.price),
        'postingQuantity': value.postingQuantity,
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'checkNumber': value.checkNumber,
        'arrangementCode': value.arrangementCode,
        'applyRoutingInstructions': value.applyRoutingInstructions,
        'usePackageAllowance': value.usePackageAllowance,
        'autoPosting': value.autoPosting,
        'financialTransactionIdList': value.financialTransactionIdList === undefined ? undefined : (value.financialTransactionIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'folioWindowNo': value.folioWindowNo,
        'cashierId': value.cashierId,
        'covers': value.covers,
    };
}
exports.ChargeCriteriaTypeToJSON = ChargeCriteriaTypeToJSON;
