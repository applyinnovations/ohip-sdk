/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Credit card transaction detail for batch settlement
 * @export
 * @interface CCBatchSettlementType
 */
export interface CCBatchSettlementType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CCBatchSettlementType
     */
    settlementId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CCBatchSettlementType
     */
    settlementAmount?: CurrencyAmountType;
    /**
     * Guest name associated with the CC settlement transaction.
     * @type {string}
     * @memberof CCBatchSettlementType
     */
    guestName?: string;
    /**
     * Room number associated with the CC settlement transaction.
     * @type {string}
     * @memberof CCBatchSettlementType
     */
    roomId?: string;
    /**
     * Window number associated with the CC settlement transaction.
     * @type {number}
     * @memberof CCBatchSettlementType
     */
    windowNo?: number;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof CCBatchSettlementType
     */
    paymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {ReservationId}
     * @memberof CCBatchSettlementType
     */
    reservationId?: ReservationId;
    /**
     * The approval code authenticates the authorization.
     * @type {string}
     * @memberof CCBatchSettlementType
     */
    approvalCode?: string;
    /**
     * Folio number of transaction
     * @type {number}
     * @memberof CCBatchSettlementType
     */
    folioNo?: number;
    /**
     * Transaction Date of the credit card transaction.
     * @type {Date}
     * @memberof CCBatchSettlementType
     */
    transactionDate?: Date;
}

/**
 * Check if a given object implements the CCBatchSettlementType interface.
 */
export function instanceOfCCBatchSettlementType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CCBatchSettlementTypeFromJSON(json: any): CCBatchSettlementType {
    return CCBatchSettlementTypeFromJSONTyped(json, false);
}

export function CCBatchSettlementTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CCBatchSettlementType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'settlementId': !exists(json, 'settlementId') ? undefined : UniqueIDTypeFromJSON(json['settlementId']),
        'settlementAmount': !exists(json, 'settlementAmount') ? undefined : CurrencyAmountTypeFromJSON(json['settlementAmount']),
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'windowNo': !exists(json, 'windowNo') ? undefined : json['windowNo'],
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['paymentMethod']),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'approvalCode': !exists(json, 'approvalCode') ? undefined : json['approvalCode'],
        'folioNo': !exists(json, 'folioNo') ? undefined : json['folioNo'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
    };
}

export function CCBatchSettlementTypeToJSON(value?: CCBatchSettlementType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'settlementId': UniqueIDTypeToJSON(value.settlementId),
        'settlementAmount': CurrencyAmountTypeToJSON(value.settlementAmount),
        'guestName': value.guestName,
        'roomId': value.roomId,
        'windowNo': value.windowNo,
        'paymentMethod': ReservationPaymentMethodTypeToJSON(value.paymentMethod),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'approvalCode': value.approvalCode,
        'folioNo': value.folioNo,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString().substr(0,10)),
    };
}

