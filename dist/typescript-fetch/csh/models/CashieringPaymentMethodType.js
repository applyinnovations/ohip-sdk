"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CashieringPaymentMethodTypeToJSON = exports.CashieringPaymentMethodTypeFromJSONTyped = exports.CashieringPaymentMethodTypeFromJSON = exports.instanceOfCashieringPaymentMethodType = void 0;
const runtime_1 = require("../runtime");
const AuthorizationInfoType_1 = require("./AuthorizationInfoType");
const AuthorizationRuleType_1 = require("./AuthorizationRuleType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const ResPaymentCardType_1 = require("./ResPaymentCardType");
const ReservationPaymentMethodTypeEmailFolioInfo_1 = require("./ReservationPaymentMethodTypeEmailFolioInfo");
/**
 * Check if a given object implements the CashieringPaymentMethodType interface.
 */
function instanceOfCashieringPaymentMethodType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCashieringPaymentMethodType = instanceOfCashieringPaymentMethodType;
function CashieringPaymentMethodTypeFromJSON(json) {
    return CashieringPaymentMethodTypeFromJSONTyped(json, false);
}
exports.CashieringPaymentMethodTypeFromJSON = CashieringPaymentMethodTypeFromJSON;
function CashieringPaymentMethodTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'paymentCard': !(0, runtime_1.exists)(json, 'paymentCard') ? undefined : (0, ResPaymentCardType_1.ResPaymentCardTypeFromJSON)(json['paymentCard']),
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['balance']),
        'authorizationRule': !(0, runtime_1.exists)(json, 'authorizationRule') ? undefined : (0, AuthorizationRuleType_1.AuthorizationRuleTypeFromJSON)(json['authorizationRule']),
        'emailFolioInfo': !(0, runtime_1.exists)(json, 'emailFolioInfo') ? undefined : (0, ReservationPaymentMethodTypeEmailFolioInfo_1.ReservationPaymentMethodTypeEmailFolioInfoFromJSON)(json['emailFolioInfo']),
        'paymentMethod': !(0, runtime_1.exists)(json, 'paymentMethod') ? undefined : json['paymentMethod'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'folioView': !(0, runtime_1.exists)(json, 'folioView') ? undefined : json['folioView'],
        'authorizationApproval': !(0, runtime_1.exists)(json, 'authorizationApproval') ? undefined : (0, AuthorizationInfoType_1.AuthorizationInfoTypeFromJSON)(json['authorizationApproval']),
        'track2Data': !(0, runtime_1.exists)(json, 'track2Data') ? undefined : json['track2Data'],
    };
}
exports.CashieringPaymentMethodTypeFromJSONTyped = CashieringPaymentMethodTypeFromJSONTyped;
function CashieringPaymentMethodTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'paymentCard': (0, ResPaymentCardType_1.ResPaymentCardTypeToJSON)(value.paymentCard),
        'balance': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.balance),
        'authorizationRule': (0, AuthorizationRuleType_1.AuthorizationRuleTypeToJSON)(value.authorizationRule),
        'emailFolioInfo': (0, ReservationPaymentMethodTypeEmailFolioInfo_1.ReservationPaymentMethodTypeEmailFolioInfoToJSON)(value.emailFolioInfo),
        'paymentMethod': value.paymentMethod,
        'description': value.description,
        'folioView': value.folioView,
        'authorizationApproval': (0, AuthorizationInfoType_1.AuthorizationInfoTypeToJSON)(value.authorizationApproval),
        'track2Data': value.track2Data,
    };
}
exports.CashieringPaymentMethodTypeToJSON = CashieringPaymentMethodTypeToJSON;
