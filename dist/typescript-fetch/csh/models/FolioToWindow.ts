/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FolioTransferCriteriaType } from './FolioTransferCriteriaType';
import {
    FolioTransferCriteriaTypeFromJSON,
    FolioTransferCriteriaTypeFromJSONTyped,
    FolioTransferCriteriaTypeToJSON,
} from './FolioTransferCriteriaType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request for transaction folio(s) to specific window
 * @export
 * @interface FolioToWindow
 */
export interface FolioToWindow {
    /**
     * 
     * @type {FolioTransferCriteriaType}
     * @memberof FolioToWindow
     */
    criteria?: FolioTransferCriteriaType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof FolioToWindow
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FolioToWindow
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FolioToWindow interface.
 */
export function instanceOfFolioToWindow(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FolioToWindowFromJSON(json: any): FolioToWindow {
    return FolioToWindowFromJSONTyped(json, false);
}

export function FolioToWindowFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioToWindow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'criteria': !exists(json, 'criteria') ? undefined : FolioTransferCriteriaTypeFromJSON(json['criteria']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FolioToWindowToJSON(value?: FolioToWindow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'criteria': FolioTransferCriteriaTypeToJSON(value.criteria),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

