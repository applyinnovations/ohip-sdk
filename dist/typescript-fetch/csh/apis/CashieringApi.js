"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRoundingDifferenceCardOrTokenEnum = exports.GetRoundingDifferenceEventEnum = exports.GetPostingsForRefreshColorEnum = exports.GetPostingSummaryPostingSummaryTypeEnum = exports.GetPostBillingChargesOptionEnum = exports.GetGuestsTransactionsPostedTransactionTypeEnum = exports.GetGuestsTransactionsCashieringTransactionTypeEnum = exports.GetFolioTypeNameFolioReportGroupEnum = exports.GetFolioTaxPaymentsInfoActionEnum = exports.GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = exports.GetFolioTaxPaymentsInfoPaymentTypeEnum = exports.GetFolioTaxPaymentsInfoEmailFormatEnum = exports.GetFolioTaxPaymentsInfoProcessingEnum = exports.GetFolioTaxPaymentsInfoCardTypeEnum = exports.GetFolioTaxPaymentsInfoCardOrTokenEnum = exports.GetFolioPrintersFiscalFolioInstructionEnum = exports.GetFolioPrintersEventTypeEnum = exports.GetFolioGroupTypeEnum = exports.GetFolioFetchInstructionsEnum = exports.GetFiscalSupportingDocumentsSortOrderEnum = exports.GetFiscalSupportingDocumentsOrderByEnum = exports.GetFiscalSupportingDocumentsDocumentTypeEnum = exports.GetFiscalPrintingDetailsFetchInstructionEnum = exports.GetFinancialPostingsProcessingEnum = exports.GetFinancialPostingsCardTypeEnum = exports.GetFinancialPostingsCardOrTokenEnum = exports.GetDepositFolioFetchInstructionsEnum = exports.GetCompRoutingInstructionsCompRoutingStatusesEnum = exports.GetCompRoutingInstructionsResStatusCodeEnum = exports.GetCashierReportPostingsRequestTypeEnum = exports.GetCCSurchargeInfoEmailFormatEnum = exports.GetCCSurchargeInfoProcessingEnum = exports.GetCCSurchargeInfoCardTypeEnum = exports.GetCCSurchargeInfoCardOrTokenEnum = exports.GetCCAuthorizationInstructionsByProfileEmailFormatEnum = exports.GetCCAuthorizationInstructionsByProfileProcessingEnum = exports.GetCCAuthorizationInstructionsByProfileCardTypeEnum = exports.GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = exports.GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = exports.GetCCAuthorizationInstructionsEmailFormatEnum = exports.GetCCAuthorizationInstructionsProcessingEnum = exports.GetCCAuthorizationInstructionsCardTypeEnum = exports.GetCCAuthorizationInstructionsCardOrTokenEnum = exports.GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = exports.GetBalanceInfoFolioStatusEnum = exports.GetBalanceInfoEventEnum = exports.GetAuthorizationHistoryTransactionTypeEnum = exports.GetAlertsAlertAreaEnum = exports.GetAdvancePaymentBalanceEventTypeEnum = exports.CashieringApi = void 0;
exports.ValidateTransactionCodesFolioStatusEnum = exports.ValidateTransactionCodesEventEnum = exports.GetValidateFiscalPrintingDetailsCashieringEventTypeEnum = exports.GetValidateFiscalPrintingDetailsFetchInstructionEnum = exports.GetTransactionCodesTrxServiceTypeEnum = exports.GetTransactionCodesFolioStatusEnum = exports.GetTransactionCodesEventEnum = exports.GetStoredFolioDetailsFolioStatusEnum = exports.GetRoundingDifferenceEmailFormatEnum = exports.GetRoundingDifferenceProcessingEnum = exports.GetRoundingDifferenceCardTypeEnum = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class CashieringApi extends runtime.BaseAPI {
    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    activatePrepaidCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling activatePrepaidCard.');
            }
            if (requestParameters.activatePrepaidCard === null || requestParameters.activatePrepaidCard === undefined) {
                throw new runtime.RequiredError('activatePrepaidCard', 'Required parameter requestParameters.activatePrepaidCard was null or undefined when calling activatePrepaidCard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/prepaidCards/activate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivatePrepaidCardToJSON)(requestParameters.activatePrepaidCard),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ActivatePrepaidCardStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    activatePrepaidCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.activatePrepaidCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    adjustTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling adjustTransactions.');
            }
            if (requestParameters.transactionsAdjustment === null || requestParameters.transactionsAdjustment === undefined) {
                throw new runtime.RequiredError('transactionsAdjustment', 'Required parameter requestParameters.transactionsAdjustment was null or undefined when calling adjustTransactions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/adjust`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionsAdjustmentToJSON)(requestParameters.transactionsAdjustment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdjustedTransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    adjustTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.adjustTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    applyFinalPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling applyFinalPostings.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling applyFinalPostings.');
            }
            if (requestParameters.finalPostings === null || requestParameters.finalPostings === undefined) {
                throw new runtime.RequiredError('finalPostings', 'Required parameter requestParameters.finalPostings was null or undefined when calling applyFinalPostings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/finalCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FinalPostingsToJSON)(requestParameters.finalPostings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    applyFinalPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.applyFinalPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    applyFlexibleBenefitPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling applyFlexibleBenefitPostings.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling applyFlexibleBenefitPostings.');
            }
            if (requestParameters.flexibleBenefitPostingsCriteria === null || requestParameters.flexibleBenefitPostingsCriteria === undefined) {
                throw new runtime.RequiredError('flexibleBenefitPostingsCriteria', 'Required parameter requestParameters.flexibleBenefitPostingsCriteria was null or undefined when calling applyFlexibleBenefitPostings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/flexibleBenefitPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FlexibleBenefitPostingsCriteriaToJSON)(requestParameters.flexibleBenefitPostingsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    applyFlexibleBenefitPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.applyFlexibleBenefitPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    attachDepositPolicyToPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling attachDepositPolicyToPayment.');
            }
            if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
                throw new runtime.RequiredError('policyId', 'Required parameter requestParameters.policyId was null or undefined when calling attachDepositPolicyToPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling attachDepositPolicyToPayment.');
            }
            if (requestParameters.attachPolicyApplyCriteria === null || requestParameters.attachPolicyApplyCriteria === undefined) {
                throw new runtime.RequiredError('attachPolicyApplyCriteria', 'Required parameter requestParameters.attachPolicyApplyCriteria was null or undefined when calling attachDepositPolicyToPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policies/{policyId}/transactions/{transactionId}/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AttachPolicyApplyCriteriaToJSON)(requestParameters.attachPolicyApplyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    attachDepositPolicyToPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.attachDepositPolicyToPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    authorizeCreditCardAmountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling authorizeCreditCardAmount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling authorizeCreditCardAmount.');
            }
            if (requestParameters.ccAuthorizationCriteria === null || requestParameters.ccAuthorizationCriteria === undefined) {
                throw new runtime.RequiredError('ccAuthorizationCriteria', 'Required parameter requestParameters.ccAuthorizationCriteria was null or undefined when calling authorizeCreditCardAmount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CcAuthorizationCriteriaToJSON)(requestParameters.ccAuthorizationCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthorizationInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    authorizeCreditCardAmount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authorizeCreditCardAmountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    authorizeCreditCardAmountByProfileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling authorizeCreditCardAmountByProfile.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling authorizeCreditCardAmountByProfile.');
            }
            if (requestParameters.ccAuthorizationCriteria === null || requestParameters.ccAuthorizationCriteria === undefined) {
                throw new runtime.RequiredError('ccAuthorizationCriteria', 'Required parameter requestParameters.ccAuthorizationCriteria was null or undefined when calling authorizeCreditCardAmountByProfile.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorize`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CcAuthorizationCriteriaToJSON)(requestParameters.ccAuthorizationCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthorizationInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    authorizeCreditCardAmountByProfile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.authorizeCreditCardAmountByProfileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    autoSettleCompFoliosRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling autoSettleCompFolios.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling autoSettleCompFolios.');
            }
            if (requestParameters.autoSettleCompFolios === null || requestParameters.autoSettleCompFolios === undefined) {
                throw new runtime.RequiredError('autoSettleCompFolios', 'Required parameter requestParameters.autoSettleCompFolios was null or undefined when calling autoSettleCompFolios.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/comp/folios/autoSettlements`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoSettleCompFoliosToJSON)(requestParameters.autoSettleCompFolios),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoSettleCompFoliosStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    autoSettleCompFolios(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.autoSettleCompFoliosRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    breakCashierLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling breakCashierLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    breakCashierLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.breakCashierLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    calculateForeignCurrencyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.foreignCurrencyCriteria === null || requestParameters.foreignCurrencyCriteria === undefined) {
                throw new runtime.RequiredError('foreignCurrencyCriteria', 'Required parameter requestParameters.foreignCurrencyCriteria was null or undefined when calling calculateForeignCurrency.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/foreignCurrency`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ForeignCurrencyCriteriaToJSON)(requestParameters.foreignCurrencyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CalculatedForeignCurrencyFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    calculateForeignCurrency(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.calculateForeignCurrencyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    cancelPrepaidCardTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling cancelPrepaidCardTransaction.');
            }
            if (requestParameters.cancelPrepaidCardTransaction === null || requestParameters.cancelPrepaidCardTransaction === undefined) {
                throw new runtime.RequiredError('cancelPrepaidCardTransaction', 'Required parameter requestParameters.cancelPrepaidCardTransaction was null or undefined when calling cancelPrepaidCardTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/prepaidCards/cancel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancelPrepaidCardTransactionToJSON)(requestParameters.cancelPrepaidCardTransaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelPrepaidCardTransactionStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    cancelPrepaidCardTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelPrepaidCardTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    cashOutPrepaidCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling cashOutPrepaidCard.');
            }
            if (requestParameters.cashOutPrepaidCard === null || requestParameters.cashOutPrepaidCard === undefined) {
                throw new runtime.RequiredError('cashOutPrepaidCard', 'Required parameter requestParameters.cashOutPrepaidCard was null or undefined when calling cashOutPrepaidCard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/prepaidCards/cashOut`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CashOutPrepaidCardToJSON)(requestParameters.cashOutPrepaidCard),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashOutPrepaidCardStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    cashOutPrepaidCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cashOutPrepaidCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to update a posted payment with additional reference, supplement, covers, and checknumber values. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    changeBillingPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling changeBillingPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeBillingPayment.');
            }
            if (requestParameters.billingPaymentToChange === null || requestParameters.billingPaymentToChange === undefined) {
                throw new runtime.RequiredError('billingPaymentToChange', 'Required parameter requestParameters.billingPaymentToChange was null or undefined when calling changeBillingPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/payments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingPaymentToChangeToJSON)(requestParameters.billingPaymentToChange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to update a posted payment with additional reference, supplement, covers, and checknumber values. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    changeBillingPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeBillingPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    changeRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling changeRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeRoutingInstructions.');
            }
            if (requestParameters.routingInstructionsToChange === null || requestParameters.routingInstructionsToChange === undefined) {
                throw new runtime.RequiredError('routingInstructionsToChange', 'Required parameter requestParameters.routingInstructionsToChange was null or undefined when calling changeRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/change`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoutingInstructionsToChangeToJSON)(requestParameters.routingInstructionsToChange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangedRoutingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    changeRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Trx Covers. <p><strong>OperationId:</strong>changeTransactionCovers</p>
     * Change Transaction Covers
     */
    changeTransactionCoversRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeTransactionCovers.');
            }
            if (requestParameters.coversInfo === null || requestParameters.coversInfo === undefined) {
                throw new runtime.RequiredError('coversInfo', 'Required parameter requestParameters.coversInfo was null or undefined when calling changeTransactionCovers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/covers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CoversInfoToJSON)(requestParameters.coversInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Trx Covers. <p><strong>OperationId:</strong>changeTransactionCovers</p>
     * Change Transaction Covers
     */
    changeTransactionCovers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTransactionCoversRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    checkPostRateCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
                throw new runtime.RequiredError('rateCode', 'Required parameter requestParameters.rateCode was null or undefined when calling checkPostRateCode.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling checkPostRateCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling checkPostRateCode.');
            }
            if (requestParameters.postRateCodeCriteria === null || requestParameters.postRateCodeCriteria === undefined) {
                throw new runtime.RequiredError('postRateCodeCriteria', 'Required parameter requestParameters.postRateCodeCriteria was null or undefined when calling checkPostRateCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}/action/validate`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostRateCodeCriteriaToJSON)(requestParameters.postRateCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CheckedRateCodeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    checkPostRateCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.checkPostRateCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    closeReservationFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling closeReservationFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling closeReservationFolio.');
            }
            if (requestParameters.closeFolioCriteria === null || requestParameters.closeFolioCriteria === undefined) {
                throw new runtime.RequiredError('closeFolioCriteria', 'Required parameter requestParameters.closeFolioCriteria was null or undefined when calling closeReservationFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CloseFolioCriteriaToJSON)(requestParameters.closeFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    closeReservationFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.closeReservationFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Convert folio.This API is deprecated. Please use putFolioType instead <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     * @deprecated
     */
    convertFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling convertFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling convertFolio.');
            }
            if (requestParameters.convertFolioCriteria === null || requestParameters.convertFolioCriteria === undefined) {
                throw new runtime.RequiredError('convertFolioCriteria', 'Required parameter requestParameters.convertFolioCriteria was null or undefined when calling convertFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folio/{folioId}/convert`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConvertFolioCriteriaToJSON)(requestParameters.convertFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConvertFolioDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Convert folio.This API is deprecated. Please use putFolioType instead <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     * @deprecated
     */
    convertFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.convertFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reverse the Advance Folio Transactions on a reservation. As part of reversal, the actual charges may not be deleted but only an offset will be posted.<p><strong>OperationId:</strong>reverseAdvanceFolio</p>
     * Delete Advance Folio Transactions
     */
    deleteAdvanceRoomChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteAdvanceRoomCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteAdvanceRoomCharges.');
            }
            const queryParameters = {};
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reverse the Advance Folio Transactions on a reservation. As part of reversal, the actual charges may not be deleted but only an offset will be posted.<p><strong>OperationId:</strong>reverseAdvanceFolio</p>
     * Delete Advance Folio Transactions
     */
    deleteAdvanceRoomCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAdvanceRoomChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    deleteCompRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteCompRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCompRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.refreshFolio !== undefined) {
                queryParameters['refreshFolio'] = requestParameters.refreshFolio;
            }
            if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
                queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.payeeId !== undefined) {
                queryParameters['payeeId'] = requestParameters.payeeId;
            }
            if (requestParameters.membershipIdNo !== undefined) {
                queryParameters['membershipIdNo'] = requestParameters.membershipIdNo;
            }
            if (requestParameters.authorizerId !== undefined) {
                queryParameters['authorizerId'] = requestParameters.authorizerId;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.userName !== undefined) {
                queryParameters['userName'] = requestParameters.userName;
            }
            if (requestParameters.comments !== undefined) {
                queryParameters['comments'] = requestParameters.comments;
            }
            if (requestParameters.daily !== undefined) {
                queryParameters['daily'] = requestParameters.daily;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.creditLimit) {
                queryParameters['creditLimit'] = requestParameters.creditLimit;
            }
            if (requestParameters.percentageLimit) {
                queryParameters['percentageLimit'] = requestParameters.percentageLimit;
            }
            if (requestParameters.covers) {
                queryParameters['covers'] = requestParameters.covers;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.billingCode) {
                queryParameters['billingCode'] = requestParameters.billingCode;
            }
            if (requestParameters.routingInstructionsId) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.routingLinkId !== undefined) {
                queryParameters['routingLinkId'] = requestParameters.routingLinkId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/comp`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomRoutingPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    deleteCompRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCompRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    deleteFolioRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteFolioRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteFolioRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.refreshFolio !== undefined) {
                queryParameters['refreshFolio'] = requestParameters.refreshFolio;
            }
            if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
                queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.payeeId !== undefined) {
                queryParameters['payeeId'] = requestParameters.payeeId;
            }
            if (requestParameters.daily !== undefined) {
                queryParameters['daily'] = requestParameters.daily;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.creditLimit) {
                queryParameters['creditLimit'] = requestParameters.creditLimit;
            }
            if (requestParameters.percentageLimit) {
                queryParameters['percentageLimit'] = requestParameters.percentageLimit;
            }
            if (requestParameters.covers) {
                queryParameters['covers'] = requestParameters.covers;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.billingCode) {
                queryParameters['billingCode'] = requestParameters.billingCode;
            }
            if (requestParameters.routingInstructionsId) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.routingLinkId !== undefined) {
                queryParameters['routingLinkId'] = requestParameters.routingLinkId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/folio`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomRoutingPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    deleteFolioRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteFolioRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    deleteRequestRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteRequestRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRequestRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.refreshFolio !== undefined) {
                queryParameters['refreshFolio'] = requestParameters.refreshFolio;
            }
            if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
                queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
            }
            if (requestParameters.userName !== undefined) {
                queryParameters['userName'] = requestParameters.userName;
            }
            if (requestParameters.comments !== undefined) {
                queryParameters['comments'] = requestParameters.comments;
            }
            if (requestParameters.daily !== undefined) {
                queryParameters['daily'] = requestParameters.daily;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/request`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomRoutingPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    deleteRequestRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRequestRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    deleteRoomRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteRoomRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRoomRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.refreshFolio !== undefined) {
                queryParameters['refreshFolio'] = requestParameters.refreshFolio;
            }
            if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
                queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
            }
            if (requestParameters.reservationNameId !== undefined) {
                queryParameters['reservationNameId'] = requestParameters.reservationNameId;
            }
            if (requestParameters.daily !== undefined) {
                queryParameters['daily'] = requestParameters.daily;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.creditLimit) {
                queryParameters['creditLimit'] = requestParameters.creditLimit;
            }
            if (requestParameters.percentageLimit) {
                queryParameters['percentageLimit'] = requestParameters.percentageLimit;
            }
            if (requestParameters.covers) {
                queryParameters['covers'] = requestParameters.covers;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.billingCode) {
                queryParameters['billingCode'] = requestParameters.billingCode;
            }
            if (requestParameters.routingInstructionsId) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.routingLinkId !== undefined) {
                queryParameters['routingLinkId'] = requestParameters.routingLinkId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/room`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomRoutingPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    deleteRoomRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoomRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    detachDepositPolicyFromPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling detachDepositPolicyFromPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling detachDepositPolicyFromPayment.');
            }
            if (requestParameters.detachPolicyApplyCriteria === null || requestParameters.detachPolicyApplyCriteria === undefined) {
                throw new runtime.RequiredError('detachPolicyApplyCriteria', 'Required parameter requestParameters.detachPolicyApplyCriteria was null or undefined when calling detachDepositPolicyFromPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/policies/detach/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DetachPolicyApplyCriteriaToJSON)(requestParameters.detachPolicyApplyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    detachDepositPolicyFromPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.detachDepositPolicyFromPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    generateFiscalFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling generateFiscalFolio.');
            }
            if (requestParameters.fiscalInfoFolioCriteria === null || requestParameters.fiscalInfoFolioCriteria === undefined) {
                throw new runtime.RequiredError('fiscalInfoFolioCriteria', 'Required parameter requestParameters.fiscalInfoFolioCriteria was null or undefined when calling generateFiscalFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FiscalInfoFolioCriteriaToJSON)(requestParameters.fiscalInfoFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FiscalInformationFolioFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    generateFiscalFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateFiscalFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    generateFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling generateFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling generateFolio.');
            }
            if (requestParameters.folioCriteria === null || requestParameters.folioCriteria === undefined) {
                throw new runtime.RequiredError('folioCriteria', 'Required parameter requestParameters.folioCriteria was null or undefined when calling generateFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolioCriteriaToJSON)(requestParameters.folioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneratedFolioFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    generateFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    getAdditionalTaxesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getAdditionalTaxes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAdditionalTaxes.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/additionalTaxes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdditionalTaxesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    getAdditionalTaxes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAdditionalTaxesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    getAdvancePaymentBalanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getAdvancePaymentBalance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAdvancePaymentBalance.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.numberOfNights !== undefined) {
                queryParameters['numberOfNights'] = requestParameters.numberOfNights;
            }
            if (requestParameters.eventType !== undefined) {
                queryParameters['eventType'] = requestParameters.eventType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/advancePaymentBalance`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdvancePaymentBalanceFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    getAdvancePaymentBalance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAdvancePaymentBalanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     * @deprecated
     */
    getAlertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getAlerts.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAlerts.');
            }
            const queryParameters = {};
            if (requestParameters.alertArea !== undefined) {
                queryParameters['alertArea'] = requestParameters.alertArea;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/alerts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AlertNoticesFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     * @deprecated
     */
    getAlerts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAlertsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    getAuthorizationHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getAuthorizationHistory.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAuthorizationHistory.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.includeAuthorizations !== undefined) {
                queryParameters['includeAuthorizations'] = requestParameters.includeAuthorizations;
            }
            if (requestParameters.includePayments !== undefined) {
                queryParameters['includePayments'] = requestParameters.includePayments;
            }
            if (requestParameters.includeRefunds !== undefined) {
                queryParameters['includeRefunds'] = requestParameters.includeRefunds;
            }
            if (requestParameters.includeFailures !== undefined) {
                queryParameters['includeFailures'] = requestParameters.includeFailures;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.transactionType !== undefined) {
                queryParameters['transactionType'] = requestParameters.transactionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/authorizationHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthorizationHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    getAuthorizationHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAuthorizationHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    getAuthorizersCreditInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAuthorizersCreditInfo.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.includeCreditDetails !== undefined) {
                queryParameters['includeCreditDetails'] = requestParameters.includeCreditDetails;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/authorizers/credits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthorizersCreditInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    getAuthorizersCreditInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAuthorizersCreditInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Balance Information. <br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     * @deprecated
     */
    getBalanceInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBalanceInfo.');
            }
            const queryParameters = {};
            if (requestParameters.event !== undefined) {
                queryParameters['event'] = requestParameters.event;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.folioWindowNo) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.cashierId) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.amount) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.postingQuantity) {
                queryParameters['postingQuantity'] = requestParameters.postingQuantity;
            }
            if (requestParameters.postingReference) {
                queryParameters['postingReference'] = requestParameters.postingReference;
            }
            if (requestParameters.postingRemark) {
                queryParameters['postingRemark'] = requestParameters.postingRemark;
            }
            if (requestParameters.checkNumber) {
                queryParameters['checkNumber'] = requestParameters.checkNumber;
            }
            if (requestParameters.arrangementCode) {
                queryParameters['arrangementCode'] = requestParameters.arrangementCode;
            }
            if (requestParameters.applyRoutingInstructions) {
                queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
            }
            if (requestParameters.usePackageAllowance) {
                queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
            }
            if (requestParameters.autoPosting) {
                queryParameters['autoPosting'] = requestParameters.autoPosting;
            }
            if (requestParameters.uniqueIdId) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.postItNumberId !== undefined) {
                queryParameters['postItNumberId'] = requestParameters.postItNumberId;
            }
            if (requestParameters.postItNumberIdContext !== undefined) {
                queryParameters['postItNumberIdContext'] = requestParameters.postItNumberIdContext;
            }
            if (requestParameters.postItNumberType !== undefined) {
                queryParameters['postItNumberType'] = requestParameters.postItNumberType;
            }
            if (requestParameters.profileIdId !== undefined) {
                queryParameters['profileIdId'] = requestParameters.profileIdId;
            }
            if (requestParameters.profileIdIdContext !== undefined) {
                queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.reservationIdId !== undefined) {
                queryParameters['reservationIdId'] = requestParameters.reservationIdId;
            }
            if (requestParameters.reservationIdIdContext !== undefined) {
                queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.policyIdId !== undefined) {
                queryParameters['policyIdId'] = requestParameters.policyIdId;
            }
            if (requestParameters.policyIdIdContext !== undefined) {
                queryParameters['policyIdIdContext'] = requestParameters.policyIdIdContext;
            }
            if (requestParameters.policyIdType !== undefined) {
                queryParameters['policyIdType'] = requestParameters.policyIdType;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioNo !== undefined) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus !== undefined) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactionsTotal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BalanceInfoCriteriaFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Balance Information. <br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     * @deprecated
     */
    getBalanceInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBalanceInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    getBatchCCSettlementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBatchCCSettlements.');
            }
            const queryParameters = {};
            if (requestParameters.offlineSettlement !== undefined) {
                queryParameters['offlineSettlement'] = requestParameters.offlineSettlement;
            }
            if (requestParameters.transactionDate !== undefined) {
                queryParameters['transactionDate'] = requestParameters.transactionDate;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/cCSettlements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CcBatchSettlementsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    getBatchCCSettlements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBatchCCSettlementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    getBatchCCSettlementsStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
                throw new runtime.RequiredError('batchId', 'Required parameter requestParameters.batchId was null or undefined when calling getBatchCCSettlementsStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBatchCCSettlementsStatus.');
            }
            const queryParameters = {};
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bulkCCSettlements/{batchId}/status`.replace(`{${"batchId"}}`, encodeURIComponent(String(requestParameters.batchId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CcBatchSettlementsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    getBatchCCSettlementsStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBatchCCSettlementsStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    getBedTaxInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBedTaxInfo.');
            }
            const queryParameters = {};
            if (requestParameters.arrival !== undefined) {
                queryParameters['arrival'] = requestParameters.arrival;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BedTaxInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    getBedTaxInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBedTaxInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    getBillingInstructionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBillingInstructionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.includeTransactionCodes !== undefined) {
                queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
            }
            if (requestParameters.includeBillingInstructions !== undefined) {
                queryParameters['includeBillingInstructions'] = requestParameters.includeBillingInstructions;
            }
            if (requestParameters.includeCompInstructions !== undefined) {
                queryParameters['includeCompInstructions'] = requestParameters.includeCompInstructions;
            }
            if (requestParameters.codeWildCard !== undefined) {
                queryParameters['codeWildCard'] = requestParameters.codeWildCard;
            }
            if (requestParameters.descriptionWildCard !== undefined) {
                queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/routingInstructionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BillingInstructionCodesFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    getBillingInstructionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBillingInstructionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    getCCAuthorizationInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getCCAuthorizationInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCCAuthorizationInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.evaluateApprovalAmount !== undefined) {
                queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
            }
            if (requestParameters.sourceOfAuthorization !== undefined) {
                queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
            }
            if (requestParameters.updateReservation !== undefined) {
                queryParameters['updateReservation'] = requestParameters.updateReservation;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.profileIdIdContext !== undefined) {
                queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.paymentFolioView !== undefined) {
                queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.track2Data !== undefined) {
                queryParameters['track2Data'] = requestParameters.track2Data;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.storeToCreditCardWallet !== undefined) {
                queryParameters['storeToCreditCardWallet'] = requestParameters.storeToCreditCardWallet;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.cardPresent !== undefined) {
                queryParameters['cardPresent'] = requestParameters.cardPresent;
            }
            if (requestParameters.citId !== undefined) {
                queryParameters['citId'] = requestParameters.citId;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardIdId !== undefined) {
                queryParameters['cardIdId'] = requestParameters.cardIdId;
            }
            if (requestParameters.cardIdIdContext !== undefined) {
                queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
            }
            if (requestParameters.cardIdType !== undefined) {
                queryParameters['cardIdType'] = requestParameters.cardIdType;
            }
            if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
                queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.amountAmount !== undefined) {
                queryParameters['amountAmount'] = requestParameters.amountAmount;
            }
            if (requestParameters.amountCurrencyCode !== undefined) {
                queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
            }
            if (requestParameters.percent !== undefined) {
                queryParameters['percent'] = requestParameters.percent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.uniqueIdId !== undefined) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext !== undefined) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType !== undefined) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailFormat !== undefined) {
                queryParameters['emailFormat'] = requestParameters.emailFormat;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.orderSequence !== undefined) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.originalAuthSequence !== undefined) {
                queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
            }
            if (requestParameters.vendorTranId !== undefined) {
                queryParameters['vendorTranId'] = requestParameters.vendorTranId;
            }
            if (requestParameters.approvalAmountAmount !== undefined) {
                queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.terminalId !== undefined) {
                queryParameters['terminalId'] = requestParameters.terminalId;
            }
            if (requestParameters.incidentalAmountAmount !== undefined) {
                queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
            }
            if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
                queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CcAuthorizationInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    getCCAuthorizationInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCCAuthorizationInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    getCCAuthorizationInstructionsByProfileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getCCAuthorizationInstructionsByProfile.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCCAuthorizationInstructionsByProfile.');
            }
            const queryParameters = {};
            if (requestParameters.evaluateApprovalAmount !== undefined) {
                queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
            }
            if (requestParameters.sourceOfAuthorization !== undefined) {
                queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
            }
            if (requestParameters.updateReservation !== undefined) {
                queryParameters['updateReservation'] = requestParameters.updateReservation;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.profileIdIdContext !== undefined) {
                queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.paymentFolioView !== undefined) {
                queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.track2Data !== undefined) {
                queryParameters['track2Data'] = requestParameters.track2Data;
            }
            if (requestParameters.storeToCreditCardWallet !== undefined) {
                queryParameters['storeToCreditCardWallet'] = requestParameters.storeToCreditCardWallet;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.cardPresent !== undefined) {
                queryParameters['cardPresent'] = requestParameters.cardPresent;
            }
            if (requestParameters.citId !== undefined) {
                queryParameters['citId'] = requestParameters.citId;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardIdId !== undefined) {
                queryParameters['cardIdId'] = requestParameters.cardIdId;
            }
            if (requestParameters.cardIdIdContext !== undefined) {
                queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
            }
            if (requestParameters.cardIdType !== undefined) {
                queryParameters['cardIdType'] = requestParameters.cardIdType;
            }
            if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
                queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.amountAmount !== undefined) {
                queryParameters['amountAmount'] = requestParameters.amountAmount;
            }
            if (requestParameters.amountCurrencyCode !== undefined) {
                queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
            }
            if (requestParameters.percent !== undefined) {
                queryParameters['percent'] = requestParameters.percent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.uniqueIdId !== undefined) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext !== undefined) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType !== undefined) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailFormat !== undefined) {
                queryParameters['emailFormat'] = requestParameters.emailFormat;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.orderSequence !== undefined) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.originalAuthSequence !== undefined) {
                queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
            }
            if (requestParameters.vendorTranId !== undefined) {
                queryParameters['vendorTranId'] = requestParameters.vendorTranId;
            }
            if (requestParameters.approvalAmountAmount !== undefined) {
                queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.terminalId !== undefined) {
                queryParameters['terminalId'] = requestParameters.terminalId;
            }
            if (requestParameters.incidentalAmountAmount !== undefined) {
                queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
            }
            if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
                queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CcAuthorizationInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    getCCAuthorizationInstructionsByProfile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCCAuthorizationInstructionsByProfileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    getCCSurchargeInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCCSurchargeInfo.');
            }
            const queryParameters = {};
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.track2Data !== undefined) {
                queryParameters['track2Data'] = requestParameters.track2Data;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.amountAmount !== undefined) {
                queryParameters['amountAmount'] = requestParameters.amountAmount;
            }
            if (requestParameters.amountCurrencyCode !== undefined) {
                queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
            }
            if (requestParameters.percent !== undefined) {
                queryParameters['percent'] = requestParameters.percent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.uniqueIdId !== undefined) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext !== undefined) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType !== undefined) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailFormat !== undefined) {
                queryParameters['emailFormat'] = requestParameters.emailFormat;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.orderSequence !== undefined) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.originalAuthSequence !== undefined) {
                queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
            }
            if (requestParameters.vendorTranId !== undefined) {
                queryParameters['vendorTranId'] = requestParameters.vendorTranId;
            }
            if (requestParameters.approvalAmountAmount !== undefined) {
                queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.postingAmountAmount !== undefined) {
                queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
            }
            if (requestParameters.postingAmountCurrencyCode !== undefined) {
                queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditcardsurcharge`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CcSurchargeDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    getCCSurchargeInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCCSurchargeInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    getCashierClosureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling getCashierClosure.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCashierClosure.');
            }
            const queryParameters = {};
            if (requestParameters.cashierLockHandle !== undefined) {
                queryParameters['cashierLockHandle'] = requestParameters.cashierLockHandle;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashierClosureDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    getCashierClosure(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierClosureRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    getCashierClosureInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCashierClosureInfo.');
            }
            const queryParameters = {};
            if (requestParameters.closureNo !== undefined) {
                queryParameters['closureNo'] = requestParameters.closureNo;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.shiftDropLocationCode !== undefined) {
                queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
            }
            if (requestParameters.bagNumberForOthers !== undefined) {
                queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
            }
            if (requestParameters.bagNumberForCash !== undefined) {
                queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
            }
            if (requestParameters.closureBusinessDate !== undefined) {
                queryParameters['closureBusinessDate'] = requestParameters.closureBusinessDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/closureList`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashierClosureInformationFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    getCashierClosureInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierClosureInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    getCashierClosureReportsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling getCashierClosureReportsList.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCashierClosureReportsList.');
            }
            const queryParameters = {};
            if (requestParameters.closureNo !== undefined) {
                queryParameters['closureNo'] = requestParameters.closureNo;
            }
            if (requestParameters.shiftDropLocationCode !== undefined) {
                queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
            }
            if (requestParameters.bagNumberForOthers !== undefined) {
                queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
            }
            if (requestParameters.bagNumberForCash !== undefined) {
                queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cashiers/{cashierId}/closureReports`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashierClosureReportsListFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    getCashierClosureReportsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierClosureReportsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    getCashierLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling getCashierLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AcquiredCashierLockFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    getCashierLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Cashier Report Postings
     */
    getCashierReportPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.requestType !== undefined) {
                queryParameters['requestType'] = requestParameters.requestType;
            }
            if (requestParameters.closureNo !== undefined) {
                queryParameters['closureNo'] = requestParameters.closureNo;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.shiftDropLocationCode !== undefined) {
                queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
            }
            if (requestParameters.bagNumberForOthers !== undefined) {
                queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
            }
            if (requestParameters.bagNumberForCash !== undefined) {
                queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashierReportPostings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashierReportPostingsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Cashier Report Postings
     */
    getCashierReportPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierReportPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    getCashierTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling getCashierTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.closureNo !== undefined) {
                queryParameters['closureNo'] = requestParameters.closureNo;
            }
            if (requestParameters.shiftDropLocationCode !== undefined) {
                queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
            }
            if (requestParameters.bagNumberForOthers !== undefined) {
                queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
            }
            if (requestParameters.bagNumberForCash !== undefined) {
                queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashiers/{cashierId}/transactions`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CashierTransactionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    getCashierTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCashierTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    getCheckDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.checkNumber === null || requestParameters.checkNumber === undefined) {
                throw new runtime.RequiredError('checkNumber', 'Required parameter requestParameters.checkNumber was null or undefined when calling getCheckDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCheckDetails.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CheckDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    getCheckDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCheckDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Comp Accounting Journal. <br><p><strong><mark>This API is deprecated. Please use getCompPostingJournal instead</mark></strong></p> <p><strong>OperationId:</strong>getCompAccountingJournal</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Accounting Journal
     * @deprecated
     */
    getCompAccountingJournalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.filterTransactionCode) {
                queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.filterRoomNumber) {
                queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.authorizerNameCode) {
                queryParameters['authorizerNameCode'] = requestParameters.authorizerNameCode;
            }
            if (requestParameters.referenceNumberWildCard !== undefined) {
                queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
            }
            if (requestParameters.supplementWildCard !== undefined) {
                queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/compAccountingJournal`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompAccountingJournalFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Comp Accounting Journal. <br><p><strong><mark>This API is deprecated. Please use getCompPostingJournal instead</mark></strong></p> <p><strong>OperationId:</strong>getCompAccountingJournal</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Accounting Journal
     * @deprecated
     */
    getCompAccountingJournal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCompAccountingJournalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompPostingJournal</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Accounting Journal
     */
    getCompPostingJournalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCompPostingJournal.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.filterTransactionCode) {
                queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
            }
            if (requestParameters.filterRoomNumber) {
                queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.authorizerNameCode) {
                queryParameters['authorizerNameCode'] = requestParameters.authorizerNameCode;
            }
            if (requestParameters.referenceNumberWildCard !== undefined) {
                queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
            }
            if (requestParameters.supplementWildCard !== undefined) {
                queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/compAccountingJournal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompAccountingJournalFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompPostingJournal</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Accounting Journal
     */
    getCompPostingJournal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCompPostingJournalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Routing Instructions
     */
    getCompRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCompRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.nameWildcard !== undefined) {
                queryParameters['nameWildcard'] = requestParameters.nameWildcard;
            }
            if (requestParameters.firstNameWildCard !== undefined) {
                queryParameters['firstNameWildCard'] = requestParameters.firstNameWildCard;
            }
            if (requestParameters.roomNumberCodes) {
                queryParameters['roomNumberCodes'] = requestParameters.roomNumberCodes;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.resStatusCode) {
                queryParameters['resStatusCode'] = requestParameters.resStatusCode;
            }
            if (requestParameters.compRoutingStatuses) {
                queryParameters['compRoutingStatuses'] = requestParameters.compRoutingStatuses;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/compRoutingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompRoutingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Comp Routing Instructions
     */
    getCompRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCompRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    getCompTrxAuthorizersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCompTrxAuthorizers.');
            }
            const queryParameters = {};
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.targetFolioWindowNo !== undefined) {
                queryParameters['targetFolioWindowNo'] = requestParameters.targetFolioWindowNo;
            }
            if (requestParameters.uniqueIdId) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.transaction) {
                queryParameters['transaction'] = requestParameters.transaction;
            }
            if (requestParameters.authorizerIdId !== undefined) {
                queryParameters['authorizerIdId'] = requestParameters.authorizerIdId;
            }
            if (requestParameters.authorizerIdIdContext !== undefined) {
                queryParameters['authorizerIdIdContext'] = requestParameters.authorizerIdIdContext;
            }
            if (requestParameters.authorizerIdType !== undefined) {
                queryParameters['authorizerIdType'] = requestParameters.authorizerIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/compTrxAuthorizers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompTrxAuthorizersFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    getCompTrxAuthorizers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCompTrxAuthorizersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    getCreditLimitOveragePaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCreditLimitOveragePayments.');
            }
            const queryParameters = {};
            if (requestParameters.guestNameWildCard !== undefined) {
                queryParameters['guestNameWildCard'] = requestParameters.guestNameWildCard;
            }
            if (requestParameters.roomNumberWildCard !== undefined) {
                queryParameters['roomNumberWildCard'] = requestParameters.roomNumberWildCard;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditLimitOveragePaymentsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    getCreditLimitOveragePayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    getDepositFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDepositFolio.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.policyIdId !== undefined) {
                queryParameters['policyIdId'] = requestParameters.policyIdId;
            }
            if (requestParameters.blockIdId !== undefined) {
                queryParameters['blockIdId'] = requestParameters.blockIdId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/depositFolio`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationDepositFoliosFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    getDepositFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDepositFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    getDepositFolioTransactionDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDepositFolioTransactionDetails.');
            }
            const queryParameters = {};
            if (requestParameters.includeGenerates !== undefined) {
                queryParameters['includeGenerates'] = requestParameters.includeGenerates;
            }
            if (requestParameters.transactionNo) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.includeExchangeInformation !== undefined) {
                queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/depositTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositFolioTransactionDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    getDepositFolioTransactionDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDepositFolioTransactionDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    getDepositMaturityInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getDepositMaturityInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDepositMaturityInfo.');
            }
            const queryParameters = {};
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositMaturity`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositMaturityDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    getDepositMaturityInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDepositMaturityInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves eligible bill amount in order to post redemption on a reservation folio <p><strong>OperationId:</strong>getEligibleBillAmount</p>
     * Get Eligible Bill Amount
     */
    getEligibleBillAmountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEligibleBillAmount.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getEligibleBillAmount.');
            }
            const queryParameters = {};
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/eligibleBillAmount`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AmountEligibleFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves eligible bill amount in order to post redemption on a reservation folio <p><strong>OperationId:</strong>getEligibleBillAmount</p>
     * Get Eligible Bill Amount
     */
    getEligibleBillAmount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEligibleBillAmountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Financial Postings
     */
    getFinancialPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFinancialPostings.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.filterTransactionCode) {
                queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.filterRoomNumber) {
                queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
            }
            if (requestParameters.referenceNumberWildCard !== undefined) {
                queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
            }
            if (requestParameters.checkNumberWildCard !== undefined) {
                queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
            }
            if (requestParameters.supplementWildCard !== undefined) {
                queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.approvalStatusCode) {
                queryParameters['approvalStatusCode'] = requestParameters.approvalStatusCode;
            }
            if (requestParameters.folioWindowNo) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.closureNo !== undefined) {
                queryParameters['closureNo'] = requestParameters.closureNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/financialPostings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FinancialPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Financial Postings
     */
    getFinancialPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFinancialPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Financial postings with Net and Vat breakdown. <p><strong>OperationId:</strong>financialPostingsNetVat</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p>
     * Get Financial Postings with breakdown
     */
    getFinancialPostingsNetVatRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFinancialPostingsNetVat.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFinancialPostingsNetVat.');
            }
            if (requestParameters.folioWindowNo === null || requestParameters.folioWindowNo === undefined) {
                throw new runtime.RequiredError('folioWindowNo', 'Required parameter requestParameters.folioWindowNo was null or undefined when calling getFinancialPostingsNetVat.');
            }
            const queryParameters = {};
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/financialPostingsNetVat`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FinancialPostingsNetVatFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Financial postings with Net and Vat breakdown. <p><strong>OperationId:</strong>financialPostingsNetVat</p> <p>The maximum allowable limit for this API is <strong>50</strong>.</p>
     * Get Financial Postings with breakdown
     */
    getFinancialPostingsNetVat(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFinancialPostingsNetVatRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    getFiscalFolioActivityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFiscalFolioActivity.');
            }
            const queryParameters = {};
            if (requestParameters.folioSeqNo !== undefined) {
                queryParameters['folioSeqNo'] = requestParameters.folioSeqNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalFolioResponse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioActivityDetailsTypeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    getFiscalFolioActivity(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFiscalFolioActivityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    getFiscalFolioActivityDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioSeqNo === null || requestParameters.folioSeqNo === undefined) {
                throw new runtime.RequiredError('folioSeqNo', 'Required parameter requestParameters.folioSeqNo was null or undefined when calling getFiscalFolioActivityDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFiscalFolioActivityDetails.');
            }
            const queryParameters = {};
            if (requestParameters.responseAttemptNo !== undefined) {
                queryParameters['responseAttemptNo'] = requestParameters.responseAttemptNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalFolioResponse/{folioSeqNo}`.replace(`{${"folioSeqNo"}}`, encodeURIComponent(String(requestParameters.folioSeqNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioActivityResponseDetailTypeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    getFiscalFolioActivityDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFiscalFolioActivityDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     * @deprecated
     */
    getFiscalPrintingDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFiscalPrintingDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFiscalPrintingDetails.');
            }
            const queryParameters = {};
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.fetchInstruction) {
                queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
            }
            if (requestParameters.profileIdId !== undefined) {
                queryParameters['profileIdId'] = requestParameters.profileIdId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fiscalPrinting`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FiscalCallStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     * @deprecated
     */
    getFiscalPrintingDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFiscalPrintingDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to get the list of supporting documents for the reservations. <p><strong>OperationId:</strong>getSupportingDocuments</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get supporting documents details.
     */
    getFiscalSupportingDocumentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFiscalSupportingDocuments.');
            }
            const queryParameters = {};
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.confirmationNo !== undefined) {
                queryParameters['confirmationNo'] = requestParameters.confirmationNo;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.departureStartDate !== undefined) {
                queryParameters['departureStartDate'] = requestParameters.departureStartDate;
            }
            if (requestParameters.departureEndDate !== undefined) {
                queryParameters['departureEndDate'] = requestParameters.departureEndDate;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.documentType) {
                queryParameters['documentType'] = requestParameters.documentType;
            }
            if (requestParameters.documentNo !== undefined) {
                queryParameters['documentNo'] = requestParameters.documentNo;
            }
            if (requestParameters.pendingDocumentsOnly !== undefined) {
                queryParameters['pendingDocumentsOnly'] = requestParameters.pendingDocumentsOnly;
            }
            if (requestParameters.fromCreateDateTime !== undefined) {
                queryParameters['fromCreateDateTime'] = requestParameters.fromCreateDateTime;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.orderBy) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.sortOrder) {
                queryParameters['sortOrder'] = requestParameters.sortOrder;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalSupportingDocuments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FiscalSupportingDocumentsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to get the list of supporting documents for the reservations. <p><strong>OperationId:</strong>getSupportingDocuments</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get supporting documents details.
     */
    getFiscalSupportingDocuments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFiscalSupportingDocumentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    getFixedChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFixedCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFixedCharges.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FixedChargesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    getFixedCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFixedChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get folios
     */
    getFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolio.');
            }
            const queryParameters = {};
            if (requestParameters.guestPayOnly !== undefined) {
                queryParameters['guestPayOnly'] = requestParameters.guestPayOnly;
            }
            if (requestParameters.includeFolioHistory !== undefined) {
                queryParameters['includeFolioHistory'] = requestParameters.includeFolioHistory;
            }
            if (requestParameters.reservationBalanceOnly !== undefined) {
                queryParameters['reservationBalanceOnly'] = requestParameters.reservationBalanceOnly;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.end) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.folioWindowNo) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.limit) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.start) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.summaryOnly !== undefined) {
                queryParameters['summaryOnly'] = requestParameters.summaryOnly;
            }
            if (requestParameters.groupType !== undefined) {
                queryParameters['groupType'] = requestParameters.groupType;
            }
            if (requestParameters.exchangeCurrency !== undefined) {
                queryParameters['exchangeCurrency'] = requestParameters.exchangeCurrency;
            }
            if (requestParameters.calculateCollectingAgentTaxes !== undefined) {
                queryParameters['calculateCollectingAgentTaxes'] = requestParameters.calculateCollectingAgentTaxes;
            }
            if (requestParameters.vATOffset !== undefined) {
                queryParameters['vATOffset'] = requestParameters.vATOffset;
            }
            if (requestParameters.includeDepositTaxes !== undefined) {
                queryParameters['includeDepositTaxes'] = requestParameters.includeDepositTaxes;
            }
            if (requestParameters.simpleFolio !== undefined) {
                queryParameters['simpleFolio'] = requestParameters.simpleFolio;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get folios
     */
    getFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    getFolioHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioHistory.');
            }
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.aR !== undefined) {
                queryParameters['aR'] = requestParameters.aR;
            }
            if (requestParameters.checkOut !== undefined) {
                queryParameters['checkOut'] = requestParameters.checkOut;
            }
            if (requestParameters.creditBill !== undefined) {
                queryParameters['creditBill'] = requestParameters.creditBill;
            }
            if (requestParameters.supplementalFolio !== undefined) {
                queryParameters['supplementalFolio'] = requestParameters.supplementalFolio;
            }
            if (requestParameters.includeAssociatedFolios !== undefined) {
                queryParameters['includeAssociatedFolios'] = requestParameters.includeAssociatedFolios;
            }
            if (requestParameters.noShow !== undefined) {
                queryParameters['noShow'] = requestParameters.noShow;
            }
            if (requestParameters.offlineFolio !== undefined) {
                queryParameters['offlineFolio'] = requestParameters.offlineFolio;
            }
            if (requestParameters.passerBy !== undefined) {
                queryParameters['passerBy'] = requestParameters.passerBy;
            }
            if (requestParameters.postIt !== undefined) {
                queryParameters['postIt'] = requestParameters.postIt;
            }
            if (requestParameters.videoCheckOut !== undefined) {
                queryParameters['videoCheckOut'] = requestParameters.videoCheckOut;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.reservationIdId !== undefined) {
                queryParameters['reservationIdId'] = requestParameters.reservationIdId;
            }
            if (requestParameters.reservationIdIdContext !== undefined) {
                queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.creditCardNo !== undefined) {
                queryParameters['creditCardNo'] = requestParameters.creditCardNo;
            }
            if (requestParameters.folioNo !== undefined) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.addresseeName !== undefined) {
                queryParameters['addresseeName'] = requestParameters.addresseeName;
            }
            if (requestParameters.fiscalFolioNo !== undefined) {
                queryParameters['fiscalFolioNo'] = requestParameters.fiscalFolioNo;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.partnerFiscalFolioStatusCode) {
                queryParameters['partnerFiscalFolioStatusCode'] = requestParameters.partnerFiscalFolioStatusCode;
            }
            if (requestParameters.customNumber !== undefined) {
                queryParameters['customNumber'] = requestParameters.customNumber;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folioHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioHistoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    getFolioHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    getFolioPrintersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioPrinters.');
            }
            const queryParameters = {};
            if (requestParameters.allFolioWindow !== undefined) {
                queryParameters['allFolioWindow'] = requestParameters.allFolioWindow;
            }
            if (requestParameters.correction !== undefined) {
                queryParameters['correction'] = requestParameters.correction;
            }
            if (requestParameters.debitFolio !== undefined) {
                queryParameters['debitFolio'] = requestParameters.debitFolio;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.manualFolioNo !== undefined) {
                queryParameters['manualFolioNo'] = requestParameters.manualFolioNo;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.fiscalTerminalId !== undefined) {
                queryParameters['fiscalTerminalId'] = requestParameters.fiscalTerminalId;
            }
            if (requestParameters.eventType !== undefined) {
                queryParameters['eventType'] = requestParameters.eventType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.profileIdId !== undefined) {
                queryParameters['profileIdId'] = requestParameters.profileIdId;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.exchangeRate !== undefined) {
                queryParameters['exchangeRate'] = requestParameters.exchangeRate;
            }
            if (requestParameters.associatedBillNumber !== undefined) {
                queryParameters['associatedBillNumber'] = requestParameters.associatedBillNumber;
            }
            if (requestParameters.associatedBillFolioType !== undefined) {
                queryParameters['associatedBillFolioType'] = requestParameters.associatedBillFolioType;
            }
            if (requestParameters.associatedBillQueueName !== undefined) {
                queryParameters['associatedBillQueueName'] = requestParameters.associatedBillQueueName;
            }
            if (requestParameters.associatedBillFiscalBillNumber !== undefined) {
                queryParameters['associatedBillFiscalBillNumber'] = requestParameters.associatedBillFiscalBillNumber;
            }
            if (requestParameters.associatedBillGenerationDate !== undefined) {
                queryParameters['associatedBillGenerationDate'] = requestParameters.associatedBillGenerationDate;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            if (requestParameters.generateFiscalFolio !== undefined) {
                queryParameters['generateFiscalFolio'] = requestParameters.generateFiscalFolio;
            }
            if (requestParameters.queueName !== undefined) {
                queryParameters['queueName'] = requestParameters.queueName;
            }
            if (requestParameters.folioSeqId !== undefined) {
                queryParameters['folioSeqId'] = requestParameters.folioSeqId;
            }
            if (requestParameters.fiscalFolioInstruction !== undefined) {
                queryParameters['fiscalFolioInstruction'] = requestParameters.fiscalFolioInstruction;
            }
            if (requestParameters.transactionServiceType !== undefined) {
                queryParameters['transactionServiceType'] = requestParameters.transactionServiceType;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folioPrinters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioPrintersFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    getFolioPrinters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioPrintersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    getFolioTaxPaymentsInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFolioTaxPaymentsInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioTaxPaymentsInfo.');
            }
            const queryParameters = {};
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.track2Data !== undefined) {
                queryParameters['track2Data'] = requestParameters.track2Data;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.amountAmount !== undefined) {
                queryParameters['amountAmount'] = requestParameters.amountAmount;
            }
            if (requestParameters.amountCurrencyCode !== undefined) {
                queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
            }
            if (requestParameters.percent !== undefined) {
                queryParameters['percent'] = requestParameters.percent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.uniqueIdId !== undefined) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.uniqueIdIdContext !== undefined) {
                queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
            }
            if (requestParameters.uniqueIdType !== undefined) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailFormat !== undefined) {
                queryParameters['emailFormat'] = requestParameters.emailFormat;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.orderSequence !== undefined) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            if (requestParameters.approvalCode !== undefined) {
                queryParameters['approvalCode'] = requestParameters.approvalCode;
            }
            if (requestParameters.originalAuthSequence !== undefined) {
                queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
            }
            if (requestParameters.vendorTranId !== undefined) {
                queryParameters['vendorTranId'] = requestParameters.vendorTranId;
            }
            if (requestParameters.approvalAmountAmount !== undefined) {
                queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.postingAmountAmount !== undefined) {
                queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
            }
            if (requestParameters.postingAmountCurrencyCode !== undefined) {
                queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
            }
            if (requestParameters.postingReference !== undefined) {
                queryParameters['postingReference'] = requestParameters.postingReference;
            }
            if (requestParameters.postingRemark !== undefined) {
                queryParameters['postingRemark'] = requestParameters.postingRemark;
            }
            if (requestParameters.comments !== undefined) {
                queryParameters['comments'] = requestParameters.comments;
            }
            if (requestParameters.applyCCSurcharge !== undefined) {
                queryParameters['applyCCSurcharge'] = requestParameters.applyCCSurcharge;
            }
            if (requestParameters.manualPaymentTaxInfoFolioWindowNo !== undefined) {
                queryParameters['manualPaymentTaxInfoFolioWindowNo'] = requestParameters.manualPaymentTaxInfoFolioWindowNo;
            }
            if (requestParameters.transactionCode !== undefined) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.transactionDate !== undefined) {
                queryParameters['transactionDate'] = requestParameters.transactionDate;
            }
            if (requestParameters.transactionDescription !== undefined) {
                queryParameters['transactionDescription'] = requestParameters.transactionDescription;
            }
            if (requestParameters.transactionNo !== undefined) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.taxInvoiceNo !== undefined) {
                queryParameters['taxInvoiceNo'] = requestParameters.taxInvoiceNo;
            }
            if (requestParameters.paymentType !== undefined) {
                queryParameters['paymentType'] = requestParameters.paymentType;
            }
            if (requestParameters.manualPaymentTaxAmount !== undefined) {
                queryParameters['manualPaymentTaxAmount'] = requestParameters.manualPaymentTaxAmount;
            }
            if (requestParameters.manualPaymentTaxCurrencyCode !== undefined) {
                queryParameters['manualPaymentTaxCurrencyCode'] = requestParameters.manualPaymentTaxCurrencyCode;
            }
            if (requestParameters.taxableAmountAmount !== undefined) {
                queryParameters['taxableAmountAmount'] = requestParameters.taxableAmountAmount;
            }
            if (requestParameters.taxableAmountCurrencyCode !== undefined) {
                queryParameters['taxableAmountCurrencyCode'] = requestParameters.taxableAmountCurrencyCode;
            }
            if (requestParameters.nonTaxableAmountAmount !== undefined) {
                queryParameters['nonTaxableAmountAmount'] = requestParameters.nonTaxableAmountAmount;
            }
            if (requestParameters.nonTaxableAmountCurrencyCode !== undefined) {
                queryParameters['nonTaxableAmountCurrencyCode'] = requestParameters.nonTaxableAmountCurrencyCode;
            }
            if (requestParameters.availableCreditAmount !== undefined) {
                queryParameters['availableCreditAmount'] = requestParameters.availableCreditAmount;
            }
            if (requestParameters.availableCreditCurrencyCode !== undefined) {
                queryParameters['availableCreditCurrencyCode'] = requestParameters.availableCreditCurrencyCode;
            }
            if (requestParameters.paymentDate !== undefined) {
                queryParameters['paymentDate'] = requestParameters.paymentDate;
            }
            if (requestParameters.taxFolioWindowNo) {
                queryParameters['taxFolioWindowNo'] = requestParameters.taxFolioWindowNo;
            }
            if (requestParameters.taxTransactionCode) {
                queryParameters['taxTransactionCode'] = requestParameters.taxTransactionCode;
            }
            if (requestParameters.taxTransactionDate) {
                queryParameters['taxTransactionDate'] = requestParameters.taxTransactionDate;
            }
            if (requestParameters.taxTransactionDescription) {
                queryParameters['taxTransactionDescription'] = requestParameters.taxTransactionDescription;
            }
            if (requestParameters.taxTransactionNo) {
                queryParameters['taxTransactionNo'] = requestParameters.taxTransactionNo;
            }
            if (requestParameters.taxTaxInvoiceNo) {
                queryParameters['taxTaxInvoiceNo'] = requestParameters.taxTaxInvoiceNo;
            }
            if (requestParameters.taxPaymentType) {
                queryParameters['taxPaymentType'] = requestParameters.taxPaymentType;
            }
            if (requestParameters.creditablePaymentTaxesAmount !== undefined) {
                queryParameters['creditablePaymentTaxesAmount'] = requestParameters.creditablePaymentTaxesAmount;
            }
            if (requestParameters.creditablePaymentTaxesCurrencyCode !== undefined) {
                queryParameters['creditablePaymentTaxesCurrencyCode'] = requestParameters.creditablePaymentTaxesCurrencyCode;
            }
            if (requestParameters.creditablePaymentTaxableAmount !== undefined) {
                queryParameters['creditablePaymentTaxableAmount'] = requestParameters.creditablePaymentTaxableAmount;
            }
            if (requestParameters.creditablePaymentTaxableCurrencyCode !== undefined) {
                queryParameters['creditablePaymentTaxableCurrencyCode'] = requestParameters.creditablePaymentTaxableCurrencyCode;
            }
            if (requestParameters.creditablePaymentNonTaxableAmount !== undefined) {
                queryParameters['creditablePaymentNonTaxableAmount'] = requestParameters.creditablePaymentNonTaxableAmount;
            }
            if (requestParameters.creditablePaymentNonTaxableCurrencyCode !== undefined) {
                queryParameters['creditablePaymentNonTaxableCurrencyCode'] = requestParameters.creditablePaymentNonTaxableCurrencyCode;
            }
            if (requestParameters.availableTaxCreditAmount !== undefined) {
                queryParameters['availableTaxCreditAmount'] = requestParameters.availableTaxCreditAmount;
            }
            if (requestParameters.availableTaxCreditCurrencyCode !== undefined) {
                queryParameters['availableTaxCreditCurrencyCode'] = requestParameters.availableTaxCreditCurrencyCode;
            }
            if (requestParameters.taxPaymentDate) {
                queryParameters['taxPaymentDate'] = requestParameters.taxPaymentDate;
            }
            if (requestParameters.terminalId !== undefined) {
                queryParameters['terminalId'] = requestParameters.terminalId;
            }
            if (requestParameters.overrideInsufficientCC !== undefined) {
                queryParameters['overrideInsufficientCC'] = requestParameters.overrideInsufficientCC;
            }
            if (requestParameters.changeDueAmount !== undefined) {
                queryParameters['changeDueAmount'] = requestParameters.changeDueAmount;
            }
            if (requestParameters.changeDueAmountCurrencyCode !== undefined) {
                queryParameters['changeDueAmountCurrencyCode'] = requestParameters.changeDueAmountCurrencyCode;
            }
            if (requestParameters.overrideARCreditLimit !== undefined) {
                queryParameters['overrideARCreditLimit'] = requestParameters.overrideARCreditLimit;
            }
            if (requestParameters.applyCurrencyTaxes !== undefined) {
                queryParameters['applyCurrencyTaxes'] = requestParameters.applyCurrencyTaxes;
            }
            if (requestParameters.vATOffset !== undefined) {
                queryParameters['vATOffset'] = requestParameters.vATOffset;
            }
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.reservationIdIdContext !== undefined) {
                queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.profileIdId !== undefined) {
                queryParameters['profileIdId'] = requestParameters.profileIdId;
            }
            if (requestParameters.profileIdIdContext !== undefined) {
                queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/folioTaxPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioTaxPaymentsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    getFolioTaxPaymentsInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioTaxPaymentsInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    getFolioTransactionDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioTransactionDetails.');
            }
            const queryParameters = {};
            if (requestParameters.includeGenerates !== undefined) {
                queryParameters['includeGenerates'] = requestParameters.includeGenerates;
            }
            if (requestParameters.transactionNo) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.includeExchangeInformation !== undefined) {
                queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactionDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioTransactionDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    getFolioTransactionDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioTransactionDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    getFolioTypeNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioTypeName.');
            }
            const queryParameters = {};
            if (requestParameters.internalFolioWindowId !== undefined) {
                queryParameters['internalFolioWindowId'] = requestParameters.internalFolioWindowId;
            }
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.folioReportGroup !== undefined) {
                queryParameters['folioReportGroup'] = requestParameters.folioReportGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folioTypeNames`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioTypeNameInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    getFolioTypeName(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioTypeNameRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    getFolioTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioTypes.');
            }
            const queryParameters = {};
            if (requestParameters.includeCompress !== undefined) {
                queryParameters['includeCompress'] = requestParameters.includeCompress;
            }
            if (requestParameters.includeCredit !== undefined) {
                queryParameters['includeCredit'] = requestParameters.includeCredit;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folioTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioTypesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    getFolioTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status
     */
    getGamingRequestStatusInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getGamingRequestStatusInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGamingRequestStatusInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/compRequestStatus`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GamingRequestStatusInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status
     */
    getGamingRequestStatusInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGamingRequestStatusInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Guests Transactions
     */
    getGuestsTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGuestsTransactions.');
            }
            if (requestParameters.reservationList === null || requestParameters.reservationList === undefined) {
                throw new runtime.RequiredError('reservationList', 'Required parameter requestParameters.reservationList was null or undefined when calling getGuestsTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.reservationList) {
                queryParameters['reservationList'] = requestParameters.reservationList;
            }
            if (requestParameters.includeGenerates !== undefined) {
                queryParameters['includeGenerates'] = requestParameters.includeGenerates;
            }
            if (requestParameters.includeTransactionsWithARInvoiceNo !== undefined) {
                queryParameters['includeTransactionsWithARInvoiceNo'] = requestParameters.includeTransactionsWithARInvoiceNo;
            }
            if (requestParameters.includeTransactionsWithFolioNo !== undefined) {
                queryParameters['includeTransactionsWithFolioNo'] = requestParameters.includeTransactionsWithFolioNo;
            }
            if (requestParameters.includeTransactionsWithManualPostingOnly !== undefined) {
                queryParameters['includeTransactionsWithManualPostingOnly'] = requestParameters.includeTransactionsWithManualPostingOnly;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.transactionNo) {
                queryParameters['transactionNo'] = requestParameters.transactionNo;
            }
            if (requestParameters.transactionGroup) {
                queryParameters['transactionGroup'] = requestParameters.transactionGroup;
            }
            if (requestParameters.transactionSubGroup) {
                queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
            }
            if (requestParameters.billingCode) {
                queryParameters['billingCode'] = requestParameters.billingCode;
            }
            if (requestParameters.billingHotelId) {
                queryParameters['billingHotelId'] = requestParameters.billingHotelId;
            }
            if (requestParameters.desc) {
                queryParameters['desc'] = requestParameters.desc;
            }
            if (requestParameters.routingInstructionsId) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.trxCodeWildCard !== undefined) {
                queryParameters['trxCodeWildCard'] = requestParameters.trxCodeWildCard;
            }
            if (requestParameters.trxDescriptionWildCard !== undefined) {
                queryParameters['trxDescriptionWildCard'] = requestParameters.trxDescriptionWildCard;
            }
            if (requestParameters.checkNumberWildCard !== undefined) {
                queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
            }
            if (requestParameters.referenceNumberWildCard !== undefined) {
                queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
            }
            if (requestParameters.supplementWildCard !== undefined) {
                queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
            }
            if (requestParameters.windowNo) {
                queryParameters['windowNo'] = requestParameters.windowNo;
            }
            if (requestParameters.cashieringTransactionType) {
                queryParameters['cashieringTransactionType'] = requestParameters.cashieringTransactionType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.commissionable !== undefined) {
                queryParameters['commissionable'] = requestParameters.commissionable;
            }
            if (requestParameters.serviceRecoveryAllowed !== undefined) {
                queryParameters['serviceRecoveryAllowed'] = requestParameters.serviceRecoveryAllowed;
            }
            if (requestParameters.postedTransactionType) {
                queryParameters['postedTransactionType'] = requestParameters.postedTransactionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestsTransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Guests Transactions
     */
    getGuestsTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuestsTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to fetch the credit card wallet from the specified hotel and profile. <p><strong>OperationId: getHotelCreditCardWallet</strong></p>
     * credit card wallet
     */
    getHotelCreditCardWalletRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelCreditCardWallet.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getHotelCreditCardWallet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/creditCardWallet`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardWalletFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to fetch the credit card wallet from the specified hotel and profile. <p><strong>OperationId: getHotelCreditCardWallet</strong></p>
     * credit card wallet
     */
    getHotelCreditCardWallet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelCreditCardWalletRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    getHotelRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelRevenue.');
            }
            const queryParameters = {};
            if (requestParameters.businessDate !== undefined) {
                queryParameters['businessDate'] = requestParameters.businessDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/revenue`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HotelRevenueDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    getHotelRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    getMaturedDepositsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getMaturedDeposits.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getMaturedDeposits.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MaturedDepositsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    getMaturedDeposits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMaturedDepositsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    getPostBillingChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getPostBillingCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPostBillingCharges.');
            }
            const queryParameters = {};
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.folioWindowNo) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.chargeCashierId) {
                queryParameters['chargeCashierId'] = requestParameters.chargeCashierId;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.postingQuantity) {
                queryParameters['postingQuantity'] = requestParameters.postingQuantity;
            }
            if (requestParameters.postingReference) {
                queryParameters['postingReference'] = requestParameters.postingReference;
            }
            if (requestParameters.postingRemark) {
                queryParameters['postingRemark'] = requestParameters.postingRemark;
            }
            if (requestParameters.checkNumber) {
                queryParameters['checkNumber'] = requestParameters.checkNumber;
            }
            if (requestParameters.arrangementCode) {
                queryParameters['arrangementCode'] = requestParameters.arrangementCode;
            }
            if (requestParameters.applyRoutingInstructions) {
                queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
            }
            if (requestParameters.usePackageAllowance) {
                queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
            }
            if (requestParameters.autoPosting) {
                queryParameters['autoPosting'] = requestParameters.autoPosting;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.reservationIdIdContext !== undefined) {
                queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.option) {
                queryParameters['option'] = requestParameters.option;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BillingChargesStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    getPostBillingCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPostBillingChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    getPostingActivityDetailRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getPostingActivityDetail.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPostingActivityDetail.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.module !== undefined) {
                queryParameters['module'] = requestParameters.module;
            }
            if (requestParameters.logDate !== undefined) {
                queryParameters['logDate'] = requestParameters.logDate;
            }
            if (requestParameters.refActionId !== undefined) {
                queryParameters['refActionId'] = requestParameters.refActionId;
            }
            if (requestParameters.logUserId !== undefined) {
                queryParameters['logUserId'] = requestParameters.logUserId;
            }
            if (requestParameters.logUserName !== undefined) {
                queryParameters['logUserName'] = requestParameters.logUserName;
            }
            if (requestParameters.machineStation !== undefined) {
                queryParameters['machineStation'] = requestParameters.machineStation;
            }
            if (requestParameters.croCode !== undefined) {
                queryParameters['croCode'] = requestParameters.croCode;
            }
            if (requestParameters.actionType !== undefined) {
                queryParameters['actionType'] = requestParameters.actionType;
            }
            if (requestParameters.actionDescription !== undefined) {
                queryParameters['actionDescription'] = requestParameters.actionDescription;
            }
            if (requestParameters.iPAddress !== undefined) {
                queryParameters['iPAddress'] = requestParameters.iPAddress;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/postingActivities`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostingActivityDetailFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    getPostingActivityDetail(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPostingActivityDetailRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    getPostingSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPostingSummary.');
            }
            const queryParameters = {};
            if (requestParameters.includeGenerates !== undefined) {
                queryParameters['includeGenerates'] = requestParameters.includeGenerates;
            }
            if (requestParameters.postingDate !== undefined) {
                queryParameters['postingDate'] = requestParameters.postingDate;
            }
            if (requestParameters.checkPostings !== undefined) {
                queryParameters['checkPostings'] = requestParameters.checkPostings;
            }
            if (requestParameters.postingsByExternalSystem !== undefined) {
                queryParameters['postingsByExternalSystem'] = requestParameters.postingsByExternalSystem;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.postingSummaryType !== undefined) {
                queryParameters['postingSummaryType'] = requestParameters.postingSummaryType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/postingDates/date/postingSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostingSummaryListFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    getPostingSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPostingSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    getPostingsForRefreshRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.targetReservationId === null || requestParameters.targetReservationId === undefined) {
                throw new runtime.RequiredError('targetReservationId', 'Required parameter requestParameters.targetReservationId was null or undefined when calling getPostingsForRefresh.');
            }
            if (requestParameters.sourceReservationId === null || requestParameters.sourceReservationId === undefined) {
                throw new runtime.RequiredError('sourceReservationId', 'Required parameter requestParameters.sourceReservationId was null or undefined when calling getPostingsForRefresh.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPostingsForRefresh.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.targetResvNameIdContext !== undefined) {
                queryParameters['targetResvNameIdContext'] = requestParameters.targetResvNameIdContext;
            }
            if (requestParameters.targetResvNameIdType !== undefined) {
                queryParameters['targetResvNameIdType'] = requestParameters.targetResvNameIdType;
            }
            if (requestParameters.daily !== undefined) {
                queryParameters['daily'] = requestParameters.daily;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.transactionHotelId) {
                queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
            }
            if (requestParameters.printTrxReceipt) {
                queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.transactionGroup) {
                queryParameters['transactionGroup'] = requestParameters.transactionGroup;
            }
            if (requestParameters.transactionSubGroup) {
                queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
            }
            if (requestParameters.universalProductCode) {
                queryParameters['universalProductCode'] = requestParameters.universalProductCode;
            }
            if (requestParameters.routingInstructionsId) {
                queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
            }
            if (requestParameters.articleCode) {
                queryParameters['articleCode'] = requestParameters.articleCode;
            }
            if (requestParameters.articleHotelId) {
                queryParameters['articleHotelId'] = requestParameters.articleHotelId;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.articleDescription) {
                queryParameters['articleDescription'] = requestParameters.articleDescription;
            }
            if (requestParameters.articleTransactionCode) {
                queryParameters['articleTransactionCode'] = requestParameters.articleTransactionCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.availableForPostIt !== undefined) {
                queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
            }
            if (requestParameters.color !== undefined) {
                queryParameters['color'] = requestParameters.color;
            }
            if (requestParameters.articleUniversalProductCode) {
                queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
            }
            if (requestParameters.billingCode) {
                queryParameters['billingCode'] = requestParameters.billingCode;
            }
            if (requestParameters.billingHotelId) {
                queryParameters['billingHotelId'] = requestParameters.billingHotelId;
            }
            if (requestParameters.desc) {
                queryParameters['desc'] = requestParameters.desc;
            }
            if (requestParameters.billingInstructionRoutingInstructionsId) {
                queryParameters['billingInstructionRoutingInstructionsId'] = requestParameters.billingInstructionRoutingInstructionsId;
            }
            if (requestParameters.creditLimit !== undefined) {
                queryParameters['creditLimit'] = requestParameters.creditLimit;
            }
            if (requestParameters.percentageLimit !== undefined) {
                queryParameters['percentageLimit'] = requestParameters.percentageLimit;
            }
            if (requestParameters.covers !== undefined) {
                queryParameters['covers'] = requestParameters.covers;
            }
            if (requestParameters.limitUsed !== undefined) {
                queryParameters['limitUsed'] = requestParameters.limitUsed;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.routingLinkIdIdContext !== undefined) {
                queryParameters['routingLinkIdIdContext'] = requestParameters.routingLinkIdIdContext;
            }
            if (requestParameters.routingLinkIdType !== undefined) {
                queryParameters['routingLinkIdType'] = requestParameters.routingLinkIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostingsForRefreshFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    getPostingsForRefresh(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPostingsForRefreshRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Receipt History
     */
    getReceiptHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReceiptHistory.');
            }
            const queryParameters = {};
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.toDate !== undefined) {
                queryParameters['toDate'] = requestParameters.toDate;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.receiptTypeName !== undefined) {
                queryParameters['receiptTypeName'] = requestParameters.receiptTypeName;
            }
            if (requestParameters.taxInvoice !== undefined) {
                queryParameters['taxInvoice'] = requestParameters.taxInvoice;
            }
            if (requestParameters.receiptNo !== undefined) {
                queryParameters['receiptNo'] = requestParameters.receiptNo;
            }
            if (requestParameters.customNumber !== undefined) {
                queryParameters['customNumber'] = requestParameters.customNumber;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/receiptHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReceiptHistoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Receipt History
     */
    getReceiptHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReceiptHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    getReservationPackageOptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationPackageOptions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationPackageOptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packageOptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPackageOptionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    getReservationPackageOptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationPackageOptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    getReservationRevenueBucketTotalsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationRevenueBucketTotals.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationRevenueBucketTotals.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.revenueBucketType !== undefined) {
                queryParameters['revenueBucketType'] = requestParameters.revenueBucketType;
            }
            if (requestParameters.compRevenue !== undefined) {
                queryParameters['compRevenue'] = requestParameters.compRevenue;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/revenueBuckets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RevenueBucketTotalsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    getReservationRevenueBucketTotals(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationRevenueBucketTotalsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to fetch the list of vouchers from a reservation. <p><strong>OperationId:</strong>getReservationVouchers</p>
     * Get the list of vouchers generated for a reservation.
     */
    getReservationVouchersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationVouchers.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationVouchers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/vouchers`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationVouchersTypeFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to fetch the list of vouchers from a reservation. <p><strong>OperationId:</strong>getReservationVouchers</p>
     * Get the list of vouchers generated for a reservation.
     */
    getReservationVouchers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationVouchersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to fetch the list of vouchers from a list of reservations. <p><strong>OperationId:</strong>getReservationsVouchers</p>
     * Get the list of vouchers generated from a list of reservations.
     */
    getReservationsVouchersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsVouchers.');
            }
            if (requestParameters.guestId === null || requestParameters.guestId === undefined) {
                throw new runtime.RequiredError('guestId', 'Required parameter requestParameters.guestId was null or undefined when calling getReservationsVouchers.');
            }
            const queryParameters = {};
            if (requestParameters.guestId) {
                queryParameters['guestId'] = requestParameters.guestId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/vouchers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationVouchersTypeFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to fetch the list of vouchers from a list of reservations. <p><strong>OperationId:</strong>getReservationsVouchers</p>
     * Get the list of vouchers generated from a list of reservations.
     */
    getReservationsVouchers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsVouchersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    getRoundingDifferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.event !== undefined) {
                queryParameters['event'] = requestParameters.event;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardIdId !== undefined) {
                queryParameters['cardIdId'] = requestParameters.cardIdId;
            }
            if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
                queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmountNeededAmount !== undefined) {
                queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.amountAmount !== undefined) {
                queryParameters['amountAmount'] = requestParameters.amountAmount;
            }
            if (requestParameters.amountCurrencyCode !== undefined) {
                queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
            }
            if (requestParameters.percent !== undefined) {
                queryParameters['percent'] = requestParameters.percent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.uniqueIdId !== undefined) {
                queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailFormat !== undefined) {
                queryParameters['emailFormat'] = requestParameters.emailFormat;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.orderSequence !== undefined) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/roundingDifference`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoundingDifferenceAmountFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    getRoundingDifference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoundingDifferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get routing instructions
     */
    getRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.includeWindowRouting !== undefined) {
                queryParameters['includeWindowRouting'] = requestParameters.includeWindowRouting;
            }
            if (requestParameters.includeRoomRouting !== undefined) {
                queryParameters['includeRoomRouting'] = requestParameters.includeRoomRouting;
            }
            if (requestParameters.includeCompRouting !== undefined) {
                queryParameters['includeCompRouting'] = requestParameters.includeCompRouting;
            }
            if (requestParameters.includeCompRoutingRequests !== undefined) {
                queryParameters['includeCompRoutingRequests'] = requestParameters.includeCompRoutingRequests;
            }
            if (requestParameters.effectiveOn !== undefined) {
                queryParameters['effectiveOn'] = requestParameters.effectiveOn;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoutingInstructionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get routing instructions
     */
    getRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    getStoredFolioDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling getStoredFolioDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getStoredFolioDetails.');
            }
            const queryParameters = {};
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioStatus !== undefined) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StoredFolioDetailsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    getStoredFolioDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStoredFolioDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    getTransactionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTransactionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.event !== undefined) {
                queryParameters['event'] = requestParameters.event;
            }
            if (requestParameters.includeArticles !== undefined) {
                queryParameters['includeArticles'] = requestParameters.includeArticles;
            }
            if (requestParameters.userRoleTransactions !== undefined) {
                queryParameters['userRoleTransactions'] = requestParameters.userRoleTransactions;
            }
            if (requestParameters.manualPostAllowed !== undefined) {
                queryParameters['manualPostAllowed'] = requestParameters.manualPostAllowed;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioNo !== undefined) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus !== undefined) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            if (requestParameters.trxServiceType !== undefined) {
                queryParameters['trxServiceType'] = requestParameters.trxServiceType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionCodesFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    getTransactionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Trx Covers. <p><strong>OperationId:</strong>getTransactionCovers</p>
     * Get transaction covers
     */
    getTransactionCoversRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTransactionCovers.');
            }
            if (requestParameters.coversDate === null || requestParameters.coversDate === undefined) {
                throw new runtime.RequiredError('coversDate', 'Required parameter requestParameters.coversDate was null or undefined when calling getTransactionCovers.');
            }
            const queryParameters = {};
            if (requestParameters.coversDate !== undefined) {
                queryParameters['coversDate'] = requestParameters.coversDate;
            }
            if (requestParameters.transactionCode) {
                queryParameters['transactionCode'] = requestParameters.transactionCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/covers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CoversInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Trx Covers. <p><strong>OperationId:</strong>getTransactionCovers</p>
     * Get transaction covers
     */
    getTransactionCovers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionCoversRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    getValidateFiscalPrintingDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getValidateFiscalPrintingDetails.');
            }
            const queryParameters = {};
            if (requestParameters.folioView !== undefined) {
                queryParameters['folioView'] = requestParameters.folioView;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.fetchInstruction) {
                queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
            }
            if (requestParameters.profileIdId !== undefined) {
                queryParameters['profileIdId'] = requestParameters.profileIdId;
            }
            if (requestParameters.fiscalServiceMode !== undefined) {
                queryParameters['fiscalServiceMode'] = requestParameters.fiscalServiceMode;
            }
            if (requestParameters.cashieringEventType !== undefined) {
                queryParameters['cashieringEventType'] = requestParameters.cashieringEventType;
            }
            if (requestParameters.balance !== undefined) {
                queryParameters['balance'] = requestParameters.balance;
            }
            if (requestParameters.queueName !== undefined) {
                queryParameters['queueName'] = requestParameters.queueName;
            }
            if (requestParameters.debitFolio !== undefined) {
                queryParameters['debitFolio'] = requestParameters.debitFolio;
            }
            if (requestParameters.simpleFolio !== undefined) {
                queryParameters['simpleFolio'] = requestParameters.simpleFolio;
            }
            if (requestParameters.manualFolioNo !== undefined) {
                queryParameters['manualFolioNo'] = requestParameters.manualFolioNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalPrinting`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FiscalCallStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    getValidateFiscalPrintingDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getValidateFiscalPrintingDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    getfetchStagedTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getfetchStagedTransactions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getfetchStagedTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId2 !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId2;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fetchStagedTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StagedTransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    getfetchStagedTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getfetchStagedTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    isDepositRefundEligibleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling isDepositRefundEligible.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling isDepositRefundEligible.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling isDepositRefundEligible.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositRefundEligibleCheckFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    isDepositRefundEligible(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isDepositRefundEligibleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    linkReservationPackageAllowanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.destinationReservationId === null || requestParameters.destinationReservationId === undefined) {
                throw new runtime.RequiredError('destinationReservationId', 'Required parameter requestParameters.destinationReservationId was null or undefined when calling linkReservationPackageAllowance.');
            }
            if (requestParameters.sourceReservationId === null || requestParameters.sourceReservationId === undefined) {
                throw new runtime.RequiredError('sourceReservationId', 'Required parameter requestParameters.sourceReservationId was null or undefined when calling linkReservationPackageAllowance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling linkReservationPackageAllowance.');
            }
            if (requestParameters.linkReservationPackageAllowance === null || requestParameters.linkReservationPackageAllowance === undefined) {
                throw new runtime.RequiredError('linkReservationPackageAllowance', 'Required parameter requestParameters.linkReservationPackageAllowance was null or undefined when calling linkReservationPackageAllowance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/destinationReservations/{destinationReservationId}/packageAllowance/links`.replace(`{${"destinationReservationId"}}`, encodeURIComponent(String(requestParameters.destinationReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LinkReservationPackageAllowanceToJSON)(requestParameters.linkReservationPackageAllowance),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    linkReservationPackageAllowance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.linkReservationPackageAllowanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    postAdvanceFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAdvanceFolio.');
            }
            if (requestParameters.batchAdvanceFolio === null || requestParameters.batchAdvanceFolio === undefined) {
                throw new runtime.RequiredError('batchAdvanceFolio', 'Required parameter requestParameters.batchAdvanceFolio was null or undefined when calling postAdvanceFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/advanceFolio/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchAdvanceFolioToJSON)(requestParameters.batchAdvanceFolio),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    postAdvanceFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAdvanceFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    postAdvanceRoomChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postAdvanceRoomCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAdvanceRoomCharges.');
            }
            if (requestParameters.advanceRoomCharges === null || requestParameters.advanceRoomCharges === undefined) {
                throw new runtime.RequiredError('advanceRoomCharges', 'Required parameter requestParameters.advanceRoomCharges was null or undefined when calling postAdvanceRoomCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AdvanceRoomChargesToJSON)(requestParameters.advanceRoomCharges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdvanceRoomChargesReservationInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    postAdvanceRoomCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAdvanceRoomChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    postArticlesSaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postArticlesSale.');
            }
            if (requestParameters.articlesSaleCriteria === null || requestParameters.articlesSaleCriteria === undefined) {
                throw new runtime.RequiredError('articlesSaleCriteria', 'Required parameter requestParameters.articlesSaleCriteria was null or undefined when calling postArticlesSale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/articlesSale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ArticlesSaleCriteriaToJSON)(requestParameters.articlesSaleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ArticlesSaleFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    postArticlesSale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postArticlesSaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch
     */
    postAutoCheckoutReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAutoCheckoutReservations.');
            }
            if (requestParameters.batchAutoCheckoutReservation === null || requestParameters.batchAutoCheckoutReservation === undefined) {
                throw new runtime.RequiredError('batchAutoCheckoutReservation', 'Required parameter requestParameters.batchAutoCheckoutReservation was null or undefined when calling postAutoCheckoutReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchAutoCheckoutReservationToJSON)(requestParameters.batchAutoCheckoutReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BatchAutoCheckoutDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch
     */
    postAutoCheckoutReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAutoCheckoutReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new membership award payment transaction. <p><strong>OperationId:</strong>postAwardTransaction</p>
     * Post a membership award payment transaction.
     */
    postAwardTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAwardTransaction.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postAwardTransaction.');
            }
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling postAwardTransaction.');
            }
            if (requestParameters.awardDetails === null || requestParameters.awardDetails === undefined) {
                throw new runtime.RequiredError('awardDetails', 'Required parameter requestParameters.awardDetails was null or undefined when calling postAwardTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/memberships/{membershipId}/awardTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwardPaymentDetailsToJSON)(requestParameters.awardDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new membership award payment transaction. <p><strong>OperationId:</strong>postAwardTransaction</p>
     * Post a membership award payment transaction.
     */
    postAwardTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAwardTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    postBatchAutoSettlementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBatchAutoSettlement.');
            }
            if (requestParameters.batchAutoSettlementCriteria === null || requestParameters.batchAutoSettlementCriteria === undefined) {
                throw new runtime.RequiredError('batchAutoSettlementCriteria', 'Required parameter requestParameters.batchAutoSettlementCriteria was null or undefined when calling postBatchAutoSettlement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchAutoSettlementCriteriaToJSON)(requestParameters.batchAutoSettlementCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    postBatchAutoSettlement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBatchAutoSettlementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    postBatchCCSettlementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBatchCCSettlements.');
            }
            if (requestParameters.ccBatchSettlementsProcessCriteria === null || requestParameters.ccBatchSettlementsProcessCriteria === undefined) {
                throw new runtime.RequiredError('ccBatchSettlementsProcessCriteria', 'Required parameter requestParameters.ccBatchSettlementsProcessCriteria was null or undefined when calling postBatchCCSettlements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ccSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CcBatchSettlementsProcessCriteriaToJSON)(requestParameters.ccBatchSettlementsProcessCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    postBatchCCSettlements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBatchCCSettlementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    postBatchDepositRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBatchDeposit.');
            }
            if (requestParameters.batchDeposit === null || requestParameters.batchDeposit === undefined) {
                throw new runtime.RequiredError('batchDeposit', 'Required parameter requestParameters.batchDeposit was null or undefined when calling postBatchDeposit.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/batchDeposits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchDepositToJSON)(requestParameters.batchDeposit),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    postBatchDeposit(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBatchDepositRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    postBedTaxInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBedTaxInfo.');
            }
            if (requestParameters.bedTaxCriteria === null || requestParameters.bedTaxCriteria === undefined) {
                throw new runtime.RequiredError('bedTaxCriteria', 'Required parameter requestParameters.bedTaxCriteria was null or undefined when calling postBedTaxInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BedTaxCriteriaToJSON)(requestParameters.bedTaxCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    postBedTaxInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBedTaxInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    postBillingChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postBillingCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBillingCharges.');
            }
            if (requestParameters.billingCharges === null || requestParameters.billingCharges === undefined) {
                throw new runtime.RequiredError('billingCharges', 'Required parameter requestParameters.billingCharges was null or undefined when calling postBillingCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingChargesToJSON)(requestParameters.billingCharges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BillingChargesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    postBillingCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBillingChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    postBillingChargesInBatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBillingChargesInBatch.');
            }
            if (requestParameters.billingChargesInBatchCriteria === null || requestParameters.billingChargesInBatchCriteria === undefined) {
                throw new runtime.RequiredError('billingChargesInBatchCriteria', 'Required parameter requestParameters.billingChargesInBatchCriteria was null or undefined when calling postBillingChargesInBatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingChargesInBatchCriteriaToJSON)(requestParameters.billingChargesInBatchCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostedBillingChargesInBatchFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    postBillingChargesInBatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBillingChargesInBatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    postBillingCheckChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.checkNumber === null || requestParameters.checkNumber === undefined) {
                throw new runtime.RequiredError('checkNumber', 'Required parameter requestParameters.checkNumber was null or undefined when calling postBillingCheckCharges.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postBillingCheckCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBillingCheckCharges.');
            }
            if (requestParameters.billingCheckChargesCriteria === null || requestParameters.billingCheckChargesCriteria === undefined) {
                throw new runtime.RequiredError('billingCheckChargesCriteria', 'Required parameter requestParameters.billingCheckChargesCriteria was null or undefined when calling postBillingCheckCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingCheckChargesCriteriaToJSON)(requestParameters.billingCheckChargesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    postBillingCheckCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBillingCheckChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    postBillingPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postBillingPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBillingPayment.');
            }
            if (requestParameters.billingPayment === null || requestParameters.billingPayment === undefined) {
                throw new runtime.RequiredError('billingPayment', 'Required parameter requestParameters.billingPayment was null or undefined when calling postBillingPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/payments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingPaymentToJSON)(requestParameters.billingPayment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostedBillingPaymentFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    postBillingPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBillingPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create multiple Prepaid Cards. <p><strong>OperationId:</strong>postBulkPrepaidCards</p>
     * Create multiple Prepaid Cards
     */
    postBulkPrepaidCardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBulkPrepaidCards.');
            }
            if (requestParameters.bulkPrepaidCardCriteria === null || requestParameters.bulkPrepaidCardCriteria === undefined) {
                throw new runtime.RequiredError('bulkPrepaidCardCriteria', 'Required parameter requestParameters.bulkPrepaidCardCriteria was null or undefined when calling postBulkPrepaidCards.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bulkPrepaidCards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkPrepaidCardCriteriaToJSON)(requestParameters.bulkPrepaidCardCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BulkPrepaidCardsTypeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create multiple Prepaid Cards. <p><strong>OperationId:</strong>postBulkPrepaidCards</p>
     * Create multiple Prepaid Cards
     */
    postBulkPrepaidCards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBulkPrepaidCardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    postCCSettlementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCCSettlement.');
            }
            if (requestParameters.ccSettlementCriteria === null || requestParameters.ccSettlementCriteria === undefined) {
                throw new runtime.RequiredError('ccSettlementCriteria', 'Required parameter requestParameters.ccSettlementCriteria was null or undefined when calling postCCSettlement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ccSettlement`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CcSettlementCriteriaToJSON)(requestParameters.ccSettlementCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    postCCSettlement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCCSettlementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to post charges and payments on a reservation.This operation can be used to enforce Payment for additional charges posted on the reservation <p><strong>OperationId:</strong>postChargesAndPayments</p>
     * Post charges and payments on a reservation
     */
    postChargesAndPaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChargesAndPayments.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postChargesAndPayments.');
            }
            if (requestParameters.chargesAndPaymentsCriteria === null || requestParameters.chargesAndPaymentsCriteria === undefined) {
                throw new runtime.RequiredError('chargesAndPaymentsCriteria', 'Required parameter requestParameters.chargesAndPaymentsCriteria was null or undefined when calling postChargesAndPayments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/chargesAndPayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChargesAndPaymentsCriteriaToJSON)(requestParameters.chargesAndPaymentsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to post charges and payments on a reservation.This operation can be used to enforce Payment for additional charges posted on the reservation <p><strong>OperationId:</strong>postChargesAndPayments</p>
     * Post charges and payments on a reservation
     */
    postChargesAndPayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChargesAndPaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    postCheckOutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postCheckOut.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCheckOut.');
            }
            if (requestParameters.reservation === null || requestParameters.reservation === undefined) {
                throw new runtime.RequiredError('reservation', 'Required parameter requestParameters.reservation was null or undefined when calling postCheckOut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationToJSON)(requestParameters.reservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    postCheckOut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCheckOutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    postCompRedemptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postCompRedemptions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCompRedemptions.');
            }
            if (requestParameters.postCompRedemptions === null || requestParameters.postCompRedemptions === undefined) {
                throw new runtime.RequiredError('postCompRedemptions', 'Required parameter requestParameters.postCompRedemptions was null or undefined when calling postCompRedemptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostCompRedemptionsToJSON)(requestParameters.postCompRedemptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    postCompRedemptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCompRedemptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    postCompTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling postCompTransaction.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCompTransaction.');
            }
            if (requestParameters.compTransactionCriteria === null || requestParameters.compTransactionCriteria === undefined) {
                throw new runtime.RequiredError('compTransactionCriteria', 'Required parameter requestParameters.compTransactionCriteria was null or undefined when calling postCompTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CompTransactionCriteriaToJSON)(requestParameters.compTransactionCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    postCompTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCompTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    postCreditBillRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCreditBill.');
            }
            if (requestParameters.creditBillCriteria === null || requestParameters.creditBillCriteria === undefined) {
                throw new runtime.RequiredError('creditBillCriteria', 'Required parameter requestParameters.creditBillCriteria was null or undefined when calling postCreditBill.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditBill`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditBillCriteriaToJSON)(requestParameters.creditBillCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostedCreditBillFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    postCreditBill(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCreditBillRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    postCreditLimitOveragePaymentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCreditLimitOveragePayments.');
            }
            if (requestParameters.creditLimitOveragePayments === null || requestParameters.creditLimitOveragePayments === undefined) {
                throw new runtime.RequiredError('creditLimitOveragePayments', 'Required parameter requestParameters.creditLimitOveragePayments was null or undefined when calling postCreditLimitOveragePayments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditLimitOveragePaymentsToJSON)(requestParameters.creditLimitOveragePayments),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditLimitOveragePaymentsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    postCreditLimitOveragePayments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    postDeferredTaxesProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postDeferredTaxesProcess.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postDeferredTaxesProcess.');
            }
            if (requestParameters.deferredTaxesProcess === null || requestParameters.deferredTaxesProcess === undefined) {
                throw new runtime.RequiredError('deferredTaxesProcess', 'Required parameter requestParameters.deferredTaxesProcess was null or undefined when calling postDeferredTaxesProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/deferredTaxesProcess`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DeferredTaxesProcessToJSON)(requestParameters.deferredTaxesProcess),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeferredTaxesProcessDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    postDeferredTaxesProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDeferredTaxesProcessRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    postDepositFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postDepositFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postDepositFolio.');
            }
            if (requestParameters.depositFolioCriteria === null || requestParameters.depositFolioCriteria === undefined) {
                throw new runtime.RequiredError('depositFolioCriteria', 'Required parameter requestParameters.depositFolioCriteria was null or undefined when calling postDepositFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositFolios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositFolioCriteriaToJSON)(requestParameters.depositFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostedDepositFolioFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    postDepositFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDepositFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    postDepositPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postDepositPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postDepositPayment.');
            }
            if (requestParameters.depositPayment === null || requestParameters.depositPayment === undefined) {
                throw new runtime.RequiredError('depositPayment', 'Required parameter requestParameters.depositPayment was null or undefined when calling postDepositPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositPaymentToJSON)(requestParameters.depositPayment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositedPaymentFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    postDepositPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDepositPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    postDepositPaymentByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postDepositPaymentByExtId.');
            }
            if (requestParameters.externalSysCode === null || requestParameters.externalSysCode === undefined) {
                throw new runtime.RequiredError('externalSysCode', 'Required parameter requestParameters.externalSysCode was null or undefined when calling postDepositPaymentByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postDepositPaymentByExtId.');
            }
            if (requestParameters.depositPayment === null || requestParameters.depositPayment === undefined) {
                throw new runtime.RequiredError('depositPayment', 'Required parameter requestParameters.depositPayment was null or undefined when calling postDepositPaymentByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSysCode}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"externalSysCode"}}`, encodeURIComponent(String(requestParameters.externalSysCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositPaymentToJSON)(requestParameters.depositPayment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositedPaymentFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    postDepositPaymentByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDepositPaymentByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    postFBAReimbursementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fbaReimbursementCriteria === null || requestParameters.fbaReimbursementCriteria === undefined) {
                throw new runtime.RequiredError('fbaReimbursementCriteria', 'Required parameter requestParameters.fbaReimbursementCriteria was null or undefined when calling postFBAReimbursement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/fbaReimbursements`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FbaReimbursementCriteriaToJSON)(requestParameters.fbaReimbursementCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    postFBAReimbursement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFBAReimbursementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    postFBASettlementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fbaReimbursementCriteria === null || requestParameters.fbaReimbursementCriteria === undefined) {
                throw new runtime.RequiredError('fbaReimbursementCriteria', 'Required parameter requestParameters.fbaReimbursementCriteria was null or undefined when calling postFBASettlement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/fbaSettlements`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FbaReimbursementCriteriaToJSON)(requestParameters.fbaReimbursementCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    postFBASettlement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFBASettlementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    postFiscalCommandInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postFiscalCommandInvoice.');
            }
            if (requestParameters.fiscalFolioCriteria === null || requestParameters.fiscalFolioCriteria === undefined) {
                throw new runtime.RequiredError('fiscalFolioCriteria', 'Required parameter requestParameters.fiscalFolioCriteria was null or undefined when calling postFiscalCommandInvoice.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalCommands`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FiscalFolioCriteriaToJSON)(requestParameters.fiscalFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FiscalCommandsResponseInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    postFiscalCommandInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFiscalCommandInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * API to generate CHECK OUT payload for a reservation
     * Post fiscal Info
     */
    postFiscalInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postFiscalInfo.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postFiscalInfo.');
            }
            if (requestParameters.postFiscalInfoType === null || requestParameters.postFiscalInfoType === undefined) {
                throw new runtime.RequiredError('postFiscalInfoType', 'Required parameter requestParameters.postFiscalInfoType was null or undefined when calling postFiscalInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fiscalInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostFiscalInfoTypeToJSON)(requestParameters.postFiscalInfoType),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * API to generate CHECK OUT payload for a reservation
     * Post fiscal Info
     */
    postFiscalInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFiscalInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     * @deprecated
     */
    postFiscalInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling postFiscalInvoice.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postFiscalInvoice.');
            }
            if (requestParameters.fiscalFolioCriteria === null || requestParameters.fiscalFolioCriteria === undefined) {
                throw new runtime.RequiredError('fiscalFolioCriteria', 'Required parameter requestParameters.fiscalFolioCriteria was null or undefined when calling postFiscalInvoice.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folio/{folioId}/fiscalCommands`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FiscalFolioCriteriaToJSON)(requestParameters.fiscalFolioCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     * @deprecated
     */
    postFiscalInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFiscalInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    postFixedChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postFixedCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postFixedCharges.');
            }
            if (requestParameters.fixedCharges === null || requestParameters.fixedCharges === undefined) {
                throw new runtime.RequiredError('fixedCharges', 'Required parameter requestParameters.fixedCharges was null or undefined when calling postFixedCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FixedChargesToJSON)(requestParameters.fixedCharges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    postFixedCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFixedChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    postForeignCurrencyExchangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.foreignCurrencyExchange === null || requestParameters.foreignCurrencyExchange === undefined) {
                throw new runtime.RequiredError('foreignCurrencyExchange', 'Required parameter requestParameters.foreignCurrencyExchange was null or undefined when calling postForeignCurrencyExchange.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/foreignCurrencyExchange`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ForeignCurrencyExchangeToJSON)(requestParameters.foreignCurrencyExchange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ForeignCurrencyExchangeTransactionFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    postForeignCurrencyExchange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postForeignCurrencyExchangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This api can be used to generate Batch Vouchers. <p><strong>OperationId:</strong>postGenerateBatchVouchers</p>
     * Generate Batch Vouchers
     */
    postGenerateBatchVouchersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postGenerateBatchVouchers.');
            }
            if (requestParameters.batchVouchersCriteria === null || requestParameters.batchVouchersCriteria === undefined) {
                throw new runtime.RequiredError('batchVouchersCriteria', 'Required parameter requestParameters.batchVouchersCriteria was null or undefined when calling postGenerateBatchVouchers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/vouchers/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchVouchersCriteriaToJSON)(requestParameters.batchVouchersCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This api can be used to generate Batch Vouchers. <p><strong>OperationId:</strong>postGenerateBatchVouchers</p>
     * Generate Batch Vouchers
     */
    postGenerateBatchVouchers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGenerateBatchVouchersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    postGuestCheckDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.checkNumber === null || requestParameters.checkNumber === undefined) {
                throw new runtime.RequiredError('checkNumber', 'Required parameter requestParameters.checkNumber was null or undefined when calling postGuestCheckDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postGuestCheckDetails.');
            }
            if (requestParameters.guestCheckDetails === null || requestParameters.guestCheckDetails === undefined) {
                throw new runtime.RequiredError('guestCheckDetails', 'Required parameter requestParameters.guestCheckDetails was null or undefined when calling postGuestCheckDetails.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuestCheckDetailsToJSON)(requestParameters.guestCheckDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    postGuestCheckDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGuestCheckDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    postPasserBySaleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPasserBySale.');
            }
            if (requestParameters.passerBySalesCriteria === null || requestParameters.passerBySalesCriteria === undefined) {
                throw new runtime.RequiredError('passerBySalesCriteria', 'Required parameter requestParameters.passerBySalesCriteria was null or undefined when calling postPasserBySale.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/passerBySale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PasserBySalesCriteriaToJSON)(requestParameters.passerBySalesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PasserBySaleFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    postPasserBySale(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPasserBySaleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    postPrepaidCardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPrepaidCards.');
            }
            if (requestParameters.prepaidCardCriteria === null || requestParameters.prepaidCardCriteria === undefined) {
                throw new runtime.RequiredError('prepaidCardCriteria', 'Required parameter requestParameters.prepaidCardCriteria was null or undefined when calling postPrepaidCards.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/prepaidCards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrepaidCardCriteriaToJSON)(requestParameters.prepaidCardCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    postPrepaidCards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPrepaidCardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     * @deprecated
     */
    postProformaRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postProforma.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postProforma.');
            }
            if (requestParameters.reservationFolio === null || requestParameters.reservationFolio === undefined) {
                throw new runtime.RequiredError('reservationFolio', 'Required parameter requestParameters.reservationFolio was null or undefined when calling postProforma.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/proforma`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationFolioToJSON)(requestParameters.reservationFolio),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationFolioInformationFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     * @deprecated
     */
    postProforma(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postProformaRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * API to create Pro-Forma for a specific reservation for external partners.<p><strong>OperationId:</strong>postProformaFolio</p> <p><strong>OperationId:</strong>postProformaFolio</p>
     * Create proforma
     */
    postProformaFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postProformaFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postProformaFolio.');
            }
            if (requestParameters.reservationFolio === null || requestParameters.reservationFolio === undefined) {
                throw new runtime.RequiredError('reservationFolio', 'Required parameter requestParameters.reservationFolio was null or undefined when calling postProformaFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/proformaFolio`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ProformaReservationFolioToJSON)(requestParameters.reservationFolio),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProformaFolioFromJSON)(jsonValue));
        });
    }
    /**
     * API to create Pro-Forma for a specific reservation for external partners.<p><strong>OperationId:</strong>postProformaFolio</p> <p><strong>OperationId:</strong>postProformaFolio</p>
     * Create proforma
     */
    postProformaFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postProformaFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    postRateCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
                throw new runtime.RequiredError('rateCode', 'Required parameter requestParameters.rateCode was null or undefined when calling postRateCode.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postRateCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRateCode.');
            }
            if (requestParameters.postRateCodeCriteria === null || requestParameters.postRateCodeCriteria === undefined) {
                throw new runtime.RequiredError('postRateCodeCriteria', 'Required parameter requestParameters.postRateCodeCriteria was null or undefined when calling postRateCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostRateCodeCriteriaToJSON)(requestParameters.postRateCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostedRateCodeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    postRateCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRateCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Generate vouchers for the reservation. <p><strong>OperationId:</strong>postReservationVouchers</p>
     * Generate Reservation Vouchers
     */
    postReservationVouchersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationVouchers.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationVouchers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/vouchers`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Generate vouchers for the reservation. <p><strong>OperationId:</strong>postReservationVouchers</p>
     * Generate Reservation Vouchers
     */
    postReservationVouchers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationVouchersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    postReversePaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReversePayment.');
            }
            if (requestParameters.paymentReversalCriteria === null || requestParameters.paymentReversalCriteria === undefined) {
                throw new runtime.RequiredError('paymentReversalCriteria', 'Required parameter requestParameters.paymentReversalCriteria was null or undefined when calling postReversePayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/reversePayments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PaymentReversalCriteriaToJSON)(requestParameters.paymentReversalCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    postReversePayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReversePaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    postRoomAndTaxForDayUseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postRoomAndTaxForDayUse.');
            }
            if (requestParameters.postRoomAndTaxForDayUse === null || requestParameters.postRoomAndTaxForDayUse === undefined) {
                throw new runtime.RequiredError('postRoomAndTaxForDayUse', 'Required parameter requestParameters.postRoomAndTaxForDayUse was null or undefined when calling postRoomAndTaxForDayUse.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations/{reservationId}/postRoomAndTaxForDayUse`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostRoomAndTaxForDayUseToJSON)(requestParameters.postRoomAndTaxForDayUse),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    postRoomAndTaxForDayUse(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomAndTaxForDayUseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    postStoredFolioDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling postStoredFolioDetails.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postStoredFolioDetails.');
            }
            if (requestParameters.storedFolioDetails === null || requestParameters.storedFolioDetails === undefined) {
                throw new runtime.RequiredError('storedFolioDetails', 'Required parameter requestParameters.storedFolioDetails was null or undefined when calling postStoredFolioDetails.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.StoredFolioDetailsToJSON)(requestParameters.storedFolioDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    postStoredFolioDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postStoredFolioDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    postSupplementalFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postSupplementalFolio.');
            }
            if (requestParameters.postSupplementalFolio === null || requestParameters.postSupplementalFolio === undefined) {
                throw new runtime.RequiredError('postSupplementalFolio', 'Required parameter requestParameters.postSupplementalFolio was null or undefined when calling postSupplementalFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/supplementFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostSupplementalFolioToJSON)(requestParameters.postSupplementalFolio),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostSupplementalFolioStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    postSupplementalFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSupplementalFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch
     */
    postZeroBalanceCheckoutReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postZeroBalanceCheckoutReservations.');
            }
            if (requestParameters.batchZeroBalanceCheckoutReservation === null || requestParameters.batchZeroBalanceCheckoutReservation === undefined) {
                throw new runtime.RequiredError('batchZeroBalanceCheckoutReservation', 'Required parameter requestParameters.batchZeroBalanceCheckoutReservation was null or undefined when calling postZeroBalanceCheckoutReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/zeroBalanceCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BatchZeroBalanceCheckoutReservationToJSON)(requestParameters.batchZeroBalanceCheckoutReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BatchZeroBalanceCheckoutDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch
     */
    postZeroBalanceCheckoutReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postZeroBalanceCheckoutReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    processFiscalRetryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling processFiscalRetry.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling processFiscalRetry.');
            }
            if (requestParameters.processFiscalRetry === null || requestParameters.processFiscalRetry === undefined) {
                throw new runtime.RequiredError('processFiscalRetry', 'Required parameter requestParameters.processFiscalRetry was null or undefined when calling processFiscalRetry.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/folios/{folioId}/fiscal`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ProcessFiscalRetryToJSON)(requestParameters.processFiscalRetry),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProcessFiscalRetryStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    processFiscalRetry(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.processFiscalRetryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    processReservationDepositRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling processReservationDeposit.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling processReservationDeposit.');
            }
            if (requestParameters.reservationDepositCriteria === null || requestParameters.reservationDepositCriteria === undefined) {
                throw new runtime.RequiredError('reservationDepositCriteria', 'Required parameter requestParameters.reservationDepositCriteria was null or undefined when calling processReservationDeposit.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/deposit`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDepositCriteriaToJSON)(requestParameters.reservationDepositCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    processReservationDeposit(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.processReservationDepositRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    processRoomRoutingRefreshRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.targetReservationId === null || requestParameters.targetReservationId === undefined) {
                throw new runtime.RequiredError('targetReservationId', 'Required parameter requestParameters.targetReservationId was null or undefined when calling processRoomRoutingRefresh.');
            }
            if (requestParameters.sourceReservationId === null || requestParameters.sourceReservationId === undefined) {
                throw new runtime.RequiredError('sourceReservationId', 'Required parameter requestParameters.sourceReservationId was null or undefined when calling processRoomRoutingRefresh.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling processRoomRoutingRefresh.');
            }
            if (requestParameters.roomRoutingRefresh === null || requestParameters.roomRoutingRefresh === undefined) {
                throw new runtime.RequiredError('roomRoutingRefresh', 'Required parameter requestParameters.roomRoutingRefresh was null or undefined when calling processRoomRoutingRefresh.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomRoutingRefreshToJSON)(requestParameters.roomRoutingRefresh),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    processRoomRoutingRefresh(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.processRoomRoutingRefreshRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     * @deprecated
     */
    putBedTaxInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taxRegistraitionNo === null || requestParameters.taxRegistraitionNo === undefined) {
                throw new runtime.RequiredError('taxRegistraitionNo', 'Required parameter requestParameters.taxRegistraitionNo was null or undefined when calling putBedTaxInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putBedTaxInfo.');
            }
            if (requestParameters.bedTaxCriteria === null || requestParameters.bedTaxCriteria === undefined) {
                throw new runtime.RequiredError('bedTaxCriteria', 'Required parameter requestParameters.bedTaxCriteria was null or undefined when calling putBedTaxInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BedTaxCriteriaToJSON)(requestParameters.bedTaxCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     * @deprecated
     */
    putBedTaxInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBedTaxInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    putBillingChargeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling putBillingCharge.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putBillingCharge.');
            }
            if (requestParameters.billingCharge === null || requestParameters.billingCharge === undefined) {
                throw new runtime.RequiredError('billingCharge', 'Required parameter requestParameters.billingCharge was null or undefined when calling putBillingCharge.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/charges`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BillingChargeToJSON)(requestParameters.billingCharge),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BillingChargeStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    putBillingCharge(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBillingChargeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    putBillingChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putBillingCharges.');
            }
            if (requestParameters.putBillingCharges === null || requestParameters.putBillingCharges === undefined) {
                throw new runtime.RequiredError('putBillingCharges', 'Required parameter requestParameters.putBillingCharges was null or undefined when calling putBillingCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PutBillingChargesToJSON)(requestParameters.putBillingCharges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PutBillingChargesStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    putBillingCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBillingChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    putCashierRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling putCashier.');
            }
            if (requestParameters.cashierClosure === null || requestParameters.cashierClosure === undefined) {
                throw new runtime.RequiredError('cashierClosure', 'Required parameter requestParameters.cashierClosure was null or undefined when calling putCashier.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CashierClosureToJSON)(requestParameters.cashierClosure),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    putCashier(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCashierRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    putCashierLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
                throw new runtime.RequiredError('lockId', 'Required parameter requestParameters.lockId was null or undefined when calling putCashierLock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCashierLock.');
            }
            if (requestParameters.cashierLockCriteriaToExtend === null || requestParameters.cashierLockCriteriaToExtend === undefined) {
                throw new runtime.RequiredError('cashierLockCriteriaToExtend', 'Required parameter requestParameters.cashierLockCriteriaToExtend was null or undefined when calling putCashierLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cashierslock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CashierLockCriteriaToExtendToJSON)(requestParameters.cashierLockCriteriaToExtend),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ExtendedCashierLockFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    putCashierLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCashierLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    putForEarlyDepartureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putForEarlyDeparture.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putForEarlyDeparture.');
            }
            if (requestParameters.earlyDeparture === null || requestParameters.earlyDeparture === undefined) {
                throw new runtime.RequiredError('earlyDeparture', 'Required parameter requestParameters.earlyDeparture was null or undefined when calling putForEarlyDeparture.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EarlyDepartureToJSON)(requestParameters.earlyDeparture),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    putForEarlyDeparture(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putForEarlyDepartureRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    putPayeeTaxNumberRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.payeeId === null || requestParameters.payeeId === undefined) {
                throw new runtime.RequiredError('payeeId', 'Required parameter requestParameters.payeeId was null or undefined when calling putPayeeTaxNumber.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPayeeTaxNumber.');
            }
            if (requestParameters.payeeTaxNumber === null || requestParameters.payeeTaxNumber === undefined) {
                throw new runtime.RequiredError('payeeTaxNumber', 'Required parameter requestParameters.payeeTaxNumber was null or undefined when calling putPayeeTaxNumber.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/payees/{payeeId}/taxNumber`.replace(`{${"payeeId"}}`, encodeURIComponent(String(requestParameters.payeeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PayeeTaxNumberToJSON)(requestParameters.payeeTaxNumber),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    putPayeeTaxNumber(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPayeeTaxNumberRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    putReservationDepositTransferRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceReservationId === null || requestParameters.sourceReservationId === undefined) {
                throw new runtime.RequiredError('sourceReservationId', 'Required parameter requestParameters.sourceReservationId was null or undefined when calling putReservationDepositTransfer.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationDepositTransfer.');
            }
            if (requestParameters.depositTransferCriteria === null || requestParameters.depositTransferCriteria === undefined) {
                throw new runtime.RequiredError('depositTransferCriteria', 'Required parameter requestParameters.depositTransferCriteria was null or undefined when calling putReservationDepositTransfer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{sourceReservationId}/deposit/transfers`.replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositTransferCriteriaToJSON)(requestParameters.depositTransferCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    putReservationDepositTransfer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationDepositTransferRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    putRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoutingInstructions.');
            }
            if (requestParameters.routingInstructions === null || requestParameters.routingInstructions === undefined) {
                throw new runtime.RequiredError('routingInstructions', 'Required parameter requestParameters.routingInstructions was null or undefined when calling putRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/create`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoutingInstructionsToJSON)(requestParameters.routingInstructions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreatedRoutingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    putRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    redeemPrepaidCardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling redeemPrepaidCards.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling redeemPrepaidCards.');
            }
            if (requestParameters.redeemPrepaidCards === null || requestParameters.redeemPrepaidCards === undefined) {
                throw new runtime.RequiredError('redeemPrepaidCards', 'Required parameter requestParameters.redeemPrepaidCards was null or undefined when calling redeemPrepaidCards.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/prepaidCards/redemptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RedeemPrepaidCardsToJSON)(requestParameters.redeemPrepaidCards),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RedeemPrepaidCardsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    redeemPrepaidCards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.redeemPrepaidCardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    registerManualAuthorizationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling registerManualAuthorization.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling registerManualAuthorization.');
            }
            if (requestParameters.ccManualAuthorizationCriteria === null || requestParameters.ccManualAuthorizationCriteria === undefined) {
                throw new runtime.RequiredError('ccManualAuthorizationCriteria', 'Required parameter requestParameters.ccManualAuthorizationCriteria was null or undefined when calling registerManualAuthorization.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize/manual`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CcManualAuthorizationCriteriaToJSON)(requestParameters.ccManualAuthorizationCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    registerManualAuthorization(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerManualAuthorizationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    registerVaultTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling registerVaultTransaction.');
            }
            if (requestParameters.vaultTransaction === null || requestParameters.vaultTransaction === undefined) {
                throw new runtime.RequiredError('vaultTransaction', 'Required parameter requestParameters.vaultTransaction was null or undefined when calling registerVaultTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditcardTransaction/logs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.VaultTransactionToJSON)(requestParameters.vaultTransaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    registerVaultTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerVaultTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    reinstateCheckOutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling reinstateCheckOut.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reinstateCheckOut.');
            }
            if (requestParameters.reinstateCheckedOutReservation === null || requestParameters.reinstateCheckedOutReservation === undefined) {
                throw new runtime.RequiredError('reinstateCheckedOutReservation', 'Required parameter requestParameters.reinstateCheckedOutReservation was null or undefined when calling reinstateCheckOut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts/reinstate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReinstateCheckedOutReservationToJSON)(requestParameters.reinstateCheckedOutReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    reinstateCheckOut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reinstateCheckOutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    releaseCashierLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
                throw new runtime.RequiredError('lockId', 'Required parameter requestParameters.lockId was null or undefined when calling releaseCashierLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cashiersLock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    releaseCashierLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.releaseCashierLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    reloadPrepaidCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reloadPrepaidCard.');
            }
            if (requestParameters.reloadPrepaidCard === null || requestParameters.reloadPrepaidCard === undefined) {
                throw new runtime.RequiredError('reloadPrepaidCard', 'Required parameter requestParameters.reloadPrepaidCard was null or undefined when calling reloadPrepaidCard.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/prepaidCards/reload`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReloadPrepaidCardToJSON)(requestParameters.reloadPrepaidCard),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReloadPrepaidCardStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    reloadPrepaidCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reloadPrepaidCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     * @deprecated
     */
    removeBedTaxInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taxRegistraitionNo === null || requestParameters.taxRegistraitionNo === undefined) {
                throw new runtime.RequiredError('taxRegistraitionNo', 'Required parameter requestParameters.taxRegistraitionNo was null or undefined when calling removeBedTaxInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeBedTaxInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     * @deprecated
     */
    removeBedTaxInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeBedTaxInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges
     */
    removeFixedChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling removeFixedCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeFixedCharges.');
            }
            const queryParameters = {};
            if (requestParameters.fixedChargeID) {
                queryParameters['fixedChargeID'] = requestParameters.fixedChargeID;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges
     */
    removeFixedCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeFixedChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to resend the failed supporting documents. <p><strong>OperationId:</strong>resendSupportingDocument</p>
     * Operation to resend the failed supporting documents to fiscal partner.
     */
    resendSupportingDocumentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling resendSupportingDocument.');
            }
            if (requestParameters.fiscalSupportingDocumentCriteria === null || requestParameters.fiscalSupportingDocumentCriteria === undefined) {
                throw new runtime.RequiredError('fiscalSupportingDocumentCriteria', 'Required parameter requestParameters.fiscalSupportingDocumentCriteria was null or undefined when calling resendSupportingDocument.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fiscalSupportingDocuments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FiscalSupportingDocumentCriteriaToJSON)(requestParameters.fiscalSupportingDocumentCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to resend the failed supporting documents. <p><strong>OperationId:</strong>resendSupportingDocument</p>
     * Operation to resend the failed supporting documents to fiscal partner.
     */
    resendSupportingDocument(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resendSupportingDocumentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    reverseARInvoiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reverseARInvoice.');
            }
            const queryParameters = {};
            if (requestParameters.reasonCode !== undefined) {
                queryParameters['reasonCode'] = requestParameters.reasonCode;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.transactionCodes) {
                queryParameters['transactionCodes'] = requestParameters.transactionCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/arInvoices/reverse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    reverseARInvoice(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reverseARInvoiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    reverseCertificatePostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling reverseCertificatePostings.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reverseCertificatePostings.');
            }
            if (requestParameters.reverseCertificatePostingsCriteria === null || requestParameters.reverseCertificatePostingsCriteria === undefined) {
                throw new runtime.RequiredError('reverseCertificatePostingsCriteria', 'Required parameter requestParameters.reverseCertificatePostingsCriteria was null or undefined when calling reverseCertificatePostings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/reverseCertificate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReverseCertificatePostingsCriteriaToJSON)(requestParameters.reverseCertificatePostingsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    reverseCertificatePostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reverseCertificatePostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    reverseCompRedemptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling reverseCompRedemptions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reverseCompRedemptions.');
            }
            if (requestParameters.reverseCompRedemptions === null || requestParameters.reverseCompRedemptions === undefined) {
                throw new runtime.RequiredError('reverseCompRedemptions', 'Required parameter requestParameters.reverseCompRedemptions was null or undefined when calling reverseCompRedemptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionReversals`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReverseCompRedemptionsToJSON)(requestParameters.reverseCompRedemptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    reverseCompRedemptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reverseCompRedemptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    reverseFlexibleBenefitPostingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling reverseFlexibleBenefitPosting.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reverseFlexibleBenefitPosting.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}/flexibleBenefitPostings`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    reverseFlexibleBenefitPosting(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reverseFlexibleBenefitPostingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    reverseFolioTaxPaymentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cashierId === null || requestParameters.cashierId === undefined) {
                throw new runtime.RequiredError('cashierId', 'Required parameter requestParameters.cashierId was null or undefined when calling reverseFolioTaxPayment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling reverseFolioTaxPayment.');
            }
            if (requestParameters.transactionReversal === null || requestParameters.transactionReversal === undefined) {
                throw new runtime.RequiredError('transactionReversal', 'Required parameter requestParameters.transactionReversal was null or undefined when calling reverseFolioTaxPayment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cashiers/{cashierId}/folioTaxPayments`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionReversalToJSON)(requestParameters.transactionReversal),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioTaxPaymentReversalFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    reverseFolioTaxPayment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reverseFolioTaxPaymentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    splitAndTransferTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling splitAndTransferTransaction.');
            }
            if (requestParameters.transactionToSplitAndTransfer === null || requestParameters.transactionToSplitAndTransfer === undefined) {
                throw new runtime.RequiredError('transactionToSplitAndTransfer', 'Required parameter requestParameters.transactionToSplitAndTransfer was null or undefined when calling splitAndTransferTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/splitAndTransfer`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionToSplitAndTransferToJSON)(requestParameters.transactionToSplitAndTransfer),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    splitAndTransferTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.splitAndTransferTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    splitDepositTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling splitDepositTransaction.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling splitDepositTransaction.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling splitDepositTransaction.');
            }
            if (requestParameters.splitDepositTransaction === null || requestParameters.splitDepositTransaction === undefined) {
                throw new runtime.RequiredError('splitDepositTransaction', 'Required parameter requestParameters.splitDepositTransaction was null or undefined when calling splitDepositTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SplitDepositTransactionToJSON)(requestParameters.splitDepositTransaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SplitDepositTransactionStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    splitDepositTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.splitDepositTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    splitTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling splitTransaction.');
            }
            if (requestParameters.transactionToSplit === null || requestParameters.transactionToSplit === undefined) {
                throw new runtime.RequiredError('transactionToSplit', 'Required parameter requestParameters.transactionToSplit was null or undefined when calling splitTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/split`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionToSplitToJSON)(requestParameters.transactionToSplit),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    splitTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.splitTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    transferCompTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferCompTransactions.');
            }
            if (requestParameters.transferCompTransactions === null || requestParameters.transferCompTransactions === undefined) {
                throw new runtime.RequiredError('transferCompTransactions', 'Required parameter requestParameters.transferCompTransactions was null or undefined when calling transferCompTransactions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transferCompTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransferCompTransactionsToJSON)(requestParameters.transferCompTransactions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    transferCompTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferCompTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    transferFolioToWindowRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling transferFolioToWindow.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferFolioToWindow.');
            }
            if (requestParameters.folioToWindow === null || requestParameters.folioToWindow === undefined) {
                throw new runtime.RequiredError('folioToWindow', 'Required parameter requestParameters.folioToWindow was null or undefined when calling transferFolioToWindow.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transferFolioTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolioToWindowToJSON)(requestParameters.folioToWindow),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    transferFolioToWindow(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferFolioToWindowRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    transferTransactionToReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.toReservationId === null || requestParameters.toReservationId === undefined) {
                throw new runtime.RequiredError('toReservationId', 'Required parameter requestParameters.toReservationId was null or undefined when calling transferTransactionToReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferTransactionToReservation.');
            }
            if (requestParameters.reservationTransaction === null || requestParameters.reservationTransaction === undefined) {
                throw new runtime.RequiredError('reservationTransaction', 'Required parameter requestParameters.reservationTransaction was null or undefined when calling transferTransactionToReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{toReservationId}/transferTransaction`.replace(`{${"toReservationId"}}`, encodeURIComponent(String(requestParameters.toReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationTransactionToJSON)(requestParameters.reservationTransaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    transferTransactionToReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferTransactionToReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    transferTransactionToWindowRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling transferTransactionToWindow.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transferTransactionToWindow.');
            }
            if (requestParameters.transactionToWindow === null || requestParameters.transactionToWindow === undefined) {
                throw new runtime.RequiredError('transactionToWindow', 'Required parameter requestParameters.transactionToWindow was null or undefined when calling transferTransactionToWindow.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transferTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionToWindowToJSON)(requestParameters.transactionToWindow),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransferTransactionToWindowFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    transferTransactionToWindow(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transferTransactionToWindowRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    transitionDepositToGuestFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling transitionDepositToGuestFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling transitionDepositToGuestFolio.');
            }
            if (requestParameters.depositToGuestFolio === null || requestParameters.depositToGuestFolio === undefined) {
                throw new runtime.RequiredError('depositToGuestFolio', 'Required parameter requestParameters.depositToGuestFolio was null or undefined when calling transitionDepositToGuestFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositTransition`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositToGuestFolioToJSON)(requestParameters.depositToGuestFolio),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositTransitionStatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    transitionDepositToGuestFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transitionDepositToGuestFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    unlinkReservationPackageAllowanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling unlinkReservationPackageAllowance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling unlinkReservationPackageAllowance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packageAllowance/links`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    unlinkReservationPackageAllowance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unlinkReservationPackageAllowanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges
     */
    updateFixedChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling updateFixedCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling updateFixedCharges.');
            }
            if (requestParameters.fixedCharges === null || requestParameters.fixedCharges === undefined) {
                throw new runtime.RequiredError('fixedCharges', 'Required parameter requestParameters.fixedCharges was null or undefined when calling updateFixedCharges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FixedChargesToJSON)(requestParameters.fixedCharges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges
     */
    updateFixedCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFixedChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    validateCreditBillRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling validateCreditBill.');
            }
            if (requestParameters.creditBillCriteria === null || requestParameters.creditBillCriteria === undefined) {
                throw new runtime.RequiredError('creditBillCriteria', 'Required parameter requestParameters.creditBillCriteria was null or undefined when calling validateCreditBill.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/creditBill/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditBillCriteriaToJSON)(requestParameters.creditBillCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatedCreditBillFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    validateCreditBill(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateCreditBillRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    validateDepositFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling validateDepositFolio.');
            }
            if (requestParameters.depositFolioValidateCriteria === null || requestParameters.depositFolioValidateCriteria === undefined) {
                throw new runtime.RequiredError('depositFolioValidateCriteria', 'Required parameter requestParameters.depositFolioValidateCriteria was null or undefined when calling validateDepositFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/depositfolios/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositFolioValidateCriteriaToJSON)(requestParameters.depositFolioValidateCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositedFolioValidateFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    validateDepositFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateDepositFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    validateTransactionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling validateTransactionCodes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling validateTransactionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.event !== undefined) {
                queryParameters['event'] = requestParameters.event;
            }
            if (requestParameters.fiscalBillNo !== undefined) {
                queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate;
            }
            if (requestParameters.folioNo !== undefined) {
                queryParameters['folioNo'] = requestParameters.folioNo;
            }
            if (requestParameters.folioStatus !== undefined) {
                queryParameters['folioStatus'] = requestParameters.folioStatus;
            }
            if (requestParameters.folioTypeName !== undefined) {
                queryParameters['folioTypeName'] = requestParameters.folioTypeName;
            }
            if (requestParameters.internalFolioWindowID !== undefined) {
                queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
            }
            if (requestParameters.invoiceNo !== undefined) {
                queryParameters['invoiceNo'] = requestParameters.invoiceNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatedTransactionCodeFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    validateTransactionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateTransactionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    verifyForEarlyDepartureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling verifyForEarlyDeparture.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling verifyForEarlyDeparture.');
            }
            const queryParameters = {};
            if (requestParameters.ignoreCheckOnTieredRate !== undefined) {
                queryParameters['ignoreCheckOnTieredRate'] = requestParameters.ignoreCheckOnTieredRate;
            }
            if (requestParameters.ignoreRateRestriction !== undefined) {
                queryParameters['ignoreRateRestriction'] = requestParameters.ignoreRateRestriction;
            }
            if (requestParameters.postConsumedAllowanceToGuest !== undefined) {
                queryParameters['postConsumedAllowanceToGuest'] = requestParameters.postConsumedAllowanceToGuest;
            }
            if (requestParameters.postEarlyDeparturePenalty !== undefined) {
                queryParameters['postEarlyDeparturePenalty'] = requestParameters.postEarlyDeparturePenalty;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture/verify`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EarlyDepartureInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    verifyForEarlyDeparture(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyForEarlyDepartureRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    voidBillingCheckChargesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.checkNumber === null || requestParameters.checkNumber === undefined) {
                throw new runtime.RequiredError('checkNumber', 'Required parameter requestParameters.checkNumber was null or undefined when calling voidBillingCheckCharges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling voidBillingCheckCharges.');
            }
            const queryParameters = {};
            if (requestParameters.revenueDate !== undefined) {
                queryParameters['revenueDate'] = requestParameters.revenueDate;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.checkId !== undefined) {
                queryParameters['checkId'] = requestParameters.checkId;
            }
            if (requestParameters.checkIdContext !== undefined) {
                queryParameters['checkIdContext'] = requestParameters.checkIdContext;
            }
            if (requestParameters.checkIdType !== undefined) {
                queryParameters['checkIdType'] = requestParameters.checkIdType;
            }
            if (requestParameters.cashierId !== undefined) {
                queryParameters['cashierId'] = requestParameters.cashierId;
            }
            if (requestParameters.postingRemark !== undefined) {
                queryParameters['postingRemark'] = requestParameters.postingRemark;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    voidBillingCheckCharges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.voidBillingCheckChargesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    voidFolioRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folioId === null || requestParameters.folioId === undefined) {
                throw new runtime.RequiredError('folioId', 'Required parameter requestParameters.folioId was null or undefined when calling voidFolio.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling voidFolio.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling voidFolio.');
            }
            if (requestParameters.folioToVoid === null || requestParameters.folioToVoid === undefined) {
                throw new runtime.RequiredError('folioToVoid', 'Required parameter requestParameters.folioToVoid was null or undefined when calling voidFolio.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/voidfolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolioToVoidToJSON)(requestParameters.folioToVoid),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VoidedFolioFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    voidFolio(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.voidFolioRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CashieringApi = CashieringApi;
/**
 * @export
 */
exports.GetAdvancePaymentBalanceEventTypeEnum = {
    AdvanceBill: 'AdvanceBill',
    Deposit: 'Deposit',
    CheckIn: 'CheckIn'
};
/**
 * @export
 */
exports.GetAlertsAlertAreaEnum = {
    CheckIn: 'CheckIn',
    CheckOut: 'CheckOut',
    Reservation: 'Reservation',
    Billing: 'Billing',
    InHouse: 'InHouse'
};
/**
 * @export
 */
exports.GetAuthorizationHistoryTransactionTypeEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetBalanceInfoEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetBalanceInfoFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCashierReportPostingsRequestTypeEnum = {
    Cash: 'Cash',
    Check: 'Check',
    ForeignCurrency: 'ForeignCurrency',
    CreditCard: 'CreditCard',
    Miscellaneous: 'Miscellaneous',
    ArSettlements: 'ArSettlements',
    DepositTransfers: 'DepositTransfers',
    Shiftdrop: 'Shiftdrop'
};
/**
 * @export
 */
exports.GetCompRoutingInstructionsResStatusCodeEnum = {
    Reserved: 'Reserved',
    Requested: 'Requested',
    NoShow: 'NoShow',
    Cancelled: 'Cancelled',
    InHouse: 'InHouse',
    CheckedOut: 'CheckedOut',
    Waitlisted: 'Waitlisted',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    Walkin: 'Walkin',
    PendingCheckout: 'PendingCheckout'
};
/**
 * @export
 */
exports.GetCompRoutingInstructionsCompRoutingStatusesEnum = {
    Request: 'Request',
    Comp: 'Comp',
    Declined: 'Declined'
};
/**
 * @export
 */
exports.GetDepositFolioFetchInstructionsEnum = {
    ProjectedRevenue: 'ProjectedRevenue'
};
/**
 * @export
 */
exports.GetFinancialPostingsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetFinancialPostingsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetFinancialPostingsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
};
/**
 * @export
 */
exports.GetFiscalSupportingDocumentsDocumentTypeEnum = {
    InformationFolio: 'InformationFolio',
    ProformaFolio: 'ProformaFolio',
    ConfirmationLetter: 'ConfirmationLetter'
};
/**
 * @export
 */
exports.GetFiscalSupportingDocumentsOrderByEnum = {
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate',
    Room: 'Room',
    DocumentUpdatedDate: 'DocumentUpdatedDate'
};
/**
 * @export
 */
exports.GetFiscalSupportingDocumentsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetFolioFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Windowbalances: 'Windowbalances',
    Payment: 'Payment',
    Payee: 'Payee',
    Account: 'Account',
    Guestpay: 'Guestpay',
    Notifications: 'Notifications',
    Transactioncodes: 'Transactioncodes',
    Foliohistory: 'Foliohistory',
    Totalbalance: 'Totalbalance',
    Postings: 'Postings'
};
/**
 * @export
 */
exports.GetFolioGroupTypeEnum = {
    CheckNo: 'CheckNo',
    TransactionDate: 'TransactionDate',
    TransactionCode: 'TransactionCode',
    TransactionType: 'TransactionType'
};
/**
 * @export
 */
exports.GetFolioPrintersEventTypeEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetFolioPrintersFiscalFolioInstructionEnum = {
    Retry: 'Retry',
    New: 'New',
    Void: 'Void',
    Offline: 'Offline'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoActionEnum = {
    Billing: 'Billing',
    Settlefolio: 'Settlefolio',
    Deposit: 'Deposit',
    Compredemption: 'Compredemption',
    Prepaidcardredemption: 'Prepaidcardredemption',
    Advancepayment: 'Advancepayment'
};
/**
 * @export
 */
exports.GetFolioTypeNameFolioReportGroupEnum = {
    Guest: 'Guest',
    Group: 'Group',
    AccountsReceivables: 'AccountsReceivables',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    Expense: 'Expense',
    CorrectionHeader: 'CorrectionHeader'
};
/**
 * @export
 */
exports.GetGuestsTransactionsCashieringTransactionTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
};
/**
 * @export
 */
exports.GetGuestsTransactionsPostedTransactionTypeEnum = {
    All: 'All',
    Routed: 'Routed',
    Direct: 'Direct',
    Transferred: 'Transferred',
    Payments: 'Payments',
    NonBilled: 'NonBilled'
};
/**
 * @export
 */
exports.GetPostBillingChargesOptionEnum = {
    PackageAllowance: 'PackageAllowance',
    RoomRouting: 'RoomRouting',
    PostingStatus: 'PostingStatus'
};
/**
 * @export
 */
exports.GetPostingSummaryPostingSummaryTypeEnum = {
    Postings: 'Postings',
    Adjustments: 'Adjustments',
    All: 'All'
};
/**
 * @export
 */
exports.GetPostingsForRefreshColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
};
/**
 * @export
 */
exports.GetRoundingDifferenceEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetRoundingDifferenceCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetRoundingDifferenceCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetRoundingDifferenceProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetRoundingDifferenceEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetStoredFolioDetailsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetTransactionCodesTrxServiceTypeEnum = {
    Services: 'Services',
    Goods: 'Goods'
};
/**
 * @export
 */
exports.GetValidateFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
};
/**
 * @export
 */
exports.GetValidateFiscalPrintingDetailsCashieringEventTypeEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    ChargesAndPayments: 'ChargesAndPayments',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.ValidateTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.ValidateTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
