/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcquiredCashierLock,
  ActivatePrepaidCardRequest,
  ActivatePrepaidCardStatus,
  AdditionalTaxesDetails,
  AdjustTransactionsRequest,
  AdjustedTransactions,
  AdvancePaymentBalance,
  AdvanceRoomChargesReservationInfo,
  AlertNotices,
  AmountEligible,
  ApplyFinalPostingsRequest,
  ApplyFlexibleBenefitPostingsRequest,
  ArticlesSale,
  AttachDepositPolicyToPaymentRequest,
  AuthorizationHistory,
  AuthorizationInfo,
  AuthorizeCreditCardAmountByProfileRequest,
  AuthorizersCreditInfo,
  AutoSettleCompFoliosRequest,
  AutoSettleCompFoliosStatus,
  BalanceInfoCriteria,
  BatchAutoCheckoutDetails,
  BatchZeroBalanceCheckoutDetails,
  BedTaxInfo,
  BillingChargeStatus,
  BillingChargesDetails,
  BillingChargesStatus,
  BillingInstructionCodes,
  CalculateForeignCurrencyRequest,
  CalculatedForeignCurrency,
  CancelPrepaidCardTransactionRequest,
  CancelPrepaidCardTransactionStatus,
  CashOutPrepaidCardRequest,
  CashOutPrepaidCardStatus,
  CashierClosureDetails,
  CashierClosureInformation,
  CashierClosureReportsList,
  CashierReportPostingsInfo,
  CashierTransactionsDetails,
  CcAuthorizationInstructions,
  CcBatchSettlements,
  CcBatchSettlementsStatus,
  CcSurchargeDetails,
  ChangeBillingPaymentRequest,
  ChangeRoutingInstructionsRequest,
  ChangedRoutingInstructions,
  CheckDetails,
  CheckedRateCode,
  CloseReservationFolioRequest,
  CompAccountingJournal,
  CompRoutingInstructions,
  CompTrxAuthorizers,
  ConvertFolioDetails,
  ConvertFolioRequest,
  CreatedRoutingInstructions,
  CreditCardWallet,
  CreditLimitOveragePaymentsDetails,
  CreditLimitOveragePaymentsInfo,
  DeferredTaxesProcessDetails,
  DepositFolioTransactionDetails,
  DepositMaturityDetails,
  DepositRefundEligibleCheck,
  DepositedFolioValidate,
  DepositedPayment,
  DetachDepositPolicyFromPaymentRequest,
  EarlyDepartureInfo,
  ExceptionDetailType,
  ExtendedCashierLock,
  FinancialPostings,
  FinancialPostingsNetVat,
  FiscalCallStatus,
  FiscalCommandsResponseInfo,
  FiscalInformationFolio,
  FiscalSupportingDocumentsResponse,
  FixedChargesDetails,
  Folio,
  FolioActivityDetailsType,
  FolioActivityResponseDetailType,
  FolioHistoryResponse,
  FolioPrinters,
  FolioTaxPaymentReversal,
  FolioTaxPaymentsInfo,
  FolioTransactionDetails,
  FolioTypeNameInfo,
  FolioTypesInfo,
  ForeignCurrencyExchangeTransaction,
  GamingRequestStatusInfo,
  GenerateFiscalFolioRequest,
  GenerateFolioRequest,
  GeneratedFolio,
  GuestsTransactions,
  HotelRevenueDetails,
  LinkReservationPackageAllowanceRequest,
  MaturedDepositsDetails,
  PasserBySale,
  PostAdvanceFolioRequest,
  PostAdvanceRoomChargesRequest,
  PostArticlesSaleRequest,
  PostAutoCheckoutReservationsRequest,
  PostAwardTransactionRequest,
  PostBatchAutoSettlementRequest,
  PostBatchCCSettlementsRequest,
  PostBatchDepositRequest,
  PostBedTaxInfoRequest,
  PostBillingChargesInBatchRequest,
  PostBillingChargesRequest,
  PostBillingCheckChargesRequest,
  PostBillingPaymentRequest,
  PostCCSettlementRequest,
  PostCheckOutRequest,
  PostCompRedemptionsRequest,
  PostCompTransactionRequest,
  PostCreditBillRequest,
  PostCreditLimitOveragePaymentsRequest,
  PostDeferredTaxesProcessRequest,
  PostDepositFolioRequest,
  PostDepositPaymentByExtIdRequest,
  PostFBAReimbursementRequest,
  PostFiscalCommandInvoiceRequest,
  PostFiscalInfoRequest,
  PostForeignCurrencyExchangeRequest,
  PostGuestCheckDetailsRequest,
  PostPasserBySaleRequest,
  PostPrepaidCardsRequest,
  PostProformaRequest,
  PostRateCodeRequest,
  PostReversePaymentRequest,
  PostRoomAndTaxForDayUseRequest,
  PostStoredFolioDetailsRequest,
  PostSupplementalFolioRequest,
  PostSupplementalFolioStatus,
  PostZeroBalanceCheckoutReservationsRequest,
  PostedBillingChargesInBatch,
  PostedBillingPayment,
  PostedCreditBill,
  PostedDepositFolio,
  PostedRateCode,
  PostingActivityDetail,
  PostingSummaryList,
  PostingsForRefresh,
  ProcessFiscalRetryRequest,
  ProcessFiscalRetryStatus,
  ProcessReservationDepositRequest,
  ProcessRoomRoutingRefreshRequest,
  PutBillingChargeRequest,
  PutBillingChargesRequest,
  PutBillingChargesStatus,
  PutCashierLockRequest,
  PutCashierRequest,
  PutForEarlyDepartureRequest,
  PutPayeeTaxNumberRequest,
  PutReservationDepositTransferRequest,
  PutRoutingInstructionsRequest,
  ReceiptHistoryResponse,
  RedeemPrepaidCardsRequest,
  RedeemPrepaidCardsStatus,
  RegisterManualAuthorizationRequest,
  RegisterVaultTransactionRequest,
  ReinstateCheckOutRequest,
  ReloadPrepaidCardRequest,
  ReloadPrepaidCardStatus,
  ResendSupportingDocumentRequest,
  ReservationDepositFolios,
  ReservationFolioInformation,
  ReservationPackageOptions,
  RevenueBucketTotals,
  ReverseCertificatePostingsRequest,
  ReverseCompRedemptionsRequest,
  ReverseFolioTaxPaymentRequest,
  RoomRoutingPostings,
  RoundingDifferenceAmount,
  RoutingInstructionsDetails,
  SplitAndTransferTransactionRequest,
  SplitDepositTransactionRequest,
  SplitDepositTransactionStatus,
  SplitTransactionRequest,
  StagedTransactions,
  Status,
  StoredFolioDetailsInfo,
  TransactionCodes,
  TransferCompTransactionsRequest,
  TransferFolioToWindowRequest,
  TransferTransactionToReservationRequest,
  TransferTransactionToWindow,
  TransferTransactionToWindowRequest,
  TransitionDepositToGuestFolioRequest,
  UpdateFixedChargesRequest,
  ValidateDepositFolioRequest,
  ValidatedCreditBill,
  ValidatedTransactionCode,
  VoidFolioRequest,
  VoidedFolio,
} from '../models';
import {
    AcquiredCashierLockFromJSON,
    AcquiredCashierLockToJSON,
    ActivatePrepaidCardRequestFromJSON,
    ActivatePrepaidCardRequestToJSON,
    ActivatePrepaidCardStatusFromJSON,
    ActivatePrepaidCardStatusToJSON,
    AdditionalTaxesDetailsFromJSON,
    AdditionalTaxesDetailsToJSON,
    AdjustTransactionsRequestFromJSON,
    AdjustTransactionsRequestToJSON,
    AdjustedTransactionsFromJSON,
    AdjustedTransactionsToJSON,
    AdvancePaymentBalanceFromJSON,
    AdvancePaymentBalanceToJSON,
    AdvanceRoomChargesReservationInfoFromJSON,
    AdvanceRoomChargesReservationInfoToJSON,
    AlertNoticesFromJSON,
    AlertNoticesToJSON,
    AmountEligibleFromJSON,
    AmountEligibleToJSON,
    ApplyFinalPostingsRequestFromJSON,
    ApplyFinalPostingsRequestToJSON,
    ApplyFlexibleBenefitPostingsRequestFromJSON,
    ApplyFlexibleBenefitPostingsRequestToJSON,
    ArticlesSaleFromJSON,
    ArticlesSaleToJSON,
    AttachDepositPolicyToPaymentRequestFromJSON,
    AttachDepositPolicyToPaymentRequestToJSON,
    AuthorizationHistoryFromJSON,
    AuthorizationHistoryToJSON,
    AuthorizationInfoFromJSON,
    AuthorizationInfoToJSON,
    AuthorizeCreditCardAmountByProfileRequestFromJSON,
    AuthorizeCreditCardAmountByProfileRequestToJSON,
    AuthorizersCreditInfoFromJSON,
    AuthorizersCreditInfoToJSON,
    AutoSettleCompFoliosRequestFromJSON,
    AutoSettleCompFoliosRequestToJSON,
    AutoSettleCompFoliosStatusFromJSON,
    AutoSettleCompFoliosStatusToJSON,
    BalanceInfoCriteriaFromJSON,
    BalanceInfoCriteriaToJSON,
    BatchAutoCheckoutDetailsFromJSON,
    BatchAutoCheckoutDetailsToJSON,
    BatchZeroBalanceCheckoutDetailsFromJSON,
    BatchZeroBalanceCheckoutDetailsToJSON,
    BedTaxInfoFromJSON,
    BedTaxInfoToJSON,
    BillingChargeStatusFromJSON,
    BillingChargeStatusToJSON,
    BillingChargesDetailsFromJSON,
    BillingChargesDetailsToJSON,
    BillingChargesStatusFromJSON,
    BillingChargesStatusToJSON,
    BillingInstructionCodesFromJSON,
    BillingInstructionCodesToJSON,
    CalculateForeignCurrencyRequestFromJSON,
    CalculateForeignCurrencyRequestToJSON,
    CalculatedForeignCurrencyFromJSON,
    CalculatedForeignCurrencyToJSON,
    CancelPrepaidCardTransactionRequestFromJSON,
    CancelPrepaidCardTransactionRequestToJSON,
    CancelPrepaidCardTransactionStatusFromJSON,
    CancelPrepaidCardTransactionStatusToJSON,
    CashOutPrepaidCardRequestFromJSON,
    CashOutPrepaidCardRequestToJSON,
    CashOutPrepaidCardStatusFromJSON,
    CashOutPrepaidCardStatusToJSON,
    CashierClosureDetailsFromJSON,
    CashierClosureDetailsToJSON,
    CashierClosureInformationFromJSON,
    CashierClosureInformationToJSON,
    CashierClosureReportsListFromJSON,
    CashierClosureReportsListToJSON,
    CashierReportPostingsInfoFromJSON,
    CashierReportPostingsInfoToJSON,
    CashierTransactionsDetailsFromJSON,
    CashierTransactionsDetailsToJSON,
    CcAuthorizationInstructionsFromJSON,
    CcAuthorizationInstructionsToJSON,
    CcBatchSettlementsFromJSON,
    CcBatchSettlementsToJSON,
    CcBatchSettlementsStatusFromJSON,
    CcBatchSettlementsStatusToJSON,
    CcSurchargeDetailsFromJSON,
    CcSurchargeDetailsToJSON,
    ChangeBillingPaymentRequestFromJSON,
    ChangeBillingPaymentRequestToJSON,
    ChangeRoutingInstructionsRequestFromJSON,
    ChangeRoutingInstructionsRequestToJSON,
    ChangedRoutingInstructionsFromJSON,
    ChangedRoutingInstructionsToJSON,
    CheckDetailsFromJSON,
    CheckDetailsToJSON,
    CheckedRateCodeFromJSON,
    CheckedRateCodeToJSON,
    CloseReservationFolioRequestFromJSON,
    CloseReservationFolioRequestToJSON,
    CompAccountingJournalFromJSON,
    CompAccountingJournalToJSON,
    CompRoutingInstructionsFromJSON,
    CompRoutingInstructionsToJSON,
    CompTrxAuthorizersFromJSON,
    CompTrxAuthorizersToJSON,
    ConvertFolioDetailsFromJSON,
    ConvertFolioDetailsToJSON,
    ConvertFolioRequestFromJSON,
    ConvertFolioRequestToJSON,
    CreatedRoutingInstructionsFromJSON,
    CreatedRoutingInstructionsToJSON,
    CreditCardWalletFromJSON,
    CreditCardWalletToJSON,
    CreditLimitOveragePaymentsDetailsFromJSON,
    CreditLimitOveragePaymentsDetailsToJSON,
    CreditLimitOveragePaymentsInfoFromJSON,
    CreditLimitOveragePaymentsInfoToJSON,
    DeferredTaxesProcessDetailsFromJSON,
    DeferredTaxesProcessDetailsToJSON,
    DepositFolioTransactionDetailsFromJSON,
    DepositFolioTransactionDetailsToJSON,
    DepositMaturityDetailsFromJSON,
    DepositMaturityDetailsToJSON,
    DepositRefundEligibleCheckFromJSON,
    DepositRefundEligibleCheckToJSON,
    DepositedFolioValidateFromJSON,
    DepositedFolioValidateToJSON,
    DepositedPaymentFromJSON,
    DepositedPaymentToJSON,
    DetachDepositPolicyFromPaymentRequestFromJSON,
    DetachDepositPolicyFromPaymentRequestToJSON,
    EarlyDepartureInfoFromJSON,
    EarlyDepartureInfoToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExtendedCashierLockFromJSON,
    ExtendedCashierLockToJSON,
    FinancialPostingsFromJSON,
    FinancialPostingsToJSON,
    FinancialPostingsNetVatFromJSON,
    FinancialPostingsNetVatToJSON,
    FiscalCallStatusFromJSON,
    FiscalCallStatusToJSON,
    FiscalCommandsResponseInfoFromJSON,
    FiscalCommandsResponseInfoToJSON,
    FiscalInformationFolioFromJSON,
    FiscalInformationFolioToJSON,
    FiscalSupportingDocumentsResponseFromJSON,
    FiscalSupportingDocumentsResponseToJSON,
    FixedChargesDetailsFromJSON,
    FixedChargesDetailsToJSON,
    FolioFromJSON,
    FolioToJSON,
    FolioActivityDetailsTypeFromJSON,
    FolioActivityDetailsTypeToJSON,
    FolioActivityResponseDetailTypeFromJSON,
    FolioActivityResponseDetailTypeToJSON,
    FolioHistoryResponseFromJSON,
    FolioHistoryResponseToJSON,
    FolioPrintersFromJSON,
    FolioPrintersToJSON,
    FolioTaxPaymentReversalFromJSON,
    FolioTaxPaymentReversalToJSON,
    FolioTaxPaymentsInfoFromJSON,
    FolioTaxPaymentsInfoToJSON,
    FolioTransactionDetailsFromJSON,
    FolioTransactionDetailsToJSON,
    FolioTypeNameInfoFromJSON,
    FolioTypeNameInfoToJSON,
    FolioTypesInfoFromJSON,
    FolioTypesInfoToJSON,
    ForeignCurrencyExchangeTransactionFromJSON,
    ForeignCurrencyExchangeTransactionToJSON,
    GamingRequestStatusInfoFromJSON,
    GamingRequestStatusInfoToJSON,
    GenerateFiscalFolioRequestFromJSON,
    GenerateFiscalFolioRequestToJSON,
    GenerateFolioRequestFromJSON,
    GenerateFolioRequestToJSON,
    GeneratedFolioFromJSON,
    GeneratedFolioToJSON,
    GuestsTransactionsFromJSON,
    GuestsTransactionsToJSON,
    HotelRevenueDetailsFromJSON,
    HotelRevenueDetailsToJSON,
    LinkReservationPackageAllowanceRequestFromJSON,
    LinkReservationPackageAllowanceRequestToJSON,
    MaturedDepositsDetailsFromJSON,
    MaturedDepositsDetailsToJSON,
    PasserBySaleFromJSON,
    PasserBySaleToJSON,
    PostAdvanceFolioRequestFromJSON,
    PostAdvanceFolioRequestToJSON,
    PostAdvanceRoomChargesRequestFromJSON,
    PostAdvanceRoomChargesRequestToJSON,
    PostArticlesSaleRequestFromJSON,
    PostArticlesSaleRequestToJSON,
    PostAutoCheckoutReservationsRequestFromJSON,
    PostAutoCheckoutReservationsRequestToJSON,
    PostAwardTransactionRequestFromJSON,
    PostAwardTransactionRequestToJSON,
    PostBatchAutoSettlementRequestFromJSON,
    PostBatchAutoSettlementRequestToJSON,
    PostBatchCCSettlementsRequestFromJSON,
    PostBatchCCSettlementsRequestToJSON,
    PostBatchDepositRequestFromJSON,
    PostBatchDepositRequestToJSON,
    PostBedTaxInfoRequestFromJSON,
    PostBedTaxInfoRequestToJSON,
    PostBillingChargesInBatchRequestFromJSON,
    PostBillingChargesInBatchRequestToJSON,
    PostBillingChargesRequestFromJSON,
    PostBillingChargesRequestToJSON,
    PostBillingCheckChargesRequestFromJSON,
    PostBillingCheckChargesRequestToJSON,
    PostBillingPaymentRequestFromJSON,
    PostBillingPaymentRequestToJSON,
    PostCCSettlementRequestFromJSON,
    PostCCSettlementRequestToJSON,
    PostCheckOutRequestFromJSON,
    PostCheckOutRequestToJSON,
    PostCompRedemptionsRequestFromJSON,
    PostCompRedemptionsRequestToJSON,
    PostCompTransactionRequestFromJSON,
    PostCompTransactionRequestToJSON,
    PostCreditBillRequestFromJSON,
    PostCreditBillRequestToJSON,
    PostCreditLimitOveragePaymentsRequestFromJSON,
    PostCreditLimitOveragePaymentsRequestToJSON,
    PostDeferredTaxesProcessRequestFromJSON,
    PostDeferredTaxesProcessRequestToJSON,
    PostDepositFolioRequestFromJSON,
    PostDepositFolioRequestToJSON,
    PostDepositPaymentByExtIdRequestFromJSON,
    PostDepositPaymentByExtIdRequestToJSON,
    PostFBAReimbursementRequestFromJSON,
    PostFBAReimbursementRequestToJSON,
    PostFiscalCommandInvoiceRequestFromJSON,
    PostFiscalCommandInvoiceRequestToJSON,
    PostFiscalInfoRequestFromJSON,
    PostFiscalInfoRequestToJSON,
    PostForeignCurrencyExchangeRequestFromJSON,
    PostForeignCurrencyExchangeRequestToJSON,
    PostGuestCheckDetailsRequestFromJSON,
    PostGuestCheckDetailsRequestToJSON,
    PostPasserBySaleRequestFromJSON,
    PostPasserBySaleRequestToJSON,
    PostPrepaidCardsRequestFromJSON,
    PostPrepaidCardsRequestToJSON,
    PostProformaRequestFromJSON,
    PostProformaRequestToJSON,
    PostRateCodeRequestFromJSON,
    PostRateCodeRequestToJSON,
    PostReversePaymentRequestFromJSON,
    PostReversePaymentRequestToJSON,
    PostRoomAndTaxForDayUseRequestFromJSON,
    PostRoomAndTaxForDayUseRequestToJSON,
    PostStoredFolioDetailsRequestFromJSON,
    PostStoredFolioDetailsRequestToJSON,
    PostSupplementalFolioRequestFromJSON,
    PostSupplementalFolioRequestToJSON,
    PostSupplementalFolioStatusFromJSON,
    PostSupplementalFolioStatusToJSON,
    PostZeroBalanceCheckoutReservationsRequestFromJSON,
    PostZeroBalanceCheckoutReservationsRequestToJSON,
    PostedBillingChargesInBatchFromJSON,
    PostedBillingChargesInBatchToJSON,
    PostedBillingPaymentFromJSON,
    PostedBillingPaymentToJSON,
    PostedCreditBillFromJSON,
    PostedCreditBillToJSON,
    PostedDepositFolioFromJSON,
    PostedDepositFolioToJSON,
    PostedRateCodeFromJSON,
    PostedRateCodeToJSON,
    PostingActivityDetailFromJSON,
    PostingActivityDetailToJSON,
    PostingSummaryListFromJSON,
    PostingSummaryListToJSON,
    PostingsForRefreshFromJSON,
    PostingsForRefreshToJSON,
    ProcessFiscalRetryRequestFromJSON,
    ProcessFiscalRetryRequestToJSON,
    ProcessFiscalRetryStatusFromJSON,
    ProcessFiscalRetryStatusToJSON,
    ProcessReservationDepositRequestFromJSON,
    ProcessReservationDepositRequestToJSON,
    ProcessRoomRoutingRefreshRequestFromJSON,
    ProcessRoomRoutingRefreshRequestToJSON,
    PutBillingChargeRequestFromJSON,
    PutBillingChargeRequestToJSON,
    PutBillingChargesRequestFromJSON,
    PutBillingChargesRequestToJSON,
    PutBillingChargesStatusFromJSON,
    PutBillingChargesStatusToJSON,
    PutCashierLockRequestFromJSON,
    PutCashierLockRequestToJSON,
    PutCashierRequestFromJSON,
    PutCashierRequestToJSON,
    PutForEarlyDepartureRequestFromJSON,
    PutForEarlyDepartureRequestToJSON,
    PutPayeeTaxNumberRequestFromJSON,
    PutPayeeTaxNumberRequestToJSON,
    PutReservationDepositTransferRequestFromJSON,
    PutReservationDepositTransferRequestToJSON,
    PutRoutingInstructionsRequestFromJSON,
    PutRoutingInstructionsRequestToJSON,
    ReceiptHistoryResponseFromJSON,
    ReceiptHistoryResponseToJSON,
    RedeemPrepaidCardsRequestFromJSON,
    RedeemPrepaidCardsRequestToJSON,
    RedeemPrepaidCardsStatusFromJSON,
    RedeemPrepaidCardsStatusToJSON,
    RegisterManualAuthorizationRequestFromJSON,
    RegisterManualAuthorizationRequestToJSON,
    RegisterVaultTransactionRequestFromJSON,
    RegisterVaultTransactionRequestToJSON,
    ReinstateCheckOutRequestFromJSON,
    ReinstateCheckOutRequestToJSON,
    ReloadPrepaidCardRequestFromJSON,
    ReloadPrepaidCardRequestToJSON,
    ReloadPrepaidCardStatusFromJSON,
    ReloadPrepaidCardStatusToJSON,
    ResendSupportingDocumentRequestFromJSON,
    ResendSupportingDocumentRequestToJSON,
    ReservationDepositFoliosFromJSON,
    ReservationDepositFoliosToJSON,
    ReservationFolioInformationFromJSON,
    ReservationFolioInformationToJSON,
    ReservationPackageOptionsFromJSON,
    ReservationPackageOptionsToJSON,
    RevenueBucketTotalsFromJSON,
    RevenueBucketTotalsToJSON,
    ReverseCertificatePostingsRequestFromJSON,
    ReverseCertificatePostingsRequestToJSON,
    ReverseCompRedemptionsRequestFromJSON,
    ReverseCompRedemptionsRequestToJSON,
    ReverseFolioTaxPaymentRequestFromJSON,
    ReverseFolioTaxPaymentRequestToJSON,
    RoomRoutingPostingsFromJSON,
    RoomRoutingPostingsToJSON,
    RoundingDifferenceAmountFromJSON,
    RoundingDifferenceAmountToJSON,
    RoutingInstructionsDetailsFromJSON,
    RoutingInstructionsDetailsToJSON,
    SplitAndTransferTransactionRequestFromJSON,
    SplitAndTransferTransactionRequestToJSON,
    SplitDepositTransactionRequestFromJSON,
    SplitDepositTransactionRequestToJSON,
    SplitDepositTransactionStatusFromJSON,
    SplitDepositTransactionStatusToJSON,
    SplitTransactionRequestFromJSON,
    SplitTransactionRequestToJSON,
    StagedTransactionsFromJSON,
    StagedTransactionsToJSON,
    StatusFromJSON,
    StatusToJSON,
    StoredFolioDetailsInfoFromJSON,
    StoredFolioDetailsInfoToJSON,
    TransactionCodesFromJSON,
    TransactionCodesToJSON,
    TransferCompTransactionsRequestFromJSON,
    TransferCompTransactionsRequestToJSON,
    TransferFolioToWindowRequestFromJSON,
    TransferFolioToWindowRequestToJSON,
    TransferTransactionToReservationRequestFromJSON,
    TransferTransactionToReservationRequestToJSON,
    TransferTransactionToWindowFromJSON,
    TransferTransactionToWindowToJSON,
    TransferTransactionToWindowRequestFromJSON,
    TransferTransactionToWindowRequestToJSON,
    TransitionDepositToGuestFolioRequestFromJSON,
    TransitionDepositToGuestFolioRequestToJSON,
    UpdateFixedChargesRequestFromJSON,
    UpdateFixedChargesRequestToJSON,
    ValidateDepositFolioRequestFromJSON,
    ValidateDepositFolioRequestToJSON,
    ValidatedCreditBillFromJSON,
    ValidatedCreditBillToJSON,
    ValidatedTransactionCodeFromJSON,
    ValidatedTransactionCodeToJSON,
    VoidFolioRequestFromJSON,
    VoidFolioRequestToJSON,
    VoidedFolioFromJSON,
    VoidedFolioToJSON,
} from '../models';

export interface ActivatePrepaidCardOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activatePrepaidCard?: ActivatePrepaidCardRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AdjustTransactionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionsAdjustment?: AdjustTransactionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ApplyFinalPostingsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    finalPostings?: ApplyFinalPostingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ApplyFlexibleBenefitPostingsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    flexibleBenefitPostingsCriteria?: ApplyFlexibleBenefitPostingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AttachDepositPolicyToPaymentOperationRequest {
    transactionId?: string;
    policyId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attachPolicyApplyCriteria?: AttachDepositPolicyToPaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AuthorizeCreditCardAmountRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ccAuthorizationCriteria?: AuthorizeCreditCardAmountByProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AuthorizeCreditCardAmountByProfileOperationRequest {
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ccAuthorizationCriteria?: AuthorizeCreditCardAmountByProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AutoSettleCompFoliosOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoSettleCompFolios?: AutoSettleCompFoliosRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface BreakCashierLockRequest {
    cashierId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CalculateForeignCurrencyOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    foreignCurrencyCriteria?: CalculateForeignCurrencyRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CancelPrepaidCardTransactionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelPrepaidCardTransaction?: CancelPrepaidCardTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CashOutPrepaidCardOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashOutPrepaidCard?: CashOutPrepaidCardRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeBillingPaymentOperationRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingPaymentToChange?: ChangeBillingPaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRoutingInstructionsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsToChange?: ChangeRoutingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CheckPostRateCodeRequest {
    rateCode?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postRateCodeCriteria?: PostRateCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CloseReservationFolioOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    closeFolioCriteria?: CloseReservationFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ConvertFolioOperationRequest {
    folioId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    convertFolioCriteria?: ConvertFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAdvanceRoomChargesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierId?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCompRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    refreshFolio?: boolean;
    retrievePostingsForRoomRouting?: boolean;
    folioWindowNo?: number;
    payeeId?: string;
    membershipIdNo?: number;
    authorizerId?: string;
    userId?: number;
    userName?: string;
    comments?: string;
    daily?: boolean;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    startDate?: Date;
    endDate?: Date;
    creditLimit?: Array<number>;
    percentageLimit?: Array<number>;
    covers?: Array<number>;
    transactionCode?: Array<string>;
    billingCode?: Array<string>;
    routingInstructionsId?: Array<number>;
    routingLinkId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFolioRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    refreshFolio?: boolean;
    retrievePostingsForRoomRouting?: boolean;
    folioWindowNo?: number;
    payeeId?: string;
    daily?: boolean;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    startDate?: Date;
    endDate?: Date;
    creditLimit?: Array<number>;
    percentageLimit?: Array<number>;
    covers?: Array<number>;
    transactionCode?: Array<string>;
    billingCode?: Array<string>;
    routingInstructionsId?: Array<number>;
    routingLinkId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRequestRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    refreshFolio?: boolean;
    retrievePostingsForRoomRouting?: boolean;
    userName?: string;
    comments?: string;
    daily?: boolean;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    startDate?: Date;
    endDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    refreshFolio?: boolean;
    retrievePostingsForRoomRouting?: boolean;
    reservationNameId?: string;
    daily?: boolean;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    startDate?: Date;
    endDate?: Date;
    creditLimit?: Array<number>;
    percentageLimit?: Array<number>;
    covers?: Array<number>;
    transactionCode?: Array<string>;
    billingCode?: Array<string>;
    routingInstructionsId?: Array<number>;
    routingLinkId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DetachDepositPolicyFromPaymentOperationRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    detachPolicyApplyCriteria?: DetachDepositPolicyFromPaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GenerateFiscalFolioOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalInfoFolioCriteria?: GenerateFiscalFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GenerateFolioOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioCriteria?: GenerateFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdditionalTaxesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    folioView?: number;
    currencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdvancePaymentBalanceRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    fromDate?: Date;
    numberOfNights?: number;
    eventType?: GetAdvancePaymentBalanceEventTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertArea?: GetAlertsAlertAreaEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizationHistoryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    includeAuthorizations?: boolean;
    includePayments?: boolean;
    includeRefunds?: boolean;
    includeFailures?: boolean;
    folioView?: number;
    transactionType?: GetAuthorizationHistoryTransactionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizersCreditInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    code?: Array<string>;
    includeCreditDetails?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBalanceInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: GetBalanceInfoEventEnum;
    id?: string;
    idContext?: string;
    type?: string;
    folioWindowNo?: Array<number>;
    cashierId?: Array<number>;
    transactionCode?: Array<string>;
    articleCode?: Array<string>;
    amount?: Array<number>;
    currencyCode?: Array<string>;
    postingQuantity?: Array<number>;
    postingReference?: Array<string>;
    postingRemark?: Array<string>;
    checkNumber?: Array<string>;
    arrangementCode?: Array<string>;
    applyRoutingInstructions?: Array<boolean>;
    usePackageAllowance?: Array<boolean>;
    autoPosting?: Array<boolean>;
    uniqueIdId?: Array<string>;
    uniqueIdIdContext?: Array<string>;
    uniqueIdType?: Array<string>;
    postItNumberId?: string;
    postItNumberIdContext?: string;
    postItNumberType?: string;
    profileIdId?: string;
    profileIdIdContext?: string;
    profileIdType?: string;
    reservationIdId?: string;
    reservationIdIdContext?: string;
    reservationIdType?: string;
    policyIdId?: string;
    policyIdIdContext?: string;
    policyIdType?: string;
    fiscalBillNo?: string;
    folioDate?: Date;
    folioNo?: number;
    folioStatus?: GetBalanceInfoFolioStatusEnum;
    folioTypeName?: string;
    internalFolioWindowID?: string;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBatchCCSettlementsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    offlineSettlement?: boolean;
    transactionDate?: Date;
    guestName?: string;
    roomId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBatchCCSettlementsStatusRequest {
    batchId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBedTaxInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arrival?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBillingInstructionCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    includeBillingInstructions?: boolean;
    includeCompInstructions?: boolean;
    codeWildCard?: string;
    descriptionWildCard?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCCAuthorizationInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    evaluateApprovalAmount?: boolean;
    sourceOfAuthorization?: GetCCAuthorizationInstructionsSourceOfAuthorizationEnum;
    updateReservation?: boolean;
    idContext?: string;
    type?: string;
    profileIdIdContext?: string;
    profileIdType?: string;
    amount?: number;
    currencyCode?: string;
    folioView?: number;
    description?: string;
    paymentFolioView?: number;
    paymentMethod?: string;
    track2Data?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetCCAuthorizationInstructionsCardOrTokenEnum;
    storeToCreditCardWallet?: boolean;
    cardType?: GetCCAuthorizationInstructionsCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetCCAuthorizationInstructionsProcessingEnum;
    swiped?: boolean;
    cardPresent?: boolean;
    citId?: string;
    userDefinedCardType?: string;
    cardIdId?: string;
    cardIdIdContext?: string;
    cardIdType?: string;
    currentAuthorizedAmountAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    code?: number;
    amountAmount?: number;
    amountCurrencyCode?: string;
    percent?: number;
    emailFolio?: boolean;
    uniqueIdId?: string;
    uniqueIdIdContext?: string;
    uniqueIdType?: string;
    createDateTime?: string;
    creatorId?: string;
    emailAddress?: string;
    emailFormat?: GetCCAuthorizationInstructionsEmailFormatEnum;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    orderSequence?: number;
    primaryInd?: boolean;
    purgeDate?: Date;
    emailType?: string;
    typeDescription?: string;
    approvalCode?: string;
    originalAuthSequence?: number;
    vendorTranId?: string;
    approvalAmountAmount?: number;
    approvalAmountCurrencyCode?: string;
    terminalId?: string;
    incidentalAmountAmount?: number;
    incidentalAmountCurrencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCCAuthorizationInstructionsByProfileRequest {
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    evaluateApprovalAmount?: boolean;
    sourceOfAuthorization?: GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum;
    updateReservation?: boolean;
    idContext?: string;
    type?: string;
    profileIdIdContext?: string;
    profileIdType?: string;
    amount?: number;
    currencyCode?: string;
    folioView?: number;
    description?: string;
    paymentFolioView?: number;
    paymentMethod?: string;
    track2Data?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetCCAuthorizationInstructionsByProfileCardOrTokenEnum;
    cardType?: GetCCAuthorizationInstructionsByProfileCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetCCAuthorizationInstructionsByProfileProcessingEnum;
    swiped?: boolean;
    cardPresent?: boolean;
    citId?: string;
    userDefinedCardType?: string;
    cardIdId?: string;
    cardIdIdContext?: string;
    cardIdType?: string;
    currentAuthorizedAmountAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    code?: number;
    amountAmount?: number;
    amountCurrencyCode?: string;
    percent?: number;
    emailFolio?: boolean;
    uniqueIdId?: string;
    uniqueIdIdContext?: string;
    uniqueIdType?: string;
    createDateTime?: string;
    creatorId?: string;
    emailAddress?: string;
    emailFormat?: GetCCAuthorizationInstructionsByProfileEmailFormatEnum;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    orderSequence?: number;
    primaryInd?: boolean;
    purgeDate?: Date;
    emailType?: string;
    typeDescription?: string;
    approvalCode?: string;
    originalAuthSequence?: number;
    vendorTranId?: string;
    approvalAmountAmount?: number;
    approvalAmountCurrencyCode?: string;
    terminalId?: string;
    incidentalAmountAmount?: number;
    incidentalAmountCurrencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCCSurchargeInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierId?: number;
    description?: string;
    folioView?: number;
    paymentMethod?: string;
    track2Data?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetCCSurchargeInfoCardOrTokenEnum;
    cardType?: GetCCSurchargeInfoCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetCCSurchargeInfoProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    id?: string;
    idContext?: string;
    type?: string;
    amount?: number;
    currencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    code?: number;
    amountAmount?: number;
    amountCurrencyCode?: string;
    percent?: number;
    emailFolio?: boolean;
    uniqueIdId?: string;
    uniqueIdIdContext?: string;
    uniqueIdType?: string;
    createDateTime?: string;
    creatorId?: string;
    emailAddress?: string;
    emailFormat?: GetCCSurchargeInfoEmailFormatEnum;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    orderSequence?: number;
    primaryInd?: boolean;
    purgeDate?: Date;
    emailType?: string;
    typeDescription?: string;
    approvalCode?: string;
    originalAuthSequence?: number;
    vendorTranId?: string;
    approvalAmountAmount?: number;
    approvalAmountCurrencyCode?: string;
    postingAmountAmount?: number;
    postingAmountCurrencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierClosureRequest {
    cashierId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierLockHandle?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierClosureInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    closureNo?: number;
    cashierId?: number;
    shiftDropLocationCode?: string;
    bagNumberForOthers?: string;
    bagNumberForCash?: string;
    closureBusinessDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierClosureReportsListRequest {
    cashierId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    closureNo?: number;
    shiftDropLocationCode?: string;
    bagNumberForOthers?: string;
    bagNumberForCash?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierLockRequest {
    cashierId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierReportPostingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    requestType?: GetCashierReportPostingsRequestTypeEnum;
    closureNo?: number;
    cashierId?: number;
    shiftDropLocationCode?: string;
    bagNumberForOthers?: string;
    bagNumberForCash?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierTransactionsRequest {
    cashierId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    closureNo?: number;
    shiftDropLocationCode?: string;
    bagNumberForOthers?: string;
    bagNumberForCash?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCheckDetailsRequest {
    checkNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompAccountingJournalRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    filterTransactionCode?: Array<string>;
    hotelId?: Array<string>;
    filterRoomNumber?: Array<string>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    approvalCode?: string;
    code?: Array<string>;
    authorizerNameCode?: Array<string>;
    referenceNumberWildCard?: string;
    supplementWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompPostingJournalRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    filterTransactionCode?: Array<string>;
    filterRoomNumber?: Array<string>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    approvalCode?: string;
    code?: Array<string>;
    authorizerNameCode?: Array<string>;
    referenceNumberWildCard?: string;
    supplementWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompRoutingInstructionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    end?: Date;
    start?: Date;
    nameWildcard?: string;
    firstNameWildCard?: string;
    roomNumberCodes?: Array<string>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    membershipId?: string;
    code?: Array<string>;
    resStatusCode?: Set<GetCompRoutingInstructionsResStatusCodeEnum>;
    compRoutingStatuses?: Set<GetCompRoutingInstructionsCompRoutingStatusesEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompTrxAuthorizersRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierId?: number;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    targetFolioWindowNo?: number;
    uniqueIdId?: Array<string>;
    uniqueIdIdContext?: Array<string>;
    uniqueIdType?: Array<string>;
    transaction?: Array<number>;
    authorizerIdId?: string;
    authorizerIdIdContext?: string;
    authorizerIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditLimitOveragePaymentsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestNameWildCard?: string;
    roomNumberWildCard?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositFolioRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetDepositFolioFetchInstructionsEnum>;
    id?: string;
    policyIdId?: string;
    blockIdId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositFolioTransactionDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeGenerates?: boolean;
    transactionNo?: Array<number>;
    includeExchangeInformation?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositMaturityInfoRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierId?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEligibleBillAmountRequest {
    hotelId?: string;
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioView?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFinancialPostingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    cashierId?: number;
    filterTransactionCode?: Array<string>;
    code?: Array<string>;
    filterRoomNumber?: Array<string>;
    referenceNumberWildCard?: string;
    checkNumberWildCard?: string;
    supplementWildCard?: string;
    approvalCode?: string;
    approvalStatusCode?: Array<string>;
    folioWindowNo?: Array<number>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetFinancialPostingsCardOrTokenEnum;
    cardType?: GetFinancialPostingsCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetFinancialPostingsProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    id?: string;
    idContext?: string;
    type?: string;
    amount?: number;
    currencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    closureNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFinancialPostingsNetVatRequest {
    hotelId?: string;
    reservationId?: string;
    folioWindowNo?: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalFolioActivityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioSeqNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalFolioActivityDetailsRequest {
    folioSeqNo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    responseAttemptNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalPrintingDetailsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioView?: number;
    folioType?: string;
    id?: string;
    code?: Array<string>;
    fetchInstruction?: Set<GetFiscalPrintingDetailsFetchInstructionEnum>;
    profileIdId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalSupportingDocumentsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    surname?: string;
    givenName?: string;
    confirmationNo?: string;
    arrivalStartDate?: Date;
    arrivalEndDate?: Date;
    departureStartDate?: Date;
    departureEndDate?: Date;
    roomId?: string;
    documentType?: Set<GetFiscalSupportingDocumentsDocumentTypeEnum>;
    documentNo?: string;
    pendingDocumentsOnly?: boolean;
    fromCreateDateTime?: string;
    limit?: number;
    offset?: number;
    orderBy?: Array<GetFiscalSupportingDocumentsOrderByEnum>;
    sortOrder?: Set<GetFiscalSupportingDocumentsSortOrderEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFixedChargesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestPayOnly?: boolean;
    includeFolioHistory?: boolean;
    reservationBalanceOnly?: boolean;
    fetchInstructions?: Set<GetFolioFetchInstructionsEnum>;
    end?: Array<Date>;
    folioWindowNo?: Array<number>;
    limit?: Array<number>;
    offset?: Array<number>;
    start?: Array<Date>;
    summaryOnly?: boolean;
    groupType?: GetFolioGroupTypeEnum;
    exchangeCurrency?: string;
    calculateCollectingAgentTaxes?: boolean;
    vATOffset?: boolean;
    includeDepositTaxes?: boolean;
    simpleFolio?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioHistoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    aR?: boolean;
    checkOut?: boolean;
    creditBill?: boolean;
    supplementalFolio?: boolean;
    includeAssociatedFolios?: boolean;
    noShow?: boolean;
    offlineFolio?: boolean;
    passerBy?: boolean;
    postIt?: boolean;
    videoCheckOut?: boolean;
    folioDate?: Date;
    reservationIdId?: string;
    reservationIdIdContext?: string;
    reservationIdType?: string;
    room?: string;
    name?: string;
    firstName?: string;
    creditCardNo?: string;
    folioNo?: string;
    invoiceNo?: number;
    addresseeName?: string;
    fiscalFolioNo?: string;
    code?: Array<string>;
    partnerFiscalFolioStatusCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioPrintersRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allFolioWindow?: boolean;
    correction?: boolean;
    debitFolio?: boolean;
    folioWindowNo?: number;
    manualFolioNo?: number;
    cashierId?: number;
    fiscalTerminalId?: string;
    eventType?: GetFolioPrintersEventTypeEnum;
    id?: string;
    profileIdId?: string;
    currencyCode?: string;
    exchangeRate?: number;
    associatedBillNumber?: number;
    associatedBillFolioType?: string;
    associatedBillQueueName?: string;
    associatedBillFiscalBillNumber?: string;
    associatedBillGenerationDate?: Date;
    folioType?: string;
    generateFiscalFolio?: boolean;
    queueName?: string;
    folioSeqId?: number;
    fiscalFolioInstruction?: GetFolioPrintersFiscalFolioInstructionEnum;
    transactionServiceType?: string;
    amount?: number;
    balanceCurrencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTaxPaymentsInfoRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioWindowNo?: number;
    cashierId?: number;
    description?: string;
    folioView?: number;
    paymentMethod?: string;
    track2Data?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetFolioTaxPaymentsInfoCardOrTokenEnum;
    cardType?: GetFolioTaxPaymentsInfoCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetFolioTaxPaymentsInfoProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    id?: string;
    idContext?: string;
    type?: string;
    amount?: number;
    currencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    code?: number;
    amountAmount?: number;
    amountCurrencyCode?: string;
    percent?: number;
    emailFolio?: boolean;
    uniqueIdId?: string;
    uniqueIdIdContext?: string;
    uniqueIdType?: string;
    createDateTime?: string;
    creatorId?: string;
    emailAddress?: string;
    emailFormat?: GetFolioTaxPaymentsInfoEmailFormatEnum;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    orderSequence?: number;
    primaryInd?: boolean;
    purgeDate?: Date;
    emailType?: string;
    typeDescription?: string;
    approvalCode?: string;
    originalAuthSequence?: number;
    vendorTranId?: string;
    approvalAmountAmount?: number;
    approvalAmountCurrencyCode?: string;
    postingAmountAmount?: number;
    postingAmountCurrencyCode?: string;
    postingReference?: string;
    postingRemark?: string;
    comments?: string;
    applyCCSurcharge?: boolean;
    manualPaymentTaxInfoFolioWindowNo?: number;
    transactionCode?: string;
    transactionDate?: Date;
    transactionDescription?: string;
    transactionNo?: number;
    taxInvoiceNo?: string;
    paymentType?: GetFolioTaxPaymentsInfoPaymentTypeEnum;
    manualPaymentTaxAmount?: number;
    manualPaymentTaxCurrencyCode?: string;
    taxableAmountAmount?: number;
    taxableAmountCurrencyCode?: string;
    nonTaxableAmountAmount?: number;
    nonTaxableAmountCurrencyCode?: string;
    availableCreditAmount?: number;
    availableCreditCurrencyCode?: string;
    paymentDate?: Date;
    taxFolioWindowNo?: Array<number>;
    taxTransactionCode?: Array<string>;
    taxTransactionDate?: Array<Date>;
    taxTransactionDescription?: Array<string>;
    taxTransactionNo?: Array<number>;
    taxTaxInvoiceNo?: Array<string>;
    taxPaymentType?: Set<GetFolioTaxPaymentsInfoTaxPaymentTypeEnum>;
    creditablePaymentTaxesAmount?: number;
    creditablePaymentTaxesCurrencyCode?: string;
    creditablePaymentTaxableAmount?: number;
    creditablePaymentTaxableCurrencyCode?: string;
    creditablePaymentNonTaxableAmount?: number;
    creditablePaymentNonTaxableCurrencyCode?: string;
    availableTaxCreditAmount?: number;
    availableTaxCreditCurrencyCode?: string;
    taxPaymentDate?: Array<Date>;
    terminalId?: string;
    overrideInsufficientCC?: boolean;
    changeDueAmount?: number;
    changeDueAmountCurrencyCode?: string;
    overrideARCreditLimit?: boolean;
    applyCurrencyTaxes?: boolean;
    vATOffset?: boolean;
    action?: GetFolioTaxPaymentsInfoActionEnum;
    reservationIdIdContext?: string;
    reservationIdType?: string;
    profileIdId?: string;
    profileIdIdContext?: string;
    profileIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTransactionDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeGenerates?: boolean;
    transactionNo?: Array<number>;
    includeExchangeInformation?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypeNameRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    internalFolioWindowId?: string;
    languageCode?: string;
    folioTypeName?: string;
    folioReportGroup?: GetFolioTypeNameFolioReportGroupEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeCompress?: boolean;
    includeCredit?: boolean;
    folioType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGamingRequestStatusInfoRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestsTransactionsRequest {
    hotelId?: string;
    reservationList?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeGenerates?: boolean;
    includeTransactionsWithARInvoiceNo?: boolean;
    includeTransactionsWithFolioNo?: boolean;
    includeTransactionsWithManualPostingOnly?: boolean;
    idContext?: Array<string>;
    type?: Array<string>;
    transactionNo?: Array<number>;
    transactionGroup?: Array<string>;
    transactionSubGroup?: Array<string>;
    billingCode?: Array<string>;
    billingHotelId?: Array<string>;
    desc?: Array<string>;
    routingInstructionsId?: Array<number>;
    trxCodeWildCard?: string;
    trxDescriptionWildCard?: string;
    checkNumberWildCard?: string;
    referenceNumberWildCard?: string;
    supplementWildCard?: string;
    windowNo?: Array<number>;
    cashieringTransactionType?: Set<GetGuestsTransactionsCashieringTransactionTypeEnum>;
    startDate?: Date;
    endDate?: Date;
    cashierId?: number;
    code?: Array<string>;
    commissionable?: boolean;
    serviceRecoveryAllowed?: boolean;
    postedTransactionType?: Set<GetGuestsTransactionsPostedTransactionTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelCreditCardWalletRequest {
    hotelId?: string;
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRevenueRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    businessDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMaturedDepositsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostBillingChargesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierId?: number;
    folioWindowNo?: Array<number>;
    chargeCashierId?: Array<number>;
    transactionCode?: Array<string>;
    articleCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    postingQuantity?: Array<number>;
    postingReference?: Array<string>;
    postingRemark?: Array<string>;
    checkNumber?: Array<string>;
    arrangementCode?: Array<string>;
    applyRoutingInstructions?: Array<boolean>;
    usePackageAllowance?: Array<boolean>;
    autoPosting?: Array<boolean>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    reservationIdIdContext?: string;
    reservationIdType?: string;
    option?: Set<GetPostBillingChargesOptionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostingActivityDetailRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    module?: string;
    logDate?: string;
    refActionId?: number;
    logUserId?: number;
    logUserName?: string;
    machineStation?: string;
    croCode?: string;
    actionType?: string;
    actionDescription?: string;
    iPAddress?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostingSummaryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeGenerates?: boolean;
    postingDate?: Date;
    checkPostings?: boolean;
    postingsByExternalSystem?: boolean;
    cashierId?: number;
    currency?: string;
    postingSummaryType?: GetPostingSummaryPostingSummaryTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostingsForRefreshRequest {
    targetReservationId?: string;
    sourceReservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    targetResvNameIdContext?: string;
    targetResvNameIdType?: string;
    daily?: boolean;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    startDate?: Date;
    endDate?: Date;
    transactionHotelId?: Array<string>;
    printTrxReceipt?: Array<boolean>;
    transactionCode?: Array<string>;
    description?: Array<string>;
    transactionGroup?: Array<string>;
    transactionSubGroup?: Array<string>;
    universalProductCode?: Array<string>;
    routingInstructionsId?: Array<number>;
    articleCode?: Array<string>;
    articleHotelId?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    articleDescription?: Array<string>;
    articleTransactionCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    availableForPostIt?: boolean;
    color?: GetPostingsForRefreshColorEnum;
    articleUniversalProductCode?: Array<string>;
    billingCode?: Array<string>;
    billingHotelId?: Array<string>;
    desc?: Array<string>;
    billingInstructionRoutingInstructionsId?: Array<number>;
    creditLimit?: number;
    percentageLimit?: number;
    covers?: number;
    limitUsed?: number;
    id?: string;
    routingLinkIdIdContext?: string;
    routingLinkIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReceiptHistoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromDate?: Date;
    toDate?: Date;
    name?: string;
    firstName?: string;
    receiptTypeName?: string;
    taxInvoice?: string;
    receiptNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPackageOptionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationRevenueBucketTotalsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    revenueBucketType?: string;
    compRevenue?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoundingDifferenceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: GetRoundingDifferenceEventEnum;
    folioWindowNo?: number;
    internalFolioWindowID?: string;
    cashierId?: number;
    hotelId?: string;
    id?: string;
    amount?: number;
    currencyCode?: string;
    description?: string;
    folioView?: number;
    paymentMethod?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: GetRoundingDifferenceCardOrTokenEnum;
    cardType?: GetRoundingDifferenceCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: GetRoundingDifferenceProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardIdId?: string;
    currentAuthorizedAmountAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmountNeededAmount?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    code?: number;
    amountAmount?: number;
    amountCurrencyCode?: string;
    percent?: number;
    emailFolio?: boolean;
    uniqueIdId?: string;
    createDateTime?: string;
    creatorId?: string;
    emailAddress?: string;
    emailFormat?: GetRoundingDifferenceEmailFormatEnum;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    orderSequence?: number;
    primaryInd?: boolean;
    purgeDate?: Date;
    emailType?: string;
    typeDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    includeWindowRouting?: boolean;
    includeRoomRouting?: boolean;
    includeCompRouting?: boolean;
    includeCompRoutingRequests?: boolean;
    effectiveOn?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStoredFolioDetailsRequest {
    folioId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalBillNo?: string;
    folioDate?: Date;
    folioStatus?: GetStoredFolioDetailsFolioStatusEnum;
    folioTypeName?: string;
    internalFolioWindowID?: string;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: GetTransactionCodesEventEnum;
    includeArticles?: boolean;
    userRoleTransactions?: boolean;
    manualPostAllowed?: boolean;
    code?: string;
    description?: string;
    wildCard?: string;
    fiscalBillNo?: string;
    folioDate?: Date;
    folioNo?: number;
    folioStatus?: GetTransactionCodesFolioStatusEnum;
    folioTypeName?: string;
    internalFolioWindowID?: string;
    invoiceNo?: number;
    trxServiceType?: GetTransactionCodesTrxServiceTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetValidateFiscalPrintingDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioView?: number;
    folioType?: string;
    id?: string;
    code?: Array<string>;
    fetchInstruction?: Set<GetValidateFiscalPrintingDetailsFetchInstructionEnum>;
    profileIdId?: string;
    fiscalServiceMode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetfetchStagedTransactionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId2?: string;
    folioWindowNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface IsDepositRefundEligibleRequest {
    transactionId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface LinkReservationPackageAllowanceOperationRequest {
    destinationReservationId?: string;
    sourceReservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationPackageAllowance?: LinkReservationPackageAllowanceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdvanceFolioOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchAdvanceFolio?: PostAdvanceFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdvanceRoomChargesOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advanceRoomCharges?: PostAdvanceRoomChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostArticlesSaleOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articlesSaleCriteria?: PostArticlesSaleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAutoCheckoutReservationsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchAutoCheckoutReservation?: PostAutoCheckoutReservationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAwardTransactionOperationRequest {
    hotelId?: string;
    reservationId?: number;
    membershipId?: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardDetails?: PostAwardTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBatchAutoSettlementOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchAutoSettlementCriteria?: PostBatchAutoSettlementRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBatchCCSettlementsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ccBatchSettlementsProcessCriteria?: PostBatchCCSettlementsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBatchDepositOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchDeposit?: PostBatchDepositRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBedTaxInfoOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTaxCriteria?: PostBedTaxInfoRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBillingChargesOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingCharges?: PostBillingChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBillingChargesInBatchOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingChargesInBatchCriteria?: PostBillingChargesInBatchRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBillingCheckChargesOperationRequest {
    checkNumber?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingCheckChargesCriteria?: PostBillingCheckChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBillingPaymentOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingPayment?: PostBillingPaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCCSettlementOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ccSettlementCriteria?: PostCCSettlementRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCheckOutOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservation?: PostCheckOutRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompRedemptionsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postCompRedemptions?: PostCompRedemptionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompTransactionOperationRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTransactionCriteria?: PostCompTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditBillOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditBillCriteria?: PostCreditBillRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditLimitOveragePaymentsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditLimitOveragePayments?: PostCreditLimitOveragePaymentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDeferredTaxesProcessOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    deferredTaxesProcess?: PostDeferredTaxesProcessRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositFolioOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositFolioCriteria?: PostDepositFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositPaymentRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositPayment?: PostDepositPaymentByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositPaymentByExtIdOperationRequest {
    reservationId?: string;
    externalSysCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositPayment?: PostDepositPaymentByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFBAReimbursementOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fbaReimbursementCriteria?: PostFBAReimbursementRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFBASettlementRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fbaReimbursementCriteria?: PostFBAReimbursementRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalCommandInvoiceOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioCriteria?: PostFiscalCommandInvoiceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalInfoOperationRequest {
    hotelId?: string;
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postFiscalInfoType?: PostFiscalInfoRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalInvoiceRequest {
    folioId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioCriteria?: PostFiscalCommandInvoiceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFixedChargesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fixedCharges?: UpdateFixedChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostForeignCurrencyExchangeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    foreignCurrencyExchange?: PostForeignCurrencyExchangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestCheckDetailsOperationRequest {
    checkNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestCheckDetails?: PostGuestCheckDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPasserBySaleOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    passerBySalesCriteria?: PostPasserBySaleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPrepaidCardsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    prepaidCardCriteria?: PostPrepaidCardsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProformaOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationFolio?: PostProformaRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateCodeOperationRequest {
    rateCode?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postRateCodeCriteria?: PostRateCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReversePaymentOperationRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    paymentReversalCriteria?: PostReversePaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomAndTaxForDayUseOperationRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postRoomAndTaxForDayUse?: PostRoomAndTaxForDayUseRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostStoredFolioDetailsOperationRequest {
    folioId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    storedFolioDetails?: PostStoredFolioDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSupplementalFolioOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postSupplementalFolio?: PostSupplementalFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostZeroBalanceCheckoutReservationsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchZeroBalanceCheckoutReservation?: PostZeroBalanceCheckoutReservationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessFiscalRetryOperationRequest {
    folioId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    processFiscalRetry?: ProcessFiscalRetryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessReservationDepositOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositCriteria?: ProcessReservationDepositRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessRoomRoutingRefreshOperationRequest {
    targetReservationId?: string;
    sourceReservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRoutingRefresh?: ProcessRoomRoutingRefreshRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBedTaxInfoRequest {
    taxRegistraitionNo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTaxCriteria?: PostBedTaxInfoRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBillingChargeOperationRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    billingCharge?: PutBillingChargeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBillingChargesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    putBillingCharges?: PutBillingChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCashierOperationRequest {
    cashierId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierClosure?: PutCashierRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCashierLockOperationRequest {
    lockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierLockCriteriaToExtend?: PutCashierLockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutForEarlyDepartureOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    earlyDeparture?: PutForEarlyDepartureRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPayeeTaxNumberOperationRequest {
    payeeId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    payeeTaxNumber?: PutPayeeTaxNumberRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationDepositTransferOperationRequest {
    sourceReservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositTransferCriteria?: PutReservationDepositTransferRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoutingInstructionsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructions?: PutRoutingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RedeemPrepaidCardsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    redeemPrepaidCards?: RedeemPrepaidCardsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RegisterManualAuthorizationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ccManualAuthorizationCriteria?: RegisterManualAuthorizationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RegisterVaultTransactionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    vaultTransaction?: RegisterVaultTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReinstateCheckOutOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateCheckedOutReservation?: ReinstateCheckOutRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReleaseCashierLockRequest {
    lockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReloadPrepaidCardOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reloadPrepaidCard?: ReloadPrepaidCardRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveBedTaxInfoRequest {
    taxRegistraitionNo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFixedChargesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fixedChargeID?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ResendSupportingDocumentOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalSupportingDocumentCriteria?: ResendSupportingDocumentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReverseARInvoiceRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reasonCode?: string;
    cashierId?: number;
    transactionCodes?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReverseCertificatePostingsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reverseCertificatePostingsCriteria?: ReverseCertificatePostingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReverseCompRedemptionsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reverseCompRedemptions?: ReverseCompRedemptionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReverseFlexibleBenefitPostingRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReverseFolioTaxPaymentOperationRequest {
    cashierId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionReversal?: ReverseFolioTaxPaymentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SplitAndTransferTransactionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionToSplitAndTransfer?: SplitAndTransferTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SplitDepositTransactionOperationRequest {
    transactionId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    splitDepositTransaction?: SplitDepositTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SplitTransactionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionToSplit?: SplitTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TransferCompTransactionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transferCompTransactions?: TransferCompTransactionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TransferFolioToWindowOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioToWindow?: TransferFolioToWindowRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TransferTransactionToReservationOperationRequest {
    toReservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationTransaction?: TransferTransactionToReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TransferTransactionToWindowOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionToWindow?: TransferTransactionToWindowRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TransitionDepositToGuestFolioOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositToGuestFolio?: TransitionDepositToGuestFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UnlinkReservationPackageAllowanceRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UpdateFixedChargesOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fixedCharges?: UpdateFixedChargesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateCreditBillRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditBillCriteria?: PostCreditBillRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateDepositFolioOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositFolioValidateCriteria?: ValidateDepositFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateTransactionCodesRequest {
    transactionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: ValidateTransactionCodesEventEnum;
    fiscalBillNo?: string;
    folioDate?: Date;
    folioNo?: number;
    folioStatus?: ValidateTransactionCodesFolioStatusEnum;
    folioTypeName?: string;
    internalFolioWindowID?: string;
    invoiceNo?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface VerifyForEarlyDepartureRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ignoreCheckOnTieredRate?: boolean;
    ignoreRateRestriction?: boolean;
    postConsumedAllowanceToGuest?: boolean;
    postEarlyDeparturePenalty?: boolean;
    cashierId?: number;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface VoidBillingCheckChargesRequest {
    checkNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueDate?: Date;
    amount?: number;
    currencyCode?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    checkId?: string;
    checkIdContext?: string;
    checkIdType?: string;
    cashierId?: number;
    postingRemark?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface VoidFolioOperationRequest {
    folioId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioToVoid?: VoidFolioRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CashieringApi extends runtime.BaseAPI {

    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    async activatePrepaidCardRaw(requestParameters: ActivatePrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivatePrepaidCardStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/activate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActivatePrepaidCardRequestToJSON(requestParameters.activatePrepaidCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivatePrepaidCardStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    async activatePrepaidCard(requestParameters: ActivatePrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivatePrepaidCardStatus> {
        const response = await this.activatePrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    async adjustTransactionsRaw(requestParameters: AdjustTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustedTransactions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/adjust`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustTransactionsRequestToJSON(requestParameters.transactionsAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustedTransactionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    async adjustTransactions(requestParameters: AdjustTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustedTransactions> {
        const response = await this.adjustTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    async applyFinalPostingsRaw(requestParameters: ApplyFinalPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/finalCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyFinalPostingsRequestToJSON(requestParameters.finalPostings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    async applyFinalPostings(requestParameters: ApplyFinalPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.applyFinalPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    async applyFlexibleBenefitPostingsRaw(requestParameters: ApplyFlexibleBenefitPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/flexibleBenefitPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyFlexibleBenefitPostingsRequestToJSON(requestParameters.flexibleBenefitPostingsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    async applyFlexibleBenefitPostings(requestParameters: ApplyFlexibleBenefitPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.applyFlexibleBenefitPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    async attachDepositPolicyToPaymentRaw(requestParameters: AttachDepositPolicyToPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policies/{policyId}/transactions/{transactionId}/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttachDepositPolicyToPaymentRequestToJSON(requestParameters.attachPolicyApplyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    async attachDepositPolicyToPayment(requestParameters: AttachDepositPolicyToPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.attachDepositPolicyToPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    async authorizeCreditCardAmountRaw(requestParameters: AuthorizeCreditCardAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizeCreditCardAmountByProfileRequestToJSON(requestParameters.ccAuthorizationCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    async authorizeCreditCardAmount(requestParameters: AuthorizeCreditCardAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationInfo> {
        const response = await this.authorizeCreditCardAmountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    async authorizeCreditCardAmountByProfileRaw(requestParameters: AuthorizeCreditCardAmountByProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorize`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizeCreditCardAmountByProfileRequestToJSON(requestParameters.ccAuthorizationCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    async authorizeCreditCardAmountByProfile(requestParameters: AuthorizeCreditCardAmountByProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationInfo> {
        const response = await this.authorizeCreditCardAmountByProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    async autoSettleCompFoliosRaw(requestParameters: AutoSettleCompFoliosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoSettleCompFoliosStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/comp/folios/autoSettlements`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AutoSettleCompFoliosRequestToJSON(requestParameters.autoSettleCompFolios),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoSettleCompFoliosStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    async autoSettleCompFolios(requestParameters: AutoSettleCompFoliosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoSettleCompFoliosStatus> {
        const response = await this.autoSettleCompFoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    async breakCashierLockRaw(requestParameters: BreakCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    async breakCashierLock(requestParameters: BreakCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.breakCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    async calculateForeignCurrencyRaw(requestParameters: CalculateForeignCurrencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedForeignCurrency>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrency`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateForeignCurrencyRequestToJSON(requestParameters.foreignCurrencyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedForeignCurrencyFromJSON(jsonValue));
    }

    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    async calculateForeignCurrency(requestParameters: CalculateForeignCurrencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedForeignCurrency> {
        const response = await this.calculateForeignCurrencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    async cancelPrepaidCardTransactionRaw(requestParameters: CancelPrepaidCardTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelPrepaidCardTransactionStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/cancel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelPrepaidCardTransactionRequestToJSON(requestParameters.cancelPrepaidCardTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelPrepaidCardTransactionStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    async cancelPrepaidCardTransaction(requestParameters: CancelPrepaidCardTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelPrepaidCardTransactionStatus> {
        const response = await this.cancelPrepaidCardTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    async cashOutPrepaidCardRaw(requestParameters: CashOutPrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashOutPrepaidCardStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/cashOut`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CashOutPrepaidCardRequestToJSON(requestParameters.cashOutPrepaidCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashOutPrepaidCardStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    async cashOutPrepaidCard(requestParameters: CashOutPrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashOutPrepaidCardStatus> {
        const response = await this.cashOutPrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Billing Payment. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    async changeBillingPaymentRaw(requestParameters: ChangeBillingPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/payments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeBillingPaymentRequestToJSON(requestParameters.billingPaymentToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Billing Payment. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    async changeBillingPayment(requestParameters: ChangeBillingPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeBillingPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    async changeRoutingInstructionsRaw(requestParameters: ChangeRoutingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedRoutingInstructions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/change`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoutingInstructionsRequestToJSON(requestParameters.routingInstructionsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedRoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    async changeRoutingInstructions(requestParameters: ChangeRoutingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedRoutingInstructions> {
        const response = await this.changeRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    async checkPostRateCodeRaw(requestParameters: CheckPostRateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedRateCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}/action/validate`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostRateCodeRequestToJSON(requestParameters.postRateCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedRateCodeFromJSON(jsonValue));
    }

    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    async checkPostRateCode(requestParameters: CheckPostRateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedRateCode> {
        const response = await this.checkPostRateCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    async closeReservationFolioRaw(requestParameters: CloseReservationFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CloseReservationFolioRequestToJSON(requestParameters.closeFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    async closeReservationFolio(requestParameters: CloseReservationFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.closeReservationFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Convert folio. <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     */
    async convertFolioRaw(requestParameters: ConvertFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConvertFolioDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folio/{folioId}/convert`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConvertFolioRequestToJSON(requestParameters.convertFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConvertFolioDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to Convert folio. <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     */
    async convertFolio(requestParameters: ConvertFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConvertFolioDetails> {
        const response = await this.convertFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse the Advance Folio Transactions on a reservation. As part of reversal, the actual charges may not be deleted but only an offset will be posted.<p><strong>OperationId:</strong>reverseAdvanceFolio</p>
     * Delete Advance Folio Transactions
     */
    async deleteAdvanceRoomChargesRaw(requestParameters: DeleteAdvanceRoomChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse the Advance Folio Transactions on a reservation. As part of reversal, the actual charges may not be deleted but only an offset will be posted.<p><strong>OperationId:</strong>reverseAdvanceFolio</p>
     * Delete Advance Folio Transactions
     */
    async deleteAdvanceRoomCharges(requestParameters: DeleteAdvanceRoomChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdvanceRoomChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    async deleteCompRoutingInstructionsRaw(requestParameters: DeleteCompRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRoutingPostings>> {
        const queryParameters: any = {};

        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }

        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.payeeId !== undefined) {
            queryParameters['payeeId'] = requestParameters.payeeId;
        }

        if (requestParameters.membershipIdNo !== undefined) {
            queryParameters['membershipIdNo'] = requestParameters.membershipIdNo;
        }

        if (requestParameters.authorizerId !== undefined) {
            queryParameters['authorizerId'] = requestParameters.authorizerId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }

        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }

        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }

        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }

        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }

        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/comp`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRoutingPostingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    async deleteCompRoutingInstructions(requestParameters: DeleteCompRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRoutingPostings> {
        const response = await this.deleteCompRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    async deleteFolioRoutingInstructionsRaw(requestParameters: DeleteFolioRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRoutingPostings>> {
        const queryParameters: any = {};

        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }

        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.payeeId !== undefined) {
            queryParameters['payeeId'] = requestParameters.payeeId;
        }

        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }

        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }

        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }

        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }

        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/folio`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRoutingPostingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    async deleteFolioRoutingInstructions(requestParameters: DeleteFolioRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRoutingPostings> {
        const response = await this.deleteFolioRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    async deleteRequestRoutingInstructionsRaw(requestParameters: DeleteRequestRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRoutingPostings>> {
        const queryParameters: any = {};

        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }

        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }

        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/request`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRoutingPostingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    async deleteRequestRoutingInstructions(requestParameters: DeleteRequestRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRoutingPostings> {
        const response = await this.deleteRequestRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    async deleteRoomRoutingInstructionsRaw(requestParameters: DeleteRoomRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRoutingPostings>> {
        const queryParameters: any = {};

        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }

        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }

        if (requestParameters.reservationNameId !== undefined) {
            queryParameters['reservationNameId'] = requestParameters.reservationNameId;
        }

        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }

        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }

        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }

        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }

        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/room`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRoutingPostingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    async deleteRoomRoutingInstructions(requestParameters: DeleteRoomRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRoutingPostings> {
        const response = await this.deleteRoomRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     */
    async deleteRoutingInstructionsRaw(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     */
    async deleteRoutingInstructions(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    async detachDepositPolicyFromPaymentRaw(requestParameters: DetachDepositPolicyFromPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/policies/detach/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DetachDepositPolicyFromPaymentRequestToJSON(requestParameters.detachPolicyApplyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    async detachDepositPolicyFromPayment(requestParameters: DetachDepositPolicyFromPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.detachDepositPolicyFromPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    async generateFiscalFolioRaw(requestParameters: GenerateFiscalFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalInformationFolio>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateFiscalFolioRequestToJSON(requestParameters.fiscalInfoFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalInformationFolioFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    async generateFiscalFolio(requestParameters: GenerateFiscalFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalInformationFolio> {
        const response = await this.generateFiscalFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    async generateFolioRaw(requestParameters: GenerateFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneratedFolio>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateFolioRequestToJSON(requestParameters.folioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneratedFolioFromJSON(jsonValue));
    }

    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    async generateFolio(requestParameters: GenerateFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneratedFolio> {
        const response = await this.generateFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    async getAdditionalTaxesRaw(requestParameters: GetAdditionalTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdditionalTaxesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/additionalTaxes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdditionalTaxesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    async getAdditionalTaxes(requestParameters: GetAdditionalTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdditionalTaxesDetails> {
        const response = await this.getAdditionalTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    async getAdvancePaymentBalanceRaw(requestParameters: GetAdvancePaymentBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvancePaymentBalance>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfNights !== undefined) {
            queryParameters['numberOfNights'] = requestParameters.numberOfNights;
        }

        if (requestParameters.eventType !== undefined) {
            queryParameters['eventType'] = requestParameters.eventType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advancePaymentBalance`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdvancePaymentBalanceFromJSON(jsonValue));
    }

    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    async getAdvancePaymentBalance(requestParameters: GetAdvancePaymentBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvancePaymentBalance> {
        const response = await this.getAdvancePaymentBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     */
    async getAlertsRaw(requestParameters: GetAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertNotices>> {
        const queryParameters: any = {};

        if (requestParameters.alertArea !== undefined) {
            queryParameters['alertArea'] = requestParameters.alertArea;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/alerts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertNoticesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     */
    async getAlerts(requestParameters: GetAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertNotices> {
        const response = await this.getAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    async getAuthorizationHistoryRaw(requestParameters: GetAuthorizationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationHistory>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.includeAuthorizations !== undefined) {
            queryParameters['includeAuthorizations'] = requestParameters.includeAuthorizations;
        }

        if (requestParameters.includePayments !== undefined) {
            queryParameters['includePayments'] = requestParameters.includePayments;
        }

        if (requestParameters.includeRefunds !== undefined) {
            queryParameters['includeRefunds'] = requestParameters.includeRefunds;
        }

        if (requestParameters.includeFailures !== undefined) {
            queryParameters['includeFailures'] = requestParameters.includeFailures;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.transactionType !== undefined) {
            queryParameters['transactionType'] = requestParameters.transactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/authorizationHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationHistoryFromJSON(jsonValue));
    }

    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    async getAuthorizationHistory(requestParameters: GetAuthorizationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationHistory> {
        const response = await this.getAuthorizationHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    async getAuthorizersCreditInfoRaw(requestParameters: GetAuthorizersCreditInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizersCreditInfo>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.includeCreditDetails !== undefined) {
            queryParameters['includeCreditDetails'] = requestParameters.includeCreditDetails;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/authorizers/credits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizersCreditInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    async getAuthorizersCreditInfo(requestParameters: GetAuthorizersCreditInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizersCreditInfo> {
        const response = await this.getAuthorizersCreditInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Balance Information. <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     */
    async getBalanceInfoRaw(requestParameters: GetBalanceInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceInfoCriteria>> {
        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.cashierId) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }

        if (requestParameters.amount) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.postingQuantity) {
            queryParameters['postingQuantity'] = requestParameters.postingQuantity;
        }

        if (requestParameters.postingReference) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }

        if (requestParameters.postingRemark) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }

        if (requestParameters.checkNumber) {
            queryParameters['checkNumber'] = requestParameters.checkNumber;
        }

        if (requestParameters.arrangementCode) {
            queryParameters['arrangementCode'] = requestParameters.arrangementCode;
        }

        if (requestParameters.applyRoutingInstructions) {
            queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
        }

        if (requestParameters.usePackageAllowance) {
            queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
        }

        if (requestParameters.autoPosting) {
            queryParameters['autoPosting'] = requestParameters.autoPosting;
        }

        if (requestParameters.uniqueIdId) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.postItNumberId !== undefined) {
            queryParameters['postItNumberId'] = requestParameters.postItNumberId;
        }

        if (requestParameters.postItNumberIdContext !== undefined) {
            queryParameters['postItNumberIdContext'] = requestParameters.postItNumberIdContext;
        }

        if (requestParameters.postItNumberType !== undefined) {
            queryParameters['postItNumberType'] = requestParameters.postItNumberType;
        }

        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }

        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.reservationIdId !== undefined) {
            queryParameters['reservationIdId'] = requestParameters.reservationIdId;
        }

        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.policyIdId !== undefined) {
            queryParameters['policyIdId'] = requestParameters.policyIdId;
        }

        if (requestParameters.policyIdIdContext !== undefined) {
            queryParameters['policyIdIdContext'] = requestParameters.policyIdIdContext;
        }

        if (requestParameters.policyIdType !== undefined) {
            queryParameters['policyIdType'] = requestParameters.policyIdType;
        }

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }

        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }

        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }

        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }

        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionsTotal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceInfoCriteriaFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Balance Information. <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     */
    async getBalanceInfo(requestParameters: GetBalanceInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceInfoCriteria> {
        const response = await this.getBalanceInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    async getBatchCCSettlementsRaw(requestParameters: GetBatchCCSettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CcBatchSettlements>> {
        const queryParameters: any = {};

        if (requestParameters.offlineSettlement !== undefined) {
            queryParameters['offlineSettlement'] = requestParameters.offlineSettlement;
        }

        if (requestParameters.transactionDate !== undefined) {
            queryParameters['transactionDate'] = (requestParameters.transactionDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/cCSettlements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CcBatchSettlementsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    async getBatchCCSettlements(requestParameters: GetBatchCCSettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CcBatchSettlements> {
        const response = await this.getBatchCCSettlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    async getBatchCCSettlementsStatusRaw(requestParameters: GetBatchCCSettlementsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CcBatchSettlementsStatus>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bulkCCSettlements/{batchId}/status`.replace(`{${"batchId"}}`, encodeURIComponent(String(requestParameters.batchId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CcBatchSettlementsStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    async getBatchCCSettlementsStatus(requestParameters: GetBatchCCSettlementsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CcBatchSettlementsStatus> {
        const response = await this.getBatchCCSettlementsStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    async getBedTaxInfoRaw(requestParameters: GetBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BedTaxInfo>> {
        const queryParameters: any = {};

        if (requestParameters.arrival !== undefined) {
            queryParameters['arrival'] = (requestParameters.arrival as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BedTaxInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    async getBedTaxInfo(requestParameters: GetBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BedTaxInfo> {
        const response = await this.getBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    async getBillingInstructionCodesRaw(requestParameters: GetBillingInstructionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInstructionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.includeBillingInstructions !== undefined) {
            queryParameters['includeBillingInstructions'] = requestParameters.includeBillingInstructions;
        }

        if (requestParameters.includeCompInstructions !== undefined) {
            queryParameters['includeCompInstructions'] = requestParameters.includeCompInstructions;
        }

        if (requestParameters.codeWildCard !== undefined) {
            queryParameters['codeWildCard'] = requestParameters.codeWildCard;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/routingInstructionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingInstructionCodesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    async getBillingInstructionCodes(requestParameters: GetBillingInstructionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInstructionCodes> {
        const response = await this.getBillingInstructionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    async getCCAuthorizationInstructionsRaw(requestParameters: GetCCAuthorizationInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CcAuthorizationInstructions>> {
        const queryParameters: any = {};

        if (requestParameters.evaluateApprovalAmount !== undefined) {
            queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
        }

        if (requestParameters.sourceOfAuthorization !== undefined) {
            queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
        }

        if (requestParameters.updateReservation !== undefined) {
            queryParameters['updateReservation'] = requestParameters.updateReservation;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.paymentFolioView !== undefined) {
            queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.storeToCreditCardWallet !== undefined) {
            queryParameters['storeToCreditCardWallet'] = requestParameters.storeToCreditCardWallet;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.cardPresent !== undefined) {
            queryParameters['cardPresent'] = requestParameters.cardPresent;
        }

        if (requestParameters.citId !== undefined) {
            queryParameters['citId'] = requestParameters.citId;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }

        if (requestParameters.cardIdIdContext !== undefined) {
            queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }

        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }

        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }

        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }

        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }

        if (requestParameters.incidentalAmountAmount !== undefined) {
            queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
        }

        if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
            queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CcAuthorizationInstructionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    async getCCAuthorizationInstructions(requestParameters: GetCCAuthorizationInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CcAuthorizationInstructions> {
        const response = await this.getCCAuthorizationInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    async getCCAuthorizationInstructionsByProfileRaw(requestParameters: GetCCAuthorizationInstructionsByProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CcAuthorizationInstructions>> {
        const queryParameters: any = {};

        if (requestParameters.evaluateApprovalAmount !== undefined) {
            queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
        }

        if (requestParameters.sourceOfAuthorization !== undefined) {
            queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
        }

        if (requestParameters.updateReservation !== undefined) {
            queryParameters['updateReservation'] = requestParameters.updateReservation;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.paymentFolioView !== undefined) {
            queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.cardPresent !== undefined) {
            queryParameters['cardPresent'] = requestParameters.cardPresent;
        }

        if (requestParameters.citId !== undefined) {
            queryParameters['citId'] = requestParameters.citId;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }

        if (requestParameters.cardIdIdContext !== undefined) {
            queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }

        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }

        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }

        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }

        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }

        if (requestParameters.incidentalAmountAmount !== undefined) {
            queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
        }

        if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
            queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CcAuthorizationInstructionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    async getCCAuthorizationInstructionsByProfile(requestParameters: GetCCAuthorizationInstructionsByProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CcAuthorizationInstructions> {
        const response = await this.getCCAuthorizationInstructionsByProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    async getCCSurchargeInfoRaw(requestParameters: GetCCSurchargeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CcSurchargeDetails>> {
        const queryParameters: any = {};

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }

        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }

        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }

        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.postingAmountAmount !== undefined) {
            queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
        }

        if (requestParameters.postingAmountCurrencyCode !== undefined) {
            queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardsurcharge`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CcSurchargeDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    async getCCSurchargeInfo(requestParameters: GetCCSurchargeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CcSurchargeDetails> {
        const response = await this.getCCSurchargeInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    async getCashierClosureRaw(requestParameters: GetCashierClosureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierClosureDetails>> {
        const queryParameters: any = {};

        if (requestParameters.cashierLockHandle !== undefined) {
            queryParameters['cashierLockHandle'] = requestParameters.cashierLockHandle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierClosureDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    async getCashierClosure(requestParameters: GetCashierClosureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierClosureDetails> {
        const response = await this.getCashierClosureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    async getCashierClosureInfoRaw(requestParameters: GetCashierClosureInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierClosureInformation>> {
        const queryParameters: any = {};

        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }

        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }

        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }

        if (requestParameters.closureBusinessDate !== undefined) {
            queryParameters['closureBusinessDate'] = (requestParameters.closureBusinessDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/closureList`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierClosureInformationFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    async getCashierClosureInfo(requestParameters: GetCashierClosureInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierClosureInformation> {
        const response = await this.getCashierClosureInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    async getCashierClosureReportsListRaw(requestParameters: GetCashierClosureReportsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierClosureReportsList>> {
        const queryParameters: any = {};

        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }

        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }

        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }

        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/closureReports`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierClosureReportsListFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    async getCashierClosureReportsList(requestParameters: GetCashierClosureReportsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierClosureReportsList> {
        const response = await this.getCashierClosureReportsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    async getCashierLockRaw(requestParameters: GetCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcquiredCashierLock>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcquiredCashierLockFromJSON(jsonValue));
    }

    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    async getCashierLock(requestParameters: GetCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcquiredCashierLock> {
        const response = await this.getCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p>
     * Get Cashier Report Postings
     */
    async getCashierReportPostingsRaw(requestParameters: GetCashierReportPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierReportPostingsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.requestType !== undefined) {
            queryParameters['requestType'] = requestParameters.requestType;
        }

        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }

        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }

        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierReportPostings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierReportPostingsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p>
     * Get Cashier Report Postings
     */
    async getCashierReportPostings(requestParameters: GetCashierReportPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierReportPostingsInfo> {
        const response = await this.getCashierReportPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    async getCashierTransactionsRaw(requestParameters: GetCashierTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierTransactionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }

        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }

        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }

        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/{cashierId}/transactions`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierTransactionsDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    async getCashierTransactions(requestParameters: GetCashierTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierTransactionsDetails> {
        const response = await this.getCashierTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    async getCheckDetailsRaw(requestParameters: GetCheckDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    async getCheckDetails(requestParameters: GetCheckDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckDetails> {
        const response = await this.getCheckDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Comp Accounting Journal. <br><p><strong><mark>This API is deprecated. Please use getCompPostingJournal instead</mark></strong></p> <p><strong>OperationId:</strong>getCompAccountingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompAccountingJournalRaw(requestParameters: GetCompAccountingJournalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompAccountingJournal>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.filterTransactionCode) {
            queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.filterRoomNumber) {
            queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.authorizerNameCode) {
            queryParameters['authorizerNameCode'] = requestParameters.authorizerNameCode;
        }

        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }

        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compAccountingJournal`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompAccountingJournalFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Comp Accounting Journal. <br><p><strong><mark>This API is deprecated. Please use getCompPostingJournal instead</mark></strong></p> <p><strong>OperationId:</strong>getCompAccountingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompAccountingJournal(requestParameters: GetCompAccountingJournalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompAccountingJournal> {
        const response = await this.getCompAccountingJournalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompPostingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompPostingJournalRaw(requestParameters: GetCompPostingJournalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompAccountingJournal>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.filterTransactionCode) {
            queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
        }

        if (requestParameters.filterRoomNumber) {
            queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.authorizerNameCode) {
            queryParameters['authorizerNameCode'] = requestParameters.authorizerNameCode;
        }

        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }

        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compAccountingJournal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompAccountingJournalFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompPostingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompPostingJournal(requestParameters: GetCompPostingJournalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompAccountingJournal> {
        const response = await this.getCompPostingJournalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p>
     * Get Comp Routing Instructions
     */
    async getCompRoutingInstructionsRaw(requestParameters: GetCompRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompRoutingInstructions>> {
        const queryParameters: any = {};

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.nameWildcard !== undefined) {
            queryParameters['nameWildcard'] = requestParameters.nameWildcard;
        }

        if (requestParameters.firstNameWildCard !== undefined) {
            queryParameters['firstNameWildCard'] = requestParameters.firstNameWildCard;
        }

        if (requestParameters.roomNumberCodes) {
            queryParameters['roomNumberCodes'] = requestParameters.roomNumberCodes;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.resStatusCode) {
            queryParameters['resStatusCode'] = requestParameters.resStatusCode;
        }

        if (requestParameters.compRoutingStatuses) {
            queryParameters['compRoutingStatuses'] = requestParameters.compRoutingStatuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compRoutingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompRoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p>
     * Get Comp Routing Instructions
     */
    async getCompRoutingInstructions(requestParameters: GetCompRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompRoutingInstructions> {
        const response = await this.getCompRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    async getCompTrxAuthorizersRaw(requestParameters: GetCompTrxAuthorizersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTrxAuthorizers>> {
        const queryParameters: any = {};

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.targetFolioWindowNo !== undefined) {
            queryParameters['targetFolioWindowNo'] = requestParameters.targetFolioWindowNo;
        }

        if (requestParameters.uniqueIdId) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.transaction) {
            queryParameters['transaction'] = requestParameters.transaction;
        }

        if (requestParameters.authorizerIdId !== undefined) {
            queryParameters['authorizerIdId'] = requestParameters.authorizerIdId;
        }

        if (requestParameters.authorizerIdIdContext !== undefined) {
            queryParameters['authorizerIdIdContext'] = requestParameters.authorizerIdIdContext;
        }

        if (requestParameters.authorizerIdType !== undefined) {
            queryParameters['authorizerIdType'] = requestParameters.authorizerIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compTrxAuthorizers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompTrxAuthorizersFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    async getCompTrxAuthorizers(requestParameters: GetCompTrxAuthorizersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTrxAuthorizers> {
        const response = await this.getCompTrxAuthorizersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    async getCreditLimitOveragePaymentsRaw(requestParameters: GetCreditLimitOveragePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLimitOveragePaymentsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.guestNameWildCard !== undefined) {
            queryParameters['guestNameWildCard'] = requestParameters.guestNameWildCard;
        }

        if (requestParameters.roomNumberWildCard !== undefined) {
            queryParameters['roomNumberWildCard'] = requestParameters.roomNumberWildCard;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditLimitOveragePaymentsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    async getCreditLimitOveragePayments(requestParameters: GetCreditLimitOveragePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLimitOveragePaymentsInfo> {
        const response = await this.getCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    async getDepositFolioRaw(requestParameters: GetDepositFolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDepositFolios>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.policyIdId !== undefined) {
            queryParameters['policyIdId'] = requestParameters.policyIdId;
        }

        if (requestParameters.blockIdId !== undefined) {
            queryParameters['blockIdId'] = requestParameters.blockIdId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/depositFolio`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationDepositFoliosFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    async getDepositFolio(requestParameters: GetDepositFolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDepositFolios> {
        const response = await this.getDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    async getDepositFolioTransactionDetailsRaw(requestParameters: GetDepositFolioTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositFolioTransactionDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }

        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }

        if (requestParameters.includeExchangeInformation !== undefined) {
            queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/depositTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositFolioTransactionDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    async getDepositFolioTransactionDetails(requestParameters: GetDepositFolioTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositFolioTransactionDetails> {
        const response = await this.getDepositFolioTransactionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    async getDepositMaturityInfoRaw(requestParameters: GetDepositMaturityInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositMaturityDetails>> {
        const queryParameters: any = {};

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositMaturity`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositMaturityDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    async getDepositMaturityInfo(requestParameters: GetDepositMaturityInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositMaturityDetails> {
        const response = await this.getDepositMaturityInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves eligible bill amount in order to post redemption on a reservation folio <p><strong>OperationId:</strong>getEligibleBillAmount</p>
     * Get Eligible Bill Amount
     */
    async getEligibleBillAmountRaw(requestParameters: GetEligibleBillAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AmountEligible>> {
        const queryParameters: any = {};

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/eligibleBillAmount`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmountEligibleFromJSON(jsonValue));
    }

    /**
     * Retrieves eligible bill amount in order to post redemption on a reservation folio <p><strong>OperationId:</strong>getEligibleBillAmount</p>
     * Get Eligible Bill Amount
     */
    async getEligibleBillAmount(requestParameters: GetEligibleBillAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AmountEligible> {
        const response = await this.getEligibleBillAmountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p>
     * Get Financial Postings
     */
    async getFinancialPostingsRaw(requestParameters: GetFinancialPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialPostings>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.filterTransactionCode) {
            queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.filterRoomNumber) {
            queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
        }

        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }

        if (requestParameters.checkNumberWildCard !== undefined) {
            queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
        }

        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.approvalStatusCode) {
            queryParameters['approvalStatusCode'] = requestParameters.approvalStatusCode;
        }

        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/financialPostings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialPostingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p>
     * Get Financial Postings
     */
    async getFinancialPostings(requestParameters: GetFinancialPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialPostings> {
        const response = await this.getFinancialPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Financial postings with Net and Vat breakdown. <p><strong>OperationId:</strong>financialPostingsNetVat</p>
     * Get Financial Postings with breakdown
     */
    async getFinancialPostingsNetVatRaw(requestParameters: GetFinancialPostingsNetVatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialPostingsNetVat>> {
        const queryParameters: any = {};

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/financialPostingsNetVat`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialPostingsNetVatFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Financial postings with Net and Vat breakdown. <p><strong>OperationId:</strong>financialPostingsNetVat</p>
     * Get Financial Postings with breakdown
     */
    async getFinancialPostingsNetVat(requestParameters: GetFinancialPostingsNetVatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialPostingsNetVat> {
        const response = await this.getFinancialPostingsNetVatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    async getFiscalFolioActivityRaw(requestParameters: GetFiscalFolioActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioActivityDetailsType>> {
        const queryParameters: any = {};

        if (requestParameters.folioSeqNo !== undefined) {
            queryParameters['folioSeqNo'] = requestParameters.folioSeqNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolioResponse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioActivityDetailsTypeFromJSON(jsonValue));
    }

    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    async getFiscalFolioActivity(requestParameters: GetFiscalFolioActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioActivityDetailsType> {
        const response = await this.getFiscalFolioActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    async getFiscalFolioActivityDetailsRaw(requestParameters: GetFiscalFolioActivityDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioActivityResponseDetailType>> {
        const queryParameters: any = {};

        if (requestParameters.responseAttemptNo !== undefined) {
            queryParameters['responseAttemptNo'] = requestParameters.responseAttemptNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolioResponse/{folioSeqNo}`.replace(`{${"folioSeqNo"}}`, encodeURIComponent(String(requestParameters.folioSeqNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioActivityResponseDetailTypeFromJSON(jsonValue));
    }

    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    async getFiscalFolioActivityDetails(requestParameters: GetFiscalFolioActivityDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioActivityResponseDetailType> {
        const response = await this.getFiscalFolioActivityDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getFiscalPrintingDetailsRaw(requestParameters: GetFiscalPrintingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalCallStatus>> {
        const queryParameters: any = {};

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }

        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fiscalPrinting`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalCallStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getFiscalPrintingDetails(requestParameters: GetFiscalPrintingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalCallStatus> {
        const response = await this.getFiscalPrintingDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to get the list of supporting documents for the reservations. <p><strong>OperationId:</strong>getSupportingDocuments</p>
     * Get supporting documents details.
     */
    async getFiscalSupportingDocumentsRaw(requestParameters: GetFiscalSupportingDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalSupportingDocumentsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.documentType) {
            queryParameters['documentType'] = requestParameters.documentType;
        }

        if (requestParameters.documentNo !== undefined) {
            queryParameters['documentNo'] = requestParameters.documentNo;
        }

        if (requestParameters.pendingDocumentsOnly !== undefined) {
            queryParameters['pendingDocumentsOnly'] = requestParameters.pendingDocumentsOnly;
        }

        if (requestParameters.fromCreateDateTime !== undefined) {
            queryParameters['fromCreateDateTime'] = requestParameters.fromCreateDateTime;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalSupportingDocuments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalSupportingDocumentsResponseFromJSON(jsonValue));
    }

    /**
     * This API is used to get the list of supporting documents for the reservations. <p><strong>OperationId:</strong>getSupportingDocuments</p>
     * Get supporting documents details.
     */
    async getFiscalSupportingDocuments(requestParameters: GetFiscalSupportingDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalSupportingDocumentsResponse> {
        const response = await this.getFiscalSupportingDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    async getFixedChargesRaw(requestParameters: GetFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixedChargesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixedChargesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    async getFixedCharges(requestParameters: GetFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixedChargesDetails> {
        const response = await this.getFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p>
     * Get folios
     */
    async getFolioRaw(requestParameters: GetFolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Folio>> {
        const queryParameters: any = {};

        if (requestParameters.guestPayOnly !== undefined) {
            queryParameters['guestPayOnly'] = requestParameters.guestPayOnly;
        }

        if (requestParameters.includeFolioHistory !== undefined) {
            queryParameters['includeFolioHistory'] = requestParameters.includeFolioHistory;
        }

        if (requestParameters.reservationBalanceOnly !== undefined) {
            queryParameters['reservationBalanceOnly'] = requestParameters.reservationBalanceOnly;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.end) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.start) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.summaryOnly !== undefined) {
            queryParameters['summaryOnly'] = requestParameters.summaryOnly;
        }

        if (requestParameters.groupType !== undefined) {
            queryParameters['groupType'] = requestParameters.groupType;
        }

        if (requestParameters.exchangeCurrency !== undefined) {
            queryParameters['exchangeCurrency'] = requestParameters.exchangeCurrency;
        }

        if (requestParameters.calculateCollectingAgentTaxes !== undefined) {
            queryParameters['calculateCollectingAgentTaxes'] = requestParameters.calculateCollectingAgentTaxes;
        }

        if (requestParameters.vATOffset !== undefined) {
            queryParameters['vATOffset'] = requestParameters.vATOffset;
        }

        if (requestParameters.includeDepositTaxes !== undefined) {
            queryParameters['includeDepositTaxes'] = requestParameters.includeDepositTaxes;
        }

        if (requestParameters.simpleFolio !== undefined) {
            queryParameters['simpleFolio'] = requestParameters.simpleFolio;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioFromJSON(jsonValue));
    }

    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p>
     * Get folios
     */
    async getFolio(requestParameters: GetFolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Folio> {
        const response = await this.getFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    async getFolioHistoryRaw(requestParameters: GetFolioHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioHistoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.aR !== undefined) {
            queryParameters['aR'] = requestParameters.aR;
        }

        if (requestParameters.checkOut !== undefined) {
            queryParameters['checkOut'] = requestParameters.checkOut;
        }

        if (requestParameters.creditBill !== undefined) {
            queryParameters['creditBill'] = requestParameters.creditBill;
        }

        if (requestParameters.supplementalFolio !== undefined) {
            queryParameters['supplementalFolio'] = requestParameters.supplementalFolio;
        }

        if (requestParameters.includeAssociatedFolios !== undefined) {
            queryParameters['includeAssociatedFolios'] = requestParameters.includeAssociatedFolios;
        }

        if (requestParameters.noShow !== undefined) {
            queryParameters['noShow'] = requestParameters.noShow;
        }

        if (requestParameters.offlineFolio !== undefined) {
            queryParameters['offlineFolio'] = requestParameters.offlineFolio;
        }

        if (requestParameters.passerBy !== undefined) {
            queryParameters['passerBy'] = requestParameters.passerBy;
        }

        if (requestParameters.postIt !== undefined) {
            queryParameters['postIt'] = requestParameters.postIt;
        }

        if (requestParameters.videoCheckOut !== undefined) {
            queryParameters['videoCheckOut'] = requestParameters.videoCheckOut;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.reservationIdId !== undefined) {
            queryParameters['reservationIdId'] = requestParameters.reservationIdId;
        }

        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.creditCardNo !== undefined) {
            queryParameters['creditCardNo'] = requestParameters.creditCardNo;
        }

        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }

        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        if (requestParameters.addresseeName !== undefined) {
            queryParameters['addresseeName'] = requestParameters.addresseeName;
        }

        if (requestParameters.fiscalFolioNo !== undefined) {
            queryParameters['fiscalFolioNo'] = requestParameters.fiscalFolioNo;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.partnerFiscalFolioStatusCode) {
            queryParameters['partnerFiscalFolioStatusCode'] = requestParameters.partnerFiscalFolioStatusCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folioHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioHistoryResponseFromJSON(jsonValue));
    }

    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    async getFolioHistory(requestParameters: GetFolioHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioHistoryResponse> {
        const response = await this.getFolioHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    async getFolioPrintersRaw(requestParameters: GetFolioPrintersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioPrinters>> {
        const queryParameters: any = {};

        if (requestParameters.allFolioWindow !== undefined) {
            queryParameters['allFolioWindow'] = requestParameters.allFolioWindow;
        }

        if (requestParameters.correction !== undefined) {
            queryParameters['correction'] = requestParameters.correction;
        }

        if (requestParameters.debitFolio !== undefined) {
            queryParameters['debitFolio'] = requestParameters.debitFolio;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.manualFolioNo !== undefined) {
            queryParameters['manualFolioNo'] = requestParameters.manualFolioNo;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.fiscalTerminalId !== undefined) {
            queryParameters['fiscalTerminalId'] = requestParameters.fiscalTerminalId;
        }

        if (requestParameters.eventType !== undefined) {
            queryParameters['eventType'] = requestParameters.eventType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.exchangeRate !== undefined) {
            queryParameters['exchangeRate'] = requestParameters.exchangeRate;
        }

        if (requestParameters.associatedBillNumber !== undefined) {
            queryParameters['associatedBillNumber'] = requestParameters.associatedBillNumber;
        }

        if (requestParameters.associatedBillFolioType !== undefined) {
            queryParameters['associatedBillFolioType'] = requestParameters.associatedBillFolioType;
        }

        if (requestParameters.associatedBillQueueName !== undefined) {
            queryParameters['associatedBillQueueName'] = requestParameters.associatedBillQueueName;
        }

        if (requestParameters.associatedBillFiscalBillNumber !== undefined) {
            queryParameters['associatedBillFiscalBillNumber'] = requestParameters.associatedBillFiscalBillNumber;
        }

        if (requestParameters.associatedBillGenerationDate !== undefined) {
            queryParameters['associatedBillGenerationDate'] = (requestParameters.associatedBillGenerationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        if (requestParameters.generateFiscalFolio !== undefined) {
            queryParameters['generateFiscalFolio'] = requestParameters.generateFiscalFolio;
        }

        if (requestParameters.queueName !== undefined) {
            queryParameters['queueName'] = requestParameters.queueName;
        }

        if (requestParameters.folioSeqId !== undefined) {
            queryParameters['folioSeqId'] = requestParameters.folioSeqId;
        }

        if (requestParameters.fiscalFolioInstruction !== undefined) {
            queryParameters['fiscalFolioInstruction'] = requestParameters.fiscalFolioInstruction;
        }

        if (requestParameters.transactionServiceType !== undefined) {
            queryParameters['transactionServiceType'] = requestParameters.transactionServiceType;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folioPrinters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioPrintersFromJSON(jsonValue));
    }

    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    async getFolioPrinters(requestParameters: GetFolioPrintersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioPrinters> {
        const response = await this.getFolioPrintersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    async getFolioTaxPaymentsInfoRaw(requestParameters: GetFolioTaxPaymentsInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTaxPaymentsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }

        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }

        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }

        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }

        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.postingAmountAmount !== undefined) {
            queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
        }

        if (requestParameters.postingAmountCurrencyCode !== undefined) {
            queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
        }

        if (requestParameters.postingReference !== undefined) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }

        if (requestParameters.postingRemark !== undefined) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }

        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }

        if (requestParameters.applyCCSurcharge !== undefined) {
            queryParameters['applyCCSurcharge'] = requestParameters.applyCCSurcharge;
        }

        if (requestParameters.manualPaymentTaxInfoFolioWindowNo !== undefined) {
            queryParameters['manualPaymentTaxInfoFolioWindowNo'] = requestParameters.manualPaymentTaxInfoFolioWindowNo;
        }

        if (requestParameters.transactionCode !== undefined) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.transactionDate !== undefined) {
            queryParameters['transactionDate'] = (requestParameters.transactionDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.transactionDescription !== undefined) {
            queryParameters['transactionDescription'] = requestParameters.transactionDescription;
        }

        if (requestParameters.transactionNo !== undefined) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }

        if (requestParameters.taxInvoiceNo !== undefined) {
            queryParameters['taxInvoiceNo'] = requestParameters.taxInvoiceNo;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['paymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.manualPaymentTaxAmount !== undefined) {
            queryParameters['manualPaymentTaxAmount'] = requestParameters.manualPaymentTaxAmount;
        }

        if (requestParameters.manualPaymentTaxCurrencyCode !== undefined) {
            queryParameters['manualPaymentTaxCurrencyCode'] = requestParameters.manualPaymentTaxCurrencyCode;
        }

        if (requestParameters.taxableAmountAmount !== undefined) {
            queryParameters['taxableAmountAmount'] = requestParameters.taxableAmountAmount;
        }

        if (requestParameters.taxableAmountCurrencyCode !== undefined) {
            queryParameters['taxableAmountCurrencyCode'] = requestParameters.taxableAmountCurrencyCode;
        }

        if (requestParameters.nonTaxableAmountAmount !== undefined) {
            queryParameters['nonTaxableAmountAmount'] = requestParameters.nonTaxableAmountAmount;
        }

        if (requestParameters.nonTaxableAmountCurrencyCode !== undefined) {
            queryParameters['nonTaxableAmountCurrencyCode'] = requestParameters.nonTaxableAmountCurrencyCode;
        }

        if (requestParameters.availableCreditAmount !== undefined) {
            queryParameters['availableCreditAmount'] = requestParameters.availableCreditAmount;
        }

        if (requestParameters.availableCreditCurrencyCode !== undefined) {
            queryParameters['availableCreditCurrencyCode'] = requestParameters.availableCreditCurrencyCode;
        }

        if (requestParameters.paymentDate !== undefined) {
            queryParameters['paymentDate'] = (requestParameters.paymentDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.taxFolioWindowNo) {
            queryParameters['taxFolioWindowNo'] = requestParameters.taxFolioWindowNo;
        }

        if (requestParameters.taxTransactionCode) {
            queryParameters['taxTransactionCode'] = requestParameters.taxTransactionCode;
        }

        if (requestParameters.taxTransactionDate) {
            queryParameters['taxTransactionDate'] = requestParameters.taxTransactionDate;
        }

        if (requestParameters.taxTransactionDescription) {
            queryParameters['taxTransactionDescription'] = requestParameters.taxTransactionDescription;
        }

        if (requestParameters.taxTransactionNo) {
            queryParameters['taxTransactionNo'] = requestParameters.taxTransactionNo;
        }

        if (requestParameters.taxTaxInvoiceNo) {
            queryParameters['taxTaxInvoiceNo'] = requestParameters.taxTaxInvoiceNo;
        }

        if (requestParameters.taxPaymentType) {
            queryParameters['taxPaymentType'] = requestParameters.taxPaymentType;
        }

        if (requestParameters.creditablePaymentTaxesAmount !== undefined) {
            queryParameters['creditablePaymentTaxesAmount'] = requestParameters.creditablePaymentTaxesAmount;
        }

        if (requestParameters.creditablePaymentTaxesCurrencyCode !== undefined) {
            queryParameters['creditablePaymentTaxesCurrencyCode'] = requestParameters.creditablePaymentTaxesCurrencyCode;
        }

        if (requestParameters.creditablePaymentTaxableAmount !== undefined) {
            queryParameters['creditablePaymentTaxableAmount'] = requestParameters.creditablePaymentTaxableAmount;
        }

        if (requestParameters.creditablePaymentTaxableCurrencyCode !== undefined) {
            queryParameters['creditablePaymentTaxableCurrencyCode'] = requestParameters.creditablePaymentTaxableCurrencyCode;
        }

        if (requestParameters.creditablePaymentNonTaxableAmount !== undefined) {
            queryParameters['creditablePaymentNonTaxableAmount'] = requestParameters.creditablePaymentNonTaxableAmount;
        }

        if (requestParameters.creditablePaymentNonTaxableCurrencyCode !== undefined) {
            queryParameters['creditablePaymentNonTaxableCurrencyCode'] = requestParameters.creditablePaymentNonTaxableCurrencyCode;
        }

        if (requestParameters.availableTaxCreditAmount !== undefined) {
            queryParameters['availableTaxCreditAmount'] = requestParameters.availableTaxCreditAmount;
        }

        if (requestParameters.availableTaxCreditCurrencyCode !== undefined) {
            queryParameters['availableTaxCreditCurrencyCode'] = requestParameters.availableTaxCreditCurrencyCode;
        }

        if (requestParameters.taxPaymentDate) {
            queryParameters['taxPaymentDate'] = requestParameters.taxPaymentDate;
        }

        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }

        if (requestParameters.overrideInsufficientCC !== undefined) {
            queryParameters['overrideInsufficientCC'] = requestParameters.overrideInsufficientCC;
        }

        if (requestParameters.changeDueAmount !== undefined) {
            queryParameters['changeDueAmount'] = requestParameters.changeDueAmount;
        }

        if (requestParameters.changeDueAmountCurrencyCode !== undefined) {
            queryParameters['changeDueAmountCurrencyCode'] = requestParameters.changeDueAmountCurrencyCode;
        }

        if (requestParameters.overrideARCreditLimit !== undefined) {
            queryParameters['overrideARCreditLimit'] = requestParameters.overrideARCreditLimit;
        }

        if (requestParameters.applyCurrencyTaxes !== undefined) {
            queryParameters['applyCurrencyTaxes'] = requestParameters.applyCurrencyTaxes;
        }

        if (requestParameters.vATOffset !== undefined) {
            queryParameters['vATOffset'] = requestParameters.vATOffset;
        }

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }

        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folioTaxPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTaxPaymentsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    async getFolioTaxPaymentsInfo(requestParameters: GetFolioTaxPaymentsInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTaxPaymentsInfo> {
        const response = await this.getFolioTaxPaymentsInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    async getFolioTransactionDetailsRaw(requestParameters: GetFolioTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTransactionDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }

        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }

        if (requestParameters.includeExchangeInformation !== undefined) {
            queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTransactionDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    async getFolioTransactionDetails(requestParameters: GetFolioTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTransactionDetails> {
        const response = await this.getFolioTransactionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    async getFolioTypeNameRaw(requestParameters: GetFolioTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeNameInfo>> {
        const queryParameters: any = {};

        if (requestParameters.internalFolioWindowId !== undefined) {
            queryParameters['internalFolioWindowId'] = requestParameters.internalFolioWindowId;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }

        if (requestParameters.folioReportGroup !== undefined) {
            queryParameters['folioReportGroup'] = requestParameters.folioReportGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folioTypeNames`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypeNameInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    async getFolioTypeName(requestParameters: GetFolioTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeNameInfo> {
        const response = await this.getFolioTypeNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    async getFolioTypesRaw(requestParameters: GetFolioTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.includeCompress !== undefined) {
            queryParameters['includeCompress'] = requestParameters.includeCompress;
        }

        if (requestParameters.includeCredit !== undefined) {
            queryParameters['includeCredit'] = requestParameters.includeCredit;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folioTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    async getFolioTypes(requestParameters: GetFolioTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypesInfo> {
        const response = await this.getFolioTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status 
     */
    async getGamingRequestStatusInfoRaw(requestParameters: GetGamingRequestStatusInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GamingRequestStatusInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/compRequestStatus`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GamingRequestStatusInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status 
     */
    async getGamingRequestStatusInfo(requestParameters: GetGamingRequestStatusInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GamingRequestStatusInfo> {
        const response = await this.getGamingRequestStatusInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p>
     * Get Guests Transactions
     */
    async getGuestsTransactionsRaw(requestParameters: GetGuestsTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestsTransactions>> {
        const queryParameters: any = {};

        if (requestParameters.reservationList) {
            queryParameters['reservationList'] = requestParameters.reservationList;
        }

        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }

        if (requestParameters.includeTransactionsWithARInvoiceNo !== undefined) {
            queryParameters['includeTransactionsWithARInvoiceNo'] = requestParameters.includeTransactionsWithARInvoiceNo;
        }

        if (requestParameters.includeTransactionsWithFolioNo !== undefined) {
            queryParameters['includeTransactionsWithFolioNo'] = requestParameters.includeTransactionsWithFolioNo;
        }

        if (requestParameters.includeTransactionsWithManualPostingOnly !== undefined) {
            queryParameters['includeTransactionsWithManualPostingOnly'] = requestParameters.includeTransactionsWithManualPostingOnly;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }

        if (requestParameters.transactionGroup) {
            queryParameters['transactionGroup'] = requestParameters.transactionGroup;
        }

        if (requestParameters.transactionSubGroup) {
            queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
        }

        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }

        if (requestParameters.billingHotelId) {
            queryParameters['billingHotelId'] = requestParameters.billingHotelId;
        }

        if (requestParameters.desc) {
            queryParameters['desc'] = requestParameters.desc;
        }

        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }

        if (requestParameters.trxCodeWildCard !== undefined) {
            queryParameters['trxCodeWildCard'] = requestParameters.trxCodeWildCard;
        }

        if (requestParameters.trxDescriptionWildCard !== undefined) {
            queryParameters['trxDescriptionWildCard'] = requestParameters.trxDescriptionWildCard;
        }

        if (requestParameters.checkNumberWildCard !== undefined) {
            queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
        }

        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }

        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }

        if (requestParameters.windowNo) {
            queryParameters['windowNo'] = requestParameters.windowNo;
        }

        if (requestParameters.cashieringTransactionType) {
            queryParameters['cashieringTransactionType'] = requestParameters.cashieringTransactionType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.commissionable !== undefined) {
            queryParameters['commissionable'] = requestParameters.commissionable;
        }

        if (requestParameters.serviceRecoveryAllowed !== undefined) {
            queryParameters['serviceRecoveryAllowed'] = requestParameters.serviceRecoveryAllowed;
        }

        if (requestParameters.postedTransactionType) {
            queryParameters['postedTransactionType'] = requestParameters.postedTransactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestsTransactionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p>
     * Get Guests Transactions
     */
    async getGuestsTransactions(requestParameters: GetGuestsTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestsTransactions> {
        const response = await this.getGuestsTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to fetch the credit card wallet from the specified hotel and profile. <p><strong>OperationId: getHotelCreditCardWallet</strong></p>
     * credit card wallet
     */
    async getHotelCreditCardWalletRaw(requestParameters: GetHotelCreditCardWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardWallet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/creditCardWallet`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardWalletFromJSON(jsonValue));
    }

    /**
     * This API is used to fetch the credit card wallet from the specified hotel and profile. <p><strong>OperationId: getHotelCreditCardWallet</strong></p>
     * credit card wallet
     */
    async getHotelCreditCardWallet(requestParameters: GetHotelCreditCardWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardWallet> {
        const response = await this.getHotelCreditCardWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    async getHotelRevenueRaw(requestParameters: GetHotelRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelRevenueDetails>> {
        const queryParameters: any = {};

        if (requestParameters.businessDate !== undefined) {
            queryParameters['businessDate'] = (requestParameters.businessDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenue`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelRevenueDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    async getHotelRevenue(requestParameters: GetHotelRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelRevenueDetails> {
        const response = await this.getHotelRevenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    async getMaturedDepositsRaw(requestParameters: GetMaturedDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaturedDepositsDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaturedDepositsDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    async getMaturedDeposits(requestParameters: GetMaturedDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaturedDepositsDetails> {
        const response = await this.getMaturedDepositsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    async getPostBillingChargesRaw(requestParameters: GetPostBillingChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingChargesStatus>> {
        const queryParameters: any = {};

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.chargeCashierId) {
            queryParameters['chargeCashierId'] = requestParameters.chargeCashierId;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.postingQuantity) {
            queryParameters['postingQuantity'] = requestParameters.postingQuantity;
        }

        if (requestParameters.postingReference) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }

        if (requestParameters.postingRemark) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }

        if (requestParameters.checkNumber) {
            queryParameters['checkNumber'] = requestParameters.checkNumber;
        }

        if (requestParameters.arrangementCode) {
            queryParameters['arrangementCode'] = requestParameters.arrangementCode;
        }

        if (requestParameters.applyRoutingInstructions) {
            queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
        }

        if (requestParameters.usePackageAllowance) {
            queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
        }

        if (requestParameters.autoPosting) {
            queryParameters['autoPosting'] = requestParameters.autoPosting;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.option) {
            queryParameters['option'] = requestParameters.option;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingChargesStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    async getPostBillingCharges(requestParameters: GetPostBillingChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingChargesStatus> {
        const response = await this.getPostBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    async getPostingActivityDetailRaw(requestParameters: GetPostingActivityDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostingActivityDetail>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.logDate !== undefined) {
            queryParameters['logDate'] = requestParameters.logDate;
        }

        if (requestParameters.refActionId !== undefined) {
            queryParameters['refActionId'] = requestParameters.refActionId;
        }

        if (requestParameters.logUserId !== undefined) {
            queryParameters['logUserId'] = requestParameters.logUserId;
        }

        if (requestParameters.logUserName !== undefined) {
            queryParameters['logUserName'] = requestParameters.logUserName;
        }

        if (requestParameters.machineStation !== undefined) {
            queryParameters['machineStation'] = requestParameters.machineStation;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }

        if (requestParameters.actionDescription !== undefined) {
            queryParameters['actionDescription'] = requestParameters.actionDescription;
        }

        if (requestParameters.iPAddress !== undefined) {
            queryParameters['iPAddress'] = requestParameters.iPAddress;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/postingActivities`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostingActivityDetailFromJSON(jsonValue));
    }

    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    async getPostingActivityDetail(requestParameters: GetPostingActivityDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostingActivityDetail> {
        const response = await this.getPostingActivityDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    async getPostingSummaryRaw(requestParameters: GetPostingSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostingSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }

        if (requestParameters.postingDate !== undefined) {
            queryParameters['postingDate'] = (requestParameters.postingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.checkPostings !== undefined) {
            queryParameters['checkPostings'] = requestParameters.checkPostings;
        }

        if (requestParameters.postingsByExternalSystem !== undefined) {
            queryParameters['postingsByExternalSystem'] = requestParameters.postingsByExternalSystem;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.postingSummaryType !== undefined) {
            queryParameters['postingSummaryType'] = requestParameters.postingSummaryType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/postingDates/date/postingSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostingSummaryListFromJSON(jsonValue));
    }

    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    async getPostingSummary(requestParameters: GetPostingSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostingSummaryList> {
        const response = await this.getPostingSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    async getPostingsForRefreshRaw(requestParameters: GetPostingsForRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostingsForRefresh>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.targetResvNameIdContext !== undefined) {
            queryParameters['targetResvNameIdContext'] = requestParameters.targetResvNameIdContext;
        }

        if (requestParameters.targetResvNameIdType !== undefined) {
            queryParameters['targetResvNameIdType'] = requestParameters.targetResvNameIdType;
        }

        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.transactionHotelId) {
            queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
        }

        if (requestParameters.printTrxReceipt) {
            queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.transactionGroup) {
            queryParameters['transactionGroup'] = requestParameters.transactionGroup;
        }

        if (requestParameters.transactionSubGroup) {
            queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
        }

        if (requestParameters.universalProductCode) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }

        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }

        if (requestParameters.articleHotelId) {
            queryParameters['articleHotelId'] = requestParameters.articleHotelId;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.articleDescription) {
            queryParameters['articleDescription'] = requestParameters.articleDescription;
        }

        if (requestParameters.articleTransactionCode) {
            queryParameters['articleTransactionCode'] = requestParameters.articleTransactionCode;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.availableForPostIt !== undefined) {
            queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
        }

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        if (requestParameters.articleUniversalProductCode) {
            queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
        }

        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }

        if (requestParameters.billingHotelId) {
            queryParameters['billingHotelId'] = requestParameters.billingHotelId;
        }

        if (requestParameters.desc) {
            queryParameters['desc'] = requestParameters.desc;
        }

        if (requestParameters.billingInstructionRoutingInstructionsId) {
            queryParameters['billingInstructionRoutingInstructionsId'] = requestParameters.billingInstructionRoutingInstructionsId;
        }

        if (requestParameters.creditLimit !== undefined) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }

        if (requestParameters.percentageLimit !== undefined) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }

        if (requestParameters.covers !== undefined) {
            queryParameters['covers'] = requestParameters.covers;
        }

        if (requestParameters.limitUsed !== undefined) {
            queryParameters['limitUsed'] = requestParameters.limitUsed;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.routingLinkIdIdContext !== undefined) {
            queryParameters['routingLinkIdIdContext'] = requestParameters.routingLinkIdIdContext;
        }

        if (requestParameters.routingLinkIdType !== undefined) {
            queryParameters['routingLinkIdType'] = requestParameters.routingLinkIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostingsForRefreshFromJSON(jsonValue));
    }

    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    async getPostingsForRefresh(requestParameters: GetPostingsForRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostingsForRefresh> {
        const response = await this.getPostingsForRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p>
     * Get Receipt History
     */
    async getReceiptHistoryRaw(requestParameters: GetReceiptHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReceiptHistoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.receiptTypeName !== undefined) {
            queryParameters['receiptTypeName'] = requestParameters.receiptTypeName;
        }

        if (requestParameters.taxInvoice !== undefined) {
            queryParameters['taxInvoice'] = requestParameters.taxInvoice;
        }

        if (requestParameters.receiptNo !== undefined) {
            queryParameters['receiptNo'] = requestParameters.receiptNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/receiptHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReceiptHistoryResponseFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p>
     * Get Receipt History
     */
    async getReceiptHistory(requestParameters: GetReceiptHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReceiptHistoryResponse> {
        const response = await this.getReceiptHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    async getReservationPackageOptionsRaw(requestParameters: GetReservationPackageOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPackageOptions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packageOptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPackageOptionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    async getReservationPackageOptions(requestParameters: GetReservationPackageOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPackageOptions> {
        const response = await this.getReservationPackageOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    async getReservationRevenueBucketTotalsRaw(requestParameters: GetReservationRevenueBucketTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueBucketTotals>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.revenueBucketType !== undefined) {
            queryParameters['revenueBucketType'] = requestParameters.revenueBucketType;
        }

        if (requestParameters.compRevenue !== undefined) {
            queryParameters['compRevenue'] = requestParameters.compRevenue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/revenueBuckets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueBucketTotalsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    async getReservationRevenueBucketTotals(requestParameters: GetReservationRevenueBucketTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueBucketTotals> {
        const response = await this.getReservationRevenueBucketTotalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    async getRoundingDifferenceRaw(requestParameters: GetRoundingDifferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoundingDifferenceAmount>> {
        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }

        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }

        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }

        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roundingDifference`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoundingDifferenceAmountFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    async getRoundingDifference(requestParameters: GetRoundingDifferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoundingDifferenceAmount> {
        const response = await this.getRoundingDifferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructionsRaw(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingInstructionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.includeWindowRouting !== undefined) {
            queryParameters['includeWindowRouting'] = requestParameters.includeWindowRouting;
        }

        if (requestParameters.includeRoomRouting !== undefined) {
            queryParameters['includeRoomRouting'] = requestParameters.includeRoomRouting;
        }

        if (requestParameters.includeCompRouting !== undefined) {
            queryParameters['includeCompRouting'] = requestParameters.includeCompRouting;
        }

        if (requestParameters.includeCompRoutingRequests !== undefined) {
            queryParameters['includeCompRoutingRequests'] = requestParameters.includeCompRoutingRequests;
        }

        if (requestParameters.effectiveOn !== undefined) {
            queryParameters['effectiveOn'] = (requestParameters.effectiveOn as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingInstructionsDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructions(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingInstructionsDetails> {
        const response = await this.getRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    async getStoredFolioDetailsRaw(requestParameters: GetStoredFolioDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredFolioDetailsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }

        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }

        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }

        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredFolioDetailsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    async getStoredFolioDetails(requestParameters: GetStoredFolioDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredFolioDetailsInfo> {
        const response = await this.getStoredFolioDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    async getTransactionCodesRaw(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters.includeArticles !== undefined) {
            queryParameters['includeArticles'] = requestParameters.includeArticles;
        }

        if (requestParameters.userRoleTransactions !== undefined) {
            queryParameters['userRoleTransactions'] = requestParameters.userRoleTransactions;
        }

        if (requestParameters.manualPostAllowed !== undefined) {
            queryParameters['manualPostAllowed'] = requestParameters.manualPostAllowed;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }

        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }

        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }

        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }

        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        if (requestParameters.trxServiceType !== undefined) {
            queryParameters['trxServiceType'] = requestParameters.trxServiceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCodesFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    async getTransactionCodes(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCodes> {
        const response = await this.getTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getValidateFiscalPrintingDetailsRaw(requestParameters: GetValidateFiscalPrintingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalCallStatus>> {
        const queryParameters: any = {};

        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }

        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }

        if (requestParameters.fiscalServiceMode !== undefined) {
            queryParameters['fiscalServiceMode'] = requestParameters.fiscalServiceMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPrinting`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalCallStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getValidateFiscalPrintingDetails(requestParameters: GetValidateFiscalPrintingDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalCallStatus> {
        const response = await this.getValidateFiscalPrintingDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    async getfetchStagedTransactionsRaw(requestParameters: GetfetchStagedTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagedTransactions>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId2 !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId2;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fetchStagedTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StagedTransactionsFromJSON(jsonValue));
    }

    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    async getfetchStagedTransactions(requestParameters: GetfetchStagedTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagedTransactions> {
        const response = await this.getfetchStagedTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    async isDepositRefundEligibleRaw(requestParameters: IsDepositRefundEligibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositRefundEligibleCheck>> {
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositRefundEligibleCheckFromJSON(jsonValue));
    }

    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    async isDepositRefundEligible(requestParameters: IsDepositRefundEligibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositRefundEligibleCheck> {
        const response = await this.isDepositRefundEligibleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    async linkReservationPackageAllowanceRaw(requestParameters: LinkReservationPackageAllowanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/destinationReservations/{destinationReservationId}/packageAllowance/links`.replace(`{${"destinationReservationId"}}`, encodeURIComponent(String(requestParameters.destinationReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkReservationPackageAllowanceRequestToJSON(requestParameters.linkReservationPackageAllowance),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    async linkReservationPackageAllowance(requestParameters: LinkReservationPackageAllowanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.linkReservationPackageAllowanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    async postAdvanceFolioRaw(requestParameters: PostAdvanceFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/advanceFolio/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdvanceFolioRequestToJSON(requestParameters.batchAdvanceFolio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    async postAdvanceFolio(requestParameters: PostAdvanceFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdvanceFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    async postAdvanceRoomChargesRaw(requestParameters: PostAdvanceRoomChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvanceRoomChargesReservationInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdvanceRoomChargesRequestToJSON(requestParameters.advanceRoomCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdvanceRoomChargesReservationInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    async postAdvanceRoomCharges(requestParameters: PostAdvanceRoomChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvanceRoomChargesReservationInfo> {
        const response = await this.postAdvanceRoomChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    async postArticlesSaleRaw(requestParameters: PostArticlesSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesSale>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/articlesSale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostArticlesSaleRequestToJSON(requestParameters.articlesSaleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesSaleFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    async postArticlesSale(requestParameters: PostArticlesSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesSale> {
        const response = await this.postArticlesSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch 
     */
    async postAutoCheckoutReservationsRaw(requestParameters: PostAutoCheckoutReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchAutoCheckoutDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAutoCheckoutReservationsRequestToJSON(requestParameters.batchAutoCheckoutReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchAutoCheckoutDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch 
     */
    async postAutoCheckoutReservations(requestParameters: PostAutoCheckoutReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchAutoCheckoutDetails> {
        const response = await this.postAutoCheckoutReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new membership award payment transaction. <p><strong>OperationId:</strong>postAwardTransaction</p>
     * Post a membership award payment transaction.
     */
    async postAwardTransactionRaw(requestParameters: PostAwardTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/memberships/{membershipId}/awardTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAwardTransactionRequestToJSON(requestParameters.awardDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Creates a new membership award payment transaction. <p><strong>OperationId:</strong>postAwardTransaction</p>
     * Post a membership award payment transaction.
     */
    async postAwardTransaction(requestParameters: PostAwardTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAwardTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    async postBatchAutoSettlementRaw(requestParameters: PostBatchAutoSettlementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBatchAutoSettlementRequestToJSON(requestParameters.batchAutoSettlementCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    async postBatchAutoSettlement(requestParameters: PostBatchAutoSettlementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBatchAutoSettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    async postBatchCCSettlementsRaw(requestParameters: PostBatchCCSettlementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ccSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBatchCCSettlementsRequestToJSON(requestParameters.ccBatchSettlementsProcessCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    async postBatchCCSettlements(requestParameters: PostBatchCCSettlementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBatchCCSettlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    async postBatchDepositRaw(requestParameters: PostBatchDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/batchDeposits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBatchDepositRequestToJSON(requestParameters.batchDeposit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    async postBatchDeposit(requestParameters: PostBatchDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBatchDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    async postBedTaxInfoRaw(requestParameters: PostBedTaxInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBedTaxInfoRequestToJSON(requestParameters.bedTaxCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    async postBedTaxInfo(requestParameters: PostBedTaxInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    async postBillingChargesRaw(requestParameters: PostBillingChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingChargesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBillingChargesRequestToJSON(requestParameters.billingCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingChargesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    async postBillingCharges(requestParameters: PostBillingChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingChargesDetails> {
        const response = await this.postBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    async postBillingChargesInBatchRaw(requestParameters: PostBillingChargesInBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostedBillingChargesInBatch>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBillingChargesInBatchRequestToJSON(requestParameters.billingChargesInBatchCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostedBillingChargesInBatchFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    async postBillingChargesInBatch(requestParameters: PostBillingChargesInBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostedBillingChargesInBatch> {
        const response = await this.postBillingChargesInBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    async postBillingCheckChargesRaw(requestParameters: PostBillingCheckChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBillingCheckChargesRequestToJSON(requestParameters.billingCheckChargesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    async postBillingCheckCharges(requestParameters: PostBillingCheckChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBillingCheckChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    async postBillingPaymentRaw(requestParameters: PostBillingPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostedBillingPayment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/payments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBillingPaymentRequestToJSON(requestParameters.billingPayment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostedBillingPaymentFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    async postBillingPayment(requestParameters: PostBillingPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostedBillingPayment> {
        const response = await this.postBillingPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    async postCCSettlementRaw(requestParameters: PostCCSettlementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ccSettlement`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCCSettlementRequestToJSON(requestParameters.ccSettlementCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    async postCCSettlement(requestParameters: PostCCSettlementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCCSettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    async postCheckOutRaw(requestParameters: PostCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCheckOutRequestToJSON(requestParameters.reservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    async postCheckOut(requestParameters: PostCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCheckOutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptionsRaw(requestParameters: PostCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCompRedemptionsRequestToJSON(requestParameters.postCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptions(requestParameters: PostCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    async postCompTransactionRaw(requestParameters: PostCompTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCompTransactionRequestToJSON(requestParameters.compTransactionCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    async postCompTransaction(requestParameters: PostCompTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    async postCreditBillRaw(requestParameters: PostCreditBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostedCreditBill>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditBill`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreditBillRequestToJSON(requestParameters.creditBillCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostedCreditBillFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    async postCreditBill(requestParameters: PostCreditBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostedCreditBill> {
        const response = await this.postCreditBillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    async postCreditLimitOveragePaymentsRaw(requestParameters: PostCreditLimitOveragePaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditLimitOveragePaymentsDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreditLimitOveragePaymentsRequestToJSON(requestParameters.creditLimitOveragePayments),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditLimitOveragePaymentsDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    async postCreditLimitOveragePayments(requestParameters: PostCreditLimitOveragePaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditLimitOveragePaymentsDetails> {
        const response = await this.postCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    async postDeferredTaxesProcessRaw(requestParameters: PostDeferredTaxesProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeferredTaxesProcessDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/deferredTaxesProcess`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDeferredTaxesProcessRequestToJSON(requestParameters.deferredTaxesProcess),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeferredTaxesProcessDetailsFromJSON(jsonValue));
    }

    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    async postDeferredTaxesProcess(requestParameters: PostDeferredTaxesProcessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeferredTaxesProcessDetails> {
        const response = await this.postDeferredTaxesProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    async postDepositFolioRaw(requestParameters: PostDepositFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostedDepositFolio>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositFolios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepositFolioRequestToJSON(requestParameters.depositFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostedDepositFolioFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    async postDepositFolio(requestParameters: PostDepositFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostedDepositFolio> {
        const response = await this.postDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    async postDepositPaymentRaw(requestParameters: PostDepositPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositedPayment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepositPaymentByExtIdRequestToJSON(requestParameters.depositPayment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositedPaymentFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    async postDepositPayment(requestParameters: PostDepositPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositedPayment> {
        const response = await this.postDepositPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    async postDepositPaymentByExtIdRaw(requestParameters: PostDepositPaymentByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositedPayment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSysCode}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"externalSysCode"}}`, encodeURIComponent(String(requestParameters.externalSysCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepositPaymentByExtIdRequestToJSON(requestParameters.depositPayment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositedPaymentFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    async postDepositPaymentByExtId(requestParameters: PostDepositPaymentByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositedPayment> {
        const response = await this.postDepositPaymentByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    async postFBAReimbursementRaw(requestParameters: PostFBAReimbursementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fbaReimbursements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFBAReimbursementRequestToJSON(requestParameters.fbaReimbursementCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    async postFBAReimbursement(requestParameters: PostFBAReimbursementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFBAReimbursementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    async postFBASettlementRaw(requestParameters: PostFBASettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fbaSettlements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFBAReimbursementRequestToJSON(requestParameters.fbaReimbursementCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    async postFBASettlement(requestParameters: PostFBASettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFBASettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalCommandInvoiceRaw(requestParameters: PostFiscalCommandInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalCommandsResponseInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalCommands`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFiscalCommandInvoiceRequestToJSON(requestParameters.fiscalFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalCommandsResponseInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalCommandInvoice(requestParameters: PostFiscalCommandInvoiceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalCommandsResponseInfo> {
        const response = await this.postFiscalCommandInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to generate CHECK OUT payload for a reservation
     * Post fiscal Info
     */
    async postFiscalInfoRaw(requestParameters: PostFiscalInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fiscalInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFiscalInfoRequestToJSON(requestParameters.postFiscalInfoType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to generate CHECK OUT payload for a reservation
     * Post fiscal Info
     */
    async postFiscalInfo(requestParameters: PostFiscalInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalInvoiceRaw(requestParameters: PostFiscalInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folio/{folioId}/fiscalCommands`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFiscalCommandInvoiceRequestToJSON(requestParameters.fiscalFolioCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalInvoice(requestParameters: PostFiscalInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    async postFixedChargesRaw(requestParameters: PostFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFixedChargesRequestToJSON(requestParameters.fixedCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    async postFixedCharges(requestParameters: PostFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    async postForeignCurrencyExchangeRaw(requestParameters: PostForeignCurrencyExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForeignCurrencyExchangeTransaction>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrencyExchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostForeignCurrencyExchangeRequestToJSON(requestParameters.foreignCurrencyExchange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForeignCurrencyExchangeTransactionFromJSON(jsonValue));
    }

    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    async postForeignCurrencyExchange(requestParameters: PostForeignCurrencyExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForeignCurrencyExchangeTransaction> {
        const response = await this.postForeignCurrencyExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    async postGuestCheckDetailsRaw(requestParameters: PostGuestCheckDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostGuestCheckDetailsRequestToJSON(requestParameters.guestCheckDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    async postGuestCheckDetails(requestParameters: PostGuestCheckDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestCheckDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    async postPasserBySaleRaw(requestParameters: PostPasserBySaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasserBySale>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/passerBySale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPasserBySaleRequestToJSON(requestParameters.passerBySalesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasserBySaleFromJSON(jsonValue));
    }

    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    async postPasserBySale(requestParameters: PostPasserBySaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasserBySale> {
        const response = await this.postPasserBySaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    async postPrepaidCardsRaw(requestParameters: PostPrepaidCardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPrepaidCardsRequestToJSON(requestParameters.prepaidCardCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    async postPrepaidCards(requestParameters: PostPrepaidCardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPrepaidCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     */
    async postProformaRaw(requestParameters: PostProformaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationFolioInformation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/proforma`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostProformaRequestToJSON(requestParameters.reservationFolio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFolioInformationFromJSON(jsonValue));
    }

    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     */
    async postProforma(requestParameters: PostProformaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationFolioInformation> {
        const response = await this.postProformaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    async postRateCodeRaw(requestParameters: PostRateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostedRateCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRateCodeRequestToJSON(requestParameters.postRateCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostedRateCodeFromJSON(jsonValue));
    }

    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    async postRateCode(requestParameters: PostRateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostedRateCode> {
        const response = await this.postRateCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    async postReversePaymentRaw(requestParameters: PostReversePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/reversePayments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReversePaymentRequestToJSON(requestParameters.paymentReversalCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    async postReversePayment(requestParameters: PostReversePaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReversePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    async postRoomAndTaxForDayUseRaw(requestParameters: PostRoomAndTaxForDayUseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/{reservationId}/postRoomAndTaxForDayUse`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomAndTaxForDayUseRequestToJSON(requestParameters.postRoomAndTaxForDayUse),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    async postRoomAndTaxForDayUse(requestParameters: PostRoomAndTaxForDayUseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomAndTaxForDayUseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    async postStoredFolioDetailsRaw(requestParameters: PostStoredFolioDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostStoredFolioDetailsRequestToJSON(requestParameters.storedFolioDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    async postStoredFolioDetails(requestParameters: PostStoredFolioDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postStoredFolioDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    async postSupplementalFolioRaw(requestParameters: PostSupplementalFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostSupplementalFolioStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/supplementFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSupplementalFolioRequestToJSON(requestParameters.postSupplementalFolio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostSupplementalFolioStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    async postSupplementalFolio(requestParameters: PostSupplementalFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostSupplementalFolioStatus> {
        const response = await this.postSupplementalFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch 
     */
    async postZeroBalanceCheckoutReservationsRaw(requestParameters: PostZeroBalanceCheckoutReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchZeroBalanceCheckoutDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/zeroBalanceCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostZeroBalanceCheckoutReservationsRequestToJSON(requestParameters.batchZeroBalanceCheckoutReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchZeroBalanceCheckoutDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch 
     */
    async postZeroBalanceCheckoutReservations(requestParameters: PostZeroBalanceCheckoutReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchZeroBalanceCheckoutDetails> {
        const response = await this.postZeroBalanceCheckoutReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    async processFiscalRetryRaw(requestParameters: ProcessFiscalRetryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessFiscalRetryStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folios/{folioId}/fiscal`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessFiscalRetryRequestToJSON(requestParameters.processFiscalRetry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessFiscalRetryStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    async processFiscalRetry(requestParameters: ProcessFiscalRetryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessFiscalRetryStatus> {
        const response = await this.processFiscalRetryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    async processReservationDepositRaw(requestParameters: ProcessReservationDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/deposit`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessReservationDepositRequestToJSON(requestParameters.reservationDepositCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    async processReservationDeposit(requestParameters: ProcessReservationDepositOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.processReservationDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    async processRoomRoutingRefreshRaw(requestParameters: ProcessRoomRoutingRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessRoomRoutingRefreshRequestToJSON(requestParameters.roomRoutingRefresh),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    async processRoomRoutingRefresh(requestParameters: ProcessRoomRoutingRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.processRoomRoutingRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     */
    async putBedTaxInfoRaw(requestParameters: PutBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostBedTaxInfoRequestToJSON(requestParameters.bedTaxCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     */
    async putBedTaxInfo(requestParameters: PutBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    async putBillingChargeRaw(requestParameters: PutBillingChargeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingChargeStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/charges`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBillingChargeRequestToJSON(requestParameters.billingCharge),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingChargeStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    async putBillingCharge(requestParameters: PutBillingChargeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingChargeStatus> {
        const response = await this.putBillingChargeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    async putBillingChargesRaw(requestParameters: PutBillingChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutBillingChargesStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBillingChargesRequestToJSON(requestParameters.putBillingCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutBillingChargesStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    async putBillingCharges(requestParameters: PutBillingChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutBillingChargesStatus> {
        const response = await this.putBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    async putCashierRaw(requestParameters: PutCashierOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCashierRequestToJSON(requestParameters.cashierClosure),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    async putCashier(requestParameters: PutCashierOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCashierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    async putCashierLockRaw(requestParameters: PutCashierLockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedCashierLock>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashierslock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCashierLockRequestToJSON(requestParameters.cashierLockCriteriaToExtend),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedCashierLockFromJSON(jsonValue));
    }

    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    async putCashierLock(requestParameters: PutCashierLockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedCashierLock> {
        const response = await this.putCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    async putForEarlyDepartureRaw(requestParameters: PutForEarlyDepartureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutForEarlyDepartureRequestToJSON(requestParameters.earlyDeparture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    async putForEarlyDeparture(requestParameters: PutForEarlyDepartureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putForEarlyDepartureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    async putPayeeTaxNumberRaw(requestParameters: PutPayeeTaxNumberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/payees/{payeeId}/taxNumber`.replace(`{${"payeeId"}}`, encodeURIComponent(String(requestParameters.payeeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPayeeTaxNumberRequestToJSON(requestParameters.payeeTaxNumber),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    async putPayeeTaxNumber(requestParameters: PutPayeeTaxNumberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPayeeTaxNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    async putReservationDepositTransferRaw(requestParameters: PutReservationDepositTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{sourceReservationId}/deposit/transfers`.replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationDepositTransferRequestToJSON(requestParameters.depositTransferCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    async putReservationDepositTransfer(requestParameters: PutReservationDepositTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putReservationDepositTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    async putRoutingInstructionsRaw(requestParameters: PutRoutingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedRoutingInstructions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/create`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoutingInstructionsRequestToJSON(requestParameters.routingInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedRoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    async putRoutingInstructions(requestParameters: PutRoutingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedRoutingInstructions> {
        const response = await this.putRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    async redeemPrepaidCardsRaw(requestParameters: RedeemPrepaidCardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedeemPrepaidCardsStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/prepaidCards/redemptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RedeemPrepaidCardsRequestToJSON(requestParameters.redeemPrepaidCards),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedeemPrepaidCardsStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    async redeemPrepaidCards(requestParameters: RedeemPrepaidCardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedeemPrepaidCardsStatus> {
        const response = await this.redeemPrepaidCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    async registerManualAuthorizationRaw(requestParameters: RegisterManualAuthorizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize/manual`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterManualAuthorizationRequestToJSON(requestParameters.ccManualAuthorizationCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    async registerManualAuthorization(requestParameters: RegisterManualAuthorizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.registerManualAuthorizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    async registerVaultTransactionRaw(requestParameters: RegisterVaultTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTransaction/logs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterVaultTransactionRequestToJSON(requestParameters.vaultTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    async registerVaultTransaction(requestParameters: RegisterVaultTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.registerVaultTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    async reinstateCheckOutRaw(requestParameters: ReinstateCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts/reinstate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReinstateCheckOutRequestToJSON(requestParameters.reinstateCheckedOutReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    async reinstateCheckOut(requestParameters: ReinstateCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reinstateCheckOutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    async releaseCashierLockRaw(requestParameters: ReleaseCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiersLock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    async releaseCashierLock(requestParameters: ReleaseCashierLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.releaseCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    async reloadPrepaidCardRaw(requestParameters: ReloadPrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReloadPrepaidCardStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/reload`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReloadPrepaidCardRequestToJSON(requestParameters.reloadPrepaidCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReloadPrepaidCardStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    async reloadPrepaidCard(requestParameters: ReloadPrepaidCardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReloadPrepaidCardStatus> {
        const response = await this.reloadPrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     */
    async removeBedTaxInfoRaw(requestParameters: RemoveBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     */
    async removeBedTaxInfo(requestParameters: RemoveBedTaxInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges 
     */
    async removeFixedChargesRaw(requestParameters: RemoveFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.fixedChargeID) {
            queryParameters['fixedChargeID'] = requestParameters.fixedChargeID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges 
     */
    async removeFixedCharges(requestParameters: RemoveFixedChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to resend the failed supporting documents. <p><strong>OperationId:</strong>resendSupportingDocument</p>
     * Operation to resend the failed supporting documents to fiscal partner.
     */
    async resendSupportingDocumentRaw(requestParameters: ResendSupportingDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalSupportingDocuments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendSupportingDocumentRequestToJSON(requestParameters.fiscalSupportingDocumentCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to resend the failed supporting documents. <p><strong>OperationId:</strong>resendSupportingDocument</p>
     * Operation to resend the failed supporting documents to fiscal partner.
     */
    async resendSupportingDocument(requestParameters: ResendSupportingDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.resendSupportingDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    async reverseARInvoiceRaw(requestParameters: ReverseARInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.reasonCode !== undefined) {
            queryParameters['reasonCode'] = requestParameters.reasonCode;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/arInvoices/reverse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    async reverseARInvoice(requestParameters: ReverseARInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseARInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    async reverseCertificatePostingsRaw(requestParameters: ReverseCertificatePostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/reverseCertificate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseCertificatePostingsRequestToJSON(requestParameters.reverseCertificatePostingsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    async reverseCertificatePostings(requestParameters: ReverseCertificatePostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCertificatePostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptionsRaw(requestParameters: ReverseCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionReversals`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseCompRedemptionsRequestToJSON(requestParameters.reverseCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptions(requestParameters: ReverseCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    async reverseFlexibleBenefitPostingRaw(requestParameters: ReverseFlexibleBenefitPostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/flexibleBenefitPostings`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    async reverseFlexibleBenefitPosting(requestParameters: ReverseFlexibleBenefitPostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseFlexibleBenefitPostingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    async reverseFolioTaxPaymentRaw(requestParameters: ReverseFolioTaxPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTaxPaymentReversal>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/folioTaxPayments`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseFolioTaxPaymentRequestToJSON(requestParameters.transactionReversal),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTaxPaymentReversalFromJSON(jsonValue));
    }

    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    async reverseFolioTaxPayment(requestParameters: ReverseFolioTaxPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTaxPaymentReversal> {
        const response = await this.reverseFolioTaxPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    async splitAndTransferTransactionRaw(requestParameters: SplitAndTransferTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/splitAndTransfer`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SplitAndTransferTransactionRequestToJSON(requestParameters.transactionToSplitAndTransfer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    async splitAndTransferTransaction(requestParameters: SplitAndTransferTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.splitAndTransferTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    async splitDepositTransactionRaw(requestParameters: SplitDepositTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplitDepositTransactionStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SplitDepositTransactionRequestToJSON(requestParameters.splitDepositTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SplitDepositTransactionStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    async splitDepositTransaction(requestParameters: SplitDepositTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplitDepositTransactionStatus> {
        const response = await this.splitDepositTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    async splitTransactionRaw(requestParameters: SplitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/split`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SplitTransactionRequestToJSON(requestParameters.transactionToSplit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    async splitTransaction(requestParameters: SplitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.splitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    async transferCompTransactionsRaw(requestParameters: TransferCompTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transferCompTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCompTransactionsRequestToJSON(requestParameters.transferCompTransactions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    async transferCompTransactions(requestParameters: TransferCompTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.transferCompTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    async transferFolioToWindowRaw(requestParameters: TransferFolioToWindowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transferFolioTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransferFolioToWindowRequestToJSON(requestParameters.folioToWindow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    async transferFolioToWindow(requestParameters: TransferFolioToWindowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.transferFolioToWindowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    async transferTransactionToReservationRaw(requestParameters: TransferTransactionToReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{toReservationId}/transferTransaction`.replace(`{${"toReservationId"}}`, encodeURIComponent(String(requestParameters.toReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransferTransactionToReservationRequestToJSON(requestParameters.reservationTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    async transferTransactionToReservation(requestParameters: TransferTransactionToReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.transferTransactionToReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    async transferTransactionToWindowRaw(requestParameters: TransferTransactionToWindowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferTransactionToWindow>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transferTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransferTransactionToWindowRequestToJSON(requestParameters.transactionToWindow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTransactionToWindowFromJSON(jsonValue));
    }

    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    async transferTransactionToWindow(requestParameters: TransferTransactionToWindowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferTransactionToWindow> {
        const response = await this.transferTransactionToWindowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    async transitionDepositToGuestFolioRaw(requestParameters: TransitionDepositToGuestFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositTransition`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransitionDepositToGuestFolioRequestToJSON(requestParameters.depositToGuestFolio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    async transitionDepositToGuestFolio(requestParameters: TransitionDepositToGuestFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.transitionDepositToGuestFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    async unlinkReservationPackageAllowanceRaw(requestParameters: UnlinkReservationPackageAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packageAllowance/links`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    async unlinkReservationPackageAllowance(requestParameters: UnlinkReservationPackageAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.unlinkReservationPackageAllowanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges 
     */
    async updateFixedChargesRaw(requestParameters: UpdateFixedChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFixedChargesRequestToJSON(requestParameters.fixedCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges 
     */
    async updateFixedCharges(requestParameters: UpdateFixedChargesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.updateFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    async validateCreditBillRaw(requestParameters: ValidateCreditBillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedCreditBill>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditBill/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreditBillRequestToJSON(requestParameters.creditBillCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatedCreditBillFromJSON(jsonValue));
    }

    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    async validateCreditBill(requestParameters: ValidateCreditBillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedCreditBill> {
        const response = await this.validateCreditBillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    async validateDepositFolioRaw(requestParameters: ValidateDepositFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositedFolioValidate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/depositfolios/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateDepositFolioRequestToJSON(requestParameters.depositFolioValidateCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositedFolioValidateFromJSON(jsonValue));
    }

    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    async validateDepositFolio(requestParameters: ValidateDepositFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositedFolioValidate> {
        const response = await this.validateDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    async validateTransactionCodesRaw(requestParameters: ValidateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedTransactionCode>> {
        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }

        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }

        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }

        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }

        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatedTransactionCodeFromJSON(jsonValue));
    }

    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    async validateTransactionCodes(requestParameters: ValidateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedTransactionCode> {
        const response = await this.validateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    async verifyForEarlyDepartureRaw(requestParameters: VerifyForEarlyDepartureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EarlyDepartureInfo>> {
        const queryParameters: any = {};

        if (requestParameters.ignoreCheckOnTieredRate !== undefined) {
            queryParameters['ignoreCheckOnTieredRate'] = requestParameters.ignoreCheckOnTieredRate;
        }

        if (requestParameters.ignoreRateRestriction !== undefined) {
            queryParameters['ignoreRateRestriction'] = requestParameters.ignoreRateRestriction;
        }

        if (requestParameters.postConsumedAllowanceToGuest !== undefined) {
            queryParameters['postConsumedAllowanceToGuest'] = requestParameters.postConsumedAllowanceToGuest;
        }

        if (requestParameters.postEarlyDeparturePenalty !== undefined) {
            queryParameters['postEarlyDeparturePenalty'] = requestParameters.postEarlyDeparturePenalty;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture/verify`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EarlyDepartureInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    async verifyForEarlyDeparture(requestParameters: VerifyForEarlyDepartureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EarlyDepartureInfo> {
        const response = await this.verifyForEarlyDepartureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    async voidBillingCheckChargesRaw(requestParameters: VoidBillingCheckChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.revenueDate !== undefined) {
            queryParameters['revenueDate'] = (requestParameters.revenueDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.checkId !== undefined) {
            queryParameters['checkId'] = requestParameters.checkId;
        }

        if (requestParameters.checkIdContext !== undefined) {
            queryParameters['checkIdContext'] = requestParameters.checkIdContext;
        }

        if (requestParameters.checkIdType !== undefined) {
            queryParameters['checkIdType'] = requestParameters.checkIdType;
        }

        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }

        if (requestParameters.postingRemark !== undefined) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    async voidBillingCheckCharges(requestParameters: VoidBillingCheckChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.voidBillingCheckChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    async voidFolioRaw(requestParameters: VoidFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoidedFolio>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/voidfolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VoidFolioRequestToJSON(requestParameters.folioToVoid),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoidedFolioFromJSON(jsonValue));
    }

    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    async voidFolio(requestParameters: VoidFolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoidedFolio> {
        const response = await this.voidFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAdvancePaymentBalanceEventTypeEnum = {
    AdvanceBill: 'AdvanceBill',
    Deposit: 'Deposit',
    CheckIn: 'CheckIn'
} as const;
export type GetAdvancePaymentBalanceEventTypeEnum = typeof GetAdvancePaymentBalanceEventTypeEnum[keyof typeof GetAdvancePaymentBalanceEventTypeEnum];
/**
 * @export
 */
export const GetAlertsAlertAreaEnum = {
    CheckIn: 'CheckIn',
    CheckOut: 'CheckOut',
    Reservation: 'Reservation',
    Billing: 'Billing',
    InHouse: 'InHouse'
} as const;
export type GetAlertsAlertAreaEnum = typeof GetAlertsAlertAreaEnum[keyof typeof GetAlertsAlertAreaEnum];
/**
 * @export
 */
export const GetAuthorizationHistoryTransactionTypeEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
} as const;
export type GetAuthorizationHistoryTransactionTypeEnum = typeof GetAuthorizationHistoryTransactionTypeEnum[keyof typeof GetAuthorizationHistoryTransactionTypeEnum];
/**
 * @export
 */
export const GetBalanceInfoEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
} as const;
export type GetBalanceInfoEventEnum = typeof GetBalanceInfoEventEnum[keyof typeof GetBalanceInfoEventEnum];
/**
 * @export
 */
export const GetBalanceInfoFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
} as const;
export type GetBalanceInfoFolioStatusEnum = typeof GetBalanceInfoFolioStatusEnum[keyof typeof GetBalanceInfoFolioStatusEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
} as const;
export type GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = typeof GetCCAuthorizationInstructionsSourceOfAuthorizationEnum[keyof typeof GetCCAuthorizationInstructionsSourceOfAuthorizationEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetCCAuthorizationInstructionsCardOrTokenEnum = typeof GetCCAuthorizationInstructionsCardOrTokenEnum[keyof typeof GetCCAuthorizationInstructionsCardOrTokenEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetCCAuthorizationInstructionsCardTypeEnum = typeof GetCCAuthorizationInstructionsCardTypeEnum[keyof typeof GetCCAuthorizationInstructionsCardTypeEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetCCAuthorizationInstructionsProcessingEnum = typeof GetCCAuthorizationInstructionsProcessingEnum[keyof typeof GetCCAuthorizationInstructionsProcessingEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type GetCCAuthorizationInstructionsEmailFormatEnum = typeof GetCCAuthorizationInstructionsEmailFormatEnum[keyof typeof GetCCAuthorizationInstructionsEmailFormatEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
} as const;
export type GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = typeof GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum[keyof typeof GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = typeof GetCCAuthorizationInstructionsByProfileCardOrTokenEnum[keyof typeof GetCCAuthorizationInstructionsByProfileCardOrTokenEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsByProfileCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetCCAuthorizationInstructionsByProfileCardTypeEnum = typeof GetCCAuthorizationInstructionsByProfileCardTypeEnum[keyof typeof GetCCAuthorizationInstructionsByProfileCardTypeEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsByProfileProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetCCAuthorizationInstructionsByProfileProcessingEnum = typeof GetCCAuthorizationInstructionsByProfileProcessingEnum[keyof typeof GetCCAuthorizationInstructionsByProfileProcessingEnum];
/**
 * @export
 */
export const GetCCAuthorizationInstructionsByProfileEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type GetCCAuthorizationInstructionsByProfileEmailFormatEnum = typeof GetCCAuthorizationInstructionsByProfileEmailFormatEnum[keyof typeof GetCCAuthorizationInstructionsByProfileEmailFormatEnum];
/**
 * @export
 */
export const GetCCSurchargeInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetCCSurchargeInfoCardOrTokenEnum = typeof GetCCSurchargeInfoCardOrTokenEnum[keyof typeof GetCCSurchargeInfoCardOrTokenEnum];
/**
 * @export
 */
export const GetCCSurchargeInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetCCSurchargeInfoCardTypeEnum = typeof GetCCSurchargeInfoCardTypeEnum[keyof typeof GetCCSurchargeInfoCardTypeEnum];
/**
 * @export
 */
export const GetCCSurchargeInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetCCSurchargeInfoProcessingEnum = typeof GetCCSurchargeInfoProcessingEnum[keyof typeof GetCCSurchargeInfoProcessingEnum];
/**
 * @export
 */
export const GetCCSurchargeInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type GetCCSurchargeInfoEmailFormatEnum = typeof GetCCSurchargeInfoEmailFormatEnum[keyof typeof GetCCSurchargeInfoEmailFormatEnum];
/**
 * @export
 */
export const GetCashierReportPostingsRequestTypeEnum = {
    Cash: 'Cash',
    Check: 'Check',
    ForeignCurrency: 'ForeignCurrency',
    CreditCard: 'CreditCard',
    Miscellaneous: 'Miscellaneous',
    ArSettlements: 'ArSettlements',
    DepositTransfers: 'DepositTransfers',
    Shiftdrop: 'Shiftdrop'
} as const;
export type GetCashierReportPostingsRequestTypeEnum = typeof GetCashierReportPostingsRequestTypeEnum[keyof typeof GetCashierReportPostingsRequestTypeEnum];
/**
 * @export
 */
export const GetCompRoutingInstructionsResStatusCodeEnum = {
    Reserved: 'Reserved',
    Requested: 'Requested',
    NoShow: 'NoShow',
    Cancelled: 'Cancelled',
    InHouse: 'InHouse',
    CheckedOut: 'CheckedOut',
    Waitlisted: 'Waitlisted',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    Walkin: 'Walkin',
    PendingCheckout: 'PendingCheckout'
} as const;
export type GetCompRoutingInstructionsResStatusCodeEnum = typeof GetCompRoutingInstructionsResStatusCodeEnum[keyof typeof GetCompRoutingInstructionsResStatusCodeEnum];
/**
 * @export
 */
export const GetCompRoutingInstructionsCompRoutingStatusesEnum = {
    Request: 'Request',
    Comp: 'Comp',
    Declined: 'Declined'
} as const;
export type GetCompRoutingInstructionsCompRoutingStatusesEnum = typeof GetCompRoutingInstructionsCompRoutingStatusesEnum[keyof typeof GetCompRoutingInstructionsCompRoutingStatusesEnum];
/**
 * @export
 */
export const GetDepositFolioFetchInstructionsEnum = {
    ProjectedRevenue: 'ProjectedRevenue'
} as const;
export type GetDepositFolioFetchInstructionsEnum = typeof GetDepositFolioFetchInstructionsEnum[keyof typeof GetDepositFolioFetchInstructionsEnum];
/**
 * @export
 */
export const GetFinancialPostingsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetFinancialPostingsCardOrTokenEnum = typeof GetFinancialPostingsCardOrTokenEnum[keyof typeof GetFinancialPostingsCardOrTokenEnum];
/**
 * @export
 */
export const GetFinancialPostingsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetFinancialPostingsCardTypeEnum = typeof GetFinancialPostingsCardTypeEnum[keyof typeof GetFinancialPostingsCardTypeEnum];
/**
 * @export
 */
export const GetFinancialPostingsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetFinancialPostingsProcessingEnum = typeof GetFinancialPostingsProcessingEnum[keyof typeof GetFinancialPostingsProcessingEnum];
/**
 * @export
 */
export const GetFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
} as const;
export type GetFiscalPrintingDetailsFetchInstructionEnum = typeof GetFiscalPrintingDetailsFetchInstructionEnum[keyof typeof GetFiscalPrintingDetailsFetchInstructionEnum];
/**
 * @export
 */
export const GetFiscalSupportingDocumentsDocumentTypeEnum = {
    InformationFolio: 'InformationFolio',
    ProformaFolio: 'ProformaFolio'
} as const;
export type GetFiscalSupportingDocumentsDocumentTypeEnum = typeof GetFiscalSupportingDocumentsDocumentTypeEnum[keyof typeof GetFiscalSupportingDocumentsDocumentTypeEnum];
/**
 * @export
 */
export const GetFiscalSupportingDocumentsOrderByEnum = {
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate',
    Room: 'Room',
    DocumentUpdatedDate: 'DocumentUpdatedDate'
} as const;
export type GetFiscalSupportingDocumentsOrderByEnum = typeof GetFiscalSupportingDocumentsOrderByEnum[keyof typeof GetFiscalSupportingDocumentsOrderByEnum];
/**
 * @export
 */
export const GetFiscalSupportingDocumentsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetFiscalSupportingDocumentsSortOrderEnum = typeof GetFiscalSupportingDocumentsSortOrderEnum[keyof typeof GetFiscalSupportingDocumentsSortOrderEnum];
/**
 * @export
 */
export const GetFolioFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Windowbalances: 'Windowbalances',
    Payment: 'Payment',
    Payee: 'Payee',
    Account: 'Account',
    Guestpay: 'Guestpay',
    Notifications: 'Notifications',
    Transactioncodes: 'Transactioncodes',
    Foliohistory: 'Foliohistory',
    Totalbalance: 'Totalbalance',
    Postings: 'Postings'
} as const;
export type GetFolioFetchInstructionsEnum = typeof GetFolioFetchInstructionsEnum[keyof typeof GetFolioFetchInstructionsEnum];
/**
 * @export
 */
export const GetFolioGroupTypeEnum = {
    CheckNo: 'CheckNo',
    TransactionDate: 'TransactionDate',
    TransactionCode: 'TransactionCode',
    TransactionType: 'TransactionType'
} as const;
export type GetFolioGroupTypeEnum = typeof GetFolioGroupTypeEnum[keyof typeof GetFolioGroupTypeEnum];
/**
 * @export
 */
export const GetFolioPrintersEventTypeEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
} as const;
export type GetFolioPrintersEventTypeEnum = typeof GetFolioPrintersEventTypeEnum[keyof typeof GetFolioPrintersEventTypeEnum];
/**
 * @export
 */
export const GetFolioPrintersFiscalFolioInstructionEnum = {
    Retry: 'Retry',
    New: 'New',
    Void: 'Void',
    Offline: 'Offline'
} as const;
export type GetFolioPrintersFiscalFolioInstructionEnum = typeof GetFolioPrintersFiscalFolioInstructionEnum[keyof typeof GetFolioPrintersFiscalFolioInstructionEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetFolioTaxPaymentsInfoCardOrTokenEnum = typeof GetFolioTaxPaymentsInfoCardOrTokenEnum[keyof typeof GetFolioTaxPaymentsInfoCardOrTokenEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetFolioTaxPaymentsInfoCardTypeEnum = typeof GetFolioTaxPaymentsInfoCardTypeEnum[keyof typeof GetFolioTaxPaymentsInfoCardTypeEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetFolioTaxPaymentsInfoProcessingEnum = typeof GetFolioTaxPaymentsInfoProcessingEnum[keyof typeof GetFolioTaxPaymentsInfoProcessingEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type GetFolioTaxPaymentsInfoEmailFormatEnum = typeof GetFolioTaxPaymentsInfoEmailFormatEnum[keyof typeof GetFolioTaxPaymentsInfoEmailFormatEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
} as const;
export type GetFolioTaxPaymentsInfoPaymentTypeEnum = typeof GetFolioTaxPaymentsInfoPaymentTypeEnum[keyof typeof GetFolioTaxPaymentsInfoPaymentTypeEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
} as const;
export type GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = typeof GetFolioTaxPaymentsInfoTaxPaymentTypeEnum[keyof typeof GetFolioTaxPaymentsInfoTaxPaymentTypeEnum];
/**
 * @export
 */
export const GetFolioTaxPaymentsInfoActionEnum = {
    Billing: 'Billing',
    Settlefolio: 'Settlefolio',
    Deposit: 'Deposit',
    Compredemption: 'Compredemption',
    Prepaidcardredemption: 'Prepaidcardredemption',
    Advancepayment: 'Advancepayment'
} as const;
export type GetFolioTaxPaymentsInfoActionEnum = typeof GetFolioTaxPaymentsInfoActionEnum[keyof typeof GetFolioTaxPaymentsInfoActionEnum];
/**
 * @export
 */
export const GetFolioTypeNameFolioReportGroupEnum = {
    Guest: 'Guest',
    Group: 'Group',
    AccountsReceivables: 'AccountsReceivables',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    Expense: 'Expense',
    CorrectionHeader: 'CorrectionHeader'
} as const;
export type GetFolioTypeNameFolioReportGroupEnum = typeof GetFolioTypeNameFolioReportGroupEnum[keyof typeof GetFolioTypeNameFolioReportGroupEnum];
/**
 * @export
 */
export const GetGuestsTransactionsCashieringTransactionTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
} as const;
export type GetGuestsTransactionsCashieringTransactionTypeEnum = typeof GetGuestsTransactionsCashieringTransactionTypeEnum[keyof typeof GetGuestsTransactionsCashieringTransactionTypeEnum];
/**
 * @export
 */
export const GetGuestsTransactionsPostedTransactionTypeEnum = {
    All: 'All',
    Routed: 'Routed',
    Direct: 'Direct',
    Transferred: 'Transferred',
    Payments: 'Payments',
    NonBilled: 'NonBilled'
} as const;
export type GetGuestsTransactionsPostedTransactionTypeEnum = typeof GetGuestsTransactionsPostedTransactionTypeEnum[keyof typeof GetGuestsTransactionsPostedTransactionTypeEnum];
/**
 * @export
 */
export const GetPostBillingChargesOptionEnum = {
    PackageAllowance: 'PackageAllowance',
    RoomRouting: 'RoomRouting',
    PostingStatus: 'PostingStatus'
} as const;
export type GetPostBillingChargesOptionEnum = typeof GetPostBillingChargesOptionEnum[keyof typeof GetPostBillingChargesOptionEnum];
/**
 * @export
 */
export const GetPostingSummaryPostingSummaryTypeEnum = {
    Postings: 'Postings',
    Adjustments: 'Adjustments',
    All: 'All'
} as const;
export type GetPostingSummaryPostingSummaryTypeEnum = typeof GetPostingSummaryPostingSummaryTypeEnum[keyof typeof GetPostingSummaryPostingSummaryTypeEnum];
/**
 * @export
 */
export const GetPostingsForRefreshColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
} as const;
export type GetPostingsForRefreshColorEnum = typeof GetPostingsForRefreshColorEnum[keyof typeof GetPostingsForRefreshColorEnum];
/**
 * @export
 */
export const GetRoundingDifferenceEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
} as const;
export type GetRoundingDifferenceEventEnum = typeof GetRoundingDifferenceEventEnum[keyof typeof GetRoundingDifferenceEventEnum];
/**
 * @export
 */
export const GetRoundingDifferenceCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type GetRoundingDifferenceCardOrTokenEnum = typeof GetRoundingDifferenceCardOrTokenEnum[keyof typeof GetRoundingDifferenceCardOrTokenEnum];
/**
 * @export
 */
export const GetRoundingDifferenceCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetRoundingDifferenceCardTypeEnum = typeof GetRoundingDifferenceCardTypeEnum[keyof typeof GetRoundingDifferenceCardTypeEnum];
/**
 * @export
 */
export const GetRoundingDifferenceProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type GetRoundingDifferenceProcessingEnum = typeof GetRoundingDifferenceProcessingEnum[keyof typeof GetRoundingDifferenceProcessingEnum];
/**
 * @export
 */
export const GetRoundingDifferenceEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type GetRoundingDifferenceEmailFormatEnum = typeof GetRoundingDifferenceEmailFormatEnum[keyof typeof GetRoundingDifferenceEmailFormatEnum];
/**
 * @export
 */
export const GetStoredFolioDetailsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
} as const;
export type GetStoredFolioDetailsFolioStatusEnum = typeof GetStoredFolioDetailsFolioStatusEnum[keyof typeof GetStoredFolioDetailsFolioStatusEnum];
/**
 * @export
 */
export const GetTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
} as const;
export type GetTransactionCodesEventEnum = typeof GetTransactionCodesEventEnum[keyof typeof GetTransactionCodesEventEnum];
/**
 * @export
 */
export const GetTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
} as const;
export type GetTransactionCodesFolioStatusEnum = typeof GetTransactionCodesFolioStatusEnum[keyof typeof GetTransactionCodesFolioStatusEnum];
/**
 * @export
 */
export const GetTransactionCodesTrxServiceTypeEnum = {
    Services: 'Services',
    Goods: 'Goods'
} as const;
export type GetTransactionCodesTrxServiceTypeEnum = typeof GetTransactionCodesTrxServiceTypeEnum[keyof typeof GetTransactionCodesTrxServiceTypeEnum];
/**
 * @export
 */
export const GetValidateFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
} as const;
export type GetValidateFiscalPrintingDetailsFetchInstructionEnum = typeof GetValidateFiscalPrintingDetailsFetchInstructionEnum[keyof typeof GetValidateFiscalPrintingDetailsFetchInstructionEnum];
/**
 * @export
 */
export const ValidateTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
} as const;
export type ValidateTransactionCodesEventEnum = typeof ValidateTransactionCodesEventEnum[keyof typeof ValidateTransactionCodesEventEnum];
/**
 * @export
 */
export const ValidateTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
} as const;
export type ValidateTransactionCodesFolioStatusEnum = typeof ValidateTransactionCodesFolioStatusEnum[keyof typeof ValidateTransactionCodesFolioStatusEnum];
