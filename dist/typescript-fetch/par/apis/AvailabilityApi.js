"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRestrictionsHistoryFilterCodeCategoryEnum = exports.GetRestrictionsByDateRangeFilterCodeCategoryEnum = exports.GetRestrictionsByDateRangeRestrictionInfoEnum = exports.GetHotelsReservationProfileTypeEnum = exports.GetHotelAvailabilityCROReservationProfileTypeEnum = exports.GetHotelAvailabilityReservationProfileTypeEnum = exports.GetAvailableUpsellsReservationStatusEnum = exports.GetAlternateAvailabilityReservationProfileTypeEnum = exports.AvailabilityApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AvailabilityApi extends runtime.BaseAPI {
    /**
     * This API allows to Analyze Rate Availability. Rate analysis request to include the rate code, room type and room span to analyze whether a rate is closed and the reasons. <p><strong>OperationId:</strong>analyzeRateAvailability</p>
     * Analyze Rate Availability
     */
    analyzeRateAvailabilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling analyzeRateAvailability.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.numberOfRooms !== undefined) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.childAge) {
                queryParameters['childAge'] = requestParameters.childAge;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.reservationId) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdType) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/analyzeRateAvailability`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateAnalysisDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to Analyze Rate Availability. Rate analysis request to include the rate code, room type and room span to analyze whether a rate is closed and the reasons. <p><strong>OperationId:</strong>analyzeRateAvailability</p>
     * Analyze Rate Availability
     */
    analyzeRateAvailability(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.analyzeRateAvailabilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to clear all Restrictions for a hotel on given date. The hotel code and the date will need to be passed as part of the request.<p><strong>OperationId:</strong>clearAllRestrictions</p>
     * Clear all restrictions
     */
    clearAllRestrictionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling clearAllRestrictions.');
            }
            if (requestParameters.clearAllRestrictions === null || requestParameters.clearAllRestrictions === undefined) {
                throw new runtime.RequiredError('clearAllRestrictions', 'Required parameter requestParameters.clearAllRestrictions was null or undefined when calling clearAllRestrictions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ClearAllRestrictionsToJSON)(requestParameters.clearAllRestrictions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ClearAllRestrictionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to clear all Restrictions for a hotel on given date. The hotel code and the date will need to be passed as part of the request.<p><strong>OperationId:</strong>clearAllRestrictions</p>
     * Clear all restrictions
     */
    clearAllRestrictions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.clearAllRestrictionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to delete hurdles rates. <p><strong>OperationId:</strong>deleteHurdleRates</p>
     * Delete Hurdle Rates
     */
    deleteHurdleRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteHurdleRates.');
            }
            const queryParameters = {};
            if (requestParameters.hurdleDate) {
                queryParameters['hurdleDate'] = requestParameters.hurdleDate;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomCategory) {
                queryParameters['roomCategory'] = requestParameters.roomCategory;
            }
            if (requestParameters.yieldCategory) {
                queryParameters['yieldCategory'] = requestParameters.yieldCategory;
            }
            if (requestParameters.lengthOfStay) {
                queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
            }
            if (requestParameters.yieldMarketCode) {
                queryParameters['yieldMarketCode'] = requestParameters.yieldMarketCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to delete hurdles rates. <p><strong>OperationId:</strong>deleteHurdleRates</p>
     * Delete Hurdle Rates
     */
    deleteHurdleRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteHurdleRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to Delete a given restriction. The date range is passed along with the restriction control type details which can include house, room type, room class or rate plan information. The unique criteria has been defined with one of these combinations: restrictionType, restrictionStartDate, restrictionEndDate, bookingChannelCode, ratePlanCategory, ratePlanCode, roomClass, roomType.<p><strong>OperationId:</strong>deleteRestriction</p>
     * Delete a Restriction
     */
    deleteRestrictionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.restrictionId === null || requestParameters.restrictionId === undefined) {
                throw new runtime.RequiredError('restrictionId', 'Required parameter requestParameters.restrictionId was null or undefined when calling deleteRestriction.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRestriction.');
            }
            const queryParameters = {};
            if (requestParameters.restrictionEndDate !== undefined) {
                queryParameters['restrictionEndDate'] = requestParameters.restrictionEndDate;
            }
            if (requestParameters.restrictionStartDate !== undefined) {
                queryParameters['restrictionStartDate'] = requestParameters.restrictionStartDate;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.ratePlanCategory !== undefined) {
                queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/restrictions/{restrictionId}`.replace(`{${"restrictionId"}}`, encodeURIComponent(String(requestParameters.restrictionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to Delete a given restriction. The date range is passed along with the restriction control type details which can include house, room type, room class or rate plan information. The unique criteria has been defined with one of these combinations: restrictionType, restrictionStartDate, restrictionEndDate, bookingChannelCode, ratePlanCategory, ratePlanCode, roomClass, roomType.<p><strong>OperationId:</strong>deleteRestriction</p>
     * Delete a Restriction
     */
    deleteRestriction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRestrictionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get alternate dates for closed rates. Filter criteria include dates, room stay information, profile, block or guest information.<p><strong>OperationId:</strong>getAlternateAvailability</p>
     * Get alternate availability
     */
    getAlternateAvailabilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAlternateAvailability.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.redemption !== undefined) {
                queryParameters['redemption'] = requestParameters.redemption;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomNumber !== undefined) {
                queryParameters['roomNumber'] = requestParameters.roomNumber;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.quantity !== undefined) {
                queryParameters['quantity'] = requestParameters.quantity;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.childAge) {
                queryParameters['childAge'] = requestParameters.childAge;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.reservationProfileType) {
                queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
            }
            if (requestParameters.blockCode !== undefined) {
                queryParameters['blockCode'] = requestParameters.blockCode;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.membershipLevel !== undefined) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/availability/alternate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AlternateAvailabilityFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get alternate dates for closed rates. Filter criteria include dates, room stay information, profile, block or guest information.<p><strong>OperationId:</strong>getAlternateAvailability</p>
     * Get alternate availability
     */
    getAlternateAvailability(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAlternateAvailabilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches the ratePlan information like description, short information, long information, Web URL for the ratePlan and Commission Code. The rate plan code list can be passed as part of the criteria in the request. <p><strong>OperationId:</strong>getAvailabilityRatePlanInfo</p>
     * Get Rate Plan Information
     */
    getAvailabilityRatePlanInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling getAvailabilityRatePlanInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAvailabilityRatePlanInfo.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCodeList) {
                queryParameters['ratePlanCodeList'] = requestParameters.ratePlanCodeList;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rates/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AvailabilityRatePlanInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches the ratePlan information like description, short information, long information, Web URL for the ratePlan and Commission Code. The rate plan code list can be passed as part of the criteria in the request. <p><strong>OperationId:</strong>getAvailabilityRatePlanInfo</p>
     * Get Rate Plan Information
     */
    getAvailabilityRatePlanInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailabilityRatePlanInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation description<p><strong>OperationId:</strong>getAvailabilityRatePlanInfoByMultipleRatePlans</p>
     * Use this API to get Rate Plan information such as commission codes, market codes, and rate category.
     */
    getAvailabilityRatePlanInfoByMultipleRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAvailabilityRatePlanInfoByMultipleRatePlans.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCodeList) {
                queryParameters['ratePlanCodeList'] = requestParameters.ratePlanCodeList;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AvailabilityRatePlanInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Operation description<p><strong>OperationId:</strong>getAvailabilityRatePlanInfoByMultipleRatePlans</p>
     * Use this API to get Rate Plan information such as commission codes, market codes, and rate category.
     */
    getAvailabilityRatePlanInfoByMultipleRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailabilityRatePlanInfoByMultipleRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to fetch for Available Up-sells for specific hotel and date range. <p><strong>OperationId:</strong>getAvailableUpsells</p>
     * Get for Available Up-sells
     */
    getAvailableUpsellsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAvailableUpsells.');
            }
            const queryParameters = {};
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.reservationStatus !== undefined) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.rateAmount !== undefined) {
                queryParameters['rateAmount'] = requestParameters.rateAmount;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.fixedRate !== undefined) {
                queryParameters['fixedRate'] = requestParameters.fixedRate;
            }
            if (requestParameters.rateDate) {
                queryParameters['rateDate'] = requestParameters.rateDate;
            }
            if (requestParameters.requiredAmount) {
                queryParameters['requiredAmount'] = requestParameters.requiredAmount;
            }
            if (requestParameters.numberOfRooms !== undefined) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/availableUpsells`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AvailableUpsellsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to fetch for Available Up-sells for specific hotel and date range. <p><strong>OperationId:</strong>getAvailableUpsells</p>
     * Get for Available Up-sells
     */
    getAvailableUpsells(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailableUpsellsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Guarantee-able Preference Codes for a specified property. <p><strong>OperationId:</strong>getGuaranteeablePreferences</p>
     * Get Guarantee-able Preference Codes
     */
    getGuaranteeablePreferencesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGuaranteeablePreferences.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.availableCode) {
                queryParameters['availableCode'] = requestParameters.availableCode;
            }
            if (requestParameters.requestedCode) {
                queryParameters['requestedCode'] = requestParameters.requestedCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeablePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuaranteeablePreferencesFromJSON)(jsonValue));
        });
    }
    /**
     * Get Guarantee-able Preference Codes for a specified property. <p><strong>OperationId:</strong>getGuaranteeablePreferences</p>
     * Get Guarantee-able Preference Codes
     */
    getGuaranteeablePreferences(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuaranteeablePreferencesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    getHotelAvailabilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelAvailability.');
            }
            const queryParameters = {};
            if (requestParameters.cro) {
                queryParameters['cro'] = requestParameters.cro;
            }
            if (requestParameters.includeClosedRates) {
                queryParameters['includeClosedRates'] = requestParameters.includeClosedRates;
            }
            if (requestParameters.includeDefaultRatePlanSet) {
                queryParameters['includeDefaultRatePlanSet'] = requestParameters.includeDefaultRatePlanSet;
            }
            if (requestParameters.initialRatePlanSet) {
                queryParameters['initialRatePlanSet'] = requestParameters.initialRatePlanSet;
            }
            if (requestParameters.limit) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pagePointerKey) {
                queryParameters['pagePointerKey'] = requestParameters.pagePointerKey;
            }
            if (requestParameters.ratePlanSet) {
                queryParameters['ratePlanSet'] = requestParameters.ratePlanSet;
            }
            if (requestParameters.redeemAwards) {
                queryParameters['redeemAwards'] = requestParameters.redeemAwards;
            }
            if (requestParameters.roomStayStartDate !== undefined) {
                queryParameters['roomStayStartDate'] = requestParameters.roomStayStartDate;
            }
            if (requestParameters.roomStayEndDate !== undefined) {
                queryParameters['roomStayEndDate'] = requestParameters.roomStayEndDate;
            }
            if (requestParameters.roomStayQuantity !== undefined) {
                queryParameters['roomStayQuantity'] = requestParameters.roomStayQuantity;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.childAge) {
                queryParameters['childAge'] = requestParameters.childAge;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.fullStayTimeSpanStartDate !== undefined) {
                queryParameters['fullStayTimeSpanStartDate'] = requestParameters.fullStayTimeSpanStartDate;
            }
            if (requestParameters.fullStayTimeSpanEndDate !== undefined) {
                queryParameters['fullStayTimeSpanEndDate'] = requestParameters.fullStayTimeSpanEndDate;
            }
            if (requestParameters.prevailingRate !== undefined) {
                queryParameters['prevailingRate'] = requestParameters.prevailingRate;
            }
            if (requestParameters.rateCategory !== undefined) {
                queryParameters['rateCategory'] = requestParameters.rateCategory;
            }
            if (requestParameters.rateClass !== undefined) {
                queryParameters['rateClass'] = requestParameters.rateClass;
            }
            if (requestParameters.rateGroup !== undefined) {
                queryParameters['rateGroup'] = requestParameters.rateGroup;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.promotionCode) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.feature) {
                queryParameters['feature'] = requestParameters.feature;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.reservationProfileType) {
                queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
            }
            if (requestParameters.attachedProfileId) {
                queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
            }
            if (requestParameters.hotelReservationId !== undefined) {
                queryParameters['hotelReservationId'] = requestParameters.hotelReservationId;
            }
            if (requestParameters.hotelReservationIdType !== undefined) {
                queryParameters['hotelReservationIdType'] = requestParameters.hotelReservationIdType;
            }
            if (requestParameters.ratePlanInfo !== undefined) {
                queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
            }
            if (requestParameters.returnOnlyAvailableRateCodes !== undefined) {
                queryParameters['returnOnlyAvailableRateCodes'] = requestParameters.returnOnlyAvailableRateCodes;
            }
            if (requestParameters.resGuaranteeInfo !== undefined) {
                queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
            }
            if (requestParameters.roomTypeInfo !== undefined) {
                queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
            }
            if (requestParameters.membershipIdNumber) {
                queryParameters['membershipIdNumber'] = requestParameters.membershipIdNumber;
            }
            if (requestParameters.membershipLevel) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.pointsAvailable) {
                queryParameters['pointsAvailable'] = requestParameters.pointsAvailable;
            }
            if (requestParameters.smokingPreference) {
                queryParameters['smokingPreference'] = requestParameters.smokingPreference;
            }
            if (requestParameters.hotelPackage) {
                queryParameters['hotelPackage'] = requestParameters.hotelPackage;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/availability`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HotelAvailabilityFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    getHotelAvailability(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelAvailabilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  This API fetches hotel availablity for multiple hotels, given dates, RatePlans, Rate Category, Rate Group, Membership Rates, Number of People. <p><strong>OperationId:</strong>getHotelAvailabilityCRO</p>
     * Get Hotel Availability
     */
    getHotelAvailabilityCRORaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.cro) {
                queryParameters['cro'] = requestParameters.cro;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.includeClosedRates) {
                queryParameters['includeClosedRates'] = requestParameters.includeClosedRates;
            }
            if (requestParameters.includeDefaultRatePlanSet) {
                queryParameters['includeDefaultRatePlanSet'] = requestParameters.includeDefaultRatePlanSet;
            }
            if (requestParameters.initialRatePlanSet) {
                queryParameters['initialRatePlanSet'] = requestParameters.initialRatePlanSet;
            }
            if (requestParameters.limit) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pagePointerKey) {
                queryParameters['pagePointerKey'] = requestParameters.pagePointerKey;
            }
            if (requestParameters.ratePlanSet) {
                queryParameters['ratePlanSet'] = requestParameters.ratePlanSet;
            }
            if (requestParameters.redeemAwards) {
                queryParameters['redeemAwards'] = requestParameters.redeemAwards;
            }
            if (requestParameters.roomStayStartDate !== undefined) {
                queryParameters['roomStayStartDate'] = requestParameters.roomStayStartDate;
            }
            if (requestParameters.roomStayEndDate !== undefined) {
                queryParameters['roomStayEndDate'] = requestParameters.roomStayEndDate;
            }
            if (requestParameters.roomStayQuantity !== undefined) {
                queryParameters['roomStayQuantity'] = requestParameters.roomStayQuantity;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.childAge) {
                queryParameters['childAge'] = requestParameters.childAge;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.fullStayTimeSpanStartDate !== undefined) {
                queryParameters['fullStayTimeSpanStartDate'] = requestParameters.fullStayTimeSpanStartDate;
            }
            if (requestParameters.fullStayTimeSpanEndDate !== undefined) {
                queryParameters['fullStayTimeSpanEndDate'] = requestParameters.fullStayTimeSpanEndDate;
            }
            if (requestParameters.prevailingRate !== undefined) {
                queryParameters['prevailingRate'] = requestParameters.prevailingRate;
            }
            if (requestParameters.rateCategory !== undefined) {
                queryParameters['rateCategory'] = requestParameters.rateCategory;
            }
            if (requestParameters.rateClass !== undefined) {
                queryParameters['rateClass'] = requestParameters.rateClass;
            }
            if (requestParameters.rateGroup !== undefined) {
                queryParameters['rateGroup'] = requestParameters.rateGroup;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.promotionCode) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.feature) {
                queryParameters['feature'] = requestParameters.feature;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.reservationProfileType) {
                queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
            }
            if (requestParameters.attachedProfileId) {
                queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
            }
            if (requestParameters.hotelReservationId !== undefined) {
                queryParameters['hotelReservationId'] = requestParameters.hotelReservationId;
            }
            if (requestParameters.hotelReservationIdType !== undefined) {
                queryParameters['hotelReservationIdType'] = requestParameters.hotelReservationIdType;
            }
            if (requestParameters.ratePlanInfo !== undefined) {
                queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
            }
            if (requestParameters.returnOnlyAvailableRateCodes !== undefined) {
                queryParameters['returnOnlyAvailableRateCodes'] = requestParameters.returnOnlyAvailableRateCodes;
            }
            if (requestParameters.resGuaranteeInfo !== undefined) {
                queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
            }
            if (requestParameters.roomTypeInfo !== undefined) {
                queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
            }
            if (requestParameters.membershipIdNumber) {
                queryParameters['membershipIdNumber'] = requestParameters.membershipIdNumber;
            }
            if (requestParameters.membershipLevel) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.pointsAvailable) {
                queryParameters['pointsAvailable'] = requestParameters.pointsAvailable;
            }
            if (requestParameters.smokingPreference) {
                queryParameters['smokingPreference'] = requestParameters.smokingPreference;
            }
            if (requestParameters.hotelPackage) {
                queryParameters['hotelPackage'] = requestParameters.hotelPackage;
            }
            if (requestParameters.yieldMarketCode !== undefined) {
                queryParameters['yieldMarketCode'] = requestParameters.yieldMarketCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/availability`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HotelAvailabilityFromJSON)(jsonValue));
        });
    }
    /**
     *  This API fetches hotel availablity for multiple hotels, given dates, RatePlans, Rate Category, Rate Group, Membership Rates, Number of People. <p><strong>OperationId:</strong>getHotelAvailabilityCRO</p>
     * Get Hotel Availability
     */
    getHotelAvailabilityCRO(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelAvailabilityCRORaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is to search hotels for the sales process. <p><strong>OperationId:</strong>getHotels</p>
     * Search hotels for the sales process
     */
    getHotelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.cro !== undefined) {
                queryParameters['cro'] = requestParameters.cro;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.quantity !== undefined) {
                queryParameters['quantity'] = requestParameters.quantity;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.alternateHotels !== undefined) {
                queryParameters['alternateHotels'] = requestParameters.alternateHotels;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.regionCode !== undefined) {
                queryParameters['regionCode'] = requestParameters.regionCode;
            }
            if (requestParameters.city) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.hotelType) {
                queryParameters['hotelType'] = requestParameters.hotelType;
            }
            if (requestParameters.hotelAmenity) {
                queryParameters['hotelAmenity'] = requestParameters.hotelAmenity;
            }
            if (requestParameters.attraction) {
                queryParameters['attraction'] = requestParameters.attraction;
            }
            if (requestParameters.hotelPackage) {
                queryParameters['hotelPackage'] = requestParameters.hotelPackage;
            }
            if (requestParameters.prevailingRate !== undefined) {
                queryParameters['prevailingRate'] = requestParameters.prevailingRate;
            }
            if (requestParameters.rateCategory !== undefined) {
                queryParameters['rateCategory'] = requestParameters.rateCategory;
            }
            if (requestParameters.rateClass !== undefined) {
                queryParameters['rateClass'] = requestParameters.rateClass;
            }
            if (requestParameters.rateGroup !== undefined) {
                queryParameters['rateGroup'] = requestParameters.rateGroup;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.ratePlanId) {
                queryParameters['ratePlanId'] = requestParameters.ratePlanId;
            }
            if (requestParameters.promotionCode) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.bedType) {
                queryParameters['bedType'] = requestParameters.bedType;
            }
            if (requestParameters.feature) {
                queryParameters['feature'] = requestParameters.feature;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.reservationProfileType) {
                queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.currencyExchangeRates !== undefined) {
                queryParameters['currencyExchangeRates'] = requestParameters.currencyExchangeRates;
            }
            if (requestParameters.ratePlanInfo !== undefined) {
                queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
            }
            if (requestParameters.resGuaranteeInfo !== undefined) {
                queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
            }
            if (requestParameters.returnAllRates !== undefined) {
                queryParameters['returnAllRates'] = requestParameters.returnAllRates;
            }
            if (requestParameters.roomTypeInfo !== undefined) {
                queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
            }
            if (requestParameters.sellMessages !== undefined) {
                queryParameters['sellMessages'] = requestParameters.sellMessages;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SearchHotelsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API is to search hotels for the sales process. <p><strong>OperationId:</strong>getHotels</p>
     * Search hotels for the sales process
     */
    getHotels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to fetch existing Hurdle Rates. <p><strong>OperationId:</strong>getHurdleRates</p>
     * Get Hurdle Rates
     */
    getHurdleRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHurdleRates.');
            }
            if (requestParameters.hurdleDate === null || requestParameters.hurdleDate === undefined) {
                throw new runtime.RequiredError('hurdleDate', 'Required parameter requestParameters.hurdleDate was null or undefined when calling getHurdleRates.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.hurdleDate !== undefined) {
                queryParameters['hurdleDate'] = requestParameters.hurdleDate;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.roomTypesCode) {
                queryParameters['roomTypesCode'] = requestParameters.roomTypesCode;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HurdleRatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to fetch existing Hurdle Rates. <p><strong>OperationId:</strong>getHurdleRates</p>
     * Get Hurdle Rates
     */
    getHurdleRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHurdleRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    getReservationGuaranteesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationGuarantees.');
            }
            if (requestParameters.arrivalDate === null || requestParameters.arrivalDate === undefined) {
                throw new runtime.RequiredError('arrivalDate', 'Required parameter requestParameters.arrivalDate was null or undefined when calling getReservationGuarantees.');
            }
            const queryParameters = {};
            if (requestParameters.arrivalDate !== undefined) {
                queryParameters['arrivalDate'] = requestParameters.arrivalDate;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.companyId !== undefined) {
                queryParameters['companyId'] = requestParameters.companyId;
            }
            if (requestParameters.travelAgentId !== undefined) {
                queryParameters['travelAgentId'] = requestParameters.travelAgentId;
            }
            if (requestParameters.sourceId !== undefined) {
                queryParameters['sourceId'] = requestParameters.sourceId;
            }
            if (requestParameters.groupId !== undefined) {
                queryParameters['groupId'] = requestParameters.groupId;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.calculateEstimateAmount !== undefined) {
                queryParameters['calculateEstimateAmount'] = requestParameters.calculateEstimateAmount;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.numberOfRooms !== undefined) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.numberOfAdults !== undefined) {
                queryParameters['numberOfAdults'] = requestParameters.numberOfAdults;
            }
            if (requestParameters.numberOfChildren !== undefined) {
                queryParameters['numberOfChildren'] = requestParameters.numberOfChildren;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationGuaranteesPoliciesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    getReservationGuarantees(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationGuaranteesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    getRestrictionsByDateRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRestrictionsByDateRange.');
            }
            const queryParameters = {};
            if (requestParameters.chainName !== undefined) {
                queryParameters['chainName'] = requestParameters.chainName;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.fetchSizeByDay !== undefined) {
                queryParameters['fetchSizeByDay'] = requestParameters.fetchSizeByDay;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.restrictionInfo !== undefined) {
                queryParameters['restrictionInfo'] = requestParameters.restrictionInfo;
            }
            if (requestParameters.restrictionSearchCriteriaStartDate !== undefined) {
                queryParameters['restrictionSearchCriteriaStartDate'] = requestParameters.restrictionSearchCriteriaStartDate;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.ratePlanCategory !== undefined) {
                queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.filterCodeCategory !== undefined) {
                queryParameters['filterCodeCategory'] = requestParameters.filterCodeCategory;
            }
            if (requestParameters.filterCode) {
                queryParameters['filterCode'] = requestParameters.filterCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RestrictionsByDateRangeFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    getRestrictionsByDateRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRestrictionsByDateRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to fetch the Restriction history. Specify filter codes or restriction control types. The date range can be passed as part of the request. <p><strong>OperationId:</strong>getRestrictionsHistory</p>
     * Get the Restriction history
     */
    getRestrictionsHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRestrictionsHistory.');
            }
            const queryParameters = {};
            if (requestParameters.chainName !== undefined) {
                queryParameters['chainName'] = requestParameters.chainName;
            }
            if (requestParameters.date !== undefined) {
                queryParameters['date'] = requestParameters.date;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.ratePlanCategory !== undefined) {
                queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.filterCodeCategory !== undefined) {
                queryParameters['filterCodeCategory'] = requestParameters.filterCodeCategory;
            }
            if (requestParameters.filterCode) {
                queryParameters['filterCode'] = requestParameters.filterCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/restrictionsHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RestrictionsHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to fetch the Restriction history. Specify filter codes or restriction control types. The date range can be passed as part of the request. <p><strong>OperationId:</strong>getRestrictionsHistory</p>
     * Get the Restriction history
     */
    getRestrictionsHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRestrictionsHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to create hurdle rates. <p><strong>OperationId:</strong>postHurdleRates</p>
     * Create Hurdle Rates
     */
    postHurdleRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postHurdleRates.');
            }
            if (requestParameters.createHurdleRates === null || requestParameters.createHurdleRates === undefined) {
                throw new runtime.RequiredError('createHurdleRates', 'Required parameter requestParameters.createHurdleRates was null or undefined when calling postHurdleRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateHurdleRatesToJSON)(requestParameters.createHurdleRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to create hurdle rates. <p><strong>OperationId:</strong>postHurdleRates</p>
     * Create Hurdle Rates
     */
    postHurdleRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postHurdleRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create restrictions on various levels such as house level, rate class, rate category, rate plan, room class, room type, and booking channel code.<p><strong>OperationId:</strong>postRestriction</p>
     * Create a restriction
     */
    postRestrictionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRestriction.');
            }
            if (requestParameters.createRestriction === null || requestParameters.createRestriction === undefined) {
                throw new runtime.RequiredError('createRestriction', 'Required parameter requestParameters.createRestriction was null or undefined when calling postRestriction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateRestrictionToJSON)(requestParameters.createRestriction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create restrictions on various levels such as house level, rate class, rate category, rate plan, room class, room type, and booking channel code.<p><strong>OperationId:</strong>postRestriction</p>
     * Create a restriction
     */
    postRestriction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRestrictionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to update an existing Hurdle Rate. <p><strong>OperationId:</strong>putHurdleRates</p>
     * Change Hurdle Rates
     */
    putHurdleRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putHurdleRates.');
            }
            if (requestParameters.changeHurdleRates === null || requestParameters.changeHurdleRates === undefined) {
                throw new runtime.RequiredError('changeHurdleRates', 'Required parameter requestParameters.changeHurdleRates was null or undefined when calling putHurdleRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeHurdleRatesToJSON)(requestParameters.changeHurdleRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeHurdleRatesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to update an existing Hurdle Rate. <p><strong>OperationId:</strong>putHurdleRates</p>
     * Change Hurdle Rates
     */
    putHurdleRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putHurdleRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to Fetch Reservation Guarantee. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.  <p><strong>OperationId:</strong>validateReservationGuarantees</p>
     * Get Reservation Guarantee
     */
    validateReservationGuaranteesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling validateReservationGuarantees.');
            }
            if (requestParameters.validateReservationGuarantees === null || requestParameters.validateReservationGuarantees === undefined) {
                throw new runtime.RequiredError('validateReservationGuarantees', 'Required parameter requestParameters.validateReservationGuarantees was null or undefined when calling validateReservationGuarantees.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/validateGuarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ValidateReservationGuaranteesToJSON)(requestParameters.validateReservationGuarantees),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationGuaranteesPoliciesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to Fetch Reservation Guarantee. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.  <p><strong>OperationId:</strong>validateReservationGuarantees</p>
     * Get Reservation Guarantee
     */
    validateReservationGuarantees(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateReservationGuaranteesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AvailabilityApi = AvailabilityApi;
/**
 * @export
 */
exports.GetAlternateAvailabilityReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
};
/**
 * @export
 */
exports.GetAvailableUpsellsReservationStatusEnum = {
    Reserved: 'Reserved',
    Requested: 'Requested',
    NoShow: 'NoShow',
    Cancelled: 'Cancelled',
    InHouse: 'InHouse',
    CheckedOut: 'CheckedOut',
    Waitlisted: 'Waitlisted',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    Walkin: 'Walkin',
    PendingCheckout: 'PendingCheckout'
};
/**
 * @export
 */
exports.GetHotelAvailabilityReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
};
/**
 * @export
 */
exports.GetHotelAvailabilityCROReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
};
/**
 * @export
 */
exports.GetHotelsReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
};
/**
 * @export
 */
exports.GetRestrictionsByDateRangeRestrictionInfoEnum = {
    Detail: 'Detail',
    Overview: 'Overview',
    Year: 'Year'
};
/**
 * @export
 */
exports.GetRestrictionsByDateRangeFilterCodeCategoryEnum = {
    BookingChannelCode: 'BookingChannelCode',
    RoomClass: 'RoomClass',
    RoomType: 'RoomType',
    RatePlanCategory: 'RatePlanCategory',
    RatePlanCode: 'RatePlanCode'
};
/**
 * @export
 */
exports.GetRestrictionsHistoryFilterCodeCategoryEnum = {
    BookingChannelCode: 'BookingChannelCode',
    RoomClass: 'RoomClass',
    RoomType: 'RoomType',
    RatePlanCategory: 'RatePlanCategory',
    RatePlanCode: 'RatePlanCode'
};
