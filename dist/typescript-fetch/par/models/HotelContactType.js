"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelContactTypeToJSON = exports.HotelContactTypeFromJSONTyped = exports.HotelContactTypeFromJSON = exports.instanceOfHotelContactType = void 0;
const runtime_1 = require("../runtime");
const HotelContactRoleType_1 = require("./HotelContactRoleType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the HotelContactType interface.
 */
function instanceOfHotelContactType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelContactType = instanceOfHotelContactType;
function HotelContactTypeFromJSON(json) {
    return HotelContactTypeFromJSONTyped(json, false);
}
exports.HotelContactTypeFromJSON = HotelContactTypeFromJSON;
function HotelContactTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'communicationAddress': !(0, runtime_1.exists)(json, 'communicationAddress') ? undefined : json['communicationAddress'],
        'communicationMethod': !(0, runtime_1.exists)(json, 'communicationMethod') ? undefined : json['communicationMethod'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'nameId': !(0, runtime_1.exists)(json, 'nameId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['nameId']),
        'ownerCode': !(0, runtime_1.exists)(json, 'ownerCode') ? undefined : json['ownerCode'],
        'primary': !(0, runtime_1.exists)(json, 'primary') ? undefined : json['primary'],
        'roles': !(0, runtime_1.exists)(json, 'roles') ? undefined : (json['roles'].map(HotelContactRoleType_1.HotelContactRoleTypeFromJSON)),
    };
}
exports.HotelContactTypeFromJSONTyped = HotelContactTypeFromJSONTyped;
function HotelContactTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'communicationAddress': value.communicationAddress,
        'communicationMethod': value.communicationMethod,
        'hotelId': value.hotelId,
        'name': value.name,
        'nameId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.nameId),
        'ownerCode': value.ownerCode,
        'primary': value.primary,
        'roles': value.roles === undefined ? undefined : (value.roles.map(HotelContactRoleType_1.HotelContactRoleTypeToJSON)),
    };
}
exports.HotelContactTypeToJSON = HotelContactTypeToJSON;
