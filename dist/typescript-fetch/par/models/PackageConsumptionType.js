"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageConsumptionTypeToJSON = exports.PackageConsumptionTypeFromJSONTyped = exports.PackageConsumptionTypeFromJSON = exports.instanceOfPackageConsumptionType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the PackageConsumptionType interface.
 */
function instanceOfPackageConsumptionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPackageConsumptionType = instanceOfPackageConsumptionType;
function PackageConsumptionTypeFromJSON(json) {
    return PackageConsumptionTypeFromJSONTyped(json, false);
}
exports.PackageConsumptionTypeFromJSON = PackageConsumptionTypeFromJSON;
function PackageConsumptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'allowanceConsumed': !(0, runtime_1.exists)(json, 'allowanceConsumed') ? undefined : json['allowanceConsumed'],
        'defaultQuantity': !(0, runtime_1.exists)(json, 'defaultQuantity') ? undefined : json['defaultQuantity'],
        'excludedQuantity': !(0, runtime_1.exists)(json, 'excludedQuantity') ? undefined : json['excludedQuantity'],
        'totalQuantity': !(0, runtime_1.exists)(json, 'totalQuantity') ? undefined : json['totalQuantity'],
    };
}
exports.PackageConsumptionTypeFromJSONTyped = PackageConsumptionTypeFromJSONTyped;
function PackageConsumptionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'allowanceConsumed': value.allowanceConsumed,
        'defaultQuantity': value.defaultQuantity,
        'excludedQuantity': value.excludedQuantity,
        'totalQuantity': value.totalQuantity,
    };
}
exports.PackageConsumptionTypeToJSON = PackageConsumptionTypeToJSON;
