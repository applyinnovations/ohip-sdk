/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines children counts with Age Qualifying Group(Child Bucket) classification.
 * @export
 * @interface ChildBucketsType
 */
export interface ChildBucketsType {
    /**
     * Number of children classified under the first Age Qualifying Group(Child Bucket#1).
     * @type {number}
     * @memberof ChildBucketsType
     */
    bucket1Count?: number;
    /**
     * Number of children classified under the second Age Qualifying Group(Child Bucket#2).
     * @type {number}
     * @memberof ChildBucketsType
     */
    bucket2Count?: number;
    /**
     * Number of children classified under the third Age Qualifying Group(Child Bucket#3).
     * @type {number}
     * @memberof ChildBucketsType
     */
    bucket3Count?: number;
    /**
     * Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
     * @type {number}
     * @memberof ChildBucketsType
     */
    bucket4Count?: number;
    /**
     * Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
     * @type {number}
     * @memberof ChildBucketsType
     */
    bucket5Count?: number;
}

/**
 * Check if a given object implements the ChildBucketsType interface.
 */
export function instanceOfChildBucketsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChildBucketsTypeFromJSON(json: any): ChildBucketsType {
    return ChildBucketsTypeFromJSONTyped(json, false);
}

export function ChildBucketsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChildBucketsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bucket1Count': !exists(json, 'bucket1Count') ? undefined : json['bucket1Count'],
        'bucket2Count': !exists(json, 'bucket2Count') ? undefined : json['bucket2Count'],
        'bucket3Count': !exists(json, 'bucket3Count') ? undefined : json['bucket3Count'],
        'bucket4Count': !exists(json, 'bucket4Count') ? undefined : json['bucket4Count'],
        'bucket5Count': !exists(json, 'bucket5Count') ? undefined : json['bucket5Count'],
    };
}

export function ChildBucketsTypeToJSON(value?: ChildBucketsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bucket1Count': value.bucket1Count,
        'bucket2Count': value.bucket2Count,
        'bucket3Count': value.bucket3Count,
        'bucket4Count': value.bucket4Count,
        'bucket5Count': value.bucket5Count,
    };
}

