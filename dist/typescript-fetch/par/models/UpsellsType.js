"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpsellsTypeToJSON = exports.UpsellsTypeFromJSONTyped = exports.UpsellsTypeFromJSON = exports.instanceOfUpsellsType = void 0;
const runtime_1 = require("../runtime");
const AmountPointsType_1 = require("./AmountPointsType");
const UpsellType_1 = require("./UpsellType");
/**
 * Check if a given object implements the UpsellsType interface.
 */
function instanceOfUpsellsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUpsellsType = instanceOfUpsellsType;
function UpsellsTypeFromJSON(json) {
    return UpsellsTypeFromJSONTyped(json, false);
}
exports.UpsellsTypeFromJSON = UpsellsTypeFromJSON;
function UpsellsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availableAmount': !(0, runtime_1.exists)(json, 'availableAmount') ? undefined : (0, AmountPointsType_1.AmountPointsTypeFromJSON)(json['availableAmount']),
        'upsell': !(0, runtime_1.exists)(json, 'upsell') ? undefined : (json['upsell'].map(UpsellType_1.UpsellTypeFromJSON)),
    };
}
exports.UpsellsTypeFromJSONTyped = UpsellsTypeFromJSONTyped;
function UpsellsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availableAmount': (0, AmountPointsType_1.AmountPointsTypeToJSON)(value.availableAmount),
        'upsell': value.upsell === undefined ? undefined : (value.upsell.map(UpsellType_1.UpsellTypeToJSON)),
    };
}
exports.UpsellsTypeToJSON = UpsellsTypeToJSON;
