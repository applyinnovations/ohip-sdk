/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ProfileSubscriptionTypeProfileInfo } from './ProfileSubscriptionTypeProfileInfo';
import {
    ProfileSubscriptionTypeProfileInfoFromJSON,
    ProfileSubscriptionTypeProfileInfoFromJSONTyped,
    ProfileSubscriptionTypeProfileInfoToJSON,
} from './ProfileSubscriptionTypeProfileInfo';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains details of the profile subscription. The subscription represents the link between the OPERA profile and the external profile within a particular external system
 * @export
 * @interface ProfileSubscriptionType
 */
export interface ProfileSubscriptionType {
    /**
     * 
     * @type {ProfileId}
     * @memberof ProfileSubscriptionType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ProfileSubscriptionType
     */
    externalProfileId?: UniqueIDType;
    /**
     * 
     * @type {ProfileSubscriptionTypeProfileInfo}
     * @memberof ProfileSubscriptionType
     */
    profileInfo?: ProfileSubscriptionTypeProfileInfo;
    /**
     * Indicates if the profile was distributed to the external system.
     * @type {boolean}
     * @memberof ProfileSubscriptionType
     */
    distributed?: boolean;
    /**
     * Indicates if the profile information should be overwritten by the external system.
     * @type {boolean}
     * @memberof ProfileSubscriptionType
     */
    force?: boolean;
    /**
     * Timestamp when the profile was subscribed to.
     * @type {string}
     * @memberof ProfileSubscriptionType
     */
    subscriptionDate?: string;
    /**
     * Timestamp of the most recent distribution of this profile to the external system.
     * @type {string}
     * @memberof ProfileSubscriptionType
     */
    lastDistributionDate?: string;
    /**
     * Timestamp of the most recent update of the subscription information by the external system.
     * @type {string}
     * @memberof ProfileSubscriptionType
     */
    lastExternalUpdateDate?: string;
    /**
     * Indicates whether this subscription is active or inactive.
     * @type {boolean}
     * @memberof ProfileSubscriptionType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the ProfileSubscriptionType interface.
 */
export function instanceOfProfileSubscriptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileSubscriptionTypeFromJSON(json: any): ProfileSubscriptionType {
    return ProfileSubscriptionTypeFromJSONTyped(json, false);
}

export function ProfileSubscriptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileSubscriptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'externalProfileId': !exists(json, 'externalProfileId') ? undefined : UniqueIDTypeFromJSON(json['externalProfileId']),
        'profileInfo': !exists(json, 'profileInfo') ? undefined : ProfileSubscriptionTypeProfileInfoFromJSON(json['profileInfo']),
        'distributed': !exists(json, 'distributed') ? undefined : json['distributed'],
        'force': !exists(json, 'force') ? undefined : json['force'],
        'subscriptionDate': !exists(json, 'subscriptionDate') ? undefined : json['subscriptionDate'],
        'lastDistributionDate': !exists(json, 'lastDistributionDate') ? undefined : json['lastDistributionDate'],
        'lastExternalUpdateDate': !exists(json, 'lastExternalUpdateDate') ? undefined : json['lastExternalUpdateDate'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function ProfileSubscriptionTypeToJSON(value?: ProfileSubscriptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileId': ProfileIdToJSON(value.profileId),
        'externalProfileId': UniqueIDTypeToJSON(value.externalProfileId),
        'profileInfo': ProfileSubscriptionTypeProfileInfoToJSON(value.profileInfo),
        'distributed': value.distributed,
        'force': value.force,
        'subscriptionDate': value.subscriptionDate,
        'lastDistributionDate': value.lastDistributionDate,
        'lastExternalUpdateDate': value.lastExternalUpdateDate,
        'inactive': value.inactive,
    };
}

