"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum = exports.GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum = exports.GetFunctionSpaceAvailabilityFetchInstructionsEnum = exports.GetEventsOneHotelFetchInstructionsEnum = exports.GetEventsOneHotelCateringEventOrderByEnum = exports.GetEventsMultipleHotelsFetchInstructionsEnum = exports.GetEventsMultipleHotelsCateringEventOrderByEnum = exports.GetEventsMultipleHotelsCategoryEnum = exports.GetEventResourceByMenuFetchInstructionsEnum = exports.GetEventCalendarMultipleHotelIdsAreaMeasurementEnum = exports.GetEventCalendarMultipleHotelIdsSortingByEnum = exports.GetEventCalendarAreaMeasurementEnum = exports.GetEventCalendarSortingByEnum = exports.GetEventFetchInstructionsEnum = exports.GetCateringPackageRevenueFetchInstructionsEnum = exports.GetCateringEventPostingsFetchInstructionsEnum = exports.GetCateringEventChangesActionEnum = exports.GetCateringEventChangesChangeSourceEnum = exports.GetCateringEventChangesFetchInstructionsEnum = exports.EventManagementApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class EventManagementApi extends runtime.BaseAPI {
    /**
     * You can use this API to update one/more catering events for the same block <p><strong>OperationId:</strong>cateringEventsBulkUpdate</p>
     * Update multiple catering events
     */
    cateringEventsBulkUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringEventsBulkUpdate === null || requestParameters.cateringEventsBulkUpdate === undefined) {
                throw new runtime.RequiredError('cateringEventsBulkUpdate', 'Required parameter requestParameters.cateringEventsBulkUpdate was null or undefined when calling cateringEventsBulkUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringEvents`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringEventsBulkUpdateToJSON)(requestParameters.cateringEventsBulkUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.CateringEventsProcessedInfoTypeFromJSON));
        });
    }
    /**
     * You can use this API to update one/more catering events for the same block <p><strong>OperationId:</strong>cateringEventsBulkUpdate</p>
     * Update multiple catering events
     */
    cateringEventsBulkUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cateringEventsBulkUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the catering package revenue on a block. <p><strong>OperationId:</strong>changeCateringPackageRevenue</p>
     * Update Catering package revenue
     */
    changeCateringPackageRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageRevenue === null || requestParameters.cateringPackageRevenue === undefined) {
                throw new runtime.RequiredError('cateringPackageRevenue', 'Required parameter requestParameters.cateringPackageRevenue was null or undefined when calling changeCateringPackageRevenue.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringPackagesRevenue`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeCateringPackageRevenueRequestToJSON)(requestParameters.cateringPackageRevenue),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackageRevenueFromJSON)(jsonValue));
        });
    }
    /**
     * Update the catering package revenue on a block. <p><strong>OperationId:</strong>changeCateringPackageRevenue</p>
     * Update Catering package revenue
     */
    changeCateringPackageRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCateringPackageRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a Catering Package which already exists on the block. <p><strong>OperationId:</strong>changeCateringPackages</p>
     * Update a Catering packages
     */
    changeCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling changeCateringPackages.');
            }
            if (requestParameters.cateringPackages === null || requestParameters.cateringPackages === undefined) {
                throw new runtime.RequiredError('cateringPackages', 'Required parameter requestParameters.cateringPackages was null or undefined when calling changeCateringPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringPackagesToJSON)(requestParameters.cateringPackages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackagesFromJSON)(jsonValue));
        });
    }
    /**
     * Update a Catering Package which already exists on the block. <p><strong>OperationId:</strong>changeCateringPackages</p>
     * Update a Catering packages
     */
    changeCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update the Event Resources by specifying the block ID, and event ID in the request. <p><strong>OperationId:</strong>changeEventResourceByMenu</p>
     * Update Event Resource
     */
    changeEventResourceByMenuRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventResource === null || requestParameters.eventResource === undefined) {
                throw new runtime.RequiredError('eventResource', 'Required parameter requestParameters.eventResource was null or undefined when calling changeEventResourceByMenu.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventResource`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeEventResourceByMenuRequestToJSON)(requestParameters.eventResource),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update the Event Resources by specifying the block ID, and event ID in the request. <p><strong>OperationId:</strong>changeEventResourceByMenu</p>
     * Update Event Resource
     */
    changeEventResourceByMenu(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeEventResourceByMenuRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update an existing Event by using the Event ID.  If you don\'t know the vent ID, use getEvents API to search for an event first. <p><strong>OperationId:</strong>changeEvents</p>
     * Update an Event
     */
    changeEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling changeEvents.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeEvents.');
            }
            if (requestParameters.event === null || requestParameters.event === undefined) {
                throw new runtime.RequiredError('event', 'Required parameter requestParameters.event was null or undefined when calling changeEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeEventsRequestToJSON)(requestParameters.event),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update an existing Event by using the Event ID.  If you don\'t know the vent ID, use getEvents API to search for an event first. <p><strong>OperationId:</strong>changeEvents</p>
     * Update an Event
     */
    changeEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResources</p>
     * Update Events Resources
     */
    changeEventsResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeEventsResources.');
            }
            if (requestParameters.manageEventsResources === null || requestParameters.manageEventsResources === undefined) {
                throw new runtime.RequiredError('manageEventsResources', 'Required parameter requestParameters.manageEventsResources was null or undefined when calling changeEventsResources.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventsResources`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeEventsResourcesRequestToJSON)(requestParameters.manageEventsResources),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ManageEventsResourcesFromJSON)(jsonValue));
        });
    }
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResources</p>
     * Update Events Resources
     */
    changeEventsResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeEventsResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResourcesByChain</p>
     * Update Events Resources by chain
     */
    changeEventsResourcesByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.manageEventsResources === null || requestParameters.manageEventsResources === undefined) {
                throw new runtime.RequiredError('manageEventsResources', 'Required parameter requestParameters.manageEventsResources was null or undefined when calling changeEventsResourcesByChain.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventsResources`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ManageEventsResourcesToJSON)(requestParameters.manageEventsResources),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ManageEventsResourcesFromJSON)(jsonValue));
        });
    }
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResourcesByChain</p>
     * Update Events Resources by chain
     */
    changeEventsResourcesByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeEventsResourcesByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy an existing catering event on a block to new dates on that block.  For example there is a catering Event called Lunch for 1st May, select this event, and copy it to a new date within the block date range.  This will result in a second catering event existing on this block.  You can choose to copy certain elements such as event notes, event resources and so on. <p><strong>OperationId:</strong>copyCateringEvents</p>
     * Copy Catering Event
     */
    copyCateringEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling copyCateringEvents.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyCateringEvents.');
            }
            if (requestParameters.copyCateringEvents === null || requestParameters.copyCateringEvents === undefined) {
                throw new runtime.RequiredError('copyCateringEvents', 'Required parameter requestParameters.copyCateringEvents was null or undefined when calling copyCateringEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/cateringEvents/copy`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyCateringEventsToJSON)(requestParameters.copyCateringEvents),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CopyCateringEventsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Copy an existing catering event on a block to new dates on that block.  For example there is a catering Event called Lunch for 1st May, select this event, and copy it to a new date within the block date range.  This will result in a second catering event existing on this block.  You can choose to copy certain elements such as event notes, event resources and so on. <p><strong>OperationId:</strong>copyCateringEvents</p>
     * Copy Catering Event
     */
    copyCateringEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCateringEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to copy an existing Catering Package one the block to another date on the same block. <p><strong>OperationId:</strong>copyCateringPackage</p>
     * Copy a Catering package
     */
    copyCateringPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringpackageId === null || requestParameters.cateringpackageId === undefined) {
                throw new runtime.RequiredError('cateringpackageId', 'Required parameter requestParameters.cateringpackageId was null or undefined when calling copyCateringPackage.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling copyCateringPackage.');
            }
            if (requestParameters.copyCateringPackage === null || requestParameters.copyCateringPackage === undefined) {
                throw new runtime.RequiredError('copyCateringPackage', 'Required parameter requestParameters.copyCateringPackage was null or undefined when calling copyCateringPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages/{cateringpackageId}/copy`.replace(`{${"cateringpackageId"}}`, encodeURIComponent(String(requestParameters.cateringpackageId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyCateringPackageToJSON)(requestParameters.copyCateringPackage),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CopyCateringPackageResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to copy an existing Catering Package one the block to another date on the same block. <p><strong>OperationId:</strong>copyCateringPackage</p>
     * Copy a Catering package
     */
    copyCateringPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCateringPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to copy one/more existing event resources to one/more events for the same/different block. <p><strong>OperationId:</strong>copyEventResources</p>
     * Copy event resources
     */
    copyEventResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling copyEventResources.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling copyEventResources.');
            }
            if (requestParameters.eventResources === null || requestParameters.eventResources === undefined) {
                throw new runtime.RequiredError('eventResources', 'Required parameter requestParameters.eventResources was null or undefined when calling copyEventResources.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/events/{eventId}/resources/copy`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyEventResourcesRequestToJSON)(requestParameters.eventResources),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventResourcesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to copy one/more existing event resources to one/more events for the same/different block. <p><strong>OperationId:</strong>copyEventResources</p>
     * Copy event resources
     */
    copyEventResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyEventResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackage</p>
     * Delete Catering package
     */
    deleteCateringPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling deleteCateringPackage.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling deleteCateringPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackage</p>
     * Delete Catering package
     */
    deleteCateringPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the catering package revenue on a block. <p><strong>OperationId:</strong>deleteCateringPackageRevenue</p>
     * Delete Catering package revenue
     */
    deleteCateringPackageRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.cateringPackageEventId !== undefined) {
                queryParameters['cateringPackageEventId'] = requestParameters.cateringPackageEventId;
            }
            if (requestParameters.cateringPackageRevenueType !== undefined) {
                queryParameters['cateringPackageRevenueType'] = requestParameters.cateringPackageRevenueType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringPackagesRevenue`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete the catering package revenue on a block. <p><strong>OperationId:</strong>deleteCateringPackageRevenue</p>
     * Delete Catering package revenue
     */
    deleteCateringPackageRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete one or more catering package(s)
     */
    deleteCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling deleteCateringPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackages.');
            }
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling deleteCateringPackages.');
            }
            const queryParameters = {};
            if (requestParameters.cateringPackageId) {
                queryParameters['cateringPackageId'] = requestParameters.cateringPackageId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/cateringPackages`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete one or more catering package(s)
     */
    deleteCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will delete an existing event <p><strong>OperationId:</strong>deleteEvents</p>
     * Delete an Event
     */
    deleteEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling deleteEvents.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteEvents.');
            }
            const queryParameters = {};
            if (requestParameters.includeSubEvents !== undefined) {
                queryParameters['includeSubEvents'] = requestParameters.includeSubEvents;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will delete an existing event <p><strong>OperationId:</strong>deleteEvents</p>
     * Delete an Event
     */
    deleteEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getBlockPostingAccountReservations</p>
     * Get Catering Event postings
     */
    getBlockPostingAccountReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockPostingAccountReservations.');
            }
            const queryParameters = {};
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fetchBlockPostingAccountReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockPostingAccountReservationsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getBlockPostingAccountReservations</p>
     * Get Catering Event postings
     */
    getBlockPostingAccountReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockPostingAccountReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the catering event changes on an event. <p><strong>OperationId:</strong>getCateringEventChanges</p>
     * Get Catering Event changes
     */
    getCateringEventChangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringEventChanges.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.fetchInstructions !== undefined) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.eventId) {
                queryParameters['eventId'] = requestParameters.eventId;
            }
            if (requestParameters.eventIdContext) {
                queryParameters['eventIdContext'] = requestParameters.eventIdContext;
            }
            if (requestParameters.eventIdType) {
                queryParameters['eventIdType'] = requestParameters.eventIdType;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.changeSource) {
                queryParameters['changeSource'] = requestParameters.changeSource;
            }
            if (requestParameters.action) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.resourceDescription !== undefined) {
                queryParameters['resourceDescription'] = requestParameters.resourceDescription;
            }
            if (requestParameters.fieldNameListCode) {
                queryParameters['fieldNameListCode'] = requestParameters.fieldNameListCode;
            }
            if (requestParameters.userListCode) {
                queryParameters['userListCode'] = requestParameters.userListCode;
            }
            if (requestParameters.eventDate !== undefined) {
                queryParameters['eventDate'] = requestParameters.eventDate.toISOString().substring(0, 10);
            }
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.priorStatus !== undefined) {
                queryParameters['priorStatus'] = requestParameters.priorStatus;
            }
            if (requestParameters.currentStatus !== undefined) {
                queryParameters['currentStatus'] = requestParameters.currentStatus;
            }
            if (requestParameters.revenueTypeListCode) {
                queryParameters['revenueTypeListCode'] = requestParameters.revenueTypeListCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringEventChanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringEventChangesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the catering event changes on an event. <p><strong>OperationId:</strong>getCateringEventChanges</p>
     * Get Catering Event changes
     */
    getCateringEventChanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringEventChangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getCateringEventPostings</p>
     * Get Catering Event postings
     */
    getCateringEventPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling getCateringEventPostings.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringEventPostings.');
            }
            const queryParameters = {};
            if (requestParameters.includeSubEvents !== undefined) {
                queryParameters['includeSubEvents'] = requestParameters.includeSubEvents;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}/cateringEventPostings`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringEventPostingsDetailFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getCateringEventPostings</p>
     * Get Catering Event postings
     */
    getCateringEventPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringEventPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve catering package revenue on a block <p><strong>OperationId:</strong>getCateringPackageRevenue</p>
     * Get Catering package revenue
     */
    getCateringPackageRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringpackageId === null || requestParameters.cateringpackageId === undefined) {
                throw new runtime.RequiredError('cateringpackageId', 'Required parameter requestParameters.cateringpackageId was null or undefined when calling getCateringPackageRevenue.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getCateringPackageRevenue.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.blockIdContext !== undefined) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.packageIdContext !== undefined) {
                queryParameters['packageIdContext'] = requestParameters.packageIdContext;
            }
            if (requestParameters.packageIdType !== undefined) {
                queryParameters['packageIdType'] = requestParameters.packageIdType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages/{cateringpackageId}/revenue`.replace(`{${"cateringpackageId"}}`, encodeURIComponent(String(requestParameters.cateringpackageId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackageRevenueFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve catering package revenue on a block <p><strong>OperationId:</strong>getCateringPackageRevenue</p>
     * Get Catering package revenue
     */
    getCateringPackageRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackageRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the cateringPackages on the block <p><strong>OperationId:</strong>getCateringPackages</p>
     * Get Catering packages
     */
    getCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getCateringPackages.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.blockIdContext !== undefined) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackagesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the cateringPackages on the block <p><strong>OperationId:</strong>getCateringPackages</p>
     * Get Catering packages
     */
    getCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEventRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling getEvent.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEvent.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEvent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendar</p>
     * Get the event calendar
     */
    getEventCalendarRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEventCalendar.');
            }
            const queryParameters = {};
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.includeHidden !== undefined) {
                queryParameters['includeHidden'] = requestParameters.includeHidden;
            }
            if (requestParameters.includeOpportunities !== undefined) {
                queryParameters['includeOpportunities'] = requestParameters.includeOpportunities;
            }
            if (requestParameters.showAvailableRooms !== undefined) {
                queryParameters['showAvailableRooms'] = requestParameters.showAvailableRooms;
            }
            if (requestParameters.showReservations !== undefined) {
                queryParameters['showReservations'] = requestParameters.showReservations;
            }
            if (requestParameters.isHotelSort !== undefined) {
                queryParameters['isHotelSort'] = requestParameters.isHotelSort;
            }
            if (requestParameters.isSortDescending !== undefined) {
                queryParameters['isSortDescending'] = requestParameters.isSortDescending;
            }
            if (requestParameters.pageIndex !== undefined) {
                queryParameters['pageIndex'] = requestParameters.pageIndex;
            }
            if (requestParameters.recordsPerPage !== undefined) {
                queryParameters['recordsPerPage'] = requestParameters.recordsPerPage;
            }
            if (requestParameters.sortingBy !== undefined) {
                queryParameters['sortingBy'] = requestParameters.sortingBy;
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.functionSpaceDetails) {
                queryParameters['functionSpaceDetails'] = requestParameters.functionSpaceDetails;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.setupStyle !== undefined) {
                queryParameters['setupStyle'] = requestParameters.setupStyle;
            }
            if (requestParameters.location !== undefined) {
                queryParameters['location'] = requestParameters.location;
            }
            if (requestParameters.eventLabel !== undefined) {
                queryParameters['eventLabel'] = requestParameters.eventLabel;
            }
            if (requestParameters.spaceType !== undefined) {
                queryParameters['spaceType'] = requestParameters.spaceType;
            }
            if (requestParameters.areaMeasurement !== undefined) {
                queryParameters['areaMeasurement'] = requestParameters.areaMeasurement;
            }
            if (requestParameters.minimumArea !== undefined) {
                queryParameters['minimumArea'] = requestParameters.minimumArea;
            }
            if (requestParameters.display !== undefined) {
                queryParameters['display'] = requestParameters.display;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from;
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventcalendar`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventCalendarFromJSON)(jsonValue));
        });
    }
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendar</p>
     * Get the event calendar
     */
    getEventCalendar(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventCalendarRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendarMultipleHotelIds</p>
     * Get the event calendar for Multiple Properties
     */
    getEventCalendarMultipleHotelIdsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.includeHidden !== undefined) {
                queryParameters['includeHidden'] = requestParameters.includeHidden;
            }
            if (requestParameters.includeOpportunities !== undefined) {
                queryParameters['includeOpportunities'] = requestParameters.includeOpportunities;
            }
            if (requestParameters.showAvailableRooms !== undefined) {
                queryParameters['showAvailableRooms'] = requestParameters.showAvailableRooms;
            }
            if (requestParameters.showReservations !== undefined) {
                queryParameters['showReservations'] = requestParameters.showReservations;
            }
            if (requestParameters.isHotelSort !== undefined) {
                queryParameters['isHotelSort'] = requestParameters.isHotelSort;
            }
            if (requestParameters.isSortDescending !== undefined) {
                queryParameters['isSortDescending'] = requestParameters.isSortDescending;
            }
            if (requestParameters.pageIndex !== undefined) {
                queryParameters['pageIndex'] = requestParameters.pageIndex;
            }
            if (requestParameters.recordsPerPage !== undefined) {
                queryParameters['recordsPerPage'] = requestParameters.recordsPerPage;
            }
            if (requestParameters.sortingBy !== undefined) {
                queryParameters['sortingBy'] = requestParameters.sortingBy;
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.functionSpaceDetails) {
                queryParameters['functionSpaceDetails'] = requestParameters.functionSpaceDetails;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.setupStyle !== undefined) {
                queryParameters['setupStyle'] = requestParameters.setupStyle;
            }
            if (requestParameters.location !== undefined) {
                queryParameters['location'] = requestParameters.location;
            }
            if (requestParameters.eventLabel !== undefined) {
                queryParameters['eventLabel'] = requestParameters.eventLabel;
            }
            if (requestParameters.spaceType !== undefined) {
                queryParameters['spaceType'] = requestParameters.spaceType;
            }
            if (requestParameters.areaMeasurement !== undefined) {
                queryParameters['areaMeasurement'] = requestParameters.areaMeasurement;
            }
            if (requestParameters.minimumArea !== undefined) {
                queryParameters['minimumArea'] = requestParameters.minimumArea;
            }
            if (requestParameters.display !== undefined) {
                queryParameters['display'] = requestParameters.display;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from;
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventcalendar`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventCalendarFromJSON)(jsonValue));
        });
    }
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendarMultipleHotelIds</p>
     * Get the event calendar for Multiple Properties
     */
    getEventCalendarMultipleHotelIds(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventCalendarMultipleHotelIdsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the event item split quantity for an event. <p><strong>OperationId:</strong>getEventItemSplitQuantity</p>
     * Get Event item split quantity
     */
    getEventItemSplitQuantityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling getEventItemSplitQuantity.');
            }
            const queryParameters = {};
            if (requestParameters.eventPrimaryHotelId !== undefined) {
                queryParameters['eventPrimaryHotelId'] = requestParameters.eventPrimaryHotelId;
            }
            if (requestParameters.eventItemId !== undefined) {
                queryParameters['eventItemId'] = requestParameters.eventItemId;
            }
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate;
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate;
            }
            if (requestParameters.itemId !== undefined) {
                queryParameters['itemId'] = requestParameters.itemId;
            }
            if (requestParameters.quantity !== undefined) {
                queryParameters['quantity'] = requestParameters.quantity;
            }
            if (requestParameters.isExcludeNonDeduct !== undefined) {
                queryParameters['isExcludeNonDeduct'] = requestParameters.isExcludeNonDeduct;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/events/{eventId}/splitQuantity`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the event item split quantity for an event. <p><strong>OperationId:</strong>getEventItemSplitQuantity</p>
     * Get Event item split quantity
     */
    getEventItemSplitQuantity(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventItemSplitQuantityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a resource that exist for an Event, using block ID, event ID and resource ID as parameters in the path  This will give you information on the quantity, expected revenue, discounts, notes, and so on for that resource. <p><strong>OperationId:</strong>getEventResourceByMenu</p>
     * Get Resources for an Event
     */
    getEventResourceByMenuRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
                throw new runtime.RequiredError('resourceId', 'Required parameter requestParameters.resourceId was null or undefined when calling getEventResourceByMenu.');
            }
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling getEventResourceByMenu.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getEventResourceByMenu.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.blockIdContext !== undefined) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.eventIdContext !== undefined) {
                queryParameters['eventIdContext'] = requestParameters.eventIdContext;
            }
            if (requestParameters.eventIdType !== undefined) {
                queryParameters['eventIdType'] = requestParameters.eventIdType;
            }
            if (requestParameters.resourceIdContext !== undefined) {
                queryParameters['resourceIdContext'] = requestParameters.resourceIdContext;
            }
            if (requestParameters.resourceIdType !== undefined) {
                queryParameters['resourceIdType'] = requestParameters.resourceIdType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/events/{eventId}/resources/{resourceId}`.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters.resourceId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a resource that exist for an Event, using block ID, event ID and resource ID as parameters in the path  This will give you information on the quantity, expected revenue, discounts, notes, and so on for that resource. <p><strong>OperationId:</strong>getEventResourceByMenu</p>
     * Get Resources for an Event
     */
    getEventResourceByMenu(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventResourceByMenuRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.eventId) {
                queryParameters['eventId'] = requestParameters.eventId;
            }
            if (requestParameters.category) {
                queryParameters['category'] = requestParameters.category;
            }
            if (requestParameters.name) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.attachedProfileId) {
                queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.eventStatusCodes) {
                queryParameters['eventStatusCodes'] = requestParameters.eventStatusCodes;
            }
            if (requestParameters.eventTypeCodes) {
                queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
            }
            if (requestParameters.functionSpaceCodes) {
                queryParameters['functionSpaceCodes'] = requestParameters.functionSpaceCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeAlternateEvents !== undefined) {
                queryParameters['includeAlternateEvents'] = requestParameters.includeAlternateEvents;
            }
            if (requestParameters.includeOpportunities !== undefined) {
                queryParameters['includeOpportunities'] = requestParameters.includeOpportunities;
            }
            if (requestParameters.includeSubEvents !== undefined) {
                queryParameters['includeSubEvents'] = requestParameters.includeSubEvents;
            }
            if (requestParameters.cateringEventOrderBy !== undefined) {
                queryParameters['cateringEventOrderBy'] = requestParameters.cateringEventOrderBy;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/events`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventsMultipleHotelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEventsOneHotel.');
            }
            const queryParameters = {};
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.eventId) {
                queryParameters['eventId'] = requestParameters.eventId;
            }
            if (requestParameters.attachedProfileId !== undefined) {
                queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.eventStatusCodes) {
                queryParameters['eventStatusCodes'] = requestParameters.eventStatusCodes;
            }
            if (requestParameters.eventTypeCodes) {
                queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
            }
            if (requestParameters.functionSpaceCodes) {
                queryParameters['functionSpaceCodes'] = requestParameters.functionSpaceCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeAlternateEvents !== undefined) {
                queryParameters['includeAlternateEvents'] = requestParameters.includeAlternateEvents;
            }
            if (requestParameters.includeOpportunities !== undefined) {
                queryParameters['includeOpportunities'] = requestParameters.includeOpportunities;
            }
            if (requestParameters.includeSubEvents !== undefined) {
                queryParameters['includeSubEvents'] = requestParameters.includeSubEvents;
            }
            if (requestParameters.cateringEventOrderBy !== undefined) {
                queryParameters['cateringEventOrderBy'] = requestParameters.cateringEventOrderBy;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventsOneHotelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Resources are the items and menus the property provides as part of its events offerings. Use this API to retrieve the Event resources as per your requested parameters. <p><strong>OperationId:</strong>getEventsResources</p>
     * Get Event Resources
     */
    getEventsResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEventsResources.');
            }
            const queryParameters = {};
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.eventIds) {
                queryParameters['eventIds'] = requestParameters.eventIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventsResources`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventsResourcesFromJSON)(jsonValue));
        });
    }
    /**
     * Event Resources are the items and menus the property provides as part of its events offerings. Use this API to retrieve the Event resources as per your requested parameters. <p><strong>OperationId:</strong>getEventsResources</p>
     * Get Event Resources
     */
    getEventsResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventsResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Find the availability of a properties function space. <p><strong>OperationId:</strong>getFunctionSpaceAvailability</p>
     * Get hotel\'s function space availability
     */
    getFunctionSpaceAvailabilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFunctionSpaceAvailability.');
            }
            const queryParameters = {};
            if (requestParameters.checkInventory !== undefined) {
                queryParameters['checkInventory'] = requestParameters.checkInventory;
            }
            if (requestParameters.eventEndDate !== undefined) {
                queryParameters['eventEndDate'] = requestParameters.eventEndDate;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.physicalRoom !== undefined) {
                queryParameters['physicalRoom'] = requestParameters.physicalRoom;
            }
            if (requestParameters.showForceAlternate !== undefined) {
                queryParameters['showForceAlternate'] = requestParameters.showForceAlternate;
            }
            if (requestParameters.eventStartDate !== undefined) {
                queryParameters['eventStartDate'] = requestParameters.eventStartDate;
            }
            if (requestParameters.roomCodes) {
                queryParameters['roomCodes'] = requestParameters.roomCodes;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.spaceType !== undefined) {
                queryParameters['spaceType'] = requestParameters.spaceType;
            }
            if (requestParameters.functionSpaceWildcard !== undefined) {
                queryParameters['functionSpaceWildcard'] = requestParameters.functionSpaceWildcard;
            }
            if (requestParameters.floorCodes) {
                queryParameters['floorCodes'] = requestParameters.floorCodes;
            }
            if (requestParameters.locationCodes) {
                queryParameters['locationCodes'] = requestParameters.locationCodes;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.functionSpaceSearchMode !== undefined) {
                queryParameters['functionSpaceSearchMode'] = requestParameters.functionSpaceSearchMode;
            }
            if (requestParameters.functionSpaceAdditionalSearchMode !== undefined) {
                queryParameters['functionSpaceAdditionalSearchMode'] = requestParameters.functionSpaceAdditionalSearchMode;
            }
            if (requestParameters.attendeesFrom !== undefined) {
                queryParameters['attendeesFrom'] = requestParameters.attendeesFrom;
            }
            if (requestParameters.attendeesTo !== undefined) {
                queryParameters['attendeesTo'] = requestParameters.attendeesTo;
            }
            if (requestParameters.areaFrom !== undefined) {
                queryParameters['areaFrom'] = requestParameters.areaFrom;
            }
            if (requestParameters.areaTo !== undefined) {
                queryParameters['areaTo'] = requestParameters.areaTo;
            }
            if (requestParameters.setupCodes) {
                queryParameters['setupCodes'] = requestParameters.setupCodes;
            }
            if (requestParameters.masterRateCode !== undefined) {
                queryParameters['masterRateCode'] = requestParameters.masterRateCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.masterSetupCode !== undefined) {
                queryParameters['masterSetupCode'] = requestParameters.masterSetupCode;
            }
            if (requestParameters.setupTime !== undefined) {
                queryParameters['setupTime'] = requestParameters.setupTime;
            }
            if (requestParameters.setdownTime !== undefined) {
                queryParameters['setdownTime'] = requestParameters.setdownTime;
            }
            if (requestParameters.resvNameId !== undefined) {
                queryParameters['resvNameId'] = requestParameters.resvNameId;
            }
            if (requestParameters.eventTypeCodes) {
                queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionalSpace`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceAvailabilityDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Find the availability of a properties function space. <p><strong>OperationId:</strong>getFunctionSpaceAvailability</p>
     * Get hotel\'s function space availability
     */
    getFunctionSpaceAvailability(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpaceAvailabilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to see if events are booked into the same space at the same or overlapping time. <p><strong>OperationId:</strong>getSharedFunctionSpaceEvents</p>
     * Get shared function space events
     */
    getSharedFunctionSpaceEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSharedFunctionSpaceEvents.');
            }
            const queryParameters = {};
            if (requestParameters.functionSpaceCode !== undefined) {
                queryParameters['functionSpaceCode'] = requestParameters.functionSpaceCode;
            }
            if (requestParameters.startDateTime !== undefined) {
                queryParameters['startDateTime'] = requestParameters.startDateTime;
            }
            if (requestParameters.endDateTime !== undefined) {
                queryParameters['endDateTime'] = requestParameters.endDateTime;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionalSpaceEvents`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceEventsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to see if events are booked into the same space at the same or overlapping time. <p><strong>OperationId:</strong>getSharedFunctionSpaceEvents</p>
     * Get shared function space events
     */
    getSharedFunctionSpaceEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSharedFunctionSpaceEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Search for waitlisted events for a specified property.  You can narrow down the results by using filters in the request. <p><strong>OperationId:</strong>getWaitlistedEvents</p>
     * Retreve Waitlisted Events
     */
    getWaitlistedEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getWaitlistedEvents.');
            }
            const queryParameters = {};
            if (requestParameters.functionSpaceCode) {
                queryParameters['functionSpaceCode'] = requestParameters.functionSpaceCode;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext !== undefined) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.startDateTime !== undefined) {
                queryParameters['startDateTime'] = requestParameters.startDateTime;
            }
            if (requestParameters.endDateTime !== undefined) {
                queryParameters['endDateTime'] = requestParameters.endDateTime;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/waitListedEvents`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WaitlistedEventsFromJSON)(jsonValue));
        });
    }
    /**
     * Search for waitlisted events for a specified property.  You can narrow down the results by using filters in the request. <p><strong>OperationId:</strong>getWaitlistedEvents</p>
     * Retreve Waitlisted Events
     */
    getWaitlistedEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWaitlistedEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>manageAlternateEvents</p>
     * Manage alternate events.
     */
    manageAlternateEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.manageAlternateEvents === null || requestParameters.manageAlternateEvents === undefined) {
                throw new runtime.RequiredError('manageAlternateEvents', 'Required parameter requestParameters.manageAlternateEvents was null or undefined when calling manageAlternateEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/alternateEvents`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ManageAlternateEventsRequestToJSON)(requestParameters.manageAlternateEvents),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ManageAlternateEventsStatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>manageAlternateEvents</p>
     * Manage alternate events.
     */
    manageAlternateEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.manageAlternateEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update and manage the catering event changes on an event. <p><strong>OperationId:</strong>manageCateringEventPostings</p>
     * Manage Catering Event postings
     */
    manageCateringEventPostingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling manageCateringEventPostings.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling manageCateringEventPostings.');
            }
            if (requestParameters.cateringEventPostings === null || requestParameters.cateringEventPostings === undefined) {
                throw new runtime.RequiredError('cateringEventPostings', 'Required parameter requestParameters.cateringEventPostings was null or undefined when calling manageCateringEventPostings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}/cateringEventPostings`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ManageCateringEventPostingsRequestToJSON)(requestParameters.cateringEventPostings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringEventPostingsFromJSON)(jsonValue));
        });
    }
    /**
     * Update and manage the catering event changes on an event. <p><strong>OperationId:</strong>manageCateringEventPostings</p>
     * Manage Catering Event postings
     */
    manageCateringEventPostings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.manageCateringEventPostingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can update the waitlisted events such as changing priority of the events on the waitlist. <p><strong>OperationId:</strong>manageWaitlistedEvents</p>
     * Manage Waitlisted Events
     */
    manageWaitlistedEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling manageWaitlistedEvents.');
            }
            if (requestParameters.manageWaitlistedEvents === null || requestParameters.manageWaitlistedEvents === undefined) {
                throw new runtime.RequiredError('manageWaitlistedEvents', 'Required parameter requestParameters.manageWaitlistedEvents was null or undefined when calling manageWaitlistedEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/waitListedEvents`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ManageWaitlistedEventsRequestToJSON)(requestParameters.manageWaitlistedEvents),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WaitlistedEventsFromJSON)(jsonValue));
        });
    }
    /**
     * You can update the waitlisted events such as changing priority of the events on the waitlist. <p><strong>OperationId:</strong>manageWaitlistedEvents</p>
     * Manage Waitlisted Events
     */
    manageWaitlistedEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.manageWaitlistedEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to move one/more existing event resources to an event for the same/different block. <p><strong>OperationId:</strong>moveEventResources</p>
     * Move event resources
     */
    moveEventResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling moveEventResources.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling moveEventResources.');
            }
            if (requestParameters.eventResources === null || requestParameters.eventResources === undefined) {
                throw new runtime.RequiredError('eventResources', 'Required parameter requestParameters.eventResources was null or undefined when calling moveEventResources.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/events/{eventId}/resources/move`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyEventResourcesRequestToJSON)(requestParameters.eventResources),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventResourcesResponseFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to move one/more existing event resources to an event for the same/different block. <p><strong>OperationId:</strong>moveEventResources</p>
     * Move event resources
     */
    moveEventResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.moveEventResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add an available catering package onto your block. <p><strong>OperationId:</strong>postCateringPackage</p>
     * Add catering packages to a block
     */
    postCateringPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling postCateringPackage.');
            }
            if (requestParameters.blockCateringPackage === null || requestParameters.blockCateringPackage === undefined) {
                throw new runtime.RequiredError('blockCateringPackage', 'Required parameter requestParameters.blockCateringPackage was null or undefined when calling postCateringPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockCateringPackageToJSON)(requestParameters.blockCateringPackage),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockCateringPackageDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Add an available catering package onto your block. <p><strong>OperationId:</strong>postCateringPackage</p>
     * Add catering packages to a block
     */
    postCateringPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add catering package revenue to a block <p><strong>OperationId:</strong>postCateringPackageRevenue</p>
     * Add catering package revenue to a block
     */
    postCateringPackageRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringpackageId === null || requestParameters.cateringpackageId === undefined) {
                throw new runtime.RequiredError('cateringpackageId', 'Required parameter requestParameters.cateringpackageId was null or undefined when calling postCateringPackageRevenue.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling postCateringPackageRevenue.');
            }
            if (requestParameters.cateringPackageRevenue === null || requestParameters.cateringPackageRevenue === undefined) {
                throw new runtime.RequiredError('cateringPackageRevenue', 'Required parameter requestParameters.cateringPackageRevenue was null or undefined when calling postCateringPackageRevenue.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blocks/{blockId}/cateringPackages/{cateringpackageId}/revenue`.replace(`{${"cateringpackageId"}}`, encodeURIComponent(String(requestParameters.cateringpackageId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringPackageRevenueToJSON)(requestParameters.cateringPackageRevenue),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Add catering package revenue to a block <p><strong>OperationId:</strong>postCateringPackageRevenue</p>
     * Add catering package revenue to a block
     */
    postCateringPackageRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringPackageRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows the creation of a catering event with event type, description, start date / time. end date / time, attendees, function space, setup style, rate, and more. A catering event must always be linked to a block. It cannot exist on its own. <p><strong>OperationId:</strong>postEvents</p>
     * Create an Event
     */
    postEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.event === null || requestParameters.event === undefined) {
                throw new runtime.RequiredError('event', 'Required parameter requestParameters.event was null or undefined when calling postEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/events`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostEventsRequestToJSON)(requestParameters.event),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows the creation of a catering event with event type, description, start date / time. end date / time, attendees, function space, setup style, rate, and more. A catering event must always be linked to a block. It cannot exist on its own. <p><strong>OperationId:</strong>postEvents</p>
     * Create an Event
     */
    postEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to add Events for an Opportunity Block. <p><strong>OperationId:</strong>postOpportunityEvents</p>
     * Create Events for Opportunity Block
     */
    postOpportunityEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.opportunityEvents === null || requestParameters.opportunityEvents === undefined) {
                throw new runtime.RequiredError('opportunityEvents', 'Required parameter requestParameters.opportunityEvents was null or undefined when calling postOpportunityEvents.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/opportunityEvents`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OpportunityEventsToJSON)(requestParameters.opportunityEvents),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to add Events for an Opportunity Block. <p><strong>OperationId:</strong>postOpportunityEvents</p>
     * Create Events for Opportunity Block
     */
    postOpportunityEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postOpportunityEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to add a configured resource to a Catering Event. The Catering Event ID and Quick Insert number of a Catering Menu or Miscellaneous Item or a Template name must be provided. <p><strong>OperationId:</strong>postQuickInsertResources</p>
     * Add Resource to an Event in a hotel by ID
     */
    postQuickInsertResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.quickInsertId === null || requestParameters.quickInsertId === undefined) {
                throw new runtime.RequiredError('quickInsertId', 'Required parameter requestParameters.quickInsertId was null or undefined when calling postQuickInsertResources.');
            }
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling postQuickInsertResources.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postQuickInsertResources.');
            }
            if (requestParameters.quickInsertResources === null || requestParameters.quickInsertResources === undefined) {
                throw new runtime.RequiredError('quickInsertResources', 'Required parameter requestParameters.quickInsertResources was null or undefined when calling postQuickInsertResources.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventId}/eventResources/{quickInsertId}`.replace(`{${"quickInsertId"}}`, encodeURIComponent(String(requestParameters.quickInsertId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.QuickInsertResourcesToJSON)(requestParameters.quickInsertResources),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QuickInsertResourceStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this to add a configured resource to a Catering Event. The Catering Event ID and Quick Insert number of a Catering Menu or Miscellaneous Item or a Template name must be provided. <p><strong>OperationId:</strong>postQuickInsertResources</p>
     * Add Resource to an Event in a hotel by ID
     */
    postQuickInsertResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postQuickInsertResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.EventManagementApi = EventManagementApi;
/**
 * @export
 */
exports.GetCateringEventChangesFetchInstructionsEnum = {
    EventChanges: 'EventChanges',
    StatusChanges: 'StatusChanges',
    RevenueChanges: 'RevenueChanges',
    AllChanges: 'AllChanges'
};
/**
 * @export
 */
exports.GetCateringEventChangesChangeSourceEnum = {
    Attendee: 'Attendee',
    Event: 'Event',
    Item: 'Item',
    Menu: 'Menu',
    Menuitem: 'Menuitem',
    Space: 'Space'
};
/**
 * @export
 */
exports.GetCateringEventChangesActionEnum = {
    New: 'New',
    Update: 'Update',
    Delete: 'Delete',
    Inactivate: 'Inactivate'
};
/**
 * @export
 */
exports.GetCateringEventPostingsFetchInstructionsEnum = {
    EventDetails: 'EventDetails',
    BlocksInfo: 'BlocksInfo',
    Indicators: 'Indicators',
    Notes: 'Notes',
    SubEventsInfo: 'SubEventsInfo',
    AlternateEventsInfo: 'AlternateEventsInfo',
    MasterEventInfo: 'MasterEventInfo',
    Revenues: 'Revenues',
    IncludeInactiveSubEventsInfo: 'IncludeInactiveSubEventsInfo',
    IncludeInactiveMasterEventInfo: 'IncludeInactiveMasterEventInfo',
    ActualEventDetails: 'ActualEventDetails',
    EligibleMasterEventDetails: 'EligibleMasterEventDetails'
};
/**
 * @export
 */
exports.GetCateringPackageRevenueFetchInstructionsEnum = {
    BlockInfo: 'BlockInfo',
    Pricing: 'Pricing'
};
/**
 * @export
 */
exports.GetEventFetchInstructionsEnum = {
    EventDetails: 'EventDetails',
    BlocksInfo: 'BlocksInfo',
    Indicators: 'Indicators',
    Notes: 'Notes',
    AlternateEventsInfo: 'AlternateEventsInfo',
    SubEventsInfo: 'SubEventsInfo',
    MasterEventInfo: 'MasterEventInfo',
    Revenues: 'Revenues',
    IncludeInactiveSubEventsInfo: 'IncludeInactiveSubEventsInfo',
    IncludeInactiveMasterEventInfo: 'IncludeInactiveMasterEventInfo',
    ActualEventDetails: 'ActualEventDetails',
    EligibleMasterEventDetails: 'EligibleMasterEventDetails'
};
/**
 * @export
 */
exports.GetEventCalendarSortingByEnum = {
    Name: 'Name',
    AttendeeCapacity: 'AttendeeCapacity',
    AreaSize: 'AreaSize',
    CustomOrder1: 'CustomOrder1',
    CustomOrder2: 'CustomOrder2',
    CustomOrder3: 'CustomOrder3'
};
/**
 * @export
 */
exports.GetEventCalendarAreaMeasurementEnum = {
    Sqft: 'Sqft',
    Sqm: 'Sqm'
};
/**
 * @export
 */
exports.GetEventCalendarMultipleHotelIdsSortingByEnum = {
    Name: 'Name',
    AttendeeCapacity: 'AttendeeCapacity',
    AreaSize: 'AreaSize',
    CustomOrder1: 'CustomOrder1',
    CustomOrder2: 'CustomOrder2',
    CustomOrder3: 'CustomOrder3'
};
/**
 * @export
 */
exports.GetEventCalendarMultipleHotelIdsAreaMeasurementEnum = {
    Sqft: 'Sqft',
    Sqm: 'Sqm'
};
/**
 * @export
 */
exports.GetEventResourceByMenuFetchInstructionsEnum = {
    BlockInfo: 'BlockInfo',
    Notes: 'Notes'
};
/**
 * @export
 */
exports.GetEventsMultipleHotelsCategoryEnum = {
    Group: 'Group',
    Source: 'Source',
    Agent: 'Agent',
    Contact: 'Contact',
    Company: 'Company',
    Account: 'Account'
};
/**
 * @export
 */
exports.GetEventsMultipleHotelsCateringEventOrderByEnum = {
    StartDateTimeAsc: 'StartDateTimeAsc',
    StartDateTimeMasterSubAsc: 'StartDateTimeMasterSubAsc'
};
/**
 * @export
 */
exports.GetEventsMultipleHotelsFetchInstructionsEnum = {
    EventDetails: 'EventDetails',
    BlocksInfo: 'BlocksInfo',
    Indicators: 'Indicators',
    Notes: 'Notes',
    SubEventsInfo: 'SubEventsInfo',
    AlternateEventsInfo: 'AlternateEventsInfo',
    MasterEventInfo: 'MasterEventInfo',
    Revenues: 'Revenues',
    IncludeInactiveSubEventsInfo: 'IncludeInactiveSubEventsInfo',
    IncludeInactiveMasterEventInfo: 'IncludeInactiveMasterEventInfo',
    ActualEventDetails: 'ActualEventDetails',
    EligibleMasterEventDetails: 'EligibleMasterEventDetails'
};
/**
 * @export
 */
exports.GetEventsOneHotelCateringEventOrderByEnum = {
    StartDateTimeAsc: 'StartDateTimeAsc',
    StartDateTimeMasterSubAsc: 'StartDateTimeMasterSubAsc'
};
/**
 * @export
 */
exports.GetEventsOneHotelFetchInstructionsEnum = {
    EventDetails: 'EventDetails',
    BlocksInfo: 'BlocksInfo',
    Indicators: 'Indicators',
    Notes: 'Notes',
    SubEventsInfo: 'SubEventsInfo',
    AlternateEventsInfo: 'AlternateEventsInfo',
    MasterEventInfo: 'MasterEventInfo',
    Revenues: 'Revenues',
    IncludeInactiveSubEventsInfo: 'IncludeInactiveSubEventsInfo',
    IncludeInactiveMasterEventInfo: 'IncludeInactiveMasterEventInfo',
    ActualEventDetails: 'ActualEventDetails',
    EligibleMasterEventDetails: 'EligibleMasterEventDetails'
};
/**
 * @export
 */
exports.GetFunctionSpaceAvailabilityFetchInstructionsEnum = {
    FunctionSpaceCount: 'FunctionSpaceCount'
};
/**
 * @export
 */
exports.GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum = {
    Share: 'Share',
    Noshare: 'Noshare',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum = {
    Individual: 'Individual',
    Combo: 'Combo',
    Both: 'Both'
};
