/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BlockCateringPackageDetails, BlockPostingAccountReservationsInfo, CateringEventChanges, CateringEventPostings, CateringEventPostingsDetail, CateringEventsBulkUpdateRequest, CateringEventsBulkUpdateStatus, CateringPackageRevenue, CateringPackages, ChangeCateringPackageRevenueRequest, ChangeCateringPackagesRequest, ChangeEventResourceByMenuRequest, ChangeEventsRequest, ChangeEventsResourcesByChainRequest, ChangeEventsResourcesRequest, CopyCateringEventsRequest, CopyCateringEventsResponse, CopyCateringPackageRequest, CopyCateringPackageResponse, CopyEventResourcesRequest, Event, EventCalendar, EventResource, EventResourcesResponse, Events, EventsResources, FunctionSpaceAvailabilityDetails, FunctionSpaceEvents, ManageAlternateEventsRequest, ManageAlternateEventsStatus, ManageCateringEventPostingsRequest, ManageEventsResources, ManageWaitlistedEventsRequest, PostCateringPackageRequest, PostCateringPackageRevenueRequest, PostEventsRequest, PostOpportunityEventsRequest, PostQuickInsertResourcesRequest, QuickInsertResourceStatus, Status, WaitlistedEvents } from '../models';
export interface CateringEventsBulkUpdateOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringEventsBulkUpdate?: CateringEventsBulkUpdateRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeCateringPackageRevenueOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringPackageRevenue?: ChangeCateringPackageRevenueRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeCateringPackagesOperationRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringPackages?: ChangeCateringPackagesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeEventResourceByMenuOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventResource?: ChangeEventResourceByMenuRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeEventsOperationRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: ChangeEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeEventsResourcesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    manageEventsResources?: ChangeEventsResourcesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeEventsResourcesByChainOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    manageEventsResources?: ChangeEventsResourcesByChainRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyCateringEventsOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyCateringEvents?: CopyCateringEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyCateringPackageOperationRequest {
    cateringpackageId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyCateringPackage?: CopyCateringPackageRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyEventResourcesOperationRequest {
    eventId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventResources?: CopyEventResourcesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageRequest {
    cateringPackageId?: string;
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageRevenueRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    cateringPackageEventId?: string;
    cateringPackageRevenueType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackagesRequest {
    blockId?: string;
    hotelId?: string;
    cateringPackageId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteEventsRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeSubEvents?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockPostingAccountReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringEventChangesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    fetchInstructions?: GetCateringEventChangesFetchInstructionsEnum;
    eventId?: Array<string>;
    eventIdContext?: Array<string>;
    eventIdType?: Array<string>;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    changeSource?: Set<GetCateringEventChangesChangeSourceEnum>;
    action?: Set<GetCateringEventChangesActionEnum>;
    resourceDescription?: string;
    fieldNameListCode?: Array<string>;
    userListCode?: Array<string>;
    eventDate?: Date;
    eventEndDate?: Date;
    eventStartDate?: Date;
    priorStatus?: string;
    currentStatus?: string;
    revenueTypeListCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringEventPostingsRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeSubEvents?: boolean;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    fetchInstructions?: Set<GetCateringEventPostingsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackageRevenueRequest {
    cateringpackageId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idExtension?: number;
    blockIdContext?: string;
    blockIdType?: string;
    packageIdContext?: string;
    packageIdType?: string;
    fetchInstructions?: Set<GetCateringPackageRevenueFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackagesRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetEventFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventCalendarRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventEndDate?: Date;
    includeHidden?: boolean;
    includeOpportunities?: boolean;
    showAvailableRooms?: boolean;
    showReservations?: boolean;
    isHotelSort?: boolean;
    isSortDescending?: boolean;
    pageIndex?: number;
    recordsPerPage?: number;
    sortingBy?: GetEventCalendarSortingByEnum;
    eventStartDate?: Date;
    functionSpaceDetails?: Array<string>;
    status?: Array<string>;
    setupStyle?: string;
    location?: string;
    eventLabel?: string;
    spaceType?: string;
    areaMeasurement?: GetEventCalendarAreaMeasurementEnum;
    minimumArea?: number;
    display?: string;
    from?: number;
    to?: number;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventCalendarMultipleHotelIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventEndDate?: Date;
    includeHidden?: boolean;
    includeOpportunities?: boolean;
    showAvailableRooms?: boolean;
    showReservations?: boolean;
    isHotelSort?: boolean;
    isSortDescending?: boolean;
    pageIndex?: number;
    recordsPerPage?: number;
    sortingBy?: GetEventCalendarMultipleHotelIdsSortingByEnum;
    eventStartDate?: Date;
    functionSpaceDetails?: Array<string>;
    status?: Array<string>;
    setupStyle?: string;
    location?: string;
    eventLabel?: string;
    spaceType?: string;
    areaMeasurement?: GetEventCalendarMultipleHotelIdsAreaMeasurementEnum;
    minimumArea?: number;
    display?: string;
    from?: number;
    to?: number;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventItemSplitQuantityRequest {
    eventId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventPrimaryHotelId?: string;
    eventItemId?: string;
    eventEndDate?: string;
    eventStartDate?: string;
    itemId?: string;
    quantity?: number;
    isExcludeNonDeduct?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventResourceByMenuRequest {
    resourceId?: string;
    eventId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    eventIdContext?: string;
    eventIdType?: string;
    resourceIdContext?: string;
    resourceIdType?: string;
    fetchInstructions?: Set<GetEventResourceByMenuFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventsMultipleHotelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    eventStartDate?: Date;
    eventEndDate?: Date;
    blockId?: Array<string>;
    eventId?: Array<string>;
    category?: Set<GetEventsMultipleHotelsCategoryEnum>;
    name?: Array<string>;
    attachedProfileId?: Array<string>;
    blockName?: string;
    eventStatusCodes?: Array<string>;
    eventTypeCodes?: Array<string>;
    functionSpaceCodes?: Array<string>;
    includeInactive?: boolean;
    includeAlternateEvents?: boolean;
    includeOpportunities?: boolean;
    includeSubEvents?: boolean;
    cateringEventOrderBy?: GetEventsMultipleHotelsCateringEventOrderByEnum;
    fetchInstructions?: Set<GetEventsMultipleHotelsFetchInstructionsEnum>;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventsOneHotelRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventStartDate?: Date;
    eventEndDate?: Date;
    blockId?: Array<string>;
    eventId?: Array<string>;
    attachedProfileId?: string;
    blockName?: string;
    eventStatusCodes?: Array<string>;
    eventTypeCodes?: Array<string>;
    functionSpaceCodes?: Array<string>;
    includeInactive?: boolean;
    includeAlternateEvents?: boolean;
    includeOpportunities?: boolean;
    includeSubEvents?: boolean;
    cateringEventOrderBy?: GetEventsOneHotelCateringEventOrderByEnum;
    fetchInstructions?: Set<GetEventsOneHotelFetchInstructionsEnum>;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventsResourcesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockId?: string;
    eventIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFunctionSpaceAvailabilityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    checkInventory?: boolean;
    eventEndDate?: string;
    limit?: number;
    offset?: number;
    physicalRoom?: boolean;
    showForceAlternate?: boolean;
    eventStartDate?: string;
    roomCodes?: Array<string>;
    roomType?: string;
    spaceType?: string;
    functionSpaceWildcard?: string;
    floorCodes?: Array<string>;
    locationCodes?: Array<string>;
    fetchInstructions?: Set<GetFunctionSpaceAvailabilityFetchInstructionsEnum>;
    functionSpaceSearchMode?: GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum;
    functionSpaceAdditionalSearchMode?: GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum;
    attendeesFrom?: number;
    attendeesTo?: number;
    areaFrom?: number;
    areaTo?: number;
    setupCodes?: Array<string>;
    masterRateCode?: string;
    amount?: number;
    currencyCode?: string;
    masterSetupCode?: string;
    setupTime?: number;
    setdownTime?: number;
    resvNameId?: number;
    eventTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSharedFunctionSpaceEventsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceCode?: string;
    startDateTime?: string;
    endDateTime?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetWaitlistedEventsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceCode?: Array<string>;
    accountName?: string;
    blockName?: string;
    blockId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    startDateTime?: string;
    endDateTime?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ManageAlternateEventsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    manageAlternateEvents?: ManageAlternateEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ManageCateringEventPostingsOperationRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringEventPostings?: ManageCateringEventPostingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ManageWaitlistedEventsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    manageWaitlistedEvents?: ManageWaitlistedEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface MoveEventResourcesRequest {
    eventId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventResources?: CopyEventResourcesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringPackageOperationRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCateringPackage?: PostCateringPackageRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringPackageRevenueOperationRequest {
    cateringpackageId?: string;
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringPackageRevenue?: PostCateringPackageRevenueRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostEventsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    event?: PostEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostOpportunityEventsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    opportunityEvents?: PostOpportunityEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostQuickInsertResourcesOperationRequest {
    quickInsertId?: string;
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    quickInsertResources?: PostQuickInsertResourcesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class EventManagementApi extends runtime.BaseAPI {
    /**
     * You can use this API to update one/more catering events for the same block <p><strong>OperationId:</strong>cateringEventsBulkUpdate</p>
     * Update multiple catering events
     */
    cateringEventsBulkUpdateRaw(requestParameters: CateringEventsBulkUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringEventsBulkUpdateStatus>>;
    /**
     * You can use this API to update one/more catering events for the same block <p><strong>OperationId:</strong>cateringEventsBulkUpdate</p>
     * Update multiple catering events
     */
    cateringEventsBulkUpdate(requestParameters: CateringEventsBulkUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringEventsBulkUpdateStatus>;
    /**
     * Update the catering package revenue on a block. <p><strong>OperationId:</strong>changeCateringPackageRevenue</p>
     * Update Catering package revenue
     */
    changeCateringPackageRevenueRaw(requestParameters: ChangeCateringPackageRevenueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackageRevenue>>;
    /**
     * Update the catering package revenue on a block. <p><strong>OperationId:</strong>changeCateringPackageRevenue</p>
     * Update Catering package revenue
     */
    changeCateringPackageRevenue(requestParameters: ChangeCateringPackageRevenueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackageRevenue>;
    /**
     * Update a Catering Package which already exists on the block. <p><strong>OperationId:</strong>changeCateringPackages</p>
     * Update a Catering packages
     */
    changeCateringPackagesRaw(requestParameters: ChangeCateringPackagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackages>>;
    /**
     * Update a Catering Package which already exists on the block. <p><strong>OperationId:</strong>changeCateringPackages</p>
     * Update a Catering packages
     */
    changeCateringPackages(requestParameters: ChangeCateringPackagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackages>;
    /**
     * Use this API to update the Event Resources by specifying the block ID, and event ID in the request. <p><strong>OperationId:</strong>changeEventResourceByMenu</p>
     * Update Event Resource
     */
    changeEventResourceByMenuRaw(requestParameters: ChangeEventResourceByMenuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResource>>;
    /**
     * Use this API to update the Event Resources by specifying the block ID, and event ID in the request. <p><strong>OperationId:</strong>changeEventResourceByMenu</p>
     * Update Event Resource
     */
    changeEventResourceByMenu(requestParameters: ChangeEventResourceByMenuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResource>;
    /**
     * You can use this API to update an existing Event by using the Event ID.  If you don\'t know the vent ID, use getEvents API to search for an event first. <p><strong>OperationId:</strong>changeEvents</p>
     * Update an Event
     */
    changeEventsRaw(requestParameters: ChangeEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>>;
    /**
     * You can use this API to update an existing Event by using the Event ID.  If you don\'t know the vent ID, use getEvents API to search for an event first. <p><strong>OperationId:</strong>changeEvents</p>
     * Update an Event
     */
    changeEvents(requestParameters: ChangeEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event>;
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResources</p>
     * Update Events Resources
     */
    changeEventsResourcesRaw(requestParameters: ChangeEventsResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageEventsResources>>;
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResources</p>
     * Update Events Resources
     */
    changeEventsResources(requestParameters: ChangeEventsResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageEventsResources>;
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResourcesByChain</p>
     * Update Events Resources by chain
     */
    changeEventsResourcesByChainRaw(requestParameters: ChangeEventsResourcesByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageEventsResources>>;
    /**
     * Update the details of an existing event resource on an event in OPERA Cloud. <p><strong>OperationId:</strong>changeEventsResourcesByChain</p>
     * Update Events Resources by chain
     */
    changeEventsResourcesByChain(requestParameters: ChangeEventsResourcesByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageEventsResources>;
    /**
     * Copy an existing catering event on a block to new dates on that block.  For example there is a catering Event called Lunch for 1st May, select this event, and copy it to a new date within the block date range.  This will result in a second catering event existing on this block.  You can choose to copy certain elements such as event notes, event resources and so on. <p><strong>OperationId:</strong>copyCateringEvents</p>
     * Copy Catering Event
     */
    copyCateringEventsRaw(requestParameters: CopyCateringEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CopyCateringEventsResponse>>;
    /**
     * Copy an existing catering event on a block to new dates on that block.  For example there is a catering Event called Lunch for 1st May, select this event, and copy it to a new date within the block date range.  This will result in a second catering event existing on this block.  You can choose to copy certain elements such as event notes, event resources and so on. <p><strong>OperationId:</strong>copyCateringEvents</p>
     * Copy Catering Event
     */
    copyCateringEvents(requestParameters: CopyCateringEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CopyCateringEventsResponse>;
    /**
     * Use this API to copy an existing Catering Package one the block to another date on the same block. <p><strong>OperationId:</strong>copyCateringPackage</p>
     * Copy a Catering package
     */
    copyCateringPackageRaw(requestParameters: CopyCateringPackageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CopyCateringPackageResponse>>;
    /**
     * Use this API to copy an existing Catering Package one the block to another date on the same block. <p><strong>OperationId:</strong>copyCateringPackage</p>
     * Copy a Catering package
     */
    copyCateringPackage(requestParameters: CopyCateringPackageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CopyCateringPackageResponse>;
    /**
     * You can use this API to copy one/more existing event resources to one/more events for the same/different block. <p><strong>OperationId:</strong>copyEventResources</p>
     * Copy event resources
     */
    copyEventResourcesRaw(requestParameters: CopyEventResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResourcesResponse>>;
    /**
     * You can use this API to copy one/more existing event resources to one/more events for the same/different block. <p><strong>OperationId:</strong>copyEventResources</p>
     * Copy event resources
     */
    copyEventResources(requestParameters: CopyEventResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResourcesResponse>;
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackage</p>
     * Delete Catering package
     */
    deleteCateringPackageRaw(requestParameters: DeleteCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackage</p>
     * Delete Catering package
     */
    deleteCateringPackage(requestParameters: DeleteCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete the catering package revenue on a block. <p><strong>OperationId:</strong>deleteCateringPackageRevenue</p>
     * Delete Catering package revenue
     */
    deleteCateringPackageRevenueRaw(requestParameters: DeleteCateringPackageRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete the catering package revenue on a block. <p><strong>OperationId:</strong>deleteCateringPackageRevenue</p>
     * Delete Catering package revenue
     */
    deleteCateringPackageRevenue(requestParameters: DeleteCateringPackageRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete one or more catering package(s)
     */
    deleteCateringPackagesRaw(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This allows you to remove an existing catering package from the Block <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete one or more catering package(s)
     */
    deleteCateringPackages(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will delete an existing event <p><strong>OperationId:</strong>deleteEvents</p>
     * Delete an Event
     */
    deleteEventsRaw(requestParameters: DeleteEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will delete an existing event <p><strong>OperationId:</strong>deleteEvents</p>
     * Delete an Event
     */
    deleteEvents(requestParameters: DeleteEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getBlockPostingAccountReservations</p>
     * Get Catering Event postings
     */
    getBlockPostingAccountReservationsRaw(requestParameters: GetBlockPostingAccountReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockPostingAccountReservationsInfo>>;
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getBlockPostingAccountReservations</p>
     * Get Catering Event postings
     */
    getBlockPostingAccountReservations(requestParameters: GetBlockPostingAccountReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockPostingAccountReservationsInfo>;
    /**
     * Retrieve the catering event changes on an event. <p><strong>OperationId:</strong>getCateringEventChanges</p>
     * Get Catering Event changes
     */
    getCateringEventChangesRaw(requestParameters: GetCateringEventChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringEventChanges>>;
    /**
     * Retrieve the catering event changes on an event. <p><strong>OperationId:</strong>getCateringEventChanges</p>
     * Get Catering Event changes
     */
    getCateringEventChanges(requestParameters: GetCateringEventChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringEventChanges>;
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getCateringEventPostings</p>
     * Get Catering Event postings
     */
    getCateringEventPostingsRaw(requestParameters: GetCateringEventPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringEventPostingsDetail>>;
    /**
     * Retrieve the catering event posting on an event. <p><strong>OperationId:</strong>getCateringEventPostings</p>
     * Get Catering Event postings
     */
    getCateringEventPostings(requestParameters: GetCateringEventPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringEventPostingsDetail>;
    /**
     * Retrieve catering package revenue on a block <p><strong>OperationId:</strong>getCateringPackageRevenue</p>
     * Get Catering package revenue
     */
    getCateringPackageRevenueRaw(requestParameters: GetCateringPackageRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackageRevenue>>;
    /**
     * Retrieve catering package revenue on a block <p><strong>OperationId:</strong>getCateringPackageRevenue</p>
     * Get Catering package revenue
     */
    getCateringPackageRevenue(requestParameters: GetCateringPackageRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackageRevenue>;
    /**
     * Retrieve the cateringPackages on the block <p><strong>OperationId:</strong>getCateringPackages</p>
     * Get Catering packages
     */
    getCateringPackagesRaw(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackages>>;
    /**
     * Retrieve the cateringPackages on the block <p><strong>OperationId:</strong>getCateringPackages</p>
     * Get Catering packages
     */
    getCateringPackages(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackages>;
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>>;
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event>;
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendar</p>
     * Get the event calendar
     */
    getEventCalendarRaw(requestParameters: GetEventCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventCalendar>>;
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendar</p>
     * Get the event calendar
     */
    getEventCalendar(requestParameters: GetEventCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventCalendar>;
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendarMultipleHotelIds</p>
     * Get the event calendar for Multiple Properties
     */
    getEventCalendarMultipleHotelIdsRaw(requestParameters: GetEventCalendarMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventCalendar>>;
    /**
     * You will be able to retrieve all events on the calendar for a specified property.  Narrow the results down by using the available parameters, such as Event Status, Event eventStartDate date, Location, Number of Attendees and so on. <p><strong>OperationId:</strong>getEventCalendarMultipleHotelIds</p>
     * Get the event calendar for Multiple Properties
     */
    getEventCalendarMultipleHotelIds(requestParameters: GetEventCalendarMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventCalendar>;
    /**
     * Retrieve the event item split quantity for an event. <p><strong>OperationId:</strong>getEventItemSplitQuantity</p>
     * Get Event item split quantity
     */
    getEventItemSplitQuantityRaw(requestParameters: GetEventItemSplitQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResource>>;
    /**
     * Retrieve the event item split quantity for an event. <p><strong>OperationId:</strong>getEventItemSplitQuantity</p>
     * Get Event item split quantity
     */
    getEventItemSplitQuantity(requestParameters: GetEventItemSplitQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResource>;
    /**
     * Retrieve a resource that exist for an Event, using block ID, event ID and resource ID as parameters in the path  This will give you information on the quantity, expected revenue, discounts, notes, and so on for that resource. <p><strong>OperationId:</strong>getEventResourceByMenu</p>
     * Get Resources for an Event
     */
    getEventResourceByMenuRaw(requestParameters: GetEventResourceByMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResource>>;
    /**
     * Retrieve a resource that exist for an Event, using block ID, event ID and resource ID as parameters in the path  This will give you information on the quantity, expected revenue, discounts, notes, and so on for that resource. <p><strong>OperationId:</strong>getEventResourceByMenu</p>
     * Get Resources for an Event
     */
    getEventResourceByMenu(requestParameters: GetEventResourceByMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResource>;
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotelsRaw(requestParameters: GetEventsMultipleHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Events>>;
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotels(requestParameters: GetEventsMultipleHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Events>;
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotelRaw(requestParameters: GetEventsOneHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Events>>;
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotel(requestParameters: GetEventsOneHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Events>;
    /**
     * Event Resources are the items and menus the property provides as part of its events offerings. Use this API to retrieve the Event resources as per your requested parameters. <p><strong>OperationId:</strong>getEventsResources</p>
     * Get Event Resources
     */
    getEventsResourcesRaw(requestParameters: GetEventsResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsResources>>;
    /**
     * Event Resources are the items and menus the property provides as part of its events offerings. Use this API to retrieve the Event resources as per your requested parameters. <p><strong>OperationId:</strong>getEventsResources</p>
     * Get Event Resources
     */
    getEventsResources(requestParameters: GetEventsResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsResources>;
    /**
     * Find the availability of a properties function space. <p><strong>OperationId:</strong>getFunctionSpaceAvailability</p>
     * Get hotel\'s function space availability
     */
    getFunctionSpaceAvailabilityRaw(requestParameters: GetFunctionSpaceAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceAvailabilityDetails>>;
    /**
     * Find the availability of a properties function space. <p><strong>OperationId:</strong>getFunctionSpaceAvailability</p>
     * Get hotel\'s function space availability
     */
    getFunctionSpaceAvailability(requestParameters: GetFunctionSpaceAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceAvailabilityDetails>;
    /**
     * This API will allow you to see if events are booked into the same space at the same or overlapping time. <p><strong>OperationId:</strong>getSharedFunctionSpaceEvents</p>
     * Get shared function space events
     */
    getSharedFunctionSpaceEventsRaw(requestParameters: GetSharedFunctionSpaceEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceEvents>>;
    /**
     * This API will allow you to see if events are booked into the same space at the same or overlapping time. <p><strong>OperationId:</strong>getSharedFunctionSpaceEvents</p>
     * Get shared function space events
     */
    getSharedFunctionSpaceEvents(requestParameters: GetSharedFunctionSpaceEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceEvents>;
    /**
     * Search for waitlisted events for a specified property.  You can narrow down the results by using filters in the request. <p><strong>OperationId:</strong>getWaitlistedEvents</p>
     * Retreve Waitlisted Events
     */
    getWaitlistedEventsRaw(requestParameters: GetWaitlistedEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitlistedEvents>>;
    /**
     * Search for waitlisted events for a specified property.  You can narrow down the results by using filters in the request. <p><strong>OperationId:</strong>getWaitlistedEvents</p>
     * Retreve Waitlisted Events
     */
    getWaitlistedEvents(requestParameters: GetWaitlistedEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitlistedEvents>;
    /**
     *  <p><strong>OperationId:</strong>manageAlternateEvents</p>
     * Manage alternate events.
     */
    manageAlternateEventsRaw(requestParameters: ManageAlternateEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageAlternateEventsStatus>>;
    /**
     *  <p><strong>OperationId:</strong>manageAlternateEvents</p>
     * Manage alternate events.
     */
    manageAlternateEvents(requestParameters: ManageAlternateEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageAlternateEventsStatus>;
    /**
     * Update and manage the catering event changes on an event. <p><strong>OperationId:</strong>manageCateringEventPostings</p>
     * Manage Catering Event postings
     */
    manageCateringEventPostingsRaw(requestParameters: ManageCateringEventPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringEventPostings>>;
    /**
     * Update and manage the catering event changes on an event. <p><strong>OperationId:</strong>manageCateringEventPostings</p>
     * Manage Catering Event postings
     */
    manageCateringEventPostings(requestParameters: ManageCateringEventPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringEventPostings>;
    /**
     * You can update the waitlisted events such as changing priority of the events on the waitlist. <p><strong>OperationId:</strong>manageWaitlistedEvents</p>
     * Manage Waitlisted Events
     */
    manageWaitlistedEventsRaw(requestParameters: ManageWaitlistedEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitlistedEvents>>;
    /**
     * You can update the waitlisted events such as changing priority of the events on the waitlist. <p><strong>OperationId:</strong>manageWaitlistedEvents</p>
     * Manage Waitlisted Events
     */
    manageWaitlistedEvents(requestParameters: ManageWaitlistedEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitlistedEvents>;
    /**
     * You can use this API to move one/more existing event resources to an event for the same/different block. <p><strong>OperationId:</strong>moveEventResources</p>
     * Move event resources
     */
    moveEventResourcesRaw(requestParameters: MoveEventResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventResourcesResponse>>;
    /**
     * You can use this API to move one/more existing event resources to an event for the same/different block. <p><strong>OperationId:</strong>moveEventResources</p>
     * Move event resources
     */
    moveEventResources(requestParameters: MoveEventResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventResourcesResponse>;
    /**
     * Add an available catering package onto your block. <p><strong>OperationId:</strong>postCateringPackage</p>
     * Add catering packages to a block
     */
    postCateringPackageRaw(requestParameters: PostCateringPackageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockCateringPackageDetails>>;
    /**
     * Add an available catering package onto your block. <p><strong>OperationId:</strong>postCateringPackage</p>
     * Add catering packages to a block
     */
    postCateringPackage(requestParameters: PostCateringPackageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockCateringPackageDetails>;
    /**
     * Add catering package revenue to a block <p><strong>OperationId:</strong>postCateringPackageRevenue</p>
     * Add catering package revenue to a block
     */
    postCateringPackageRevenueRaw(requestParameters: PostCateringPackageRevenueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Add catering package revenue to a block <p><strong>OperationId:</strong>postCateringPackageRevenue</p>
     * Add catering package revenue to a block
     */
    postCateringPackageRevenue(requestParameters: PostCateringPackageRevenueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows the creation of a catering event with event type, description, start date / time. end date / time, attendees, function space, setup style, rate, and more. A catering event must always be linked to a block. It cannot exist on its own. <p><strong>OperationId:</strong>postEvents</p>
     * Create an Event
     */
    postEventsRaw(requestParameters: PostEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>>;
    /**
     * This API allows the creation of a catering event with event type, description, start date / time. end date / time, attendees, function space, setup style, rate, and more. A catering event must always be linked to a block. It cannot exist on its own. <p><strong>OperationId:</strong>postEvents</p>
     * Create an Event
     */
    postEvents(requestParameters: PostEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event>;
    /**
     * You can use this API to add Events for an Opportunity Block. <p><strong>OperationId:</strong>postOpportunityEvents</p>
     * Create Events for Opportunity Block
     */
    postOpportunityEventsRaw(requestParameters: PostOpportunityEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to add Events for an Opportunity Block. <p><strong>OperationId:</strong>postOpportunityEvents</p>
     * Create Events for Opportunity Block
     */
    postOpportunityEvents(requestParameters: PostOpportunityEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to add a configured resource to a Catering Event. The Catering Event ID and Quick Insert number of a Catering Menu or Miscellaneous Item or a Template name must be provided. <p><strong>OperationId:</strong>postQuickInsertResources</p>
     * Add Resource to an Event in a hotel by ID
     */
    postQuickInsertResourcesRaw(requestParameters: PostQuickInsertResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuickInsertResourceStatus>>;
    /**
     * Use this to add a configured resource to a Catering Event. The Catering Event ID and Quick Insert number of a Catering Menu or Miscellaneous Item or a Template name must be provided. <p><strong>OperationId:</strong>postQuickInsertResources</p>
     * Add Resource to an Event in a hotel by ID
     */
    postQuickInsertResources(requestParameters: PostQuickInsertResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuickInsertResourceStatus>;
}
/**
 * @export
 */
export declare const GetCateringEventChangesFetchInstructionsEnum: {
    readonly EventChanges: "EventChanges";
    readonly StatusChanges: "StatusChanges";
    readonly RevenueChanges: "RevenueChanges";
    readonly AllChanges: "AllChanges";
};
export type GetCateringEventChangesFetchInstructionsEnum = typeof GetCateringEventChangesFetchInstructionsEnum[keyof typeof GetCateringEventChangesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringEventChangesChangeSourceEnum: {
    readonly Attendee: "Attendee";
    readonly Event: "Event";
    readonly Item: "Item";
    readonly Menu: "Menu";
    readonly Menuitem: "Menuitem";
    readonly Space: "Space";
};
export type GetCateringEventChangesChangeSourceEnum = typeof GetCateringEventChangesChangeSourceEnum[keyof typeof GetCateringEventChangesChangeSourceEnum];
/**
 * @export
 */
export declare const GetCateringEventChangesActionEnum: {
    readonly New: "New";
    readonly Update: "Update";
    readonly Delete: "Delete";
    readonly Inactivate: "Inactivate";
};
export type GetCateringEventChangesActionEnum = typeof GetCateringEventChangesActionEnum[keyof typeof GetCateringEventChangesActionEnum];
/**
 * @export
 */
export declare const GetCateringEventPostingsFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetCateringEventPostingsFetchInstructionsEnum = typeof GetCateringEventPostingsFetchInstructionsEnum[keyof typeof GetCateringEventPostingsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringPackageRevenueFetchInstructionsEnum: {
    readonly BlockInfo: "BlockInfo";
    readonly Pricing: "Pricing";
};
export type GetCateringPackageRevenueFetchInstructionsEnum = typeof GetCateringPackageRevenueFetchInstructionsEnum[keyof typeof GetCateringPackageRevenueFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventFetchInstructionsEnum = typeof GetEventFetchInstructionsEnum[keyof typeof GetEventFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventCalendarSortingByEnum: {
    readonly Name: "Name";
    readonly AttendeeCapacity: "AttendeeCapacity";
    readonly AreaSize: "AreaSize";
    readonly CustomOrder1: "CustomOrder1";
    readonly CustomOrder2: "CustomOrder2";
    readonly CustomOrder3: "CustomOrder3";
};
export type GetEventCalendarSortingByEnum = typeof GetEventCalendarSortingByEnum[keyof typeof GetEventCalendarSortingByEnum];
/**
 * @export
 */
export declare const GetEventCalendarAreaMeasurementEnum: {
    readonly Sqft: "Sqft";
    readonly Sqm: "Sqm";
};
export type GetEventCalendarAreaMeasurementEnum = typeof GetEventCalendarAreaMeasurementEnum[keyof typeof GetEventCalendarAreaMeasurementEnum];
/**
 * @export
 */
export declare const GetEventCalendarMultipleHotelIdsSortingByEnum: {
    readonly Name: "Name";
    readonly AttendeeCapacity: "AttendeeCapacity";
    readonly AreaSize: "AreaSize";
    readonly CustomOrder1: "CustomOrder1";
    readonly CustomOrder2: "CustomOrder2";
    readonly CustomOrder3: "CustomOrder3";
};
export type GetEventCalendarMultipleHotelIdsSortingByEnum = typeof GetEventCalendarMultipleHotelIdsSortingByEnum[keyof typeof GetEventCalendarMultipleHotelIdsSortingByEnum];
/**
 * @export
 */
export declare const GetEventCalendarMultipleHotelIdsAreaMeasurementEnum: {
    readonly Sqft: "Sqft";
    readonly Sqm: "Sqm";
};
export type GetEventCalendarMultipleHotelIdsAreaMeasurementEnum = typeof GetEventCalendarMultipleHotelIdsAreaMeasurementEnum[keyof typeof GetEventCalendarMultipleHotelIdsAreaMeasurementEnum];
/**
 * @export
 */
export declare const GetEventResourceByMenuFetchInstructionsEnum: {
    readonly BlockInfo: "BlockInfo";
    readonly Notes: "Notes";
};
export type GetEventResourceByMenuFetchInstructionsEnum = typeof GetEventResourceByMenuFetchInstructionsEnum[keyof typeof GetEventResourceByMenuFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsCategoryEnum: {
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Agent: "Agent";
    readonly Contact: "Contact";
    readonly Company: "Company";
    readonly Account: "Account";
};
export type GetEventsMultipleHotelsCategoryEnum = typeof GetEventsMultipleHotelsCategoryEnum[keyof typeof GetEventsMultipleHotelsCategoryEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsCateringEventOrderByEnum: {
    readonly StartDateTimeAsc: "StartDateTimeAsc";
    readonly StartDateTimeMasterSubAsc: "StartDateTimeMasterSubAsc";
};
export type GetEventsMultipleHotelsCateringEventOrderByEnum = typeof GetEventsMultipleHotelsCateringEventOrderByEnum[keyof typeof GetEventsMultipleHotelsCateringEventOrderByEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventsMultipleHotelsFetchInstructionsEnum = typeof GetEventsMultipleHotelsFetchInstructionsEnum[keyof typeof GetEventsMultipleHotelsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventsOneHotelCateringEventOrderByEnum: {
    readonly StartDateTimeAsc: "StartDateTimeAsc";
    readonly StartDateTimeMasterSubAsc: "StartDateTimeMasterSubAsc";
};
export type GetEventsOneHotelCateringEventOrderByEnum = typeof GetEventsOneHotelCateringEventOrderByEnum[keyof typeof GetEventsOneHotelCateringEventOrderByEnum];
/**
 * @export
 */
export declare const GetEventsOneHotelFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventsOneHotelFetchInstructionsEnum = typeof GetEventsOneHotelFetchInstructionsEnum[keyof typeof GetEventsOneHotelFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetFunctionSpaceAvailabilityFetchInstructionsEnum: {
    readonly FunctionSpaceCount: "FunctionSpaceCount";
};
export type GetFunctionSpaceAvailabilityFetchInstructionsEnum = typeof GetFunctionSpaceAvailabilityFetchInstructionsEnum[keyof typeof GetFunctionSpaceAvailabilityFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum: {
    readonly Share: "Share";
    readonly Noshare: "Noshare";
    readonly Both: "Both";
};
export type GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum = typeof GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum[keyof typeof GetFunctionSpaceAvailabilityFunctionSpaceSearchModeEnum];
/**
 * @export
 */
export declare const GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum: {
    readonly Individual: "Individual";
    readonly Combo: "Combo";
    readonly Both: "Both";
};
export type GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum = typeof GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum[keyof typeof GetFunctionSpaceAvailabilityFunctionSpaceAdditionalSearchModeEnum];
