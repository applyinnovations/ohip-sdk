"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageTransactionCodeTypeToJSON = exports.PackageTransactionCodeTypeFromJSONTyped = exports.PackageTransactionCodeTypeFromJSON = exports.instanceOfPackageTransactionCodeType = void 0;
const runtime_1 = require("../runtime");
const AmountDeterminationType_1 = require("./AmountDeterminationType");
/**
 * Check if a given object implements the PackageTransactionCodeType interface.
 */
function instanceOfPackageTransactionCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPackageTransactionCodeType = instanceOfPackageTransactionCodeType;
function PackageTransactionCodeTypeFromJSON(json) {
    return PackageTransactionCodeTypeFromJSONTyped(json, false);
}
exports.PackageTransactionCodeTypeFromJSON = PackageTransactionCodeTypeFromJSON;
function PackageTransactionCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, AmountDeterminationType_1.AmountDeterminationTypeFromJSON)(json['type']),
    };
}
exports.PackageTransactionCodeTypeFromJSONTyped = PackageTransactionCodeTypeFromJSONTyped;
function PackageTransactionCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'description': value.description,
        'type': (0, AmountDeterminationType_1.AmountDeterminationTypeToJSON)(value.type),
    };
}
exports.PackageTransactionCodeTypeToJSON = PackageTransactionCodeTypeToJSON;
