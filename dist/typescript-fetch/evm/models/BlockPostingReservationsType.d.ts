/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BookingStatusType } from './BookingStatusType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Contains the block's posting account reservation information.
 * @export
 * @interface BlockPostingReservationsType
 */
export interface BlockPostingReservationsType {
    /**
     * Hotel Code of the Block.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    hotelId?: string;
    /**
     * Confirmation Number of the Posting Account Reservation.
     * @type {number}
     * @memberof BlockPostingReservationsType
     */
    confirmationNumber?: number;
    /**
     * Posting Account guest name.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    guestName?: string;
    /**
     * Arrival date.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    arrivalDate?: string;
    /**
     * Departure date.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    departureDate?: string;
    /**
     *
     * @type {BookingStatusType}
     * @memberof BlockPostingReservationsType
     */
    reservationStatus?: BookingStatusType;
    /**
     * Hotel Code of the Room.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    roomHotelCode?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    reservationNameId?: UniqueIDType;
    /**
     * Posting Account guest's first name..
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    guestFirstName?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    eventId?: UniqueIDType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    blockId?: UniqueIDType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    defaultPostingAccount?: UniqueIDType;
    /**
     * Number of Posting account reservations per block.
     * @type {number}
     * @memberof BlockPostingReservationsType
     */
    size?: number;
    /**
     * Room Number.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    roomId?: string;
    /**
     * Flag to indicate whether posting charges is allowed.
     * @type {boolean}
     * @memberof BlockPostingReservationsType
     */
    noPost?: boolean;
}
/**
 * Check if a given object implements the BlockPostingReservationsType interface.
 */
export declare function instanceOfBlockPostingReservationsType(value: object): boolean;
export declare function BlockPostingReservationsTypeFromJSON(json: any): BlockPostingReservationsType;
export declare function BlockPostingReservationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockPostingReservationsType;
export declare function BlockPostingReservationsTypeToJSON(value?: BlockPostingReservationsType | null): any;
