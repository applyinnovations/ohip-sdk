"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedReservationInfoTypeToJSON = exports.LinkedReservationInfoTypeFromJSONTyped = exports.LinkedReservationInfoTypeFromJSON = exports.instanceOfLinkedReservationInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const LinkedReservationType_1 = require("./LinkedReservationType");
const PMSResStatusType_1 = require("./PMSResStatusType");
const ResGuaranteeType_1 = require("./ResGuaranteeType");
const ReservationAllowedActionType_1 = require("./ReservationAllowedActionType");
const ReservationBlockType_1 = require("./ReservationBlockType");
const TimeSpanType_1 = require("./TimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the LinkedReservationInfoType interface.
 */
function instanceOfLinkedReservationInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfLinkedReservationInfoType = instanceOfLinkedReservationInfoType;
function LinkedReservationInfoTypeFromJSON(json) {
    return LinkedReservationInfoTypeFromJSONTyped(json, false);
}
exports.LinkedReservationInfoTypeFromJSON = LinkedReservationInfoTypeFromJSON;
function LinkedReservationInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'blockDates': !(0, runtime_1.exists)(json, 'blockDates') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['blockDates']),
        'givenName': !(0, runtime_1.exists)(json, 'givenName') ? undefined : json['givenName'],
        'surname': !(0, runtime_1.exists)(json, 'surname') ? undefined : json['surname'],
        'title': !(0, runtime_1.exists)(json, 'title') ? undefined : json['title'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'functionSpaceDetails': !(0, runtime_1.exists)(json, 'functionSpaceDetails') ? undefined : json['functionSpaceDetails'],
        'ratePlanCode': !(0, runtime_1.exists)(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'rate': !(0, runtime_1.exists)(json, 'rate') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['rate']),
        'guarantee': !(0, runtime_1.exists)(json, 'guarantee') ? undefined : (0, ResGuaranteeType_1.ResGuaranteeTypeFromJSON)(json['guarantee']),
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['balance']),
        'reservationBlock': !(0, runtime_1.exists)(json, 'reservationBlock') ? undefined : (0, ReservationBlockType_1.ReservationBlockTypeFromJSON)(json['reservationBlock']),
        'displayColor': !(0, runtime_1.exists)(json, 'displayColor') ? undefined : json['displayColor'],
        'allowedActions': !(0, runtime_1.exists)(json, 'allowedActions') ? undefined : (json['allowedActions'].map(ReservationAllowedActionType_1.ReservationAllowedActionTypeFromJSON)),
        'reservationStatus': !(0, runtime_1.exists)(json, 'reservationStatus') ? undefined : (0, PMSResStatusType_1.PMSResStatusTypeFromJSON)(json['reservationStatus']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'linkReservationType': !(0, runtime_1.exists)(json, 'linkReservationType') ? undefined : (0, LinkedReservationType_1.LinkedReservationTypeFromJSON)(json['linkReservationType']),
        'reverseCheckInAllowed': !(0, runtime_1.exists)(json, 'reverseCheckInAllowed') ? undefined : json['reverseCheckInAllowed'],
        'roomNumberLocked': !(0, runtime_1.exists)(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'suppressRate': !(0, runtime_1.exists)(json, 'suppressRate') ? undefined : json['suppressRate'],
    };
}
exports.LinkedReservationInfoTypeFromJSONTyped = LinkedReservationInfoTypeFromJSONTyped;
function LinkedReservationInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'blockDates': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.blockDates),
        'givenName': value.givenName,
        'surname': value.surname,
        'title': value.title,
        'roomType': value.roomType,
        'functionSpaceDetails': value.functionSpaceDetails,
        'ratePlanCode': value.ratePlanCode,
        'rate': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.rate),
        'guarantee': (0, ResGuaranteeType_1.ResGuaranteeTypeToJSON)(value.guarantee),
        'balance': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.balance),
        'reservationBlock': (0, ReservationBlockType_1.ReservationBlockTypeToJSON)(value.reservationBlock),
        'displayColor': value.displayColor,
        'allowedActions': value.allowedActions === undefined ? undefined : (value.allowedActions.map(ReservationAllowedActionType_1.ReservationAllowedActionTypeToJSON)),
        'reservationStatus': (0, PMSResStatusType_1.PMSResStatusTypeToJSON)(value.reservationStatus),
        'hotelId': value.hotelId,
        'linkReservationType': (0, LinkedReservationType_1.LinkedReservationTypeToJSON)(value.linkReservationType),
        'reverseCheckInAllowed': value.reverseCheckInAllowed,
        'roomNumberLocked': value.roomNumberLocked,
        'suppressRate': value.suppressRate,
    };
}
exports.LinkedReservationInfoTypeToJSON = LinkedReservationInfoTypeToJSON;
