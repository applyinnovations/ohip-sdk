"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepaidCardTypeToJSON = exports.PrepaidCardTypeFromJSONTyped = exports.PrepaidCardTypeFromJSON = exports.instanceOfPrepaidCardType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const PrepaidCardDetailsType_1 = require("./PrepaidCardDetailsType");
const ProfileId_1 = require("./ProfileId");
const ReservationId_1 = require("./ReservationId");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the PrepaidCardType interface.
 */
function instanceOfPrepaidCardType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPrepaidCardType = instanceOfPrepaidCardType;
function PrepaidCardTypeFromJSON(json) {
    return PrepaidCardTypeFromJSONTyped(json, false);
}
exports.PrepaidCardTypeFromJSON = PrepaidCardTypeFromJSON;
function PrepaidCardTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'cardDetails': !(0, runtime_1.exists)(json, 'cardDetails') ? undefined : (0, PrepaidCardDetailsType_1.PrepaidCardDetailsTypeFromJSON)(json['cardDetails']),
        'cardNo': !(0, runtime_1.exists)(json, 'cardNo') ? undefined : json['cardNo'],
        'cardNumberMasked': !(0, runtime_1.exists)(json, 'cardNumberMasked') ? undefined : json['cardNumberMasked'],
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'firstName': !(0, runtime_1.exists)(json, 'firstName') ? undefined : json['firstName'],
        'giftCard': !(0, runtime_1.exists)(json, 'giftCard') ? undefined : json['giftCard'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['interfaceId']),
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'pinCode': !(0, runtime_1.exists)(json, 'pinCode') ? undefined : json['pinCode'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'purgeDate': !(0, runtime_1.exists)(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
    };
}
exports.PrepaidCardTypeFromJSONTyped = PrepaidCardTypeFromJSONTyped;
function PrepaidCardTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'cardDetails': (0, PrepaidCardDetailsType_1.PrepaidCardDetailsTypeToJSON)(value.cardDetails),
        'cardNo': value.cardNo,
        'cardNumberMasked': value.cardNumberMasked,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'firstName': value.firstName,
        'giftCard': value.giftCard,
        'hotelId': value.hotelId,
        'interfaceId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.interfaceId),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'name': value.name,
        'pinCode': value.pinCode,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substring(0, 10)),
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
    };
}
exports.PrepaidCardTypeToJSON = PrepaidCardTypeToJSON;
