/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CompanyType } from './CompanyType';
import type { CustomerType } from './CustomerType';
import type { ImageSetType } from './ImageSetType';
import type { ProfileStatusType } from './ProfileStatusType';
import type { ProfileTypeAddresses } from './ProfileTypeAddresses';
import type { ProfileTypeComments } from './ProfileTypeComments';
import type { ProfileTypeEmails } from './ProfileTypeEmails';
import type { ProfileTypeRelationships } from './ProfileTypeRelationships';
import type { ProfileTypeRelationshipsSummary } from './ProfileTypeRelationshipsSummary';
import type { ProfileTypeRoomOwnershipsList } from './ProfileTypeRoomOwnershipsList';
import type { ProfileTypeTelephones } from './ProfileTypeTelephones';
import type { ProfileTypeType } from './ProfileTypeType';
import type { ProfileTypeURLs } from './ProfileTypeURLs';
import type { ReservationStayHistoryFutureInfoType } from './ReservationStayHistoryFutureInfoType';
/**
 * Type provides the detailed information about the profile and its children.
 * @export
 * @interface ProfileType
 */
export interface ProfileType {
    /**
     *
     * @type {ProfileTypeAddresses}
     * @memberof ProfileType
     */
    addresses?: ProfileTypeAddresses;
    /**
     *
     * @type {ProfileTypeComments}
     * @memberof ProfileType
     */
    comments?: ProfileTypeComments;
    /**
     *
     * @type {CompanyType}
     * @memberof ProfileType
     */
    company?: CompanyType;
    /**
     *
     * @type {CustomerType}
     * @memberof ProfileType
     */
    customer?: CustomerType;
    /**
     *
     * @type {ProfileTypeEmails}
     * @memberof ProfileType
     */
    emails?: ProfileTypeEmails;
    /**
     * Owner Code associated to the profile.
     * @type {string}
     * @memberof ProfileType
     */
    ownerCode?: string;
    /**
     *
     * @type {ImageSetType}
     * @memberof ProfileType
     */
    profileImage?: ImageSetType;
    /**
     *
     * @type {ProfileTypeType}
     * @memberof ProfileType
     */
    profileType?: ProfileTypeType;
    /**
     * Hotel which this profile is registered with. This attribute is not used for configuration.
     * @type {string}
     * @memberof ProfileType
     */
    registeredProperty?: string;
    /**
     *
     * @type {ProfileTypeRelationships}
     * @memberof ProfileType
     */
    relationships?: ProfileTypeRelationships;
    /**
     *
     * @type {ProfileTypeRelationshipsSummary}
     * @memberof ProfileType
     */
    relationshipsSummary?: ProfileTypeRelationshipsSummary;
    /**
     * Hotel which this profile is to be registered. This attribute is only used during creation of profile.
     * @type {string}
     * @memberof ProfileType
     */
    requestForHotel?: string;
    /**
     *
     * @type {ProfileTypeRoomOwnershipsList}
     * @memberof ProfileType
     */
    roomOwnershipsList?: ProfileTypeRoomOwnershipsList;
    /**
     * Flag to show inactive Room Owners.
     * @type {boolean}
     * @memberof ProfileType
     */
    showInactiveRoomOwners?: boolean;
    /**
     *
     * @type {ProfileStatusType}
     * @memberof ProfileType
     */
    statusCode?: ProfileStatusType;
    /**
     *
     * @type {ReservationStayHistoryFutureInfoType}
     * @memberof ProfileType
     */
    stayReservationInfoList?: ReservationStayHistoryFutureInfoType;
    /**
     *
     * @type {ProfileTypeTelephones}
     * @memberof ProfileType
     */
    telephones?: ProfileTypeTelephones;
    /**
     *
     * @type {ProfileTypeURLs}
     * @memberof ProfileType
     */
    uRLs?: ProfileTypeURLs;
}
/**
 * Check if a given object implements the ProfileType interface.
 */
export declare function instanceOfProfileType(value: object): boolean;
export declare function ProfileTypeFromJSON(json: any): ProfileType;
export declare function ProfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileType;
export declare function ProfileTypeToJSON(value?: ProfileType | null): any;
