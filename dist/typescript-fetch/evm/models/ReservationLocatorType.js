"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationLocatorTypeToJSON = exports.ReservationLocatorTypeFromJSONTyped = exports.ReservationLocatorTypeFromJSON = exports.instanceOfReservationLocatorType = void 0;
const runtime_1 = require("../runtime");
const DateRangeType_1 = require("./DateRangeType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ReservationLocatorType interface.
 */
function instanceOfReservationLocatorType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationLocatorType = instanceOfReservationLocatorType;
function ReservationLocatorTypeFromJSON(json) {
    return ReservationLocatorTypeFromJSONTyped(json, false);
}
exports.ReservationLocatorTypeFromJSON = ReservationLocatorTypeFromJSON;
function ReservationLocatorTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dateSpan': !(0, runtime_1.exists)(json, 'dateSpan') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['dateSpan']),
        'blockDates': !(0, runtime_1.exists)(json, 'blockDates') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['blockDates']),
        'locatorText': !(0, runtime_1.exists)(json, 'locatorText') ? undefined : json['locatorText'],
        'locatorOn': !(0, runtime_1.exists)(json, 'locatorOn') ? undefined : json['locatorOn'],
        'locatorBy': !(0, runtime_1.exists)(json, 'locatorBy') ? undefined : json['locatorBy'],
        'locatorId': !(0, runtime_1.exists)(json, 'locatorId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['locatorId']),
    };
}
exports.ReservationLocatorTypeFromJSONTyped = ReservationLocatorTypeFromJSONTyped;
function ReservationLocatorTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dateSpan': (0, DateRangeType_1.DateRangeTypeToJSON)(value.dateSpan),
        'blockDates': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.blockDates),
        'locatorText': value.locatorText,
        'locatorOn': value.locatorOn,
        'locatorBy': value.locatorBy,
        'locatorId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.locatorId),
    };
}
exports.ReservationLocatorTypeToJSON = ReservationLocatorTypeToJSON;
