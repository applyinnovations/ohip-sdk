"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventChangesByDateTimeSummaryToJSON = exports.EventChangesByDateTimeSummaryFromJSONTyped = exports.EventChangesByDateTimeSummaryFromJSON = exports.instanceOfEventChangesByDateTimeSummary = void 0;
const runtime_1 = require("../runtime");
const EventChangesByDateTimeSummaryType_1 = require("./EventChangesByDateTimeSummaryType");
/**
 * Check if a given object implements the EventChangesByDateTimeSummary interface.
 */
function instanceOfEventChangesByDateTimeSummary(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventChangesByDateTimeSummary = instanceOfEventChangesByDateTimeSummary;
function EventChangesByDateTimeSummaryFromJSON(json) {
    return EventChangesByDateTimeSummaryFromJSONTyped(json, false);
}
exports.EventChangesByDateTimeSummaryFromJSON = EventChangesByDateTimeSummaryFromJSON;
function EventChangesByDateTimeSummaryFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventList': !(0, runtime_1.exists)(json, 'eventList') ? undefined : (json['eventList'].map(EventChangesByDateTimeSummaryType_1.EventChangesByDateTimeSummaryTypeFromJSON)),
        'offset': !(0, runtime_1.exists)(json, 'offset') ? undefined : json['offset'],
        'limit': !(0, runtime_1.exists)(json, 'limit') ? undefined : json['limit'],
        'count': !(0, runtime_1.exists)(json, 'count') ? undefined : json['count'],
        'hasMore': !(0, runtime_1.exists)(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !(0, runtime_1.exists)(json, 'totalResults') ? undefined : json['totalResults'],
    };
}
exports.EventChangesByDateTimeSummaryFromJSONTyped = EventChangesByDateTimeSummaryFromJSONTyped;
function EventChangesByDateTimeSummaryToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventList': value.eventList === undefined ? undefined : (value.eventList.map(EventChangesByDateTimeSummaryType_1.EventChangesByDateTimeSummaryTypeToJSON)),
        'offset': value.offset,
        'limit': value.limit,
        'count': value.count,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
    };
}
exports.EventChangesByDateTimeSummaryToJSON = EventChangesByDateTimeSummaryToJSON;
