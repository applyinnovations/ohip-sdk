"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventLinkTypeToJSON = exports.CateringEventLinkTypeFromJSONTyped = exports.CateringEventLinkTypeFromJSON = exports.instanceOfCateringEventLinkType = void 0;
const runtime_1 = require("../runtime");
const CateringEventLinkTypeType_1 = require("./CateringEventLinkTypeType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringEventLinkType interface.
 */
function instanceOfCateringEventLinkType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventLinkType = instanceOfCateringEventLinkType;
function CateringEventLinkTypeFromJSON(json) {
    return CateringEventLinkTypeFromJSONTyped(json, false);
}
exports.CateringEventLinkTypeFromJSON = CateringEventLinkTypeFromJSON;
function CateringEventLinkTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['id']),
        'masterEventDates': !(0, runtime_1.exists)(json, 'masterEventDates') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['masterEventDates']),
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, CateringEventLinkTypeType_1.CateringEventLinkTypeTypeFromJSON)(json['type']),
    };
}
exports.CateringEventLinkTypeFromJSONTyped = CateringEventLinkTypeFromJSONTyped;
function CateringEventLinkTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.id),
        'masterEventDates': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.masterEventDates),
        'type': (0, CateringEventLinkTypeType_1.CateringEventLinkTypeTypeToJSON)(value.type),
    };
}
exports.CateringEventLinkTypeToJSON = CateringEventLinkTypeToJSON;
