"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventMenusTypeToJSON = exports.EventMenusTypeFromJSONTyped = exports.EventMenusTypeFromJSON = exports.instanceOfEventMenusType = void 0;
const runtime_1 = require("../runtime");
const EventMenuInfoType_1 = require("./EventMenuInfoType");
/**
 * Check if a given object implements the EventMenusType interface.
 */
function instanceOfEventMenusType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventMenusType = instanceOfEventMenusType;
function EventMenusTypeFromJSON(json) {
    return EventMenusTypeFromJSONTyped(json, false);
}
exports.EventMenusTypeFromJSON = EventMenusTypeFromJSON;
function EventMenusTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'critical': !(0, runtime_1.exists)(json, 'critical') ? undefined : json['critical'],
        'eventMenuInfo': !(0, runtime_1.exists)(json, 'eventMenuInfo') ? undefined : (json['eventMenuInfo'].map(EventMenuInfoType_1.EventMenuInfoTypeFromJSON)),
        'includedInPackage': !(0, runtime_1.exists)(json, 'includedInPackage') ? undefined : json['includedInPackage'],
    };
}
exports.EventMenusTypeFromJSONTyped = EventMenusTypeFromJSONTyped;
function EventMenusTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'critical': value.critical,
        'eventMenuInfo': value.eventMenuInfo === undefined ? undefined : (value.eventMenuInfo.map(EventMenuInfoType_1.EventMenuInfoTypeToJSON)),
        'includedInPackage': value.includedInPackage,
    };
}
exports.EventMenusTypeToJSON = EventMenusTypeToJSON;
