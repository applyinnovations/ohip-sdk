/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Pertain catering event's posting information.
 * @export
 * @interface CateringEventPostingType
 */
export interface CateringEventPostingType {
    /**
     * An additional identifier for this resource on the folio.
     * @type {string}
     * @memberof CateringEventPostingType
     */
    chequeNumber?: string;
    /**
     * Flag to determine if the posted revenue is Included. If not Included it is considered as Extra posted revenue.
     * @type {boolean}
     * @memberof CateringEventPostingType
     */
    includedRevenue?: boolean;
    /**
     *
     * @type {UniqueIDType}
     * @memberof CateringEventPostingType
     */
    postId?: UniqueIDType;
    /**
     * Flag to determine if the revenue has been posted.
     * @type {boolean}
     * @memberof CateringEventPostingType
     */
    posted?: boolean;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CateringEventPostingType
     */
    postedRevenue?: CurrencyAmountType;
    /**
     * Resource description for this posting.
     * @type {string}
     * @memberof CateringEventPostingType
     */
    resourceName?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CateringEventPostingType
     */
    revenue?: CurrencyAmountType;
    /**
     * The revenue type associated with the resource.
     * @type {string}
     * @memberof CateringEventPostingType
     */
    revenueType?: string;
    /**
     * Transaction Code used for posting revenue.
     * @type {string}
     * @memberof CateringEventPostingType
     */
    transactionCode?: string;
}
/**
 * Check if a given object implements the CateringEventPostingType interface.
 */
export declare function instanceOfCateringEventPostingType(value: object): boolean;
export declare function CateringEventPostingTypeFromJSON(json: any): CateringEventPostingType;
export declare function CateringEventPostingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventPostingType;
export declare function CateringEventPostingTypeToJSON(value?: CateringEventPostingType | null): any;
