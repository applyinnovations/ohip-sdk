/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringEventsAttendeesType } from './CateringEventsAttendeesType';
import {
    CateringEventsAttendeesTypeFromJSON,
    CateringEventsAttendeesTypeFromJSONTyped,
    CateringEventsAttendeesTypeToJSON,
} from './CateringEventsAttendeesType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { DateTimeRangeType } from './DateTimeRangeType';
import {
    DateTimeRangeTypeFromJSON,
    DateTimeRangeTypeFromJSONTyped,
    DateTimeRangeTypeToJSON,
} from './DateTimeRangeType';
import type { MenuTypeType } from './MenuTypeType';
import {
    MenuTypeTypeFromJSON,
    MenuTypeTypeFromJSONTyped,
    MenuTypeTypeToJSON,
} from './MenuTypeType';
import type { ServingType } from './ServingType';
import {
    ServingTypeFromJSON,
    ServingTypeFromJSONTyped,
    ServingTypeToJSON,
} from './ServingType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Pertain Details Information of Menu.
 * @export
 * @interface EventMenuBasicInfoType
 */
export interface EventMenuBasicInfoType {
    /**
     * 
     * @type {CateringEventsAttendeesType}
     * @memberof EventMenuBasicInfoType
     */
    attendees?: CateringEventsAttendeesType;
    /**
     * This type holds name of Menu Class Name.
     * @type {string}
     * @memberof EventMenuBasicInfoType
     */
    className?: string;
    /**
     * This type holds value of consumption, Menu items will be charged on a consumption basis.
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    consumptionBased?: boolean;
    /**
     * Define the Courses populated into the Multi Choice Menu Configuration
     * @type {number}
     * @memberof EventMenuBasicInfoType
     */
    courseCount?: number;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof EventMenuBasicInfoType
     */
    description?: TranslationTextType2000;
    /**
     * 
     * @type {Array<string>}
     * @memberof EventMenuBasicInfoType
     */
    dietaryList?: Array<string>;
    /**
     * Discount Percentage applied to Menu Amount.
     * @type {number}
     * @memberof EventMenuBasicInfoType
     */
    discountPercentage?: number;
    /**
     * 
     * @type {DateRangeType}
     * @memberof EventMenuBasicInfoType
     */
    eventDateRange?: DateRangeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof EventMenuBasicInfoType
     */
    eventTypes?: Array<string>;
    /**
     * Hotel code where event will be organized.
     * @type {string}
     * @memberof EventMenuBasicInfoType
     */
    hotelId?: string;
    /**
     * Selection will comment this Menu is Inactive and unable to be added to a Catering Event.
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    inactive?: boolean;
    /**
     * Return true, when all Menu Items added will be marked as Included and there will be a Global Price for this menu
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    includedInMenu?: boolean;
    /**
     * Return true means, menu item as Included in the Menu Price
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    includedInPrice?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof EventMenuBasicInfoType
     */
    menuId?: UniqueIDType;
    /**
     * The total number of menus sold for the day on which the event takes place.
     * @type {number}
     * @memberof EventMenuBasicInfoType
     */
    menusSold?: number;
    /**
     * Indicator of this being a multi-choice menu
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    multiChoice?: boolean;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof EventMenuBasicInfoType
     */
    name?: TranslationTextType2000;
    /**
     * This field determines the order in which the menu has to be displayed on the manage resources screen.
     * @type {number}
     * @memberof EventMenuBasicInfoType
     */
    order?: number;
    /**
     * This type holds quick insert value, v5 functionality as Article Number for the Menu.
     * @type {string}
     * @memberof EventMenuBasicInfoType
     */
    quickInsertCode?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof EventMenuBasicInfoType
     */
    restriction?: TranslationTextType2000;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventMenuBasicInfoType
     */
    salesPrice?: CurrencyAmountType;
    /**
     * 
     * @type {DateRangeType}
     * @memberof EventMenuBasicInfoType
     */
    sellDateRange?: DateRangeType;
    /**
     * 
     * @type {DateTimeRangeType}
     * @memberof EventMenuBasicInfoType
     */
    serveStartEndTime?: DateTimeRangeType;
    /**
     * This type holds TableCapacity for the given Menu.
     * @type {string}
     * @memberof EventMenuBasicInfoType
     */
    servingSize?: string;
    /**
     * 
     * @type {ServingType}
     * @memberof EventMenuBasicInfoType
     */
    servingType?: ServingType;
    /**
     * 
     * @type {MenuTypeType}
     * @memberof EventMenuBasicInfoType
     */
    type?: MenuTypeType;
    /**
     * This type tells about whether menu is book through web or not.
     * @type {boolean}
     * @memberof EventMenuBasicInfoType
     */
    webBookable?: boolean;
}

/**
 * Check if a given object implements the EventMenuBasicInfoType interface.
 */
export function instanceOfEventMenuBasicInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventMenuBasicInfoTypeFromJSON(json: any): EventMenuBasicInfoType {
    return EventMenuBasicInfoTypeFromJSONTyped(json, false);
}

export function EventMenuBasicInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMenuBasicInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attendees': !exists(json, 'attendees') ? undefined : CateringEventsAttendeesTypeFromJSON(json['attendees']),
        'className': !exists(json, 'className') ? undefined : json['className'],
        'consumptionBased': !exists(json, 'consumptionBased') ? undefined : json['consumptionBased'],
        'courseCount': !exists(json, 'courseCount') ? undefined : json['courseCount'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'dietaryList': !exists(json, 'dietaryList') ? undefined : json['dietaryList'],
        'discountPercentage': !exists(json, 'discountPercentage') ? undefined : json['discountPercentage'],
        'eventDateRange': !exists(json, 'eventDateRange') ? undefined : DateRangeTypeFromJSON(json['eventDateRange']),
        'eventTypes': !exists(json, 'eventTypes') ? undefined : json['eventTypes'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'includedInMenu': !exists(json, 'includedInMenu') ? undefined : json['includedInMenu'],
        'includedInPrice': !exists(json, 'includedInPrice') ? undefined : json['includedInPrice'],
        'menuId': !exists(json, 'menuId') ? undefined : UniqueIDTypeFromJSON(json['menuId']),
        'menusSold': !exists(json, 'menusSold') ? undefined : json['menusSold'],
        'multiChoice': !exists(json, 'multiChoice') ? undefined : json['multiChoice'],
        'name': !exists(json, 'name') ? undefined : TranslationTextType2000FromJSON(json['name']),
        'order': !exists(json, 'order') ? undefined : json['order'],
        'quickInsertCode': !exists(json, 'quickInsertCode') ? undefined : json['quickInsertCode'],
        'restriction': !exists(json, 'restriction') ? undefined : TranslationTextType2000FromJSON(json['restriction']),
        'salesPrice': !exists(json, 'salesPrice') ? undefined : CurrencyAmountTypeFromJSON(json['salesPrice']),
        'sellDateRange': !exists(json, 'sellDateRange') ? undefined : DateRangeTypeFromJSON(json['sellDateRange']),
        'serveStartEndTime': !exists(json, 'serveStartEndTime') ? undefined : DateTimeRangeTypeFromJSON(json['serveStartEndTime']),
        'servingSize': !exists(json, 'servingSize') ? undefined : json['servingSize'],
        'servingType': !exists(json, 'servingType') ? undefined : ServingTypeFromJSON(json['servingType']),
        'type': !exists(json, 'type') ? undefined : MenuTypeTypeFromJSON(json['type']),
        'webBookable': !exists(json, 'webBookable') ? undefined : json['webBookable'],
    };
}

export function EventMenuBasicInfoTypeToJSON(value?: EventMenuBasicInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attendees': CateringEventsAttendeesTypeToJSON(value.attendees),
        'className': value.className,
        'consumptionBased': value.consumptionBased,
        'courseCount': value.courseCount,
        'description': TranslationTextType2000ToJSON(value.description),
        'dietaryList': value.dietaryList,
        'discountPercentage': value.discountPercentage,
        'eventDateRange': DateRangeTypeToJSON(value.eventDateRange),
        'eventTypes': value.eventTypes,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'includedInMenu': value.includedInMenu,
        'includedInPrice': value.includedInPrice,
        'menuId': UniqueIDTypeToJSON(value.menuId),
        'menusSold': value.menusSold,
        'multiChoice': value.multiChoice,
        'name': TranslationTextType2000ToJSON(value.name),
        'order': value.order,
        'quickInsertCode': value.quickInsertCode,
        'restriction': TranslationTextType2000ToJSON(value.restriction),
        'salesPrice': CurrencyAmountTypeToJSON(value.salesPrice),
        'sellDateRange': DateRangeTypeToJSON(value.sellDateRange),
        'serveStartEndTime': DateTimeRangeTypeToJSON(value.serveStartEndTime),
        'servingSize': value.servingSize,
        'servingType': ServingTypeToJSON(value.servingType),
        'type': MenuTypeTypeToJSON(value.type),
        'webBookable': value.webBookable,
    };
}

