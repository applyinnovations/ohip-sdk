"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventRevenueTypeToJSON = exports.EventRevenueTypeFromJSONTyped = exports.EventRevenueTypeFromJSON = exports.instanceOfEventRevenueType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the EventRevenueType interface.
 */
function instanceOfEventRevenueType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventRevenueType = instanceOfEventRevenueType;
function EventRevenueTypeFromJSON(json) {
    return EventRevenueTypeFromJSONTyped(json, false);
}
exports.EventRevenueTypeFromJSON = EventRevenueTypeFromJSON;
function EventRevenueTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'revenueType': !(0, runtime_1.exists)(json, 'revenueType') ? undefined : json['revenueType'],
        'revenue': !(0, runtime_1.exists)(json, 'revenue') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['revenue']),
    };
}
exports.EventRevenueTypeFromJSONTyped = EventRevenueTypeFromJSONTyped;
function EventRevenueTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'revenueType': value.revenueType,
        'revenue': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.revenue),
    };
}
exports.EventRevenueTypeToJSON = EventRevenueTypeToJSON;
