"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageSetTypeToJSON = exports.ImageSetTypeFromJSONTyped = exports.ImageSetTypeFromJSON = exports.instanceOfImageSetType = void 0;
const runtime_1 = require("../runtime");
const ImageStyleType_1 = require("./ImageStyleType");
/**
 * Check if a given object implements the ImageSetType interface.
 */
function instanceOfImageSetType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfImageSetType = instanceOfImageSetType;
function ImageSetTypeFromJSON(json) {
    return ImageSetTypeFromJSONTyped(json, false);
}
exports.ImageSetTypeFromJSON = ImageSetTypeFromJSON;
function ImageSetTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'language': !(0, runtime_1.exists)(json, 'language') ? undefined : json['language'],
        'imageSet': !(0, runtime_1.exists)(json, 'imageSet') ? undefined : json['imageSet'],
        'sequenceId': !(0, runtime_1.exists)(json, 'sequenceId') ? undefined : json['sequenceId'],
        'imageStyle': !(0, runtime_1.exists)(json, 'imageStyle') ? undefined : (0, ImageStyleType_1.ImageStyleTypeFromJSON)(json['imageStyle']),
        'imageType': !(0, runtime_1.exists)(json, 'imageType') ? undefined : json['imageType'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'chainCode': !(0, runtime_1.exists)(json, 'chainCode') ? undefined : json['chainCode'],
        'imageURL': !(0, runtime_1.exists)(json, 'imageURL') ? undefined : json['imageURL'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'imageOrder': !(0, runtime_1.exists)(json, 'imageOrder') ? undefined : json['imageOrder'],
        'website': !(0, runtime_1.exists)(json, 'website') ? undefined : json['website'],
    };
}
exports.ImageSetTypeFromJSONTyped = ImageSetTypeFromJSONTyped;
function ImageSetTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'language': value.language,
        'imageSet': value.imageSet,
        'sequenceId': value.sequenceId,
        'imageStyle': (0, ImageStyleType_1.ImageStyleTypeToJSON)(value.imageStyle),
        'imageType': value.imageType,
        'hotelId': value.hotelId,
        'chainCode': value.chainCode,
        'imageURL': value.imageURL,
        'description': value.description,
        'imageOrder': value.imageOrder,
        'website': value.website,
    };
}
exports.ImageSetTypeToJSON = ImageSetTypeToJSON;
