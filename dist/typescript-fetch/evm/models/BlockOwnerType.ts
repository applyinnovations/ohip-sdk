/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockOwnershipType } from './BlockOwnershipType';
import {
    BlockOwnershipTypeFromJSON,
    BlockOwnershipTypeFromJSONTyped,
    BlockOwnershipTypeToJSON,
} from './BlockOwnershipType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { EmailInfoType } from './EmailInfoType';
import {
    EmailInfoTypeFromJSON,
    EmailInfoTypeFromJSONTyped,
    EmailInfoTypeToJSON,
} from './EmailInfoType';
import type { PersonNameType } from './PersonNameType';
import {
    PersonNameTypeFromJSON,
    PersonNameTypeFromJSONTyped,
    PersonNameTypeToJSON,
} from './PersonNameType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { TelephoneInfoType } from './TelephoneInfoType';
import {
    TelephoneInfoTypeFromJSON,
    TelephoneInfoTypeFromJSONTyped,
    TelephoneInfoTypeToJSON,
} from './TelephoneInfoType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Generic type for information about an owner.
 * @export
 * @interface BlockOwnerType
 */
export interface BlockOwnerType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockOwnerType
     */
    hotel?: CodeDescriptionType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockOwnerType
     */
    userId?: UniqueIDType;
    /**
     * Unique application user name of the owner.
     * @type {string}
     * @memberof BlockOwnerType
     */
    userName?: string;
    /**
     * Unique Code to identify the owner.
     * @type {string}
     * @memberof BlockOwnerType
     */
    ownerCode?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof BlockOwnerType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {PersonNameType}
     * @memberof BlockOwnerType
     */
    name?: PersonNameType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockOwnerType
     */
    department?: CodeDescriptionType;
    /**
     * 
     * @type {EmailInfoType}
     * @memberof BlockOwnerType
     */
    email?: EmailInfoType;
    /**
     * 
     * @type {TelephoneInfoType}
     * @memberof BlockOwnerType
     */
    phone?: TelephoneInfoType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockOwnerType
     */
    relationship?: CodeDescriptionType;
    /**
     * When true, this is a primary owner.
     * @type {boolean}
     * @memberof BlockOwnerType
     */
    primary?: boolean;
    /**
     * 
     * @type {BlockOwnershipType}
     * @memberof BlockOwnerType
     */
    ownership?: BlockOwnershipType;
}

/**
 * Check if a given object implements the BlockOwnerType interface.
 */
export function instanceOfBlockOwnerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockOwnerTypeFromJSON(json: any): BlockOwnerType {
    return BlockOwnerTypeFromJSONTyped(json, false);
}

export function BlockOwnerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockOwnerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotel': !exists(json, 'hotel') ? undefined : CodeDescriptionTypeFromJSON(json['hotel']),
        'userId': !exists(json, 'userId') ? undefined : UniqueIDTypeFromJSON(json['userId']),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'ownerCode': !exists(json, 'ownerCode') ? undefined : json['ownerCode'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'name': !exists(json, 'name') ? undefined : PersonNameTypeFromJSON(json['name']),
        'department': !exists(json, 'department') ? undefined : CodeDescriptionTypeFromJSON(json['department']),
        'email': !exists(json, 'email') ? undefined : EmailInfoTypeFromJSON(json['email']),
        'phone': !exists(json, 'phone') ? undefined : TelephoneInfoTypeFromJSON(json['phone']),
        'relationship': !exists(json, 'relationship') ? undefined : CodeDescriptionTypeFromJSON(json['relationship']),
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'ownership': !exists(json, 'ownership') ? undefined : BlockOwnershipTypeFromJSON(json['ownership']),
    };
}

export function BlockOwnerTypeToJSON(value?: BlockOwnerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotel': CodeDescriptionTypeToJSON(value.hotel),
        'userId': UniqueIDTypeToJSON(value.userId),
        'userName': value.userName,
        'ownerCode': value.ownerCode,
        'profileId': ProfileIdToJSON(value.profileId),
        'name': PersonNameTypeToJSON(value.name),
        'department': CodeDescriptionTypeToJSON(value.department),
        'email': EmailInfoTypeToJSON(value.email),
        'phone': TelephoneInfoTypeToJSON(value.phone),
        'relationship': CodeDescriptionTypeToJSON(value.relationship),
        'primary': value.primary,
        'ownership': BlockOwnershipTypeToJSON(value.ownership),
    };
}

