"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSpaceScheduleTypeToJSON = exports.EventSpaceScheduleTypeFromJSONTyped = exports.EventSpaceScheduleTypeFromJSON = exports.instanceOfEventSpaceScheduleType = void 0;
const runtime_1 = require("../runtime");
const EventSpaceAttributesType_1 = require("./EventSpaceAttributesType");
const EventSpaceScheduleTypeEvents_1 = require("./EventSpaceScheduleTypeEvents");
/**
 * Check if a given object implements the EventSpaceScheduleType interface.
 */
function instanceOfEventSpaceScheduleType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventSpaceScheduleType = instanceOfEventSpaceScheduleType;
function EventSpaceScheduleTypeFromJSON(json) {
    return EventSpaceScheduleTypeFromJSONTyped(json, false);
}
exports.EventSpaceScheduleTypeFromJSON = EventSpaceScheduleTypeFromJSON;
function EventSpaceScheduleTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'building': !(0, runtime_1.exists)(json, 'building') ? undefined : json['building'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'eventSpaceAttributes': !(0, runtime_1.exists)(json, 'eventSpaceAttributes') ? undefined : (0, EventSpaceAttributesType_1.EventSpaceAttributesTypeFromJSON)(json['eventSpaceAttributes']),
        'events': !(0, runtime_1.exists)(json, 'events') ? undefined : (0, EventSpaceScheduleTypeEvents_1.EventSpaceScheduleTypeEventsFromJSON)(json['events']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'roomOrder': !(0, runtime_1.exists)(json, 'roomOrder') ? undefined : json['roomOrder'],
    };
}
exports.EventSpaceScheduleTypeFromJSONTyped = EventSpaceScheduleTypeFromJSONTyped;
function EventSpaceScheduleTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'building': value.building,
        'description': value.description,
        'eventSpaceAttributes': (0, EventSpaceAttributesType_1.EventSpaceAttributesTypeToJSON)(value.eventSpaceAttributes),
        'events': (0, EventSpaceScheduleTypeEvents_1.EventSpaceScheduleTypeEventsToJSON)(value.events),
        'hotelId': value.hotelId,
        'name': value.name,
        'roomId': value.roomId,
        'roomOrder': value.roomOrder,
    };
}
exports.EventSpaceScheduleTypeToJSON = EventSpaceScheduleTypeToJSON;
