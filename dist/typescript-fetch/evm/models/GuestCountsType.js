"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuestCountsTypeToJSON = exports.GuestCountsTypeFromJSONTyped = exports.GuestCountsTypeFromJSON = exports.instanceOfGuestCountsType = void 0;
const runtime_1 = require("../runtime");
const ChildAgeType_1 = require("./ChildAgeType");
const ChildBucketsType_1 = require("./ChildBucketsType");
/**
 * Check if a given object implements the GuestCountsType interface.
 */
function instanceOfGuestCountsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfGuestCountsType = instanceOfGuestCountsType;
function GuestCountsTypeFromJSON(json) {
    return GuestCountsTypeFromJSONTyped(json, false);
}
exports.GuestCountsTypeFromJSON = GuestCountsTypeFromJSON;
function GuestCountsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'childAges': !(0, runtime_1.exists)(json, 'childAges') ? undefined : (json['childAges'].map(ChildAgeType_1.ChildAgeTypeFromJSON)),
        'childBuckets': !(0, runtime_1.exists)(json, 'childBuckets') ? undefined : (0, ChildBucketsType_1.ChildBucketsTypeFromJSON)(json['childBuckets']),
        'adults': !(0, runtime_1.exists)(json, 'adults') ? undefined : json['adults'],
        'children': !(0, runtime_1.exists)(json, 'children') ? undefined : json['children'],
    };
}
exports.GuestCountsTypeFromJSONTyped = GuestCountsTypeFromJSONTyped;
function GuestCountsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'childAges': value.childAges === undefined ? undefined : (value.childAges.map(ChildAgeType_1.ChildAgeTypeToJSON)),
        'childBuckets': (0, ChildBucketsType_1.ChildBucketsTypeToJSON)(value.childBuckets),
        'adults': value.adults,
        'children': value.children,
    };
}
exports.GuestCountsTypeToJSON = GuestCountsTypeToJSON;
