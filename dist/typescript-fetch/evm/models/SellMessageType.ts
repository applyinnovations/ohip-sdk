/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UsedInModuleType } from './UsedInModuleType';
import {
    UsedInModuleTypeFromJSON,
    UsedInModuleTypeFromJSONTyped,
    UsedInModuleTypeToJSON,
} from './UsedInModuleType';

/**
 * The SellMessagesType defines the standard attributes that will be retrieved with the sell message.
 * @export
 * @interface SellMessageType
 */
export interface SellMessageType {
    /**
     * This is the Begin date for the configured SellMessage.
     * @type {Date}
     * @memberof SellMessageType
     */
    beginDate?: Date;
    /**
     * This is the chain code.
     * @type {string}
     * @memberof SellMessageType
     */
    chainCode?: string;
    /**
     * This is the Central Reservation office code.
     * @type {string}
     * @memberof SellMessageType
     */
    croCode?: string;
    /**
     * This is the hotel code or resort.
     * @type {string}
     * @memberof SellMessageType
     */
    hotelId?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof SellMessageType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof SellMessageType
     */
    idContext?: string;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof SellMessageType
     */
    instance?: string;
    /**
     * This is the language code.
     * @type {string}
     * @memberof SellMessageType
     */
    languageCode?: string;
    /**
     * This is the message text.
     * @type {string}
     * @memberof SellMessageType
     */
    message?: string;
    /**
     * This represents the rate plan code of the functionSpaceDetails type.
     * @type {string}
     * @memberof SellMessageType
     */
    ratePlanCode?: string;
    /**
     * This represents the functionSpaceDetails type code.
     * @type {string}
     * @memberof SellMessageType
     */
    roomType?: string;
    /**
     * Flag which tells if this message is Sticky (Y/N).
     * @type {string}
     * @memberof SellMessageType
     */
    stickyFlagYn?: string;
    /**
     * A reference to the type of object defined by the UniqueID elementSpace. Refer to OpenTravel Code List Unique ID Type (UIT).
     * @type {string}
     * @memberof SellMessageType
     */
    type?: string;
    /**
     * 
     * @type {UsedInModuleType}
     * @memberof SellMessageType
     */
    usedInModule?: UsedInModuleType;
}

/**
 * Check if a given object implements the SellMessageType interface.
 */
export function instanceOfSellMessageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SellMessageTypeFromJSON(json: any): SellMessageType {
    return SellMessageTypeFromJSONTyped(json, false);
}

export function SellMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SellMessageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'beginDate': !exists(json, 'beginDate') ? undefined : (new Date(json['beginDate'])),
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'croCode': !exists(json, 'croCode') ? undefined : json['croCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'stickyFlagYn': !exists(json, 'stickyFlagYn') ? undefined : json['stickyFlagYn'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'usedInModule': !exists(json, 'usedInModule') ? undefined : UsedInModuleTypeFromJSON(json['usedInModule']),
    };
}

export function SellMessageTypeToJSON(value?: SellMessageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'beginDate': value.beginDate === undefined ? undefined : (value.beginDate.toISOString().substr(0,10)),
        'chainCode': value.chainCode,
        'croCode': value.croCode,
        'hotelId': value.hotelId,
        'id': value.id,
        'idContext': value.idContext,
        'instance': value.instance,
        'languageCode': value.languageCode,
        'message': value.message,
        'ratePlanCode': value.ratePlanCode,
        'roomType': value.roomType,
        'stickyFlagYn': value.stickyFlagYn,
        'type': value.type,
        'usedInModule': UsedInModuleTypeToJSON(value.usedInModule),
    };
}

