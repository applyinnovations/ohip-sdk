"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockCateringPackageTypeToJSON = exports.BlockCateringPackageTypeFromJSONTyped = exports.BlockCateringPackageTypeFromJSON = exports.instanceOfBlockCateringPackageType = void 0;
const runtime_1 = require("../runtime");
const CateringEventsAttendeesType_1 = require("./CateringEventsAttendeesType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const TranslationTextType200_1 = require("./TranslationTextType200");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the BlockCateringPackageType interface.
 */
function instanceOfBlockCateringPackageType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockCateringPackageType = instanceOfBlockCateringPackageType;
function BlockCateringPackageTypeFromJSON(json) {
    return BlockCateringPackageTypeFromJSONTyped(json, false);
}
exports.BlockCateringPackageTypeFromJSON = BlockCateringPackageTypeFromJSON;
function BlockCateringPackageTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'attendees': !(0, runtime_1.exists)(json, 'attendees') ? undefined : (0, CateringEventsAttendeesType_1.CateringEventsAttendeesTypeFromJSON)(json['attendees']),
        'beginDate': !(0, runtime_1.exists)(json, 'beginDate') ? undefined : (new Date(json['beginDate'])),
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['blockId']),
        'cateringPackageRemovable': !(0, runtime_1.exists)(json, 'cateringPackageRemovable') ? undefined : json['cateringPackageRemovable'],
        'duration': !(0, runtime_1.exists)(json, 'duration') ? undefined : json['duration'],
        'flatRate': !(0, runtime_1.exists)(json, 'flatRate') ? undefined : json['flatRate'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'nonPackagedResourcesExist': !(0, runtime_1.exists)(json, 'nonPackagedResourcesExist') ? undefined : json['nonPackagedResourcesExist'],
        'packageActual': !(0, runtime_1.exists)(json, 'packageActual') ? undefined : json['packageActual'],
        'packageCode': !(0, runtime_1.exists)(json, 'packageCode') ? undefined : json['packageCode'],
        'packageHotelCode': !(0, runtime_1.exists)(json, 'packageHotelCode') ? undefined : json['packageHotelCode'],
        'packageId': !(0, runtime_1.exists)(json, 'packageId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['packageId']),
        'price': !(0, runtime_1.exists)(json, 'price') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['price']),
        'priceCode': !(0, runtime_1.exists)(json, 'priceCode') ? undefined : json['priceCode'],
        'priceDescription': !(0, runtime_1.exists)(json, 'priceDescription') ? undefined : json['priceDescription'],
        'rentalCode': !(0, runtime_1.exists)(json, 'rentalCode') ? undefined : json['rentalCode'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'translatableDescription': !(0, runtime_1.exists)(json, 'translatableDescription') ? undefined : (0, TranslationTextType200_1.TranslationTextType200FromJSON)(json['translatableDescription']),
    };
}
exports.BlockCateringPackageTypeFromJSONTyped = BlockCateringPackageTypeFromJSONTyped;
function BlockCateringPackageTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'attendees': (0, CateringEventsAttendeesType_1.CateringEventsAttendeesTypeToJSON)(value.attendees),
        'beginDate': value.beginDate === undefined ? undefined : (value.beginDate.toISOString().substr(0, 10)),
        'blockId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.blockId),
        'cateringPackageRemovable': value.cateringPackageRemovable,
        'duration': value.duration,
        'flatRate': value.flatRate,
        'hotelId': value.hotelId,
        'nonPackagedResourcesExist': value.nonPackagedResourcesExist,
        'packageActual': value.packageActual,
        'packageCode': value.packageCode,
        'packageHotelCode': value.packageHotelCode,
        'packageId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.packageId),
        'price': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.price),
        'priceCode': value.priceCode,
        'priceDescription': value.priceDescription,
        'rentalCode': value.rentalCode,
        'status': value.status,
        'translatableDescription': (0, TranslationTextType200_1.TranslationTextType200ToJSON)(value.translatableDescription),
    };
}
exports.BlockCateringPackageTypeToJSON = BlockCateringPackageTypeToJSON;
