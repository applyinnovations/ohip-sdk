"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationTextType200ToJSON = exports.TranslationTextType200FromJSONTyped = exports.TranslationTextType200FromJSON = exports.instanceOfTranslationTextType200 = void 0;
const runtime_1 = require("../runtime");
const TranslationsTextTypeInner_1 = require("./TranslationsTextTypeInner");
/**
 * Check if a given object implements the TranslationTextType200 interface.
 */
function instanceOfTranslationTextType200(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTranslationTextType200 = instanceOfTranslationTextType200;
function TranslationTextType200FromJSON(json) {
    return TranslationTextType200FromJSONTyped(json, false);
}
exports.TranslationTextType200FromJSON = TranslationTextType200FromJSON;
function TranslationTextType200FromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'defaultText': !(0, runtime_1.exists)(json, 'defaultText') ? undefined : json['defaultText'],
        'translations': !(0, runtime_1.exists)(json, 'translations') ? undefined : (json['translations'].map(TranslationsTextTypeInner_1.TranslationsTextTypeInnerFromJSON)),
    };
}
exports.TranslationTextType200FromJSONTyped = TranslationTextType200FromJSONTyped;
function TranslationTextType200ToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'defaultText': value.defaultText,
        'translations': value.translations === undefined ? undefined : (value.translations.map(TranslationsTextTypeInner_1.TranslationsTextTypeInnerToJSON)),
    };
}
exports.TranslationTextType200ToJSON = TranslationTextType200ToJSON;
