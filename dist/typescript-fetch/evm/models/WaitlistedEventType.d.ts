/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockType } from './BlockType';
import type { CateringEventResourceType } from './CateringEventResourceType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { EventDetailType } from './EventDetailType';
import type { EventFunctionSpaceType } from './EventFunctionSpaceType';
import type { EventInfoType } from './EventInfoType';
import type { EventNoteType } from './EventNoteType';
import type { EventPrimaryInfoType } from './EventPrimaryInfoType';
import type { EventProcessInstructionsType } from './EventProcessInstructionsType';
import type { EventRevenuesInformationType } from './EventRevenuesInformationType';
import type { IndicatorType } from './IndicatorType';
import type { LightEventDetailType } from './LightEventDetailType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Catering Event information.
 * @export
 * @interface WaitlistedEventType
 */
export interface WaitlistedEventType {
    /**
     *
     * @type {EventPrimaryInfoType}
     * @memberof WaitlistedEventType
     */
    eventPrimaryInfo?: EventPrimaryInfoType;
    /**
     *
     * @type {EventDetailType}
     * @memberof WaitlistedEventType
     */
    eventDetail?: EventDetailType;
    /**
     * Event resources information.
     * @type {Array<CateringEventResourceType>}
     * @memberof WaitlistedEventType
     */
    eventResources?: Array<CateringEventResourceType>;
    /**
     *
     * @type {EventProcessInstructionsType}
     * @memberof WaitlistedEventType
     */
    processInstructions?: EventProcessInstructionsType;
    /**
     *
     * @type {BlockType}
     * @memberof WaitlistedEventType
     */
    eventBlockInfo?: BlockType;
    /**
     *
     * @type {EventFunctionSpaceType}
     * @memberof WaitlistedEventType
     */
    functionSpaceInformation?: EventFunctionSpaceType;
    /**
     * Pertain event information.
     * @type {Array<EventNoteType>}
     * @memberof WaitlistedEventType
     */
    eventNotes?: Array<EventNoteType>;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof WaitlistedEventType
     */
    eventIndicators?: Array<IndicatorType>;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof WaitlistedEventType
     */
    onTheBooksRevenue?: CurrencyAmountType;
    /**
     * Pertain event few information about events.
     * @type {Array<LightEventDetailType>}
     * @memberof WaitlistedEventType
     */
    subEventsDetail?: Array<LightEventDetailType>;
    /**
     * Pertain event few information about events.
     * @type {Array<LightEventDetailType>}
     * @memberof WaitlistedEventType
     */
    altEventsDetail?: Array<LightEventDetailType>;
    /**
     *
     * @type {LightEventDetailType}
     * @memberof WaitlistedEventType
     */
    masterEventDetail?: LightEventDetailType;
    /**
     *
     * @type {EventRevenuesInformationType}
     * @memberof WaitlistedEventType
     */
    eventRevenues?: EventRevenuesInformationType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof WaitlistedEventType
     */
    waitlistId?: UniqueIDType;
    /**
     * Waitlist priority to determine event that gets function space when it becomes available.
     * @type {number}
     * @memberof WaitlistedEventType
     */
    priority?: number;
    /**
     * Pertain event information.
     * @type {Array<EventInfoType>}
     * @memberof WaitlistedEventType
     */
    currentEventsHoldingFunctionSpace?: Array<EventInfoType>;
    /**
     * Date when function space got waitlisted.
     * @type {string}
     * @memberof WaitlistedEventType
     */
    waitlistDate?: string;
    /**
     * User id who modified the waitlist record.
     * @type {number}
     * @memberof WaitlistedEventType
     */
    updateUser?: number;
    /**
     * Date when waitlist was modified.
     * @type {string}
     * @memberof WaitlistedEventType
     */
    updateDate?: string;
}
/**
 * Check if a given object implements the WaitlistedEventType interface.
 */
export declare function instanceOfWaitlistedEventType(value: object): boolean;
export declare function WaitlistedEventTypeFromJSON(json: any): WaitlistedEventType;
export declare function WaitlistedEventTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitlistedEventType;
export declare function WaitlistedEventTypeToJSON(value?: WaitlistedEventType | null): any;
