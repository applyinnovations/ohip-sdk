"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionSpaceAvailabilityTypeToJSON = exports.FunctionSpaceAvailabilityTypeFromJSONTyped = exports.FunctionSpaceAvailabilityTypeFromJSON = exports.instanceOfFunctionSpaceAvailabilityType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the FunctionSpaceAvailabilityType interface.
 */
function instanceOfFunctionSpaceAvailabilityType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFunctionSpaceAvailabilityType = instanceOfFunctionSpaceAvailabilityType;
function FunctionSpaceAvailabilityTypeFromJSON(json) {
    return FunctionSpaceAvailabilityTypeFromJSONTyped(json, false);
}
exports.FunctionSpaceAvailabilityTypeFromJSON = FunctionSpaceAvailabilityTypeFromJSON;
function FunctionSpaceAvailabilityTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'available': !(0, runtime_1.exists)(json, 'available') ? undefined : json['available'],
        'comboSpace': !(0, runtime_1.exists)(json, 'comboSpace') ? undefined : json['comboSpace'],
        'elementSpace': !(0, runtime_1.exists)(json, 'elementSpace') ? undefined : json['elementSpace'],
        'floor': !(0, runtime_1.exists)(json, 'floor') ? undefined : json['floor'],
        'forceAlternate': !(0, runtime_1.exists)(json, 'forceAlternate') ? undefined : json['forceAlternate'],
        'fullUtilizationTime': !(0, runtime_1.exists)(json, 'fullUtilizationTime') ? undefined : json['fullUtilizationTime'],
        'handicapFacilities': !(0, runtime_1.exists)(json, 'handicapFacilities') ? undefined : json['handicapFacilities'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'location': !(0, runtime_1.exists)(json, 'location') ? undefined : json['location'],
        'orderBy1': !(0, runtime_1.exists)(json, 'orderBy1') ? undefined : json['orderBy1'],
        'orderBy2': !(0, runtime_1.exists)(json, 'orderBy2') ? undefined : json['orderBy2'],
        'orderBy3': !(0, runtime_1.exists)(json, 'orderBy3') ? undefined : json['orderBy3'],
        'psuedoRoomType': !(0, runtime_1.exists)(json, 'psuedoRoomType') ? undefined : json['psuedoRoomType'],
        'roomCode': !(0, runtime_1.exists)(json, 'roomCode') ? undefined : json['roomCode'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'shareable': !(0, runtime_1.exists)(json, 'shareable') ? undefined : json['shareable'],
        'shortName': !(0, runtime_1.exists)(json, 'shortName') ? undefined : json['shortName'],
        'spaceName': !(0, runtime_1.exists)(json, 'spaceName') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['spaceName']),
        'spaceType': !(0, runtime_1.exists)(json, 'spaceType') ? undefined : json['spaceType'],
        'suggestedRateAmount': !(0, runtime_1.exists)(json, 'suggestedRateAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['suggestedRateAmount']),
        'suggestedRateCode': !(0, runtime_1.exists)(json, 'suggestedRateCode') ? undefined : json['suggestedRateCode'],
        'suggestedSetupCode': !(0, runtime_1.exists)(json, 'suggestedSetupCode') ? undefined : json['suggestedSetupCode'],
        'webBookable': !(0, runtime_1.exists)(json, 'webBookable') ? undefined : json['webBookable'],
        'webViewable': !(0, runtime_1.exists)(json, 'webViewable') ? undefined : json['webViewable'],
    };
}
exports.FunctionSpaceAvailabilityTypeFromJSONTyped = FunctionSpaceAvailabilityTypeFromJSONTyped;
function FunctionSpaceAvailabilityTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'available': value.available,
        'comboSpace': value.comboSpace,
        'elementSpace': value.elementSpace,
        'floor': value.floor,
        'forceAlternate': value.forceAlternate,
        'fullUtilizationTime': value.fullUtilizationTime,
        'handicapFacilities': value.handicapFacilities,
        'hotelId': value.hotelId,
        'location': value.location,
        'orderBy1': value.orderBy1,
        'orderBy2': value.orderBy2,
        'orderBy3': value.orderBy3,
        'psuedoRoomType': value.psuedoRoomType,
        'roomCode': value.roomCode,
        'roomType': value.roomType,
        'shareable': value.shareable,
        'shortName': value.shortName,
        'spaceName': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.spaceName),
        'spaceType': value.spaceType,
        'suggestedRateAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.suggestedRateAmount),
        'suggestedRateCode': value.suggestedRateCode,
        'suggestedSetupCode': value.suggestedSetupCode,
        'webBookable': value.webBookable,
        'webViewable': value.webViewable,
    };
}
exports.FunctionSpaceAvailabilityTypeToJSON = FunctionSpaceAvailabilityTypeToJSON;
