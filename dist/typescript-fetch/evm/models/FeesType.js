"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeesTypeToJSON = exports.FeesTypeFromJSONTyped = exports.FeesTypeFromJSON = exports.instanceOfFeesType = void 0;
const runtime_1 = require("../runtime");
const FeeType_1 = require("./FeeType");
/**
 * Check if a given object implements the FeesType interface.
 */
function instanceOfFeesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFeesType = instanceOfFeesType;
function FeesTypeFromJSON(json) {
    return FeesTypeFromJSONTyped(json, false);
}
exports.FeesTypeFromJSON = FeesTypeFromJSON;
function FeesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'fee': !(0, runtime_1.exists)(json, 'fee') ? undefined : (json['fee'].map(FeeType_1.FeeTypeFromJSON)),
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
    };
}
exports.FeesTypeFromJSONTyped = FeesTypeFromJSONTyped;
function FeesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'fee': value.fee === undefined ? undefined : (value.fee.map(FeeType_1.FeeTypeToJSON)),
        'amount': value.amount,
        'currencyCode': value.currencyCode,
    };
}
exports.FeesTypeToJSON = FeesTypeToJSON;
