/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EventItemTypeSellInfo } from './EventItemTypeSellInfo';
import type { EventResourceNoteType } from './EventResourceNoteType';
import type { ItemAttributeType } from './ItemAttributeType';
import type { ItemRateType } from './ItemRateType';
import type { ItemVendorType } from './ItemVendorType';
import type { TranslationTextType200 } from './TranslationTextType200';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Inventory Items identification details.
 * @export
 * @interface EventItemType
 */
export interface EventItemType {
    /**
     * The Hotel code which the item belongs to.
     * @type {string}
     * @memberof EventItemType
     */
    hotelId?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventItemType
     */
    itemId?: UniqueIDType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventItemType
     */
    itemClassId?: UniqueIDType;
    /**
     * The Item Class Code which the item belongs to.
     * @type {string}
     * @memberof EventItemType
     */
    itemClassCode?: string;
    /**
     * The Description of the Item Class.
     * @type {string}
     * @memberof EventItemType
     */
    itemClassDescription?: string;
    /**
     *
     * @type {TranslationTextType200}
     * @memberof EventItemType
     */
    itemName?: TranslationTextType200;
    /**
     * The Description of the Item.
     * @type {string}
     * @memberof EventItemType
     */
    itemDescription?: string;
    /**
     * The Article Number of the Item.
     * @type {string}
     * @memberof EventItemType
     */
    itemCode?: string;
    /**
     * The Revenue Type of the Item.
     * @type {string}
     * @memberof EventItemType
     */
    revenueType?: string;
    /**
     * If true, the revenue could be changed.
     * @type {boolean}
     * @memberof EventItemType
     */
    revenueTypeEditable?: boolean;
    /**
     * Flag to define if the inventory item can be ordered externally when the item is marked as critical.
     * @type {boolean}
     * @memberof EventItemType
     */
    externalOrder?: boolean;
    /**
     * The Revenue Type of the Item.
     * @type {boolean}
     * @memberof EventItemType
     */
    print?: boolean;
    /**
     *
     * @type {EventItemTypeSellInfo}
     * @memberof EventItemType
     */
    sellInfo?: EventItemTypeSellInfo;
    /**
     * Setup Time of the Item in minutes.
     * @type {number}
     * @memberof EventItemType
     */
    setupTime?: number;
    /**
     * Setdown Time of the Item in minutes.
     * @type {number}
     * @memberof EventItemType
     */
    setdownTime?: number;
    /**
     * The Trace Text of the Item.
     * @type {string}
     * @memberof EventItemType
     */
    traceText?: string;
    /**
     * The Item Pool description of the Item.
     * @type {string}
     * @memberof EventItemType
     */
    itemPool?: string;
    /**
     * The display sequence of the Item.
     * @type {number}
     * @memberof EventItemType
     */
    displaySequence?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof EventItemType
     */
    eventTypes?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EventItemType
     */
    departments?: Array<string>;
    /**
     * List of Item Attributes.
     * @type {Array<ItemAttributeType>}
     * @memberof EventItemType
     */
    attributes?: Array<ItemAttributeType>;
    /**
     * List of Item Rates.
     * @type {Array<ItemRateType>}
     * @memberof EventItemType
     */
    rates?: Array<ItemRateType>;
    /**
     * List of Item Vendors.
     * @type {Array<ItemVendorType>}
     * @memberof EventItemType
     */
    vendors?: Array<ItemVendorType>;
    /**
     * Contains event resource comment information.
     * @type {Array<EventResourceNoteType>}
     * @memberof EventItemType
     */
    resourceNotes?: Array<EventResourceNoteType>;
    /**
     * Display sequence of Item Class.
     * @type {number}
     * @memberof EventItemType
     */
    itemClassDisplaySequence?: number;
    /**
     * If true, the item is used for events.
     * @type {boolean}
     * @memberof EventItemType
     */
    usedForEvents?: boolean;
    /**
     * If true, the item is used for reservation.
     * @type {boolean}
     * @memberof EventItemType
     */
    usedForReservation?: boolean;
    /**
     * Indicates whether Item is from a Template or not.
     * @type {boolean}
     * @memberof EventItemType
     */
    itemFromTemplate?: boolean;
    /**
     * The quantity of this item required by the event.
     * @type {number}
     * @memberof EventItemType
     */
    quantity?: number;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventItemType
     */
    attributeId?: UniqueIDType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventItemType
     */
    itemRateId?: UniqueIDType;
    /**
     * For Custom rate codes, this indicates the item price.
     * @type {number}
     * @memberof EventItemType
     */
    price?: number;
    /**
     * Discount to be applied to the price.
     * @type {number}
     * @memberof EventItemType
     */
    discount?: number;
    /**
     * Price Code to be selected from the list of configured codes available for this item
     * @type {string}
     * @memberof EventItemType
     */
    priceCode?: string;
    /**
     * Internal Quantity can be all or part of the total quantity
     * @type {number}
     * @memberof EventItemType
     */
    internalQuantity?: number;
    /**
     * External Quantity can be all or part of the total quantity of this item needs to be booked through external sources, this field shows the number booked
     * @type {number}
     * @memberof EventItemType
     */
    externalQuantity?: number;
    /**
     * Actual quantity of the item booked from internal resources
     * @type {number}
     * @memberof EventItemType
     */
    actualInternalQuantity?: number;
    /**
     * Actual quantity of the item booked through external sources with corresponding cost
     * @type {number}
     * @memberof EventItemType
     */
    actualExternalQuantity?: number;
    /**
     * Shows the internal cost of the item.If a cost has been configured for the item it will be automatically populated into this field
     * @type {number}
     * @memberof EventItemType
     */
    internalCostPerUnit?: number;
    /**
     * Shows the price the external source charges for the item
     * @type {number}
     * @memberof EventItemType
     */
    externalCostPerUnit?: number;
    /**
     * Shows the internal cost of the item. If a booked internal cost has been entered for the item, it will be automatically populated into this field
     * @type {number}
     * @memberof EventItemType
     */
    actualInternalCostPerUnit?: number;
    /**
     * Shows the external cost of the item. If a booked external cost has been entered for the item, it will be automatically populated into this field
     * @type {number}
     * @memberof EventItemType
     */
    actualExternalCostPerUnit?: number;
    /**
     * Order in which the item is displayed and printed within the non-Food and Beverage item group and its Item Class.Defaults to the sequence number in which the item was attached to the Event.
     * @type {number}
     * @memberof EventItemType
     */
    order?: number;
    /**
     * The total actual quantity of the item on event actualization.
     * @type {number}
     * @memberof EventItemType
     */
    actualQuantity?: number;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventItemType
     */
    packageId?: UniqueIDType;
    /**
     * Flag to check if the Event Item Name is a Custom Name
     * @type {boolean}
     * @memberof EventItemType
     */
    isNameCustom?: boolean;
    /**
     * Flag to check if the Event Item is ExcludeNonDeduct
     * @type {boolean}
     * @memberof EventItemType
     */
    isExcludeNonDeduct?: boolean;
    /**
     * This indicates the vendor price.
     * @type {number}
     * @memberof EventItemType
     */
    vendorPrice?: number;
    /**
     * The starting value of the time span.
     * @type {string}
     * @memberof EventItemType
     */
    eventStartDate?: string;
    /**
     * The ending value of the time span.
     * @type {string}
     * @memberof EventItemType
     */
    eventEndDate?: string;
}
/**
 * Check if a given object implements the EventItemType interface.
 */
export declare function instanceOfEventItemType(value: object): boolean;
export declare function EventItemTypeFromJSON(json: any): EventItemType;
export declare function EventItemTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventItemType;
export declare function EventItemTypeToJSON(value?: EventItemType | null): any;
