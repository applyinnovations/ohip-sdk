"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventBulkUpdateDetailTypeToJSON = exports.CateringEventBulkUpdateDetailTypeFromJSONTyped = exports.CateringEventBulkUpdateDetailTypeFromJSON = exports.instanceOfCateringEventBulkUpdateDetailType = void 0;
const runtime_1 = require("../runtime");
const BookingStatusType_1 = require("./BookingStatusType");
const TranslationTextType60_1 = require("./TranslationTextType60");
/**
 * Check if a given object implements the CateringEventBulkUpdateDetailType interface.
 */
function instanceOfCateringEventBulkUpdateDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventBulkUpdateDetailType = instanceOfCateringEventBulkUpdateDetailType;
function CateringEventBulkUpdateDetailTypeFromJSON(json) {
    return CateringEventBulkUpdateDetailTypeFromJSONTyped(json, false);
}
exports.CateringEventBulkUpdateDetailTypeFromJSON = CateringEventBulkUpdateDetailTypeFromJSON;
function CateringEventBulkUpdateDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : (0, TranslationTextType60_1.TranslationTextType60FromJSON)(json['eventName']),
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : json['eventType'],
        'eventStatus': !(0, runtime_1.exists)(json, 'eventStatus') ? undefined : (0, BookingStatusType_1.BookingStatusTypeFromJSON)(json['eventStatus']),
        'expectedAttendees': !(0, runtime_1.exists)(json, 'expectedAttendees') ? undefined : json['expectedAttendees'],
        'guaranteedAttendees': !(0, runtime_1.exists)(json, 'guaranteedAttendees') ? undefined : json['guaranteedAttendees'],
        'actualAttendees': !(0, runtime_1.exists)(json, 'actualAttendees') ? undefined : json['actualAttendees'],
        'doorcard': !(0, runtime_1.exists)(json, 'doorcard') ? undefined : json['doorcard'],
        'eventStartDate': !(0, runtime_1.exists)(json, 'eventStartDate') ? undefined : json['eventStartDate'],
        'eventStartTime': !(0, runtime_1.exists)(json, 'eventStartTime') ? undefined : json['eventStartTime'],
        'eventEndDate': !(0, runtime_1.exists)(json, 'eventEndDate') ? undefined : json['eventEndDate'],
        'eventEndTime': !(0, runtime_1.exists)(json, 'eventEndTime') ? undefined : json['eventEndTime'],
        'displayDoorcard': !(0, runtime_1.exists)(json, 'displayDoorcard') ? undefined : json['displayDoorcard'],
        'notMoveable': !(0, runtime_1.exists)(json, 'notMoveable') ? undefined : json['notMoveable'],
        'loudEvent': !(0, runtime_1.exists)(json, 'loudEvent') ? undefined : json['loudEvent'],
        'exclude': !(0, runtime_1.exists)(json, 'exclude') ? undefined : json['exclude'],
        'useForecast': !(0, runtime_1.exists)(json, 'useForecast') ? undefined : json['useForecast'],
        'revenueActualization': !(0, runtime_1.exists)(json, 'revenueActualization') ? undefined : json['revenueActualization'],
    };
}
exports.CateringEventBulkUpdateDetailTypeFromJSONTyped = CateringEventBulkUpdateDetailTypeFromJSONTyped;
function CateringEventBulkUpdateDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventName': (0, TranslationTextType60_1.TranslationTextType60ToJSON)(value.eventName),
        'eventType': value.eventType,
        'eventStatus': (0, BookingStatusType_1.BookingStatusTypeToJSON)(value.eventStatus),
        'expectedAttendees': value.expectedAttendees,
        'guaranteedAttendees': value.guaranteedAttendees,
        'actualAttendees': value.actualAttendees,
        'doorcard': value.doorcard,
        'eventStartDate': value.eventStartDate,
        'eventStartTime': value.eventStartTime,
        'eventEndDate': value.eventEndDate,
        'eventEndTime': value.eventEndTime,
        'displayDoorcard': value.displayDoorcard,
        'notMoveable': value.notMoveable,
        'loudEvent': value.loudEvent,
        'exclude': value.exclude,
        'useForecast': value.useForecast,
        'revenueActualization': value.revenueActualization,
    };
}
exports.CateringEventBulkUpdateDetailTypeToJSON = CateringEventBulkUpdateDetailTypeToJSON;
