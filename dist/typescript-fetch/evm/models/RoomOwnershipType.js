"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomOwnershipTypeToJSON = exports.RoomOwnershipTypeFromJSONTyped = exports.RoomOwnershipTypeFromJSON = exports.instanceOfRoomOwnershipType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the RoomOwnershipType interface.
 */
function instanceOfRoomOwnershipType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomOwnershipType = instanceOfRoomOwnershipType;
function RoomOwnershipTypeFromJSON(json) {
    return RoomOwnershipTypeFromJSONTyped(json, false);
}
exports.RoomOwnershipTypeFromJSON = RoomOwnershipTypeFromJSON;
function RoomOwnershipTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'contractNumber': !(0, runtime_1.exists)(json, 'contractNumber') ? undefined : json['contractNumber'],
        'endDate': !(0, runtime_1.exists)(json, 'endDate') ? undefined : json['endDate'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['profileId']),
        'roomCategory': !(0, runtime_1.exists)(json, 'roomCategory') ? undefined : json['roomCategory'],
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'roomOwnershipId': !(0, runtime_1.exists)(json, 'roomOwnershipId') ? undefined : json['roomOwnershipId'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'startDate': !(0, runtime_1.exists)(json, 'startDate') ? undefined : json['startDate'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
    };
}
exports.RoomOwnershipTypeFromJSONTyped = RoomOwnershipTypeFromJSONTyped;
function RoomOwnershipTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'contractNumber': value.contractNumber,
        'endDate': value.endDate,
        'profileId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.profileId),
        'roomCategory': value.roomCategory,
        'roomId': value.roomId,
        'roomOwnershipId': value.roomOwnershipId,
        'roomType': value.roomType,
        'startDate': value.startDate,
        'status': value.status,
    };
}
exports.RoomOwnershipTypeToJSON = RoomOwnershipTypeToJSON;
