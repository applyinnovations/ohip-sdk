"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBookingInfoTypeToJSON = exports.EventBookingInfoTypeFromJSONTyped = exports.EventBookingInfoTypeFromJSON = exports.instanceOfEventBookingInfoType = void 0;
const runtime_1 = require("../runtime");
const BookingStatusType_1 = require("./BookingStatusType");
const ResGuaranteeType_1 = require("./ResGuaranteeType");
const TimeSpanType_1 = require("./TimeSpanType");
const VIPStatusType_1 = require("./VIPStatusType");
/**
 * Check if a given object implements the EventBookingInfoType interface.
 */
function instanceOfEventBookingInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventBookingInfoType = instanceOfEventBookingInfoType;
function EventBookingInfoTypeFromJSON(json) {
    return EventBookingInfoTypeFromJSONTyped(json, false);
}
exports.EventBookingInfoTypeFromJSON = EventBookingInfoTypeFromJSON;
function EventBookingInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'blockCode': !(0, runtime_1.exists)(json, 'blockCode') ? undefined : json['blockCode'],
        'blockName': !(0, runtime_1.exists)(json, 'blockName') ? undefined : json['blockName'],
        'roomStatus': !(0, runtime_1.exists)(json, 'roomStatus') ? undefined : json['roomStatus'],
        'cateringStatus': !(0, runtime_1.exists)(json, 'cateringStatus') ? undefined : json['cateringStatus'],
        'catDecisionDate': !(0, runtime_1.exists)(json, 'catDecisionDate') ? undefined : json['catDecisionDate'],
        'catFollowUpDate': !(0, runtime_1.exists)(json, 'catFollowUpDate') ? undefined : json['catFollowUpDate'],
        'roomFollowUpDate': !(0, runtime_1.exists)(json, 'roomFollowUpDate') ? undefined : json['roomFollowUpDate'],
        'account': !(0, runtime_1.exists)(json, 'account') ? undefined : json['account'],
        'contact': !(0, runtime_1.exists)(json, 'contact') ? undefined : json['contact'],
        'roomNights': !(0, runtime_1.exists)(json, 'roomNights') ? undefined : json['roomNights'],
        'originalRooms': !(0, runtime_1.exists)(json, 'originalRooms') ? undefined : json['originalRooms'],
        'catOwner': !(0, runtime_1.exists)(json, 'catOwner') ? undefined : json['catOwner'],
        'catOwnerName': !(0, runtime_1.exists)(json, 'catOwnerName') ? undefined : json['catOwnerName'],
        'salesOwner': !(0, runtime_1.exists)(json, 'salesOwner') ? undefined : json['salesOwner'],
        'salesOwnerName': !(0, runtime_1.exists)(json, 'salesOwnerName') ? undefined : json['salesOwnerName'],
        'eventStatus': !(0, runtime_1.exists)(json, 'eventStatus') ? undefined : (0, BookingStatusType_1.BookingStatusTypeFromJSON)(json['eventStatus']),
        'deductInvYn': !(0, runtime_1.exists)(json, 'deductInvYn') ? undefined : json['deductInvYn'],
        'rateProtect': !(0, runtime_1.exists)(json, 'rateProtect') ? undefined : json['rateProtect'],
        'nonCompete': !(0, runtime_1.exists)(json, 'nonCompete') ? undefined : json['nonCompete'],
        'nonCompeteCode': !(0, runtime_1.exists)(json, 'nonCompeteCode') ? undefined : json['nonCompeteCode'],
        'nonCompeteIndustry': !(0, runtime_1.exists)(json, 'nonCompeteIndustry') ? undefined : json['nonCompeteIndustry'],
        'blockDates': !(0, runtime_1.exists)(json, 'blockDates') ? undefined : (json['blockDates'].map(TimeSpanType_1.TimeSpanTypeFromJSON)),
        'vipStatus': !(0, runtime_1.exists)(json, 'vipStatus') ? undefined : (0, VIPStatusType_1.VIPStatusTypeFromJSON)(json['vipStatus']),
        'guarantee': !(0, runtime_1.exists)(json, 'guarantee') ? undefined : (0, ResGuaranteeType_1.ResGuaranteeTypeFromJSON)(json['guarantee']),
        'resvNameId': !(0, runtime_1.exists)(json, 'resvNameId') ? undefined : json['resvNameId'],
        'bookHotelCode': !(0, runtime_1.exists)(json, 'bookHotelCode') ? undefined : json['bookHotelCode'],
        'bookId': !(0, runtime_1.exists)(json, 'bookId') ? undefined : json['bookId'],
        'masterNameId': !(0, runtime_1.exists)(json, 'masterNameId') ? undefined : json['masterNameId'],
        'companyNameId': !(0, runtime_1.exists)(json, 'companyNameId') ? undefined : json['companyNameId'],
    };
}
exports.EventBookingInfoTypeFromJSONTyped = EventBookingInfoTypeFromJSONTyped;
function EventBookingInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'blockCode': value.blockCode,
        'blockName': value.blockName,
        'roomStatus': value.roomStatus,
        'cateringStatus': value.cateringStatus,
        'catDecisionDate': value.catDecisionDate,
        'catFollowUpDate': value.catFollowUpDate,
        'roomFollowUpDate': value.roomFollowUpDate,
        'account': value.account,
        'contact': value.contact,
        'roomNights': value.roomNights,
        'originalRooms': value.originalRooms,
        'catOwner': value.catOwner,
        'catOwnerName': value.catOwnerName,
        'salesOwner': value.salesOwner,
        'salesOwnerName': value.salesOwnerName,
        'eventStatus': (0, BookingStatusType_1.BookingStatusTypeToJSON)(value.eventStatus),
        'deductInvYn': value.deductInvYn,
        'rateProtect': value.rateProtect,
        'nonCompete': value.nonCompete,
        'nonCompeteCode': value.nonCompeteCode,
        'nonCompeteIndustry': value.nonCompeteIndustry,
        'blockDates': value.blockDates === undefined ? undefined : (value.blockDates.map(TimeSpanType_1.TimeSpanTypeToJSON)),
        'vipStatus': (0, VIPStatusType_1.VIPStatusTypeToJSON)(value.vipStatus),
        'guarantee': (0, ResGuaranteeType_1.ResGuaranteeTypeToJSON)(value.guarantee),
        'resvNameId': value.resvNameId,
        'bookHotelCode': value.bookHotelCode,
        'bookId': value.bookId,
        'masterNameId': value.masterNameId,
        'companyNameId': value.companyNameId,
    };
}
exports.EventBookingInfoTypeToJSON = EventBookingInfoTypeToJSON;
