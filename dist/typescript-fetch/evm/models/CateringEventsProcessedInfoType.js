"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventsProcessedInfoTypeToJSON = exports.CateringEventsProcessedInfoTypeFromJSONTyped = exports.CateringEventsProcessedInfoTypeFromJSON = exports.instanceOfCateringEventsProcessedInfoType = void 0;
const runtime_1 = require("../runtime");
const BlockId_1 = require("./BlockId");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
/**
 * Check if a given object implements the CateringEventsProcessedInfoType interface.
 */
function instanceOfCateringEventsProcessedInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventsProcessedInfoType = instanceOfCateringEventsProcessedInfoType;
function CateringEventsProcessedInfoTypeFromJSON(json) {
    return CateringEventsProcessedInfoTypeFromJSONTyped(json, false);
}
exports.CateringEventsProcessedInfoTypeFromJSON = CateringEventsProcessedInfoTypeFromJSON;
function CateringEventsProcessedInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, BlockId_1.BlockIdFromJSON)(json['blockId']),
        'eventDate': !(0, runtime_1.exists)(json, 'eventDate') ? undefined : json['eventDate'],
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : json['eventName'],
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : json['eventType'],
        'functionSpaceDetails': !(0, runtime_1.exists)(json, 'functionSpaceDetails') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['functionSpaceDetails']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'processingInfoCode': !(0, runtime_1.exists)(json, 'processingInfoCode') ? undefined : json['processingInfoCode'],
        'processingInfoType': !(0, runtime_1.exists)(json, 'processingInfoType') ? undefined : json['processingInfoType'],
        'reason': !(0, runtime_1.exists)(json, 'reason') ? undefined : json['reason'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
    };
}
exports.CateringEventsProcessedInfoTypeFromJSONTyped = CateringEventsProcessedInfoTypeFromJSONTyped;
function CateringEventsProcessedInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'blockId': (0, BlockId_1.BlockIdToJSON)(value.blockId),
        'eventDate': value.eventDate,
        'eventName': value.eventName,
        'eventType': value.eventType,
        'functionSpaceDetails': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.functionSpaceDetails),
        'hotelId': value.hotelId,
        'processingInfoCode': value.processingInfoCode,
        'processingInfoType': value.processingInfoType,
        'reason': value.reason,
        'status': value.status,
    };
}
exports.CateringEventsProcessedInfoTypeToJSON = CateringEventsProcessedInfoTypeToJSON;
