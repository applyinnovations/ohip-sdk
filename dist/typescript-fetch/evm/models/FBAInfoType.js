"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FBAInfoTypeToJSON = exports.FBAInfoTypeFromJSONTyped = exports.FBAInfoTypeFromJSON = exports.instanceOfFBAInfoType = void 0;
const runtime_1 = require("../runtime");
const FBAStatusType_1 = require("./FBAStatusType");
/**
 * Check if a given object implements the FBAInfoType interface.
 */
function instanceOfFBAInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFBAInfoType = instanceOfFBAInfoType;
function FBAInfoTypeFromJSON(json) {
    return FBAInfoTypeFromJSONTyped(json, false);
}
exports.FBAInfoTypeFromJSON = FBAInfoTypeFromJSON;
function FBAInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
        'currencySymbol': !(0, runtime_1.exists)(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'decimalPlaces': !(0, runtime_1.exists)(json, 'decimalPlaces') ? undefined : json['decimalPlaces'],
        'fbaBillGenDate': !(0, runtime_1.exists)(json, 'fbaBillGenDate') ? undefined : (new Date(json['fbaBillGenDate'])),
        'flexibleBenefitAward': !(0, runtime_1.exists)(json, 'flexibleBenefitAward') ? undefined : json['flexibleBenefitAward'],
        'monetaryValue': !(0, runtime_1.exists)(json, 'monetaryValue') ? undefined : json['monetaryValue'],
        'orphanCertificate': !(0, runtime_1.exists)(json, 'orphanCertificate') ? undefined : json['orphanCertificate'],
        'posted': !(0, runtime_1.exists)(json, 'posted') ? undefined : json['posted'],
        'postedAmount': !(0, runtime_1.exists)(json, 'postedAmount') ? undefined : json['postedAmount'],
        'postingBusinessDate': !(0, runtime_1.exists)(json, 'postingBusinessDate') ? undefined : (new Date(json['postingBusinessDate'])),
        'postingDateTime': !(0, runtime_1.exists)(json, 'postingDateTime') ? undefined : (new Date(json['postingDateTime'])),
        'reimburseAllowed': !(0, runtime_1.exists)(json, 'reimburseAllowed') ? undefined : json['reimburseAllowed'],
        'reimbursed': !(0, runtime_1.exists)(json, 'reimbursed') ? undefined : json['reimbursed'],
        'reimbursedAmount': !(0, runtime_1.exists)(json, 'reimbursedAmount') ? undefined : json['reimbursedAmount'],
        'reimbursementBusinessDate': !(0, runtime_1.exists)(json, 'reimbursementBusinessDate') ? undefined : (new Date(json['reimbursementBusinessDate'])),
        'reimbursementDateTime': !(0, runtime_1.exists)(json, 'reimbursementDateTime') ? undefined : (new Date(json['reimbursementDateTime'])),
        'resettleAllowed': !(0, runtime_1.exists)(json, 'resettleAllowed') ? undefined : json['resettleAllowed'],
        'settled': !(0, runtime_1.exists)(json, 'settled') ? undefined : json['settled'],
        'settlementBusinessDate': !(0, runtime_1.exists)(json, 'settlementBusinessDate') ? undefined : (new Date(json['settlementBusinessDate'])),
        'settlementDateTime': !(0, runtime_1.exists)(json, 'settlementDateTime') ? undefined : (new Date(json['settlementDateTime'])),
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, FBAStatusType_1.FBAStatusTypeFromJSON)(json['status']),
    };
}
exports.FBAInfoTypeFromJSONTyped = FBAInfoTypeFromJSONTyped;
function FBAInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': value.amount,
        'currencyCode': value.currencyCode,
        'currencySymbol': value.currencySymbol,
        'decimalPlaces': value.decimalPlaces,
        'fbaBillGenDate': value.fbaBillGenDate === undefined ? undefined : (value.fbaBillGenDate.toISOString().substr(0, 10)),
        'flexibleBenefitAward': value.flexibleBenefitAward,
        'monetaryValue': value.monetaryValue,
        'orphanCertificate': value.orphanCertificate,
        'posted': value.posted,
        'postedAmount': value.postedAmount,
        'postingBusinessDate': value.postingBusinessDate === undefined ? undefined : (value.postingBusinessDate.toISOString().substr(0, 10)),
        'postingDateTime': value.postingDateTime === undefined ? undefined : (value.postingDateTime.toISOString().substr(0, 10)),
        'reimburseAllowed': value.reimburseAllowed,
        'reimbursed': value.reimbursed,
        'reimbursedAmount': value.reimbursedAmount,
        'reimbursementBusinessDate': value.reimbursementBusinessDate === undefined ? undefined : (value.reimbursementBusinessDate.toISOString().substr(0, 10)),
        'reimbursementDateTime': value.reimbursementDateTime === undefined ? undefined : (value.reimbursementDateTime.toISOString().substr(0, 10)),
        'resettleAllowed': value.resettleAllowed,
        'settled': value.settled,
        'settlementBusinessDate': value.settlementBusinessDate === undefined ? undefined : (value.settlementBusinessDate.toISOString().substr(0, 10)),
        'settlementDateTime': value.settlementDateTime === undefined ? undefined : (value.settlementDateTime.toISOString().substr(0, 10)),
        'status': (0, FBAStatusType_1.FBAStatusTypeToJSON)(value.status),
    };
}
exports.FBAInfoTypeToJSON = FBAInfoTypeToJSON;
