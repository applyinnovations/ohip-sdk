/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { BlockRestrictionType } from './BlockRestrictionType';
import {
    BlockRestrictionTypeFromJSON,
    BlockRestrictionTypeFromJSONTyped,
    BlockRestrictionTypeToJSON,
} from './BlockRestrictionType';

/**
 * List of restrictions belonging to a block.
 * @export
 * @interface BlockRestrictionsType
 */
export interface BlockRestrictionsType {
    /**
     * 
     * @type {BlockId}
     * @memberof BlockRestrictionsType
     */
    blockId?: BlockId;
    /**
     * Block restriction details.
     * @type {Array<BlockRestrictionType>}
     * @memberof BlockRestrictionsType
     */
    blockRestriction?: Array<BlockRestrictionType>;
    /**
     * Hotel to which the block belongs to.
     * @type {string}
     * @memberof BlockRestrictionsType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the BlockRestrictionsType interface.
 */
export function instanceOfBlockRestrictionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockRestrictionsTypeFromJSON(json: any): BlockRestrictionsType {
    return BlockRestrictionsTypeFromJSONTyped(json, false);
}

export function BlockRestrictionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockRestrictionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'blockRestriction': !exists(json, 'blockRestriction') ? undefined : ((json['blockRestriction'] as Array<any>).map(BlockRestrictionTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function BlockRestrictionsTypeToJSON(value?: BlockRestrictionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockId': BlockIdToJSON(value.blockId),
        'blockRestriction': value.blockRestriction === undefined ? undefined : ((value.blockRestriction as Array<any>).map(BlockRestrictionTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

