/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
import type { EventId } from './EventId';
import type { TransactionActionEnumType } from './TransactionActionEnumType';
/**
 * Event information for changed events by date time
 * @export
 * @interface EventChangesByDateTimeSummaryType
 */
export interface EventChangesByDateTimeSummaryType {
    /**
     * The hotel code for changed event by date time.
     * @type {string}
     * @memberof EventChangesByDateTimeSummaryType
     */
    hotelId?: string;
    /**
     *
     * @type {BlockId}
     * @memberof EventChangesByDateTimeSummaryType
     */
    blockId?: BlockId;
    /**
     *
     * @type {EventId}
     * @memberof EventChangesByDateTimeSummaryType
     */
    eventId?: EventId;
    /**
     * The start date for changed event by date time.
     * @type {string}
     * @memberof EventChangesByDateTimeSummaryType
     */
    startDate?: string;
    /**
     * The end date for changed event by date time.
     * @type {string}
     * @memberof EventChangesByDateTimeSummaryType
     */
    endDate?: string;
    /**
     * Status of the event.
     * @type {string}
     * @memberof EventChangesByDateTimeSummaryType
     */
    eventStatus?: string;
    /**
     * Last change date and time for this event.
     * @type {string}
     * @memberof EventChangesByDateTimeSummaryType
     */
    lastChangeDateTime?: string;
    /**
     *
     * @type {TransactionActionEnumType}
     * @memberof EventChangesByDateTimeSummaryType
     */
    actionType?: TransactionActionEnumType;
}
/**
 * Check if a given object implements the EventChangesByDateTimeSummaryType interface.
 */
export declare function instanceOfEventChangesByDateTimeSummaryType(value: object): boolean;
export declare function EventChangesByDateTimeSummaryTypeFromJSON(json: any): EventChangesByDateTimeSummaryType;
export declare function EventChangesByDateTimeSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventChangesByDateTimeSummaryType;
export declare function EventChangesByDateTimeSummaryTypeToJSON(value?: EventChangesByDateTimeSummaryType | null): any;
