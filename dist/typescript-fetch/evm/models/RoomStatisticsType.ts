/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RoomStatisticsType
 */
export interface RoomStatisticsType {
    /**
     * The total number of rooms.
     * @type {number}
     * @memberof RoomStatisticsType
     */
    roomCount?: number;
    /**
     * The total revenue for the rooms.
     * @type {number}
     * @memberof RoomStatisticsType
     */
    roomRevenue?: number;
    /**
     * The average rate per functionSpaceDetails.
     * @type {number}
     * @memberof RoomStatisticsType
     */
    averageRate?: number;
}

/**
 * Check if a given object implements the RoomStatisticsType interface.
 */
export function instanceOfRoomStatisticsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomStatisticsTypeFromJSON(json: any): RoomStatisticsType {
    return RoomStatisticsTypeFromJSONTyped(json, false);
}

export function RoomStatisticsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomStatisticsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomCount': !exists(json, 'roomCount') ? undefined : json['roomCount'],
        'roomRevenue': !exists(json, 'roomRevenue') ? undefined : json['roomRevenue'],
        'averageRate': !exists(json, 'averageRate') ? undefined : json['averageRate'],
    };
}

export function RoomStatisticsTypeToJSON(value?: RoomStatisticsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomCount': value.roomCount,
        'roomRevenue': value.roomRevenue,
        'averageRate': value.averageRate,
    };
}

