"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportInfoTypeToJSON = exports.TransportInfoTypeFromJSONTyped = exports.TransportInfoTypeFromJSON = exports.instanceOfTransportInfoType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the TransportInfoType interface.
 */
function instanceOfTransportInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTransportInfoType = instanceOfTransportInfoType;
function TransportInfoTypeFromJSON(json) {
    return TransportInfoTypeFromJSONTyped(json, false);
}
exports.TransportInfoTypeFromJSON = TransportInfoTypeFromJSON;
function TransportInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'carrierCode': !(0, runtime_1.exists)(json, 'carrierCode') ? undefined : json['carrierCode'],
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'dateTime': !(0, runtime_1.exists)(json, 'dateTime') ? undefined : json['dateTime'],
        'stationCode': !(0, runtime_1.exists)(json, 'stationCode') ? undefined : json['stationCode'],
        'transportCode': !(0, runtime_1.exists)(json, 'transportCode') ? undefined : json['transportCode'],
        'transportationReqd': !(0, runtime_1.exists)(json, 'transportationReqd') ? undefined : json['transportationReqd'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
    };
}
exports.TransportInfoTypeFromJSONTyped = TransportInfoTypeFromJSONTyped;
function TransportInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'carrierCode': value.carrierCode,
        'comments': value.comments,
        'dateTime': value.dateTime,
        'stationCode': value.stationCode,
        'transportCode': value.transportCode,
        'transportationReqd': value.transportationReqd,
        'type': value.type,
    };
}
exports.TransportInfoTypeToJSON = TransportInfoTypeToJSON;
