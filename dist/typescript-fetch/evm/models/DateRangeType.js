"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangeTypeToJSON = exports.DateRangeTypeFromJSONTyped = exports.DateRangeTypeFromJSON = exports.instanceOfDateRangeType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the DateRangeType interface.
 */
function instanceOfDateRangeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDateRangeType = instanceOfDateRangeType;
function DateRangeTypeFromJSON(json) {
    return DateRangeTypeFromJSONTyped(json, false);
}
exports.DateRangeTypeFromJSON = DateRangeTypeFromJSON;
function DateRangeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventEndDate': !(0, runtime_1.exists)(json, 'eventEndDate') ? undefined : (new Date(json['eventEndDate'])),
        'eventStartDate': !(0, runtime_1.exists)(json, 'eventStartDate') ? undefined : (new Date(json['eventStartDate'])),
    };
}
exports.DateRangeTypeFromJSONTyped = DateRangeTypeFromJSONTyped;
function DateRangeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventEndDate': value.eventEndDate === undefined ? undefined : (value.eventEndDate.toISOString().substring(0, 10)),
        'eventStartDate': value.eventStartDate === undefined ? undefined : (value.eventStartDate.toISOString().substring(0, 10)),
    };
}
exports.DateRangeTypeToJSON = DateRangeTypeToJSON;
