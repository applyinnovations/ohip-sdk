/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';

/**
 * 
 * @export
 * @interface TraceTimeInfoType
 */
export interface TraceTimeInfoType {
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof TraceTimeInfoType
     */
    dateTimeSpan?: DateTimeSpanType;
    /**
     * Date of the trace.
     * @type {string}
     * @memberof TraceTimeInfoType
     */
    traceOn?: string;
    /**
     * Time of the trace
     * @type {string}
     * @memberof TraceTimeInfoType
     */
    traceTime?: string;
    /**
     * User that entered this trace.
     * @type {string}
     * @memberof TraceTimeInfoType
     */
    enteredBy?: string;
}

/**
 * Check if a given object implements the TraceTimeInfoType interface.
 */
export function instanceOfTraceTimeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TraceTimeInfoTypeFromJSON(json: any): TraceTimeInfoType {
    return TraceTimeInfoTypeFromJSONTyped(json, false);
}

export function TraceTimeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceTimeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dateTimeSpan': !exists(json, 'dateTimeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['dateTimeSpan']),
        'traceOn': !exists(json, 'traceOn') ? undefined : json['traceOn'],
        'traceTime': !exists(json, 'traceTime') ? undefined : json['traceTime'],
        'enteredBy': !exists(json, 'enteredBy') ? undefined : json['enteredBy'],
    };
}

export function TraceTimeInfoTypeToJSON(value?: TraceTimeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dateTimeSpan': DateTimeSpanTypeToJSON(value.dateTimeSpan),
        'traceOn': value.traceOn,
        'traceTime': value.traceTime,
        'enteredBy': value.enteredBy,
    };
}

