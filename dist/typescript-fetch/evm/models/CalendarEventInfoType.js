"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventInfoTypeToJSON = exports.CalendarEventInfoTypeFromJSONTyped = exports.CalendarEventInfoTypeFromJSON = exports.instanceOfCalendarEventInfoType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const EventBookingInfoType_1 = require("./EventBookingInfoType");
const EventDisplayType_1 = require("./EventDisplayType");
const TimeSpanType_1 = require("./TimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CalendarEventInfoType interface.
 */
function instanceOfCalendarEventInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCalendarEventInfoType = instanceOfCalendarEventInfoType;
function CalendarEventInfoTypeFromJSON(json) {
    return CalendarEventInfoTypeFromJSONTyped(json, false);
}
exports.CalendarEventInfoTypeFromJSON = CalendarEventInfoTypeFromJSON;
function CalendarEventInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : json['eventName'],
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : json['eventType'],
        'eventBookingInfo': !(0, runtime_1.exists)(json, 'eventBookingInfo') ? undefined : (0, EventBookingInfoType_1.EventBookingInfoTypeFromJSON)(json['eventBookingInfo']),
        'masterEventId': !(0, runtime_1.exists)(json, 'masterEventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['masterEventId']),
        'attendees': !(0, runtime_1.exists)(json, 'attendees') ? undefined : json['attendees'],
        'spaceTimeSpan': !(0, runtime_1.exists)(json, 'spaceTimeSpan') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['spaceTimeSpan']),
        'eventTimeSpan': !(0, runtime_1.exists)(json, 'eventTimeSpan') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['eventTimeSpan']),
        'setupTime': !(0, runtime_1.exists)(json, 'setupTime') ? undefined : json['setupTime'],
        'setdownTime': !(0, runtime_1.exists)(json, 'setdownTime') ? undefined : json['setdownTime'],
        'setupCode': !(0, runtime_1.exists)(json, 'setupCode') ? undefined : json['setupCode'],
        'setupDescription': !(0, runtime_1.exists)(json, 'setupDescription') ? undefined : json['setupDescription'],
        'eventDisplay': !(0, runtime_1.exists)(json, 'eventDisplay') ? undefined : (0, EventDisplayType_1.EventDisplayTypeFromJSON)(json['eventDisplay']),
        'space': !(0, runtime_1.exists)(json, 'space') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['space']),
        'url': !(0, runtime_1.exists)(json, 'url') ? undefined : json['url'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
        'instance': !(0, runtime_1.exists)(json, 'instance') ? undefined : json['instance'],
        'idContext': !(0, runtime_1.exists)(json, 'idContext') ? undefined : json['idContext'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'createdOn': !(0, runtime_1.exists)(json, 'createdOn') ? undefined : json['createdOn'],
        'isComboRoomEventRef': !(0, runtime_1.exists)(json, 'isComboRoomEventRef') ? undefined : json['isComboRoomEventRef'],
        'waitListEventsCount': !(0, runtime_1.exists)(json, 'waitListEventsCount') ? undefined : json['waitListEventsCount'],
        'overbookEventsCount': !(0, runtime_1.exists)(json, 'overbookEventsCount') ? undefined : json['overbookEventsCount'],
        'prospectiveEventsCount': !(0, runtime_1.exists)(json, 'prospectiveEventsCount') ? undefined : json['prospectiveEventsCount'],
    };
}
exports.CalendarEventInfoTypeFromJSONTyped = CalendarEventInfoTypeFromJSONTyped;
function CalendarEventInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventName': value.eventName,
        'eventType': value.eventType,
        'eventBookingInfo': (0, EventBookingInfoType_1.EventBookingInfoTypeToJSON)(value.eventBookingInfo),
        'masterEventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.masterEventId),
        'attendees': value.attendees,
        'spaceTimeSpan': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.spaceTimeSpan),
        'eventTimeSpan': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.eventTimeSpan),
        'setupTime': value.setupTime,
        'setdownTime': value.setdownTime,
        'setupCode': value.setupCode,
        'setupDescription': value.setupDescription,
        'eventDisplay': (0, EventDisplayType_1.EventDisplayTypeToJSON)(value.eventDisplay),
        'space': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.space),
        'url': value.url,
        'type': value.type,
        'instance': value.instance,
        'idContext': value.idContext,
        'id': value.id,
        'createdOn': value.createdOn,
        'isComboRoomEventRef': value.isComboRoomEventRef,
        'waitListEventsCount': value.waitListEventsCount,
        'overbookEventsCount': value.overbookEventsCount,
        'prospectiveEventsCount': value.prospectiveEventsCount,
    };
}
exports.CalendarEventInfoTypeToJSON = CalendarEventInfoTypeToJSON;
