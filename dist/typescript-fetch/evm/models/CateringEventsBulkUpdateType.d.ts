/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CateringEventBulkUpdateDetailType } from './CateringEventBulkUpdateDetailType';
import type { CateringEventBulkUpdateFunctionSpaceType } from './CateringEventBulkUpdateFunctionSpaceType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Collection of Event/Function Space Details and their Event IDs to be updated.
 * @export
 * @interface CateringEventsBulkUpdateType
 */
export interface CateringEventsBulkUpdateType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof CateringEventsBulkUpdateType
     */
    eventIdList?: Array<UniqueIDType>;
    /**
     *
     * @type {CateringEventBulkUpdateDetailType}
     * @memberof CateringEventsBulkUpdateType
     */
    eventRec?: CateringEventBulkUpdateDetailType;
    /**
     *
     * @type {CateringEventBulkUpdateFunctionSpaceType}
     * @memberof CateringEventsBulkUpdateType
     */
    functionSpaceRec?: CateringEventBulkUpdateFunctionSpaceType;
    /**
     * Indicates whether to override warnings for editing multiple events. By default, it is always considered as false and will provide post-change warnings.
     * @type {boolean}
     * @memberof CateringEventsBulkUpdateType
     */
    overrideProcessWarnings?: boolean;
}
/**
 * Check if a given object implements the CateringEventsBulkUpdateType interface.
 */
export declare function instanceOfCateringEventsBulkUpdateType(value: object): boolean;
export declare function CateringEventsBulkUpdateTypeFromJSON(json: any): CateringEventsBulkUpdateType;
export declare function CateringEventsBulkUpdateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventsBulkUpdateType;
export declare function CateringEventsBulkUpdateTypeToJSON(value?: CateringEventsBulkUpdateType | null): any;
