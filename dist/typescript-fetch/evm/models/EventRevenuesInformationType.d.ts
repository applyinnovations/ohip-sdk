/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EventRevenueInformationType } from './EventRevenueInformationType';
/**
 * Collection of revenue information about a catering event.
 * @export
 * @interface EventRevenuesInformationType
 */
export interface EventRevenuesInformationType {
    /**
     * Currency code when base currency of the property is different than the catering currency.
     * @type {string}
     * @memberof EventRevenuesInformationType
     */
    currencyCode?: string;
    /**
     * Flag that indicates if actual revenue can be manually edited.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    eventLevelRevenueActualization?: boolean;
    /**
     * Revenue information about a catering event.
     * @type {Array<EventRevenueInformationType>}
     * @memberof EventRevenuesInformationType
     */
    eventRevenueInformation?: Array<EventRevenueInformationType>;
    /**
     * Flag to indicate if the event revenue should be excluded from the forecast.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    excludeFromForecast?: boolean;
    /**
     * Flag to indicate whether to only use the forecasted values when reporting, regardless of whether resources are booked on an event.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    useForecastRevenue?: boolean;
}
/**
 * Check if a given object implements the EventRevenuesInformationType interface.
 */
export declare function instanceOfEventRevenuesInformationType(value: object): boolean;
export declare function EventRevenuesInformationTypeFromJSON(json: any): EventRevenuesInformationType;
export declare function EventRevenuesInformationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventRevenuesInformationType;
export declare function EventRevenuesInformationTypeToJSON(value?: EventRevenuesInformationType | null): any;
