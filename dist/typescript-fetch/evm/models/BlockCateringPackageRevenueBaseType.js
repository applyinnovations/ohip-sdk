"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockCateringPackageRevenueBaseTypeToJSON = exports.BlockCateringPackageRevenueBaseTypeFromJSONTyped = exports.BlockCateringPackageRevenueBaseTypeFromJSON = exports.instanceOfBlockCateringPackageRevenueBaseType = void 0;
const runtime_1 = require("../runtime");
const BlockCateringPackageRevenueType_1 = require("./BlockCateringPackageRevenueType");
const BlockType_1 = require("./BlockType");
const CateringPackageInfoType_1 = require("./CateringPackageInfoType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the BlockCateringPackageRevenueBaseType interface.
 */
function instanceOfBlockCateringPackageRevenueBaseType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockCateringPackageRevenueBaseType = instanceOfBlockCateringPackageRevenueBaseType;
function BlockCateringPackageRevenueBaseTypeFromJSON(json) {
    return BlockCateringPackageRevenueBaseTypeFromJSONTyped(json, false);
}
exports.BlockCateringPackageRevenueBaseTypeFromJSON = BlockCateringPackageRevenueBaseTypeFromJSON;
function BlockCateringPackageRevenueBaseTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'blockInfo': !(0, runtime_1.exists)(json, 'blockInfo') ? undefined : (0, BlockType_1.BlockTypeFromJSON)(json['blockInfo']),
        'flatPrice': !(0, runtime_1.exists)(json, 'flatPrice') ? undefined : json['flatPrice'],
        'packageDetail': !(0, runtime_1.exists)(json, 'packageDetail') ? undefined : (0, CateringPackageInfoType_1.CateringPackageInfoTypeFromJSON)(json['packageDetail']),
        'packageId': !(0, runtime_1.exists)(json, 'packageId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['packageId']),
        'priceCode': !(0, runtime_1.exists)(json, 'priceCode') ? undefined : json['priceCode'],
        'priceDescription': !(0, runtime_1.exists)(json, 'priceDescription') ? undefined : json['priceDescription'],
        'revenues': !(0, runtime_1.exists)(json, 'revenues') ? undefined : (json['revenues'].map(BlockCateringPackageRevenueType_1.BlockCateringPackageRevenueTypeFromJSON)),
    };
}
exports.BlockCateringPackageRevenueBaseTypeFromJSONTyped = BlockCateringPackageRevenueBaseTypeFromJSONTyped;
function BlockCateringPackageRevenueBaseTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'blockInfo': (0, BlockType_1.BlockTypeToJSON)(value.blockInfo),
        'flatPrice': value.flatPrice,
        'packageDetail': (0, CateringPackageInfoType_1.CateringPackageInfoTypeToJSON)(value.packageDetail),
        'packageId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.packageId),
        'priceCode': value.priceCode,
        'priceDescription': value.priceDescription,
        'revenues': value.revenues === undefined ? undefined : (value.revenues.map(BlockCateringPackageRevenueType_1.BlockCateringPackageRevenueTypeToJSON)),
    };
}
exports.BlockCateringPackageRevenueBaseTypeToJSON = BlockCateringPackageRevenueBaseTypeToJSON;
