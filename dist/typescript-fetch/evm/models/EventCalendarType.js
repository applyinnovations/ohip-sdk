"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCalendarTypeToJSON = exports.EventCalendarTypeFromJSONTyped = exports.EventCalendarTypeFromJSON = exports.instanceOfEventCalendarType = void 0;
const runtime_1 = require("../runtime");
const EventCodeDetailType_1 = require("./EventCodeDetailType");
const EventSpaceScheduleType_1 = require("./EventSpaceScheduleType");
const SellMessagesType_1 = require("./SellMessagesType");
/**
 * Check if a given object implements the EventCalendarType interface.
 */
function instanceOfEventCalendarType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventCalendarType = instanceOfEventCalendarType;
function EventCalendarTypeFromJSON(json) {
    return EventCalendarTypeFromJSONTyped(json, false);
}
exports.EventCalendarTypeFromJSON = EventCalendarTypeFromJSON;
function EventCalendarTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventSpace': !(0, runtime_1.exists)(json, 'eventSpace') ? undefined : (json['eventSpace'].map(EventSpaceScheduleType_1.EventSpaceScheduleTypeFromJSON)),
        'eventCodes': !(0, runtime_1.exists)(json, 'eventCodes') ? undefined : (json['eventCodes'].map(EventCodeDetailType_1.EventCodeDetailTypeFromJSON)),
        'sellMessages': !(0, runtime_1.exists)(json, 'sellMessages') ? undefined : (0, SellMessagesType_1.SellMessagesTypeFromJSON)(json['sellMessages']),
        'totalRooms': !(0, runtime_1.exists)(json, 'totalRooms') ? undefined : json['totalRooms'],
        'pageIndex': !(0, runtime_1.exists)(json, 'pageIndex') ? undefined : json['pageIndex'],
        'recordsPerPage': !(0, runtime_1.exists)(json, 'recordsPerPage') ? undefined : json['recordsPerPage'],
    };
}
exports.EventCalendarTypeFromJSONTyped = EventCalendarTypeFromJSONTyped;
function EventCalendarTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventSpace': value.eventSpace === undefined ? undefined : (value.eventSpace.map(EventSpaceScheduleType_1.EventSpaceScheduleTypeToJSON)),
        'eventCodes': value.eventCodes === undefined ? undefined : (value.eventCodes.map(EventCodeDetailType_1.EventCodeDetailTypeToJSON)),
        'sellMessages': (0, SellMessagesType_1.SellMessagesTypeToJSON)(value.sellMessages),
        'totalRooms': value.totalRooms,
        'pageIndex': value.pageIndex,
        'recordsPerPage': value.recordsPerPage,
    };
}
exports.EventCalendarTypeToJSON = EventCalendarTypeToJSON;
