/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * All different attendees that a catering event can have.
 * @export
 * @interface CateringEventsAttendeesType
 */
export interface CateringEventsAttendeesType {
    /**
     * Number of actual attendees attending to the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    actual?: number;
    /**
     * This defines the count of billed attendees with respect to the menu.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    billed?: number;
    /**
     * Number of expected attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    expected?: number;
    /**
     * Number of guaranteed attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    guaranteed?: number;
    /**
     * Number of actual package attendees attending the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageActual?: number;
    /**
     * This defines the count of package billed attendees with respect to the menu.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageBilled?: number;
    /**
     * Number of package expected attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageExpected?: number;
    /**
     * Number of package guaranteed attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageGuaranteed?: number;
    /**
     * Setup for number of event attendees for resources (i.e. water, pads, tables, etc.).
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    set?: number;
}

/**
 * Check if a given object implements the CateringEventsAttendeesType interface.
 */
export function instanceOfCateringEventsAttendeesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventsAttendeesTypeFromJSON(json: any): CateringEventsAttendeesType {
    return CateringEventsAttendeesTypeFromJSONTyped(json, false);
}

export function CateringEventsAttendeesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventsAttendeesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actual': !exists(json, 'actual') ? undefined : json['actual'],
        'billed': !exists(json, 'billed') ? undefined : json['billed'],
        'expected': !exists(json, 'expected') ? undefined : json['expected'],
        'guaranteed': !exists(json, 'guaranteed') ? undefined : json['guaranteed'],
        'packageActual': !exists(json, 'packageActual') ? undefined : json['packageActual'],
        'packageBilled': !exists(json, 'packageBilled') ? undefined : json['packageBilled'],
        'packageExpected': !exists(json, 'packageExpected') ? undefined : json['packageExpected'],
        'packageGuaranteed': !exists(json, 'packageGuaranteed') ? undefined : json['packageGuaranteed'],
        'set': !exists(json, 'set') ? undefined : json['set'],
    };
}

export function CateringEventsAttendeesTypeToJSON(value?: CateringEventsAttendeesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actual': value.actual,
        'billed': value.billed,
        'expected': value.expected,
        'guaranteed': value.guaranteed,
        'packageActual': value.packageActual,
        'packageBilled': value.packageBilled,
        'packageExpected': value.packageExpected,
        'packageGuaranteed': value.packageGuaranteed,
        'set': value.set,
    };
}

