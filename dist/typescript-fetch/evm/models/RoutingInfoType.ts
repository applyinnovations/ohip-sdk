/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoutingInfoTypeFolio } from './RoutingInfoTypeFolio';
import {
    RoutingInfoTypeFolioFromJSON,
    RoutingInfoTypeFolioFromJSONTyped,
    RoutingInfoTypeFolioToJSON,
} from './RoutingInfoTypeFolio';
import type { RoutingInfoTypeFunctionSpaceDetails } from './RoutingInfoTypeFunctionSpaceDetails';
import {
    RoutingInfoTypeFunctionSpaceDetailsFromJSON,
    RoutingInfoTypeFunctionSpaceDetailsFromJSONTyped,
    RoutingInfoTypeFunctionSpaceDetailsToJSON,
} from './RoutingInfoTypeFunctionSpaceDetails';
import type { RoutingInfoTypeRequest } from './RoutingInfoTypeRequest';
import {
    RoutingInfoTypeRequestFromJSON,
    RoutingInfoTypeRequestFromJSONTyped,
    RoutingInfoTypeRequestToJSON,
} from './RoutingInfoTypeRequest';

/**
 * A routing info object can either be of type Folio OR of type Room with its corresponding object.
 * @export
 * @interface RoutingInfoType
 */
export interface RoutingInfoType {
    /**
     * 
     * @type {RoutingInfoTypeFolio}
     * @memberof RoutingInfoType
     */
    folio?: RoutingInfoTypeFolio;
    /**
     * 
     * @type {RoutingInfoTypeFunctionSpaceDetails}
     * @memberof RoutingInfoType
     */
    functionSpaceDetails?: RoutingInfoTypeFunctionSpaceDetails;
    /**
     * 
     * @type {RoutingInfoTypeRequest}
     * @memberof RoutingInfoType
     */
    request?: RoutingInfoTypeRequest;
    /**
     * On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
     * @type {boolean}
     * @memberof RoutingInfoType
     */
    refreshFolio?: boolean;
}

/**
 * Check if a given object implements the RoutingInfoType interface.
 */
export function instanceOfRoutingInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInfoTypeFromJSON(json: any): RoutingInfoType {
    return RoutingInfoTypeFromJSONTyped(json, false);
}

export function RoutingInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'folio': !exists(json, 'folio') ? undefined : RoutingInfoTypeFolioFromJSON(json['folio']),
        'functionSpaceDetails': !exists(json, 'functionSpaceDetails') ? undefined : RoutingInfoTypeFunctionSpaceDetailsFromJSON(json['functionSpaceDetails']),
        'request': !exists(json, 'request') ? undefined : RoutingInfoTypeRequestFromJSON(json['request']),
        'refreshFolio': !exists(json, 'refreshFolio') ? undefined : json['refreshFolio'],
    };
}

export function RoutingInfoTypeToJSON(value?: RoutingInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'folio': RoutingInfoTypeFolioToJSON(value.folio),
        'functionSpaceDetails': RoutingInfoTypeFunctionSpaceDetailsToJSON(value.functionSpaceDetails),
        'request': RoutingInfoTypeRequestToJSON(value.request),
        'refreshFolio': value.refreshFolio,
    };
}

