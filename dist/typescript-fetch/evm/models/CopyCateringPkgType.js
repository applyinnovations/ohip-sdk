"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyCateringPkgTypeToJSON = exports.CopyCateringPkgTypeFromJSONTyped = exports.CopyCateringPkgTypeFromJSON = exports.instanceOfCopyCateringPkgType = void 0;
const runtime_1 = require("../runtime");
const CateringPackageCopyInstructionType_1 = require("./CateringPackageCopyInstructionType");
const CopyStatusModeType_1 = require("./CopyStatusModeType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CopyCateringPkgType interface.
 */
function instanceOfCopyCateringPkgType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCopyCateringPkgType = instanceOfCopyCateringPkgType;
function CopyCateringPkgTypeFromJSON(json) {
    return CopyCateringPkgTypeFromJSONTyped(json, false);
}
exports.CopyCateringPkgTypeFromJSON = CopyCateringPkgTypeFromJSON;
function CopyCateringPkgTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        '_continue': !(0, runtime_1.exists)(json, 'continue') ? undefined : json['continue'],
        'copyAsSnapshot': !(0, runtime_1.exists)(json, 'copyAsSnapshot') ? undefined : json['copyAsSnapshot'],
        'copyInstructions': !(0, runtime_1.exists)(json, 'copyInstructions') ? undefined : (json['copyInstructions'].map(CateringPackageCopyInstructionType_1.CateringPackageCopyInstructionTypeFromJSON)),
        'copyStatusMode': !(0, runtime_1.exists)(json, 'copyStatusMode') ? undefined : (0, CopyStatusModeType_1.CopyStatusModeTypeFromJSON)(json['copyStatusMode']),
        'copyToDates': !(0, runtime_1.exists)(json, 'copyToDates') ? undefined : json['copyToDates'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'packageId': !(0, runtime_1.exists)(json, 'packageId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['packageId']),
        'sourceBlockId': !(0, runtime_1.exists)(json, 'sourceBlockId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['sourceBlockId']),
        'targetBlockId': !(0, runtime_1.exists)(json, 'targetBlockId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['targetBlockId']),
    };
}
exports.CopyCateringPkgTypeFromJSONTyped = CopyCateringPkgTypeFromJSONTyped;
function CopyCateringPkgTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'continue': value._continue,
        'copyAsSnapshot': value.copyAsSnapshot,
        'copyInstructions': value.copyInstructions === undefined ? undefined : (value.copyInstructions.map(CateringPackageCopyInstructionType_1.CateringPackageCopyInstructionTypeToJSON)),
        'copyStatusMode': (0, CopyStatusModeType_1.CopyStatusModeTypeToJSON)(value.copyStatusMode),
        'copyToDates': value.copyToDates,
        'hotelId': value.hotelId,
        'packageId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.packageId),
        'sourceBlockId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.sourceBlockId),
        'targetBlockId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.targetBlockId),
    };
}
exports.CopyCateringPkgTypeToJSON = CopyCateringPkgTypeToJSON;
