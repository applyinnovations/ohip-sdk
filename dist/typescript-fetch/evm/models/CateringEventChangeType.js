"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventChangeTypeToJSON = exports.CateringEventChangeTypeFromJSONTyped = exports.CateringEventChangeTypeFromJSON = exports.instanceOfCateringEventChangeType = void 0;
const runtime_1 = require("../runtime");
const CateringEventChangeListType_1 = require("./CateringEventChangeListType");
const CateringEventRevenueChangeListType_1 = require("./CateringEventRevenueChangeListType");
const CateringEventStatusChangeListType_1 = require("./CateringEventStatusChangeListType");
/**
 * Check if a given object implements the CateringEventChangeType interface.
 */
function instanceOfCateringEventChangeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventChangeType = instanceOfCateringEventChangeType;
function CateringEventChangeTypeFromJSON(json) {
    return CateringEventChangeTypeFromJSONTyped(json, false);
}
exports.CateringEventChangeTypeFromJSON = CateringEventChangeTypeFromJSON;
function CateringEventChangeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'changeList': !(0, runtime_1.exists)(json, 'changeList') ? undefined : (0, CateringEventChangeListType_1.CateringEventChangeListTypeFromJSON)(json['changeList']),
        'revenueChangeList': !(0, runtime_1.exists)(json, 'revenueChangeList') ? undefined : (0, CateringEventRevenueChangeListType_1.CateringEventRevenueChangeListTypeFromJSON)(json['revenueChangeList']),
        'statusChangeList': !(0, runtime_1.exists)(json, 'statusChangeList') ? undefined : (0, CateringEventStatusChangeListType_1.CateringEventStatusChangeListTypeFromJSON)(json['statusChangeList']),
    };
}
exports.CateringEventChangeTypeFromJSONTyped = CateringEventChangeTypeFromJSONTyped;
function CateringEventChangeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'changeList': (0, CateringEventChangeListType_1.CateringEventChangeListTypeToJSON)(value.changeList),
        'revenueChangeList': (0, CateringEventRevenueChangeListType_1.CateringEventRevenueChangeListTypeToJSON)(value.revenueChangeList),
        'statusChangeList': (0, CateringEventStatusChangeListType_1.CateringEventStatusChangeListTypeToJSON)(value.statusChangeList),
    };
}
exports.CateringEventChangeTypeToJSON = CateringEventChangeTypeToJSON;
