"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageWaitlistedEventsToJSON = exports.ManageWaitlistedEventsFromJSONTyped = exports.ManageWaitlistedEventsFromJSON = exports.instanceOfManageWaitlistedEvents = void 0;
const runtime_1 = require("../runtime");
const Links_1 = require("./Links");
const WaitlistedEventProcessingInstructionsType_1 = require("./WaitlistedEventProcessingInstructionsType");
const WaitlistedEventsSearchType_1 = require("./WaitlistedEventsSearchType");
const WaitlistedEventsType_1 = require("./WaitlistedEventsType");
const WarningsType_1 = require("./WarningsType");
/**
 * Check if a given object implements the ManageWaitlistedEvents interface.
 */
function instanceOfManageWaitlistedEvents(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfManageWaitlistedEvents = instanceOfManageWaitlistedEvents;
function ManageWaitlistedEventsFromJSON(json) {
    return ManageWaitlistedEventsFromJSONTyped(json, false);
}
exports.ManageWaitlistedEventsFromJSON = ManageWaitlistedEventsFromJSON;
function ManageWaitlistedEventsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'criteria': !(0, runtime_1.exists)(json, 'criteria') ? undefined : (0, WaitlistedEventsSearchType_1.WaitlistedEventsSearchTypeFromJSON)(json['criteria']),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (0, Links_1.LinksFromJSON)(json['links']),
        'processingInstructions': !(0, runtime_1.exists)(json, 'processingInstructions') ? undefined : (0, WaitlistedEventProcessingInstructionsType_1.WaitlistedEventProcessingInstructionsTypeFromJSON)(json['processingInstructions']),
        'waitlistedEvents': !(0, runtime_1.exists)(json, 'waitlistedEvents') ? undefined : (0, WaitlistedEventsType_1.WaitlistedEventsTypeFromJSON)(json['waitlistedEvents']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (0, WarningsType_1.WarningsTypeFromJSON)(json['warnings']),
    };
}
exports.ManageWaitlistedEventsFromJSONTyped = ManageWaitlistedEventsFromJSONTyped;
function ManageWaitlistedEventsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'criteria': (0, WaitlistedEventsSearchType_1.WaitlistedEventsSearchTypeToJSON)(value.criteria),
        'links': (0, Links_1.LinksToJSON)(value.links),
        'processingInstructions': (0, WaitlistedEventProcessingInstructionsType_1.WaitlistedEventProcessingInstructionsTypeToJSON)(value.processingInstructions),
        'waitlistedEvents': (0, WaitlistedEventsType_1.WaitlistedEventsTypeToJSON)(value.waitlistedEvents),
        'warnings': (0, WarningsType_1.WarningsTypeToJSON)(value.warnings),
    };
}
exports.ManageWaitlistedEventsToJSON = ManageWaitlistedEventsToJSON;
