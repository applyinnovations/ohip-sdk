/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CateringEventChangeActions } from './CateringEventChangeActions';
import type { CateringEventChangeDetailType } from './CateringEventChangeDetailType';
import type { CateringEventChangeSources } from './CateringEventChangeSources';
import type { LogUserInfoType } from './LogUserInfoType';
import type { UniqueIDType } from './UniqueIDType';
/**
 *
 * @export
 * @interface CateringEventChangeInfoType
 */
export interface CateringEventChangeInfoType {
    /**
     *
     * @type {CateringEventChangeActions}
     * @memberof CateringEventChangeInfoType
     */
    action?: CateringEventChangeActions;
    /**
     *
     * @type {UniqueIDType}
     * @memberof CateringEventChangeInfoType
     */
    changeId?: UniqueIDType;
    /**
     *
     * @type {CateringEventChangeSources}
     * @memberof CateringEventChangeInfoType
     */
    changeSource?: CateringEventChangeSources;
    /**
     *
     * @type {LogUserInfoType}
     * @memberof CateringEventChangeInfoType
     */
    changeUserInfo?: LogUserInfoType;
    /**
     *
     * @type {Array<CateringEventChangeDetailType>}
     * @memberof CateringEventChangeInfoType
     */
    eventChangeDetailList?: Array<CateringEventChangeDetailType>;
    /**
     *
     * @type {UniqueIDType}
     * @memberof CateringEventChangeInfoType
     */
    eventId?: UniqueIDType;
    /**
     * Name of the event
     * @type {string}
     * @memberof CateringEventChangeInfoType
     */
    eventName?: string;
    /**
     * HotelCode associated with the event
     * @type {string}
     * @memberof CateringEventChangeInfoType
     */
    hotelId?: string;
    /**
     * Description of the Resource
     * @type {string}
     * @memberof CateringEventChangeInfoType
     */
    resourceName?: string;
}
/**
 * Check if a given object implements the CateringEventChangeInfoType interface.
 */
export declare function instanceOfCateringEventChangeInfoType(value: object): boolean;
export declare function CateringEventChangeInfoTypeFromJSON(json: any): CateringEventChangeInfoType;
export declare function CateringEventChangeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventChangeInfoType;
export declare function CateringEventChangeInfoTypeToJSON(value?: CateringEventChangeInfoType | null): any;
