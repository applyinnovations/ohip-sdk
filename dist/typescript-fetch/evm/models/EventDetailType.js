"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDetailTypeToJSON = exports.EventDetailTypeFromJSONTyped = exports.EventDetailTypeFromJSON = exports.instanceOfEventDetailType = void 0;
const runtime_1 = require("../runtime");
const BookingStatusType_1 = require("./BookingStatusType");
const CateringEventLinkType_1 = require("./CateringEventLinkType");
const CateringEventsAttendeesType_1 = require("./CateringEventsAttendeesType");
const CateringStatusTypeType_1 = require("./CateringStatusTypeType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const TranslationTextType60_1 = require("./TranslationTextType60");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the EventDetailType interface.
 */
function instanceOfEventDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventDetailType = instanceOfEventDetailType;
function EventDetailTypeFromJSON(json) {
    return EventDetailTypeFromJSONTyped(json, false);
}
exports.EventDetailTypeFromJSON = EventDetailTypeFromJSON;
function EventDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'alternateEvent': !(0, runtime_1.exists)(json, 'alternateEvent') ? undefined : json['alternateEvent'],
        'attendees': !(0, runtime_1.exists)(json, 'attendees') ? undefined : (0, CateringEventsAttendeesType_1.CateringEventsAttendeesTypeFromJSON)(json['attendees']),
        'cateringDeductInventory': !(0, runtime_1.exists)(json, 'cateringDeductInventory') ? undefined : json['cateringDeductInventory'],
        'cateringStatusType': !(0, runtime_1.exists)(json, 'cateringStatusType') ? undefined : (0, CateringStatusTypeType_1.CateringStatusTypeTypeFromJSON)(json['cateringStatusType']),
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'displayDoorcard': !(0, runtime_1.exists)(json, 'displayDoorcard') ? undefined : json['displayDoorcard'],
        'doorcard': !(0, runtime_1.exists)(json, 'doorcard') ? undefined : json['doorcard'],
        'eventLevelRevenueActualization': !(0, runtime_1.exists)(json, 'eventLevelRevenueActualization') ? undefined : json['eventLevelRevenueActualization'],
        'eventLink': !(0, runtime_1.exists)(json, 'eventLink') ? undefined : (0, CateringEventLinkType_1.CateringEventLinkTypeFromJSON)(json['eventLink']),
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : (0, TranslationTextType60_1.TranslationTextType60FromJSON)(json['eventName']),
        'eventShared': !(0, runtime_1.exists)(json, 'eventShared') ? undefined : json['eventShared'],
        'eventStatus': !(0, runtime_1.exists)(json, 'eventStatus') ? undefined : (0, BookingStatusType_1.BookingStatusTypeFromJSON)(json['eventStatus']),
        'eventTimeSpan': !(0, runtime_1.exists)(json, 'eventTimeSpan') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['eventTimeSpan']),
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : json['eventType'],
        'externalURL': !(0, runtime_1.exists)(json, 'externalURL') ? undefined : json['externalURL'],
        'hasPostings': !(0, runtime_1.exists)(json, 'hasPostings') ? undefined : json['hasPostings'],
        'inactiveDate': !(0, runtime_1.exists)(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'includeSpaceInPackage': !(0, runtime_1.exists)(json, 'includeSpaceInPackage') ? undefined : json['includeSpaceInPackage'],
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'loudEvent': !(0, runtime_1.exists)(json, 'loudEvent') ? undefined : json['loudEvent'],
        'masterEvent': !(0, runtime_1.exists)(json, 'masterEvent') ? undefined : json['masterEvent'],
        'masterEventId': !(0, runtime_1.exists)(json, 'masterEventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['masterEventId']),
        'notMoveable': !(0, runtime_1.exists)(json, 'notMoveable') ? undefined : json['notMoveable'],
        'packageCode': !(0, runtime_1.exists)(json, 'packageCode') ? undefined : json['packageCode'],
        'packageEvent': !(0, runtime_1.exists)(json, 'packageEvent') ? undefined : json['packageEvent'],
        'packageId': !(0, runtime_1.exists)(json, 'packageId') ? undefined : json['packageId'],
        'packageName': !(0, runtime_1.exists)(json, 'packageName') ? undefined : json['packageName'],
        'purgeDate': !(0, runtime_1.exists)(json, 'purgeDate') ? undefined : json['purgeDate'],
        'subEvent': !(0, runtime_1.exists)(json, 'subEvent') ? undefined : json['subEvent'],
        'waitlistReturnStatus': !(0, runtime_1.exists)(json, 'waitlistReturnStatus') ? undefined : (0, BookingStatusType_1.BookingStatusTypeFromJSON)(json['waitlistReturnStatus']),
        'waitlisted': !(0, runtime_1.exists)(json, 'waitlisted') ? undefined : json['waitlisted'],
    };
}
exports.EventDetailTypeFromJSONTyped = EventDetailTypeFromJSONTyped;
function EventDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'alternateEvent': value.alternateEvent,
        'attendees': (0, CateringEventsAttendeesType_1.CateringEventsAttendeesTypeToJSON)(value.attendees),
        'cateringDeductInventory': value.cateringDeductInventory,
        'cateringStatusType': (0, CateringStatusTypeType_1.CateringStatusTypeTypeToJSON)(value.cateringStatusType),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'displayDoorcard': value.displayDoorcard,
        'doorcard': value.doorcard,
        'eventLevelRevenueActualization': value.eventLevelRevenueActualization,
        'eventLink': (0, CateringEventLinkType_1.CateringEventLinkTypeToJSON)(value.eventLink),
        'eventName': (0, TranslationTextType60_1.TranslationTextType60ToJSON)(value.eventName),
        'eventShared': value.eventShared,
        'eventStatus': (0, BookingStatusType_1.BookingStatusTypeToJSON)(value.eventStatus),
        'eventTimeSpan': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.eventTimeSpan),
        'eventType': value.eventType,
        'externalURL': value.externalURL,
        'hasPostings': value.hasPostings,
        'inactiveDate': value.inactiveDate,
        'includeSpaceInPackage': value.includeSpaceInPackage,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'loudEvent': value.loudEvent,
        'masterEvent': value.masterEvent,
        'masterEventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.masterEventId),
        'notMoveable': value.notMoveable,
        'packageCode': value.packageCode,
        'packageEvent': value.packageEvent,
        'packageId': value.packageId,
        'packageName': value.packageName,
        'purgeDate': value.purgeDate,
        'subEvent': value.subEvent,
        'waitlistReturnStatus': (0, BookingStatusType_1.BookingStatusTypeToJSON)(value.waitlistReturnStatus),
        'waitlisted': value.waitlisted,
    };
}
exports.EventDetailTypeToJSON = EventDetailTypeToJSON;
