/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ApplyEventAttendeesChangesToEventsType } from './ApplyEventAttendeesChangesToEventsType';
import type { BookingStatusDetailType } from './BookingStatusDetailType';
import type { BookingStatusHistoryType } from './BookingStatusHistoryType';
import type { CancellationDetailsType } from './CancellationDetailsType';
import type { CateringRevenueType } from './CateringRevenueType';
import type { EventAttendeesType } from './EventAttendeesType';
import type { EventOrderType } from './EventOrderType';
import type { ResourceDiscountTypeType } from './ResourceDiscountTypeType';
/**
 * Contains catering related information for the block.
 * @export
 * @interface CateringType
 */
export interface CateringType {
    /**
     *
     * @type {BookingStatusDetailType}
     * @memberof CateringType
     */
    cateringStatus?: BookingStatusDetailType;
    /**
     * Internal status for the catering.
     * @type {string}
     * @memberof CateringType
     */
    cateringInternalStatus?: string;
    /**
     * Next catering status of the business block.
     * @type {Array<BookingStatusDetailType>}
     * @memberof CateringType
     */
    cateringNextStatusList?: Array<BookingStatusDetailType>;
    /**
     * Collection of catering status history.
     * @type {Array<BookingStatusHistoryType>}
     * @memberof CateringType
     */
    cateringStatusChangeHistory?: Array<BookingStatusHistoryType>;
    /**
     * Catering Owner of the block.
     * @type {string}
     * @memberof CateringType
     */
    cateringOwner?: string;
    /**
     *
     * @type {EventAttendeesType}
     * @memberof CateringType
     */
    eventAttendees?: EventAttendeesType;
    /**
     * The name by which the group wishes to be identified in the hotel.
     * @type {string}
     * @memberof CateringType
     */
    boardInfo?: string;
    /**
     * The name of the customer's in-house representative or contact on the day of the catering event.
     * @type {string}
     * @memberof CateringType
     */
    onSiteName?: string;
    /**
     * Catering contract number for the block.
     * @type {string}
     * @memberof CateringType
     */
    contractNumber?: string;
    /**
     * This provides more detail the type of function for which the event is held. For example, Trade Show, Meeting, or Annual Convention.
     * @type {string}
     * @memberof CateringType
     */
    functionInfo?: string;
    /**
     * Indicates whether the catering change logging for the booking is active or not. Any change made to catering events and resources will be logged when this is true.
     * @type {boolean}
     * @memberof CateringType
     */
    trackChanges?: boolean;
    /**
     *
     * @type {EventOrderType}
     * @memberof CateringType
     */
    eventOrder?: EventOrderType;
    /**
     *
     * @type {CateringRevenueType}
     * @memberof CateringType
     */
    cateringRevenue?: CateringRevenueType;
    /**
     * Date used by catering manager or coordinator to follow up on the event.
     * @type {string}
     * @memberof CateringType
     */
    followUpDate?: string;
    /**
     * Date by which event group must make a decision on the booking.
     * @type {string}
     * @memberof CateringType
     */
    decisionDate?: string;
    /**
     * Indicates whether event packages or templates can be applied to the block.
     * @type {boolean}
     * @memberof CateringType
     */
    pkgsTmplt?: boolean;
    /**
     *
     * @type {CancellationDetailsType}
     * @memberof CateringType
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * Indicates the resource discount percentage to be applied to resource items associated with the catering event.
     * @type {number}
     * @memberof CateringType
     */
    resourceDiscountPercentage?: number;
    /**
     * Indicates if the block has any package events.
     * @type {boolean}
     * @memberof CateringType
     */
    hasPackageEvents?: boolean;
    /**
     * Indicates whether BoardInfo changes can be applied to all events of the block.
     * @type {boolean}
     * @memberof CateringType
     */
    applyBoardInfoToAllEvents?: boolean;
    /**
     * Indicates whether to ignore any warning during applying the changes to the events associated with the current block.
     * @type {boolean}
     * @memberof CateringType
     */
    overrideEventsProcessingWarnings?: boolean;
    /**
     * Indicates whether Guarantee changes can be applied to all events of the block.
     * @type {boolean}
     * @memberof CateringType
     */
    applyEventsGuaranteeToAllEvents?: boolean;
    /**
     *
     * @type {ApplyEventAttendeesChangesToEventsType}
     * @memberof CateringType
     */
    applyEventAttendeesChangesToEvents?: ApplyEventAttendeesChangesToEventsType;
    /**
     *
     * @type {ResourceDiscountTypeType}
     * @memberof CateringType
     */
    resourceDiscountType?: ResourceDiscountTypeType;
}
/**
 * Check if a given object implements the CateringType interface.
 */
export declare function instanceOfCateringType(value: object): boolean;
export declare function CateringTypeFromJSON(json: any): CateringType;
export declare function CateringTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringType;
export declare function CateringTypeToJSON(value?: CateringType | null): any;
