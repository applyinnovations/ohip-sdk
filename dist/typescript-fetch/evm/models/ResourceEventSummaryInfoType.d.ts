/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BookingStatusType } from './BookingStatusType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import type { EventId } from './EventId';
import type { TranslationTextType60 } from './TranslationTextType60';
/**
 * Contains information about an event.
 * @export
 * @interface ResourceEventSummaryInfoType
 */
export interface ResourceEventSummaryInfoType {
    /**
     *
     * @type {EventId}
     * @memberof ResourceEventSummaryInfoType
     */
    eventId?: EventId;
    /**
     *
     * @type {TranslationTextType60}
     * @memberof ResourceEventSummaryInfoType
     */
    eventName?: TranslationTextType60;
    /**
     * Type of event.
     * @type {string}
     * @memberof ResourceEventSummaryInfoType
     */
    eventType?: string;
    /**
     *
     * @type {DateTimeSpanType}
     * @memberof ResourceEventSummaryInfoType
     */
    eventTimeSpan?: DateTimeSpanType;
    /**
     *
     * @type {BookingStatusType}
     * @memberof ResourceEventSummaryInfoType
     */
    eventStatus?: BookingStatusType;
    /**
     * Package Id of the Event.
     * @type {number}
     * @memberof ResourceEventSummaryInfoType
     */
    packageId?: number;
    /**
     * Indicates whether event is master event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    masterEvent?: boolean;
    /**
     * Flag to indicate if the event is a sub event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    subEvent?: boolean;
    /**
     * Flag to indicate if the event is an alternate event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    alternateEvent?: boolean;
    /**
     * Room code of the function space.
     * @type {string}
     * @memberof ResourceEventSummaryInfoType
     */
    room?: string;
}
/**
 * Check if a given object implements the ResourceEventSummaryInfoType interface.
 */
export declare function instanceOfResourceEventSummaryInfoType(value: object): boolean;
export declare function ResourceEventSummaryInfoTypeFromJSON(json: any): ResourceEventSummaryInfoType;
export declare function ResourceEventSummaryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceEventSummaryInfoType;
export declare function ResourceEventSummaryInfoTypeToJSON(value?: ResourceEventSummaryInfoType | null): any;
