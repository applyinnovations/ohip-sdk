/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ForeignExchangeType } from './ForeignExchangeType';
import type { GuestCountsType } from './GuestCountsType';
import type { MealPlanCodeType } from './MealPlanCodeType';
import type { PackageElementType } from './PackageElementType';
import type { PointsType } from './PointsType';
import type { RatesType } from './RatesType';
import type { ResAwardsType } from './ResAwardsType';
import type { ReservationBlockType } from './ReservationBlockType';
import type { ReservationProfileType } from './ReservationProfileType';
import type { RoomRateAvailReasonType } from './RoomRateAvailReasonType';
import type { TotalType } from './TotalType';
/**
 *
 * @export
 * @interface RoomRateType
 */
export interface RoomRateType {
    /**
     *
     * @type {TotalType}
     * @memberof RoomRateType
     */
    total?: TotalType;
    /**
     *
     * @type {PointsType}
     * @memberof RoomRateType
     */
    totalPoints?: PointsType;
    /**
     *
     * @type {RatesType}
     * @memberof RoomRateType
     */
    rates?: RatesType;
    /**
     *
     * @type {Array<PackageElementType>}
     * @memberof RoomRateType
     */
    packages?: Array<PackageElementType>;
    /**
     * Profile associated with the functionSpaceDetails Stay.
     * @type {Array<ReservationProfileType>}
     * @memberof RoomRateType
     */
    stayProfiles?: Array<ReservationProfileType>;
    /**
     *
     * @type {GuestCountsType}
     * @memberof RoomRateType
     */
    guestCounts?: GuestCountsType;
    /**
     *
     * @type {GuestCountsType}
     * @memberof RoomRateType
     */
    taxFreeGuestCounts?: GuestCountsType;
    /**
     *
     * @type {ResAwardsType}
     * @memberof RoomRateType
     */
    awards?: ResAwardsType;
    /**
     *
     * @type {ForeignExchangeType}
     * @memberof RoomRateType
     */
    foreignExchange?: ForeignExchangeType;
    /**
     *
     * @type {ReservationBlockType}
     * @memberof RoomRateType
     */
    reservationBlock?: ReservationBlockType;
    /**
     * Information about the Room Rate Combination.
     * @type {string}
     * @memberof RoomRateType
     */
    roomRateInfo?: string;
    /**
     * Meal plan codes associated with the rate codes.
     * @type {Array<MealPlanCodeType>}
     * @memberof RoomRateType
     */
    mealPlans?: Array<MealPlanCodeType>;
    /**
     *
     * @type {string}
     * @memberof RoomRateType
     */
    roomType?: string;
    /**
     *
     * @type {string}
     * @memberof RoomRateType
     */
    ratePlanCode?: string;
    /**
     *
     * @type {string}
     * @memberof RoomRateType
     */
    promotionCode?: string;
    /**
     * The starting value of the date range.
     * @type {string}
     * @memberof RoomRateType
     */
    eventStartDate?: string;
    /**
     * The ending value of the date range.
     * @type {string}
     * @memberof RoomRateType
     */
    eventEndDate?: string;
    /**
     *
     * @type {RoomRateAvailReasonType}
     * @memberof RoomRateType
     */
    availability?: RoomRateAvailReasonType;
    /**
     *
     * @type {boolean}
     * @memberof RoomRateType
     */
    suppressRate?: boolean;
    /**
     * The code that relates to the market being sold to (e.g., the corporate market, packages).
     * @type {string}
     * @memberof RoomRateType
     */
    marketCode?: string;
    /**
     * Description of the market code.
     * @type {string}
     * @memberof RoomRateType
     */
    marketCodeDescription?: string;
    /**
     * To specify where the business came from e.g. radio, newspaper ad, etc.
     * @type {string}
     * @memberof RoomRateType
     */
    sourceCode?: string;
    /**
     * Description of the source of business.
     * @type {string}
     * @memberof RoomRateType
     */
    sourceCodeDescription?: string;
    /**
     * The number of rooms.
     * @type {number}
     * @memberof RoomRateType
     */
    numberOfUnits?: number;
    /**
     * A string value representing the unique identification of a functionSpaceDetails.
     * @type {string}
     * @memberof RoomRateType
     */
    roomId?: string;
    /**
     * True indicates as pseudo functionSpaceDetails type. This is usually used for a posting master reservation.
     * @type {boolean}
     * @memberof RoomRateType
     */
    pseudoRoom?: boolean;
    /**
     * Room Type used for the Rate calculation.
     * @type {string}
     * @memberof RoomRateType
     */
    roomTypeCharged?: string;
    /**
     * Commission Code applicable for commission calculation for Travel Agent/Company.
     * @type {string}
     * @memberof RoomRateType
     */
    commissionCode?: string;
    /**
     * Indicates Commission is applicable for commission calculation for Travel Agent/Company.
     * @type {boolean}
     * @memberof RoomRateType
     */
    commissionable?: boolean;
    /**
     * Indicates this reservation is for House use.
     * @type {boolean}
     * @memberof RoomRateType
     */
    houseUseOnly?: boolean;
    /**
     * Indicates this reservation rate is complimentary.
     * @type {boolean}
     * @memberof RoomRateType
     */
    complimentary?: boolean;
    /**
     * Indicates whether the functionSpaceDetails type inventory was taken from the allotment or House availability.
     * @type {string}
     * @memberof RoomRateType
     */
    inventoryLender?: string;
    /**
     * Fixed Rate Indicator.
     * @type {boolean}
     * @memberof RoomRateType
     */
    fixedRate?: boolean;
    /**
     * Best Available rates ranking.
     * @type {number}
     * @memberof RoomRateType
     */
    barRanking?: number;
    /**
     * For RatePlanSet equals BESTAVAILABLERATE, in case Rate Groups are enabled the elementSpace provides the rate group for the rate plan code.
     * @type {string}
     * @memberof RoomRateType
     */
    rateGroup?: string;
    /**
     * Indicates if the Rate Code is discountable i.e discounts are allowed on the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    discountAllowed?: boolean;
    /**
     * Indicates if the Rate Code has BOGO(Bye one Get one) indicator.
     * @type {boolean}
     * @memberof RoomRateType
     */
    bogoDiscount?: boolean;
    /**
     * Rate plan type like Corporate,Regular,Military,Weekend etc.
     * @type {string}
     * @memberof RoomRateType
     */
    rateLevel?: string;
    /**
     * Indicates commission percentage used by the rate plan.
     * @type {number}
     * @memberof RoomRateType
     */
    commissionPercentage?: number;
    /**
     * Indicates commission amount used by the rate plan.
     * @type {number}
     * @memberof RoomRateType
     */
    commissionAmount?: number;
    /**
     * If true, indicates that credentials is required to sell the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    credentialsRequired?: boolean;
    /**
     * If true, indicates if tax is included in the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    taxIncluded?: boolean;
    /**
     * Rate code description.
     * @type {string}
     * @memberof RoomRateType
     */
    rateDescription?: string;
}
/**
 * Check if a given object implements the RoomRateType interface.
 */
export declare function instanceOfRoomRateType(value: object): boolean;
export declare function RoomRateTypeFromJSON(json: any): RoomRateType;
export declare function RoomRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomRateType;
export declare function RoomRateTypeToJSON(value?: RoomRateType | null): any;
