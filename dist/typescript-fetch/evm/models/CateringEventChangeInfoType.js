"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventChangeInfoTypeToJSON = exports.CateringEventChangeInfoTypeFromJSONTyped = exports.CateringEventChangeInfoTypeFromJSON = exports.instanceOfCateringEventChangeInfoType = void 0;
const runtime_1 = require("../runtime");
const CateringEventChangeActions_1 = require("./CateringEventChangeActions");
const CateringEventChangeDetailType_1 = require("./CateringEventChangeDetailType");
const CateringEventChangeSources_1 = require("./CateringEventChangeSources");
const LogUserInfoType_1 = require("./LogUserInfoType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringEventChangeInfoType interface.
 */
function instanceOfCateringEventChangeInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventChangeInfoType = instanceOfCateringEventChangeInfoType;
function CateringEventChangeInfoTypeFromJSON(json) {
    return CateringEventChangeInfoTypeFromJSONTyped(json, false);
}
exports.CateringEventChangeInfoTypeFromJSON = CateringEventChangeInfoTypeFromJSON;
function CateringEventChangeInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'changeId': !(0, runtime_1.exists)(json, 'changeId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['changeId']),
        'eventId': !(0, runtime_1.exists)(json, 'eventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['eventId']),
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : json['eventName'],
        'changeSource': !(0, runtime_1.exists)(json, 'changeSource') ? undefined : (0, CateringEventChangeSources_1.CateringEventChangeSourcesFromJSON)(json['changeSource']),
        'resourceName': !(0, runtime_1.exists)(json, 'resourceName') ? undefined : json['resourceName'],
        'action': !(0, runtime_1.exists)(json, 'action') ? undefined : (0, CateringEventChangeActions_1.CateringEventChangeActionsFromJSON)(json['action']),
        'changeUserInfo': !(0, runtime_1.exists)(json, 'changeUserInfo') ? undefined : (0, LogUserInfoType_1.LogUserInfoTypeFromJSON)(json['changeUserInfo']),
        'eventChangeDetailList': !(0, runtime_1.exists)(json, 'eventChangeDetailList') ? undefined : (json['eventChangeDetailList'].map(CateringEventChangeDetailType_1.CateringEventChangeDetailTypeFromJSON)),
    };
}
exports.CateringEventChangeInfoTypeFromJSONTyped = CateringEventChangeInfoTypeFromJSONTyped;
function CateringEventChangeInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'changeId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.changeId),
        'eventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.eventId),
        'eventName': value.eventName,
        'changeSource': (0, CateringEventChangeSources_1.CateringEventChangeSourcesToJSON)(value.changeSource),
        'resourceName': value.resourceName,
        'action': (0, CateringEventChangeActions_1.CateringEventChangeActionsToJSON)(value.action),
        'changeUserInfo': (0, LogUserInfoType_1.LogUserInfoTypeToJSON)(value.changeUserInfo),
        'eventChangeDetailList': value.eventChangeDetailList === undefined ? undefined : (value.eventChangeDetailList.map(CateringEventChangeDetailType_1.CateringEventChangeDetailTypeToJSON)),
    };
}
exports.CateringEventChangeInfoTypeToJSON = CateringEventChangeInfoTypeToJSON;
