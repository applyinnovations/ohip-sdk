/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PackageTransactionCodeType } from './PackageTransactionCodeType';
import {
    PackageTransactionCodeTypeFromJSON,
    PackageTransactionCodeTypeFromJSONTyped,
    PackageTransactionCodeTypeToJSON,
} from './PackageTransactionCodeType';

/**
 * 
 * @export
 * @interface PackagePostingRulesType
 */
export interface PackagePostingRulesType {
    /**
     * 
     * @type {PackageTransactionCodeType}
     * @memberof PackagePostingRulesType
     */
    transactionCode?: PackageTransactionCodeType;
    /**
     * 
     * @type {PackageTransactionCodeType}
     * @memberof PackagePostingRulesType
     */
    overageCode?: PackageTransactionCodeType;
    /**
     * 
     * @type {PackageTransactionCodeType}
     * @memberof PackagePostingRulesType
     */
    profitCode?: PackageTransactionCodeType;
    /**
     * 
     * @type {PackageTransactionCodeType}
     * @memberof PackagePostingRulesType
     */
    lossCode?: PackageTransactionCodeType;
    /**
     * The alternate transaction code that can be consumed by the guest in place of the transaction code.
     * @type {Array<PackageTransactionCodeType>}
     * @memberof PackagePostingRulesType
     */
    alternateCodesList?: Array<PackageTransactionCodeType>;
}

/**
 * Check if a given object implements the PackagePostingRulesType interface.
 */
export function instanceOfPackagePostingRulesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PackagePostingRulesTypeFromJSON(json: any): PackagePostingRulesType {
    return PackagePostingRulesTypeFromJSONTyped(json, false);
}

export function PackagePostingRulesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackagePostingRulesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionCode': !exists(json, 'transactionCode') ? undefined : PackageTransactionCodeTypeFromJSON(json['transactionCode']),
        'overageCode': !exists(json, 'overageCode') ? undefined : PackageTransactionCodeTypeFromJSON(json['overageCode']),
        'profitCode': !exists(json, 'profitCode') ? undefined : PackageTransactionCodeTypeFromJSON(json['profitCode']),
        'lossCode': !exists(json, 'lossCode') ? undefined : PackageTransactionCodeTypeFromJSON(json['lossCode']),
        'alternateCodesList': !exists(json, 'alternateCodesList') ? undefined : ((json['alternateCodesList'] as Array<any>).map(PackageTransactionCodeTypeFromJSON)),
    };
}

export function PackagePostingRulesTypeToJSON(value?: PackagePostingRulesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionCode': PackageTransactionCodeTypeToJSON(value.transactionCode),
        'overageCode': PackageTransactionCodeTypeToJSON(value.overageCode),
        'profitCode': PackageTransactionCodeTypeToJSON(value.profitCode),
        'lossCode': PackageTransactionCodeTypeToJSON(value.lossCode),
        'alternateCodesList': value.alternateCodesList === undefined ? undefined : ((value.alternateCodesList as Array<any>).map(PackageTransactionCodeTypeToJSON)),
    };
}

