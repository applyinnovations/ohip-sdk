/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CodeDescriptionType } from './CodeDescriptionType';
import type { CommentInfoType } from './CommentInfoType';
import type { MembershipTypeLevelType } from './MembershipTypeLevelType';
import type { ThresholdDetailsType } from './ThresholdDetailsType';
import type { TransactionDiversionDailyDetailType } from './TransactionDiversionDailyDetailType';
import type { TransactionDiversionRuleLevelType } from './TransactionDiversionRuleLevelType';
import type { TransactionDiversionRuleTypeType } from './TransactionDiversionRuleTypeType';
/**
 * A Transaction Diversion Rule Type
 * @export
 * @interface ReservationTransactionDiversionType
 */
export interface ReservationTransactionDiversionType {
    /**
     * VIP code to consider while applying Diversion Instruction.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    vipCode?: string;
    /**
     *
     * @type {MembershipTypeLevelType}
     * @memberof ReservationTransactionDiversionType
     */
    membership?: MembershipTypeLevelType;
    /**
     * Room number to receive all the diverted transactions configured for this instruction.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    targetRoom?: string;
    /**
     * Collection of Transaction Code List
     * @type {Array<CodeDescriptionType>}
     * @memberof ReservationTransactionDiversionType
     */
    transactionCodes?: Array<CodeDescriptionType>;
    /**
     * User defined message for the Transaction Diversion Rule.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    description?: string;
    /**
     *
     * @type {TransactionDiversionRuleLevelType}
     * @memberof ReservationTransactionDiversionType
     */
    level?: TransactionDiversionRuleLevelType;
    /**
     *
     * @type {ThresholdDetailsType}
     * @memberof ReservationTransactionDiversionType
     */
    thresholds?: ThresholdDetailsType;
    /**
     *
     * @type {TransactionDiversionRuleTypeType}
     * @memberof ReservationTransactionDiversionType
     */
    type?: TransactionDiversionRuleTypeType;
    /**
     * Hotel code with which Transaction Diversion Rule is associated.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    hotelId?: string;
    /**
     * Transaction Diversion Code
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    code?: string;
    /**
     * User configured Sequence number.
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    displaySequence?: number;
    /**
     * Indicator that tells whether the transaction diversion rule is active or not.
     * @type {boolean}
     * @memberof ReservationTransactionDiversionType
     */
    inactive?: boolean;
    /**
     *
     * @type {CommentInfoType}
     * @memberof ReservationTransactionDiversionType
     */
    notes?: CommentInfoType;
    /**
     * Transaction diversions that are posted.
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    posted?: number;
    /**
     * Transaction diversions that are diverted .
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    diverted?: number;
    /**
     * List of daily details for Transaction Diversion rule.
     * @type {Array<TransactionDiversionDailyDetailType>}
     * @memberof ReservationTransactionDiversionType
     */
    dailyDetails?: Array<TransactionDiversionDailyDetailType>;
}
/**
 * Check if a given object implements the ReservationTransactionDiversionType interface.
 */
export declare function instanceOfReservationTransactionDiversionType(value: object): boolean;
export declare function ReservationTransactionDiversionTypeFromJSON(json: any): ReservationTransactionDiversionType;
export declare function ReservationTransactionDiversionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationTransactionDiversionType;
export declare function ReservationTransactionDiversionTypeToJSON(value?: ReservationTransactionDiversionType | null): any;
