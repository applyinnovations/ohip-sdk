/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CateringEventsAttendeesType } from './CateringEventsAttendeesType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { TranslationTextType200 } from './TranslationTextType200';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Details of Catering Package Type.
 * @export
 * @interface BlockCateringPackageType
 */
export interface BlockCateringPackageType {
    /**
     * Hotel Code of the Block.
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    hotelId?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockCateringPackageType
     */
    blockId?: UniqueIDType;
    /**
     * Package Code which will be added to the block.
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    packageCode?: string;
    /**
     * Price Code of the package.
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    priceCode?: string;
    /**
     * Status of the catering block
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    status?: string;
    /**
     * Rate code of the associated package
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    rentalCode?: string;
    /**
     * Begin Date for package/template events
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    beginDate?: string;
    /**
     * Hotel Code of the associated package.
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    packageHotelCode?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof BlockCateringPackageType
     */
    packageId?: UniqueIDType;
    /**
     *
     * @type {TranslationTextType200}
     * @memberof BlockCateringPackageType
     */
    translatableDescription?: TranslationTextType200;
    /**
     * Defines if Flat Rate is applicable for the package.
     * @type {boolean}
     * @memberof BlockCateringPackageType
     */
    flatRate?: boolean;
    /**
     * Catering Package duration.
     * @type {number}
     * @memberof BlockCateringPackageType
     */
    duration?: number;
    /**
     *
     * @type {CateringEventsAttendeesType}
     * @memberof BlockCateringPackageType
     */
    attendees?: CateringEventsAttendeesType;
    /**
     * Indicates whether all event from the package is in Actual Status.
     * @type {boolean}
     * @memberof BlockCateringPackageType
     */
    packageActual?: boolean;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof BlockCateringPackageType
     */
    price?: CurrencyAmountType;
    /**
     * Price Code description of the associated package.
     * @type {string}
     * @memberof BlockCateringPackageType
     */
    priceDescription?: string;
    /**
     * Notifies whether this catering package can be deleted or not.
     * @type {boolean}
     * @memberof BlockCateringPackageType
     */
    cateringPackageRemovable?: boolean;
    /**
     * Flat to determine if the events the events associated with this package has non packaged resources
     * @type {boolean}
     * @memberof BlockCateringPackageType
     */
    nonPackagedResourcesExist?: boolean;
}
/**
 * Check if a given object implements the BlockCateringPackageType interface.
 */
export declare function instanceOfBlockCateringPackageType(value: object): boolean;
export declare function BlockCateringPackageTypeFromJSON(json: any): BlockCateringPackageType;
export declare function BlockCateringPackageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockCateringPackageType;
export declare function BlockCateringPackageTypeToJSON(value?: BlockCateringPackageType | null): any;
