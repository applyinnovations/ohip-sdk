"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStatusChangeTypeToJSON = exports.EventStatusChangeTypeFromJSONTyped = exports.EventStatusChangeTypeFromJSON = exports.instanceOfEventStatusChangeType = void 0;
const runtime_1 = require("../runtime");
const LogUserInfoType_1 = require("./LogUserInfoType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the EventStatusChangeType interface.
 */
function instanceOfEventStatusChangeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventStatusChangeType = instanceOfEventStatusChangeType;
function EventStatusChangeTypeFromJSON(json) {
    return EventStatusChangeTypeFromJSONTyped(json, false);
}
exports.EventStatusChangeTypeFromJSON = EventStatusChangeTypeFromJSON;
function EventStatusChangeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['blockId']),
        'changeUserInfo': !(0, runtime_1.exists)(json, 'changeUserInfo') ? undefined : (0, LogUserInfoType_1.LogUserInfoTypeFromJSON)(json['changeUserInfo']),
        'currentStatus': !(0, runtime_1.exists)(json, 'currentStatus') ? undefined : json['currentStatus'],
        'eventChangeId': !(0, runtime_1.exists)(json, 'eventChangeId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['eventChangeId']),
        'eventId': !(0, runtime_1.exists)(json, 'eventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['eventId']),
        'priorStatus': !(0, runtime_1.exists)(json, 'priorStatus') ? undefined : json['priorStatus'],
    };
}
exports.EventStatusChangeTypeFromJSONTyped = EventStatusChangeTypeFromJSONTyped;
function EventStatusChangeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'blockId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.blockId),
        'changeUserInfo': (0, LogUserInfoType_1.LogUserInfoTypeToJSON)(value.changeUserInfo),
        'currentStatus': value.currentStatus,
        'eventChangeId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.eventChangeId),
        'eventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.eventId),
        'priorStatus': value.priorStatus,
    };
}
exports.EventStatusChangeTypeToJSON = EventStatusChangeTypeToJSON;
