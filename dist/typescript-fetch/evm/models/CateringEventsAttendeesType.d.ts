/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * All different attendees that a catering event can have.
 * @export
 * @interface CateringEventsAttendeesType
 */
export interface CateringEventsAttendeesType {
    /**
     * Number of actual attendees attending to the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    actual?: number;
    /**
     * This defines the count of billed attendees with respect to the menu.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    billed?: number;
    /**
     * Number of expected attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    expected?: number;
    /**
     * Number of guaranteed attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    guaranteed?: number;
    /**
     * Number of actual package attendees attending the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageActual?: number;
    /**
     * This defines the count of package billed attendees with respect to the menu.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageBilled?: number;
    /**
     * Number of package expected attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageExpected?: number;
    /**
     * Number of package guaranteed attendees for the catering event.
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    packageGuaranteed?: number;
    /**
     * Setup for number of event attendees for resources (i.e. water, pads, tables, etc.).
     * @type {number}
     * @memberof CateringEventsAttendeesType
     */
    set?: number;
}
/**
 * Check if a given object implements the CateringEventsAttendeesType interface.
 */
export declare function instanceOfCateringEventsAttendeesType(value: object): boolean;
export declare function CateringEventsAttendeesTypeFromJSON(json: any): CateringEventsAttendeesType;
export declare function CateringEventsAttendeesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventsAttendeesType;
export declare function CateringEventsAttendeesTypeToJSON(value?: CateringEventsAttendeesType | null): any;
