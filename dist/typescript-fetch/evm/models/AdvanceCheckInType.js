"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvanceCheckInTypeToJSON = exports.AdvanceCheckInTypeFromJSONTyped = exports.AdvanceCheckInTypeFromJSON = exports.instanceOfAdvanceCheckInType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the AdvanceCheckInType interface.
 */
function instanceOfAdvanceCheckInType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAdvanceCheckInType = instanceOfAdvanceCheckInType;
function AdvanceCheckInTypeFromJSON(json) {
    return AdvanceCheckInTypeFromJSONTyped(json, false);
}
exports.AdvanceCheckInTypeFromJSON = AdvanceCheckInTypeFromJSON;
function AdvanceCheckInTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'advanceCheckedIn': !(0, runtime_1.exists)(json, 'advanceCheckedIn') ? undefined : json['advanceCheckedIn'],
        'expectedReturnTime': !(0, runtime_1.exists)(json, 'expectedReturnTime') ? undefined : json['expectedReturnTime'],
        'eTRComments': !(0, runtime_1.exists)(json, 'eTRComments') ? undefined : json['eTRComments'],
    };
}
exports.AdvanceCheckInTypeFromJSONTyped = AdvanceCheckInTypeFromJSONTyped;
function AdvanceCheckInTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'advanceCheckedIn': value.advanceCheckedIn,
        'expectedReturnTime': value.expectedReturnTime,
        'eTRComments': value.eTRComments,
    };
}
exports.AdvanceCheckInTypeToJSON = AdvanceCheckInTypeToJSON;
