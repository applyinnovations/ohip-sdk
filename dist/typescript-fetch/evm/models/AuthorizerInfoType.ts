/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Authorizer Information
 * @export
 * @interface AuthorizerInfoType
 */
export interface AuthorizerInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AuthorizerInfoType
     */
    authorizerId?: UniqueIDType;
    /**
     * Full name of the authorizer.
     * @type {string}
     * @memberof AuthorizerInfoType
     */
    authorizerName?: string;
    /**
     * Rate code of the authorizer.
     * @type {string}
     * @memberof AuthorizerInfoType
     */
    authorizerRateCode?: string;
    /**
     * Application user name of the authorizer
     * @type {string}
     * @memberof AuthorizerInfoType
     */
    authorizerUserName?: string;
    /**
     * Indicates whether user has the choice to have reservation inherit rate code from the authorizer.
     * @type {boolean}
     * @memberof AuthorizerInfoType
     */
    inheritAuthorizerRateCode?: boolean;
}

/**
 * Check if a given object implements the AuthorizerInfoType interface.
 */
export function instanceOfAuthorizerInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizerInfoTypeFromJSON(json: any): AuthorizerInfoType {
    return AuthorizerInfoTypeFromJSONTyped(json, false);
}

export function AuthorizerInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizerInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizerId': !exists(json, 'authorizerId') ? undefined : UniqueIDTypeFromJSON(json['authorizerId']),
        'authorizerName': !exists(json, 'authorizerName') ? undefined : json['authorizerName'],
        'authorizerRateCode': !exists(json, 'authorizerRateCode') ? undefined : json['authorizerRateCode'],
        'authorizerUserName': !exists(json, 'authorizerUserName') ? undefined : json['authorizerUserName'],
        'inheritAuthorizerRateCode': !exists(json, 'inheritAuthorizerRateCode') ? undefined : json['inheritAuthorizerRateCode'],
    };
}

export function AuthorizerInfoTypeToJSON(value?: AuthorizerInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizerId': UniqueIDTypeToJSON(value.authorizerId),
        'authorizerName': value.authorizerName,
        'authorizerRateCode': value.authorizerRateCode,
        'authorizerUserName': value.authorizerUserName,
        'inheritAuthorizerRateCode': value.inheritAuthorizerRateCode,
    };
}

