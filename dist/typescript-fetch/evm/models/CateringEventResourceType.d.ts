/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { EventResourceNoteType } from './EventResourceNoteType';
import type { ResourceId } from './ResourceId';
import type { ResourceType } from './ResourceType';
/**
 * Event resource information.
 * @export
 * @interface CateringEventResourceType
 */
export interface CateringEventResourceType {
    /**
     *
     * @type {ResourceId}
     * @memberof CateringEventResourceType
     */
    resourceId?: ResourceId;
    /**
     *
     * @type {ResourceType}
     * @memberof CateringEventResourceType
     */
    resourceType?: ResourceType;
    /**
     * Resource name, this could be a resource item or a menu.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    resourceName?: string;
    /**
     * Setup style for the function space.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    setupCode?: string;
    /**
     * Item attribute name for non Food and Beverage item.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    itemAttribute?: string;
    /**
     * The required quantity of the resource.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    quantity?: number;
    /**
     * The number of charged hours for the resource.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    hours?: number;
    /**
     * The number of charged persons for the resource.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    persons?: number;
    /**
     * The attendees/quantity of an item INCLUDED in a package price.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    quantityIncluded?: number;
    /**
     * The attendees/quantity charged extra, EXCLUDED from the package price.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    quantityExcluded?: number;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CateringEventResourceType
     */
    unitPrice?: CurrencyAmountType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CateringEventResourceType
     */
    revenue?: CurrencyAmountType;
    /**
     * Rate Code that is attached to the function spaces and non Food and Beverage items
     * @type {string}
     * @memberof CateringEventResourceType
     */
    rentalCode?: string;
    /**
     * The menu discount percentage.
     * @type {number}
     * @memberof CateringEventResourceType
     */
    discount?: number;
    /**
     * Contains event resource comment information.
     * @type {Array<EventResourceNoteType>}
     * @memberof CateringEventResourceType
     */
    eventResourceNotes?: Array<EventResourceNoteType>;
    /**
     * Sell Start Date of resource of type Menu.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    sellStartDate?: string;
    /**
     * Sell End Date of resource of type Menu.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    sellEndDate?: string;
    /**
     * Event Start Date of resource of type Menu.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    eventStartDate?: string;
    /**
     * Event End Date of resource of type Menu.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    eventEndDate?: string;
    /**
     * Indicates that this resource is consumption based in a catering package
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    consumptionBased?: boolean;
    /**
     * Indicates that this resource is a MultiChoice Menu or not
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    multiChoice?: boolean;
    /**
     * Hotel code which the event resource belong to.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    hotelId?: string;
    /**
     * The order of the resource in the Banquet Event Order within their specific resource group.
     * @type {string}
     * @memberof CateringEventResourceType
     */
    order?: string;
    /**
     * Flag that indicates if at least one menu item has a discount.
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    hasDiscountMenuItem?: boolean;
    /**
     * Flag that indicates the resource has notes associated with it.
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    hasNotes?: boolean;
    /**
     * Indicates that item must be ordered externally.
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    external?: boolean;
    /**
     * Indicates that this resource item is a custom item added for this event.
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    custom?: boolean;
    /**
     * Indicates that this resource is included in a catering package.
     * @type {boolean}
     * @memberof CateringEventResourceType
     */
    packaged?: boolean;
}
/**
 * Check if a given object implements the CateringEventResourceType interface.
 */
export declare function instanceOfCateringEventResourceType(value: object): boolean;
export declare function CateringEventResourceTypeFromJSON(json: any): CateringEventResourceType;
export declare function CateringEventResourceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventResourceType;
export declare function CateringEventResourceTypeToJSON(value?: CateringEventResourceType | null): any;
