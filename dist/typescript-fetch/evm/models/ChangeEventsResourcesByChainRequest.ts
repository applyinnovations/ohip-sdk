/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventInfoType } from './EventInfoType';
import {
    EventInfoTypeFromJSON,
    EventInfoTypeFromJSONTyped,
    EventInfoTypeToJSON,
} from './EventInfoType';
import type { EventItemsType } from './EventItemsType';
import {
    EventItemsTypeFromJSON,
    EventItemsTypeFromJSONTyped,
    EventItemsTypeToJSON,
} from './EventItemsType';
import type { EventMenusType } from './EventMenusType';
import {
    EventMenusTypeFromJSON,
    EventMenusTypeFromJSONTyped,
    EventMenusTypeToJSON,
} from './EventMenusType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface ChangeEventsResourcesByChainRequest
 */
export interface ChangeEventsResourcesByChainRequest {
    /**
     * Pertain event information.
     * @type {Array<EventInfoType>}
     * @memberof ChangeEventsResourcesByChainRequest
     */
    eventDetails?: Array<EventInfoType>;
    /**
     * 
     * @type {EventItemsType}
     * @memberof ChangeEventsResourcesByChainRequest
     */
    eventItems?: EventItemsType;
    /**
     * 
     * @type {EventMenusType}
     * @memberof ChangeEventsResourcesByChainRequest
     */
    eventMenus?: EventMenusType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ChangeEventsResourcesByChainRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success elementSpace to define a business error.
     * @type {Array<WarningType>}
     * @memberof ChangeEventsResourcesByChainRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ChangeEventsResourcesByChainRequest interface.
 */
export function instanceOfChangeEventsResourcesByChainRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeEventsResourcesByChainRequestFromJSON(json: any): ChangeEventsResourcesByChainRequest {
    return ChangeEventsResourcesByChainRequestFromJSONTyped(json, false);
}

export function ChangeEventsResourcesByChainRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeEventsResourcesByChainRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventDetails': !exists(json, 'eventDetails') ? undefined : ((json['eventDetails'] as Array<any>).map(EventInfoTypeFromJSON)),
        'eventItems': !exists(json, 'eventItems') ? undefined : EventItemsTypeFromJSON(json['eventItems']),
        'eventMenus': !exists(json, 'eventMenus') ? undefined : EventMenusTypeFromJSON(json['eventMenus']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ChangeEventsResourcesByChainRequestToJSON(value?: ChangeEventsResourcesByChainRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventDetails': value.eventDetails === undefined ? undefined : ((value.eventDetails as Array<any>).map(EventInfoTypeToJSON)),
        'eventItems': EventItemsTypeToJSON(value.eventItems),
        'eventMenus': EventMenusTypeToJSON(value.eventMenus),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

