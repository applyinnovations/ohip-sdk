"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventChangesByDateTimeSummaryTypeToJSON = exports.EventChangesByDateTimeSummaryTypeFromJSONTyped = exports.EventChangesByDateTimeSummaryTypeFromJSON = exports.instanceOfEventChangesByDateTimeSummaryType = void 0;
const runtime_1 = require("../runtime");
const BlockId_1 = require("./BlockId");
const EventId_1 = require("./EventId");
const TransactionActionEnumType_1 = require("./TransactionActionEnumType");
/**
 * Check if a given object implements the EventChangesByDateTimeSummaryType interface.
 */
function instanceOfEventChangesByDateTimeSummaryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventChangesByDateTimeSummaryType = instanceOfEventChangesByDateTimeSummaryType;
function EventChangesByDateTimeSummaryTypeFromJSON(json) {
    return EventChangesByDateTimeSummaryTypeFromJSONTyped(json, false);
}
exports.EventChangesByDateTimeSummaryTypeFromJSON = EventChangesByDateTimeSummaryTypeFromJSON;
function EventChangesByDateTimeSummaryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, BlockId_1.BlockIdFromJSON)(json['blockId']),
        'eventId': !(0, runtime_1.exists)(json, 'eventId') ? undefined : (0, EventId_1.EventIdFromJSON)(json['eventId']),
        'startDate': !(0, runtime_1.exists)(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !(0, runtime_1.exists)(json, 'endDate') ? undefined : json['endDate'],
        'eventStatus': !(0, runtime_1.exists)(json, 'eventStatus') ? undefined : json['eventStatus'],
        'lastChangeDateTime': !(0, runtime_1.exists)(json, 'lastChangeDateTime') ? undefined : json['lastChangeDateTime'],
        'actionType': !(0, runtime_1.exists)(json, 'actionType') ? undefined : (0, TransactionActionEnumType_1.TransactionActionEnumTypeFromJSON)(json['actionType']),
    };
}
exports.EventChangesByDateTimeSummaryTypeFromJSONTyped = EventChangesByDateTimeSummaryTypeFromJSONTyped;
function EventChangesByDateTimeSummaryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'blockId': (0, BlockId_1.BlockIdToJSON)(value.blockId),
        'eventId': (0, EventId_1.EventIdToJSON)(value.eventId),
        'startDate': value.startDate,
        'endDate': value.endDate,
        'eventStatus': value.eventStatus,
        'lastChangeDateTime': value.lastChangeDateTime,
        'actionType': (0, TransactionActionEnumType_1.TransactionActionEnumTypeToJSON)(value.actionType),
    };
}
exports.EventChangesByDateTimeSummaryTypeToJSON = EventChangesByDateTimeSummaryTypeToJSON;
