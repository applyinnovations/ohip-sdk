"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringEventsAttendeesTypeToJSON = exports.CateringEventsAttendeesTypeFromJSONTyped = exports.CateringEventsAttendeesTypeFromJSON = exports.instanceOfCateringEventsAttendeesType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the CateringEventsAttendeesType interface.
 */
function instanceOfCateringEventsAttendeesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringEventsAttendeesType = instanceOfCateringEventsAttendeesType;
function CateringEventsAttendeesTypeFromJSON(json) {
    return CateringEventsAttendeesTypeFromJSONTyped(json, false);
}
exports.CateringEventsAttendeesTypeFromJSON = CateringEventsAttendeesTypeFromJSON;
function CateringEventsAttendeesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'expected': !(0, runtime_1.exists)(json, 'expected') ? undefined : json['expected'],
        'guaranteed': !(0, runtime_1.exists)(json, 'guaranteed') ? undefined : json['guaranteed'],
        'actual': !(0, runtime_1.exists)(json, 'actual') ? undefined : json['actual'],
        'set': !(0, runtime_1.exists)(json, 'set') ? undefined : json['set'],
        'billed': !(0, runtime_1.exists)(json, 'billed') ? undefined : json['billed'],
        'packageExpected': !(0, runtime_1.exists)(json, 'packageExpected') ? undefined : json['packageExpected'],
        'packageGuaranteed': !(0, runtime_1.exists)(json, 'packageGuaranteed') ? undefined : json['packageGuaranteed'],
        'packageActual': !(0, runtime_1.exists)(json, 'packageActual') ? undefined : json['packageActual'],
        'packageBilled': !(0, runtime_1.exists)(json, 'packageBilled') ? undefined : json['packageBilled'],
    };
}
exports.CateringEventsAttendeesTypeFromJSONTyped = CateringEventsAttendeesTypeFromJSONTyped;
function CateringEventsAttendeesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'expected': value.expected,
        'guaranteed': value.guaranteed,
        'actual': value.actual,
        'set': value.set,
        'billed': value.billed,
        'packageExpected': value.packageExpected,
        'packageGuaranteed': value.packageGuaranteed,
        'packageActual': value.packageActual,
        'packageBilled': value.packageBilled,
    };
}
exports.CateringEventsAttendeesTypeToJSON = CateringEventsAttendeesTypeToJSON;
