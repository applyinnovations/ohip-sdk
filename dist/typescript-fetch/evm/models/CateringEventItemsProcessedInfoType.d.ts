/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
/**
 * Status/Info of the processed items.
 * @export
 * @interface CateringEventItemsProcessedInfoType
 */
export interface CateringEventItemsProcessedInfoType {
    /**
     *
     * @type {BlockId}
     * @memberof CateringEventItemsProcessedInfoType
     */
    blockId?: BlockId;
    /**
     * Name of event where item will be copied.
     * @type {string}
     * @memberof CateringEventItemsProcessedInfoType
     */
    eventName?: string;
    /**
     * External Quantity of Item.
     * @type {number}
     * @memberof CateringEventItemsProcessedInfoType
     */
    externalQty?: number;
    /**
     * Hotel code where item will be copied.
     * @type {string}
     * @memberof CateringEventItemsProcessedInfoType
     */
    hotelId?: string;
    /**
     * Internal Quantity of Item.
     * @type {number}
     * @memberof CateringEventItemsProcessedInfoType
     */
    internalQty?: number;
    /**
     * Name of Item.
     * @type {string}
     * @memberof CateringEventItemsProcessedInfoType
     */
    itemName?: string;
    /**
     * Quantity of Item.
     * @type {number}
     * @memberof CateringEventItemsProcessedInfoType
     */
    quantity?: number;
    /**
     * Reason for not processing the item.
     * @type {string}
     * @memberof CateringEventItemsProcessedInfoType
     */
    reason?: string;
    /**
     * Status of the processed event. e.g Completed, Not Processed.
     * @type {string}
     * @memberof CateringEventItemsProcessedInfoType
     */
    status?: string;
}
/**
 * Check if a given object implements the CateringEventItemsProcessedInfoType interface.
 */
export declare function instanceOfCateringEventItemsProcessedInfoType(value: object): boolean;
export declare function CateringEventItemsProcessedInfoTypeFromJSON(json: any): CateringEventItemsProcessedInfoType;
export declare function CateringEventItemsProcessedInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventItemsProcessedInfoType;
export declare function CateringEventItemsProcessedInfoTypeToJSON(value?: CateringEventItemsProcessedInfoType | null): any;
