"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventResourceDetailTypeToJSON = exports.EventResourceDetailTypeFromJSONTyped = exports.EventResourceDetailTypeFromJSON = exports.instanceOfEventResourceDetailType = void 0;
const runtime_1 = require("../runtime");
const EventInfoType_1 = require("./EventInfoType");
const EventItemInfoType_1 = require("./EventItemInfoType");
const EventMenuInfoType_1 = require("./EventMenuInfoType");
/**
 * Check if a given object implements the EventResourceDetailType interface.
 */
function instanceOfEventResourceDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventResourceDetailType = instanceOfEventResourceDetailType;
function EventResourceDetailTypeFromJSON(json) {
    return EventResourceDetailTypeFromJSONTyped(json, false);
}
exports.EventResourceDetailTypeFromJSON = EventResourceDetailTypeFromJSON;
function EventResourceDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventDetailInfo': !(0, runtime_1.exists)(json, 'eventDetailInfo') ? undefined : (0, EventInfoType_1.EventInfoTypeFromJSON)(json['eventDetailInfo']),
        'item': !(0, runtime_1.exists)(json, 'item') ? undefined : (0, EventItemInfoType_1.EventItemInfoTypeFromJSON)(json['item']),
        'menu': !(0, runtime_1.exists)(json, 'menu') ? undefined : (0, EventMenuInfoType_1.EventMenuInfoTypeFromJSON)(json['menu']),
    };
}
exports.EventResourceDetailTypeFromJSONTyped = EventResourceDetailTypeFromJSONTyped;
function EventResourceDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventDetailInfo': (0, EventInfoType_1.EventInfoTypeToJSON)(value.eventDetailInfo),
        'item': (0, EventItemInfoType_1.EventItemInfoTypeToJSON)(value.item),
        'menu': (0, EventMenuInfoType_1.EventMenuInfoTypeToJSON)(value.menu),
    };
}
exports.EventResourceDetailTypeToJSON = EventResourceDetailTypeToJSON;
