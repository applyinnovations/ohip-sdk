"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringTypeToJSON = exports.CateringTypeFromJSONTyped = exports.CateringTypeFromJSON = exports.instanceOfCateringType = void 0;
const runtime_1 = require("../runtime");
const ApplyEventAttendeesChangesToEventsType_1 = require("./ApplyEventAttendeesChangesToEventsType");
const BookingStatusDetailType_1 = require("./BookingStatusDetailType");
const BookingStatusHistoryType_1 = require("./BookingStatusHistoryType");
const CancellationDetailsType_1 = require("./CancellationDetailsType");
const CateringRevenueType_1 = require("./CateringRevenueType");
const EventAttendeesType_1 = require("./EventAttendeesType");
const EventOrderType_1 = require("./EventOrderType");
const ResourceDiscountTypeType_1 = require("./ResourceDiscountTypeType");
/**
 * Check if a given object implements the CateringType interface.
 */
function instanceOfCateringType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringType = instanceOfCateringType;
function CateringTypeFromJSON(json) {
    return CateringTypeFromJSONTyped(json, false);
}
exports.CateringTypeFromJSON = CateringTypeFromJSON;
function CateringTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'applyBoardInfoToAllEvents': !(0, runtime_1.exists)(json, 'applyBoardInfoToAllEvents') ? undefined : json['applyBoardInfoToAllEvents'],
        'applyEventAttendeesChangesToEvents': !(0, runtime_1.exists)(json, 'applyEventAttendeesChangesToEvents') ? undefined : (0, ApplyEventAttendeesChangesToEventsType_1.ApplyEventAttendeesChangesToEventsTypeFromJSON)(json['applyEventAttendeesChangesToEvents']),
        'applyEventsGuaranteeToAllEvents': !(0, runtime_1.exists)(json, 'applyEventsGuaranteeToAllEvents') ? undefined : json['applyEventsGuaranteeToAllEvents'],
        'boardInfo': !(0, runtime_1.exists)(json, 'boardInfo') ? undefined : json['boardInfo'],
        'cancellationDetails': !(0, runtime_1.exists)(json, 'cancellationDetails') ? undefined : (0, CancellationDetailsType_1.CancellationDetailsTypeFromJSON)(json['cancellationDetails']),
        'cateringInternalStatus': !(0, runtime_1.exists)(json, 'cateringInternalStatus') ? undefined : json['cateringInternalStatus'],
        'cateringNextStatusList': !(0, runtime_1.exists)(json, 'cateringNextStatusList') ? undefined : (json['cateringNextStatusList'].map(BookingStatusDetailType_1.BookingStatusDetailTypeFromJSON)),
        'cateringOwner': !(0, runtime_1.exists)(json, 'cateringOwner') ? undefined : json['cateringOwner'],
        'cateringRevenue': !(0, runtime_1.exists)(json, 'cateringRevenue') ? undefined : (0, CateringRevenueType_1.CateringRevenueTypeFromJSON)(json['cateringRevenue']),
        'cateringStatus': !(0, runtime_1.exists)(json, 'cateringStatus') ? undefined : (0, BookingStatusDetailType_1.BookingStatusDetailTypeFromJSON)(json['cateringStatus']),
        'cateringStatusChangeHistory': !(0, runtime_1.exists)(json, 'cateringStatusChangeHistory') ? undefined : (json['cateringStatusChangeHistory'].map(BookingStatusHistoryType_1.BookingStatusHistoryTypeFromJSON)),
        'contractNumber': !(0, runtime_1.exists)(json, 'contractNumber') ? undefined : json['contractNumber'],
        'decisionDate': !(0, runtime_1.exists)(json, 'decisionDate') ? undefined : json['decisionDate'],
        'eventAttendees': !(0, runtime_1.exists)(json, 'eventAttendees') ? undefined : (0, EventAttendeesType_1.EventAttendeesTypeFromJSON)(json['eventAttendees']),
        'eventOrder': !(0, runtime_1.exists)(json, 'eventOrder') ? undefined : (0, EventOrderType_1.EventOrderTypeFromJSON)(json['eventOrder']),
        'followUpDate': !(0, runtime_1.exists)(json, 'followUpDate') ? undefined : json['followUpDate'],
        'functionInfo': !(0, runtime_1.exists)(json, 'functionInfo') ? undefined : json['functionInfo'],
        'hasPackageEvents': !(0, runtime_1.exists)(json, 'hasPackageEvents') ? undefined : json['hasPackageEvents'],
        'onSiteName': !(0, runtime_1.exists)(json, 'onSiteName') ? undefined : json['onSiteName'],
        'overrideEventsProcessingWarnings': !(0, runtime_1.exists)(json, 'overrideEventsProcessingWarnings') ? undefined : json['overrideEventsProcessingWarnings'],
        'pkgsTmplt': !(0, runtime_1.exists)(json, 'pkgsTmplt') ? undefined : json['pkgsTmplt'],
        'resourceDiscountPercentage': !(0, runtime_1.exists)(json, 'resourceDiscountPercentage') ? undefined : json['resourceDiscountPercentage'],
        'resourceDiscountType': !(0, runtime_1.exists)(json, 'resourceDiscountType') ? undefined : (0, ResourceDiscountTypeType_1.ResourceDiscountTypeTypeFromJSON)(json['resourceDiscountType']),
        'trackChanges': !(0, runtime_1.exists)(json, 'trackChanges') ? undefined : json['trackChanges'],
    };
}
exports.CateringTypeFromJSONTyped = CateringTypeFromJSONTyped;
function CateringTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'applyBoardInfoToAllEvents': value.applyBoardInfoToAllEvents,
        'applyEventAttendeesChangesToEvents': (0, ApplyEventAttendeesChangesToEventsType_1.ApplyEventAttendeesChangesToEventsTypeToJSON)(value.applyEventAttendeesChangesToEvents),
        'applyEventsGuaranteeToAllEvents': value.applyEventsGuaranteeToAllEvents,
        'boardInfo': value.boardInfo,
        'cancellationDetails': (0, CancellationDetailsType_1.CancellationDetailsTypeToJSON)(value.cancellationDetails),
        'cateringInternalStatus': value.cateringInternalStatus,
        'cateringNextStatusList': value.cateringNextStatusList === undefined ? undefined : (value.cateringNextStatusList.map(BookingStatusDetailType_1.BookingStatusDetailTypeToJSON)),
        'cateringOwner': value.cateringOwner,
        'cateringRevenue': (0, CateringRevenueType_1.CateringRevenueTypeToJSON)(value.cateringRevenue),
        'cateringStatus': (0, BookingStatusDetailType_1.BookingStatusDetailTypeToJSON)(value.cateringStatus),
        'cateringStatusChangeHistory': value.cateringStatusChangeHistory === undefined ? undefined : (value.cateringStatusChangeHistory.map(BookingStatusHistoryType_1.BookingStatusHistoryTypeToJSON)),
        'contractNumber': value.contractNumber,
        'decisionDate': value.decisionDate,
        'eventAttendees': (0, EventAttendeesType_1.EventAttendeesTypeToJSON)(value.eventAttendees),
        'eventOrder': (0, EventOrderType_1.EventOrderTypeToJSON)(value.eventOrder),
        'followUpDate': value.followUpDate,
        'functionInfo': value.functionInfo,
        'hasPackageEvents': value.hasPackageEvents,
        'onSiteName': value.onSiteName,
        'overrideEventsProcessingWarnings': value.overrideEventsProcessingWarnings,
        'pkgsTmplt': value.pkgsTmplt,
        'resourceDiscountPercentage': value.resourceDiscountPercentage,
        'resourceDiscountType': (0, ResourceDiscountTypeType_1.ResourceDiscountTypeTypeToJSON)(value.resourceDiscountType),
        'trackChanges': value.trackChanges,
    };
}
exports.CateringTypeToJSON = CateringTypeToJSON;
