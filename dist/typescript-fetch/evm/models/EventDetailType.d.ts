/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BookingStatusType } from './BookingStatusType';
import type { CateringEventLinkType } from './CateringEventLinkType';
import type { CateringEventsAttendeesType } from './CateringEventsAttendeesType';
import type { CateringStatusTypeType } from './CateringStatusTypeType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import type { TranslationTextType60 } from './TranslationTextType60';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Pertain Information about the Event Details
 * @export
 * @interface EventDetailType
 */
export interface EventDetailType {
    /**
     * Flag to indicate if the event is booked as a backup for another event.
     * @type {boolean}
     * @memberof EventDetailType
     */
    alternateEvent?: boolean;
    /**
     *
     * @type {CateringEventsAttendeesType}
     * @memberof EventDetailType
     */
    attendees?: CateringEventsAttendeesType;
    /**
     * Indicates if catering event's spaces are deducted from inventory
     * @type {boolean}
     * @memberof EventDetailType
     */
    cateringDeductInventory?: boolean;
    /**
     *
     * @type {CateringStatusTypeType}
     * @memberof EventDetailType
     */
    cateringStatusType?: CateringStatusTypeType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof EventDetailType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof EventDetailType
     */
    creatorId?: string;
    /**
     * Indicates whether display the doorcard information on the Event Overview report.
     * @type {boolean}
     * @memberof EventDetailType
     */
    displayDoorcard?: boolean;
    /**
     * It is the group details to display on the outside of a meeting functionSpaceDetails.
     * @type {string}
     * @memberof EventDetailType
     */
    doorcard?: string;
    /**
     * Flag that indicates if actual revenue can be manually edited.
     * @type {boolean}
     * @memberof EventDetailType
     */
    eventLevelRevenueActualization?: boolean;
    /**
     *
     * @type {CateringEventLinkType}
     * @memberof EventDetailType
     */
    eventLink?: CateringEventLinkType;
    /**
     *
     * @type {TranslationTextType60}
     * @memberof EventDetailType
     */
    eventName?: TranslationTextType60;
    /**
     * Flag to indicate if the event is shareable with other events.
     * @type {boolean}
     * @memberof EventDetailType
     */
    eventShared?: boolean;
    /**
     *
     * @type {BookingStatusType}
     * @memberof EventDetailType
     */
    eventStatus?: BookingStatusType;
    /**
     *
     * @type {DateTimeSpanType}
     * @memberof EventDetailType
     */
    eventTimeSpan?: DateTimeSpanType;
    /**
     * Type of event.
     * @type {string}
     * @memberof EventDetailType
     */
    eventType?: string;
    /**
     * Field to save the external URL Enterted by the user in the event Overview Section.
     * @type {string}
     * @memberof EventDetailType
     */
    externalURL?: string;
    /**
     * Indicates whether the events has postings.
     * @type {boolean}
     * @memberof EventDetailType
     */
    hasPostings?: boolean;
    /**
     * Inactivation date of the event.
     * @type {Date}
     * @memberof EventDetailType
     */
    inactiveDate?: Date;
    /**
     * Flag to indicate if the event space is associated from the Package
     * @type {boolean}
     * @memberof EventDetailType
     */
    includeSpaceInPackage?: boolean;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof EventDetailType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof EventDetailType
     */
    lastModifyDateTime?: string;
    /**
     * Indicates whether the event is expected to be noisy and might possibly disturb other events.
     * @type {boolean}
     * @memberof EventDetailType
     */
    loudEvent?: boolean;
    /**
     * Indicates whether event is master event.
     * @type {boolean}
     * @memberof EventDetailType
     */
    masterEvent?: boolean;
    /**
     *
     * @type {UniqueIDType}
     * @memberof EventDetailType
     */
    masterEventId?: UniqueIDType;
    /**
     * Indicates whether event dates and functionSpaceDetails are move able.
     * @type {boolean}
     * @memberof EventDetailType
     */
    notMoveable?: boolean;
    /**
     * Package Code of the Event if it has a Package Enabled in it.
     * @type {string}
     * @memberof EventDetailType
     */
    packageCode?: string;
    /**
     * Flag to indicate if the event is part of a package.
     * @type {boolean}
     * @memberof EventDetailType
     */
    packageEvent?: boolean;
    /**
     * Package Id of the Event.
     * @type {number}
     * @memberof EventDetailType
     */
    packageId?: number;
    /**
     * Package Name of the Event.
     * @type {string}
     * @memberof EventDetailType
     */
    packageName?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof EventDetailType
     */
    purgeDate?: Date;
    /**
     * Flag to indicate if the event is a sub event.
     * @type {boolean}
     * @memberof EventDetailType
     */
    subEvent?: boolean;
    /**
     *
     * @type {BookingStatusType}
     * @memberof EventDetailType
     */
    waitlistReturnStatus?: BookingStatusType;
    /**
     * Indicates whether event is wait listed.
     * @type {boolean}
     * @memberof EventDetailType
     */
    waitlisted?: boolean;
}
/**
 * Check if a given object implements the EventDetailType interface.
 */
export declare function instanceOfEventDetailType(value: object): boolean;
export declare function EventDetailTypeFromJSON(json: any): EventDetailType;
export declare function EventDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventDetailType;
export declare function EventDetailTypeToJSON(value?: EventDetailType | null): any;
