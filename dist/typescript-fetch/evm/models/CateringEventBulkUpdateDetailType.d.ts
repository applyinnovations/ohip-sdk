/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BookingStatusType } from './BookingStatusType';
import type { TranslationTextType60 } from './TranslationTextType60';
/**
 * Catering Event detail type.
 * @export
 * @interface CateringEventBulkUpdateDetailType
 */
export interface CateringEventBulkUpdateDetailType {
    /**
     * Number of actual attendees attending the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    actualAttendees?: number;
    /**
     * Indicates whether the doorcard information is displayed.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    displayDoorcard?: boolean;
    /**
     * Group details to display on the outside of a meeting functionSpaceDetails.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    doorcard?: string;
    /**
     * Event eventEndDate date.
     * @type {Date}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventEndDate?: Date;
    /**
     * Event eventEndDate time.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventEndTime?: string;
    /**
     *
     * @type {TranslationTextType60}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventName?: TranslationTextType60;
    /**
     * Event eventStartDate date.
     * @type {Date}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStartDate?: Date;
    /**
     * Event eventStartDate time.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStartTime?: string;
    /**
     *
     * @type {BookingStatusType}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStatus?: BookingStatusType;
    /**
     * Type of event.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventType?: string;
    /**
     * Indicates whether the event is excluded from forecast reports.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    exclude?: boolean;
    /**
     * Number of expected attendees for the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    expectedAttendees?: number;
    /**
     * Number of guaranteed attendees for the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    guaranteedAttendees?: number;
    /**
     * Indicates whether the event is expected to be noisy and might possibly disturb other events.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    loudEvent?: boolean;
    /**
     * Indicates whether event dates and functionSpaceDetails are move able.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    notMoveable?: boolean;
    /**
     * Flag that indicates if actual revenue can be manually edited.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    revenueActualization?: boolean;
    /**
     * Indicates whether the event revenue has to be forecasted.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    useForecast?: boolean;
}
/**
 * Check if a given object implements the CateringEventBulkUpdateDetailType interface.
 */
export declare function instanceOfCateringEventBulkUpdateDetailType(value: object): boolean;
export declare function CateringEventBulkUpdateDetailTypeFromJSON(json: any): CateringEventBulkUpdateDetailType;
export declare function CateringEventBulkUpdateDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventBulkUpdateDetailType;
export declare function CateringEventBulkUpdateDetailTypeToJSON(value?: CateringEventBulkUpdateDetailType | null): any;
