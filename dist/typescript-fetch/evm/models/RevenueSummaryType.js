"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevenueSummaryTypeToJSON = exports.RevenueSummaryTypeFromJSONTyped = exports.RevenueSummaryTypeFromJSON = exports.instanceOfRevenueSummaryType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the RevenueSummaryType interface.
 */
function instanceOfRevenueSummaryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRevenueSummaryType = instanceOfRevenueSummaryType;
function RevenueSummaryTypeFromJSON(json) {
    return RevenueSummaryTypeFromJSONTyped(json, false);
}
exports.RevenueSummaryTypeFromJSON = RevenueSummaryTypeFromJSON;
function RevenueSummaryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cateringOtherRevenue': !(0, runtime_1.exists)(json, 'cateringOtherRevenue') ? undefined : json['cateringOtherRevenue'],
        'cateringRevenue': !(0, runtime_1.exists)(json, 'cateringRevenue') ? undefined : json['cateringRevenue'],
        'foodAndBeverageRevenue': !(0, runtime_1.exists)(json, 'foodAndBeverageRevenue') ? undefined : json['foodAndBeverageRevenue'],
        'nonRevenue': !(0, runtime_1.exists)(json, 'nonRevenue') ? undefined : json['nonRevenue'],
        'otherRevenue': !(0, runtime_1.exists)(json, 'otherRevenue') ? undefined : json['otherRevenue'],
        'roomRevenue': !(0, runtime_1.exists)(json, 'roomRevenue') ? undefined : json['roomRevenue'],
        'totalRevenue': !(0, runtime_1.exists)(json, 'totalRevenue') ? undefined : json['totalRevenue'],
    };
}
exports.RevenueSummaryTypeFromJSONTyped = RevenueSummaryTypeFromJSONTyped;
function RevenueSummaryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cateringOtherRevenue': value.cateringOtherRevenue,
        'cateringRevenue': value.cateringRevenue,
        'foodAndBeverageRevenue': value.foodAndBeverageRevenue,
        'nonRevenue': value.nonRevenue,
        'otherRevenue': value.otherRevenue,
        'roomRevenue': value.roomRevenue,
        'totalRevenue': value.totalRevenue,
    };
}
exports.RevenueSummaryTypeToJSON = RevenueSummaryTypeToJSON;
