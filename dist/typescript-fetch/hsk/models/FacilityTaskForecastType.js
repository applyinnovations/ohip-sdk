"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacilityTaskForecastTypeToJSON = exports.FacilityTaskForecastTypeFromJSONTyped = exports.FacilityTaskForecastTypeFromJSON = exports.instanceOfFacilityTaskForecastType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const FacilityCodeForecastType_1 = require("./FacilityCodeForecastType");
const ForecastQuantityType_1 = require("./ForecastQuantityType");
/**
 * Check if a given object implements the FacilityTaskForecastType interface.
 */
function instanceOfFacilityTaskForecastType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFacilityTaskForecastType = instanceOfFacilityTaskForecastType;
function FacilityTaskForecastTypeFromJSON(json) {
    return FacilityTaskForecastTypeFromJSONTyped(json, false);
}
exports.FacilityTaskForecastTypeFromJSON = FacilityTaskForecastTypeFromJSON;
function FacilityTaskForecastTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'facilityCodes': !(0, runtime_1.exists)(json, 'facilityCodes') ? undefined : (json['facilityCodes'].map(FacilityCodeForecastType_1.FacilityCodeForecastTypeFromJSON)),
        'task': !(0, runtime_1.exists)(json, 'task') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['task']),
        'taskForecast': !(0, runtime_1.exists)(json, 'taskForecast') ? undefined : (json['taskForecast'].map(ForecastQuantityType_1.ForecastQuantityTypeFromJSON)),
    };
}
exports.FacilityTaskForecastTypeFromJSONTyped = FacilityTaskForecastTypeFromJSONTyped;
function FacilityTaskForecastTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'facilityCodes': value.facilityCodes === undefined ? undefined : (value.facilityCodes.map(FacilityCodeForecastType_1.FacilityCodeForecastTypeToJSON)),
        'task': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.task),
        'taskForecast': value.taskForecast === undefined ? undefined : (value.taskForecast.map(ForecastQuantityType_1.ForecastQuantityTypeToJSON)),
    };
}
exports.FacilityTaskForecastTypeToJSON = FacilityTaskForecastTypeToJSON;
