/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssignedUserType } from './AssignedUserType';
import {
    AssignedUserTypeFromJSON,
    AssignedUserTypeFromJSONTyped,
    AssignedUserTypeToJSON,
} from './AssignedUserType';
import type { ImageResultType } from './ImageResultType';
import {
    ImageResultTypeFromJSON,
    ImageResultTypeFromJSONTyped,
    ImageResultTypeToJSON,
} from './ImageResultType';
import type { ResolveRoomMaintenanceType } from './ResolveRoomMaintenanceType';
import {
    ResolveRoomMaintenanceTypeFromJSON,
    ResolveRoomMaintenanceTypeFromJSONTyped,
    ResolveRoomMaintenanceTypeToJSON,
} from './ResolveRoomMaintenanceType';
import type { RoomType } from './RoomType';
import {
    RoomTypeFromJSON,
    RoomTypeFromJSONTyped,
    RoomTypeToJSON,
} from './RoomType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Base maintenance type
 * @export
 * @interface RoomMaintenanceType
 */
export interface RoomMaintenanceType {
    /**
     * 
     * @type {AssignedUserType}
     * @memberof RoomMaintenanceType
     */
    assignedUserInfo?: AssignedUserType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    creatorId?: string;
    /**
     * Collection of image results.
     * @type {Array<ImageResultType>}
     * @memberof RoomMaintenanceType
     */
    images?: Array<ImageResultType>;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    lastModifyDateTime?: string;
    /**
     * Maintenance Code
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    maintenanceCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomMaintenanceType
     */
    maintenanceId?: UniqueIDType;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof RoomMaintenanceType
     */
    purgeDate?: Date;
    /**
     * Maintenance remarks
     * @type {string}
     * @memberof RoomMaintenanceType
     */
    remarks?: string;
    /**
     * 
     * @type {ResolveRoomMaintenanceType}
     * @memberof RoomMaintenanceType
     */
    resolveInfo?: ResolveRoomMaintenanceType;
    /**
     * 
     * @type {RoomType}
     * @memberof RoomMaintenanceType
     */
    roomInfo?: RoomType;
}

/**
 * Check if a given object implements the RoomMaintenanceType interface.
 */
export function instanceOfRoomMaintenanceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomMaintenanceTypeFromJSON(json: any): RoomMaintenanceType {
    return RoomMaintenanceTypeFromJSONTyped(json, false);
}

export function RoomMaintenanceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomMaintenanceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assignedUserInfo': !exists(json, 'assignedUserInfo') ? undefined : AssignedUserTypeFromJSON(json['assignedUserInfo']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'images': !exists(json, 'images') ? undefined : ((json['images'] as Array<any>).map(ImageResultTypeFromJSON)),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'maintenanceCode': !exists(json, 'maintenanceCode') ? undefined : json['maintenanceCode'],
        'maintenanceId': !exists(json, 'maintenanceId') ? undefined : UniqueIDTypeFromJSON(json['maintenanceId']),
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'resolveInfo': !exists(json, 'resolveInfo') ? undefined : ResolveRoomMaintenanceTypeFromJSON(json['resolveInfo']),
        'roomInfo': !exists(json, 'roomInfo') ? undefined : RoomTypeFromJSON(json['roomInfo']),
    };
}

export function RoomMaintenanceTypeToJSON(value?: RoomMaintenanceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assignedUserInfo': AssignedUserTypeToJSON(value.assignedUserInfo),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'images': value.images === undefined ? undefined : ((value.images as Array<any>).map(ImageResultTypeToJSON)),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'maintenanceCode': value.maintenanceCode,
        'maintenanceId': UniqueIDTypeToJSON(value.maintenanceId),
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substr(0,10)),
        'remarks': value.remarks,
        'resolveInfo': ResolveRoomMaintenanceTypeToJSON(value.resolveInfo),
        'roomInfo': RoomTypeToJSON(value.roomInfo),
    };
}

