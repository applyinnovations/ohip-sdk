/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FacilityTaskForecastType } from './FacilityTaskForecastType';
import {
    FacilityTaskForecastTypeFromJSON,
    FacilityTaskForecastTypeFromJSONTyped,
    FacilityTaskForecastTypeToJSON,
} from './FacilityTaskForecastType';
import type { FacilityTotalForecastType } from './FacilityTotalForecastType';
import {
    FacilityTotalForecastTypeFromJSON,
    FacilityTotalForecastTypeFromJSONTyped,
    FacilityTotalForecastTypeToJSON,
} from './FacilityTotalForecastType';

/**
 * Facility Forecase type
 * @export
 * @interface FacilityForecastFacilityForecastDetails
 */
export interface FacilityForecastFacilityForecastDetails {
    /**
     * The facility forecast information.
     * @type {Array<FacilityTaskForecastType>}
     * @memberof FacilityForecastFacilityForecastDetails
     */
    tasks?: Array<FacilityTaskForecastType>;
    /**
     * 
     * @type {FacilityTotalForecastType}
     * @memberof FacilityForecastFacilityForecastDetails
     */
    totals?: FacilityTotalForecastType;
}

/**
 * Check if a given object implements the FacilityForecastFacilityForecastDetails interface.
 */
export function instanceOfFacilityForecastFacilityForecastDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacilityForecastFacilityForecastDetailsFromJSON(json: any): FacilityForecastFacilityForecastDetails {
    return FacilityForecastFacilityForecastDetailsFromJSONTyped(json, false);
}

export function FacilityForecastFacilityForecastDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacilityForecastFacilityForecastDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(FacilityTaskForecastTypeFromJSON)),
        'totals': !exists(json, 'totals') ? undefined : FacilityTotalForecastTypeFromJSON(json['totals']),
    };
}

export function FacilityForecastFacilityForecastDetailsToJSON(value?: FacilityForecastFacilityForecastDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(FacilityTaskForecastTypeToJSON)),
        'totals': FacilityTotalForecastTypeToJSON(value.totals),
    };
}

