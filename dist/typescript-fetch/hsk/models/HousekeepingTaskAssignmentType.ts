/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingTaskCodeType } from './HousekeepingTaskCodeType';
import {
    HousekeepingTaskCodeTypeFromJSON,
    HousekeepingTaskCodeTypeFromJSONTyped,
    HousekeepingTaskCodeTypeToJSON,
} from './HousekeepingTaskCodeType';
import type { HousekeepingTaskType } from './HousekeepingTaskType';
import {
    HousekeepingTaskTypeFromJSON,
    HousekeepingTaskTypeFromJSONTyped,
    HousekeepingTaskTypeToJSON,
} from './HousekeepingTaskType';

/**
 * Contains information for all the Task Sheets generated for a particular combination of Date and Task Code.
 * @export
 * @interface HousekeepingTaskAssignmentType
 */
export interface HousekeepingTaskAssignmentType {
    /**
     * The Task Code(s) for which the Task Sheets were generated.
     * @type {Array<HousekeepingTaskCodeType>}
     * @memberof HousekeepingTaskAssignmentType
     */
    taskCodes?: Array<HousekeepingTaskCodeType>;
    /**
     * List of Task Sheets generated for this assignment.
     * @type {Array<HousekeepingTaskType>}
     * @memberof HousekeepingTaskAssignmentType
     */
    taskSheets?: Array<HousekeepingTaskType>;
    /**
     * Property where the Task Assignment is done.
     * @type {string}
     * @memberof HousekeepingTaskAssignmentType
     */
    hotelId?: string;
    /**
     * The date for which the Task Assignment is done. Date should be the current business date in most cases. Date cannot be in the past.
     * @type {Date}
     * @memberof HousekeepingTaskAssignmentType
     */
    taskDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof HousekeepingTaskAssignmentType
     */
    taskSheetsCount?: number;
}

/**
 * Check if a given object implements the HousekeepingTaskAssignmentType interface.
 */
export function instanceOfHousekeepingTaskAssignmentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingTaskAssignmentTypeFromJSON(json: any): HousekeepingTaskAssignmentType {
    return HousekeepingTaskAssignmentTypeFromJSONTyped(json, false);
}

export function HousekeepingTaskAssignmentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingTaskAssignmentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskCodes': !exists(json, 'taskCodes') ? undefined : ((json['taskCodes'] as Array<any>).map(HousekeepingTaskCodeTypeFromJSON)),
        'taskSheets': !exists(json, 'taskSheets') ? undefined : ((json['taskSheets'] as Array<any>).map(HousekeepingTaskTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'taskDate': !exists(json, 'taskDate') ? undefined : (new Date(json['taskDate'])),
        'taskSheetsCount': !exists(json, 'taskSheetsCount') ? undefined : json['taskSheetsCount'],
    };
}

export function HousekeepingTaskAssignmentTypeToJSON(value?: HousekeepingTaskAssignmentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskCodes': value.taskCodes === undefined ? undefined : ((value.taskCodes as Array<any>).map(HousekeepingTaskCodeTypeToJSON)),
        'taskSheets': value.taskSheets === undefined ? undefined : ((value.taskSheets as Array<any>).map(HousekeepingTaskTypeToJSON)),
        'hotelId': value.hotelId,
        'taskDate': value.taskDate === undefined ? undefined : (value.taskDate.toISOString().substr(0,10)),
        'taskSheetsCount': value.taskSheetsCount,
    };
}

