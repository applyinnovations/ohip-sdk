/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FacilityCodeType } from './FacilityCodeType';
import {
    FacilityCodeTypeFromJSON,
    FacilityCodeTypeFromJSONTyped,
    FacilityCodeTypeToJSON,
} from './FacilityCodeType';
import type { FacilityTaskBaseType } from './FacilityTaskBaseType';
import {
    FacilityTaskBaseTypeFromJSON,
    FacilityTaskBaseTypeFromJSONTyped,
    FacilityTaskBaseTypeToJSON,
} from './FacilityTaskBaseType';
import type { HousekeepingTaskStayPeriodType } from './HousekeepingTaskStayPeriodType';
import {
    HousekeepingTaskStayPeriodTypeFromJSON,
    HousekeepingTaskStayPeriodTypeFromJSONTyped,
    HousekeepingTaskStayPeriodTypeToJSON,
} from './HousekeepingTaskStayPeriodType';

/**
 * A single facility task type.
 * @export
 * @interface FacilityHousekeepingTaskType
 */
export interface FacilityHousekeepingTaskType {
    /**
     * Signifies offset(in days) i.e. start on 3rd day from arrival.
     * @type {number}
     * @memberof FacilityHousekeepingTaskType
     */
    cycleStartDay?: number;
    /**
     * List of the facility codes.
     * @type {Array<FacilityCodeType>}
     * @memberof FacilityHousekeepingTaskType
     */
    facilityCodes?: Array<FacilityCodeType>;
    /**
     * 
     * @type {FacilityTaskBaseType}
     * @memberof FacilityHousekeepingTaskType
     */
    facilityTask?: FacilityTaskBaseType;
    /**
     * Signifies frequency(i.e. every 2 days) with which task is to be performed.
     * @type {number}
     * @memberof FacilityHousekeepingTaskType
     */
    frequency?: number;
    /**
     * Room number at which task is to be performed.
     * @type {string}
     * @memberof FacilityHousekeepingTaskType
     */
    roomId?: string;
    /**
     * Signifies the room type for which task is being performed .
     * @type {string}
     * @memberof FacilityHousekeepingTaskType
     */
    roomType?: string;
    /**
     * 
     * @type {HousekeepingTaskStayPeriodType}
     * @memberof FacilityHousekeepingTaskType
     */
    stayPeriod?: HousekeepingTaskStayPeriodType;
    /**
     * A reservation date on which task must occur.
     * @type {Date}
     * @memberof FacilityHousekeepingTaskType
     */
    taskDate?: Date;
    /**
     * Date on which task will stop being performed.
     * @type {Date}
     * @memberof FacilityHousekeepingTaskType
     */
    taskEndDate?: Date;
    /**
     * Date on which the task needs to start being performed.
     * @type {Date}
     * @memberof FacilityHousekeepingTaskType
     */
    taskStartDate?: Date;
}

/**
 * Check if a given object implements the FacilityHousekeepingTaskType interface.
 */
export function instanceOfFacilityHousekeepingTaskType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacilityHousekeepingTaskTypeFromJSON(json: any): FacilityHousekeepingTaskType {
    return FacilityHousekeepingTaskTypeFromJSONTyped(json, false);
}

export function FacilityHousekeepingTaskTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacilityHousekeepingTaskType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cycleStartDay': !exists(json, 'cycleStartDay') ? undefined : json['cycleStartDay'],
        'facilityCodes': !exists(json, 'facilityCodes') ? undefined : ((json['facilityCodes'] as Array<any>).map(FacilityCodeTypeFromJSON)),
        'facilityTask': !exists(json, 'facilityTask') ? undefined : FacilityTaskBaseTypeFromJSON(json['facilityTask']),
        'frequency': !exists(json, 'frequency') ? undefined : json['frequency'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'stayPeriod': !exists(json, 'stayPeriod') ? undefined : HousekeepingTaskStayPeriodTypeFromJSON(json['stayPeriod']),
        'taskDate': !exists(json, 'taskDate') ? undefined : (new Date(json['taskDate'])),
        'taskEndDate': !exists(json, 'taskEndDate') ? undefined : (new Date(json['taskEndDate'])),
        'taskStartDate': !exists(json, 'taskStartDate') ? undefined : (new Date(json['taskStartDate'])),
    };
}

export function FacilityHousekeepingTaskTypeToJSON(value?: FacilityHousekeepingTaskType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cycleStartDay': value.cycleStartDay,
        'facilityCodes': value.facilityCodes === undefined ? undefined : ((value.facilityCodes as Array<any>).map(FacilityCodeTypeToJSON)),
        'facilityTask': FacilityTaskBaseTypeToJSON(value.facilityTask),
        'frequency': value.frequency,
        'roomId': value.roomId,
        'roomType': value.roomType,
        'stayPeriod': HousekeepingTaskStayPeriodTypeToJSON(value.stayPeriod),
        'taskDate': value.taskDate === undefined ? undefined : (value.taskDate.toISOString().substr(0,10)),
        'taskEndDate': value.taskEndDate === undefined ? undefined : (value.taskEndDate.toISOString().substr(0,10)),
        'taskStartDate': value.taskStartDate === undefined ? undefined : (value.taskStartDate.toISOString().substr(0,10)),
    };
}

