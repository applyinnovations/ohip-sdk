"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveTaskRoomsCriteriaTypeToJSON = exports.MoveTaskRoomsCriteriaTypeFromJSONTyped = exports.MoveTaskRoomsCriteriaTypeFromJSON = exports.instanceOfMoveTaskRoomsCriteriaType = void 0;
const runtime_1 = require("../runtime");
const HousekeepingTaskCodeType_1 = require("./HousekeepingTaskCodeType");
const RoomType_1 = require("./RoomType");
/**
 * Check if a given object implements the MoveTaskRoomsCriteriaType interface.
 */
function instanceOfMoveTaskRoomsCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMoveTaskRoomsCriteriaType = instanceOfMoveTaskRoomsCriteriaType;
function MoveTaskRoomsCriteriaTypeFromJSON(json) {
    return MoveTaskRoomsCriteriaTypeFromJSONTyped(json, false);
}
exports.MoveTaskRoomsCriteriaTypeFromJSON = MoveTaskRoomsCriteriaTypeFromJSON;
function MoveTaskRoomsCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'rooms': !(0, runtime_1.exists)(json, 'rooms') ? undefined : (json['rooms'].map(RoomType_1.RoomTypeFromJSON)),
        'taskCode': !(0, runtime_1.exists)(json, 'taskCode') ? undefined : (json['taskCode'].map(HousekeepingTaskCodeType_1.HousekeepingTaskCodeTypeFromJSON)),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'taskDate': !(0, runtime_1.exists)(json, 'taskDate') ? undefined : json['taskDate'],
        'fromTaskSheetNumber': !(0, runtime_1.exists)(json, 'fromTaskSheetNumber') ? undefined : json['fromTaskSheetNumber'],
        'toTaskSheetNumber': !(0, runtime_1.exists)(json, 'toTaskSheetNumber') ? undefined : json['toTaskSheetNumber'],
    };
}
exports.MoveTaskRoomsCriteriaTypeFromJSONTyped = MoveTaskRoomsCriteriaTypeFromJSONTyped;
function MoveTaskRoomsCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'rooms': value.rooms === undefined ? undefined : (value.rooms.map(RoomType_1.RoomTypeToJSON)),
        'taskCode': value.taskCode === undefined ? undefined : (value.taskCode.map(HousekeepingTaskCodeType_1.HousekeepingTaskCodeTypeToJSON)),
        'hotelId': value.hotelId,
        'taskDate': value.taskDate,
        'fromTaskSheetNumber': value.fromTaskSheetNumber,
        'toTaskSheetNumber': value.toTaskSheetNumber,
    };
}
exports.MoveTaskRoomsCriteriaTypeToJSON = MoveTaskRoomsCriteriaTypeToJSON;
