"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetRoomConditionTypeToJSON = exports.SetRoomConditionTypeFromJSONTyped = exports.SetRoomConditionTypeFromJSON = exports.instanceOfSetRoomConditionType = void 0;
const runtime_1 = require("../runtime");
const CodeListType_1 = require("./CodeListType");
const RoomConditionType_1 = require("./RoomConditionType");
/**
 * Check if a given object implements the SetRoomConditionType interface.
 */
function instanceOfSetRoomConditionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSetRoomConditionType = instanceOfSetRoomConditionType;
function SetRoomConditionTypeFromJSON(json) {
    return SetRoomConditionTypeFromJSONTyped(json, false);
}
exports.SetRoomConditionTypeFromJSON = SetRoomConditionTypeFromJSON;
function SetRoomConditionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'includeOccupiedRooms': !(0, runtime_1.exists)(json, 'includeOccupiedRooms') ? undefined : json['includeOccupiedRooms'],
        'overrideHoldRooms': !(0, runtime_1.exists)(json, 'overrideHoldRooms') ? undefined : json['overrideHoldRooms'],
        'roomCondition': !(0, runtime_1.exists)(json, 'roomCondition') ? undefined : (0, RoomConditionType_1.RoomConditionTypeFromJSON)(json['roomCondition']),
        'roomNumberList': !(0, runtime_1.exists)(json, 'roomNumberList') ? undefined : (0, CodeListType_1.CodeListTypeFromJSON)(json['roomNumberList']),
    };
}
exports.SetRoomConditionTypeFromJSONTyped = SetRoomConditionTypeFromJSONTyped;
function SetRoomConditionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'includeOccupiedRooms': value.includeOccupiedRooms,
        'overrideHoldRooms': value.overrideHoldRooms,
        'roomCondition': (0, RoomConditionType_1.RoomConditionTypeToJSON)(value.roomCondition),
        'roomNumberList': (0, CodeListType_1.CodeListTypeToJSON)(value.roomNumberList),
    };
}
exports.SetRoomConditionTypeToJSON = SetRoomConditionTypeToJSON;
