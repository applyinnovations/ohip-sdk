/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { RoomFeatureType } from './RoomFeatureType';
/**
 * Basic information of room type.
 * @export
 * @interface RoomTypeShortInfoType
 */
export interface RoomTypeShortInfoType {
    /**
     * Indicates if room type of the room is flagged as housekeeping. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    houseKeeping?: boolean;
    /**
     * Indicates if room type is isAccessible.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    isAccessible?: boolean;
    /**
     * Indicates if room is a isSuiteRoom. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    isSuiteRoom?: boolean;
    /**
     * Maximum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    maximumOccupancy?: number;
    /**
     * Indicates whether function space can be meeting room.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    meetingRoom?: boolean;
    /**
     * Minimum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    minimumOccupancy?: number;
    /**
     * Indicates if room is a pseudoRoom. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    pseudoRoom?: boolean;
    /**
     * Room Class of the room. This is read-only.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomClass?: string;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof RoomTypeShortInfoType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomType?: string;
    /**
     * Short Description of room type.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    shortDescription?: string;
    /**
     * Specifies the smoking preference for room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    smokingPreference?: string;
}
/**
 * Check if a given object implements the RoomTypeShortInfoType interface.
 */
export declare function instanceOfRoomTypeShortInfoType(value: object): boolean;
export declare function RoomTypeShortInfoTypeFromJSON(json: any): RoomTypeShortInfoType;
export declare function RoomTypeShortInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeShortInfoType;
export declare function RoomTypeShortInfoTypeToJSON(value?: RoomTypeShortInfoType | null): any;
