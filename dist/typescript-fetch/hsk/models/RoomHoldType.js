"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomHoldTypeToJSON = exports.RoomHoldTypeFromJSONTyped = exports.RoomHoldTypeFromJSON = exports.instanceOfRoomHoldType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the RoomHoldType interface.
 */
function instanceOfRoomHoldType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomHoldType = instanceOfRoomHoldType;
function RoomHoldTypeFromJSON(json) {
    return RoomHoldTypeFromJSONTyped(json, false);
}
exports.RoomHoldTypeFromJSON = RoomHoldTypeFromJSON;
function RoomHoldTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'holdUntil': !(0, runtime_1.exists)(json, 'holdUntil') ? undefined : json['holdUntil'],
        'holdUser': !(0, runtime_1.exists)(json, 'holdUser') ? undefined : json['holdUser'],
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
    };
}
exports.RoomHoldTypeFromJSONTyped = RoomHoldTypeFromJSONTyped;
function RoomHoldTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'holdUntil': value.holdUntil,
        'holdUser': value.holdUser,
        'comments': value.comments,
    };
}
exports.RoomHoldTypeToJSON = RoomHoldTypeToJSON;
