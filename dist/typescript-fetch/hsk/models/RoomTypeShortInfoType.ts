/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomFeatureType } from './RoomFeatureType';
import {
    RoomFeatureTypeFromJSON,
    RoomFeatureTypeFromJSONTyped,
    RoomFeatureTypeToJSON,
} from './RoomFeatureType';

/**
 * Basic information of room type.
 * @export
 * @interface RoomTypeShortInfoType
 */
export interface RoomTypeShortInfoType {
    /**
     * Indicates if room type of the room is flagged as housekeeping. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    houseKeeping?: boolean;
    /**
     * Indicates if room type is isAccessible.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    isAccessible?: boolean;
    /**
     * Indicates if room is a isSuiteRoom. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    isSuiteRoom?: boolean;
    /**
     * Maximum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    maximumOccupancy?: number;
    /**
     * Indicates whether function space can be meeting room.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    meetingRoom?: boolean;
    /**
     * Minimum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    minimumOccupancy?: number;
    /**
     * Indicates if room is a pseudoRoom. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    pseudoRoom?: boolean;
    /**
     * Room Class of the room. This is read-only.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomClass?: string;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof RoomTypeShortInfoType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomType?: string;
    /**
     * Short Description of room type.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    shortDescription?: string;
    /**
     * Specifies the smoking preference for room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    smokingPreference?: string;
}

/**
 * Check if a given object implements the RoomTypeShortInfoType interface.
 */
export function instanceOfRoomTypeShortInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomTypeShortInfoTypeFromJSON(json: any): RoomTypeShortInfoType {
    return RoomTypeShortInfoTypeFromJSONTyped(json, false);
}

export function RoomTypeShortInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeShortInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'houseKeeping': !exists(json, 'houseKeeping') ? undefined : json['houseKeeping'],
        'isAccessible': !exists(json, 'isAccessible') ? undefined : json['isAccessible'],
        'isSuiteRoom': !exists(json, 'isSuiteRoom') ? undefined : json['isSuiteRoom'],
        'maximumOccupancy': !exists(json, 'maximumOccupancy') ? undefined : json['maximumOccupancy'],
        'meetingRoom': !exists(json, 'meetingRoom') ? undefined : json['meetingRoom'],
        'minimumOccupancy': !exists(json, 'minimumOccupancy') ? undefined : json['minimumOccupancy'],
        'pseudoRoom': !exists(json, 'pseudoRoom') ? undefined : json['pseudoRoom'],
        'roomClass': !exists(json, 'roomClass') ? undefined : json['roomClass'],
        'roomFeatures': !exists(json, 'roomFeatures') ? undefined : ((json['roomFeatures'] as Array<any>).map(RoomFeatureTypeFromJSON)),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'smokingPreference': !exists(json, 'smokingPreference') ? undefined : json['smokingPreference'],
    };
}

export function RoomTypeShortInfoTypeToJSON(value?: RoomTypeShortInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'houseKeeping': value.houseKeeping,
        'isAccessible': value.isAccessible,
        'isSuiteRoom': value.isSuiteRoom,
        'maximumOccupancy': value.maximumOccupancy,
        'meetingRoom': value.meetingRoom,
        'minimumOccupancy': value.minimumOccupancy,
        'pseudoRoom': value.pseudoRoom,
        'roomClass': value.roomClass,
        'roomFeatures': value.roomFeatures === undefined ? undefined : ((value.roomFeatures as Array<any>).map(RoomFeatureTypeToJSON)),
        'roomType': value.roomType,
        'shortDescription': value.shortDescription,
        'smokingPreference': value.smokingPreference,
    };
}

