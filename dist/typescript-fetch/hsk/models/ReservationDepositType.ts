/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Reservation Deposit Type.
 * @export
 * @interface ReservationDepositType
 */
export interface ReservationDepositType {
    /**
     * Deposit Amount Required.
     * @type {number}
     * @memberof ReservationDepositType
     */
    amountRequired?: number;
    /**
     * Deposit Amount Paid.
     * @type {number}
     * @memberof ReservationDepositType
     */
    amountPaid?: number;
    /**
     * Deposit Amount Owed.
     * @type {number}
     * @memberof ReservationDepositType
     */
    amountOwed?: number;
    /**
     * Deposit Due Date.
     * @type {Date}
     * @memberof ReservationDepositType
     */
    dueDate?: Date;
    /**
     * Deposit Posting Date.
     * @type {Date}
     * @memberof ReservationDepositType
     */
    postingDate?: Date;
    /**
     * Resolves whether reservation has paid deposit.
     * @type {boolean}
     * @memberof ReservationDepositType
     */
    hasPaid?: boolean;
    /**
     * Resolves whether reservation has outstanding deposit.
     * @type {boolean}
     * @memberof ReservationDepositType
     */
    hasOutstanding?: boolean;
}

/**
 * Check if a given object implements the ReservationDepositType interface.
 */
export function instanceOfReservationDepositType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationDepositTypeFromJSON(json: any): ReservationDepositType {
    return ReservationDepositTypeFromJSONTyped(json, false);
}

export function ReservationDepositTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationDepositType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountRequired': !exists(json, 'amountRequired') ? undefined : json['amountRequired'],
        'amountPaid': !exists(json, 'amountPaid') ? undefined : json['amountPaid'],
        'amountOwed': !exists(json, 'amountOwed') ? undefined : json['amountOwed'],
        'dueDate': !exists(json, 'dueDate') ? undefined : (new Date(json['dueDate'])),
        'postingDate': !exists(json, 'postingDate') ? undefined : (new Date(json['postingDate'])),
        'hasPaid': !exists(json, 'hasPaid') ? undefined : json['hasPaid'],
        'hasOutstanding': !exists(json, 'hasOutstanding') ? undefined : json['hasOutstanding'],
    };
}

export function ReservationDepositTypeToJSON(value?: ReservationDepositType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amountRequired': value.amountRequired,
        'amountPaid': value.amountPaid,
        'amountOwed': value.amountOwed,
        'dueDate': value.dueDate === undefined ? undefined : (value.dueDate.toISOString().substr(0,10)),
        'postingDate': value.postingDate === undefined ? undefined : (value.postingDate.toISOString().substr(0,10)),
        'hasPaid': value.hasPaid,
        'hasOutstanding': value.hasOutstanding,
    };
}

