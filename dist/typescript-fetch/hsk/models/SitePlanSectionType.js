"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SitePlanSectionTypeToJSON = exports.SitePlanSectionTypeFromJSONTyped = exports.SitePlanSectionTypeFromJSON = exports.instanceOfSitePlanSectionType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the SitePlanSectionType interface.
 */
function instanceOfSitePlanSectionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSitePlanSectionType = instanceOfSitePlanSectionType;
function SitePlanSectionTypeFromJSON(json) {
    return SitePlanSectionTypeFromJSONTyped(json, false);
}
exports.SitePlanSectionTypeFromJSON = SitePlanSectionTypeFromJSON;
function SitePlanSectionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'sectionCode': !(0, runtime_1.exists)(json, 'sectionCode') ? undefined : json['sectionCode'],
        'sectionType': !(0, runtime_1.exists)(json, 'sectionType') ? undefined : json['sectionType'],
        'linkCode': !(0, runtime_1.exists)(json, 'linkCode') ? undefined : json['linkCode'],
        'coordinates': !(0, runtime_1.exists)(json, 'coordinates') ? undefined : json['coordinates'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
    };
}
exports.SitePlanSectionTypeFromJSONTyped = SitePlanSectionTypeFromJSONTyped;
function SitePlanSectionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'sectionCode': value.sectionCode,
        'sectionType': value.sectionType,
        'linkCode': value.linkCode,
        'coordinates': value.coordinates,
        'description': value.description,
    };
}
exports.SitePlanSectionTypeToJSON = SitePlanSectionTypeToJSON;
