"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HousekeepingTaskTypeToJSON = exports.HousekeepingTaskTypeFromJSONTyped = exports.HousekeepingTaskTypeFromJSON = exports.instanceOfHousekeepingTaskType = void 0;
const runtime_1 = require("../runtime");
const AppUserOnBreakType_1 = require("./AppUserOnBreakType");
const DepartureTaskInfoType_1 = require("./DepartureTaskInfoType");
const FacilityCodeType_1 = require("./FacilityCodeType");
const HousekeepingCreditsType_1 = require("./HousekeepingCreditsType");
const HousekeepingTaskCodeType_1 = require("./HousekeepingTaskCodeType");
const HousekeepingTaskTypeAttendant_1 = require("./HousekeepingTaskTypeAttendant");
const HousekeepingTaskTypeRoomCountsInner_1 = require("./HousekeepingTaskTypeRoomCountsInner");
const HousekeepingTaskTypeRoomsInner_1 = require("./HousekeepingTaskTypeRoomsInner");
const ServicingAttendantStatusType_1 = require("./ServicingAttendantStatusType");
const TaskSheetType_1 = require("./TaskSheetType");
/**
 * Check if a given object implements the HousekeepingTaskType interface.
 */
function instanceOfHousekeepingTaskType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHousekeepingTaskType = instanceOfHousekeepingTaskType;
function HousekeepingTaskTypeFromJSON(json) {
    return HousekeepingTaskTypeFromJSONTyped(json, false);
}
exports.HousekeepingTaskTypeFromJSON = HousekeepingTaskTypeFromJSON;
function HousekeepingTaskTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'taskCodes': !(0, runtime_1.exists)(json, 'taskCodes') ? undefined : (json['taskCodes'].map(HousekeepingTaskCodeType_1.HousekeepingTaskCodeTypeFromJSON)),
        'departureTaskInfo': !(0, runtime_1.exists)(json, 'departureTaskInfo') ? undefined : (0, DepartureTaskInfoType_1.DepartureTaskInfoTypeFromJSON)(json['departureTaskInfo']),
        'totalSupplies': !(0, runtime_1.exists)(json, 'totalSupplies') ? undefined : (json['totalSupplies'].map(FacilityCodeType_1.FacilityCodeTypeFromJSON)),
        'credits': !(0, runtime_1.exists)(json, 'credits') ? undefined : (json['credits'].map(HousekeepingCreditsType_1.HousekeepingCreditsTypeFromJSON)),
        'attendant': !(0, runtime_1.exists)(json, 'attendant') ? undefined : (0, HousekeepingTaskTypeAttendant_1.HousekeepingTaskTypeAttendantFromJSON)(json['attendant']),
        'appUserOnBreak': !(0, runtime_1.exists)(json, 'appUserOnBreak') ? undefined : (0, AppUserOnBreakType_1.AppUserOnBreakTypeFromJSON)(json['appUserOnBreak']),
        'rooms': !(0, runtime_1.exists)(json, 'rooms') ? undefined : (json['rooms'].map(HousekeepingTaskTypeRoomsInner_1.HousekeepingTaskTypeRoomsInnerFromJSON)),
        'roomCounts': !(0, runtime_1.exists)(json, 'roomCounts') ? undefined : (json['roomCounts'].map(HousekeepingTaskTypeRoomCountsInner_1.HousekeepingTaskTypeRoomCountsInnerFromJSON)),
        'linenChangeCount': !(0, runtime_1.exists)(json, 'linenChangeCount') ? undefined : json['linenChangeCount'],
        'sheetNumber': !(0, runtime_1.exists)(json, 'sheetNumber') ? undefined : json['sheetNumber'],
        'date': !(0, runtime_1.exists)(json, 'date') ? undefined : json['date'],
        'nextDay': !(0, runtime_1.exists)(json, 'nextDay') ? undefined : json['nextDay'],
        'autoGenerated': !(0, runtime_1.exists)(json, 'autoGenerated') ? undefined : json['autoGenerated'],
        'lockTaskSheet': !(0, runtime_1.exists)(json, 'lockTaskSheet') ? undefined : json['lockTaskSheet'],
        'taskSeqNo': !(0, runtime_1.exists)(json, 'taskSeqNo') ? undefined : json['taskSeqNo'],
        'roomCount': !(0, runtime_1.exists)(json, 'roomCount') ? undefined : json['roomCount'],
        'taskInstructions': !(0, runtime_1.exists)(json, 'taskInstructions') ? undefined : json['taskInstructions'],
        'completedDate': !(0, runtime_1.exists)(json, 'completedDate') ? undefined : json['completedDate'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'sheetType': !(0, runtime_1.exists)(json, 'sheetType') ? undefined : (0, TaskSheetType_1.TaskSheetTypeFromJSON)(json['sheetType']),
        'attendantStatus': !(0, runtime_1.exists)(json, 'attendantStatus') ? undefined : (0, ServicingAttendantStatusType_1.ServicingAttendantStatusTypeFromJSON)(json['attendantStatus']),
        'breakOutId': !(0, runtime_1.exists)(json, 'breakOutId') ? undefined : json['breakOutId'],
    };
}
exports.HousekeepingTaskTypeFromJSONTyped = HousekeepingTaskTypeFromJSONTyped;
function HousekeepingTaskTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'taskCodes': value.taskCodes === undefined ? undefined : (value.taskCodes.map(HousekeepingTaskCodeType_1.HousekeepingTaskCodeTypeToJSON)),
        'departureTaskInfo': (0, DepartureTaskInfoType_1.DepartureTaskInfoTypeToJSON)(value.departureTaskInfo),
        'totalSupplies': value.totalSupplies === undefined ? undefined : (value.totalSupplies.map(FacilityCodeType_1.FacilityCodeTypeToJSON)),
        'credits': value.credits === undefined ? undefined : (value.credits.map(HousekeepingCreditsType_1.HousekeepingCreditsTypeToJSON)),
        'attendant': (0, HousekeepingTaskTypeAttendant_1.HousekeepingTaskTypeAttendantToJSON)(value.attendant),
        'appUserOnBreak': (0, AppUserOnBreakType_1.AppUserOnBreakTypeToJSON)(value.appUserOnBreak),
        'rooms': value.rooms === undefined ? undefined : (value.rooms.map(HousekeepingTaskTypeRoomsInner_1.HousekeepingTaskTypeRoomsInnerToJSON)),
        'roomCounts': value.roomCounts === undefined ? undefined : (value.roomCounts.map(HousekeepingTaskTypeRoomCountsInner_1.HousekeepingTaskTypeRoomCountsInnerToJSON)),
        'linenChangeCount': value.linenChangeCount,
        'sheetNumber': value.sheetNumber,
        'date': value.date,
        'nextDay': value.nextDay,
        'autoGenerated': value.autoGenerated,
        'lockTaskSheet': value.lockTaskSheet,
        'taskSeqNo': value.taskSeqNo,
        'roomCount': value.roomCount,
        'taskInstructions': value.taskInstructions,
        'completedDate': value.completedDate,
        'hotelId': value.hotelId,
        'sheetType': (0, TaskSheetType_1.TaskSheetTypeToJSON)(value.sheetType),
        'attendantStatus': (0, ServicingAttendantStatusType_1.ServicingAttendantStatusTypeToJSON)(value.attendantStatus),
        'breakOutId': value.breakOutId,
    };
}
exports.HousekeepingTaskTypeToJSON = HousekeepingTaskTypeToJSON;
