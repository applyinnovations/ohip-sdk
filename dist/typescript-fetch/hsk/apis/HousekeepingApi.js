"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTaskCompanionRoomStatusToChangeEnum = exports.GetRoomMaintenanceRoomMaintenanceStatusEnum = exports.GetRoomConditionsRoomParityStatusEnum = exports.GetRoomConditionsHousekeepingRoomStatusEnum = exports.GetRoomConditionsRoomAssignmentStatusEnum = exports.GetRoomConditionsFrontOfficeRoomStatusEnum = exports.GetReservationHousekeepingScheduleFetchInstructionsEnum = exports.GetHousekeepingOverviewGuestServiceRequestEnum = exports.GetHousekeepingOverviewFetchInstructionsEnum = exports.GetHousekeepingOverviewRoomAssignmentStatusEnum = exports.GetHousekeepingOverviewServiceRequestStatusEnum = exports.GetHousekeepingOverviewRoomParityStatusEnum = exports.GetHousekeepingOverviewTurndownStatusEnum = exports.GetHousekeepingOverviewFrontOfficeRoomStatusEnum = exports.GetHousekeepingOverviewHousekeepingRoomStatusEnum = exports.GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = exports.GetHouseKeepingTasksRoomStatusToChangeEnum = exports.GetHouseKeepingTasksGuestServiceEnum = exports.GetHouseKeepingTasksHousekeepingRoomStatusEnum = exports.GetGuestHousekeepingNotesHousekeepingInstructionEnum = exports.DeleteReservationHousekeepingTasksStayPeriodEnum = exports.HousekeepingApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class HousekeepingApi extends runtime.BaseAPI {
    /**
     * This API will allow you to Auto generate the task sheets. <p><strong>OperationId:</strong>autoGenerateTaskSheets</p>
     * Auto generate the task sheets
     */
    autoGenerateTaskSheetsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling autoGenerateTaskSheets.');
            }
            if (requestParameters.taskSheets === null || requestParameters.taskSheets === undefined) {
                throw new runtime.RequiredError('taskSheets', 'Required parameter requestParameters.taskSheets was null or undefined when calling autoGenerateTaskSheets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTaskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetsToJSON)(requestParameters.taskSheets),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to Auto generate the task sheets. <p><strong>OperationId:</strong>autoGenerateTaskSheets</p>
     * Auto generate the task sheets
     */
    autoGenerateTaskSheets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.autoGenerateTaskSheetsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to cancel servicing task room. <p><strong>OperationId:</strong>cancelServicingTaskRoom</p>
     * Cancel servicing task room
     */
    cancelServicingTaskRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling cancelServicingTaskRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling cancelServicingTaskRoom.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling cancelServicingTaskRoom.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling cancelServicingTaskRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CanceledServicingTaskRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to cancel servicing task room. <p><strong>OperationId:</strong>cancelServicingTaskRoom</p>
     * Cancel servicing task room
     */
    cancelServicingTaskRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelServicingTaskRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    completeOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling completeOutOfOrderRooms.');
            }
            if (requestParameters.completeRoomRepair === null || requestParameters.completeRoomRepair === undefined) {
                throw new runtime.RequiredError('completeRoomRepair', 'Required parameter requestParameters.completeRoomRepair was null or undefined when calling completeOutOfOrderRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CompleteOutOfOrderRoomsRequestToJSON)(requestParameters.completeRoomRepair),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompleteRoomRepairStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    completeOutOfOrderRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.completeOutOfOrderRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    completeOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling completeOutOfServiceRooms.');
            }
            if (requestParameters.completeRoomRepair === null || requestParameters.completeRoomRepair === undefined) {
                throw new runtime.RequiredError('completeRoomRepair', 'Required parameter requestParameters.completeRoomRepair was null or undefined when calling completeOutOfServiceRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CompleteOutOfServiceRoomsRequestToJSON)(requestParameters.completeRoomRepair),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompleteRoomRepairStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    completeOutOfServiceRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.completeOutOfServiceRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to complete servicing task room. <p><strong>OperationId:</strong>completeServicingTaskRoom</p>
     * Complete servicing task room
     */
    completeServicingTaskRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling completeServicingTaskRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling completeServicingTaskRoom.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling completeServicingTaskRoom.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling completeServicingTaskRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/complete`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CompletedServicingTaskRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to complete servicing task room. <p><strong>OperationId:</strong>completeServicingTaskRoom</p>
     * Complete servicing task room
     */
    completeServicingTaskRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.completeServicingTaskRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete all task sheets for an existing task sheet set for a specific property. Task Sheet Sets can be used to break out the rooms to be cleaned by the housekeeping attendants.<p><strong>OperationId:</strong>deleteHouseKeepingTaskSheets</p>
     * Delete all the hotel task sheets for an existing Task Sheet Set.
     */
    deleteHouseKeepingTaskSheetsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteHouseKeepingTaskSheets.');
            }
            if (requestParameters.taskCodesBreakOutId === null || requestParameters.taskCodesBreakOutId === undefined) {
                throw new runtime.RequiredError('taskCodesBreakOutId', 'Required parameter requestParameters.taskCodesBreakOutId was null or undefined when calling deleteHouseKeepingTaskSheets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/houseKeepingTasks/{taskCodesBreakOutId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"taskCodesBreakOutId"}}`, encodeURIComponent(String(requestParameters.taskCodesBreakOutId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete all task sheets for an existing task sheet set for a specific property. Task Sheet Sets can be used to break out the rooms to be cleaned by the housekeeping attendants.<p><strong>OperationId:</strong>deleteHouseKeepingTaskSheets</p>
     * Delete all the hotel task sheets for an existing Task Sheet Set.
     */
    deleteHouseKeepingTaskSheets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteHouseKeepingTaskSheetsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete housekeeping attendant schedule. <p><strong>OperationId:</strong>deleteHousekeepingAttendantSchedule</p>
     * Delete housekeeping attendant schedule
     */
    deleteHousekeepingAttendantScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteHousekeepingAttendantSchedule.');
            }
            if (requestParameters.scheduleDate === null || requestParameters.scheduleDate === undefined) {
                throw new runtime.RequiredError('scheduleDate', 'Required parameter requestParameters.scheduleDate was null or undefined when calling deleteHousekeepingAttendantSchedule.');
            }
            if (requestParameters.attendantId === null || requestParameters.attendantId === undefined) {
                throw new runtime.RequiredError('attendantId', 'Required parameter requestParameters.attendantId was null or undefined when calling deleteHousekeepingAttendantSchedule.');
            }
            const queryParameters = {};
            if (requestParameters.scheduleDate !== undefined) {
                queryParameters['scheduleDate'] = requestParameters.scheduleDate;
            }
            if (requestParameters.attendantId) {
                queryParameters['attendantId'] = requestParameters.attendantId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/attendants/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete housekeeping attendant schedule. <p><strong>OperationId:</strong>deleteHousekeepingAttendantSchedule</p>
     * Delete housekeeping attendant schedule
     */
    deleteHousekeepingAttendantSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteHousekeepingAttendantScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete reservation housekeeping task. <p><strong>OperationId:</strong>deleteReservationHousekeepingTasks</p>
     * Delete reservation housekeeping task
     */
    deleteReservationHousekeepingTasksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationHousekeepingTasks.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationHousekeepingTasks.');
            }
            const queryParameters = {};
            if (requestParameters.customized !== undefined) {
                queryParameters['customized'] = requestParameters.customized;
            }
            if (requestParameters.cycleStartDay !== undefined) {
                queryParameters['cycleStartDay'] = requestParameters.cycleStartDay;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.facilityTaskCode !== undefined) {
                queryParameters['facilityTaskCode'] = requestParameters.facilityTaskCode;
            }
            if (requestParameters.facilityTaskDescription !== undefined) {
                queryParameters['facilityTaskDescription'] = requestParameters.facilityTaskDescription;
            }
            if (requestParameters.facilityTaskPriority !== undefined) {
                queryParameters['facilityTaskPriority'] = requestParameters.facilityTaskPriority;
            }
            if (requestParameters.taskDate) {
                queryParameters['taskDate'] = requestParameters.taskDate;
            }
            if (requestParameters.taskStartDate) {
                queryParameters['taskStartDate'] = requestParameters.taskStartDate;
            }
            if (requestParameters.taskEndDate) {
                queryParameters['taskEndDate'] = requestParameters.taskEndDate;
            }
            if (requestParameters.stayPeriod) {
                queryParameters['stayPeriod'] = requestParameters.stayPeriod;
            }
            if (requestParameters.frequency) {
                queryParameters['frequency'] = requestParameters.frequency;
            }
            if (requestParameters.taskCycleStartDay) {
                queryParameters['taskCycleStartDay'] = requestParameters.taskCycleStartDay;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomId) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.facilityCodes) {
                queryParameters['facilityCodes'] = requestParameters.facilityCodes;
            }
            if (requestParameters.facilityCodesDescription) {
                queryParameters['facilityCodesDescription'] = requestParameters.facilityCodesDescription;
            }
            if (requestParameters.facilityCodesQuantity) {
                queryParameters['facilityCodesQuantity'] = requestParameters.facilityCodesQuantity;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete reservation housekeeping task. <p><strong>OperationId:</strong>deleteReservationHousekeepingTasks</p>
     * Delete reservation housekeeping task
     */
    deleteReservationHousekeepingTasks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationHousekeepingTasksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete maintenances from rooms. <p><strong>OperationId:</strong>deleteRoomMaintenance</p>
     * Delete the maintenances for rooms
     */
    deleteRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.mainteananceId === null || requestParameters.mainteananceId === undefined) {
                throw new runtime.RequiredError('mainteananceId', 'Required parameter requestParameters.mainteananceId was null or undefined when calling deleteRoomMaintenance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRoomMaintenance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/maintenances/{mainteananceId}`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete maintenances from rooms. <p><strong>OperationId:</strong>deleteRoomMaintenance</p>
     * Delete the maintenances for rooms
     */
    deleteRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete the task sheet. <p><strong>OperationId:</strong>deleteTaskSheet</p>
     * Delete the task sheet
     */
    deleteTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteTaskSheet.');
            }
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling deleteTaskSheet.');
            }
            if (requestParameters.taskCodes === null || requestParameters.taskCodes === undefined) {
                throw new runtime.RequiredError('taskCodes', 'Required parameter requestParameters.taskCodes was null or undefined when calling deleteTaskSheet.');
            }
            const queryParameters = {};
            if (requestParameters.sheetNumber !== undefined) {
                queryParameters['sheetNumber'] = requestParameters.sheetNumber;
            }
            if (requestParameters.taskCodes) {
                queryParameters['taskCodes'] = requestParameters.taskCodes;
            }
            if (requestParameters.date !== undefined) {
                queryParameters['date'] = requestParameters.date;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete the task sheet. <p><strong>OperationId:</strong>deleteTaskSheet</p>
     * Delete the task sheet
     */
    deleteTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete task sheet rooms. <p><strong>OperationId:</strong>deleteTaskSheetRooms</p>
     * Delete task sheet rooms
     */
    deleteTaskSheetRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteTaskSheetRooms.');
            }
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling deleteTaskSheetRooms.');
            }
            if (requestParameters.taskCodes === null || requestParameters.taskCodes === undefined) {
                throw new runtime.RequiredError('taskCodes', 'Required parameter requestParameters.taskCodes was null or undefined when calling deleteTaskSheetRooms.');
            }
            const queryParameters = {};
            if (requestParameters.sheetNumber !== undefined) {
                queryParameters['sheetNumber'] = requestParameters.sheetNumber;
            }
            if (requestParameters.taskCodes) {
                queryParameters['taskCodes'] = requestParameters.taskCodes;
            }
            if (requestParameters.date !== undefined) {
                queryParameters['date'] = requestParameters.date;
            }
            if (requestParameters.roomId) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete task sheet rooms. <p><strong>OperationId:</strong>deleteTaskSheetRooms</p>
     * Delete task sheet rooms
     */
    deleteTaskSheetRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTaskSheetRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete task sheet templates. <p><strong>OperationId:</strong>deleteTaskSheetTemplate</p>
     * Delete task sheet templates
     */
    deleteTaskSheetTemplateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taskSheetTemplateCode === null || requestParameters.taskSheetTemplateCode === undefined) {
                throw new runtime.RequiredError('taskSheetTemplateCode', 'Required parameter requestParameters.taskSheetTemplateCode was null or undefined when calling deleteTaskSheetTemplate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteTaskSheetTemplate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}`.replace(`{${"taskSheetTemplateCode"}}`, encodeURIComponent(String(requestParameters.taskSheetTemplateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete task sheet templates. <p><strong>OperationId:</strong>deleteTaskSheetTemplate</p>
     * Delete task sheet templates
     */
    deleteTaskSheetTemplate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTaskSheetTemplateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to update reservation housekeeping tasks. <p><strong>OperationId:</strong>editReservationHousekeepingTasks</p>
     * Update reservation housekeeping tasks
     */
    editReservationHousekeepingTasksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling editReservationHousekeepingTasks.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling editReservationHousekeepingTasks.');
            }
            if (requestParameters.schedule === null || requestParameters.schedule === undefined) {
                throw new runtime.RequiredError('schedule', 'Required parameter requestParameters.schedule was null or undefined when calling editReservationHousekeepingTasks.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ScheduleToJSON)(requestParameters.schedule),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduleFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to update reservation housekeeping tasks. <p><strong>OperationId:</strong>editReservationHousekeepingTasks</p>
     * Update reservation housekeeping tasks
     */
    editReservationHousekeepingTasks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.editReservationHousekeepingTasksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to end the Attendant\'s service break. <p><strong>OperationId:</strong>endServiceBreak</p>
     * End the service break
     */
    endServiceBreakRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taskSheetNumber === null || requestParameters.taskSheetNumber === undefined) {
                throw new runtime.RequiredError('taskSheetNumber', 'Required parameter requestParameters.taskSheetNumber was null or undefined when calling endServiceBreak.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling endServiceBreak.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling endServiceBreak.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/{taskSheetNumber}/end`.replace(`{${"taskSheetNumber"}}`, encodeURIComponent(String(requestParameters.taskSheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EndedServiceBreakFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to end the Attendant\'s service break. <p><strong>OperationId:</strong>endServiceBreak</p>
     * End the service break
     */
    endServiceBreak(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.endServiceBreakRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get facility forecast for Housekeeping attendants and tasks for a current or future start date . <p><strong>OperationId:</strong>getFacilityForecast</p>
     * Get facility forecast
     */
    getFacilityForecastRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFacilityForecast.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.codes) {
                queryParameters['Codes'] = requestParameters.codes;
            }
            if (requestParameters.usePriority !== undefined) {
                queryParameters['usePriority'] = requestParameters.usePriority;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/forecastTaskSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FacilityForecastFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get facility forecast for Housekeeping attendants and tasks for a current or future start date . <p><strong>OperationId:</strong>getFacilityForecast</p>
     * Get facility forecast
     */
    getFacilityForecast(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFacilityForecastRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get the guest housekeeping instructions. <p><strong>OperationId:</strong>getGuestHousekeepingNotes</p>
     * Get the guest housekeeping instructions
     */
    getGuestHousekeepingNotesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getGuestHousekeepingNotes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGuestHousekeepingNotes.');
            }
            const queryParameters = {};
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.housekeepingInstruction) {
                queryParameters['housekeepingInstruction'] = requestParameters.housekeepingInstruction;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestHousekeepingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get the guest housekeeping instructions. <p><strong>OperationId:</strong>getGuestHousekeepingNotes</p>
     * Get the guest housekeeping instructions
     */
    getGuestHousekeepingNotes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuestHousekeepingNotesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    getHouseKeepingTasksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHouseKeepingTasks.');
            }
            if (requestParameters.taskDate === null || requestParameters.taskDate === undefined) {
                throw new runtime.RequiredError('taskDate', 'Required parameter requestParameters.taskDate was null or undefined when calling getHouseKeepingTasks.');
            }
            const queryParameters = {};
            if (requestParameters.taskDate !== undefined) {
                queryParameters['taskDate'] = requestParameters.taskDate;
            }
            if (requestParameters.attendantInRoomOnly !== undefined) {
                queryParameters['attendantInRoomOnly'] = requestParameters.attendantInRoomOnly;
            }
            if (requestParameters.generateCleaningSequence !== undefined) {
                queryParameters['generateCleaningSequence'] = requestParameters.generateCleaningSequence;
            }
            if (requestParameters.includeReservationInfo !== undefined) {
                queryParameters['includeReservationInfo'] = requestParameters.includeReservationInfo;
            }
            if (requestParameters.includeTaskSheetDetails !== undefined) {
                queryParameters['includeTaskSheetDetails'] = requestParameters.includeTaskSheetDetails;
            }
            if (requestParameters.includeTaskSheetsSummary !== undefined) {
                queryParameters['includeTaskSheetsSummary'] = requestParameters.includeTaskSheetsSummary;
            }
            if (requestParameters.sortByCleaningSequence !== undefined) {
                queryParameters['sortByCleaningSequence'] = requestParameters.sortByCleaningSequence;
            }
            if (requestParameters.taskCodes) {
                queryParameters['taskCodes'] = requestParameters.taskCodes;
            }
            if (requestParameters.taskHotelCodes) {
                queryParameters['taskHotelCodes'] = requestParameters.taskHotelCodes;
            }
            if (requestParameters.taskSequences) {
                queryParameters['taskSequences'] = requestParameters.taskSequences;
            }
            if (requestParameters.taskDescriptions) {
                queryParameters['taskDescriptions'] = requestParameters.taskDescriptions;
            }
            if (requestParameters.taskInstructions) {
                queryParameters['taskInstructions'] = requestParameters.taskInstructions;
            }
            if (requestParameters.facilityDepartureTask) {
                queryParameters['facilityDepartureTask'] = requestParameters.facilityDepartureTask;
            }
            if (requestParameters.linenChange) {
                queryParameters['linenChange'] = requestParameters.linenChange;
            }
            if (requestParameters.taskCodesBreakOutId !== undefined) {
                queryParameters['taskCodesBreakOutId'] = requestParameters.taskCodesBreakOutId;
            }
            if (requestParameters.taskCodesBreakOutIdContext !== undefined) {
                queryParameters['taskCodesBreakOutIdContext'] = requestParameters.taskCodesBreakOutIdContext;
            }
            if (requestParameters.taskCodesBreakOutIdType !== undefined) {
                queryParameters['taskCodesBreakOutIdType'] = requestParameters.taskCodesBreakOutIdType;
            }
            if (requestParameters.attendantId !== undefined) {
                queryParameters['attendantId'] = requestParameters.attendantId;
            }
            if (requestParameters.taskSheetNumber) {
                queryParameters['taskSheetNumber'] = requestParameters.taskSheetNumber;
            }
            if (requestParameters.housekeepingRoomStatus) {
                queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
            }
            if (requestParameters.guestService) {
                queryParameters['guestService'] = requestParameters.guestService;
            }
            if (requestParameters.roomStatusToChange) {
                queryParameters['roomStatusToChange'] = requestParameters.roomStatusToChange;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/houseKeepingtasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TaskAssignmentFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    getHouseKeepingTasks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHouseKeepingTasksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get the housekeeping attendants schedule. <p><strong>OperationId:</strong>getHousekeepingAttendantsSchedule</p>
     * Get the housekeeping attendants schedule
     */
    getHousekeepingAttendantsScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHousekeepingAttendantsSchedule.');
            }
            if (requestParameters.scheduleStartDate === null || requestParameters.scheduleStartDate === undefined) {
                throw new runtime.RequiredError('scheduleStartDate', 'Required parameter requestParameters.scheduleStartDate was null or undefined when calling getHousekeepingAttendantsSchedule.');
            }
            const queryParameters = {};
            if (requestParameters.scheduleStartDate !== undefined) {
                queryParameters['scheduleStartDate'] = requestParameters.scheduleStartDate;
            }
            if (requestParameters.scheduleEndDate !== undefined) {
                queryParameters['scheduleEndDate'] = requestParameters.scheduleEndDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/attendants/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AttendantScheduleFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get the housekeeping attendants schedule. <p><strong>OperationId:</strong>getHousekeepingAttendantsSchedule</p>
     * Get the housekeeping attendants schedule
     */
    getHousekeepingAttendantsSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHousekeepingAttendantsScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHousekeepingDiscrepancies.');
            }
            const queryParameters = {};
            if (requestParameters.roomDiscrepancyStatus) {
                queryParameters['roomDiscrepancyStatus'] = requestParameters.roomDiscrepancyStatus;
            }
            if (requestParameters.fromRoomNumber !== undefined) {
                queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
            }
            if (requestParameters.toRoomNumber !== undefined) {
                queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.housekeepingEndDate !== undefined) {
                queryParameters['housekeepingEndDate'] = requestParameters.housekeepingEndDate;
            }
            if (requestParameters.housekeepingStartDate !== undefined) {
                queryParameters['housekeepingStartDate'] = requestParameters.housekeepingStartDate;
            }
            if (requestParameters.floor) {
                queryParameters['floor'] = requestParameters.floor;
            }
            if (requestParameters.dueOut !== undefined) {
                queryParameters['dueOut'] = requestParameters.dueOut;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/housekeepingDiscrepancies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    getHousekeepingDiscrepancies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    getHousekeepingOverviewRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHousekeepingOverview.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.housekeepingRoomStatus) {
                queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
            }
            if (requestParameters.frontOfficeRoomStatus) {
                queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
            }
            if (requestParameters.turndownStatus) {
                queryParameters['turndownStatus'] = requestParameters.turndownStatus;
            }
            if (requestParameters.roomParityStatus) {
                queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
            }
            if (requestParameters.serviceRequestStatus) {
                queryParameters['serviceRequestStatus'] = requestParameters.serviceRequestStatus;
            }
            if (requestParameters.roomAssignmentStatus) {
                queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.fromRoomNumber !== undefined) {
                queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
            }
            if (requestParameters.toRoomNumber !== undefined) {
                queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
            }
            if (requestParameters.floor) {
                queryParameters['floor'] = requestParameters.floor;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.building) {
                queryParameters['building'] = requestParameters.building;
            }
            if (requestParameters.roomFeatures) {
                queryParameters['roomFeatures'] = requestParameters.roomFeatures;
            }
            if (requestParameters.daySection) {
                queryParameters['daySection'] = requestParameters.daySection;
            }
            if (requestParameters.eveningSection) {
                queryParameters['eveningSection'] = requestParameters.eveningSection;
            }
            if (requestParameters.reservationStatus) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            if (requestParameters.guestServiceRequest !== undefined) {
                queryParameters['guestServiceRequest'] = requestParameters.guestServiceRequest;
            }
            if (requestParameters.roomIdText !== undefined) {
                queryParameters['roomIdText'] = requestParameters.roomIdText;
            }
            if (requestParameters.excludeCombo !== undefined) {
                queryParameters['excludeCombo'] = requestParameters.excludeCombo;
            }
            if (requestParameters.cleaningPriorityOnly !== undefined) {
                queryParameters['cleaningPriorityOnly'] = requestParameters.cleaningPriorityOnly;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/housekeepingOverview`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HousekeepingBoardFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    getHousekeepingOverview(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHousekeepingOverviewRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    getOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getOutOfOrderRooms.');
            }
            if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling getOutOfOrderRooms.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    getOutOfOrderRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutOfOrderRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    getOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getOutOfServiceRooms.');
            }
            if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling getOutOfServiceRooms.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    getOutOfServiceRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutOfServiceRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get reservation housekeeping schedule. <p><strong>OperationId:</strong>getReservationHousekeepingSchedule</p>
     * Get reservation housekeeping schedule
     */
    getReservationHousekeepingScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationHousekeepingSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationHousekeepingSchedule.');
            }
            const queryParameters = {};
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduleFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get reservation housekeeping schedule. <p><strong>OperationId:</strong>getReservationHousekeepingSchedule</p>
     * Get reservation housekeeping schedule
     */
    getReservationHousekeepingSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to get a list of rooms that have a condition set. <p><strong>OperationId:</strong>getRoomConditions</p>
     * Get rooms condition
     */
    getRoomConditionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomConditions.');
            }
            const queryParameters = {};
            if (requestParameters.roomConditionsOnly !== undefined) {
                queryParameters['roomConditionsOnly'] = requestParameters.roomConditionsOnly;
            }
            if (requestParameters.roomWithoutConditionsOnly !== undefined) {
                queryParameters['roomWithoutConditionsOnly'] = requestParameters.roomWithoutConditionsOnly;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.fromRoomNumber !== undefined) {
                queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
            }
            if (requestParameters.toRoomNumber !== undefined) {
                queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
            }
            if (requestParameters.roomConditions) {
                queryParameters['roomConditions'] = requestParameters.roomConditions;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            if (requestParameters.frontOfficeRoomStatus) {
                queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
            }
            if (requestParameters.reservationStatuses) {
                queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
            }
            if (requestParameters.roomAssignmentStatus) {
                queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
            }
            if (requestParameters.floors) {
                queryParameters['floors'] = requestParameters.floors;
            }
            if (requestParameters.roomFeatures) {
                queryParameters['roomFeatures'] = requestParameters.roomFeatures;
            }
            if (requestParameters.amSections) {
                queryParameters['amSections'] = requestParameters.amSections;
            }
            if (requestParameters.pmSections) {
                queryParameters['pmSections'] = requestParameters.pmSections;
            }
            if (requestParameters.buildings) {
                queryParameters['buildings'] = requestParameters.buildings;
            }
            if (requestParameters.housekeepingRoomStatus) {
                queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
            }
            if (requestParameters.roomParityStatus) {
                queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/conditions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to get a list of rooms that have a condition set. <p><strong>OperationId:</strong>getRoomConditions</p>
     * Get rooms condition
     */
    getRoomConditions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomConditionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a list of rooms with maintenances. <p><strong>OperationId:</strong>getRoomMaintenance</p>
     * Get the maintenance rooms
     */
    getRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomMaintenance.');
            }
            const queryParameters = {};
            if (requestParameters.roomIdText !== undefined) {
                queryParameters['roomIdText'] = requestParameters.roomIdText;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.maintenanceCodes) {
                queryParameters['maintenanceCodes'] = requestParameters.maintenanceCodes;
            }
            if (requestParameters.roomMaintenanceStatus !== undefined) {
                queryParameters['roomMaintenanceStatus'] = requestParameters.roomMaintenanceStatus;
            }
            if (requestParameters.assignedUserId) {
                queryParameters['assignedUserId'] = requestParameters.assignedUserId;
            }
            if (requestParameters.assignedUserIdContext) {
                queryParameters['assignedUserIdContext'] = requestParameters.assignedUserIdContext;
            }
            if (requestParameters.assignedUserIdType) {
                queryParameters['assignedUserIdType'] = requestParameters.assignedUserIdType;
            }
            if (requestParameters.maintenanceId !== undefined) {
                queryParameters['maintenanceId'] = requestParameters.maintenanceId;
            }
            if (requestParameters.maintenanceIdContext !== undefined) {
                queryParameters['maintenanceIdContext'] = requestParameters.maintenanceIdContext;
            }
            if (requestParameters.maintenanceIdType !== undefined) {
                queryParameters['maintenanceIdType'] = requestParameters.maintenanceIdType;
            }
            if (requestParameters.resolvedEndDate !== undefined) {
                queryParameters['resolvedEndDate'] = requestParameters.resolvedEndDate;
            }
            if (requestParameters.resolvedStartDate !== undefined) {
                queryParameters['resolvedStartDate'] = requestParameters.resolvedStartDate;
            }
            if (requestParameters.includeImages !== undefined) {
                queryParameters['includeImages'] = requestParameters.includeImages;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/maintenances`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomMaintenanceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a list of rooms with maintenances. <p><strong>OperationId:</strong>getRoomMaintenance</p>
     * Get the maintenance rooms
     */
    getRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to get task companion. <p><strong>OperationId:</strong>getTaskCompanion</p>
     * Get task companion
     */
    getTaskCompanionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling getTaskCompanion.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTaskCompanion.');
            }
            if (requestParameters.taskCodes === null || requestParameters.taskCodes === undefined) {
                throw new runtime.RequiredError('taskCodes', 'Required parameter requestParameters.taskCodes was null or undefined when calling getTaskCompanion.');
            }
            const queryParameters = {};
            if (requestParameters.taskCodes) {
                queryParameters['taskCodes'] = requestParameters.taskCodes;
            }
            if (requestParameters.taskDate !== undefined) {
                queryParameters['taskDate'] = requestParameters.taskDate;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.skipRoomNumbers) {
                queryParameters['skipRoomNumbers'] = requestParameters.skipRoomNumbers;
            }
            if (requestParameters.roomStatusToChange) {
                queryParameters['roomStatusToChange'] = requestParameters.roomStatusToChange;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sheets/{sheetNumber}`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TaskCompanionFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to get task companion. <p><strong>OperationId:</strong>getTaskCompanion</p>
     * Get task companion
     */
    getTaskCompanion(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTaskCompanionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to get the task sheet templates. <p><strong>OperationId:</strong>getTaskSheetTemplate</p>
     * Get the task sheet templates
     */
    getTaskSheetTemplateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTaskSheetTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.templateCode !== undefined) {
                queryParameters['templateCode'] = requestParameters.templateCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheetTemplates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TaskSheetTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to get the task sheet templates. <p><strong>OperationId:</strong>getTaskSheetTemplate</p>
     * Get the task sheet templates
     */
    getTaskSheetTemplate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTaskSheetTemplateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Lock the task sheet. <p><strong>OperationId:</strong>lockTaskSheet</p>
     * Lock the task sheet
     */
    lockTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling lockTaskSheet.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling lockTaskSheet.');
            }
            if (requestParameters.taskSheetToLock === null || requestParameters.taskSheetToLock === undefined) {
                throw new runtime.RequiredError('taskSheetToLock', 'Required parameter requestParameters.taskSheetToLock was null or undefined when calling lockTaskSheet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/{sheetNumber}/lock`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToLockToJSON)(requestParameters.taskSheetToLock),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LockedTaskSheetFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Lock the task sheet. <p><strong>OperationId:</strong>lockTaskSheet</p>
     * Lock the task sheet
     */
    lockTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lockTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to merge task sheet. <p><strong>OperationId:</strong>mergeTaskSheet</p>
     * Merge task sheet
     */
    mergeTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.toTaskSequenceNo === null || requestParameters.toTaskSequenceNo === undefined) {
                throw new runtime.RequiredError('toTaskSequenceNo', 'Required parameter requestParameters.toTaskSequenceNo was null or undefined when calling mergeTaskSheet.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling mergeTaskSheet.');
            }
            if (requestParameters.taskSheetToMerge === null || requestParameters.taskSheetToMerge === undefined) {
                throw new runtime.RequiredError('taskSheetToMerge', 'Required parameter requestParameters.taskSheetToMerge was null or undefined when calling mergeTaskSheet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/{toTaskSequenceNo}/merge`.replace(`{${"toTaskSequenceNo"}}`, encodeURIComponent(String(requestParameters.toTaskSequenceNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToMergeToJSON)(requestParameters.taskSheetToMerge),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to merge task sheet. <p><strong>OperationId:</strong>mergeTaskSheet</p>
     * Merge task sheet
     */
    mergeTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mergeTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to Move the tasksheet rooms. <p><strong>OperationId:</strong>moveTaskRooms</p>
     * Move the task rooms
     */
    moveTaskRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling moveTaskRooms.');
            }
            if (requestParameters.moveTaskRooms === null || requestParameters.moveTaskRooms === undefined) {
                throw new runtime.RequiredError('moveTaskRooms', 'Required parameter requestParameters.moveTaskRooms was null or undefined when calling moveTaskRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/moveTaskRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MoveTaskRoomsToJSON)(requestParameters.moveTaskRooms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MovedTaskRoomsRSFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to Move the tasksheet rooms. <p><strong>OperationId:</strong>moveTaskRooms</p>
     * Move the task rooms
     */
    moveTaskRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.moveTaskRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to create housekeeping attendant schedule. <p><strong>OperationId:</strong>postHousekeepingAttendantSchedule</p>
     * Create housekeeping attendant schedule
     */
    postHousekeepingAttendantScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postHousekeepingAttendantSchedule.');
            }
            if (requestParameters.attendantSchedule === null || requestParameters.attendantSchedule === undefined) {
                throw new runtime.RequiredError('attendantSchedule', 'Required parameter requestParameters.attendantSchedule was null or undefined when calling postHousekeepingAttendantSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/schedules/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AttendantScheduleToJSON)(requestParameters.attendantSchedule),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to create housekeeping attendant schedule. <p><strong>OperationId:</strong>postHousekeepingAttendantSchedule</p>
     * Create housekeeping attendant schedule
     */
    postHousekeepingAttendantSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postHousekeepingAttendantScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    postOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postOutOfOrderRooms.');
            }
            if (requestParameters.roomRepairOutOfOrder === null || requestParameters.roomRepairOutOfOrder === undefined) {
                throw new runtime.RequiredError('roomRepairOutOfOrder', 'Required parameter requestParameters.roomRepairOutOfOrder was null or undefined when calling postOutOfOrderRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostOutOfOrderRoomsRequestToJSON)(requestParameters.roomRepairOutOfOrder),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    postOutOfOrderRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postOutOfOrderRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    postOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postOutOfServiceRooms.');
            }
            if (requestParameters.roomRepairOutOfService === null || requestParameters.roomRepairOutOfService === undefined) {
                throw new runtime.RequiredError('roomRepairOutOfService', 'Required parameter requestParameters.roomRepairOutOfService was null or undefined when calling postOutOfServiceRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostOutOfServiceRoomsRequestToJSON)(requestParameters.roomRepairOutOfService),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    postOutOfServiceRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postOutOfServiceRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to create reservation housekeeping tasks. <p><strong>OperationId:</strong>postReservationHousekeepingTasks</p>
     * Create reservation housekeeping tasks
     */
    postReservationHousekeepingTasksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationHousekeepingTasks.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationHousekeepingTasks.');
            }
            if (requestParameters.schedule === null || requestParameters.schedule === undefined) {
                throw new runtime.RequiredError('schedule', 'Required parameter requestParameters.schedule was null or undefined when calling postReservationHousekeepingTasks.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ScheduleToJSON)(requestParameters.schedule),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to create reservation housekeeping tasks. <p><strong>OperationId:</strong>postReservationHousekeepingTasks</p>
     * Create reservation housekeeping tasks
     */
    postReservationHousekeepingTasks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationHousekeepingTasksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create maintenances for rooms. <p><strong>OperationId:</strong>postRoomMaintenance</p>
     * Create maintenances for rooms
     */
    postRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.maintenanceCode === null || requestParameters.maintenanceCode === undefined) {
                throw new runtime.RequiredError('maintenanceCode', 'Required parameter requestParameters.maintenanceCode was null or undefined when calling postRoomMaintenance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRoomMaintenance.');
            }
            if (requestParameters.roomMaintenanceRequest === null || requestParameters.roomMaintenanceRequest === undefined) {
                throw new runtime.RequiredError('roomMaintenanceRequest', 'Required parameter requestParameters.roomMaintenanceRequest was null or undefined when calling postRoomMaintenance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/maintenanceCodes/{maintenanceCode}`.replace(`{${"maintenanceCode"}}`, encodeURIComponent(String(requestParameters.maintenanceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomMaintenanceRequestToJSON)(requestParameters.roomMaintenanceRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create maintenances for rooms. <p><strong>OperationId:</strong>postRoomMaintenance</p>
     * Create maintenances for rooms
     */
    postRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create the task sheet. <p><strong>OperationId:</strong>postTaskSheet</p>
     * Create the task sheet
     */
    postTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postTaskSheet.');
            }
            if (requestParameters.taskSheet === null || requestParameters.taskSheet === undefined) {
                throw new runtime.RequiredError('taskSheet', 'Required parameter requestParameters.taskSheet was null or undefined when calling postTaskSheet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToJSON)(requestParameters.taskSheet),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create the task sheet. <p><strong>OperationId:</strong>postTaskSheet</p>
     * Create the task sheet
     */
    postTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create the task sheet rooms. <p><strong>OperationId:</strong>postTaskSheetRooms</p>
     * Create the task sheet rooms
     */
    postTaskSheetRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postTaskSheetRooms.');
            }
            if (requestParameters.taskSheet === null || requestParameters.taskSheet === undefined) {
                throw new runtime.RequiredError('taskSheet', 'Required parameter requestParameters.taskSheet was null or undefined when calling postTaskSheetRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToJSON)(requestParameters.taskSheet),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create the task sheet rooms. <p><strong>OperationId:</strong>postTaskSheetRooms</p>
     * Create the task sheet rooms
     */
    postTaskSheetRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTaskSheetRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete room cleaning priority. <p><strong>OperationId:</strong>putRoomCleaningPriority</p>
     * Delete room cleaning priority
     */
    putRoomCleaningPriorityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoomCleaningPriority.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling putRoomCleaningPriority.');
            }
            const queryParameters = {};
            if (requestParameters.roomId) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/cleaningPriority`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete room cleaning priority. <p><strong>OperationId:</strong>putRoomCleaningPriority</p>
     * Delete room cleaning priority
     */
    putRoomCleaningPriority(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomCleaningPriorityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to change the maintenances for rooms. <p><strong>OperationId:</strong>putRoomMaintenance</p>
     * Change maintenances for rooms
     */
    putRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.maintenanceId === null || requestParameters.maintenanceId === undefined) {
                throw new runtime.RequiredError('maintenanceId', 'Required parameter requestParameters.maintenanceId was null or undefined when calling putRoomMaintenance.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling putRoomMaintenance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoomMaintenance.');
            }
            if (requestParameters.roomMaintenance === null || requestParameters.roomMaintenance === undefined) {
                throw new runtime.RequiredError('roomMaintenance', 'Required parameter requestParameters.roomMaintenance was null or undefined when calling putRoomMaintenance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/maintenances/{maintenanceId}`.replace(`{${"maintenanceId"}}`, encodeURIComponent(String(requestParameters.maintenanceId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomMaintenanceToJSON)(requestParameters.roomMaintenance),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangedRoomMaintenanceFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to change the maintenances for rooms. <p><strong>OperationId:</strong>putRoomMaintenance</p>
     * Change maintenances for rooms
     */
    putRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    putRoomRelatedStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoomRelatedStatus.');
            }
            if (requestParameters.housekeepingRoomStatusCriteria === null || requestParameters.housekeepingRoomStatusCriteria === undefined) {
                throw new runtime.RequiredError('housekeepingRoomStatusCriteria', 'Required parameter requestParameters.housekeepingRoomStatusCriteria was null or undefined when calling putRoomRelatedStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/status`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PutRoomRelatedStatusRequestToJSON)(requestParameters.housekeepingRoomStatusCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HousekeepingRoomStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    putRoomRelatedStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomRelatedStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to change the task sheet. <p><strong>OperationId:</strong>putTaskSheet</p>
     * Change the task sheet
     */
    putTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putTaskSheet.');
            }
            if (requestParameters.taskSheet === null || requestParameters.taskSheet === undefined) {
                throw new runtime.RequiredError('taskSheet', 'Required parameter requestParameters.taskSheet was null or undefined when calling putTaskSheet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToJSON)(requestParameters.taskSheet),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangedTaskSheetFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to change the task sheet. <p><strong>OperationId:</strong>putTaskSheet</p>
     * Change the task sheet
     */
    putTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to change the task sheet rooms. <p><strong>OperationId:</strong>putTaskSheetRooms</p>
     * Change the task sheet rooms
     */
    putTaskSheetRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putTaskSheetRooms.');
            }
            if (requestParameters.taskSheet === null || requestParameters.taskSheet === undefined) {
                throw new runtime.RequiredError('taskSheet', 'Required parameter requestParameters.taskSheet was null or undefined when calling putTaskSheetRooms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToJSON)(requestParameters.taskSheet),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangedTaskSheetRoomsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to change the task sheet rooms. <p><strong>OperationId:</strong>putTaskSheetRooms</p>
     * Change the task sheet rooms
     */
    putTaskSheetRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTaskSheetRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to change the task sheet templates. <p><strong>OperationId:</strong>putTaskSheetTemplate</p>
     * Change the task sheet templates
     */
    putTaskSheetTemplateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taskSheetTemplateCode === null || requestParameters.taskSheetTemplateCode === undefined) {
                throw new runtime.RequiredError('taskSheetTemplateCode', 'Required parameter requestParameters.taskSheetTemplateCode was null or undefined when calling putTaskSheetTemplate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putTaskSheetTemplate.');
            }
            if (requestParameters.taskSheetTemplate === null || requestParameters.taskSheetTemplate === undefined) {
                throw new runtime.RequiredError('taskSheetTemplate', 'Required parameter requestParameters.taskSheetTemplate was null or undefined when calling putTaskSheetTemplate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}`.replace(`{${"taskSheetTemplateCode"}}`, encodeURIComponent(String(requestParameters.taskSheetTemplateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetTemplateToJSON)(requestParameters.taskSheetTemplate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangedTaskSheetTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to change the task sheet templates. <p><strong>OperationId:</strong>putTaskSheetTemplate</p>
     * Change the task sheet templates
     */
    putTaskSheetTemplate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTaskSheetTemplateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to reset reservation housekeeping schedule. <p><strong>OperationId:</strong>resetReservationHousekeepingSchedule</p>
     * Reset reservation housekeeping schedule
     */
    resetReservationHousekeepingScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling resetReservationHousekeepingSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling resetReservationHousekeepingSchedule.');
            }
            if (requestParameters.scheduleSearch === null || requestParameters.scheduleSearch === undefined) {
                throw new runtime.RequiredError('scheduleSearch', 'Required parameter requestParameters.scheduleSearch was null or undefined when calling resetReservationHousekeepingSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/reset`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ScheduleSearchToJSON)(requestParameters.scheduleSearch),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduledSearchFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to reset reservation housekeeping schedule. <p><strong>OperationId:</strong>resetReservationHousekeepingSchedule</p>
     * Reset reservation housekeeping schedule
     */
    resetReservationHousekeepingSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resetReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to Resolve maintenances for rooms. <p><strong>OperationId:</strong>resolveRoomMaintenance</p>
     * Resolve maintenances for rooms
     */
    resolveRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.mainteananceId === null || requestParameters.mainteananceId === undefined) {
                throw new runtime.RequiredError('mainteananceId', 'Required parameter requestParameters.mainteananceId was null or undefined when calling resolveRoomMaintenance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling resolveRoomMaintenance.');
            }
            if (requestParameters.roomMaintenance === null || requestParameters.roomMaintenance === undefined) {
                throw new runtime.RequiredError('roomMaintenance', 'Required parameter requestParameters.roomMaintenance was null or undefined when calling resolveRoomMaintenance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/maintenances/{mainteananceId}/resolve`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomMaintenanceToJSON)(requestParameters.roomMaintenance),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ResolvedRoomMaintenanceFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to Resolve maintenances for rooms. <p><strong>OperationId:</strong>resolveRoomMaintenance</p>
     * Resolve maintenances for rooms
     */
    resolveRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resolveRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to Set guest housekeeping instructions. <p><strong>OperationId:</strong>setGuestHousekeepingNotes</p>
     * Set guest housekeeping instructions
     */
    setGuestHousekeepingNotesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling setGuestHousekeepingNotes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setGuestHousekeepingNotes.');
            }
            if (requestParameters.guestHousekeepingServiceRequest === null || requestParameters.guestHousekeepingServiceRequest === undefined) {
                throw new runtime.RequiredError('guestHousekeepingServiceRequest', 'Required parameter requestParameters.guestHousekeepingServiceRequest was null or undefined when calling setGuestHousekeepingNotes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuestHousekeepingServiceRequestToJSON)(requestParameters.guestHousekeepingServiceRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestHousekeepingServiceFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to Set guest housekeeping instructions. <p><strong>OperationId:</strong>setGuestHousekeepingNotes</p>
     * Set guest housekeeping instructions
     */
    setGuestHousekeepingNotes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setGuestHousekeepingNotesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Set the guest housekeeping service requests <p><strong>OperationId:</strong>setGuestHousekeepingServiceRequest</p>
     * Set the Guest housekeeping service requests
     */
    setGuestHousekeepingServiceRequestRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setGuestHousekeepingServiceRequest.');
            }
            if (requestParameters.guestHousekeepingServiceRequestCriteria === null || requestParameters.guestHousekeepingServiceRequestCriteria === undefined) {
                throw new runtime.RequiredError('guestHousekeepingServiceRequestCriteria', 'Required parameter requestParameters.guestHousekeepingServiceRequestCriteria was null or undefined when calling setGuestHousekeepingServiceRequest.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuestHousekeepingServiceRequestCriteriaToJSON)(requestParameters.guestHousekeepingServiceRequestCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestHousekeepingServiceRequestStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Set the guest housekeeping service requests <p><strong>OperationId:</strong>setGuestHousekeepingServiceRequest</p>
     * Set the Guest housekeeping service requests
     */
    setGuestHousekeepingServiceRequest(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setGuestHousekeepingServiceRequestRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to set the room cleaning priority. <p><strong>OperationId:</strong>setRoomCleaningPriority</p>
     * Set the room cleaning priority
     */
    setRoomCleaningPriorityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling setRoomCleaningPriority.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setRoomCleaningPriority.');
            }
            if (requestParameters.roomCleaningPriority === null || requestParameters.roomCleaningPriority === undefined) {
                throw new runtime.RequiredError('roomCleaningPriority', 'Required parameter requestParameters.roomCleaningPriority was null or undefined when calling setRoomCleaningPriority.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/cleaningPriority`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomCleaningPriorityToJSON)(requestParameters.roomCleaningPriority),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomCleaningPriorityRequestStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to set the room cleaning priority. <p><strong>OperationId:</strong>setRoomCleaningPriority</p>
     * Set the room cleaning priority
     */
    setRoomCleaningPriority(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setRoomCleaningPriorityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to set, change, or delete a condition on rooms. A condition is used to designate rooms that are available for show, set aside for special housekeeping attention, or are to be treated differently for any other reason. <p><strong>OperationId:</strong>setRoomCondition</p>
     * Set rooms condition
     */
    setRoomConditionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setRoomCondition.');
            }
            if (requestParameters.roomCondition === null || requestParameters.roomCondition === undefined) {
                throw new runtime.RequiredError('roomCondition', 'Required parameter requestParameters.roomCondition was null or undefined when calling setRoomCondition.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/conditions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomConditionToJSON)(requestParameters.roomCondition),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomConditionRequestStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to set, change, or delete a condition on rooms. A condition is used to designate rooms that are available for show, set aside for special housekeeping attention, or are to be treated differently for any other reason. <p><strong>OperationId:</strong>setRoomCondition</p>
     * Set rooms condition
     */
    setRoomCondition(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setRoomConditionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to shift reservation housekeeping schedule. <p><strong>OperationId:</strong>shiftReservationHousekeepingSchedule</p>
     * Shift reservation housekeeping schedule
     */
    shiftReservationHousekeepingScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling shiftReservationHousekeepingSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling shiftReservationHousekeepingSchedule.');
            }
            if (requestParameters.scheduleShiftRequest === null || requestParameters.scheduleShiftRequest === undefined) {
                throw new runtime.RequiredError('scheduleShiftRequest', 'Required parameter requestParameters.scheduleShiftRequest was null or undefined when calling shiftReservationHousekeepingSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/shift`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ScheduleShiftRequestToJSON)(requestParameters.scheduleShiftRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduledShiftRequestFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to shift reservation housekeeping schedule. <p><strong>OperationId:</strong>shiftReservationHousekeepingSchedule</p>
     * Shift reservation housekeeping schedule
     */
    shiftReservationHousekeepingSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.shiftReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to Skip servicing task room. <p><strong>OperationId:</strong>skipServicingTaskRoom</p>
     * Skip servicing task room
     */
    skipServicingTaskRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling skipServicingTaskRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling skipServicingTaskRoom.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling skipServicingTaskRoom.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling skipServicingTaskRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/skip`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SkipedServicingTaskRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to Skip servicing task room. <p><strong>OperationId:</strong>skipServicingTaskRoom</p>
     * Skip servicing task room
     */
    skipServicingTaskRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.skipServicingTaskRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Start the Attendant\'s service break. <p><strong>OperationId:</strong>startServiceBreak</p>
     * Start the service break
     */
    startServiceBreakRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.taskSheetNumber === null || requestParameters.taskSheetNumber === undefined) {
                throw new runtime.RequiredError('taskSheetNumber', 'Required parameter requestParameters.taskSheetNumber was null or undefined when calling startServiceBreak.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startServiceBreak.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling startServiceBreak.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/{taskSheetNumber}/start`.replace(`{${"taskSheetNumber"}}`, encodeURIComponent(String(requestParameters.taskSheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StartedServiceBreakFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Start the Attendant\'s service break. <p><strong>OperationId:</strong>startServiceBreak</p>
     * Start the service break
     */
    startServiceBreak(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startServiceBreakRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to start servicing task room. <p><strong>OperationId:</strong>startServicingTaskRoom</p>
     * Start servicing task room
     */
    startServicingTaskRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling startServicingTaskRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling startServicingTaskRoom.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startServicingTaskRoom.');
            }
            if (requestParameters.taskRoom === null || requestParameters.taskRoom === undefined) {
                throw new runtime.RequiredError('taskRoom', 'Required parameter requestParameters.taskRoom was null or undefined when calling startServicingTaskRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/start`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskRoomToJSON)(requestParameters.taskRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceTimeFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to start servicing task room. <p><strong>OperationId:</strong>startServicingTaskRoom</p>
     * Start servicing task room
     */
    startServicingTaskRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startServicingTaskRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to unResolve maintenances for rooms. <p><strong>OperationId:</strong>unResolveRoomMaintenance</p>
     * unResolve the maintenances for rooms
     */
    unResolveRoomMaintenanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.mainteananceId === null || requestParameters.mainteananceId === undefined) {
                throw new runtime.RequiredError('mainteananceId', 'Required parameter requestParameters.mainteananceId was null or undefined when calling unResolveRoomMaintenance.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling unResolveRoomMaintenance.');
            }
            if (requestParameters.roomMaintenance === null || requestParameters.roomMaintenance === undefined) {
                throw new runtime.RequiredError('roomMaintenance', 'Required parameter requestParameters.roomMaintenance was null or undefined when calling unResolveRoomMaintenance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/maintenances/{mainteananceId}/unResolve`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomMaintenanceToJSON)(requestParameters.roomMaintenance),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UnresolvedRoomMaintenanceFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to unResolve maintenances for rooms. <p><strong>OperationId:</strong>unResolveRoomMaintenance</p>
     * unResolve the maintenances for rooms
     */
    unResolveRoomMaintenance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unResolveRoomMaintenanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Unlock the task sheet. <p><strong>OperationId:</strong>unlockTaskSheet</p>
     * Unlock the task sheet
     */
    unlockTaskSheetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sheetNumber === null || requestParameters.sheetNumber === undefined) {
                throw new runtime.RequiredError('sheetNumber', 'Required parameter requestParameters.sheetNumber was null or undefined when calling unlockTaskSheet.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling unlockTaskSheet.');
            }
            if (requestParameters.taskSheetToUnlock === null || requestParameters.taskSheetToUnlock === undefined) {
                throw new runtime.RequiredError('taskSheetToUnlock', 'Required parameter requestParameters.taskSheetToUnlock was null or undefined when calling unlockTaskSheet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/taskSheets/{sheetNumber}/unlock`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaskSheetToUnlockToJSON)(requestParameters.taskSheetToUnlock),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UnlockedTaskSheetFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Unlock the task sheet. <p><strong>OperationId:</strong>unlockTaskSheet</p>
     * Unlock the task sheet
     */
    unlockTaskSheet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unlockTaskSheetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.HousekeepingApi = HousekeepingApi;
/**
 * @export
 */
exports.DeleteReservationHousekeepingTasksStayPeriodEnum = {
    EntireStay: 'EntireStay',
    SpecificDates: 'SpecificDates'
};
/**
 * @export
 */
exports.GetGuestHousekeepingNotesHousekeepingInstructionEnum = {
    Turndown: 'Turndown',
    CleaningPriority: 'CleaningPriority',
    ServiceRequest: 'ServiceRequest'
};
/**
 * @export
 */
exports.GetHouseKeepingTasksHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHouseKeepingTasksGuestServiceEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
};
/**
 * @export
 */
exports.GetHouseKeepingTasksRoomStatusToChangeEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = {
    Sleep: 'Sleep',
    Skip: 'Skip',
    PersonDiscrepancy: 'PersonDiscrepancy'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewTurndownStatusEnum = {
    Required: 'Required',
    NotRequired: 'NotRequired',
    Compeleted: 'Compeleted'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewServiceRequestStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewFetchInstructionsEnum = {
    Summary: 'Summary',
    ResvInfo: 'ResvInfo',
    TurndownInfo: 'TurndownInfo'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewGuestServiceRequestEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
};
/**
 * @export
 */
exports.GetReservationHousekeepingScheduleFetchInstructionsEnum = {
    HousekeepingInstructions: 'HousekeepingInstructions',
    FacilitySchedule: 'FacilitySchedule'
};
/**
 * @export
 */
exports.GetRoomConditionsFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
/**
 * @export
 */
exports.GetRoomConditionsRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
};
/**
 * @export
 */
exports.GetRoomConditionsHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetRoomConditionsRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
};
/**
 * @export
 */
exports.GetRoomMaintenanceRoomMaintenanceStatusEnum = {
    All: 'All',
    UnResolved: 'UnResolved',
    Resolved: 'Resolved'
};
/**
 * @export
 */
exports.GetTaskCompanionRoomStatusToChangeEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
