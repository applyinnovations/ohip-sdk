/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteOutOfOrderRoomsRequest,
  CompleteOutOfServiceRoomsRequest,
  CompleteRoomRepairStatus,
  ExceptionDetailType,
  HousekeepingBoard,
  HousekeepingRoomStatus,
  PostOutOfOrderRoomsRequest,
  PostOutOfServiceRoomsRequest,
  PutRoomRelatedStatusRequest,
  Rooms,
  Status,
  TaskAssignment,
} from '../models';
import {
    CompleteOutOfOrderRoomsRequestFromJSON,
    CompleteOutOfOrderRoomsRequestToJSON,
    CompleteOutOfServiceRoomsRequestFromJSON,
    CompleteOutOfServiceRoomsRequestToJSON,
    CompleteRoomRepairStatusFromJSON,
    CompleteRoomRepairStatusToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HousekeepingBoardFromJSON,
    HousekeepingBoardToJSON,
    HousekeepingRoomStatusFromJSON,
    HousekeepingRoomStatusToJSON,
    PostOutOfOrderRoomsRequestFromJSON,
    PostOutOfOrderRoomsRequestToJSON,
    PostOutOfServiceRoomsRequestFromJSON,
    PostOutOfServiceRoomsRequestToJSON,
    PutRoomRelatedStatusRequestFromJSON,
    PutRoomRelatedStatusRequestToJSON,
    RoomsFromJSON,
    RoomsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TaskAssignmentFromJSON,
    TaskAssignmentToJSON,
} from '../models';

export interface CompleteOutOfOrderRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completeRoomRepair?: CompleteOutOfOrderRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CompleteOutOfServiceRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completeRoomRepair?: CompleteOutOfServiceRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHouseKeepingTasksRequest {
    hotelId?: string;
    taskDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attendantInRoomOnly?: boolean;
    generateCleaningSequence?: boolean;
    includeReservationInfo?: boolean;
    includeTaskSheetDetails?: boolean;
    includeTaskSheetsSummary?: boolean;
    sortByCleaningSequence?: boolean;
    taskCodes?: Array<string>;
    taskHotelCodes?: Array<string>;
    taskSequences?: Array<number>;
    taskDescriptions?: Array<string>;
    taskInstructions?: Array<string>;
    facilityDepartureTask?: Array<boolean>;
    linenChange?: Array<boolean>;
    taskCodesBreakOutId?: string;
    taskCodesBreakOutIdContext?: string;
    taskCodesBreakOutIdType?: string;
    attendantId?: string;
    taskSheetNumber?: Array<number>;
    housekeepingRoomStatus?: Set<GetHouseKeepingTasksHousekeepingRoomStatusEnum>;
    guestService?: Set<GetHouseKeepingTasksGuestServiceEnum>;
    roomStatusToChange?: Set<GetHouseKeepingTasksRoomStatusToChangeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingDiscrepanciesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomDiscrepancyStatus?: Set<GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    roomClass?: Array<string>;
    housekeepingEndDate?: Date;
    housekeepingStartDate?: Date;
    floor?: Array<string>;
    dueOut?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingOverviewRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    housekeepingRoomStatus?: Set<GetHousekeepingOverviewHousekeepingRoomStatusEnum>;
    frontOfficeRoomStatus?: Set<GetHousekeepingOverviewFrontOfficeRoomStatusEnum>;
    turndownStatus?: Set<GetHousekeepingOverviewTurndownStatusEnum>;
    roomParityStatus?: Set<GetHousekeepingOverviewRoomParityStatusEnum>;
    serviceRequestStatus?: Set<GetHousekeepingOverviewServiceRequestStatusEnum>;
    roomAssignmentStatus?: Set<GetHousekeepingOverviewRoomAssignmentStatusEnum>;
    fetchInstructions?: Set<GetHousekeepingOverviewFetchInstructionsEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    floor?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    building?: Array<string>;
    roomFeatures?: Array<string>;
    daySection?: Array<string>;
    eveningSection?: Array<string>;
    reservationStatus?: Array<string>;
    guestServiceRequest?: GetHousekeepingOverviewGuestServiceRequestEnum;
    roomIdText?: string;
    excludeCombo?: boolean;
    cleaningPriorityOnly?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOutOfOrderRoomsRequest {
    hotelId?: string;
    startDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomId?: string;
    endDate?: Date;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOutOfServiceRoomsRequest {
    hotelId?: string;
    startDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomId?: string;
    endDate?: Date;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOutOfOrderRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRepairOutOfOrder?: PostOutOfOrderRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOutOfServiceRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRepairOutOfService?: PostOutOfServiceRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomRelatedStatusOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    housekeepingRoomStatusCriteria?: PutRoomRelatedStatusRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HousekeepingApi extends runtime.BaseAPI {

    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRoomsRaw(requestParameters: CompleteOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteRoomRepairStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOutOfOrderRoomsRequestToJSON(requestParameters.completeRoomRepair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteRoomRepairStatusFromJSON(jsonValue));
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRooms(requestParameters: CompleteOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteRoomRepairStatus> {
        const response = await this.completeOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRoomsRaw(requestParameters: CompleteOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteRoomRepairStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOutOfServiceRoomsRequestToJSON(requestParameters.completeRoomRepair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteRoomRepairStatusFromJSON(jsonValue));
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRooms(requestParameters: CompleteOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteRoomRepairStatus> {
        const response = await this.completeOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    async getHouseKeepingTasksRaw(requestParameters: GetHouseKeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskAssignment>> {
        const queryParameters: any = {};

        if (requestParameters.taskDate !== undefined) {
            queryParameters['taskDate'] = (requestParameters.taskDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.attendantInRoomOnly !== undefined) {
            queryParameters['attendantInRoomOnly'] = requestParameters.attendantInRoomOnly;
        }

        if (requestParameters.generateCleaningSequence !== undefined) {
            queryParameters['generateCleaningSequence'] = requestParameters.generateCleaningSequence;
        }

        if (requestParameters.includeReservationInfo !== undefined) {
            queryParameters['includeReservationInfo'] = requestParameters.includeReservationInfo;
        }

        if (requestParameters.includeTaskSheetDetails !== undefined) {
            queryParameters['includeTaskSheetDetails'] = requestParameters.includeTaskSheetDetails;
        }

        if (requestParameters.includeTaskSheetsSummary !== undefined) {
            queryParameters['includeTaskSheetsSummary'] = requestParameters.includeTaskSheetsSummary;
        }

        if (requestParameters.sortByCleaningSequence !== undefined) {
            queryParameters['sortByCleaningSequence'] = requestParameters.sortByCleaningSequence;
        }

        if (requestParameters.taskCodes) {
            queryParameters['taskCodes'] = requestParameters.taskCodes;
        }

        if (requestParameters.taskHotelCodes) {
            queryParameters['taskHotelCodes'] = requestParameters.taskHotelCodes;
        }

        if (requestParameters.taskSequences) {
            queryParameters['taskSequences'] = requestParameters.taskSequences;
        }

        if (requestParameters.taskDescriptions) {
            queryParameters['taskDescriptions'] = requestParameters.taskDescriptions;
        }

        if (requestParameters.taskInstructions) {
            queryParameters['taskInstructions'] = requestParameters.taskInstructions;
        }

        if (requestParameters.facilityDepartureTask) {
            queryParameters['facilityDepartureTask'] = requestParameters.facilityDepartureTask;
        }

        if (requestParameters.linenChange) {
            queryParameters['linenChange'] = requestParameters.linenChange;
        }

        if (requestParameters.taskCodesBreakOutId !== undefined) {
            queryParameters['taskCodesBreakOutId'] = requestParameters.taskCodesBreakOutId;
        }

        if (requestParameters.taskCodesBreakOutIdContext !== undefined) {
            queryParameters['taskCodesBreakOutIdContext'] = requestParameters.taskCodesBreakOutIdContext;
        }

        if (requestParameters.taskCodesBreakOutIdType !== undefined) {
            queryParameters['taskCodesBreakOutIdType'] = requestParameters.taskCodesBreakOutIdType;
        }

        if (requestParameters.attendantId !== undefined) {
            queryParameters['attendantId'] = requestParameters.attendantId;
        }

        if (requestParameters.taskSheetNumber) {
            queryParameters['taskSheetNumber'] = requestParameters.taskSheetNumber;
        }

        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }

        if (requestParameters.guestService) {
            queryParameters['guestService'] = requestParameters.guestService;
        }

        if (requestParameters.roomStatusToChange) {
            queryParameters['roomStatusToChange'] = requestParameters.roomStatusToChange;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/houseKeepingtasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskAssignmentFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    async getHouseKeepingTasks(requestParameters: GetHouseKeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskAssignment> {
        const response = await this.getHouseKeepingTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepanciesRaw(requestParameters: GetHousekeepingDiscrepanciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.roomDiscrepancyStatus) {
            queryParameters['roomDiscrepancyStatus'] = requestParameters.roomDiscrepancyStatus;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.housekeepingEndDate !== undefined) {
            queryParameters['housekeepingEndDate'] = (requestParameters.housekeepingEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.housekeepingStartDate !== undefined) {
            queryParameters['housekeepingStartDate'] = (requestParameters.housekeepingStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.dueOut !== undefined) {
            queryParameters['dueOut'] = requestParameters.dueOut;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingDiscrepancies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepancies(requestParameters: GetHousekeepingDiscrepanciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverviewRaw(requestParameters: GetHousekeepingOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HousekeepingBoard>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }

        if (requestParameters.frontOfficeRoomStatus) {
            queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
        }

        if (requestParameters.turndownStatus) {
            queryParameters['turndownStatus'] = requestParameters.turndownStatus;
        }

        if (requestParameters.roomParityStatus) {
            queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
        }

        if (requestParameters.serviceRequestStatus) {
            queryParameters['serviceRequestStatus'] = requestParameters.serviceRequestStatus;
        }

        if (requestParameters.roomAssignmentStatus) {
            queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.building) {
            queryParameters['building'] = requestParameters.building;
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.daySection) {
            queryParameters['daySection'] = requestParameters.daySection;
        }

        if (requestParameters.eveningSection) {
            queryParameters['eveningSection'] = requestParameters.eveningSection;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.guestServiceRequest !== undefined) {
            queryParameters['guestServiceRequest'] = requestParameters.guestServiceRequest;
        }

        if (requestParameters.roomIdText !== undefined) {
            queryParameters['roomIdText'] = requestParameters.roomIdText;
        }

        if (requestParameters.excludeCombo !== undefined) {
            queryParameters['excludeCombo'] = requestParameters.excludeCombo;
        }

        if (requestParameters.cleaningPriorityOnly !== undefined) {
            queryParameters['cleaningPriorityOnly'] = requestParameters.cleaningPriorityOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingOverview`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HousekeepingBoardFromJSON(jsonValue));
    }

    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverview(requestParameters: GetHousekeepingOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HousekeepingBoard> {
        const response = await this.getHousekeepingOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRoomsRaw(requestParameters: GetOutOfOrderRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRooms(requestParameters: GetOutOfOrderRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRoomsRaw(requestParameters: GetOutOfServiceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRooms(requestParameters: GetOutOfServiceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRoomsRaw(requestParameters: PostOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOutOfOrderRoomsRequestToJSON(requestParameters.roomRepairOutOfOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRooms(requestParameters: PostOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRoomsRaw(requestParameters: PostOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOutOfServiceRoomsRequestToJSON(requestParameters.roomRepairOutOfService),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRooms(requestParameters: PostOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatusRaw(requestParameters: PutRoomRelatedStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HousekeepingRoomStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/status`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomRelatedStatusRequestToJSON(requestParameters.housekeepingRoomStatusCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HousekeepingRoomStatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatus(requestParameters: PutRoomRelatedStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HousekeepingRoomStatus> {
        const response = await this.putRoomRelatedStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetHouseKeepingTasksHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHouseKeepingTasksHousekeepingRoomStatusEnum = typeof GetHouseKeepingTasksHousekeepingRoomStatusEnum[keyof typeof GetHouseKeepingTasksHousekeepingRoomStatusEnum];
/**
 * @export
 */
export const GetHouseKeepingTasksGuestServiceEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
} as const;
export type GetHouseKeepingTasksGuestServiceEnum = typeof GetHouseKeepingTasksGuestServiceEnum[keyof typeof GetHouseKeepingTasksGuestServiceEnum];
/**
 * @export
 */
export const GetHouseKeepingTasksRoomStatusToChangeEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHouseKeepingTasksRoomStatusToChangeEnum = typeof GetHouseKeepingTasksRoomStatusToChangeEnum[keyof typeof GetHouseKeepingTasksRoomStatusToChangeEnum];
/**
 * @export
 */
export const GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = {
    Sleep: 'Sleep',
    Skip: 'Skip',
    PersonDiscrepancy: 'PersonDiscrepancy'
} as const;
export type GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = typeof GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum[keyof typeof GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHousekeepingOverviewHousekeepingRoomStatusEnum = typeof GetHousekeepingOverviewHousekeepingRoomStatusEnum[keyof typeof GetHousekeepingOverviewHousekeepingRoomStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type GetHousekeepingOverviewFrontOfficeRoomStatusEnum = typeof GetHousekeepingOverviewFrontOfficeRoomStatusEnum[keyof typeof GetHousekeepingOverviewFrontOfficeRoomStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewTurndownStatusEnum = {
    Required: 'Required',
    NotRequired: 'NotRequired',
    Compeleted: 'Compeleted'
} as const;
export type GetHousekeepingOverviewTurndownStatusEnum = typeof GetHousekeepingOverviewTurndownStatusEnum[keyof typeof GetHousekeepingOverviewTurndownStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
} as const;
export type GetHousekeepingOverviewRoomParityStatusEnum = typeof GetHousekeepingOverviewRoomParityStatusEnum[keyof typeof GetHousekeepingOverviewRoomParityStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewServiceRequestStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
} as const;
export type GetHousekeepingOverviewServiceRequestStatusEnum = typeof GetHousekeepingOverviewServiceRequestStatusEnum[keyof typeof GetHousekeepingOverviewServiceRequestStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
} as const;
export type GetHousekeepingOverviewRoomAssignmentStatusEnum = typeof GetHousekeepingOverviewRoomAssignmentStatusEnum[keyof typeof GetHousekeepingOverviewRoomAssignmentStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewFetchInstructionsEnum = {
    Summary: 'Summary',
    ResvInfo: 'ResvInfo',
    TurndownInfo: 'TurndownInfo'
} as const;
export type GetHousekeepingOverviewFetchInstructionsEnum = typeof GetHousekeepingOverviewFetchInstructionsEnum[keyof typeof GetHousekeepingOverviewFetchInstructionsEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewGuestServiceRequestEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
} as const;
export type GetHousekeepingOverviewGuestServiceRequestEnum = typeof GetHousekeepingOverviewGuestServiceRequestEnum[keyof typeof GetHousekeepingOverviewGuestServiceRequestEnum];
