"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchPropertyRoomStayTypeToJSON = exports.SearchPropertyRoomStayTypeFromJSONTyped = exports.SearchPropertyRoomStayTypeFromJSON = exports.instanceOfSearchPropertyRoomStayType = void 0;
const runtime_1 = require("../runtime");
const HotelAvailabilityStatus_1 = require("./HotelAvailabilityStatus");
const OfferTotalType_1 = require("./OfferTotalType");
const PropertySearchPropertyInfo_1 = require("./PropertySearchPropertyInfo");
const RoomTagType_1 = require("./RoomTagType");
/**
 * Check if a given object implements the SearchPropertyRoomStayType interface.
 */
function instanceOfSearchPropertyRoomStayType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSearchPropertyRoomStayType = instanceOfSearchPropertyRoomStayType;
function SearchPropertyRoomStayTypeFromJSON(json) {
    return SearchPropertyRoomStayTypeFromJSONTyped(json, false);
}
exports.SearchPropertyRoomStayTypeFromJSON = SearchPropertyRoomStayTypeFromJSON;
function SearchPropertyRoomStayTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availability': !(0, runtime_1.exists)(json, 'availability') ? undefined : (0, HotelAvailabilityStatus_1.HotelAvailabilityStatusFromJSON)(json['availability']),
        'minimumRate': !(0, runtime_1.exists)(json, 'minimumRate') ? undefined : (0, OfferTotalType_1.OfferTotalTypeFromJSON)(json['minimumRate']),
        'propertyInfo': !(0, runtime_1.exists)(json, 'propertyInfo') ? undefined : (0, PropertySearchPropertyInfo_1.PropertySearchPropertyInfoFromJSON)(json['propertyInfo']),
        'roomClass': !(0, runtime_1.exists)(json, 'roomClass') ? undefined : json['roomClass'],
        'roomTags': !(0, runtime_1.exists)(json, 'roomTags') ? undefined : (json['roomTags'].map(RoomTagType_1.RoomTagTypeFromJSON)),
    };
}
exports.SearchPropertyRoomStayTypeFromJSONTyped = SearchPropertyRoomStayTypeFromJSONTyped;
function SearchPropertyRoomStayTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availability': (0, HotelAvailabilityStatus_1.HotelAvailabilityStatusToJSON)(value.availability),
        'minimumRate': (0, OfferTotalType_1.OfferTotalTypeToJSON)(value.minimumRate),
        'propertyInfo': (0, PropertySearchPropertyInfo_1.PropertySearchPropertyInfoToJSON)(value.propertyInfo),
        'roomClass': value.roomClass,
        'roomTags': value.roomTags === undefined ? undefined : (value.roomTags.map(RoomTagType_1.RoomTagTypeToJSON)),
    };
}
exports.SearchPropertyRoomStayTypeToJSON = SearchPropertyRoomStayTypeToJSON;
