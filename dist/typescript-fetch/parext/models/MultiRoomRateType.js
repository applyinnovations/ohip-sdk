"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiRoomRateTypeToJSON = exports.MultiRoomRateTypeFromJSONTyped = exports.MultiRoomRateTypeFromJSON = exports.instanceOfMultiRoomRateType = void 0;
const runtime_1 = require("../runtime");
const RoomRateInfoType_1 = require("./RoomRateInfoType");
/**
 * Check if a given object implements the MultiRoomRateType interface.
 */
function instanceOfMultiRoomRateType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMultiRoomRateType = instanceOfMultiRoomRateType;
function MultiRoomRateTypeFromJSON(json) {
    return MultiRoomRateTypeFromJSONTyped(json, false);
}
exports.MultiRoomRateTypeFromJSON = MultiRoomRateTypeFromJSON;
function MultiRoomRateTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
        'ratePlanCode': !(0, runtime_1.exists)(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'ratePlanSet': !(0, runtime_1.exists)(json, 'ratePlanSet') ? undefined : json['ratePlanSet'],
        'roomRateInfo': !(0, runtime_1.exists)(json, 'roomRateInfo') ? undefined : (0, RoomRateInfoType_1.RoomRateInfoTypeFromJSON)(json['roomRateInfo']),
    };
}
exports.MultiRoomRateTypeFromJSONTyped = MultiRoomRateTypeFromJSONTyped;
function MultiRoomRateTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'currencyCode': value.currencyCode,
        'ratePlanCode': value.ratePlanCode,
        'ratePlanSet': value.ratePlanSet,
        'roomRateInfo': (0, RoomRateInfoType_1.RoomRateInfoTypeToJSON)(value.roomRateInfo),
    };
}
exports.MultiRoomRateTypeToJSON = MultiRoomRateTypeToJSON;
