"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchPropertyResponseTypeToJSON = exports.SearchPropertyResponseTypeFromJSONTyped = exports.SearchPropertyResponseTypeFromJSON = exports.instanceOfSearchPropertyResponseType = void 0;
const runtime_1 = require("../runtime");
const SearchPropertyRoomStayType_1 = require("./SearchPropertyRoomStayType");
/**
 * Check if a given object implements the SearchPropertyResponseType interface.
 */
function instanceOfSearchPropertyResponseType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSearchPropertyResponseType = instanceOfSearchPropertyResponseType;
function SearchPropertyResponseTypeFromJSON(json) {
    return SearchPropertyResponseTypeFromJSONTyped(json, false);
}
exports.SearchPropertyResponseTypeFromJSON = SearchPropertyResponseTypeFromJSON;
function SearchPropertyResponseTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hasMore': !(0, runtime_1.exists)(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !(0, runtime_1.exists)(json, 'limit') ? undefined : json['limit'],
        'offset': !(0, runtime_1.exists)(json, 'offset') ? undefined : json['offset'],
        'roomStays': !(0, runtime_1.exists)(json, 'roomStays') ? undefined : (json['roomStays'].map(SearchPropertyRoomStayType_1.SearchPropertyRoomStayTypeFromJSON)),
        'totalResults': !(0, runtime_1.exists)(json, 'totalResults') ? undefined : json['totalResults'],
    };
}
exports.SearchPropertyResponseTypeFromJSONTyped = SearchPropertyResponseTypeFromJSONTyped;
function SearchPropertyResponseTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hasMore': value.hasMore,
        'limit': value.limit,
        'offset': value.offset,
        'roomStays': value.roomStays === undefined ? undefined : (value.roomStays.map(SearchPropertyRoomStayType_1.SearchPropertyRoomStayTypeToJSON)),
        'totalResults': value.totalResults,
    };
}
exports.SearchPropertyResponseTypeToJSON = SearchPropertyResponseTypeToJSON;
