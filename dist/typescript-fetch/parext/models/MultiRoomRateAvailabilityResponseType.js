"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiRoomRateAvailabilityResponseTypeToJSON = exports.MultiRoomRateAvailabilityResponseTypeFromJSONTyped = exports.MultiRoomRateAvailabilityResponseTypeFromJSON = exports.instanceOfMultiRoomRateAvailabilityResponseType = void 0;
const runtime_1 = require("../runtime");
const MultiRoomRateAvailabilityType_1 = require("./MultiRoomRateAvailabilityType");
const WarningsType_1 = require("./WarningsType");
/**
 * Check if a given object implements the MultiRoomRateAvailabilityResponseType interface.
 */
function instanceOfMultiRoomRateAvailabilityResponseType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMultiRoomRateAvailabilityResponseType = instanceOfMultiRoomRateAvailabilityResponseType;
function MultiRoomRateAvailabilityResponseTypeFromJSON(json) {
    return MultiRoomRateAvailabilityResponseTypeFromJSONTyped(json, false);
}
exports.MultiRoomRateAvailabilityResponseTypeFromJSON = MultiRoomRateAvailabilityResponseTypeFromJSON;
function MultiRoomRateAvailabilityResponseTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelAvailability': !(0, runtime_1.exists)(json, 'hotelAvailability') ? undefined : (json['hotelAvailability'].map(MultiRoomRateAvailabilityType_1.MultiRoomRateAvailabilityTypeFromJSON)),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (0, WarningsType_1.WarningsTypeFromJSON)(json['warnings']),
    };
}
exports.MultiRoomRateAvailabilityResponseTypeFromJSONTyped = MultiRoomRateAvailabilityResponseTypeFromJSONTyped;
function MultiRoomRateAvailabilityResponseTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelAvailability': value.hotelAvailability === undefined ? undefined : (value.hotelAvailability.map(MultiRoomRateAvailabilityType_1.MultiRoomRateAvailabilityTypeToJSON)),
        'warnings': (0, WarningsType_1.WarningsTypeToJSON)(value.warnings),
    };
}
exports.MultiRoomRateAvailabilityResponseTypeToJSON = MultiRoomRateAvailabilityResponseTypeToJSON;
