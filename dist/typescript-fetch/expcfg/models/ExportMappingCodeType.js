"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportMappingCodeTypeToJSON = exports.ExportMappingCodeTypeFromJSONTyped = exports.ExportMappingCodeTypeFromJSON = exports.instanceOfExportMappingCodeType = void 0;
const runtime_1 = require("../runtime");
const ExportCodeDataType_1 = require("./ExportCodeDataType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ExportMappingCodeType interface.
 */
function instanceOfExportMappingCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExportMappingCodeType = instanceOfExportMappingCodeType;
function ExportMappingCodeTypeFromJSON(json) {
    return ExportMappingCodeTypeFromJSONTyped(json, false);
}
exports.ExportMappingCodeTypeFromJSON = ExportMappingCodeTypeFromJSON;
function ExportMappingCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'exportMappingId': !(0, runtime_1.exists)(json, 'exportMappingId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['exportMappingId']),
        'mappingTypeCode': !(0, runtime_1.exists)(json, 'mappingTypeCode') ? undefined : json['mappingTypeCode'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : (0, ExportCodeDataType_1.ExportCodeDataTypeFromJSON)(json['dataType']),
        'sequenceNumber': !(0, runtime_1.exists)(json, 'sequenceNumber') ? undefined : json['sequenceNumber'],
        'lovName': !(0, runtime_1.exists)(json, 'lovName') ? undefined : json['lovName'],
        'useLov': !(0, runtime_1.exists)(json, 'useLov') ? undefined : json['useLov'],
        'required': !(0, runtime_1.exists)(json, 'required') ? undefined : json['required'],
    };
}
exports.ExportMappingCodeTypeFromJSONTyped = ExportMappingCodeTypeFromJSONTyped;
function ExportMappingCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'exportMappingId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.exportMappingId),
        'mappingTypeCode': value.mappingTypeCode,
        'description': value.description,
        'dataType': (0, ExportCodeDataType_1.ExportCodeDataTypeToJSON)(value.dataType),
        'sequenceNumber': value.sequenceNumber,
        'lovName': value.lovName,
        'useLov': value.useLov,
        'required': value.required,
    };
}
exports.ExportMappingCodeTypeToJSON = ExportMappingCodeTypeToJSON;
