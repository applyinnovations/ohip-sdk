"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportXMLComplexWithSourceTypeToJSON = exports.ExportXMLComplexWithSourceTypeFromJSONTyped = exports.ExportXMLComplexWithSourceTypeFromJSON = exports.instanceOfExportXMLComplexWithSourceType = void 0;
const runtime_1 = require("../runtime");
const ExportXMLAttributeType_1 = require("./ExportXMLAttributeType");
const ExportXMLElementType_1 = require("./ExportXMLElementType");
/**
 * Check if a given object implements the ExportXMLComplexWithSourceType interface.
 */
function instanceOfExportXMLComplexWithSourceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExportXMLComplexWithSourceType = instanceOfExportXMLComplexWithSourceType;
function ExportXMLComplexWithSourceTypeFromJSON(json) {
    return ExportXMLComplexWithSourceTypeFromJSONTyped(json, false);
}
exports.ExportXMLComplexWithSourceTypeFromJSON = ExportXMLComplexWithSourceTypeFromJSON;
function ExportXMLComplexWithSourceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'attributes': !(0, runtime_1.exists)(json, 'attributes') ? undefined : (json['attributes'].map(ExportXMLAttributeType_1.ExportXMLAttributeTypeFromJSON)),
        'elements': !(0, runtime_1.exists)(json, 'elements') ? undefined : (json['elements'].map(ExportXMLElementType_1.ExportXMLElementTypeFromJSON)),
        'source': !(0, runtime_1.exists)(json, 'source') ? undefined : json['source'],
        'filter': !(0, runtime_1.exists)(json, 'filter') ? undefined : json['filter'],
        'required': !(0, runtime_1.exists)(json, 'required') ? undefined : json['required'],
    };
}
exports.ExportXMLComplexWithSourceTypeFromJSONTyped = ExportXMLComplexWithSourceTypeFromJSONTyped;
function ExportXMLComplexWithSourceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'attributes': value.attributes === undefined ? undefined : (value.attributes.map(ExportXMLAttributeType_1.ExportXMLAttributeTypeToJSON)),
        'elements': value.elements === undefined ? undefined : (value.elements.map(ExportXMLElementType_1.ExportXMLElementTypeToJSON)),
        'source': value.source,
        'filter': value.filter,
        'required': value.required,
    };
}
exports.ExportXMLComplexWithSourceTypeToJSON = ExportXMLComplexWithSourceTypeToJSON;
