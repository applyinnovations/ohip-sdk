"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportDataSetupTypeToJSON = exports.ExportDataSetupTypeFromJSONTyped = exports.ExportDataSetupTypeFromJSON = exports.instanceOfExportDataSetupType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the ExportDataSetupType interface.
 */
function instanceOfExportDataSetupType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExportDataSetupType = instanceOfExportDataSetupType;
function ExportDataSetupTypeFromJSON(json) {
    return ExportDataSetupTypeFromJSONTyped(json, false);
}
exports.ExportDataSetupTypeFromJSON = ExportDataSetupTypeFromJSON;
function ExportDataSetupTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'dataSourceName': !(0, runtime_1.exists)(json, 'dataSourceName') ? undefined : json['dataSourceName'],
        'preExportProcedure': !(0, runtime_1.exists)(json, 'preExportProcedure') ? undefined : json['preExportProcedure'],
        'postExportProcedure': !(0, runtime_1.exists)(json, 'postExportProcedure') ? undefined : json['postExportProcedure'],
        'addNewLine': !(0, runtime_1.exists)(json, 'addNewLine') ? undefined : json['addNewLine'],
        'createHeaderFooter': !(0, runtime_1.exists)(json, 'createHeaderFooter') ? undefined : json['createHeaderFooter'],
        'appendToFile': !(0, runtime_1.exists)(json, 'appendToFile') ? undefined : json['appendToFile'],
        'columnSeparator': !(0, runtime_1.exists)(json, 'columnSeparator') ? undefined : json['columnSeparator'],
        'componentExport': !(0, runtime_1.exists)(json, 'componentExport') ? undefined : json['componentExport'],
        'compressData': !(0, runtime_1.exists)(json, 'compressData') ? undefined : json['compressData'],
        'filterCondition': !(0, runtime_1.exists)(json, 'filterCondition') ? undefined : json['filterCondition'],
        'xMLRootTag': !(0, runtime_1.exists)(json, 'xMLRootTag') ? undefined : json['xMLRootTag'],
        'xMLEncoding': !(0, runtime_1.exists)(json, 'xMLEncoding') ? undefined : json['xMLEncoding'],
        'xMLProcessingInstructions': !(0, runtime_1.exists)(json, 'xMLProcessingInstructions') ? undefined : json['xMLProcessingInstructions'],
        'xMLDocumentTypeName': !(0, runtime_1.exists)(json, 'xMLDocumentTypeName') ? undefined : json['xMLDocumentTypeName'],
        'xMLDocumentTypeSystemId': !(0, runtime_1.exists)(json, 'xMLDocumentTypeSystemId') ? undefined : json['xMLDocumentTypeSystemId'],
        'xMLDocumentTypePublicId': !(0, runtime_1.exists)(json, 'xMLDocumentTypePublicId') ? undefined : json['xMLDocumentTypePublicId'],
    };
}
exports.ExportDataSetupTypeFromJSONTyped = ExportDataSetupTypeFromJSONTyped;
function ExportDataSetupTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'dataSourceName': value.dataSourceName,
        'preExportProcedure': value.preExportProcedure,
        'postExportProcedure': value.postExportProcedure,
        'addNewLine': value.addNewLine,
        'createHeaderFooter': value.createHeaderFooter,
        'appendToFile': value.appendToFile,
        'columnSeparator': value.columnSeparator,
        'componentExport': value.componentExport,
        'compressData': value.compressData,
        'filterCondition': value.filterCondition,
        'xMLRootTag': value.xMLRootTag,
        'xMLEncoding': value.xMLEncoding,
        'xMLProcessingInstructions': value.xMLProcessingInstructions,
        'xMLDocumentTypeName': value.xMLDocumentTypeName,
        'xMLDocumentTypeSystemId': value.xMLDocumentTypeSystemId,
        'xMLDocumentTypePublicId': value.xMLDocumentTypePublicId,
    };
}
exports.ExportDataSetupTypeToJSON = ExportDataSetupTypeToJSON;
