"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportColumnDetailTypeToJSON = exports.ExportColumnDetailTypeFromJSONTyped = exports.ExportColumnDetailTypeFromJSON = exports.instanceOfExportColumnDetailType = void 0;
const runtime_1 = require("../runtime");
const ExportColumnInfoType_1 = require("./ExportColumnInfoType");
const ExportColumnXMLType_1 = require("./ExportColumnXMLType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ExportColumnDetailType interface.
 */
function instanceOfExportColumnDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExportColumnDetailType = instanceOfExportColumnDetailType;
function ExportColumnDetailTypeFromJSON(json) {
    return ExportColumnDetailTypeFromJSONTyped(json, false);
}
exports.ExportColumnDetailTypeFromJSON = ExportColumnDetailTypeFromJSON;
function ExportColumnDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'exportDataId': !(0, runtime_1.exists)(json, 'exportDataId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['exportDataId']),
        'parentColumnId': !(0, runtime_1.exists)(json, 'parentColumnId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['parentColumnId']),
        'columnName': !(0, runtime_1.exists)(json, 'columnName') ? undefined : json['columnName'],
        'columnLength': !(0, runtime_1.exists)(json, 'columnLength') ? undefined : json['columnLength'],
        'columnOrderBy': !(0, runtime_1.exists)(json, 'columnOrderBy') ? undefined : json['columnOrderBy'],
        'columnFormat': !(0, runtime_1.exists)(json, 'columnFormat') ? undefined : json['columnFormat'],
        'columnAlignment': !(0, runtime_1.exists)(json, 'columnAlignment') ? undefined : json['columnAlignment'],
        'columnType': !(0, runtime_1.exists)(json, 'columnType') ? undefined : json['columnType'],
        'xMLColumnType': !(0, runtime_1.exists)(json, 'xMLColumnType') ? undefined : (0, ExportColumnXMLType_1.ExportColumnXMLTypeFromJSON)(json['xMLColumnType']),
        'formula': !(0, runtime_1.exists)(json, 'formula') ? undefined : json['formula'],
        'sourceViewName': !(0, runtime_1.exists)(json, 'sourceViewName') ? undefined : json['sourceViewName'],
        'filter': !(0, runtime_1.exists)(json, 'filter') ? undefined : json['filter'],
        'defaultValue': !(0, runtime_1.exists)(json, 'defaultValue') ? undefined : json['defaultValue'],
        'databaseColumn': !(0, runtime_1.exists)(json, 'databaseColumn') ? undefined : json['databaseColumn'],
        'columnDataType': !(0, runtime_1.exists)(json, 'columnDataType') ? undefined : (0, ExportColumnInfoType_1.ExportColumnInfoTypeFromJSON)(json['columnDataType']),
        'ignoreLength': !(0, runtime_1.exists)(json, 'ignoreLength') ? undefined : json['ignoreLength'],
        'tagRequired': !(0, runtime_1.exists)(json, 'tagRequired') ? undefined : json['tagRequired'],
        'xMLAttribute': !(0, runtime_1.exists)(json, 'xMLAttribute') ? undefined : json['xMLAttribute'],
    };
}
exports.ExportColumnDetailTypeFromJSONTyped = ExportColumnDetailTypeFromJSONTyped;
function ExportColumnDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'exportDataId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.exportDataId),
        'parentColumnId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.parentColumnId),
        'columnName': value.columnName,
        'columnLength': value.columnLength,
        'columnOrderBy': value.columnOrderBy,
        'columnFormat': value.columnFormat,
        'columnAlignment': value.columnAlignment,
        'columnType': value.columnType,
        'xMLColumnType': (0, ExportColumnXMLType_1.ExportColumnXMLTypeToJSON)(value.xMLColumnType),
        'formula': value.formula,
        'sourceViewName': value.sourceViewName,
        'filter': value.filter,
        'defaultValue': value.defaultValue,
        'databaseColumn': value.databaseColumn,
        'columnDataType': (0, ExportColumnInfoType_1.ExportColumnInfoTypeToJSON)(value.columnDataType),
        'ignoreLength': value.ignoreLength,
        'tagRequired': value.tagRequired,
        'xMLAttribute': value.xMLAttribute,
    };
}
exports.ExportColumnDetailTypeToJSON = ExportColumnDetailTypeToJSON;
