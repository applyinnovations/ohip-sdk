"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationAsyncApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ReservationAsyncApi extends runtime.BaseAPI {
    /**
     * This API returns a summary of the reservations included in the mass update process. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>getMassUpdateProcessSummary</p>
     * Get results of a Mass Update process
     */
    getMassUpdateProcessSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.massUpdateId === null || requestParameters.massUpdateId === undefined) {
                throw new runtime.RequiredError('massUpdateId', 'Required parameter requestParameters.massUpdateId was null or undefined when calling getMassUpdateProcessSummary.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getMassUpdateProcessSummary.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/massUpdate/{massUpdateId}`.replace(`{${"massUpdateId"}}`, encodeURIComponent(String(requestParameters.massUpdateId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MassUpdateSummaryTypeFromJSON)(jsonValue));
        });
    }
    /**
     * This API returns a summary of the reservations included in the mass update process. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>getMassUpdateProcessSummary</p>
     * Get results of a Mass Update process
     */
    getMassUpdateProcessSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMassUpdateProcessSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve a property&apos;s reservation daily summary within the dates given in the startReservationsDailySummaryProcess API request. You can get the value of the summaryId from the Location header returned by the getReservationsProcessStatus operation after the process is completed.  <p><strong>OperationId:</strong>getReservationsDailySummary</p>
     * Get results of Reservations Daily Summary
     */
    getReservationsDailySummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.summaryId === null || requestParameters.summaryId === undefined) {
                throw new runtime.RequiredError('summaryId', 'Required parameter requestParameters.summaryId was null or undefined when calling getReservationsDailySummary.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getReservationsDailySummary.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsDailySummary.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary/{summaryId}`.replace(`{${"summaryId"}}`, encodeURIComponent(String(requestParameters.summaryId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsDailySummaryDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve a property&apos;s reservation daily summary within the dates given in the startReservationsDailySummaryProcess API request. You can get the value of the summaryId from the Location header returned by the getReservationsProcessStatus operation after the process is completed.  <p><strong>OperationId:</strong>getReservationsDailySummary</p>
     * Get results of Reservations Daily Summary
     */
    getReservationsDailySummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsDailySummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to check whether the process to generate reservations daily summaries is complete. You can get value of summaryId from the Location header returned by the startReservationsDailySummaryProcess operation. <p><strong>OperationId:</strong>getReservationsProcessStatus</p>
     * Check status of Reservation Daily Summary process
     */
    getReservationsProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.summaryId === null || requestParameters.summaryId === undefined) {
                throw new runtime.RequiredError('summaryId', 'Required parameter requestParameters.summaryId was null or undefined when calling getReservationsProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getReservationsProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary/{summaryId}`.replace(`{${"summaryId"}}`, encodeURIComponent(String(requestParameters.summaryId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this to check whether the process to generate reservations daily summaries is complete. You can get value of summaryId from the Location header returned by the startReservationsDailySummaryProcess operation. <p><strong>OperationId:</strong>getReservationsProcessStatus</p>
     * Check status of Reservation Daily Summary process
     */
    getReservationsProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getReservationsProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API returns a summary of the status from rooming list creation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListCreationProcessResults</p>
     * Get results of Rooming List Creation process
     */
    getRoomingListCreationProcessResultsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRoomingListCreationProcessResults.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListCreationProcessResults.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roominglistcreation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreateRoomingListTypeFromJSON)(jsonValue));
        });
    }
    /**
     * This API returns a summary of the status from rooming list creation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListCreationProcessResults</p>
     * Get results of Rooming List Creation process
     */
    getRoomingListCreationProcessResults(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomingListCreationProcessResultsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to check whether the create rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListCreationProcessStatus</p>
     * Check status of Rooming List creation process.
     */
    getRoomingListCreationProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRoomingListCreationProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListCreationProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roominglistcreation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this to check whether the create rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListCreationProcessStatus</p>
     * Check status of Rooming List creation process.
     */
    getRoomingListCreationProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getRoomingListCreationProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API returns a summary of the status from rooming list validation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListValidationProcessResults</p>
     * Get results of Rooming List validation process
     */
    getRoomingListValidationProcessResultsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRoomingListValidationProcessResults.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListValidationProcessResults.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roominglistvalidation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidateRoomingListTypeFromJSON)(jsonValue));
        });
    }
    /**
     * This API returns a summary of the status from rooming list validation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListValidationProcessResults</p>
     * Get results of Rooming List validation process
     */
    getRoomingListValidationProcessResults(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomingListValidationProcessResultsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to check whether the validate rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListValidationProcessStatus</p>
     * Check status of Rooming List validation process.
     */
    getRoomingListValidationProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRoomingListValidationProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListValidationProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roominglistvalidation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this to check whether the validate rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListValidationProcessStatus</p>
     * Check status of Rooming List validation process.
     */
    getRoomingListValidationProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getRoomingListValidationProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this to check whether the mass update process has been completed. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>headMassUpdateProcessStatus</p>
     * Check status of Mass Update process.
     */
    headMassUpdateProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.massUpdateId === null || requestParameters.massUpdateId === undefined) {
                throw new runtime.RequiredError('massUpdateId', 'Required parameter requestParameters.massUpdateId was null or undefined when calling headMassUpdateProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling headMassUpdateProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/massUpdate/{massUpdateId}`.replace(`{${"massUpdateId"}}`, encodeURIComponent(String(requestParameters.massUpdateId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this to check whether the mass update process has been completed. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>headMassUpdateProcessStatus</p>
     * Check status of Mass Update process.
     */
    headMassUpdateProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.headMassUpdateProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation housekeeping options and/or schedules of a given list of reservations. A user is allowed to submit only one mass update reservations request per hotel at a time. <p><strong>OperationId:</strong>startHousekeepingMassUpdateProcess</p>
     * Updates reservation housekeeping options and/or schedules of a given list of reservations.
     */
    startHousekeepingMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startHousekeepingMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startHousekeepingMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/housekeepingMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.HousekeepingMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation housekeeping options and/or schedules of a given list of reservations. A user is allowed to submit only one mass update reservations request per hotel at a time. <p><strong>OperationId:</strong>startHousekeepingMassUpdateProcess</p>
     * Updates reservation housekeeping options and/or schedules of a given list of reservations.
     */
    startHousekeepingMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startHousekeepingMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation notes of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startNotesMassUpdateProcess</p>
     * Updates reservation notes of a given list of reservations.
     */
    startNotesMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startNotesMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startNotesMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/notesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NotesMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation notes of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startNotesMassUpdateProcess</p>
     * Updates reservation notes of a given list of reservations.
     */
    startNotesMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startNotesMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation payment instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPaymentInsructionsMassUpdateProcess</p>
     * Updates reservation payment instructions of a given list of reservations.
     */
    startPaymentInstructionsMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startPaymentInstructionsMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startPaymentInstructionsMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/paymentInstructionsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PaymentInstructionsMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation payment instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPaymentInsructionsMassUpdateProcess</p>
     * Updates reservation payment instructions of a given list of reservations.
     */
    startPaymentInstructionsMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startPaymentInstructionsMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to create reservation preferences of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPreferencesMassUpdateProcess</p>
     * Updates reservation preferences of a given list of reservations.
     */
    startPreferencesMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startPreferencesMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startPreferencesMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/preferencesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PreferencesMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to create reservation preferences of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPreferencesMassUpdateProcess</p>
     * Updates reservation preferences of a given list of reservations.
     */
    startPreferencesMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startPreferencesMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation details of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startReservationDetailsMassUpdateProcess</p>
     * Updates reservation details of a given list of reservations.
     */
    startReservationDetailsMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startReservationDetailsMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startReservationDetailsMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservationDetailsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDetailsMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation details of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startReservationDetailsMassUpdateProcess</p>
     * Updates reservation details of a given list of reservations.
     */
    startReservationDetailsMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startReservationDetailsMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to get a reservation daily summary for a property within a given date range. Maximum limit of date range is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel. Returns a header parameter Location that can be used in the getReservationsProcessStatus operation.  Use event driven APIs (see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) to get real time reservation updates.  <p><strong>OperationId:</strong>startReservationsDailySummaryProcess</p>
     * Fetch past, present and future Reservations Daily Summary
     */
    startReservationsDailySummaryProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startReservationsDailySummaryProcess.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startReservationsDailySummaryProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startReservationsDailySummaryProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to get a reservation daily summary for a property within a given date range. Maximum limit of date range is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel. Returns a header parameter Location that can be used in the getReservationsProcessStatus operation.  Use event driven APIs (see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) to get real time reservation updates.  <p><strong>OperationId:</strong>startReservationsDailySummaryProcess</p>
     * Fetch past, present and future Reservations Daily Summary
     */
    startReservationsDailySummaryProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startReservationsDailySummaryProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to create Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListCreationProcess</p>
     * Create Rooming List Reservations
     */
    startRoomingListCreationProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startRoomingListCreationProcess.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling startRoomingListCreationProcess.');
            }
            if (requestParameters.roomingList === null || requestParameters.roomingList === undefined) {
                throw new runtime.RequiredError('roomingList', 'Required parameter requestParameters.roomingList was null or undefined when calling startRoomingListCreationProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/roominglistcreation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomingListToJSON)(requestParameters.roomingList),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to create Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListCreationProcess</p>
     * Create Rooming List Reservations
     */
    startRoomingListCreationProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startRoomingListCreationProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to validate Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListValidationProcess</p>
     * Validate Rooming List Reservations
     */
    startRoomingListValidationProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startRoomingListValidationProcess.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling startRoomingListValidationProcess.');
            }
            if (requestParameters.roomingList === null || requestParameters.roomingList === undefined) {
                throw new runtime.RequiredError('roomingList', 'Required parameter requestParameters.roomingList was null or undefined when calling startRoomingListValidationProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/roominglistvalidation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomingListToJSON)(requestParameters.roomingList),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to validate Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListValidationProcess</p>
     * Validate Rooming List Reservations
     */
    startRoomingListValidationProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startRoomingListValidationProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation routing instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startRoutingInstructionsMassUpdateProcess</p>
     * Updates reservation routing instructions of a given list of reservations.
     */
    startRoutingInstructionsMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startRoutingInstructionsMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startRoutingInstructionsMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/routingInstructionsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoutingInstructionsMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation routing instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startRoutingInstructionsMassUpdateProcess</p>
     * Updates reservation routing instructions of a given list of reservations.
     */
    startRoutingInstructionsMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startRoutingInstructionsMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to update reservation traces of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTracesMassUpdateProcess</p>
     * Updates reservation traces of a given list of reservations.
     */
    startTracesMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startTracesMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startTracesMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/tracesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TracesMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to update reservation traces of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTracesMassUpdateProcess</p>
     * Updates reservation traces of a given list of reservations.
     */
    startTracesMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startTracesMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API allows you to create reservation transportations of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTransportationsMassUpdateProcess</p>
     * Updates reservation transportations of a given list of reservations.
     */
    startTransportationsMassUpdateProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startTransportationsMassUpdateProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startTransportationsMassUpdateProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/transportationsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransportationsMassUpdateCriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This API allows you to create reservation transportations of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTransportationsMassUpdateProcess</p>
     * Updates reservation transportations of a given list of reservations.
     */
    startTransportationsMassUpdateProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startTransportationsMassUpdateProcessRaw(requestParameters, initOverrides);
        });
    }
}
exports.ReservationAsyncApi = ReservationAsyncApi;
