"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentificationTypeToJSON = exports.IdentificationTypeFromJSONTyped = exports.IdentificationTypeFromJSON = exports.instanceOfIdentificationType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the IdentificationType interface.
 */
function instanceOfIdentificationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfIdentificationType = instanceOfIdentificationType;
function IdentificationTypeFromJSON(json) {
    return IdentificationTypeFromJSONTyped(json, false);
}
exports.IdentificationTypeFromJSON = IdentificationTypeFromJSON;
function IdentificationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'idType': !(0, runtime_1.exists)(json, 'idType') ? undefined : json['idType'],
        'idNumber': !(0, runtime_1.exists)(json, 'idNumber') ? undefined : json['idNumber'],
        'idNumberMasked': !(0, runtime_1.exists)(json, 'idNumberMasked') ? undefined : json['idNumberMasked'],
        'issuedCountry': !(0, runtime_1.exists)(json, 'issuedCountry') ? undefined : json['issuedCountry'],
        'issuedDate': !(0, runtime_1.exists)(json, 'issuedDate') ? undefined : json['issuedDate'],
        'issuedPlace': !(0, runtime_1.exists)(json, 'issuedPlace') ? undefined : json['issuedPlace'],
        'expirationDate': !(0, runtime_1.exists)(json, 'expirationDate') ? undefined : json['expirationDate'],
        'registeredProperty': !(0, runtime_1.exists)(json, 'registeredProperty') ? undefined : json['registeredProperty'],
        'primaryInd': !(0, runtime_1.exists)(json, 'primaryInd') ? undefined : json['primaryInd'],
        'orderSequence': !(0, runtime_1.exists)(json, 'orderSequence') ? undefined : json['orderSequence'],
    };
}
exports.IdentificationTypeFromJSONTyped = IdentificationTypeFromJSONTyped;
function IdentificationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'idType': value.idType,
        'idNumber': value.idNumber,
        'idNumberMasked': value.idNumberMasked,
        'issuedCountry': value.issuedCountry,
        'issuedDate': value.issuedDate,
        'issuedPlace': value.issuedPlace,
        'expirationDate': value.expirationDate,
        'registeredProperty': value.registeredProperty,
        'primaryInd': value.primaryInd,
        'orderSequence': value.orderSequence,
    };
}
exports.IdentificationTypeToJSON = IdentificationTypeToJSON;
