"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpsellInfoTypeUpsellInfoToJSON = exports.UpsellInfoTypeUpsellInfoFromJSONTyped = exports.UpsellInfoTypeUpsellInfoFromJSON = exports.instanceOfUpsellInfoTypeUpsellInfo = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the UpsellInfoTypeUpsellInfo interface.
 */
function instanceOfUpsellInfoTypeUpsellInfo(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUpsellInfoTypeUpsellInfo = instanceOfUpsellInfoTypeUpsellInfo;
function UpsellInfoTypeUpsellInfoFromJSON(json) {
    return UpsellInfoTypeUpsellInfoFromJSONTyped(json, false);
}
exports.UpsellInfoTypeUpsellInfoFromJSON = UpsellInfoTypeUpsellInfoFromJSON;
function UpsellInfoTypeUpsellInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'totalUpsellCharge': !(0, runtime_1.exists)(json, 'totalUpsellCharge') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalUpsellCharge']),
        'totalUpsellMoneyAmount': !(0, runtime_1.exists)(json, 'totalUpsellMoneyAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalUpsellMoneyAmount']),
        'firstNightUpsellAmount': !(0, runtime_1.exists)(json, 'firstNightUpsellAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['firstNightUpsellAmount']),
        'firstNightUpsellCharge': !(0, runtime_1.exists)(json, 'firstNightUpsellCharge') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['firstNightUpsellCharge']),
        'totalUpsellPoints': !(0, runtime_1.exists)(json, 'totalUpsellPoints') ? undefined : json['totalUpsellPoints'],
        'totalActualRateAmount': !(0, runtime_1.exists)(json, 'totalActualRateAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalActualRateAmount']),
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['roomType']),
        'roomLongDescription': !(0, runtime_1.exists)(json, 'roomLongDescription') ? undefined : json['roomLongDescription'],
        'ruleId': !(0, runtime_1.exists)(json, 'ruleId') ? undefined : json['ruleId'],
        'ruleCode': !(0, runtime_1.exists)(json, 'ruleCode') ? undefined : json['ruleCode'],
        'ruleDescription': !(0, runtime_1.exists)(json, 'ruleDescription') ? undefined : json['ruleDescription'],
        'percentageSavings': !(0, runtime_1.exists)(json, 'percentageSavings') ? undefined : json['percentageSavings'],
        'upsellDate': !(0, runtime_1.exists)(json, 'upsellDate') ? undefined : json['upsellDate'],
        'upsellUser': !(0, runtime_1.exists)(json, 'upsellUser') ? undefined : json['upsellUser'],
    };
}
exports.UpsellInfoTypeUpsellInfoFromJSONTyped = UpsellInfoTypeUpsellInfoFromJSONTyped;
function UpsellInfoTypeUpsellInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'totalUpsellCharge': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalUpsellCharge),
        'totalUpsellMoneyAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalUpsellMoneyAmount),
        'firstNightUpsellAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.firstNightUpsellAmount),
        'firstNightUpsellCharge': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.firstNightUpsellCharge),
        'totalUpsellPoints': value.totalUpsellPoints,
        'totalActualRateAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalActualRateAmount),
        'roomType': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.roomType),
        'roomLongDescription': value.roomLongDescription,
        'ruleId': value.ruleId,
        'ruleCode': value.ruleCode,
        'ruleDescription': value.ruleDescription,
        'percentageSavings': value.percentageSavings,
        'upsellDate': value.upsellDate,
        'upsellUser': value.upsellUser,
    };
}
exports.UpsellInfoTypeUpsellInfoToJSON = UpsellInfoTypeUpsellInfoToJSON;
