"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserInfoTypeToJSON = exports.UserInfoTypeFromJSONTyped = exports.UserInfoTypeFromJSON = exports.instanceOfUserInfoType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the UserInfoType interface.
 */
function instanceOfUserInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUserInfoType = instanceOfUserInfoType;
function UserInfoTypeFromJSON(json) {
    return UserInfoTypeFromJSONTyped(json, false);
}
exports.UserInfoTypeFromJSON = UserInfoTypeFromJSON;
function UserInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'userId': !(0, runtime_1.exists)(json, 'userId') ? undefined : json['userId'],
        'userName': !(0, runtime_1.exists)(json, 'userName') ? undefined : json['userName'],
    };
}
exports.UserInfoTypeFromJSONTyped = UserInfoTypeFromJSONTyped;
function UserInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'userId': value.userId,
        'userName': value.userName,
    };
}
exports.UserInfoTypeToJSON = UserInfoTypeToJSON;
