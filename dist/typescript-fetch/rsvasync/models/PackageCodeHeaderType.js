"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageCodeHeaderTypeToJSON = exports.PackageCodeHeaderTypeFromJSONTyped = exports.PackageCodeHeaderTypeFromJSON = exports.instanceOfPackageCodeHeaderType = void 0;
const runtime_1 = require("../runtime");
const ConfigPackagePrimaryDetailsType_1 = require("./ConfigPackagePrimaryDetailsType");
const ConfigPackageTransactionType_1 = require("./ConfigPackageTransactionType");
const ConfigPackageUsageDetailType_1 = require("./ConfigPackageUsageDetailType");
const ConfigPostingAttributesType_1 = require("./ConfigPostingAttributesType");
/**
 * Check if a given object implements the PackageCodeHeaderType interface.
 */
function instanceOfPackageCodeHeaderType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPackageCodeHeaderType = instanceOfPackageCodeHeaderType;
function PackageCodeHeaderTypeFromJSON(json) {
    return PackageCodeHeaderTypeFromJSONTyped(json, false);
}
exports.PackageCodeHeaderTypeFromJSON = PackageCodeHeaderTypeFromJSON;
function PackageCodeHeaderTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'primaryDetails': !(0, runtime_1.exists)(json, 'primaryDetails') ? undefined : (0, ConfigPackagePrimaryDetailsType_1.ConfigPackagePrimaryDetailsTypeFromJSON)(json['primaryDetails']),
        'transactionDetails': !(0, runtime_1.exists)(json, 'transactionDetails') ? undefined : (0, ConfigPackageTransactionType_1.ConfigPackageTransactionTypeFromJSON)(json['transactionDetails']),
        'postingAttributes': !(0, runtime_1.exists)(json, 'postingAttributes') ? undefined : (0, ConfigPostingAttributesType_1.ConfigPostingAttributesTypeFromJSON)(json['postingAttributes']),
        'usageDetails': !(0, runtime_1.exists)(json, 'usageDetails') ? undefined : (0, ConfigPackageUsageDetailType_1.ConfigPackageUsageDetailTypeFromJSON)(json['usageDetails']),
    };
}
exports.PackageCodeHeaderTypeFromJSONTyped = PackageCodeHeaderTypeFromJSONTyped;
function PackageCodeHeaderTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'primaryDetails': (0, ConfigPackagePrimaryDetailsType_1.ConfigPackagePrimaryDetailsTypeToJSON)(value.primaryDetails),
        'transactionDetails': (0, ConfigPackageTransactionType_1.ConfigPackageTransactionTypeToJSON)(value.transactionDetails),
        'postingAttributes': (0, ConfigPostingAttributesType_1.ConfigPostingAttributesTypeToJSON)(value.postingAttributes),
        'usageDetails': (0, ConfigPackageUsageDetailType_1.ConfigPackageUsageDetailTypeToJSON)(value.usageDetails),
    };
}
exports.PackageCodeHeaderTypeToJSON = PackageCodeHeaderTypeToJSON;
