/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Statistic information related to a specific reservation stay date.
 * @export
 * @interface DailySummaryType
 */
export interface DailySummaryType {
    /**
     * Number of adults of the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    adults?: number;
    /**
     * Booked room type.
     * @type {string}
     * @memberof DailySummaryType
     */
    bookedRoomType?: string;
    /**
     * Classifies the Channel field on reservation screen through which the reservation is made.
     * @type {string}
     * @memberof DailySummaryType
     */
    channel?: string;
    /**
     * Number of children of the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    children?: number;
    /**
     * Food and Beverage Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    fbRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    fbRevenueCurrency?: string;
    /**
     * Holds the code that relates to the market being sold (e.g., the corporate market, packages).
     * @type {string}
     * @memberof DailySummaryType
     */
    marketCode?: string;
    /**
     * Net Amount generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    netRateAmount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    netRateAmountCurrency?: string;
    /**
     * Other Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    otherRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    otherRevenueCurrency?: string;
    /**
     * Package Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    packageRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    packageRevenueCurrency?: string;
    /**
     * A monetary amount.
     * @type {number}
     * @memberof DailySummaryType
     */
    rateAmount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    rateAmountCurrency?: string;
    /**
     * The rate plan code of the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    rateCode?: string;
    /**
     * Room number.
     * @type {string}
     * @memberof DailySummaryType
     */
    room?: string;
    /**
     * Room Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    roomRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomRevenueCurrency?: string;
    /**
     * Room type.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomType?: string;
    /**
     * Room type charged for the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomTypeCharged?: string;
    /**
     * The entity/channel who made the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    sourceCode?: string;
    /**
     * Tax Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    tax?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    taxCurrency?: string;
    /**
     * Total Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    totalRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    totalRevenueCurrency?: string;
    /**
     * Reservation stay date for which the daily statistics are projected.
     * @type {string}
     * @memberof DailySummaryType
     */
    trxDate?: string;
}
/**
 * Check if a given object implements the DailySummaryType interface.
 */
export declare function instanceOfDailySummaryType(value: object): boolean;
export declare function DailySummaryTypeFromJSON(json: any): DailySummaryType;
export declare function DailySummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DailySummaryType;
export declare function DailySummaryTypeToJSON(value?: DailySummaryType | null): any;
