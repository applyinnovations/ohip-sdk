/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AmountDeterminationType } from './AmountDeterminationType';
/**
 * Applicable tax element. This element allows for both percentages and flat amounts. If one field is used, the other should be zero since logically, taxes should be calculated in only one of the two ways.
 * @export
 * @interface TaxType
 */
export interface TaxType {
    /**
     *
     * @type {string}
     * @memberof TaxType
     */
    description?: string;
    /**
     *
     * @type {AmountDeterminationType}
     * @memberof TaxType
     */
    type?: AmountDeterminationType;
    /**
     * Code identifying the fee (e.g.,agency fee, municipality fee).
     * @type {string}
     * @memberof TaxType
     */
    code?: string;
    /**
     * A monetary amount.
     * @type {number}
     * @memberof TaxType
     */
    amount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof TaxType
     */
    currencyCode?: string;
}
/**
 * Check if a given object implements the TaxType interface.
 */
export declare function instanceOfTaxType(value: object): boolean;
export declare function TaxTypeFromJSON(json: any): TaxType;
export declare function TaxTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxType;
export declare function TaxTypeToJSON(value?: TaxType | null): any;
