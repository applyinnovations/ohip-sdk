"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingInfoTypeToJSON = exports.RoutingInfoTypeFromJSONTyped = exports.RoutingInfoTypeFromJSON = exports.instanceOfRoutingInfoType = void 0;
const runtime_1 = require("../runtime");
const RoutingInfoTypeComp_1 = require("./RoutingInfoTypeComp");
const RoutingInfoTypeFolio_1 = require("./RoutingInfoTypeFolio");
const RoutingInfoTypeRequest_1 = require("./RoutingInfoTypeRequest");
const RoutingInfoTypeRoom_1 = require("./RoutingInfoTypeRoom");
/**
 * Check if a given object implements the RoutingInfoType interface.
 */
function instanceOfRoutingInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoutingInfoType = instanceOfRoutingInfoType;
function RoutingInfoTypeFromJSON(json) {
    return RoutingInfoTypeFromJSONTyped(json, false);
}
exports.RoutingInfoTypeFromJSON = RoutingInfoTypeFromJSON;
function RoutingInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'folio': !(0, runtime_1.exists)(json, 'folio') ? undefined : (0, RoutingInfoTypeFolio_1.RoutingInfoTypeFolioFromJSON)(json['folio']),
        'room': !(0, runtime_1.exists)(json, 'room') ? undefined : (0, RoutingInfoTypeRoom_1.RoutingInfoTypeRoomFromJSON)(json['room']),
        'comp': !(0, runtime_1.exists)(json, 'comp') ? undefined : (0, RoutingInfoTypeComp_1.RoutingInfoTypeCompFromJSON)(json['comp']),
        'request': !(0, runtime_1.exists)(json, 'request') ? undefined : (0, RoutingInfoTypeRequest_1.RoutingInfoTypeRequestFromJSON)(json['request']),
        'refreshFolio': !(0, runtime_1.exists)(json, 'refreshFolio') ? undefined : json['refreshFolio'],
    };
}
exports.RoutingInfoTypeFromJSONTyped = RoutingInfoTypeFromJSONTyped;
function RoutingInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'folio': (0, RoutingInfoTypeFolio_1.RoutingInfoTypeFolioToJSON)(value.folio),
        'room': (0, RoutingInfoTypeRoom_1.RoutingInfoTypeRoomToJSON)(value.room),
        'comp': (0, RoutingInfoTypeComp_1.RoutingInfoTypeCompToJSON)(value.comp),
        'request': (0, RoutingInfoTypeRequest_1.RoutingInfoTypeRequestToJSON)(value.request),
        'refreshFolio': value.refreshFolio,
    };
}
exports.RoutingInfoTypeToJSON = RoutingInfoTypeToJSON;
