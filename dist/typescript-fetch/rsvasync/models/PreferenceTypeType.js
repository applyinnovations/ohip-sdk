"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceTypeTypeToJSON = exports.PreferenceTypeTypeFromJSONTyped = exports.PreferenceTypeTypeFromJSON = exports.instanceOfPreferenceTypeType = void 0;
const runtime_1 = require("../runtime");
const PreferenceType_1 = require("./PreferenceType");
/**
 * Check if a given object implements the PreferenceTypeType interface.
 */
function instanceOfPreferenceTypeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPreferenceTypeType = instanceOfPreferenceTypeType;
function PreferenceTypeTypeFromJSON(json) {
    return PreferenceTypeTypeFromJSONTyped(json, false);
}
exports.PreferenceTypeTypeFromJSON = PreferenceTypeTypeFromJSON;
function PreferenceTypeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'preference': !(0, runtime_1.exists)(json, 'preference') ? undefined : (json['preference'].map(PreferenceType_1.PreferenceTypeFromJSON)),
        'preferenceType': !(0, runtime_1.exists)(json, 'preferenceType') ? undefined : json['preferenceType'],
        'preferenceTypeDescription': !(0, runtime_1.exists)(json, 'preferenceTypeDescription') ? undefined : json['preferenceTypeDescription'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'maxQuantity': !(0, runtime_1.exists)(json, 'maxQuantity') ? undefined : json['maxQuantity'],
        'availableQuantity': !(0, runtime_1.exists)(json, 'availableQuantity') ? undefined : json['availableQuantity'],
        'maxResortUsedQuantity': !(0, runtime_1.exists)(json, 'maxResortUsedQuantity') ? undefined : json['maxResortUsedQuantity'],
        'reservationPreference': !(0, runtime_1.exists)(json, 'reservationPreference') ? undefined : json['reservationPreference'],
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'purgeDate': !(0, runtime_1.exists)(json, 'purgeDate') ? undefined : json['purgeDate'],
    };
}
exports.PreferenceTypeTypeFromJSONTyped = PreferenceTypeTypeFromJSONTyped;
function PreferenceTypeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'preference': value.preference === undefined ? undefined : (value.preference.map(PreferenceType_1.PreferenceTypeToJSON)),
        'preferenceType': value.preferenceType,
        'preferenceTypeDescription': value.preferenceTypeDescription,
        'sequence': value.sequence,
        'maxQuantity': value.maxQuantity,
        'availableQuantity': value.availableQuantity,
        'maxResortUsedQuantity': value.maxResortUsedQuantity,
        'reservationPreference': value.reservationPreference,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'purgeDate': value.purgeDate,
    };
}
exports.PreferenceTypeTypeToJSON = PreferenceTypeTypeToJSON;
