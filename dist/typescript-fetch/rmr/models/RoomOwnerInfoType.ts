/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Room Owners with Room Ownership details.
 * @export
 * @interface RoomOwnerInfoType
 */
export interface RoomOwnerInfoType {
    /**
     * Contract number for Room Ownership record.
     * @type {string}
     * @memberof RoomOwnerInfoType
     */
    contractNumber?: string;
    /**
     * End Date of the Room Ownership record.
     * @type {Date}
     * @memberof RoomOwnerInfoType
     */
    endDate?: Date;
    /**
     * Hotel Code of Room Ownership record.
     * @type {string}
     * @memberof RoomOwnerInfoType
     */
    hotelId?: string;
    /**
     * Indicates if the Room Owner is inactive.
     * @type {boolean}
     * @memberof RoomOwnerInfoType
     */
    inactive?: boolean;
    /**
     * Display Name for the Room Owner.
     * @type {string}
     * @memberof RoomOwnerInfoType
     */
    ownerDisplayName?: string;
    /**
     * Indicates whether Room is available for the exclusive use of its designated owner and owner referrals, or if it is available in general availability.
     * @type {boolean}
     * @memberof RoomOwnerInfoType
     */
    ownerExclusive?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomOwnerInfoType
     */
    profileId?: UniqueIDType;
    /**
     * Room Id of Room Ownership record.
     * @type {string}
     * @memberof RoomOwnerInfoType
     */
    roomId?: string;
    /**
     * Unique Id for Room Ownership record.
     * @type {number}
     * @memberof RoomOwnerInfoType
     */
    roomOwnershipId?: number;
    /**
     * Room Type of the Room Ownership record.
     * @type {string}
     * @memberof RoomOwnerInfoType
     */
    roomType?: string;
    /**
     * Start Date of the Room Ownership record.
     * @type {Date}
     * @memberof RoomOwnerInfoType
     */
    startDate?: Date;
}

/**
 * Check if a given object implements the RoomOwnerInfoType interface.
 */
export function instanceOfRoomOwnerInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomOwnerInfoTypeFromJSON(json: any): RoomOwnerInfoType {
    return RoomOwnerInfoTypeFromJSONTyped(json, false);
}

export function RoomOwnerInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomOwnerInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contractNumber': !exists(json, 'contractNumber') ? undefined : json['contractNumber'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'ownerDisplayName': !exists(json, 'ownerDisplayName') ? undefined : json['ownerDisplayName'],
        'ownerExclusive': !exists(json, 'ownerExclusive') ? undefined : json['ownerExclusive'],
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomOwnershipId': !exists(json, 'roomOwnershipId') ? undefined : json['roomOwnershipId'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
    };
}

export function RoomOwnerInfoTypeToJSON(value?: RoomOwnerInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contractNumber': value.contractNumber,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'ownerDisplayName': value.ownerDisplayName,
        'ownerExclusive': value.ownerExclusive,
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'roomId': value.roomId,
        'roomOwnershipId': value.roomOwnershipId,
        'roomType': value.roomType,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
    };
}

