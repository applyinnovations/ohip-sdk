/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociatedRoomOwnershipListDetails,
  ExceptionDetailType,
  GetReservationRotationPoints,
  GetReservationRotationPointsDetails,
  GetRoomRotationPoints,
  PutReservationRotationPointsDetails,
  RoomOwnersListDetails,
  RoomRotationPointsAdjustment,
  Status,
} from '../models';
import {
    AssociatedRoomOwnershipListDetailsFromJSON,
    AssociatedRoomOwnershipListDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GetReservationRotationPointsFromJSON,
    GetReservationRotationPointsToJSON,
    GetReservationRotationPointsDetailsFromJSON,
    GetReservationRotationPointsDetailsToJSON,
    GetRoomRotationPointsFromJSON,
    GetRoomRotationPointsToJSON,
    PutReservationRotationPointsDetailsFromJSON,
    PutReservationRotationPointsDetailsToJSON,
    RoomOwnersListDetailsFromJSON,
    RoomOwnersListDetailsToJSON,
    RoomRotationPointsAdjustmentFromJSON,
    RoomRotationPointsAdjustmentToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface GetReservationRotationPointsRequest {
    hotelId?: string;
    departureStartDate?: Date;
    departureEndDate?: Date;
    roomIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    confirmationNumber?: string;
    surname?: string;
    givenName?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationRotationPointsDetailsRequest {
    hotelId?: string;
    reservationId?: string;
    roomId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeAdjustmentLog?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomOwnersRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    surname?: string;
    givenName?: string;
    startDateFrom?: Date;
    startDateTo?: Date;
    endDateFrom?: Date;
    endDateTo?: Date;
    roomClasses?: Array<string>;
    roomTypes?: Array<string>;
    roomIds?: Array<string>;
    contractNumber?: string;
    includeInactive?: boolean;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomOwnershipsRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    includeReferral?: boolean;
    includeAvailableRoomsOnly?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRotationPointsRequest {
    hotelId?: string;
    roomRotationPointsDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomClasses?: Array<string>;
    roomTypes?: Array<string>;
    roomIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationRotationPointsDetailsRequest {
    hotelId?: string;
    reservationId?: string;
    roomId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationRotationPoints?: PutReservationRotationPointsDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomRotationPointsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRotationPointsAdjustment?: RoomRotationPointsAdjustment;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RoomRotationApi extends runtime.BaseAPI {

    /**
     * This API will allow a user to retrieve list of reservations and the number of rotation points associated with a given reservation for requested hotel, departure start date, departure end date, and room numbers. <p><strong>OperationId:</strong>getReservationRotationPoints</p>
     * Get list of reservations and the associated rotations points
     */
    async getReservationRotationPointsRaw(requestParameters: GetReservationRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReservationRotationPoints>> {
        const queryParameters: any = {};

        if (requestParameters.roomIds) {
            queryParameters['roomIds'] = requestParameters.roomIds;
        }

        if (requestParameters.confirmationNumber !== undefined) {
            queryParameters['confirmationNumber'] = requestParameters.confirmationNumber;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/departureStartDate/{departureStartDate}/departureEndDate/{departureEndDate}/reservationRotationPoints`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"departureStartDate"}}`, encodeURIComponent(String(requestParameters.departureStartDate))).replace(`{${"departureEndDate"}}`, encodeURIComponent(String(requestParameters.departureEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReservationRotationPointsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve list of reservations and the number of rotation points associated with a given reservation for requested hotel, departure start date, departure end date, and room numbers. <p><strong>OperationId:</strong>getReservationRotationPoints</p>
     * Get list of reservations and the associated rotations points
     */
    async getReservationRotationPoints(requestParameters: GetReservationRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReservationRotationPoints> {
        const response = await this.getReservationRotationPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to retrieve list of rotation points details along with adjustment log for requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>getReservationRotationPointsDetails</p>
     * Get list of rotation points details associated with a reservation with adjustment log.
     */
    async getReservationRotationPointsDetailsRaw(requestParameters: GetReservationRotationPointsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReservationRotationPointsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeAdjustmentLog !== undefined) {
            queryParameters['includeAdjustmentLog'] = requestParameters.includeAdjustmentLog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/reservationRotationPointsDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReservationRotationPointsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve list of rotation points details along with adjustment log for requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>getReservationRotationPointsDetails</p>
     * Get list of rotation points details associated with a reservation with adjustment log.
     */
    async getReservationRotationPointsDetails(requestParameters: GetReservationRotationPointsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReservationRotationPointsDetails> {
        const response = await this.getReservationRotationPointsDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Room Ownership details for specific room(s) or owners. Hotel Id(s) and at least one other search criteria is required. <p><strong>OperationId:</strong>getRoomOwners</p>
     * Get Room Owners Details
     */
    async getRoomOwnersRaw(requestParameters: GetRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnersListDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.startDateFrom !== undefined) {
            queryParameters['startDateFrom'] = (requestParameters.startDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDateTo !== undefined) {
            queryParameters['startDateTo'] = (requestParameters.startDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDateFrom !== undefined) {
            queryParameters['endDateFrom'] = (requestParameters.endDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDateTo !== undefined) {
            queryParameters['endDateTo'] = (requestParameters.endDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomIds) {
            queryParameters['roomIds'] = requestParameters.roomIds;
        }

        if (requestParameters.contractNumber !== undefined) {
            queryParameters['contractNumber'] = requestParameters.contractNumber;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnersListDetailsFromJSON(jsonValue));
    }

    /**
     * Get Room Ownership details for specific room(s) or owners. Hotel Id(s) and at least one other search criteria is required. <p><strong>OperationId:</strong>getRoomOwners</p>
     * Get Room Owners Details
     */
    async getRoomOwners(requestParameters: GetRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnersListDetails> {
        const response = await this.getRoomOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch profile Rooms with Room Ownership or Owner Referral records associated. <p><strong>OperationId:</strong>getRoomOwnerships</p>
     * Get Profile Room Owners Details
     */
    async getRoomOwnershipsRaw(requestParameters: GetRoomOwnershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociatedRoomOwnershipListDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeReferral !== undefined) {
            queryParameters['includeReferral'] = requestParameters.includeReferral;
        }

        if (requestParameters.includeAvailableRoomsOnly !== undefined) {
            queryParameters['includeAvailableRoomsOnly'] = requestParameters.includeAvailableRoomsOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerships`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociatedRoomOwnershipListDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch profile Rooms with Room Ownership or Owner Referral records associated. <p><strong>OperationId:</strong>getRoomOwnerships</p>
     * Get Profile Room Owners Details
     */
    async getRoomOwnerships(requestParameters: GetRoomOwnershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociatedRoomOwnershipListDetails> {
        const response = await this.getRoomOwnershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch the individual units\' rotation points.<p><strong>OperationId:</strong>getRoomRotationPoints</p>
     * Get Room Rotation Points
     */
    async getRoomRotationPointsRaw(requestParameters: GetRoomRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoomRotationPoints>> {
        const queryParameters: any = {};

        if (requestParameters.roomRotationPointsDate !== undefined) {
            queryParameters['roomRotationPointsDate'] = (requestParameters.roomRotationPointsDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomIds) {
            queryParameters['roomIds'] = requestParameters.roomIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomRotationPoints`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoomRotationPointsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the individual units\' rotation points.<p><strong>OperationId:</strong>getRoomRotationPoints</p>
     * Get Room Rotation Points
     */
    async getRoomRotationPoints(requestParameters: GetRoomRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoomRotationPoints> {
        const response = await this.getRoomRotationPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to modify rotation points for the requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>putReservationRotationPointsDetails</p>
     * Update Rotation Points Details associated with a reservation.
     */
    async putReservationRotationPointsDetailsRaw(requestParameters: PutReservationRotationPointsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/reservationRotationPointsDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationRotationPointsDetailsToJSON(requestParameters.reservationRotationPoints),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to modify rotation points for the requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>putReservationRotationPointsDetails</p>
     * Update Rotation Points Details associated with a reservation.
     */
    async putReservationRotationPointsDetails(requestParameters: PutReservationRotationPointsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putReservationRotationPointsDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this operation to update balance forward and adjusted points of individual rooms. <p><strong>OperationId:</strong>putRoomRotationPoints</p>
     * Update Rotation Points by Room Numbers
     */
    async putRoomRotationPointsRaw(requestParameters: PutRoomRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomRotationPoints`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomRotationPointsAdjustmentToJSON(requestParameters.roomRotationPointsAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this operation to update balance forward and adjusted points of individual rooms. <p><strong>OperationId:</strong>putRoomRotationPoints</p>
     * Update Rotation Points by Room Numbers
     */
    async putRoomRotationPoints(requestParameters: PutRoomRotationPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomRotationPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
