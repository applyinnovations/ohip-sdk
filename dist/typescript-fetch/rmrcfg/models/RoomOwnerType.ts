/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Room owner record fields
 * @export
 * @interface RoomOwnerType
 */
export interface RoomOwnerType {
    /**
     * Hotel Code of Room owner.
     * @type {string}
     * @memberof RoomOwnerType
     */
    hotelId?: string;
    /**
     * Contract number for room owner.
     * @type {string}
     * @memberof RoomOwnerType
     */
    contractNumber?: string;
    /**
     * Unit for room owner.
     * @type {string}
     * @memberof RoomOwnerType
     */
    unit?: string;
    /**
     * Room Category of the room ownership record.
     * @type {string}
     * @memberof RoomOwnerType
     */
    roomCategory?: string;
    /**
     * Start Date of the room ownership record.
     * @type {Date}
     * @memberof RoomOwnerType
     */
    startDate?: Date;
    /**
     * End Date of the room ownership record.
     * @type {Date}
     * @memberof RoomOwnerType
     */
    endDate?: Date;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomOwnerType
     */
    profileId?: UniqueIDType;
    /**
     * Status of the room ownership record.
     * @type {string}
     * @memberof RoomOwnerType
     */
    status?: string;
}

/**
 * Check if a given object implements the RoomOwnerType interface.
 */
export function instanceOfRoomOwnerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomOwnerTypeFromJSON(json: any): RoomOwnerType {
    return RoomOwnerTypeFromJSONTyped(json, false);
}

export function RoomOwnerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomOwnerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'contractNumber': !exists(json, 'contractNumber') ? undefined : json['contractNumber'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
        'roomCategory': !exists(json, 'roomCategory') ? undefined : json['roomCategory'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function RoomOwnerTypeToJSON(value?: RoomOwnerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'contractNumber': value.contractNumber,
        'unit': value.unit,
        'roomCategory': value.roomCategory,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'status': value.status,
    };
}

