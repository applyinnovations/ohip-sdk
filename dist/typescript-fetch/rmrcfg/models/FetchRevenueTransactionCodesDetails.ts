/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RotationRevenueTransactionCodeType } from './RotationRevenueTransactionCodeType';
import {
    RotationRevenueTransactionCodeTypeFromJSON,
    RotationRevenueTransactionCodeTypeFromJSONTyped,
    RotationRevenueTransactionCodeTypeToJSON,
} from './RotationRevenueTransactionCodeType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for retrieving revenue transaction codes for a given property
 * @export
 * @interface FetchRevenueTransactionCodesDetails
 */
export interface FetchRevenueTransactionCodesDetails {
    /**
     * A revenue transaction code.
     * @type {Array<RotationRevenueTransactionCodeType>}
     * @memberof FetchRevenueTransactionCodesDetails
     */
    revenueTransactionCodes?: Array<RotationRevenueTransactionCodeType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FetchRevenueTransactionCodesDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FetchRevenueTransactionCodesDetails interface.
 */
export function instanceOfFetchRevenueTransactionCodesDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchRevenueTransactionCodesDetailsFromJSON(json: any): FetchRevenueTransactionCodesDetails {
    return FetchRevenueTransactionCodesDetailsFromJSONTyped(json, false);
}

export function FetchRevenueTransactionCodesDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchRevenueTransactionCodesDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'revenueTransactionCodes': !exists(json, 'revenueTransactionCodes') ? undefined : ((json['revenueTransactionCodes'] as Array<any>).map(RotationRevenueTransactionCodeTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FetchRevenueTransactionCodesDetailsToJSON(value?: FetchRevenueTransactionCodesDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'revenueTransactionCodes': value.revenueTransactionCodes === undefined ? undefined : ((value.revenueTransactionCodes as Array<any>).map(RotationRevenueTransactionCodeTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

