/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * Defines Room Rotation Group Details.
 * @export
 * @interface RotationGroupType
 */
export interface RotationGroupType {
    /**
     * Hotel Code of Room Rotation Group.
     * @type {string}
     * @memberof RotationGroupType
     */
    hotelId?: string;
    /**
     * Room Rotation Group Code.
     * @type {string}
     * @memberof RotationGroupType
     */
    groupCode?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RotationGroupType
     */
    description?: TranslationTextType2000;
    /**
     * 
     * @type {Array<string>}
     * @memberof RotationGroupType
     */
    roomTypes?: Array<string>;
}

/**
 * Check if a given object implements the RotationGroupType interface.
 */
export function instanceOfRotationGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationGroupTypeFromJSON(json: any): RotationGroupType {
    return RotationGroupTypeFromJSONTyped(json, false);
}

export function RotationGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'groupCode': !exists(json, 'groupCode') ? undefined : json['groupCode'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'roomTypes': !exists(json, 'roomTypes') ? undefined : json['roomTypes'],
    };
}

export function RotationGroupTypeToJSON(value?: RotationGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'groupCode': value.groupCode,
        'description': TranslationTextType2000ToJSON(value.description),
        'roomTypes': value.roomTypes,
    };
}

