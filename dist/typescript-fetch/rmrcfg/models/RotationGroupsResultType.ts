/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MasterInfoType } from './MasterInfoType';
import {
    MasterInfoTypeFromJSON,
    MasterInfoTypeFromJSONTyped,
    MasterInfoTypeToJSON,
} from './MasterInfoType';
import type { RotationGroupType } from './RotationGroupType';
import {
    RotationGroupTypeFromJSON,
    RotationGroupTypeFromJSONTyped,
    RotationGroupTypeToJSON,
} from './RotationGroupType';

/**
 * Defines collection of Room Rotation Groups.
 * @export
 * @interface RotationGroupsResultType
 */
export interface RotationGroupsResultType {
    /**
     * 
     * @type {Array<RotationGroupType>}
     * @memberof RotationGroupsResultType
     */
    rotationGroup?: Array<RotationGroupType>;
    /**
     * Collection of Room Type Code Description.
     * @type {Array<MasterInfoType>}
     * @memberof RotationGroupsResultType
     */
    masterInfo?: Array<MasterInfoType>;
}

/**
 * Check if a given object implements the RotationGroupsResultType interface.
 */
export function instanceOfRotationGroupsResultType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationGroupsResultTypeFromJSON(json: any): RotationGroupsResultType {
    return RotationGroupsResultTypeFromJSONTyped(json, false);
}

export function RotationGroupsResultTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationGroupsResultType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rotationGroup': !exists(json, 'rotationGroup') ? undefined : ((json['rotationGroup'] as Array<any>).map(RotationGroupTypeFromJSON)),
        'masterInfo': !exists(json, 'masterInfo') ? undefined : ((json['masterInfo'] as Array<any>).map(MasterInfoTypeFromJSON)),
    };
}

export function RotationGroupsResultTypeToJSON(value?: RotationGroupsResultType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rotationGroup': value.rotationGroup === undefined ? undefined : ((value.rotationGroup as Array<any>).map(RotationGroupTypeToJSON)),
        'masterInfo': value.masterInfo === undefined ? undefined : ((value.masterInfo as Array<any>).map(MasterInfoTypeToJSON)),
    };
}

