/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RotationRulesType } from './RotationRulesType';
import {
    RotationRulesTypeFromJSON,
    RotationRulesTypeFromJSONTyped,
    RotationRulesTypeToJSON,
} from './RotationRulesType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PostRotationRulesRequest
 */
export interface PostRotationRulesRequest {
    /**
     * 
     * @type {RotationRulesType}
     * @memberof PostRotationRulesRequest
     */
    rotationRules?: RotationRulesType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PostRotationRulesRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PostRotationRulesRequest interface.
 */
export function instanceOfPostRotationRulesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostRotationRulesRequestFromJSON(json: any): PostRotationRulesRequest {
    return PostRotationRulesRequestFromJSONTyped(json, false);
}

export function PostRotationRulesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostRotationRulesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rotationRules': !exists(json, 'rotationRules') ? undefined : RotationRulesTypeFromJSON(json['rotationRules']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PostRotationRulesRequestToJSON(value?: PostRotationRulesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rotationRules': RotationRulesTypeToJSON(value.rotationRules),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

