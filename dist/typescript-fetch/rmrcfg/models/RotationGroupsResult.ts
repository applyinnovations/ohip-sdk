/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RotationGroupsResultType } from './RotationGroupsResultType';
import {
    RotationGroupsResultTypeFromJSON,
    RotationGroupsResultTypeFromJSONTyped,
    RotationGroupsResultTypeToJSON,
} from './RotationGroupsResultType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for fetching room rotation groups.
 * @export
 * @interface RotationGroupsResult
 */
export interface RotationGroupsResult {
    /**
     * 
     * @type {RotationGroupsResultType}
     * @memberof RotationGroupsResult
     */
    rotationGroups?: RotationGroupsResultType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RotationGroupsResult
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RotationGroupsResult
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RotationGroupsResult interface.
 */
export function instanceOfRotationGroupsResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationGroupsResultFromJSON(json: any): RotationGroupsResult {
    return RotationGroupsResultFromJSONTyped(json, false);
}

export function RotationGroupsResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationGroupsResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rotationGroups': !exists(json, 'rotationGroups') ? undefined : RotationGroupsResultTypeFromJSON(json['rotationGroups']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RotationGroupsResultToJSON(value?: RotationGroupsResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rotationGroups': RotationGroupsResultTypeToJSON(value.rotationGroups),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

