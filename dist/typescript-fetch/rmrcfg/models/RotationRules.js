"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RotationRulesToJSON = exports.RotationRulesFromJSONTyped = exports.RotationRulesFromJSON = exports.instanceOfRotationRules = void 0;
const runtime_1 = require("../runtime");
const RotationRulesType_1 = require("./RotationRulesType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the RotationRules interface.
 */
function instanceOfRotationRules(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRotationRules = instanceOfRotationRules;
function RotationRulesFromJSON(json) {
    return RotationRulesFromJSONTyped(json, false);
}
exports.RotationRulesFromJSON = RotationRulesFromJSON;
function RotationRulesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'rotationRules': !(0, runtime_1.exists)(json, 'rotationRules') ? undefined : (0, RotationRulesType_1.RotationRulesTypeFromJSON)(json['rotationRules']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.RotationRulesFromJSONTyped = RotationRulesFromJSONTyped;
function RotationRulesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'rotationRules': (0, RotationRulesType_1.RotationRulesTypeToJSON)(value.rotationRules),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.RotationRulesToJSON = RotationRulesToJSON;
