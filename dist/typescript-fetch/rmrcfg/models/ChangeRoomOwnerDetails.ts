/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomOwnerType } from './RoomOwnerType';
import {
    RoomOwnerTypeFromJSON,
    RoomOwnerTypeFromJSONTyped,
    RoomOwnerTypeToJSON,
} from './RoomOwnerType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for changing room owner.
 * @export
 * @interface ChangeRoomOwnerDetails
 */
export interface ChangeRoomOwnerDetails {
    /**
     * Contract ID of the room owner record.
     * @type {number}
     * @memberof ChangeRoomOwnerDetails
     */
    contractId?: number;
    /**
     * 
     * @type {RoomOwnerType}
     * @memberof ChangeRoomOwnerDetails
     */
    roomOwner?: RoomOwnerType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ChangeRoomOwnerDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ChangeRoomOwnerDetails interface.
 */
export function instanceOfChangeRoomOwnerDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeRoomOwnerDetailsFromJSON(json: any): ChangeRoomOwnerDetails {
    return ChangeRoomOwnerDetailsFromJSONTyped(json, false);
}

export function ChangeRoomOwnerDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeRoomOwnerDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contractId': !exists(json, 'contractId') ? undefined : json['contractId'],
        'roomOwner': !exists(json, 'roomOwner') ? undefined : RoomOwnerTypeFromJSON(json['roomOwner']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ChangeRoomOwnerDetailsToJSON(value?: ChangeRoomOwnerDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contractId': value.contractId,
        'roomOwner': RoomOwnerTypeToJSON(value.roomOwner),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

