/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentReasonsDetailsUpdated,
  ChangeRevenueTransactionCodesDetails,
  ChangeRotationPeriodDetails,
  ExceptionDetailType,
  FetchAdjustmentReasonsDetails,
  FetchRevenueTransactionCodesDetails,
  FetchRotationPeriodResponse,
  FetchRotationRulesResponse,
  FetchUnitGradesDetails,
  OverrideReasonsDetails,
  PingDetail,
  PostAdjustmentReasonsRequest,
  PostOverrideReasonsRequest,
  PostRoomOwnerRequest,
  PostRotationGroupsRequest,
  PostRotationRulesRequest,
  PostUnitGradesRequest,
  PutAdjustmentReasonsRequest,
  PutOverrideReasonsRequest,
  PutRevenueTransactionCodesRequest,
  PutRoomOwnerRequest,
  PutRotationPeriodRequest,
  PutUnitGradesRequest,
  RotationGroupsResult,
  Status,
  UnitGradesDetailsUpdated,
} from '../models';
import {
    AdjustmentReasonsDetailsUpdatedFromJSON,
    AdjustmentReasonsDetailsUpdatedToJSON,
    ChangeRevenueTransactionCodesDetailsFromJSON,
    ChangeRevenueTransactionCodesDetailsToJSON,
    ChangeRotationPeriodDetailsFromJSON,
    ChangeRotationPeriodDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchAdjustmentReasonsDetailsFromJSON,
    FetchAdjustmentReasonsDetailsToJSON,
    FetchRevenueTransactionCodesDetailsFromJSON,
    FetchRevenueTransactionCodesDetailsToJSON,
    FetchRotationPeriodResponseFromJSON,
    FetchRotationPeriodResponseToJSON,
    FetchRotationRulesResponseFromJSON,
    FetchRotationRulesResponseToJSON,
    FetchUnitGradesDetailsFromJSON,
    FetchUnitGradesDetailsToJSON,
    OverrideReasonsDetailsFromJSON,
    OverrideReasonsDetailsToJSON,
    PingDetailFromJSON,
    PingDetailToJSON,
    PostAdjustmentReasonsRequestFromJSON,
    PostAdjustmentReasonsRequestToJSON,
    PostOverrideReasonsRequestFromJSON,
    PostOverrideReasonsRequestToJSON,
    PostRoomOwnerRequestFromJSON,
    PostRoomOwnerRequestToJSON,
    PostRotationGroupsRequestFromJSON,
    PostRotationGroupsRequestToJSON,
    PostRotationRulesRequestFromJSON,
    PostRotationRulesRequestToJSON,
    PostUnitGradesRequestFromJSON,
    PostUnitGradesRequestToJSON,
    PutAdjustmentReasonsRequestFromJSON,
    PutAdjustmentReasonsRequestToJSON,
    PutOverrideReasonsRequestFromJSON,
    PutOverrideReasonsRequestToJSON,
    PutRevenueTransactionCodesRequestFromJSON,
    PutRevenueTransactionCodesRequestToJSON,
    PutRoomOwnerRequestFromJSON,
    PutRoomOwnerRequestToJSON,
    PutRotationPeriodRequestFromJSON,
    PutRotationPeriodRequestToJSON,
    PutUnitGradesRequestFromJSON,
    PutUnitGradesRequestToJSON,
    RotationGroupsResultFromJSON,
    RotationGroupsResultToJSON,
    StatusFromJSON,
    StatusToJSON,
    UnitGradesDetailsUpdatedFromJSON,
    UnitGradesDetailsUpdatedToJSON,
} from '../models';

export interface DeleteAdjustmentReasonsRequest {
    adjustmentReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteOverrideReasonsRequest {
    overrideReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomOwnerRequest {
    roomOwnerId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomRotationConfigServiceCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    operaClearInput?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRotationGroupsRequest {
    rotationGroupsId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRotationRulesRequest {
    ruleId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUnitGradesRequest {
    unitGradeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdjustmentReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTransactionCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRevenue?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    code?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationPeriodRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationRulesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    setupType?: GetRotationRulesSetupTypeEnum;
    inactiveRules?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUnitGradesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingRoomRotationConfigServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    operaPingInput?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdjustmentReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createAdjustmentReasonsDetails?: PostAdjustmentReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOverrideReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsCriteria?: PostOverrideReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomOwnerOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRoomOwnerDetails?: PostRoomOwnerRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRotationGroupsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationGroups?: PostRotationGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRotationRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules?: PostRotationRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUnitGradesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createUnitGradesDetails?: PostUnitGradesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAdjustmentReasonsOperationRequest {
    adjustmentReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeAdjustmentReasonsDetails?: PutAdjustmentReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutOverrideReasonsOperationRequest {
    overrideReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsToBeChanged?: PutOverrideReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueTransactionCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRevenueTransactionCodesCriteria?: PutRevenueTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomOwnerOperationRequest {
    roomOwnerId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRoomOwnerDetails?: PutRoomOwnerRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationGroupsRequest {
    rotationGroupsId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationGroups?: PostRotationGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationPeriodOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationPeriod?: PutRotationPeriodRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationRulesRequest {
    ruleId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules?: PostRotationRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUnitGradesOperationRequest {
    unitGradeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUnitGradesDetails?: PutUnitGradesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RoomRotationConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasonsRaw(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasons(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasonsRaw(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasons(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Owner. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Owner
     */
    async deleteRoomOwnerRaw(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/RoomOwner/{RoomOwnerId}`.replace(`{${"RoomOwnerId"}}`, encodeURIComponent(String(requestParameters.roomOwnerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Owner. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Owner
     */
    async deleteRoomOwner(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API facilitates clearing of cache in room rotation service <p><strong>OperationId:</strong>deleteRoomRotationConfigServiceCache</p>
     * Clear Cache
     */
    async deleteRoomRotationConfigServiceCacheRaw(requestParameters: DeleteRoomRotationConfigServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.operaClearInput !== undefined) {
            queryParameters['operaClearInput'] = requestParameters.operaClearInput;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/roomrotation/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API facilitates clearing of cache in room rotation service <p><strong>OperationId:</strong>deleteRoomRotationConfigServiceCache</p>
     * Clear Cache
     */
    async deleteRoomRotationConfigServiceCache(requestParameters: DeleteRoomRotationConfigServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomRotationConfigServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Rotation Group. <p><strong>OperationId:</strong>deleteRotationGroups</p>
     * Delete Room Rotation Groups
     */
    async deleteRotationGroupsRaw(requestParameters: DeleteRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationGroups/{rotationGroupsId}`.replace(`{${"rotationGroupsId"}}`, encodeURIComponent(String(requestParameters.rotationGroupsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Rotation Group. <p><strong>OperationId:</strong>deleteRotationGroups</p>
     * Delete Room Rotation Groups
     */
    async deleteRotationGroups(requestParameters: DeleteRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRotationGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Rule. <p><strong>OperationId:</strong>deleteRotationRules</p>
     * Delete an existing Room Rotation Rule
     */
    async deleteRotationRulesRaw(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Rule. <p><strong>OperationId:</strong>deleteRotationRules</p>
     * Delete an existing Room Rotation Rule
     */
    async deleteRotationRules(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Unit Grade
     */
    async deleteUnitGradesRaw(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Unit Grade
     */
    async deleteUnitGrades(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasonsRaw(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAdjustmentReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAdjustmentReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasons(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAdjustmentReasonsDetails> {
        const response = await this.getAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Rotation Override Reasons. <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasonsRaw(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverrideReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverrideReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Rotation Override Reasons. <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasons(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverrideReasonsDetails> {
        const response = await this.getOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodesRaw(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRevenueTransactionCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.rotationRevenue !== undefined) {
            queryParameters['rotationRevenue'] = requestParameters.rotationRevenue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodes(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRevenueTransactionCodesDetails> {
        const response = await this.getRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Rotation Groups. <p><strong>OperationId:</strong>getRotationGroups</p>
     * Get Room Rotation Groups
     */
    async getRotationGroupsRaw(requestParameters: GetRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RotationGroupsResult>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/rotationGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RotationGroupsResultFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Rotation Groups. <p><strong>OperationId:</strong>getRotationGroups</p>
     * Get Room Rotation Groups
     */
    async getRotationGroups(requestParameters: GetRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RotationGroupsResult> {
        const response = await this.getRotationGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriodRaw(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationPeriodResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationPeriodResponseFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriod(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationPeriodResponse> {
        const response = await this.getRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Rules
     */
    async getRotationRulesRaw(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationRulesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.setupType !== undefined) {
            queryParameters['setupType'] = requestParameters.setupType;
        }

        if (requestParameters.inactiveRules !== undefined) {
            queryParameters['inactiveRules'] = requestParameters.inactiveRules;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationRulesResponseFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Rules
     */
    async getRotationRules(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationRulesResponse> {
        const response = await this.getRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Rotation Unit Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Unit Grades
     */
    async getUnitGradesRaw(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchUnitGradesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchUnitGradesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Rotation Unit Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Unit Grades
     */
    async getUnitGrades(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchUnitGradesDetails> {
        const response = await this.getUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API facilitates status check of room rotation service <p><strong>OperationId:</strong>pingRoomRotationConfigService</p>
     * Ping
     */
    async pingRoomRotationConfigServiceRaw(requestParameters: PingRoomRotationConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PingDetail>> {
        const queryParameters: any = {};

        if (requestParameters.operaPingInput !== undefined) {
            queryParameters['operaPingInput'] = requestParameters.operaPingInput;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/roomrotation/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PingDetailFromJSON(jsonValue));
    }

    /**
     * This API facilitates status check of room rotation service <p><strong>OperationId:</strong>pingRoomRotationConfigService</p>
     * Ping
     */
    async pingRoomRotationConfigService(requestParameters: PingRoomRotationConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PingDetail> {
        const response = await this.pingRoomRotationConfigServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasonsRaw(requestParameters: PostAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdjustmentReasonsRequestToJSON(requestParameters.createAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasons(requestParameters: PostAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasonsRaw(requestParameters: PostOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOverrideReasonsRequestToJSON(requestParameters.overrideReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasons(requestParameters: PostOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Owner. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Owner
     */
    async postRoomOwnerRaw(requestParameters: PostRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomOwner`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomOwnerRequestToJSON(requestParameters.createRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Owner. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Owner
     */
    async postRoomOwner(requestParameters: PostRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Rotation Groups. <p><strong>OperationId:</strong>postRotationGroups</p>
     * Create Room Rotation Groups
     */
    async postRotationGroupsRaw(requestParameters: PostRotationGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationGroupsRequestToJSON(requestParameters.rotationGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Rotation Groups. <p><strong>OperationId:</strong>postRotationGroups</p>
     * Create Room Rotation Groups
     */
    async postRotationGroups(requestParameters: PostRotationGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRotationGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Rotation Rules. <p><strong>OperationId:</strong>postRotationRules</p>
     * Create Room Rotation Rules
     */
    async postRotationRulesRaw(requestParameters: PostRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationRulesRequestToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Rotation Rules. <p><strong>OperationId:</strong>postRotationRules</p>
     * Create Room Rotation Rules
     */
    async postRotationRules(requestParameters: PostRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Unit Grade. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Unit Grade
     */
    async postUnitGradesRaw(requestParameters: PostUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUnitGradesRequestToJSON(requestParameters.createUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Unit Grade. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Unit Grade
     */
    async postUnitGrades(requestParameters: PostUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasonsRaw(requestParameters: PutAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentReasonsDetailsUpdated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdjustmentReasonsRequestToJSON(requestParameters.changeAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentReasonsDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasons(requestParameters: PutAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentReasonsDetailsUpdated> {
        const response = await this.putAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasonsRaw(requestParameters: PutOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutOverrideReasonsRequestToJSON(requestParameters.overrideReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasons(requestParameters: PutOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodesRaw(requestParameters: PutRevenueTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRevenueTransactionCodesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRevenueTransactionCodesRequestToJSON(requestParameters.changeRevenueTransactionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodes(requestParameters: PutRevenueTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRevenueTransactionCodesDetails> {
        const response = await this.putRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Owner. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Owner
     */
    async putRoomOwnerRaw(requestParameters: PutRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/RoomOwner/{RoomOwnerId}`.replace(`{${"RoomOwnerId"}}`, encodeURIComponent(String(requestParameters.roomOwnerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomOwnerRequestToJSON(requestParameters.changeRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Owner. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Owner
     */
    async putRoomOwner(requestParameters: PutRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Group. <p><strong>OperationId:</strong>putRotationGroups</p>
     * Change Room Rotation Groups
     */
    async putRotationGroupsRaw(requestParameters: PutRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationGroups/{rotationGroupsId}`.replace(`{${"rotationGroupsId"}}`, encodeURIComponent(String(requestParameters.rotationGroupsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationGroupsRequestToJSON(requestParameters.rotationGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Group. <p><strong>OperationId:</strong>putRotationGroups</p>
     * Change Room Rotation Groups
     */
    async putRotationGroups(requestParameters: PutRotationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRotationGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriodRaw(requestParameters: PutRotationPeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRotationPeriodDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRotationPeriodRequestToJSON(requestParameters.rotationPeriod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRotationPeriodDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriod(requestParameters: PutRotationPeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRotationPeriodDetails> {
        const response = await this.putRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Rule. <p><strong>OperationId:</strong>putRotationRules</p>
     * Change Room Rotation Rules
     */
    async putRotationRulesRaw(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationRulesRequestToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Rule. <p><strong>OperationId:</strong>putRotationRules</p>
     * Change Room Rotation Rules
     */
    async putRotationRules(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Unit Grade
     */
    async putUnitGradesRaw(requestParameters: PutUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitGradesDetailsUpdated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutUnitGradesRequestToJSON(requestParameters.changeUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitGradesDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Unit Grade
     */
    async putUnitGrades(requestParameters: PutUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitGradesDetailsUpdated> {
        const response = await this.putUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRotationRulesSetupTypeEnum = {
    Points: 'Points',
    OwnerMultiplier: 'OwnerMultiplier',
    RoomStatusMultiplier: 'RoomStatusMultiplier'
} as const;
export type GetRotationRulesSetupTypeEnum = typeof GetRotationRulesSetupTypeEnum[keyof typeof GetRotationRulesSetupTypeEnum];
