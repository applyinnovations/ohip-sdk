/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentReasonsDetailsUpdated,
  ChangeRevenueTransactionCodesDetails,
  ChangeRotationPeriodDetails,
  ExceptionDetailType,
  FetchAdjustmentReasonsDetails,
  FetchRevenueTransactionCodesDetails,
  FetchRotationPeriod,
  FetchRotationRules,
  FetchUnitGradesDetails,
  OverrideReasonsDetails,
  PostAdjustmentReasonsRequest,
  PostOverrideReasonsRequest,
  PostRoomOwnerReferralsRequest,
  PostRoomOwnerRequest,
  PostRoomRotationRulesRequest,
  PostRotationRulesRequest,
  PostUnitGradesRequest,
  PutAdjustmentReasonsRequest,
  PutOverrideReasonsRequest,
  PutRevenueTransactionCodesRequest,
  PutRoomOwnerReferralRequest,
  PutRoomOwnerRequest,
  PutRotationPeriodRequest,
  PutUnitGradesRequest,
  RoomOwnerReferralDetails,
  RoomOwnershipDetails,
  Status,
  UnitGradesDetailsUpdated,
} from '../models';
import {
    AdjustmentReasonsDetailsUpdatedFromJSON,
    AdjustmentReasonsDetailsUpdatedToJSON,
    ChangeRevenueTransactionCodesDetailsFromJSON,
    ChangeRevenueTransactionCodesDetailsToJSON,
    ChangeRotationPeriodDetailsFromJSON,
    ChangeRotationPeriodDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchAdjustmentReasonsDetailsFromJSON,
    FetchAdjustmentReasonsDetailsToJSON,
    FetchRevenueTransactionCodesDetailsFromJSON,
    FetchRevenueTransactionCodesDetailsToJSON,
    FetchRotationPeriodFromJSON,
    FetchRotationPeriodToJSON,
    FetchRotationRulesFromJSON,
    FetchRotationRulesToJSON,
    FetchUnitGradesDetailsFromJSON,
    FetchUnitGradesDetailsToJSON,
    OverrideReasonsDetailsFromJSON,
    OverrideReasonsDetailsToJSON,
    PostAdjustmentReasonsRequestFromJSON,
    PostAdjustmentReasonsRequestToJSON,
    PostOverrideReasonsRequestFromJSON,
    PostOverrideReasonsRequestToJSON,
    PostRoomOwnerReferralsRequestFromJSON,
    PostRoomOwnerReferralsRequestToJSON,
    PostRoomOwnerRequestFromJSON,
    PostRoomOwnerRequestToJSON,
    PostRoomRotationRulesRequestFromJSON,
    PostRoomRotationRulesRequestToJSON,
    PostRotationRulesRequestFromJSON,
    PostRotationRulesRequestToJSON,
    PostUnitGradesRequestFromJSON,
    PostUnitGradesRequestToJSON,
    PutAdjustmentReasonsRequestFromJSON,
    PutAdjustmentReasonsRequestToJSON,
    PutOverrideReasonsRequestFromJSON,
    PutOverrideReasonsRequestToJSON,
    PutRevenueTransactionCodesRequestFromJSON,
    PutRevenueTransactionCodesRequestToJSON,
    PutRoomOwnerReferralRequestFromJSON,
    PutRoomOwnerReferralRequestToJSON,
    PutRoomOwnerRequestFromJSON,
    PutRoomOwnerRequestToJSON,
    PutRotationPeriodRequestFromJSON,
    PutRotationPeriodRequestToJSON,
    PutUnitGradesRequestFromJSON,
    PutUnitGradesRequestToJSON,
    RoomOwnerReferralDetailsFromJSON,
    RoomOwnerReferralDetailsToJSON,
    RoomOwnershipDetailsFromJSON,
    RoomOwnershipDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    UnitGradesDetailsUpdatedFromJSON,
    UnitGradesDetailsUpdatedToJSON,
} from '../models';

export interface DeleteAdjustmentReasonsRequest {
    adjustmentReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteOverrideReasonsRequest {
    overrideReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomOwnerRequest {
    roomOwnershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReferralCheck?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomOwnerReferralRequest {
    profileId?: string;
    roomOwnerReferralId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRotationRulesRequest {
    ruleId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUnitGradesRequest {
    unitGradeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdjustmentReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRoomOwnersRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    showInactiveRoomOwners?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTransactionCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRevenue?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomOwnerReferralsRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationPeriodRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationRulesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    setupType?: GetRotationRulesSetupTypeEnum;
    inactiveRules?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUnitGradesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdjustmentReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createAdjustmentReasonsDetails?: PostAdjustmentReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOverrideReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsCriteria?: PostOverrideReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomOwnerOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRoomOwnerDetails?: PostRoomOwnerRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomOwnerReferralsOperationRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRoomOwnerReferralDetails?: PostRoomOwnerReferralsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomRotationRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules?: PostRoomRotationRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRotationRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules?: PostRotationRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUnitGradesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createUnitGradesDetails?: PostUnitGradesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAdjustmentReasonsOperationRequest {
    adjustmentReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeAdjustmentReasonsDetails?: PutAdjustmentReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutOverrideReasonsOperationRequest {
    overrideReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsToBeChanged?: PutOverrideReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueTransactionCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRevenueTransactionCodesCriteria?: PutRevenueTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomOwnerOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRoomOwnerDetails?: PutRoomOwnerRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomOwnerReferralOperationRequest {
    profileId?: string;
    roomOwnerReferralId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRoomOwnerReferralDetails?: PutRoomOwnerReferralRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationPeriodOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationPeriod?: PutRotationPeriodRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationRulesRequest {
    ruleId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules?: PostRotationRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUnitGradesOperationRequest {
    unitGradeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUnitGradesDetails?: PutUnitGradesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RoomRotationConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasonsRaw(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasons(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasonsRaw(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasons(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    async deleteRoomOwnerRaw(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.overrideReferralCheck !== undefined) {
            queryParameters['overrideReferralCheck'] = requestParameters.overrideReferralCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners/{roomOwnershipId}`.replace(`{${"roomOwnershipId"}}`, encodeURIComponent(String(requestParameters.roomOwnershipId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    async deleteRoomOwner(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    async deleteRoomOwnerReferralRaw(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"roomOwnerReferralId"}}`, encodeURIComponent(String(requestParameters.roomOwnerReferralId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    async deleteRoomOwnerReferral(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomOwnerReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     */
    async deleteRotationRulesRaw(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     */
    async deleteRotationRules(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    async deleteUnitGradesRaw(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    async deleteUnitGrades(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasonsRaw(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAdjustmentReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAdjustmentReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasons(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAdjustmentReasonsDetails> {
        const response = await this.getAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasonsRaw(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverrideReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverrideReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasons(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverrideReasonsDetails> {
        const response = await this.getOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    async getProfileRoomOwnersRaw(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        const queryParameters: any = {};

        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwners`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    async getProfileRoomOwners(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.getProfileRoomOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodesRaw(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRevenueTransactionCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.rotationRevenue !== undefined) {
            queryParameters['rotationRevenue'] = requestParameters.rotationRevenue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodes(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRevenueTransactionCodesDetails> {
        const response = await this.getRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    async getRoomOwnerReferralsRaw(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnerReferralDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnerReferralDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    async getRoomOwnerReferrals(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnerReferralDetails> {
        const response = await this.getRoomOwnerReferralsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriodRaw(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationPeriod>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationPeriodFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriod(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationPeriod> {
        const response = await this.getRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    async getRotationRulesRaw(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationRules>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.setupType !== undefined) {
            queryParameters['setupType'] = requestParameters.setupType;
        }

        if (requestParameters.inactiveRules !== undefined) {
            queryParameters['inactiveRules'] = requestParameters.inactiveRules;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationRulesFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    async getRotationRules(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationRules> {
        const response = await this.getRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    async getUnitGradesRaw(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchUnitGradesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchUnitGradesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    async getUnitGrades(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchUnitGradesDetails> {
        const response = await this.getUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasonsRaw(requestParameters: PostAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdjustmentReasonsRequestToJSON(requestParameters.createAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasons(requestParameters: PostAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasonsRaw(requestParameters: PostOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOverrideReasonsRequestToJSON(requestParameters.overrideReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasons(requestParameters: PostOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    async postRoomOwnerRaw(requestParameters: PostRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomOwnerRequestToJSON(requestParameters.createRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    async postRoomOwner(requestParameters: PostRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.postRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    async postRoomOwnerReferralsRaw(requestParameters: PostRoomOwnerReferralsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomOwnerReferralsRequestToJSON(requestParameters.createRoomOwnerReferralDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    async postRoomOwnerReferrals(requestParameters: PostRoomOwnerReferralsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomOwnerReferralsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    async postRoomRotationRulesRaw(requestParameters: PostRoomRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomRotationRulesRequestToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    async postRoomRotationRules(requestParameters: PostRoomRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     */
    async postRotationRulesRaw(requestParameters: PostRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationRulesRequestToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     */
    async postRotationRules(requestParameters: PostRotationRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    async postUnitGradesRaw(requestParameters: PostUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUnitGradesRequestToJSON(requestParameters.createUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    async postUnitGrades(requestParameters: PostUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasonsRaw(requestParameters: PutAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentReasonsDetailsUpdated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdjustmentReasonsRequestToJSON(requestParameters.changeAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentReasonsDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasons(requestParameters: PutAdjustmentReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentReasonsDetailsUpdated> {
        const response = await this.putAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasonsRaw(requestParameters: PutOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutOverrideReasonsRequestToJSON(requestParameters.overrideReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasons(requestParameters: PutOverrideReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodesRaw(requestParameters: PutRevenueTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRevenueTransactionCodesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRevenueTransactionCodesRequestToJSON(requestParameters.changeRevenueTransactionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodes(requestParameters: PutRevenueTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRevenueTransactionCodesDetails> {
        const response = await this.putRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    async putRoomOwnerRaw(requestParameters: PutRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomOwnerRequestToJSON(requestParameters.changeRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    async putRoomOwner(requestParameters: PutRoomOwnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.putRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    async putRoomOwnerReferralRaw(requestParameters: PutRoomOwnerReferralOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"roomOwnerReferralId"}}`, encodeURIComponent(String(requestParameters.roomOwnerReferralId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomOwnerReferralRequestToJSON(requestParameters.changeRoomOwnerReferralDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    async putRoomOwnerReferral(requestParameters: PutRoomOwnerReferralOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomOwnerReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriodRaw(requestParameters: PutRotationPeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRotationPeriodDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRotationPeriodRequestToJSON(requestParameters.rotationPeriod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRotationPeriodDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriod(requestParameters: PutRotationPeriodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRotationPeriodDetails> {
        const response = await this.putRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     */
    async putRotationRulesRaw(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostRotationRulesRequestToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     */
    async putRotationRules(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    async putUnitGradesRaw(requestParameters: PutUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitGradesDetailsUpdated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutUnitGradesRequestToJSON(requestParameters.changeUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitGradesDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    async putUnitGrades(requestParameters: PutUnitGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitGradesDetailsUpdated> {
        const response = await this.putUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRotationRulesSetupTypeEnum = {
    Points: 'Points',
    OwnerMultiplier: 'OwnerMultiplier',
    RoomStatusMultiplier: 'RoomStatusMultiplier'
} as const;
export type GetRotationRulesSetupTypeEnum = typeof GetRotationRulesSetupTypeEnum[keyof typeof GetRotationRulesSetupTypeEnum];
