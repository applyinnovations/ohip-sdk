/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AdjustmentReasonsDetailsUpdated, ChangeAdjustmentReasonsDetails, ChangeRevenueTransactionCodesCriteria, ChangeRevenueTransactionCodesDetails, ChangeRoomOwnerDetails, ChangeRoomOwnerReferralDetails, ChangeRotationPeriodDetails, ChangeUnitGradesDetails, CreateAdjustmentReasonsDetails, CreateRoomOwnerDetails, CreateRoomOwnerReferralDetails, CreateUnitGradesDetails, FetchAdjustmentReasonsDetails, FetchRevenueTransactionCodesDetails, FetchRotationPeriod, FetchRotationRules, FetchUnitGradesDetails, OverrideReasonsCriteria, OverrideReasonsDetails, OverrideReasonsToBeChanged, RoomOwnerReferralDetails, RoomOwnershipDetails, RoomRotationRules, RotationPeriod, RotationRules, Status, UnitGradesDetailsUpdated } from '../models/index';
export interface DeleteAdjustmentReasonsRequest {
    adjustmentReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteOverrideReasonsRequest {
    overrideReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRoomOwnerRequest {
    roomOwnershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReferralCheck?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRoomOwnerReferralRequest {
    profileId: string;
    roomOwnerReferralId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRotationRulesRequest {
    ruleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteUnitGradesRequest {
    unitGradeCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAdjustmentReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileRoomOwnersRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    showInactiveRoomOwners?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRevenueTransactionCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRevenue?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomOwnerReferralsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRotationPeriodRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRotationRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    setupType?: GetRotationRulesSetupTypeEnum;
    inactiveRules?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetUnitGradesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAdjustmentReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createAdjustmentReasonsDetails: CreateAdjustmentReasonsDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsCriteria: OverrideReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomOwnerRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRoomOwnerDetails: CreateRoomOwnerDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomOwnerReferralsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRoomOwnerReferralDetails: CreateRoomOwnerReferralDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomRotationRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules: RoomRotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRotationRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules: RotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostUnitGradesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createUnitGradesDetails: CreateUnitGradesDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAdjustmentReasonsRequest {
    adjustmentReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeAdjustmentReasonsDetails: ChangeAdjustmentReasonsDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutOverrideReasonsRequest {
    overrideReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideReasonsToBeChanged: OverrideReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRevenueTransactionCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRevenueTransactionCodesCriteria: ChangeRevenueTransactionCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoomOwnerRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRoomOwnerDetails: ChangeRoomOwnerDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoomOwnerReferralRequest {
    profileId: string;
    roomOwnerReferralId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeRoomOwnerReferralDetails: ChangeRoomOwnerReferralDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRotationPeriodRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationPeriod: RotationPeriod;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRotationRulesRequest {
    ruleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rotationRules: RotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutUnitGradesRequest {
    unitGradeCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUnitGradesDetails: ChangeUnitGradesDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class RoomRotationConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    deleteAdjustmentReasonsRaw(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    deleteAdjustmentReasons(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    deleteOverrideReasonsRaw(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    deleteOverrideReasons(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    deleteRoomOwnerRaw(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    deleteRoomOwner(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    deleteRoomOwnerReferralRaw(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    deleteRoomOwnerReferral(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     * @deprecated
     */
    deleteRotationRulesRaw(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     * @deprecated
     */
    deleteRotationRules(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    deleteUnitGradesRaw(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    deleteUnitGrades(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    getAdjustmentReasonsRaw(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAdjustmentReasonsDetails>>;
    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    getAdjustmentReasons(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAdjustmentReasonsDetails>;
    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    getOverrideReasonsRaw(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverrideReasonsDetails>>;
    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    getOverrideReasons(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverrideReasonsDetails>;
    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    getProfileRoomOwnersRaw(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>>;
    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    getProfileRoomOwners(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails>;
    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    getRevenueTransactionCodesRaw(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRevenueTransactionCodesDetails>>;
    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    getRevenueTransactionCodes(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRevenueTransactionCodesDetails>;
    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    getRoomOwnerReferralsRaw(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnerReferralDetails>>;
    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    getRoomOwnerReferrals(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnerReferralDetails>;
    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    getRotationPeriodRaw(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationPeriod>>;
    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    getRotationPeriod(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationPeriod>;
    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    getRotationRulesRaw(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationRules>>;
    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    getRotationRules(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationRules>;
    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    getUnitGradesRaw(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchUnitGradesDetails>>;
    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    getUnitGrades(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchUnitGradesDetails>;
    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    postAdjustmentReasonsRaw(requestParameters: PostAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    postAdjustmentReasons(requestParameters: PostAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    postOverrideReasonsRaw(requestParameters: PostOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    postOverrideReasons(requestParameters: PostOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    postRoomOwnerRaw(requestParameters: PostRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>>;
    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    postRoomOwner(requestParameters: PostRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails>;
    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    postRoomOwnerReferralsRaw(requestParameters: PostRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    postRoomOwnerReferrals(requestParameters: PostRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    postRoomRotationRulesRaw(requestParameters: PostRoomRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    postRoomRotationRules(requestParameters: PostRoomRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     * @deprecated
     */
    postRotationRulesRaw(requestParameters: PostRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     * @deprecated
     */
    postRotationRules(requestParameters: PostRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    postUnitGradesRaw(requestParameters: PostUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    postUnitGrades(requestParameters: PostUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    putAdjustmentReasonsRaw(requestParameters: PutAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentReasonsDetailsUpdated>>;
    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    putAdjustmentReasons(requestParameters: PutAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentReasonsDetailsUpdated>;
    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    putOverrideReasonsRaw(requestParameters: PutOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    putOverrideReasons(requestParameters: PutOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    putRevenueTransactionCodesRaw(requestParameters: PutRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRevenueTransactionCodesDetails>>;
    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    putRevenueTransactionCodes(requestParameters: PutRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRevenueTransactionCodesDetails>;
    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    putRoomOwnerRaw(requestParameters: PutRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>>;
    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    putRoomOwner(requestParameters: PutRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails>;
    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    putRoomOwnerReferralRaw(requestParameters: PutRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    putRoomOwnerReferral(requestParameters: PutRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    putRotationPeriodRaw(requestParameters: PutRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRotationPeriodDetails>>;
    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    putRotationPeriod(requestParameters: PutRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRotationPeriodDetails>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     * @deprecated
     */
    putRotationRulesRaw(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     * @deprecated
     */
    putRotationRules(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    putUnitGradesRaw(requestParameters: PutUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitGradesDetailsUpdated>>;
    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    putUnitGrades(requestParameters: PutUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitGradesDetailsUpdated>;
}
/**
 * @export
 */
export declare const GetRotationRulesSetupTypeEnum: {
    readonly Points: "Points";
    readonly OwnerMultiplier: "OwnerMultiplier";
    readonly RoomStatusMultiplier: "RoomStatusMultiplier";
};
export type GetRotationRulesSetupTypeEnum = typeof GetRotationRulesSetupTypeEnum[keyof typeof GetRotationRulesSetupTypeEnum];
