/**
 * OPERA Cloud Price Availability Rate Async API
 * APIs to cater for Price and Rate Availability Asynchronous functionality in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { InstanceLink, Restrictions, RestrictionsStatus } from '../models/index';
export interface GetRestrictionsRequest {
    hotelId: string;
    extSystemCode: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}
export interface GetRestrictionsProcessStatusRequest {
    requestId: string;
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}
export interface PostRestrictionsProcessRequest {
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    restrictions: Restrictions;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class AvailabilityAsyncApi extends runtime.BaseAPI {
    /**
     * Use this to check whether the restrictions sent have been processed. <p><strong>OperationId:</strong>getRestrictions</p>
     * Get status for created restrictions.
     */
    getRestrictionsRaw(requestParameters: GetRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestrictionsStatus>>;
    /**
     * Use this to check whether the restrictions sent have been processed. <p><strong>OperationId:</strong>getRestrictions</p>
     * Get status for created restrictions.
     */
    getRestrictions(requestParameters: GetRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestrictionsStatus>;
    /**
     * Use this to check whether the restrictions sent have been processed. <p><strong>OperationId:</strong>getRestrictionsProcessStatus</p>
     * Check status of Restrictions
     */
    getRestrictionsProcessStatusRaw(requestParameters: GetRestrictionsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Use this to check whether the restrictions sent have been processed. <p><strong>OperationId:</strong>getRestrictionsProcessStatus</p>
     * Check status of Restrictions
     */
    getRestrictionsProcessStatus(requestParameters: GetRestrictionsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * A user can send various restrictions to OPERA by specifying restriction details in the request. <p><strong>OperationId:</strong>postRestrictionsProcess</p>
     * Create restrictions in OPERA Cloud.
     */
    postRestrictionsProcessRaw(requestParameters: PostRestrictionsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>>;
    /**
     * A user can send various restrictions to OPERA by specifying restriction details in the request. <p><strong>OperationId:</strong>postRestrictionsProcess</p>
     * Create restrictions in OPERA Cloud.
     */
    postRestrictionsProcess(requestParameters: PostRestrictionsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>>;
}
