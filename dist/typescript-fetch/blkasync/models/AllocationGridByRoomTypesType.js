"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllocationGridByRoomTypesTypeToJSON = exports.AllocationGridByRoomTypesTypeFromJSONTyped = exports.AllocationGridByRoomTypesTypeFromJSON = exports.instanceOfAllocationGridByRoomTypesType = void 0;
const runtime_1 = require("../runtime");
const AllocationGridByRoomTypeType_1 = require("./AllocationGridByRoomTypeType");
const BlockId_1 = require("./BlockId");
/**
 * Check if a given object implements the AllocationGridByRoomTypesType interface.
 */
function instanceOfAllocationGridByRoomTypesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAllocationGridByRoomTypesType = instanceOfAllocationGridByRoomTypesType;
function AllocationGridByRoomTypesTypeFromJSON(json) {
    return AllocationGridByRoomTypesTypeFromJSONTyped(json, false);
}
exports.AllocationGridByRoomTypesTypeFromJSON = AllocationGridByRoomTypesTypeFromJSON;
function AllocationGridByRoomTypesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, BlockId_1.BlockIdFromJSON)(json['blockId']),
        'allocationRoomTypes': !(0, runtime_1.exists)(json, 'allocationRoomTypes') ? undefined : (json['allocationRoomTypes'].map(AllocationGridByRoomTypeType_1.AllocationGridByRoomTypeTypeFromJSON)),
        'genericRoomType': !(0, runtime_1.exists)(json, 'genericRoomType') ? undefined : json['genericRoomType'],
    };
}
exports.AllocationGridByRoomTypesTypeFromJSONTyped = AllocationGridByRoomTypesTypeFromJSONTyped;
function AllocationGridByRoomTypesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'blockId': (0, BlockId_1.BlockIdToJSON)(value.blockId),
        'allocationRoomTypes': value.allocationRoomTypes === undefined ? undefined : (value.allocationRoomTypes.map(AllocationGridByRoomTypeType_1.AllocationGridByRoomTypeTypeToJSON)),
        'genericRoomType': value.genericRoomType,
    };
}
exports.AllocationGridByRoomTypesTypeToJSON = AllocationGridByRoomTypesTypeToJSON;
