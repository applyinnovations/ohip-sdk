"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockAsyncApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class BlockAsyncApi extends runtime.BaseAPI {
    /**
     * This API will fetch Block allocation ranges warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getAllocationRangesProcessInfo</p>
     * This API returns information about the set allocation ranges process.
     */
    getAllocationRangesProcessInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAllocationRangesProcessInfo.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getAllocationRangesProcessInfo.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getAllocationRangesProcessInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProcessDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will fetch Block allocation ranges warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getAllocationRangesProcessInfo</p>
     * This API returns information about the set allocation ranges process.
     */
    getAllocationRangesProcessInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllocationRangesProcessInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getAllocationRangesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getAllocationRangesProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAllocationRangesProcessStatus.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getAllocationRangesProcessStatus.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getAllocationRangesProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getAllocationRangesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getAllocationRangesProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getAllocationRangesProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API will fetch Block allocation warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationProcessInfo</p>
     * This API returns information about the set allocation process.
     */
    getBlockAllocationProcessInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationProcessInfo.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlockAllocationProcessInfo.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationProcessInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocation/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProcessDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will fetch Block allocation warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationProcessInfo</p>
     * This API returns information about the set allocation process.
     */
    getBlockAllocationProcessInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockAllocationProcessInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getBlockAllocationProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationProcessStatus.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlockAllocationProcessStatus.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocation/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getBlockAllocationProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getBlockAllocationProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    getBlockAllocationSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummary.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummary.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummary.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BlockAllocationSummaryTypeFromJSON));
        });
    }
    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    getBlockAllocationSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockAllocationSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getBlockAllocationSummaryProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getBlockAllocationSummaryProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getBlockAllocationSummaryProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This API will fetch shift Block warnings and errors to be returned as part of the response. <p><strong>OperationId:</strong>getShiftBlockProcessInfo</p>
     * This API returns information about the shift block process.
     */
    getShiftBlockProcessInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getShiftBlockProcessInfo.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getShiftBlockProcessInfo.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getShiftBlockProcessInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/shift/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProcessDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will fetch shift Block warnings and errors to be returned as part of the response. <p><strong>OperationId:</strong>getShiftBlockProcessInfo</p>
     * This API returns information about the shift block process.
     */
    getShiftBlockProcessInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getShiftBlockProcessInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getShiftBlockProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getShiftBlockProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getShiftBlockProcessStatus.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getShiftBlockProcessStatus.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getShiftBlockProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/shift/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getShiftBlockProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getShiftBlockProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getShiftBlockProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to set business block allocation for one or more date ranges, which are within business block date range, and for a list of room types. <p><strong>OperationId:</strong>startAllocationRangesProcess</p>
     * This API facilitates setting Block Allocation Ranges for a Hotel.
     */
    startAllocationRangesProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startAllocationRangesProcess.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling startAllocationRangesProcess.');
            }
            if (requestParameters.allocationRanges === null || requestParameters.allocationRanges === undefined) {
                throw new runtime.RequiredError('allocationRanges', 'Required parameter requestParameters.allocationRanges was null or undefined when calling startAllocationRangesProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AllocationRangesToJSON)(requestParameters.allocationRanges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InstanceLinkFromJSON));
        });
    }
    /**
     * Use this API to set business block allocation for one or more date ranges, which are within business block date range, and for a list of room types. <p><strong>OperationId:</strong>startAllocationRangesProcess</p>
     * This API facilitates setting Block Allocation Ranges for a Hotel.
     */
    startAllocationRangesProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startAllocationRangesProcessRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>startBlockAllocationProcess</p>
     * This API facilitates setting Block Allocations for a Hotel.
     */
    startBlockAllocationProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startBlockAllocationProcess.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling startBlockAllocationProcess.');
            }
            if (requestParameters.allocation === null || requestParameters.allocation === undefined) {
                throw new runtime.RequiredError('allocation', 'Required parameter requestParameters.allocation was null or undefined when calling startBlockAllocationProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/allocation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AllocationToJSON)(requestParameters.allocation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InstanceLinkFromJSON));
        });
    }
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>startBlockAllocationProcess</p>
     * This API facilitates setting Block Allocations for a Hotel.
     */
    startBlockAllocationProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startBlockAllocationProcessRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will fetch Block allocation information for a hotel, and specified date range. The block allocated inventory, rates and room type statistics are returned as part of the response. The maximum limit of date range (whether using start/endDate or startLastModifiedDate/endLastModifiedDate) is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel.   Every identical request (employing the same query parameters) for the getBlockAllocationSummary operation when requesting data with start/endDate or startLastModifiedDate/endLastModifiedDate, necessitates a mandatory 30-minute interval between submissions. Please note that this limit applies regardless of whether the POST, HEAD, and GET cycle has been completed. The API returns a header parameter location that can be used in the getBlockAllocationSummaryProcessStatus operation.  Use event-driven APIs -(see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) -to get real-time block updates. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    startBlockAllocationSummaryProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startBlockAllocationSummaryProcess.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startBlockAllocationSummaryProcess.');
            }
            if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
                throw new runtime.RequiredError('criteria', 'Required parameter requestParameters.criteria was null or undefined when calling startBlockAllocationSummaryProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CriteriaToJSON)(requestParameters.criteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InstanceLinkFromJSON));
        });
    }
    /**
     * This API will fetch Block allocation information for a hotel, and specified date range. The block allocated inventory, rates and room type statistics are returned as part of the response. The maximum limit of date range (whether using start/endDate or startLastModifiedDate/endLastModifiedDate) is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel.   Every identical request (employing the same query parameters) for the getBlockAllocationSummary operation when requesting data with start/endDate or startLastModifiedDate/endLastModifiedDate, necessitates a mandatory 30-minute interval between submissions. Please note that this limit applies regardless of whether the POST, HEAD, and GET cycle has been completed. The API returns a header parameter location that can be used in the getBlockAllocationSummaryProcessStatus operation.  Use event-driven APIs -(see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) -to get real-time block updates. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    startBlockAllocationSummaryProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startBlockAllocationSummaryProcessRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to move or shift the dates of a block in OPERA. <p><strong>OperationId:</strong>startShiftBlockProcess</p>
     * Shifts the Block start date.
     */
    startShiftBlockProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startShiftBlockProcess.');
            }
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling startShiftBlockProcess.');
            }
            if (requestParameters.blockToShift === null || requestParameters.blockToShift === undefined) {
                throw new runtime.RequiredError('blockToShift', 'Required parameter requestParameters.blockToShift was null or undefined when calling startShiftBlockProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/shift`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockToShiftToJSON)(requestParameters.blockToShift),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InstanceLinkFromJSON));
        });
    }
    /**
     * Use this API to move or shift the dates of a block in OPERA. <p><strong>OperationId:</strong>startShiftBlockProcess</p>
     * Shifts the Block start date.
     */
    startShiftBlockProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startShiftBlockProcessRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BlockAsyncApi = BlockAsyncApi;
