/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  ListOfValueNames,
  ListOfValues,
  OperaVersion,
  ValidateListOfValuesDetails,
  ValidateListOfValuesRequest,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ListOfValueNamesFromJSON,
    ListOfValueNamesToJSON,
    ListOfValuesFromJSON,
    ListOfValuesToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    ValidateListOfValuesDetailsFromJSON,
    ValidateListOfValuesDetailsToJSON,
    ValidateListOfValuesRequestFromJSON,
    ValidateListOfValuesRequestToJSON,
} from '../models';

export interface GetADSEchoTokenLOVRequest {
    errorType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetADSStatusLOVRequest {
    errorType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetARAccountTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetARCreditCardsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActionTypesLOVRequest {
    module?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivitiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityConfigTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityLocationsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityStatusLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAddressFormatElementsLOVRequest {
    salesFormat?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAgentAccountsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAgentSourceCitiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAgentSourceResvCitiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAllRevenueTypesLOVRequest {
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAllowedHotelInterfaceRightsLOVRequest {
    interfaceRowId?: string;
    interfaceType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlternateHotelCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAmenitiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetApplicationModulesLOVRequest {
    relModuleName?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetApplicationSettingsLOVRequest {
    settingName?: string;
    levelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetArrangementCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetArrangementCodesNumberLOVRequest {
    type?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetArticleCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAssignRoomsLOVRequest {
    room?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizerLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutoNumberGeneratorLOVRequest {
    number?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutoTraceExpressionFieldsLOVRequest {
    traceGroup?: string;
    tableName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableExportTemplatesLOVRequest {
    fileGroup?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableProfileOwnerRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableRoomComponentsLOVRequest {
    roomNumber?: string;
    roomType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableRoomTypeComponentsLOVRequest {
    roomType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableScriptLanguagesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardCodesMultiHotelLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardMktgCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardPaymentLOVRequest {
    membershipType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBankAccountsForReportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBankAccountsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBanquetPrintingMethodLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBillingInstructionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockBookingStatusesLOVRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCatNextStatusesLOVRequest {
    catStatus?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCodesByArrivalDateLOVRequest {
    arrivalDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCodesFinOperationsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCodesLOVRequest {
    endDate?: string;
    beginDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCurrentStatusesLOVRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockEventIdsLOVRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockEventsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockIdsLOVRequest {
    endDate?: string;
    beginDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockModeLovLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockNextStatusesLOVRequest {
    bookingStatus?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockPaymentMethodsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRateCodesLOVRequest {
    negotiatedOnly?: string;
    endDate?: string;
    beginDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRatesLOVRequest {
    blockId?: string;
    departure?: string;
    arrival?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockReservationTypesLOVRequest {
    bookingStatus?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBookingChannelRatePlansLOVRequest {
    channel?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBookingChannelRoomTypesLOVRequest {
    channel?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBookingTypesIndividualsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBudgetForecastCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBudgetRateCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBusinessEventActionTypeExtDBLOVRequest {
    databaseId?: string;
    extSystem?: string;
    module?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBusinessEventActionTypeLOVRequest {
    module?: string;
    extSystem?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCampaignActivityTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashRegisterIDLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierHotelsLOVRequest {
    cashierId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCatBudgetTypeEventCodesLOVRequest {
    catBudgetType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCatBudgetTypeMarketCodesLOVRequest {
    catBudgetType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCatBudgetTypeMealCodesLOVRequest {
    catBudgetType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCatBudgetTypeRevenueCodesLOVRequest {
    catBudgetType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringBudgetTypesLOVRequest {
    active?: string;
    catering?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringCodesLOVRequest {
    codeType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringEventStatusLOVRequest {
    waitList?: string;
    newEvent?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackageCodesLOVRequest {
    hotelId?: string;
    radioType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackagePriceCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackageRevenueConfigEventTypeLOVRequest {
    pkgLinkId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackageRevenueEventTypeLOVRequest {
    pkgId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringSetupStylesLOVRequest {
    space?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringStatusCodesLOVRequest {
    exclusionList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChainLanguagesLOVRequest {
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelCardTypeMappingCardTypeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelCardTypeMappingChannelCardTypeLOVRequest {
    cardType?: string;
    gdsHost?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelCardTypeMappingGdsHostLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelConfigRateCodesLOVRequest {
    roomType?: string;
    bookingChannelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelParametersLOVRequest {
    channelCode?: string;
    settingName?: string;
    levelType?: string;
    levelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetClaimMembershipDetailsLOVRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionTxnCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompAuthorizersLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompaniesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfLetterReportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigAdvDynamicBaseRatePlansLOVRequest {
    daily?: string;
    tiered?: string;
    currentRateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigBaseRatePlansLOVRequest {
    tiered?: string;
    daily?: string;
    currencyCode?: string;
    currentRateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigDynamicBaseRatePlansLOVRequest {
    currentRateCode?: string;
    tiered?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigReportsLOVRequest {
    moduleName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConnectingSuitesLOVRequest {
    roomNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCroUsersLOVRequest {
    userId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyExchangeRatesLOVRequest {
    exchangeType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyFormatsLOVRequest {
    decimal?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomNumberConfigCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomRoomTranslationLOVRequest {
    dbfLogo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositCancelRulesLOVRequest {
    policyType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositCancelRulesMultiHotelLOVRequest {
    policyType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDeviceCodeMappingValuesLOVRequest {
    externalCode?: string;
    codeType?: string;
    deviceCode?: string;
    deviceType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDeviceLocationsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDietaryPreferencesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDistributionTemplatesLOVRequest {
    location?: string;
    locationType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECertificateGroupEntityLOVRequest {
    entityName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECouponLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECouponRateCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEcouponResvRoomLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEndOfDayReportsLOVRequest {
    beforeIncomeAudit?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEnrollmentMatchCommunicationTypeLOVRequest {
    type?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventLocationsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventRateCodeLOVRequest {
    space?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventSetupStylesLOVRequest {
    room?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventStatusCodesLOVRequest {
    exclusionList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExchangeTypesLOVRequest {
    currencyCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExportMappingCodesToLinkLOVRequest {
    configType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExportMappingTypeCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalDatabaseAvailableResortsLOVRequest {
    databaseId?: string;
    interfaceType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalReferenceTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFacilityCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFacilityCodesReservationLOVRequest {
    facilityTask?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFacilityTasksLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFacilityTasksRoomTypeLOVRequest {
    roomTypeLabel?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFieldNameLOVRequest {
    changeSource?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalPaymentMethodsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFixedChargesTransactionCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFloorsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioGroupingCodesLOVRequest {
    type?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioGroupingTransactionCodesLOVRequest {
    mode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioStylesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetForecastGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetForeignCurrenciesLOVRequest {
    exchangeType?: string;
    sell?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFormatLOVRequest {
    method?: string;
    moduleName?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFrequencyLOVRequest {
    defaultDepartureTask?: string;
    guestRequested?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFrequencyTypeLOVRequest {
    defaultDepartureTask?: string;
    guestRequested?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFromRoomNumberLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsConvAmenityCodesLOVRequest {
    bookingChannelCodes?: string;
    featureType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsGuaranteeCodesLOVRequest {
    bookingChannelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsHotelsLOVRequest {
    channelType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsRateCategoriesLOVRequest {
    bookingChannelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsRateLevelsLOVRequest {
    bookingChannelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGdsRoomCategoryTemplatesLOVRequest {
    bookingChannelCodes?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGemMenuItemsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGenericReportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalAlertFieldQueryLOVRequest {
    sourceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalAlertFunctionLOVRequest {
    fieldType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalAlertOperatorLOVRequest {
    tableName?: string;
    fieldName?: string;
    fieldType?: string;
    sourceIdIn?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGridTypesLOVRequest {
    bookingStatus?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGroupArrivalsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessagesMultiHotelLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessagesQuickTextsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKAttendantsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKAttendantsMobileLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKScheduledAttendantsLOVRequest {
    businessDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKTaskBreakOutLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKTaskCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKTaskSheetsNoLOVRequest {
    breakOutId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHKTaskTemplatesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHkFloorsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHkRoomTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHkRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelContactCommMethodLOVRequest {
    contactType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelEventTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceDataLineTypesLOVRequest {
    logo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceImportRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRateTierLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelsForARProfileLOVRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelsForSnCLOVRequest {
    cateringEvents?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHouseKeepingRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHouseKeepingSectionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingCreditRulesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetIfcRightsViewLOVRequest {
    category?: string;
    ifcId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetImbalanceVerificationTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceAutoBalanceLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestMarketCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestMarketGroupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestRoomClassLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestRoomTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestSourceCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceDataRequestSourceGroupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfacePseudoRoomLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceResyncFunctionSpaceLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceResyncOwnerContractLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceResyncOwnerContractRoomLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceResyncProductsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceRevenueCodeLOVRequest {
    logo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceTabColumnsLOVRequest {
    tableName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceTrxCodesAllChargesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceTrxCodesMinibarLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInvItemsClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInvItemsPoolsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemAttributesLOVRequest {
    itemId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemRatesLOVRequest {
    itemId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemTemplateItemsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemsLOVRequest {
    sellInEvent?: string;
    sellInReservation?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemPriceCodeLOVRequest {
    itemId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemVendorLOVRequest {
    itemId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetJobTitlesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetKeyOptionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLOVNamesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLicensesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetListOfValuesRequest {
    name?: GetListOfValuesNameEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLocatorQuickTextsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMailGenericLOVRequest {
    sourceIdIn?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetManagerReportDetailsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetManagersReportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketSegmentLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMasterBlockLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardFinTrxLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardProductsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardRateCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardUpgradeRoomGroupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardUpgradeRoomLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipBenefitProgramLOVRequest {
    membershipType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipBenefitsLOVRequest {
    membershipType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipCardFeeAmountLOVRequest {
    membershipLevel?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClassTypesLOVRequest {
    loyalty?: string;
    airlines?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipMaxDowngradeLevelLOVRequest {
    membershipType?: string;
    membershipLevelRank?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipPointsRuleCodesLOVRequest {
    membershipType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipPromotionsLOVRequest {
    membershipId?: string;
    beginDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipStatementBatchListLOVRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTotalPointsAvailableLOVRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransferPointsLOVRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMenuClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMenuItemsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMenuLOVRequest {
    menuClassId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRateHotelsLOVRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesHotelsLOVRequest {
    profileId?: string;
    rateCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNoteTypesLOVRequest {
    departmentType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOSAActivityTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIInterfaceReferencesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIInterfaceResortsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIInterfacesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIResortsLOVRequest {
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOrganizationsLOVRequest {
    actionTask?: string;
    chainCode?: string;
    roles?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackForecastGroupCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageArrangementAssociationLOVRequest {
    arrangementCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetParameterActiveUnderChainLOVRequest {
    chainCode?: string;
    parameter?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentMethodsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPeriodSetupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPeriodsSetupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostalCodesLOVRequest {
    country?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostingRoomLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPostingTransactionCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreferenceSubgroupsLOVRequest {
    preferenceGroup?: string;
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreferencesMultiHotelsLOVRequest {
    preferenceGroup?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrepaidCardInterfacesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrintersLOVRequest {
    alertPrinters?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrioritiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileCommunicationsLOVRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileEnrollmentMatchCriteriaLOVRequest {
    nameType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileEnrollmentRuleDoNotMergeCriteriaLOVRequest {
    nameType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileEnrollmentRuleFilterCriteriaLOVRequest {
    nameType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileHotelsLOVRequest {
    taxTypeCheck?: string;
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileIdentificationsLOVRequest {
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileNameValidationsTypeLOVRequest {
    operaParam?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPromoGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPromoRatesLOVRequest {
    promoCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyAmenitiesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPublisherPropertiesLOVRequest {
    subscriber?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetQueueNameLOVRequest {
    hotelCodeList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetQuickTextsLOVRequest {
    departmentId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCategoriesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCodeGlobalDescEditLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCodesByTypeLOVRequest {
    rateCodeType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCodesValidLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCommissionCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateConfigCurrenciesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanForMassRateLOVRequest {
    rateCodeType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansForYieldAsConfigLOVRequest {
    rateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepBlockCodesParamOffLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepBlockCodesParamOnLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepCalendarMonthsLOVRequest {
    year?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepCalendarWeeksLOVRequest {
    year?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepCalendarYearsLOVRequest {
    period?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepCashiersLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepContactListLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepCurrenciesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepDepartmentsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepFiscalMonthsLOVRequest {
    fiscalYearId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepFiscalWeeksLOVRequest {
    fiscalYearId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepFiscalYearsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepForeignCurrenciesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepGroupReportsLOVRequest {
    groupName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepInventoryItemPoolsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepMarketCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepOwnerCodesLOVRequest {
    hotelCodesList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRatePlansLOVRequest {
    propertyList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRoomStatusesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRoomTypeMultiHotelLOVRequest {
    hotelCodeList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRoomTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepRoomsStatLOVRequest {
    toDate?: string;
    fromDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepServiceRequestCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepTransactionCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRepTraveAgtCalendarYearLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReportsGenericLOVRequest {
    parameter?: string;
    moduleId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResStatReportRateCodeLOVRequest {
    endDate?: string;
    beginDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationBasedBlocksLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationBasedProfilesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPackagesGroupItemsLOVRequest {
    group?: string;
    arrival?: string;
    children?: string;
    adults?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPackagesLOVRequest {
    departure?: string;
    arrival?: string;
    children?: string;
    adults?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPreferencesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationStatusesHotelLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationTicketsCodesLOVRequest {
    departure?: string;
    arrival?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationTicketsLOVRequest {
    resvNameId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortAirportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortCROsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortGuaranteeCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortInventoryItemsLOVRequest {
    sellInEvent?: string;
    sellInReservation?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortMarketCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortRateClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortRestrictionStatusesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortRoomNumbersLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortRoomTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResortTransportationLabelsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResourceItemClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResvAutoAttachRulesCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResvAutoAttachRulesRuleTypeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResvBasedProfilesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResvTransactionDiversionCodesLOVRequest {
    resvNameId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueBucketTrxCodesLOVRequest {
    bucketType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueBucketsLOVRequest {
    type?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTypeMappingSpaceLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTypeMappingTrxCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRolesForLevelLOVRequest {
    levelCode?: string;
    roleLevel?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomClassCategoriesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomClassMultiPropertyLOVRequest {
    hotelCodeList?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomClassesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomFeaturesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomHierarchyClassesCopyLOVRequest {
    property?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomHierarchyRoomClassesLOVRequest {
    property?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomHierarchyRoomTypesLOVRequest {
    property?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomHierarchyTypesCopyLOVRequest {
    property?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomHoldConditionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomMaintenanceLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomPoolRoomTypesLOVRequest {
    roomPool?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomPoolsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRatesLOVRequest {
    room?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomReservationStatusLOVRequest {
    includeDayUse?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRevenueTrxCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRotationGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRotationUnitGradesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomSpecialsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomTypePoolLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomTypesForMassRateLOVRequest {
    ratePlanCodes?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomingListHKRoomsLOVRequest {
    departure?: string;
    arrival?: string;
    roomType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomsKeyGenerationLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoutingInstructionsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSalesManagerGoalPeriodLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetScheduledReportsExportLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetScreenCodesLOVRequest {
    screenArea?: string;
    screenType?: string;
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetScreenStyleCodesLOVRequest {
    screenCode?: string;
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceNameLOVRequest {
    protocol?: string;
    outboundType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSetupStylesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetShiftReportsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetShiftReportsNoParamLOVRequest {
    shiftGroupId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSitePlanSectionTypeLinksLOVRequest {
    sectionType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSitePlanSectionTypesLOVRequest {
    siteType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSitePlansLOVRequest {
    siteType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSourceGroupsLOVRequest {
    includeInactive?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSpacesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSpecialRequestsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSpecialsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStageProfilesLOVRequest {
    criteria?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStagedProfilePreferencesLOVRequest {
    resortNameId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStatisticsYearsLOVRequest {
    year?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStoredValueRedeemTrxLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSubBlockLOVRequest {
    superBlock?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSummaryRefreshLogLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSynchronizeRateCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskBreakOutLOVRequest {
    fromDate?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskSheetDeptLOVRequest {
    levelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskSheetLOVRequest {
    breakOutId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskSheetRoomsLOVRequest {
    taskSheetNo?: string;
    taskCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxTransactionCodeLOVRequest {
    taxCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTelephoneCategoryLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateBookingChannelRoomTypesLOVRequest {
    bookingChannelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateFiscalFolioParametersLOVRequest {
    templateCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateMarketCodesLOVRequest {
    includeInactive?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateMarketGroupsLOVRequest {
    includeInactive?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplatePolicyCodesLOVRequest {
    policyType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplatePreferencesLOVRequest {
    includeGlobals?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateRoomClassesLOVRequest {
    includeInactive?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateSourceCodesLOVRequest {
    includeInactive?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateSourceGroupsLOVRequest {
    includeInactive?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionSubgroupsLOVRequest {
    fetchOnlyUniqueValues?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTestUpsellRulesRateCodeLOVRequest {
    roomCategory?: string;
    arrivalDate?: string;
    nights?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetToPostalCodesLOVRequest {
    country?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTraceDateCalcLOVRequest {
    view?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTraceFieldLOVRequest {
    view?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionAdjustmentReasonCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesConsumptionLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesPaymentLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionDeleteReasonCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionDiversionRuleRoomsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionSubgroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportTypesHotelLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportTypesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTravelAgentSourceLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTravelAgentSourceResvLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrxCodeArrangementLOVRequest {
    type?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTurnawayCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUDFMappingsLOVRequest {
    moduleName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUdfAttributesLOVRequest {
    udfCategory?: string;
    udfType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellDefaultTrxCodeLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellFromRoomClassEditLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellFromRoomTypeEditLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellHierarchyLevelsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellMembershipLevelsOnlyLOVRequest {
    membershipType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellOccupancyLevelsLOVRequest {
    includeBlank?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRateCategoriesEditLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRateCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRoomClassViewLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRoomTypeViewLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRuleLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellToRoomClassEditLOVRequest {
    fromRoomClass?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellToRoomTypeEditLOVRequest {
    fromRoomTypeLabel?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellTrxCodesLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDbFunctionArgsLOVRequest {
    category?: string;
    functionName?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDbFunctionsLOVRequest {
    category?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserLogActivityGroupsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserLogActivityTypesLOVRequest {
    activityGroup?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserRolesLOVRequest {
    roleWithDepartment?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYearSetupLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYieldMarketsLOVRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactiveFlag?: boolean;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    excludeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingLOVServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateListOfValuesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateListOfValues?: ValidateListOfValuesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class LOVApi extends runtime.BaseAPI {

    /**
     * Use this API to return the list of values for ADSEcho token based on search criteria such as errorType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getADSEchoTokenLOV</p>
     * Return list of values for ADSEcho token
     */
    async getADSEchoTokenLOVRaw(requestParameters: GetADSEchoTokenLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/errorType/{errorType}/adsEchoToken`.replace(`{${"errorType"}}`, encodeURIComponent(String(requestParameters.errorType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ADSEcho token based on search criteria such as errorType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getADSEchoTokenLOV</p>
     * Return list of values for ADSEcho token
     */
    async getADSEchoTokenLOV(requestParameters: GetADSEchoTokenLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getADSEchoTokenLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ADSStatus based on search criteria such as errorType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getADSStatusLOV</p>
     * Return list of values for ADSStatus
     */
    async getADSStatusLOVRaw(requestParameters: GetADSStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/errorType/{errorType}/adsStatus`.replace(`{${"errorType"}}`, encodeURIComponent(String(requestParameters.errorType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ADSStatus based on search criteria such as errorType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getADSStatusLOV</p>
     * Return list of values for ADSStatus
     */
    async getADSStatusLOV(requestParameters: GetADSStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getADSStatusLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ARAccount types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getARAccountTypesLOV</p>
     * Return list of values for hotel ARAccount types
     */
    async getARAccountTypesLOVRaw(requestParameters: GetARAccountTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arAccountTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ARAccount types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getARAccountTypesLOV</p>
     * Return list of values for hotel ARAccount types
     */
    async getARAccountTypesLOV(requestParameters: GetARAccountTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getARAccountTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ARCredit cards for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getARCreditCardsLOV</p>
     * Return list of values for hotel ARCredit cards
     */
    async getARCreditCardsLOVRaw(requestParameters: GetARCreditCardsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arCreditCards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ARCredit cards for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getARCreditCardsLOV</p>
     * Return list of values for hotel ARCredit cards
     */
    async getARCreditCardsLOV(requestParameters: GetARCreditCardsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getARCreditCardsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for action types based on search criteria such as module, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActionTypesLOV</p>
     * Return list of values for action types
     */
    async getActionTypesLOVRaw(requestParameters: GetActionTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/module/{module}/actionTypes`.replace(`{${"module"}}`, encodeURIComponent(String(requestParameters.module))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for action types based on search criteria such as module, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActionTypesLOV</p>
     * Return list of values for action types
     */
    async getActionTypesLOV(requestParameters: GetActionTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActionTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for activities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivitiesLOV</p>
     * Return list of values for hotel activities
     */
    async getActivitiesLOVRaw(requestParameters: GetActivitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for activities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivitiesLOV</p>
     * Return list of values for hotel activities
     */
    async getActivitiesLOV(requestParameters: GetActivitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActivitiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for activities config types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityConfigTypesLOV</p>
     * Return list of values for hotel activity config types
     */
    async getActivityConfigTypesLOVRaw(requestParameters: GetActivityConfigTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activityConfigTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for activities config types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityConfigTypesLOV</p>
     * Return list of values for hotel activity config types
     */
    async getActivityConfigTypesLOV(requestParameters: GetActivityConfigTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActivityConfigTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for activity locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityLocationsLOV</p>
     * Return list of values for hotel activity locations
     */
    async getActivityLocationsLOVRaw(requestParameters: GetActivityLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activityLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for activity locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityLocationsLOV</p>
     * Return list of values for hotel activity locations
     */
    async getActivityLocationsLOV(requestParameters: GetActivityLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActivityLocationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for activity status for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityStatusLOV</p>
     * Return list of values for hotel activity status
     */
    async getActivityStatusLOVRaw(requestParameters: GetActivityStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activityStatus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for activity status for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityStatusLOV</p>
     * Return list of values for hotel activity status
     */
    async getActivityStatusLOV(requestParameters: GetActivityStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActivityStatusLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for activity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityTypesLOV</p>
     * Return list of values for hotel activity types
     */
    async getActivityTypesLOVRaw(requestParameters: GetActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activityTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for activity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getActivityTypesLOV</p>
     * Return list of values for hotel activity types
     */
    async getActivityTypesLOV(requestParameters: GetActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getActivityTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for address format elements based on search criteria such as salesFormat, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAddressFormatElementsLOV</p>
     * Return list of values for address format elements
     */
    async getAddressFormatElementsLOVRaw(requestParameters: GetAddressFormatElementsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/salesFormat/{salesFormat}/addressFormatElements`.replace(`{${"salesFormat"}}`, encodeURIComponent(String(requestParameters.salesFormat))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for address format elements based on search criteria such as salesFormat, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAddressFormatElementsLOV</p>
     * Return list of values for address format elements
     */
    async getAddressFormatElementsLOV(requestParameters: GetAddressFormatElementsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAddressFormatElementsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for agent accounts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentAccountsLOV</p>
     * Return list of values for hotel agent accounts
     */
    async getAgentAccountsLOVRaw(requestParameters: GetAgentAccountsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/agentAccounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for agent accounts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentAccountsLOV</p>
     * Return list of values for hotel agent accounts
     */
    async getAgentAccountsLOV(requestParameters: GetAgentAccountsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAgentAccountsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for agent source cities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentSourceCitiesLOV</p>
     * Return list of values for hotel agent source cities
     */
    async getAgentSourceCitiesLOVRaw(requestParameters: GetAgentSourceCitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/agentSourceCities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for agent source cities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentSourceCitiesLOV</p>
     * Return list of values for hotel agent source cities
     */
    async getAgentSourceCitiesLOV(requestParameters: GetAgentSourceCitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAgentSourceCitiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for agent source reservation cities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentSourceResvCitiesLOV</p>
     * Return list of values for hotel agent source reservation cities
     */
    async getAgentSourceResvCitiesLOVRaw(requestParameters: GetAgentSourceResvCitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/agentSourceResvCities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for agent source reservation cities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAgentSourceResvCitiesLOV</p>
     * Return list of values for hotel agent source reservation cities
     */
    async getAgentSourceResvCitiesLOV(requestParameters: GetAgentSourceResvCitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAgentSourceResvCitiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for alert codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAlertCodesLOV</p>
     * Return list of values for hotel alert codes
     */
    async getAlertCodesLOVRaw(requestParameters: GetAlertCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for alert codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAlertCodesLOV</p>
     * Return list of values for hotel alert codes
     */
    async getAlertCodesLOV(requestParameters: GetAlertCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAlertCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for all revenue types based on search criteria such as interfaceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAllRevenueTypesLOV</p>
     * Return list of values for all revenue types
     */
    async getAllRevenueTypesLOVRaw(requestParameters: GetAllRevenueTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/interfaceId/{interfaceId}/allRevenueTypes`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for all revenue types based on search criteria such as interfaceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAllRevenueTypesLOV</p>
     * Return list of values for all revenue types
     */
    async getAllRevenueTypesLOV(requestParameters: GetAllRevenueTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAllRevenueTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for allowed hotel interface rights for a specific property based on search criteria such as interfaceRowId, interfaceType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAllowedHotelInterfaceRightsLOV</p>
     * Return list of values for hotel allowed hotel interface rights
     */
    async getAllowedHotelInterfaceRightsLOVRaw(requestParameters: GetAllowedHotelInterfaceRightsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceType/{interfaceType}/interfaceRowId/{interfaceRowId}/allowedHotelInterfaceRights`.replace(`{${"interfaceRowId"}}`, encodeURIComponent(String(requestParameters.interfaceRowId))).replace(`{${"interfaceType"}}`, encodeURIComponent(String(requestParameters.interfaceType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for allowed hotel interface rights for a specific property based on search criteria such as interfaceRowId, interfaceType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAllowedHotelInterfaceRightsLOV</p>
     * Return list of values for hotel allowed hotel interface rights
     */
    async getAllowedHotelInterfaceRightsLOV(requestParameters: GetAllowedHotelInterfaceRightsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAllowedHotelInterfaceRightsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for alternate hotel codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAlternateHotelCodesLOV</p>
     * Return list of values for hotel alternate hotel codes
     */
    async getAlternateHotelCodesLOVRaw(requestParameters: GetAlternateHotelCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/alternateHotelCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for alternate hotel codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAlternateHotelCodesLOV</p>
     * Return list of values for hotel alternate hotel codes
     */
    async getAlternateHotelCodesLOV(requestParameters: GetAlternateHotelCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAlternateHotelCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for amenities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAmenitiesLOV</p>
     * Return list of values for hotel amenities
     */
    async getAmenitiesLOVRaw(requestParameters: GetAmenitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for amenities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAmenitiesLOV</p>
     * Return list of values for hotel amenities
     */
    async getAmenitiesLOV(requestParameters: GetAmenitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAmenitiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for application modules for a specific property based on search criteria such as relModuleName, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getApplicationModulesLOV</p>
     * Return list of values for hotel application modules
     */
    async getApplicationModulesLOVRaw(requestParameters: GetApplicationModulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/relModuleName/{relModuleName}/applicationModules`.replace(`{${"relModuleName"}}`, encodeURIComponent(String(requestParameters.relModuleName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for application modules for a specific property based on search criteria such as relModuleName, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getApplicationModulesLOV</p>
     * Return list of values for hotel application modules
     */
    async getApplicationModulesLOV(requestParameters: GetApplicationModulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getApplicationModulesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for application settings based on search criteria such as settingName, levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getApplicationSettingsLOV</p>
     * Return list of values for application settings
     */
    async getApplicationSettingsLOVRaw(requestParameters: GetApplicationSettingsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/levelCode/{levelCode}/settingName/{settingName}/applicationSettings`.replace(`{${"settingName"}}`, encodeURIComponent(String(requestParameters.settingName))).replace(`{${"levelCode"}}`, encodeURIComponent(String(requestParameters.levelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for application settings based on search criteria such as settingName, levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getApplicationSettingsLOV</p>
     * Return list of values for application settings
     */
    async getApplicationSettingsLOV(requestParameters: GetApplicationSettingsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getApplicationSettingsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for arrangement codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArrangementCodeLOV</p>
     * Return list of values for hotel arrangement codes
     */
    async getArrangementCodeLOVRaw(requestParameters: GetArrangementCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arrangementCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for arrangement codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArrangementCodeLOV</p>
     * Return list of values for hotel arrangement codes
     */
    async getArrangementCodeLOV(requestParameters: GetArrangementCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getArrangementCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for arrangement code numbers based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArrangementCodesNumberLOV</p>
     * Return list of values for arrangement code numbers
     */
    async getArrangementCodesNumberLOVRaw(requestParameters: GetArrangementCodesNumberLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/type/{type}/arrangementCodesNumber`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for arrangement code numbers based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArrangementCodesNumberLOV</p>
     * Return list of values for arrangement code numbers
     */
    async getArrangementCodesNumberLOV(requestParameters: GetArrangementCodesNumberLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getArrangementCodesNumberLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for article codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArticleCodesLOV</p>
     * Return list of values for hotel article codes
     */
    async getArticleCodesLOVRaw(requestParameters: GetArticleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/articleCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for article codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getArticleCodesLOV</p>
     * Return list of values for hotel article codes
     */
    async getArticleCodesLOV(requestParameters: GetArticleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getArticleCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for assign rooms for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAssignRoomsLOV</p>
     * Return list of values for hotel assign rooms
     */
    async getAssignRoomsLOVRaw(requestParameters: GetAssignRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/room/{room}/assignRooms`.replace(`{${"room"}}`, encodeURIComponent(String(requestParameters.room))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for assign rooms for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAssignRoomsLOV</p>
     * Return list of values for hotel assign rooms
     */
    async getAssignRoomsLOV(requestParameters: GetAssignRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAssignRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for attractions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAttractionsLOV</p>
     * Return list of values for hotel attractions
     */
    async getAttractionsLOVRaw(requestParameters: GetAttractionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for attractions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAttractionsLOV</p>
     * Return list of values for hotel attractions
     */
    async getAttractionsLOV(requestParameters: GetAttractionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAttractionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for authorizers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAuthorizerLOV</p>
     * Return list of values for hotel authorizers
     */
    async getAuthorizerLOVRaw(requestParameters: GetAuthorizerLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/authorizer`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for authorizers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAuthorizerLOV</p>
     * Return list of values for hotel authorizers
     */
    async getAuthorizerLOV(requestParameters: GetAuthorizerLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAuthorizerLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for auto number generator based on search criteria such as number, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAutoNumberGeneratorLOV</p>
     * Return list of values for auto number generator
     */
    async getAutoNumberGeneratorLOVRaw(requestParameters: GetAutoNumberGeneratorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/number/{number}/autoNumberGenerator`.replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for auto number generator based on search criteria such as number, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAutoNumberGeneratorLOV</p>
     * Return list of values for auto number generator
     */
    async getAutoNumberGeneratorLOV(requestParameters: GetAutoNumberGeneratorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAutoNumberGeneratorLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for auto trace expression fields based on search criteria such as traceGroup, tableName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAutoTraceExpressionFieldsLOV</p>
     * Return list of values for auto trace expression fields
     */
    async getAutoTraceExpressionFieldsLOVRaw(requestParameters: GetAutoTraceExpressionFieldsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/tableName/{tableName}/traceGroup/{traceGroup}/autoTraceExpressionFields`.replace(`{${"traceGroup"}}`, encodeURIComponent(String(requestParameters.traceGroup))).replace(`{${"tableName"}}`, encodeURIComponent(String(requestParameters.tableName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for auto trace expression fields based on search criteria such as traceGroup, tableName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAutoTraceExpressionFieldsLOV</p>
     * Return list of values for auto trace expression fields
     */
    async getAutoTraceExpressionFieldsLOV(requestParameters: GetAutoTraceExpressionFieldsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAutoTraceExpressionFieldsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for available export templates for a specific property based on search criteria such as fileGroup, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableExportTemplatesLOV</p>
     * Return list of values for hotel available export templates
     */
    async getAvailableExportTemplatesLOVRaw(requestParameters: GetAvailableExportTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fileGroup/{fileGroup}/availableExportTemplates`.replace(`{${"fileGroup"}}`, encodeURIComponent(String(requestParameters.fileGroup))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for available export templates for a specific property based on search criteria such as fileGroup, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableExportTemplatesLOV</p>
     * Return list of values for hotel available export templates
     */
    async getAvailableExportTemplatesLOV(requestParameters: GetAvailableExportTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAvailableExportTemplatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for available profile owner rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableProfileOwnerRoomsLOV</p>
     * Return list of values for hotel available profile owner rooms
     */
    async getAvailableProfileOwnerRoomsLOVRaw(requestParameters: GetAvailableProfileOwnerRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/availableProfileOwnerRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for available profile owner rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableProfileOwnerRoomsLOV</p>
     * Return list of values for hotel available profile owner rooms
     */
    async getAvailableProfileOwnerRoomsLOV(requestParameters: GetAvailableProfileOwnerRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAvailableProfileOwnerRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for available room components for a specific property based on search criteria such as roomNumber, roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableRoomComponentsLOV</p>
     * Return list of values for hotel available room components
     */
    async getAvailableRoomComponentsLOVRaw(requestParameters: GetAvailableRoomComponentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomType/{roomType}/roomNumber/{roomNumber}/availableRoomComponents`.replace(`{${"roomNumber"}}`, encodeURIComponent(String(requestParameters.roomNumber))).replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for available room components for a specific property based on search criteria such as roomNumber, roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableRoomComponentsLOV</p>
     * Return list of values for hotel available room components
     */
    async getAvailableRoomComponentsLOV(requestParameters: GetAvailableRoomComponentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAvailableRoomComponentsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for available room type components for a specific property based on search criteria such as roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableRoomTypeComponentsLOV</p>
     * Return list of values for hotel available room type components
     */
    async getAvailableRoomTypeComponentsLOVRaw(requestParameters: GetAvailableRoomTypeComponentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomType/{roomType}/availableRoomTypeComponents`.replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for available room type components for a specific property based on search criteria such as roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableRoomTypeComponentsLOV</p>
     * Return list of values for hotel available room type components
     */
    async getAvailableRoomTypeComponentsLOV(requestParameters: GetAvailableRoomTypeComponentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAvailableRoomTypeComponentsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for available script languages for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableScriptLanguagesLOV</p>
     * Return list of values for hotel available script languages
     */
    async getAvailableScriptLanguagesLOVRaw(requestParameters: GetAvailableScriptLanguagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/availableScriptLanguages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for available script languages for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAvailableScriptLanguagesLOV</p>
     * Return list of values for hotel available script languages
     */
    async getAvailableScriptLanguagesLOV(requestParameters: GetAvailableScriptLanguagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAvailableScriptLanguagesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for award codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardCodesLOV</p>
     * Return list of values for hotel award codes
     */
    async getAwardCodesLOVRaw(requestParameters: GetAwardCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/awardCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for award codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardCodesLOV</p>
     * Return list of values for hotel award codes
     */
    async getAwardCodesLOV(requestParameters: GetAwardCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAwardCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for award codes multi hotel for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardCodesMultiHotelLOV</p>
     * Return list of values for hotel award codes multi hotel
     */
    async getAwardCodesMultiHotelLOVRaw(requestParameters: GetAwardCodesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/awardCodesMultiHotel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for award codes multi hotel for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardCodesMultiHotelLOV</p>
     * Return list of values for hotel award codes multi hotel
     */
    async getAwardCodesMultiHotelLOV(requestParameters: GetAwardCodesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAwardCodesMultiHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for award marketing codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardMktgCodesLOV</p>
     * Return list of values for hotel award marketing codes
     */
    async getAwardMktgCodesLOVRaw(requestParameters: GetAwardMktgCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/awardMktgCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for award marketing codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardMktgCodesLOV</p>
     * Return list of values for hotel award marketing codes
     */
    async getAwardMktgCodesLOV(requestParameters: GetAwardMktgCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAwardMktgCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for award payments for a specific property based on search criteria such as membershipType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardPaymentLOV</p>
     * Return list of values for hotel award payments
     */
    async getAwardPaymentLOVRaw(requestParameters: GetAwardPaymentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipType/{membershipType}/awardPayment`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for award payments for a specific property based on search criteria such as membershipType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getAwardPaymentLOV</p>
     * Return list of values for hotel award payments
     */
    async getAwardPaymentLOV(requestParameters: GetAwardPaymentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getAwardPaymentLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for bank accounts for reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBankAccountsForReportsLOV</p>
     * Return list of values for hotel bank accounts for reports
     */
    async getBankAccountsForReportsLOVRaw(requestParameters: GetBankAccountsForReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bankAccountsForReports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for bank accounts for reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBankAccountsForReportsLOV</p>
     * Return list of values for hotel bank accounts for reports
     */
    async getBankAccountsForReportsLOV(requestParameters: GetBankAccountsForReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBankAccountsForReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for bank accounts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBankAccountsLOV</p>
     * Return list of values for hotel bank accounts
     */
    async getBankAccountsLOVRaw(requestParameters: GetBankAccountsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bankAccounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for bank accounts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBankAccountsLOV</p>
     * Return list of values for hotel bank accounts
     */
    async getBankAccountsLOV(requestParameters: GetBankAccountsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBankAccountsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for banquet printing methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBanquetPrintingMethodLOV</p>
     * Return list of values for hotel banquet printing methods
     */
    async getBanquetPrintingMethodLOVRaw(requestParameters: GetBanquetPrintingMethodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/banquetPrintingMethod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for banquet printing methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBanquetPrintingMethodLOV</p>
     * Return list of values for hotel banquet printing methods
     */
    async getBanquetPrintingMethodLOV(requestParameters: GetBanquetPrintingMethodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBanquetPrintingMethodLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for billing instructions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBillingInstructionsLOV</p>
     * Return list of values for hotel billing instructions
     */
    async getBillingInstructionsLOVRaw(requestParameters: GetBillingInstructionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/billingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for billing instructions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBillingInstructionsLOV</p>
     * Return list of values for hotel billing instructions
     */
    async getBillingInstructionsLOV(requestParameters: GetBillingInstructionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBillingInstructionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block booking statuses based on search criteria such as blockId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockBookingStatusesLOV</p>
     * Return list of values for block booking statuses
     */
    async getBlockBookingStatusesLOVRaw(requestParameters: GetBlockBookingStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/blockId/{blockId}/blockBookingStatuses`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block booking statuses based on search criteria such as blockId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockBookingStatusesLOV</p>
     * Return list of values for block booking statuses
     */
    async getBlockBookingStatusesLOV(requestParameters: GetBlockBookingStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockBookingStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block cat next statuses based on search criteria such as catStatus, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCatNextStatusesLOV</p>
     * Return list of values for block cat next statuses
     */
    async getBlockCatNextStatusesLOVRaw(requestParameters: GetBlockCatNextStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/catStatus/{catStatus}/blockCatNextStatuses`.replace(`{${"catStatus"}}`, encodeURIComponent(String(requestParameters.catStatus))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block cat next statuses based on search criteria such as catStatus, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCatNextStatusesLOV</p>
     * Return list of values for block cat next statuses
     */
    async getBlockCatNextStatusesLOV(requestParameters: GetBlockCatNextStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockCatNextStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block codes by arrival date for a specific property based on search criteria such as arrivalDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesByArrivalDateLOV</p>
     * Return list of values for hotel block codes by arrival date
     */
    async getBlockCodesByArrivalDateLOVRaw(requestParameters: GetBlockCodesByArrivalDateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arrivalDate/{arrivalDate}/blockCodesByArrivalDate`.replace(`{${"arrivalDate"}}`, encodeURIComponent(String(requestParameters.arrivalDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block codes by arrival date for a specific property based on search criteria such as arrivalDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesByArrivalDateLOV</p>
     * Return list of values for hotel block codes by arrival date
     */
    async getBlockCodesByArrivalDateLOV(requestParameters: GetBlockCodesByArrivalDateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockCodesByArrivalDateLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotel block codes financial operations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesFinOperationsLOV</p>
     * Return list of values for hotel block codes financial operations
     */
    async getBlockCodesFinOperationsLOVRaw(requestParameters: GetBlockCodesFinOperationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/blockCodesFinOperations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotel block codes financial operations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesFinOperationsLOV</p>
     * Return list of values for hotel block codes financial operations
     */
    async getBlockCodesFinOperationsLOV(requestParameters: GetBlockCodesFinOperationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockCodesFinOperationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block codes for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesLOV</p>
     * Return list of values for hotel block codes
     */
    async getBlockCodesLOVRaw(requestParameters: GetBlockCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beginDate/{beginDate}/endDate/{endDate}/blockCodes`.replace(`{${"endDate"}}`, encodeURIComponent(String(requestParameters.endDate))).replace(`{${"beginDate"}}`, encodeURIComponent(String(requestParameters.beginDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block codes for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockCodesLOV</p>
     * Return list of values for hotel block codes
     */
    async getBlockCodesLOV(requestParameters: GetBlockCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block current statuses based on search criteria such as blockId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockBookingStatusesLOV</p>
     * Return list of values for block current statuses
     */
    async getBlockCurrentStatusesLOVRaw(requestParameters: GetBlockCurrentStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/blockId/{blockId}/blockCurrentStatuses`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block current statuses based on search criteria such as blockId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockBookingStatusesLOV</p>
     * Return list of values for block current statuses
     */
    async getBlockCurrentStatusesLOV(requestParameters: GetBlockCurrentStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockCurrentStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block event Ids for a specific property based on search criteria such as blockId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockEventIdsLOV</p>
     * Return list of values for hotel block event Ids
     */
    async getBlockEventIdsLOVRaw(requestParameters: GetBlockEventIdsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/blockId/{blockId}/blockEventIds`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block event Ids for a specific property based on search criteria such as blockId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockEventIdsLOV</p>
     * Return list of values for hotel block event Ids
     */
    async getBlockEventIdsLOV(requestParameters: GetBlockEventIdsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockEventIdsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotel block events for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockEventsLOV</p>
     * Return list of values for hotel block events
     */
    async getBlockEventsLOVRaw(requestParameters: GetBlockEventsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/blockEvents`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotel block events for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockEventsLOV</p>
     * Return list of values for hotel block events
     */
    async getBlockEventsLOV(requestParameters: GetBlockEventsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockEventsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block Ids for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockIdsLOV</p>
     * Return list of values for hotel block Ids
     */
    async getBlockIdsLOVRaw(requestParameters: GetBlockIdsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beginDate/{beginDate}/endDate/{endDate}/blockIds`.replace(`{${"endDate"}}`, encodeURIComponent(String(requestParameters.endDate))).replace(`{${"beginDate"}}`, encodeURIComponent(String(requestParameters.beginDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block Ids for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockIdsLOV</p>
     * Return list of values for hotel block Ids
     */
    async getBlockIdsLOV(requestParameters: GetBlockIdsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockIdsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block modes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockModeLovLOV</p>
     * Return list of values for hotel block modes
     */
    async getBlockModeLovLOVRaw(requestParameters: GetBlockModeLovLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/blockModeLov`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block modes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockModeLovLOV</p>
     * Return list of values for hotel block modes
     */
    async getBlockModeLovLOV(requestParameters: GetBlockModeLovLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockModeLovLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block next statuses based on search criteria such as bookingStatus, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockNextStatusesLOV</p>
     * Return list of values for block next statuses
     */
    async getBlockNextStatusesLOVRaw(requestParameters: GetBlockNextStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingStatus/{bookingStatus}/blockNextStatuses`.replace(`{${"bookingStatus"}}`, encodeURIComponent(String(requestParameters.bookingStatus))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block next statuses based on search criteria such as bookingStatus, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockNextStatusesLOV</p>
     * Return list of values for block next statuses
     */
    async getBlockNextStatusesLOV(requestParameters: GetBlockNextStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockNextStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockPaymentMethodsLOV</p>
     * Return list of values for hotel block payment methods
     */
    async getBlockPaymentMethodsLOVRaw(requestParameters: GetBlockPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/blockPaymentMethods`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockPaymentMethodsLOV</p>
     * Return list of values for hotel block payment methods
     */
    async getBlockPaymentMethodsLOV(requestParameters: GetBlockPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockPaymentMethodsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block rate codes for a specific property based on search criteria such as negotiatedOnly, endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockRateCodesLOV</p>
     * Return list of values for hotel block rate codes
     */
    async getBlockRateCodesLOVRaw(requestParameters: GetBlockRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beginDate/{beginDate}/endDate/{endDate}/negotiatedOnly/{negotiatedOnly}/blockRateCodes`.replace(`{${"negotiatedOnly"}}`, encodeURIComponent(String(requestParameters.negotiatedOnly))).replace(`{${"endDate"}}`, encodeURIComponent(String(requestParameters.endDate))).replace(`{${"beginDate"}}`, encodeURIComponent(String(requestParameters.beginDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block rate codes for a specific property based on search criteria such as negotiatedOnly, endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockRateCodesLOV</p>
     * Return list of values for hotel block rate codes
     */
    async getBlockRateCodesLOV(requestParameters: GetBlockRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block rates for a specific property based on search criteria such as blockId, departure, arrival, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockRatesLOV</p>
     * Return list of values for hotel block rates
     */
    async getBlockRatesLOVRaw(requestParameters: GetBlockRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arrival/{arrival}/departure/{departure}/blockId/{blockId}/blockRates`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"departure"}}`, encodeURIComponent(String(requestParameters.departure))).replace(`{${"arrival"}}`, encodeURIComponent(String(requestParameters.arrival))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block rates for a specific property based on search criteria such as blockId, departure, arrival, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockRatesLOV</p>
     * Return list of values for hotel block rates
     */
    async getBlockRatesLOV(requestParameters: GetBlockRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockRatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for block reservation types for a specific property based on search criteria such as bookingStatus, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockReservationTypesLOV</p>
     * Return list of values for hotel block reservation types
     */
    async getBlockReservationTypesLOVRaw(requestParameters: GetBlockReservationTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bookingStatus/{bookingStatus}/blockReservationTypes`.replace(`{${"bookingStatus"}}`, encodeURIComponent(String(requestParameters.bookingStatus))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for block reservation types for a specific property based on search criteria such as bookingStatus, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBlockReservationTypesLOV</p>
     * Return list of values for hotel block reservation types
     */
    async getBlockReservationTypesLOV(requestParameters: GetBlockReservationTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBlockReservationTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for booking channel rate plans for a specific property based on search criteria such as channel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingChannelRatePlansLOV</p>
     * Return list of values for hotel booking channel rate plans
     */
    async getBookingChannelRatePlansLOVRaw(requestParameters: GetBookingChannelRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/channel/{channel}/bookingChannelRatePlans`.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters.channel))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for booking channel rate plans for a specific property based on search criteria such as channel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingChannelRatePlansLOV</p>
     * Return list of values for hotel booking channel rate plans
     */
    async getBookingChannelRatePlansLOV(requestParameters: GetBookingChannelRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBookingChannelRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for booking channel room types based on search criteria such as channel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingChannelRoomTypesLOV</p>
     * Return list of values for booking channel room types
     */
    async getBookingChannelRoomTypesLOVRaw(requestParameters: GetBookingChannelRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/channel/{channel}/bookingChannelRoomTypes`.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters.channel))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for booking channel room types based on search criteria such as channel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingChannelRoomTypesLOV</p>
     * Return list of values for booking channel room types
     */
    async getBookingChannelRoomTypesLOV(requestParameters: GetBookingChannelRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBookingChannelRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for booking types individuals for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingTypesIndividualsLOV</p>
     * Return list of values for hotel booking types individuals
     */
    async getBookingTypesIndividualsLOVRaw(requestParameters: GetBookingTypesIndividualsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bookingTypesIndividuals`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for booking types individuals for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBookingTypesIndividualsLOV</p>
     * Return list of values for hotel booking types individuals
     */
    async getBookingTypesIndividualsLOV(requestParameters: GetBookingTypesIndividualsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBookingTypesIndividualsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for budget forecast codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBudgetForecastCodesLOV</p>
     * Return list of values for hotel budget forecast codes
     */
    async getBudgetForecastCodesLOVRaw(requestParameters: GetBudgetForecastCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/budgetForecastCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for budget forecast codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBudgetForecastCodesLOV</p>
     * Return list of values for hotel budget forecast codes
     */
    async getBudgetForecastCodesLOV(requestParameters: GetBudgetForecastCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBudgetForecastCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for budget rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBudgetRateCodesLOV</p>
     * Return list of values for hotel budget rate codes
     */
    async getBudgetRateCodesLOVRaw(requestParameters: GetBudgetRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/budgetRateCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for budget rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBudgetRateCodesLOV</p>
     * Return list of values for hotel budget rate codes
     */
    async getBudgetRateCodesLOV(requestParameters: GetBudgetRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBudgetRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for business event action type external databases for a specific property based on search criteria such as databaseId, extSystem, module, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBusinessEventActionTypeExtDBLOV</p>
     * Return list of values for hotel business event action type external databases
     */
    async getBusinessEventActionTypeExtDBLOVRaw(requestParameters: GetBusinessEventActionTypeExtDBLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/module/{module}/extSystem/{extSystem}/databaseId/{databaseId}/businessEventActionTypeExtDB`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))).replace(`{${"extSystem"}}`, encodeURIComponent(String(requestParameters.extSystem))).replace(`{${"module"}}`, encodeURIComponent(String(requestParameters.module))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for business event action type external databases for a specific property based on search criteria such as databaseId, extSystem, module, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBusinessEventActionTypeExtDBLOV</p>
     * Return list of values for hotel business event action type external databases
     */
    async getBusinessEventActionTypeExtDBLOV(requestParameters: GetBusinessEventActionTypeExtDBLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBusinessEventActionTypeExtDBLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for business event action types for a specific property based on search criteria such as module, extSystem, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBusinessEventActionTypeLOV</p>
     * Return list of values for hotel business event action types
     */
    async getBusinessEventActionTypeLOVRaw(requestParameters: GetBusinessEventActionTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/extSystem/{extSystem}/module/{module}/businessEventActionType`.replace(`{${"module"}}`, encodeURIComponent(String(requestParameters.module))).replace(`{${"extSystem"}}`, encodeURIComponent(String(requestParameters.extSystem))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for business event action types for a specific property based on search criteria such as module, extSystem, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getBusinessEventActionTypeLOV</p>
     * Return list of values for hotel business event action types
     */
    async getBusinessEventActionTypeLOV(requestParameters: GetBusinessEventActionTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getBusinessEventActionTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for campaign activity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCampaignActivityTypesLOV</p>
     * Return list of values for hotel campaign activity types
     */
    async getCampaignActivityTypesLOVRaw(requestParameters: GetCampaignActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/campaignActivityTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for campaign activity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCampaignActivityTypesLOV</p>
     * Return list of values for hotel campaign activity types
     */
    async getCampaignActivityTypesLOV(requestParameters: GetCampaignActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCampaignActivityTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for cash register ids for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCashRegisterIDLOV</p>
     * Return list of values for hotel cash register ids
     */
    async getCashRegisterIDLOVRaw(requestParameters: GetCashRegisterIDLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/cashRegisterId`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for cash register ids for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCashRegisterIDLOV</p>
     * Return list of values for hotel cash register ids
     */
    async getCashRegisterIDLOV(requestParameters: GetCashRegisterIDLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCashRegisterIDLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for cashier hotels based on search criteria such as cashierId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCashierHotelsLOV</p>
     * Return list of values for cashier hotels
     */
    async getCashierHotelsLOVRaw(requestParameters: GetCashierHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/cashierId/{cashierId}/cashierHotels`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for cashier hotels based on search criteria such as cashierId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCashierHotelsLOV</p>
     * Return list of values for cashier hotels
     */
    async getCashierHotelsLOV(requestParameters: GetCashierHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCashierHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering budget type event codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeEventCodesLOV</p>
     * Return list of values for hotel catering budget type event codes
     */
    async getCatBudgetTypeEventCodesLOVRaw(requestParameters: GetCatBudgetTypeEventCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/catBudgetType/{catBudgetType}/catBudgetTypeEventCodes`.replace(`{${"catBudgetType"}}`, encodeURIComponent(String(requestParameters.catBudgetType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering budget type event codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeEventCodesLOV</p>
     * Return list of values for hotel catering budget type event codes
     */
    async getCatBudgetTypeEventCodesLOV(requestParameters: GetCatBudgetTypeEventCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCatBudgetTypeEventCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering budget type market codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeMarketCodesLOV</p>
     * Return list of values for hotel catering budget type market codes
     */
    async getCatBudgetTypeMarketCodesLOVRaw(requestParameters: GetCatBudgetTypeMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/catBudgetType/{catBudgetType}/catBudgetTypeMarketCodes`.replace(`{${"catBudgetType"}}`, encodeURIComponent(String(requestParameters.catBudgetType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering budget type market codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeMarketCodesLOV</p>
     * Return list of values for hotel catering budget type market codes
     */
    async getCatBudgetTypeMarketCodesLOV(requestParameters: GetCatBudgetTypeMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCatBudgetTypeMarketCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering budget type meal codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeMealCodesLOV</p>
     * Return list of values for hotel catering budget type meal codes
     */
    async getCatBudgetTypeMealCodesLOVRaw(requestParameters: GetCatBudgetTypeMealCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/catBudgetType/{catBudgetType}/catBudgetTypeMealCodes`.replace(`{${"catBudgetType"}}`, encodeURIComponent(String(requestParameters.catBudgetType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering budget type meal codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeMealCodesLOV</p>
     * Return list of values for hotel catering budget type meal codes
     */
    async getCatBudgetTypeMealCodesLOV(requestParameters: GetCatBudgetTypeMealCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCatBudgetTypeMealCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering budget type revenue codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeRevenueCodesLOV</p>
     * Return list of values for hotel catering budget type revenue codes
     */
    async getCatBudgetTypeRevenueCodesLOVRaw(requestParameters: GetCatBudgetTypeRevenueCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/catBudgetType/{catBudgetType}/catBudgetTypeRevenueCodes`.replace(`{${"catBudgetType"}}`, encodeURIComponent(String(requestParameters.catBudgetType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering budget type revenue codes for a specific property based on search criteria such as catBudgetType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCatBudgetTypeRevenueCodesLOV</p>
     * Return list of values for hotel catering budget type revenue codes
     */
    async getCatBudgetTypeRevenueCodesLOV(requestParameters: GetCatBudgetTypeRevenueCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCatBudgetTypeRevenueCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering budget types based on search criteria such as active, catering, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringBudgetTypesLOV</p>
     * Return list of values for catering budget types
     */
    async getCateringBudgetTypesLOVRaw(requestParameters: GetCateringBudgetTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/catering/{catering}/active/{active}/cateringBudgetTypes`.replace(`{${"active"}}`, encodeURIComponent(String(requestParameters.active))).replace(`{${"catering"}}`, encodeURIComponent(String(requestParameters.catering))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering budget types based on search criteria such as active, catering, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringBudgetTypesLOV</p>
     * Return list of values for catering budget types
     */
    async getCateringBudgetTypesLOV(requestParameters: GetCateringBudgetTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringBudgetTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering codes based on search criteria such as codeType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringCodesLOV</p>
     * Return list of values for catering codes
     */
    async getCateringCodesLOVRaw(requestParameters: GetCateringCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/codeType/{codeType}/cateringCodes`.replace(`{${"codeType"}}`, encodeURIComponent(String(requestParameters.codeType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering codes based on search criteria such as codeType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringCodesLOV</p>
     * Return list of values for catering codes
     */
    async getCateringCodesLOV(requestParameters: GetCateringCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering event status based on search criteria such as waitList, newEvent, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringEventStatusLOV</p>
     * Return list of values for catering event status
     */
    async getCateringEventStatusLOVRaw(requestParameters: GetCateringEventStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/newEvent/{newEvent}/waitList/{waitList}/cateringEventStatus`.replace(`{${"waitList"}}`, encodeURIComponent(String(requestParameters.waitList))).replace(`{${"newEvent"}}`, encodeURIComponent(String(requestParameters.newEvent))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering event status based on search criteria such as waitList, newEvent, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringEventStatusLOV</p>
     * Return list of values for catering event status
     */
    async getCateringEventStatusLOV(requestParameters: GetCateringEventStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringEventStatusLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering package codes for a specific property based on search criteria such as hotelId, radioType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageCodesLOV</p>
     * Return list of values for hotel catering package codes
     */
    async getCateringPackageCodesLOVRaw(requestParameters: GetCateringPackageCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/radioType/{radioType}/hotels/{hotelId}/cateringPackageCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"radioType"}}`, encodeURIComponent(String(requestParameters.radioType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering package codes for a specific property based on search criteria such as hotelId, radioType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageCodesLOV</p>
     * Return list of values for hotel catering package codes
     */
    async getCateringPackageCodesLOV(requestParameters: GetCateringPackageCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringPackageCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering package price codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackagePriceCodesLOV</p>
     * Return list of values for hotel catering package price codes
     */
    async getCateringPackagePriceCodesLOVRaw(requestParameters: GetCateringPackagePriceCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/cateringPackagePriceCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering package price codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackagePriceCodesLOV</p>
     * Return list of values for hotel catering package price codes
     */
    async getCateringPackagePriceCodesLOV(requestParameters: GetCateringPackagePriceCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringPackagePriceCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering package revenue config event types based on search criteria such as pkgLinkId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageRevenueConfigEventTypeLOV</p>
     * Return list of values for catering package revenue config event types
     */
    async getCateringPackageRevenueConfigEventTypeLOVRaw(requestParameters: GetCateringPackageRevenueConfigEventTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/pkgLinkId/{pkgLinkId}/cateringPackageRevenueConfigEventType`.replace(`{${"pkgLinkId"}}`, encodeURIComponent(String(requestParameters.pkgLinkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering package revenue config event types based on search criteria such as pkgLinkId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageRevenueConfigEventTypeLOV</p>
     * Return list of values for catering package revenue config event types
     */
    async getCateringPackageRevenueConfigEventTypeLOV(requestParameters: GetCateringPackageRevenueConfigEventTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringPackageRevenueConfigEventTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering package revenue event types based on search criteria such as pkgId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageRevenueEventTypeLOV</p>
     * Return list of values for catering package revenue event types
     */
    async getCateringPackageRevenueEventTypeLOVRaw(requestParameters: GetCateringPackageRevenueEventTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/pkgId/{pkgId}/cateringPackageRevenueEventType`.replace(`{${"pkgId"}}`, encodeURIComponent(String(requestParameters.pkgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering package revenue event types based on search criteria such as pkgId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringPackageRevenueEventTypeLOV</p>
     * Return list of values for catering package revenue event types
     */
    async getCateringPackageRevenueEventTypeLOV(requestParameters: GetCateringPackageRevenueEventTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringPackageRevenueEventTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering setup styles for a specific property based on search criteria such as space, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringSetupStylesLOV</p>
     * Return list of values for hotel catering setup styles
     */
    async getCateringSetupStylesLOVRaw(requestParameters: GetCateringSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/space/{space}/cateringSetupStyles`.replace(`{${"space"}}`, encodeURIComponent(String(requestParameters.space))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering setup styles for a specific property based on search criteria such as space, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringSetupStylesLOV</p>
     * Return list of values for hotel catering setup styles
     */
    async getCateringSetupStylesLOV(requestParameters: GetCateringSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringSetupStylesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for catering status codes based on search criteria such as exclusionList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringStatusCodesLOV</p>
     * Return list of values for catering status codes
     */
    async getCateringStatusCodesLOVRaw(requestParameters: GetCateringStatusCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/exclusionList/{exclusionList}/cateringStatusCodes`.replace(`{${"exclusionList"}}`, encodeURIComponent(String(requestParameters.exclusionList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for catering status codes based on search criteria such as exclusionList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCateringStatusCodesLOV</p>
     * Return list of values for catering status codes
     */
    async getCateringStatusCodesLOV(requestParameters: GetCateringStatusCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCateringStatusCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for chain languages based on search criteria such as chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChainLanguagesLOV</p>
     * Return list of values for chain languages
     */
    async getChainLanguagesLOVRaw(requestParameters: GetChainLanguagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/chainCode/{chainCode}/chainLanguages`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for chain languages based on search criteria such as chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChainLanguagesLOV</p>
     * Return list of values for chain languages
     */
    async getChainLanguagesLOV(requestParameters: GetChainLanguagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChainLanguagesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for channel card type mappings for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingCardTypeLOV</p>
     * Return list of values for hotel channel card type mappings
     */
    async getChannelCardTypeMappingCardTypeLOVRaw(requestParameters: GetChannelCardTypeMappingCardTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/channelCardTypeMappingCardType`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for channel card type mappings for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingCardTypeLOV</p>
     * Return list of values for hotel channel card type mappings
     */
    async getChannelCardTypeMappingCardTypeLOV(requestParameters: GetChannelCardTypeMappingCardTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChannelCardTypeMappingCardTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for channel card type mappings based on search criteria such as cardType, gdsHost, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingChannelCardTypeLOV</p>
     * Return list of values for channel card type mappings
     */
    async getChannelCardTypeMappingChannelCardTypeLOVRaw(requestParameters: GetChannelCardTypeMappingChannelCardTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/gdsHost/{gdsHost}/cardType/{cardType}/channelCardTypeMappingChannelCardType`.replace(`{${"cardType"}}`, encodeURIComponent(String(requestParameters.cardType))).replace(`{${"gdsHost"}}`, encodeURIComponent(String(requestParameters.gdsHost))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for channel card type mappings based on search criteria such as cardType, gdsHost, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingChannelCardTypeLOV</p>
     * Return list of values for channel card type mappings
     */
    async getChannelCardTypeMappingChannelCardTypeLOV(requestParameters: GetChannelCardTypeMappingChannelCardTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChannelCardTypeMappingChannelCardTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for channel card type mappings gds host for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingGdsHostLOV</p>
     * Return list of values for hotel channel card type mappings gds host
     */
    async getChannelCardTypeMappingGdsHostLOVRaw(requestParameters: GetChannelCardTypeMappingGdsHostLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/channelCardTypeMappingGdsHost`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for channel card type mappings gds host for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelCardTypeMappingGdsHostLOV</p>
     * Return list of values for hotel channel card type mappings gds host
     */
    async getChannelCardTypeMappingGdsHostLOV(requestParameters: GetChannelCardTypeMappingGdsHostLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChannelCardTypeMappingGdsHostLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for channel configuration rate codes for a specific property based on search criteria such as roomType, bookingChannelCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelConfigRateCodesLOV</p>
     * Return list of values for hotel channel configuration rate codes
     */
    async getChannelConfigRateCodesLOVRaw(requestParameters: GetChannelConfigRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bookingChannels/{bookingChannelCode}/roomType/{roomType}/channelConfigRateCodes`.replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"bookingChannelCode"}}`, encodeURIComponent(String(requestParameters.bookingChannelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for channel configuration rate codes for a specific property based on search criteria such as roomType, bookingChannelCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelConfigRateCodesLOV</p>
     * Return list of values for hotel channel configuration rate codes
     */
    async getChannelConfigRateCodesLOV(requestParameters: GetChannelConfigRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChannelConfigRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for channel parameters based on search criteria such as channelCode, settingName, levelType, levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelParametersLOV</p>
     * Return list of values for channel parameters
     */
    async getChannelParametersLOVRaw(requestParameters: GetChannelParametersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/levelCode/{levelCode}/levelType/{levelType}/settingName/{settingName}/channelCode/{channelCode}/channelParameters`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"settingName"}}`, encodeURIComponent(String(requestParameters.settingName))).replace(`{${"levelType"}}`, encodeURIComponent(String(requestParameters.levelType))).replace(`{${"levelCode"}}`, encodeURIComponent(String(requestParameters.levelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for channel parameters based on search criteria such as channelCode, settingName, levelType, levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getChannelParametersLOV</p>
     * Return list of values for channel parameters
     */
    async getChannelParametersLOV(requestParameters: GetChannelParametersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getChannelParametersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for claim membership details based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getClaimMembershipDetailsLOV</p>
     * Return list of values for claim membership details
     */
    async getClaimMembershipDetailsLOVRaw(requestParameters: GetClaimMembershipDetailsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/claimMembershipDetails`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for claim membership details based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getClaimMembershipDetailsLOV</p>
     * Return list of values for claim membership details
     */
    async getClaimMembershipDetailsLOV(requestParameters: GetClaimMembershipDetailsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getClaimMembershipDetailsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for commission codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCommissionCodeLOV</p>
     * Return list of values for hotel commission codes
     */
    async getCommissionCodeLOVRaw(requestParameters: GetCommissionCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/commissionCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for commission codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCommissionCodeLOV</p>
     * Return list of values for hotel commission codes
     */
    async getCommissionCodeLOV(requestParameters: GetCommissionCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCommissionCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for commission tansaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCommissionTxnCodesLOV</p>
     * Return list of values for hotel commission transaction codes
     */
    async getCommissionTxnCodesLOVRaw(requestParameters: GetCommissionTxnCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/commissionTxnCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for commission tansaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCommissionTxnCodesLOV</p>
     * Return list of values for hotel commission transaction codes
     */
    async getCommissionTxnCodesLOV(requestParameters: GetCommissionTxnCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCommissionTxnCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for comp authorizers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompAuthorizersLOV</p>
     * Return list of values for hotel comp authorizers
     */
    async getCompAuthorizersLOVRaw(requestParameters: GetCompAuthorizersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/compAuthorizers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for comp authorizers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompAuthorizersLOV</p>
     * Return list of values for hotel comp authorizers
     */
    async getCompAuthorizersLOV(requestParameters: GetCompAuthorizersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCompAuthorizersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for comp types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompTypesLOV</p>
     * Return list of values for hotel comp types
     */
    async getCompTypesLOVRaw(requestParameters: GetCompTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/compTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for comp types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompTypesLOV</p>
     * Return list of values for hotel comp types
     */
    async getCompTypesLOV(requestParameters: GetCompTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCompTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for companies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompaniesLOV</p>
     * Return list of values for hotel companies
     */
    async getCompaniesLOVRaw(requestParameters: GetCompaniesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/companies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for companies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCompaniesLOV</p>
     * Return list of values for hotel companies
     */
    async getCompaniesLOV(requestParameters: GetCompaniesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCompaniesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for confirmation letter reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfLetterReportsLOV</p>
     * Return list of values for hotel confirmation letter reports
     */
    async getConfLetterReportsLOVRaw(requestParameters: GetConfLetterReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/confLetterReports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for confirmation letter reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfLetterReportsLOV</p>
     * Return list of values for hotel confirmation letter reports
     */
    async getConfLetterReportsLOV(requestParameters: GetConfLetterReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConfLetterReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for configuration advanced dynamic base rate plans for a specific property based on search criteria such as tiered, daily, currencyCode, currentRateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigAdvDynamicBaseRatePlansLOV</p>
     * Return list of values for hotel configuration advanced dynamic base rate plans
     */
    async getConfigAdvDynamicBaseRatePlansLOVRaw(requestParameters: GetConfigAdvDynamicBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/currentRateCode/{currentRateCode}/tiered/{tiered}/daily/{daily}/configAdvDynamicBaseRatePlans`.replace(`{${"daily"}}`, encodeURIComponent(String(requestParameters.daily))).replace(`{${"tiered"}}`, encodeURIComponent(String(requestParameters.tiered))).replace(`{${"currentRateCode"}}`, encodeURIComponent(String(requestParameters.currentRateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for configuration advanced dynamic base rate plans for a specific property based on search criteria such as tiered, daily, currencyCode, currentRateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigAdvDynamicBaseRatePlansLOV</p>
     * Return list of values for hotel configuration advanced dynamic base rate plans
     */
    async getConfigAdvDynamicBaseRatePlansLOV(requestParameters: GetConfigAdvDynamicBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConfigAdvDynamicBaseRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for configuration base rate plans for a specific property based on search criteria such as tiered, daily, currencyCode, currentRateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigBaseRatePlansLOV</p>
     * Return list of values for hotel configuration base rate plans
     */
    async getConfigBaseRatePlansLOVRaw(requestParameters: GetConfigBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/currentRateCode/{currentRateCode}/currencyCode/{currencyCode}/daily/{daily}/tiered/{tiered}/configBaseRatePlans`.replace(`{${"tiered"}}`, encodeURIComponent(String(requestParameters.tiered))).replace(`{${"daily"}}`, encodeURIComponent(String(requestParameters.daily))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))).replace(`{${"currentRateCode"}}`, encodeURIComponent(String(requestParameters.currentRateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for configuration base rate plans for a specific property based on search criteria such as tiered, daily, currencyCode, currentRateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigBaseRatePlansLOV</p>
     * Return list of values for hotel configuration base rate plans
     */
    async getConfigBaseRatePlansLOV(requestParameters: GetConfigBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConfigBaseRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for configuration dynamic base rate plans for a specific property based on search criteria such as currentRateCode, tiered, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigDynamicBaseRatePlansLOV</p>
     * Return list of values for hotel configuration dynamic base rate plans
     */
    async getConfigDynamicBaseRatePlansLOVRaw(requestParameters: GetConfigDynamicBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/tiered/{tiered}/currentRateCode/{currentRateCode}/configDynamicBaseRatePlans`.replace(`{${"currentRateCode"}}`, encodeURIComponent(String(requestParameters.currentRateCode))).replace(`{${"tiered"}}`, encodeURIComponent(String(requestParameters.tiered))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for configuration dynamic base rate plans for a specific property based on search criteria such as currentRateCode, tiered, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigDynamicBaseRatePlansLOV</p>
     * Return list of values for hotel configuration dynamic base rate plans
     */
    async getConfigDynamicBaseRatePlansLOV(requestParameters: GetConfigDynamicBaseRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConfigDynamicBaseRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for configuration reports based on search criteria such as moduleName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigReportsLOV</p>
     * Return list of values for configuration reports
     */
    async getConfigReportsLOVRaw(requestParameters: GetConfigReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/moduleName/{moduleName}/configReports`.replace(`{${"moduleName"}}`, encodeURIComponent(String(requestParameters.moduleName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for configuration reports based on search criteria such as moduleName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConfigReportsLOV</p>
     * Return list of values for configuration reports
     */
    async getConfigReportsLOV(requestParameters: GetConfigReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConfigReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for connecting suites for a specific property based on search criteria such as roomNumber, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConnectingSuitesLOV</p>
     * Return list of values for hotel connecting suites
     */
    async getConnectingSuitesLOVRaw(requestParameters: GetConnectingSuitesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomNumber/{roomNumber}/connectingSuites`.replace(`{${"roomNumber"}}`, encodeURIComponent(String(requestParameters.roomNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for connecting suites for a specific property based on search criteria such as roomNumber, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getConnectingSuitesLOV</p>
     * Return list of values for hotel connecting suites
     */
    async getConnectingSuitesLOV(requestParameters: GetConnectingSuitesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getConnectingSuitesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for credit card types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCreditCardTypesLOV</p>
     * Return list of values for hotel credit card types
     */
    async getCreditCardTypesLOVRaw(requestParameters: GetCreditCardTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/creditCardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for credit card types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCreditCardTypesLOV</p>
     * Return list of values for hotel credit card types
     */
    async getCreditCardTypesLOV(requestParameters: GetCreditCardTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCreditCardTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for cro users based on search criteria such as userId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCroUsersLOV</p>
     * Return list of values for cro users
     */
    async getCroUsersLOVRaw(requestParameters: GetCroUsersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/userId/{userId}/croUsers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for cro users based on search criteria such as userId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCroUsersLOV</p>
     * Return list of values for cro users
     */
    async getCroUsersLOV(requestParameters: GetCroUsersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCroUsersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for currency exchange rates for a specific property based on search criteria such as exchangeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCurrencyExchangeRatesLOV</p>
     * Return list of values for hotel currency exchange rates
     */
    async getCurrencyExchangeRatesLOVRaw(requestParameters: GetCurrencyExchangeRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/exchangeType/{exchangeType}/currencyExchangeRates`.replace(`{${"exchangeType"}}`, encodeURIComponent(String(requestParameters.exchangeType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for currency exchange rates for a specific property based on search criteria such as exchangeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCurrencyExchangeRatesLOV</p>
     * Return list of values for hotel currency exchange rates
     */
    async getCurrencyExchangeRatesLOV(requestParameters: GetCurrencyExchangeRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCurrencyExchangeRatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for currency formats based on search criteria such as decimal, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCurrencyFormatsLOV</p>
     * Return list of values for currency formats
     */
    async getCurrencyFormatsLOVRaw(requestParameters: GetCurrencyFormatsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/decimal/{decimal}/currencyFormats`.replace(`{${"decimal"}}`, encodeURIComponent(String(requestParameters.decimal))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for currency formats based on search criteria such as decimal, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCurrencyFormatsLOV</p>
     * Return list of values for currency formats
     */
    async getCurrencyFormatsLOV(requestParameters: GetCurrencyFormatsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCurrencyFormatsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for custom number configuration codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCustomNumberConfigCodesLOV</p>
     * Return list of values for hotel custom number configuration codes
     */
    async getCustomNumberConfigCodesLOVRaw(requestParameters: GetCustomNumberConfigCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/customNumberConfigCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for custom number configuration codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCustomNumberConfigCodesLOV</p>
     * Return list of values for hotel custom number configuration codes
     */
    async getCustomNumberConfigCodesLOV(requestParameters: GetCustomNumberConfigCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCustomNumberConfigCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for custom room translations for a specific property based on search criteria such as dbfLogo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCustomRoomTranslationLOV</p>
     * Return list of values for hotel custom room translations
     */
    async getCustomRoomTranslationLOVRaw(requestParameters: GetCustomRoomTranslationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/dbfLogo/{dbfLogo}/customRoomTranslation`.replace(`{${"dbfLogo"}}`, encodeURIComponent(String(requestParameters.dbfLogo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for custom room translations for a specific property based on search criteria such as dbfLogo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getCustomRoomTranslationLOV</p>
     * Return list of values for hotel custom room translations
     */
    async getCustomRoomTranslationLOV(requestParameters: GetCustomRoomTranslationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getCustomRoomTranslationLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for deposit cancel rules for a specific property based on search criteria such as policyType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDepositCancelRulesLOV</p>
     * Return list of values for hotel deposit cancel rules
     */
    async getDepositCancelRulesLOVRaw(requestParameters: GetDepositCancelRulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/policyType/{policyType}/depositCancelRules`.replace(`{${"policyType"}}`, encodeURIComponent(String(requestParameters.policyType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for deposit cancel rules for a specific property based on search criteria such as policyType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDepositCancelRulesLOV</p>
     * Return list of values for hotel deposit cancel rules
     */
    async getDepositCancelRulesLOV(requestParameters: GetDepositCancelRulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDepositCancelRulesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for deposit cancel rules multi hotel based on search criteria such as policyType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDepositCancelRulesMultiHotelLOV</p>
     * Return list of values for deposit cancel rules multi hotel
     */
    async getDepositCancelRulesMultiHotelLOVRaw(requestParameters: GetDepositCancelRulesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/policyType/{policyType}/depositCancelRulesMultiHotel`.replace(`{${"policyType"}}`, encodeURIComponent(String(requestParameters.policyType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for deposit cancel rules multi hotel based on search criteria such as policyType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDepositCancelRulesMultiHotelLOV</p>
     * Return list of values for deposit cancel rules multi hotel
     */
    async getDepositCancelRulesMultiHotelLOV(requestParameters: GetDepositCancelRulesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDepositCancelRulesMultiHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for device code mapping values based on search criteria such as externalCode, codeType, deviceCode, deviceType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDeviceCodeMappingValuesLOV</p>
     * Return list of values for device code mapping values
     */
    async getDeviceCodeMappingValuesLOVRaw(requestParameters: GetDeviceCodeMappingValuesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/deviceType/{deviceType}/deviceCode/{deviceCode}/codeType/{codeType}/externalCode/{externalCode}/deviceCodeMappingValues`.replace(`{${"externalCode"}}`, encodeURIComponent(String(requestParameters.externalCode))).replace(`{${"codeType"}}`, encodeURIComponent(String(requestParameters.codeType))).replace(`{${"deviceCode"}}`, encodeURIComponent(String(requestParameters.deviceCode))).replace(`{${"deviceType"}}`, encodeURIComponent(String(requestParameters.deviceType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for device code mapping values based on search criteria such as externalCode, codeType, deviceCode, deviceType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDeviceCodeMappingValuesLOV</p>
     * Return list of values for device code mapping values
     */
    async getDeviceCodeMappingValuesLOV(requestParameters: GetDeviceCodeMappingValuesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDeviceCodeMappingValuesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for device locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDeviceLocationsLOV</p>
     * Return list of values for hotel device locations
     */
    async getDeviceLocationsLOVRaw(requestParameters: GetDeviceLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/deviceLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for device locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDeviceLocationsLOV</p>
     * Return list of values for hotel device locations
     */
    async getDeviceLocationsLOV(requestParameters: GetDeviceLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDeviceLocationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for dietary preferences for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDietaryPreferencesLOV</p>
     * Return list of values for hotel dietary preferences
     */
    async getDietaryPreferencesLOVRaw(requestParameters: GetDietaryPreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/dietaryPreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for dietary preferences for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDietaryPreferencesLOV</p>
     * Return list of values for hotel dietary preferences
     */
    async getDietaryPreferencesLOV(requestParameters: GetDietaryPreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDietaryPreferencesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for distribution templates based on search criteria such as location, locationType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDistributionTemplatesLOV</p>
     * Return list of values for distribution templates
     */
    async getDistributionTemplatesLOVRaw(requestParameters: GetDistributionTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/locationType/{locationType}/location/{location}/distributionTemplates`.replace(`{${"location"}}`, encodeURIComponent(String(requestParameters.location))).replace(`{${"locationType"}}`, encodeURIComponent(String(requestParameters.locationType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for distribution templates based on search criteria such as location, locationType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getDistributionTemplatesLOV</p>
     * Return list of values for distribution templates
     */
    async getDistributionTemplatesLOV(requestParameters: GetDistributionTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getDistributionTemplatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ecertificate group entities based on search criteria such as entityName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECertificateGroupEntityLOV</p>
     * Return list of values for ecertificate group entities
     */
    async getECertificateGroupEntityLOVRaw(requestParameters: GetECertificateGroupEntityLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/entityName/{entityName}/eCertificateGroupEntity`.replace(`{${"entityName"}}`, encodeURIComponent(String(requestParameters.entityName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ecertificate group entities based on search criteria such as entityName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECertificateGroupEntityLOV</p>
     * Return list of values for ecertificate group entities
     */
    async getECertificateGroupEntityLOV(requestParameters: GetECertificateGroupEntityLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getECertificateGroupEntityLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ecoupon for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECouponLOV</p>
     * Return list of values for hotel ecoupon
     */
    async getECouponLOVRaw(requestParameters: GetECouponLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/eCoupon`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ecoupon for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECouponLOV</p>
     * Return list of values for hotel ecoupon
     */
    async getECouponLOV(requestParameters: GetECouponLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getECouponLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ecoupon rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECouponRateCodesLOV</p>
     * Return list of values for hotel ecoupon rate codes
     */
    async getECouponRateCodesLOVRaw(requestParameters: GetECouponRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/eCouponRateCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ecoupon rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getECouponRateCodesLOV</p>
     * Return list of values for hotel ecoupon rate codes
     */
    async getECouponRateCodesLOV(requestParameters: GetECouponRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getECouponRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for ecoupon reservation rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEcouponResvRoomLOV</p>
     * Return list of values for hotel ecoupon reservation rooms
     */
    async getEcouponResvRoomLOVRaw(requestParameters: GetEcouponResvRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/ecouponResvRoom`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for ecoupon reservation rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEcouponResvRoomLOV</p>
     * Return list of values for hotel ecoupon reservation rooms
     */
    async getEcouponResvRoomLOV(requestParameters: GetEcouponResvRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEcouponResvRoomLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for end of day reports for a specific property based on search criteria such as beforeIncomeAudit, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEndOfDayReportsLOV</p>
     * Return list of values for hotel end of day reports
     */
    async getEndOfDayReportsLOVRaw(requestParameters: GetEndOfDayReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beforeIncomeAudit/{beforeIncomeAudit}/endOfDayReports`.replace(`{${"beforeIncomeAudit"}}`, encodeURIComponent(String(requestParameters.beforeIncomeAudit))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for end of day reports for a specific property based on search criteria such as beforeIncomeAudit, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEndOfDayReportsLOV</p>
     * Return list of values for hotel end of day reports
     */
    async getEndOfDayReportsLOV(requestParameters: GetEndOfDayReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEndOfDayReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for enrollment match communication types based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEnrollmentMatchCommunicationTypeLOV</p>
     * Return list of values for enrollment match communication types
     */
    async getEnrollmentMatchCommunicationTypeLOVRaw(requestParameters: GetEnrollmentMatchCommunicationTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/type/{type}/enrollmentMatchCommunicationType`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for enrollment match communication types based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEnrollmentMatchCommunicationTypeLOV</p>
     * Return list of values for enrollment match communication types
     */
    async getEnrollmentMatchCommunicationTypeLOV(requestParameters: GetEnrollmentMatchCommunicationTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEnrollmentMatchCommunicationTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventGroupsLOV</p>
     * Return list of values for hotel event groups
     */
    async getEventGroupsLOVRaw(requestParameters: GetEventGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/eventGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventGroupsLOV</p>
     * Return list of values for hotel event groups
     */
    async getEventGroupsLOV(requestParameters: GetEventGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEventGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventLocationsLOV</p>
     * Return list of values for hotel event locations
     */
    async getEventLocationsLOVRaw(requestParameters: GetEventLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/eventLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event locations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventLocationsLOV</p>
     * Return list of values for hotel event locations
     */
    async getEventLocationsLOV(requestParameters: GetEventLocationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEventLocationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event rate codes for a specific property based on search criteria such as space, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventRateCodeLOV</p>
     * Return list of values for hotel event rate codes
     */
    async getEventRateCodeLOVRaw(requestParameters: GetEventRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/space/{space}/eventRateCode`.replace(`{${"space"}}`, encodeURIComponent(String(requestParameters.space))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event rate codes for a specific property based on search criteria such as space, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventRateCodeLOV</p>
     * Return list of values for hotel event rate codes
     */
    async getEventRateCodeLOV(requestParameters: GetEventRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEventRateCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event setup styles for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventSetupStylesLOV</p>
     * Return list of values for hotel event setup styles
     */
    async getEventSetupStylesLOVRaw(requestParameters: GetEventSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/room/{room}/eventSetupStyles`.replace(`{${"room"}}`, encodeURIComponent(String(requestParameters.room))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event setup styles for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventSetupStylesLOV</p>
     * Return list of values for hotel event setup styles
     */
    async getEventSetupStylesLOV(requestParameters: GetEventSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEventSetupStylesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event status codes based on search criteria such as exclusionList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventStatusCodesLOV</p>
     * Return list of values for event status codes
     */
    async getEventStatusCodesLOVRaw(requestParameters: GetEventStatusCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/exclusionList/{exclusionList}/eventStatusCodes`.replace(`{${"exclusionList"}}`, encodeURIComponent(String(requestParameters.exclusionList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event status codes based on search criteria such as exclusionList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getEventStatusCodesLOV</p>
     * Return list of values for event status codes
     */
    async getEventStatusCodesLOV(requestParameters: GetEventStatusCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getEventStatusCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for exchange types based on search criteria such as currencyCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExchangeTypesLOV</p>
     * Return list of values for exchange types
     */
    async getExchangeTypesLOVRaw(requestParameters: GetExchangeTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/currencyCode/{currencyCode}/exchangeTypes`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for exchange types based on search criteria such as currencyCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExchangeTypesLOV</p>
     * Return list of values for exchange types
     */
    async getExchangeTypesLOV(requestParameters: GetExchangeTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getExchangeTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for export mapping codes to link for a specific property based on search criteria such as configType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExportMappingCodesToLinkLOV</p>
     * Return list of values for hotel export mapping codes to link
     */
    async getExportMappingCodesToLinkLOVRaw(requestParameters: GetExportMappingCodesToLinkLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/configType/{configType}/exportMappingCodesToLink`.replace(`{${"configType"}}`, encodeURIComponent(String(requestParameters.configType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for export mapping codes to link for a specific property based on search criteria such as configType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExportMappingCodesToLinkLOV</p>
     * Return list of values for hotel export mapping codes to link
     */
    async getExportMappingCodesToLinkLOV(requestParameters: GetExportMappingCodesToLinkLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getExportMappingCodesToLinkLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for export mapping type codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExportMappingTypeCodesLOV</p>
     * Return list of values for hotel export mapping type codes
     */
    async getExportMappingTypeCodesLOVRaw(requestParameters: GetExportMappingTypeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/exportMappingTypeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for export mapping type codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExportMappingTypeCodesLOV</p>
     * Return list of values for hotel export mapping type codes
     */
    async getExportMappingTypeCodesLOV(requestParameters: GetExportMappingTypeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getExportMappingTypeCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for external database available resorts based on search criteria such as databaseId, interfaceType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExternalDatabaseAvailableResortsLOV</p>
     * Return list of values for external database available resorts
     */
    async getExternalDatabaseAvailableResortsLOVRaw(requestParameters: GetExternalDatabaseAvailableResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/interfaceType/{interfaceType}/databaseId/{databaseId}/externalDatabaseAvailableResorts`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))).replace(`{${"interfaceType"}}`, encodeURIComponent(String(requestParameters.interfaceType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for external database available resorts based on search criteria such as databaseId, interfaceType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExternalDatabaseAvailableResortsLOV</p>
     * Return list of values for external database available resorts
     */
    async getExternalDatabaseAvailableResortsLOV(requestParameters: GetExternalDatabaseAvailableResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getExternalDatabaseAvailableResortsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for external reference types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExternalReferenceTypesLOV</p>
     * Return list of values for hotel external reference types
     */
    async getExternalReferenceTypesLOVRaw(requestParameters: GetExternalReferenceTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/externalReferenceTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for external reference types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getExternalReferenceTypesLOV</p>
     * Return list of values for hotel external reference types
     */
    async getExternalReferenceTypesLOV(requestParameters: GetExternalReferenceTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getExternalReferenceTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for facility codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityCodesLOV</p>
     * Return list of values for hotel facility codes
     */
    async getFacilityCodesLOVRaw(requestParameters: GetFacilityCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/facilityCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for facility codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityCodesLOV</p>
     * Return list of values for hotel facility codes
     */
    async getFacilityCodesLOV(requestParameters: GetFacilityCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFacilityCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for facility codes reservation for a specific property based on search criteria such as facilityTask, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityCodesReservationLOV</p>
     * Return list of values for hotel facility codes reservation
     */
    async getFacilityCodesReservationLOVRaw(requestParameters: GetFacilityCodesReservationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/facilityTask/{facilityTask}/facilityCodesReservation`.replace(`{${"facilityTask"}}`, encodeURIComponent(String(requestParameters.facilityTask))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for facility codes reservation for a specific property based on search criteria such as facilityTask, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityCodesReservationLOV</p>
     * Return list of values for hotel facility codes reservation
     */
    async getFacilityCodesReservationLOV(requestParameters: GetFacilityCodesReservationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFacilityCodesReservationLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for facility tasks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityTasksLOV</p>
     * Return list of values for hotel facility tasks
     */
    async getFacilityTasksLOVRaw(requestParameters: GetFacilityTasksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/facilityTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for facility tasks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityTasksLOV</p>
     * Return list of values for hotel facility tasks
     */
    async getFacilityTasksLOV(requestParameters: GetFacilityTasksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFacilityTasksLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for facility tasks room types for a specific property based on search criteria such as roomTypeLabel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityTasksRoomTypeLOV</p>
     * Return list of values for hotel facility tasks room types
     */
    async getFacilityTasksRoomTypeLOVRaw(requestParameters: GetFacilityTasksRoomTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomTypeLabel/{roomTypeLabel}/facilityTasksRoomType`.replace(`{${"roomTypeLabel"}}`, encodeURIComponent(String(requestParameters.roomTypeLabel))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for facility tasks room types for a specific property based on search criteria such as roomTypeLabel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFacilityTasksRoomTypeLOV</p>
     * Return list of values for hotel facility tasks room types
     */
    async getFacilityTasksRoomTypeLOV(requestParameters: GetFacilityTasksRoomTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFacilityTasksRoomTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for field names based on search criteria such as changeSource, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFieldNameLOV</p>
     * Return list of values for field names
     */
    async getFieldNameLOVRaw(requestParameters: GetFieldNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/changeSource/{changeSource}/fieldName`.replace(`{${"changeSource"}}`, encodeURIComponent(String(requestParameters.changeSource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for field names based on search criteria such as changeSource, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFieldNameLOV</p>
     * Return list of values for field names
     */
    async getFieldNameLOV(requestParameters: GetFieldNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFieldNameLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for fiscal payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFiscalPaymentMethodsLOV</p>
     * Return list of values for hotel fiscal payment methods
     */
    async getFiscalPaymentMethodsLOVRaw(requestParameters: GetFiscalPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fiscalPaymentMethods`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for fiscal payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFiscalPaymentMethodsLOV</p>
     * Return list of values for hotel fiscal payment methods
     */
    async getFiscalPaymentMethodsLOV(requestParameters: GetFiscalPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFiscalPaymentMethodsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for fixed charges transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFixedChargesTransactionCodesLOV</p>
     * Return list of values for hotel fixed charges transaction codes
     */
    async getFixedChargesTransactionCodesLOVRaw(requestParameters: GetFixedChargesTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fixedChargesTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for fixed charges transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFixedChargesTransactionCodesLOV</p>
     * Return list of values for hotel fixed charges transaction codes
     */
    async getFixedChargesTransactionCodesLOV(requestParameters: GetFixedChargesTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFixedChargesTransactionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for floors for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFloorsLOV</p>
     * Return list of values for hotel floors
     */
    async getFloorsLOVRaw(requestParameters: GetFloorsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/floors`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for floors for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFloorsLOV</p>
     * Return list of values for hotel floors
     */
    async getFloorsLOV(requestParameters: GetFloorsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFloorsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for folio grouping codes based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioGroupingCodesLOV</p>
     * Return list of values for folio grouping codes
     */
    async getFolioGroupingCodesLOVRaw(requestParameters: GetFolioGroupingCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/type/{type}/folioGroupingCodes`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for folio grouping codes based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioGroupingCodesLOV</p>
     * Return list of values for folio grouping codes
     */
    async getFolioGroupingCodesLOV(requestParameters: GetFolioGroupingCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFolioGroupingCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for folio grouping transaction codes based on search criteria such as mode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioGroupingTransactionCodesLOV</p>
     * Return list of values for folio grouping transaction codes
     */
    async getFolioGroupingTransactionCodesLOVRaw(requestParameters: GetFolioGroupingTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/mode/{mode}/folioGroupingTransactionCodes`.replace(`{${"mode"}}`, encodeURIComponent(String(requestParameters.mode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for folio grouping transaction codes based on search criteria such as mode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioGroupingTransactionCodesLOV</p>
     * Return list of values for folio grouping transaction codes
     */
    async getFolioGroupingTransactionCodesLOV(requestParameters: GetFolioGroupingTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFolioGroupingTransactionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for folio styles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioStylesLOV</p>
     * Return list of values for hotel folio styles
     */
    async getFolioStylesLOVRaw(requestParameters: GetFolioStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/folioStyles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for folio styles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioStylesLOV</p>
     * Return list of values for hotel folio styles
     */
    async getFolioStylesLOV(requestParameters: GetFolioStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFolioStylesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for folio types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioTypesLOV</p>
     * Return list of values for hotel folio types
     */
    async getFolioTypesLOVRaw(requestParameters: GetFolioTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/folioTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for folio types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFolioTypesLOV</p>
     * Return list of values for hotel folio types
     */
    async getFolioTypesLOV(requestParameters: GetFolioTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFolioTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for forecast groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getForecastGroupsLOV</p>
     * Return list of values for hotel forecast groups
     */
    async getForecastGroupsLOVRaw(requestParameters: GetForecastGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/forecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for forecast groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getForecastGroupsLOV</p>
     * Return list of values for hotel forecast groups
     */
    async getForecastGroupsLOV(requestParameters: GetForecastGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getForecastGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for foreign currencies for a specific property based on search criteria such as exchangeType, sell, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getForeignCurrenciesLOV</p>
     * Return list of values for hotel foreign currencies
     */
    async getForeignCurrenciesLOVRaw(requestParameters: GetForeignCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/sell/{sell}/exchangeType/{exchangeType}/foreignCurrencies`.replace(`{${"exchangeType"}}`, encodeURIComponent(String(requestParameters.exchangeType))).replace(`{${"sell"}}`, encodeURIComponent(String(requestParameters.sell))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for foreign currencies for a specific property based on search criteria such as exchangeType, sell, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getForeignCurrenciesLOV</p>
     * Return list of values for hotel foreign currencies
     */
    async getForeignCurrenciesLOV(requestParameters: GetForeignCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getForeignCurrenciesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for formats for a specific property based on search criteria such as method, moduleName, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFormatLOV</p>
     * Return list of values for hotel formats
     */
    async getFormatLOVRaw(requestParameters: GetFormatLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/moduleName/{moduleName}/method/{method}/format`.replace(`{${"method"}}`, encodeURIComponent(String(requestParameters.method))).replace(`{${"moduleName"}}`, encodeURIComponent(String(requestParameters.moduleName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for formats for a specific property based on search criteria such as method, moduleName, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFormatLOV</p>
     * Return list of values for hotel formats
     */
    async getFormatLOV(requestParameters: GetFormatLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFormatLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for frequency based on search criteria such as defaultDepartureTask, guestRequested, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFrequencyLOV</p>
     * Return list of values for frequency
     */
    async getFrequencyLOVRaw(requestParameters: GetFrequencyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/guestRequested/{guestRequested}/defaultDepartureTask/{defaultDepartureTask}/frequency`.replace(`{${"defaultDepartureTask"}}`, encodeURIComponent(String(requestParameters.defaultDepartureTask))).replace(`{${"guestRequested"}}`, encodeURIComponent(String(requestParameters.guestRequested))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for frequency based on search criteria such as defaultDepartureTask, guestRequested, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFrequencyLOV</p>
     * Return list of values for frequency
     */
    async getFrequencyLOV(requestParameters: GetFrequencyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFrequencyLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for frequency types based on search criteria such as defaultDepartureTask, guestRequested, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFrequencyTypeLOV</p>
     * Return list of values for frequency types
     */
    async getFrequencyTypeLOVRaw(requestParameters: GetFrequencyTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/guestRequested/{guestRequested}/defaultDepartureTask/{defaultDepartureTask}/frequencyType`.replace(`{${"defaultDepartureTask"}}`, encodeURIComponent(String(requestParameters.defaultDepartureTask))).replace(`{${"guestRequested"}}`, encodeURIComponent(String(requestParameters.guestRequested))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for frequency types based on search criteria such as defaultDepartureTask, guestRequested, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFrequencyTypeLOV</p>
     * Return list of values for frequency types
     */
    async getFrequencyTypeLOV(requestParameters: GetFrequencyTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFrequencyTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for from room number for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFromRoomNumberLOV</p>
     * Return list of values for hotel from room number
     */
    async getFromRoomNumberLOVRaw(requestParameters: GetFromRoomNumberLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fromRoomNumber`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for from room number for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getFromRoomNumberLOV</p>
     * Return list of values for hotel from room number
     */
    async getFromRoomNumberLOV(requestParameters: GetFromRoomNumberLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getFromRoomNumberLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds conversion amenity codes based on search criteria such as bookingChannelCodes, featureType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsConvAmenityCodesLOV</p>
     * Return list of values for gds conversion amenity codes
     */
    async getGdsConvAmenityCodesLOVRaw(requestParameters: GetGdsConvAmenityCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/featureType/{featureType}/bookingChannels/{bookingChannelCodes}/gdsConvAmenityCodes`.replace(`{${"bookingChannelCodes"}}`, encodeURIComponent(String(requestParameters.bookingChannelCodes))).replace(`{${"featureType"}}`, encodeURIComponent(String(requestParameters.featureType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds conversion amenity codes based on search criteria such as bookingChannelCodes, featureType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsConvAmenityCodesLOV</p>
     * Return list of values for gds conversion amenity codes
     */
    async getGdsConvAmenityCodesLOV(requestParameters: GetGdsConvAmenityCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsConvAmenityCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds guarantee codes based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsGuaranteeCodesLOV</p>
     * Return list of values for gds guarantee codes
     */
    async getGdsGuaranteeCodesLOVRaw(requestParameters: GetGdsGuaranteeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingChannels/{bookingChannelCode}/gdsGuaranteeCodes`.replace(`{${"bookingChannelCode"}}`, encodeURIComponent(String(requestParameters.bookingChannelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds guarantee codes based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsGuaranteeCodesLOV</p>
     * Return list of values for gds guarantee codes
     */
    async getGdsGuaranteeCodesLOV(requestParameters: GetGdsGuaranteeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsGuaranteeCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds hotel based on search criteria such as channelType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsHotelsLOV</p>
     * Return list of values for gds hotels
     */
    async getGdsHotelsLOVRaw(requestParameters: GetGdsHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/channelType/{channelType}/gdsHotels`.replace(`{${"channelType"}}`, encodeURIComponent(String(requestParameters.channelType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds hotel based on search criteria such as channelType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsHotelsLOV</p>
     * Return list of values for gds hotels
     */
    async getGdsHotelsLOV(requestParameters: GetGdsHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds rate categories based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRateCategoriesLOV</p>
     * Return list of values for gds rate categories
     */
    async getGdsRateCategoriesLOVRaw(requestParameters: GetGdsRateCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingChannels/{bookingChannelCode}/gdsRateCategories`.replace(`{${"bookingChannelCode"}}`, encodeURIComponent(String(requestParameters.bookingChannelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds rate categories based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRateCategoriesLOV</p>
     * Return list of values for gds rate categories
     */
    async getGdsRateCategoriesLOV(requestParameters: GetGdsRateCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsRateCategoriesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds rate levels based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRateLevelsLOV</p>
     * Return list of values for gds rate levels
     */
    async getGdsRateLevelsLOVRaw(requestParameters: GetGdsRateLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingChannels/{bookingChannelCode}/gdsRateLevels`.replace(`{${"bookingChannelCode"}}`, encodeURIComponent(String(requestParameters.bookingChannelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds rate levels based on search criteria such as bookingChannelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRateLevelsLOV</p>
     * Return list of values for gds rate levels
     */
    async getGdsRateLevelsLOV(requestParameters: GetGdsRateLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsRateLevelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gds room category templates based on search criteria such as bookingChannelCodes, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRoomCategoryTemplatesLOV</p>
     * Return list of values for gds room category templates
     */
    async getGdsRoomCategoryTemplatesLOVRaw(requestParameters: GetGdsRoomCategoryTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingChannels/{bookingChannelCodes}/gdsRoomCategoryTemplates`.replace(`{${"bookingChannelCodes"}}`, encodeURIComponent(String(requestParameters.bookingChannelCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gds room category templates based on search criteria such as bookingChannelCodes, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGdsRoomCategoryTemplatesLOV</p>
     * Return list of values for gds room category templates
     */
    async getGdsRoomCategoryTemplatesLOV(requestParameters: GetGdsRoomCategoryTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGdsRoomCategoryTemplatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for gem menu items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGemMenuItemsLOV</p>
     * Return list of values for hotel gem menu items
     */
    async getGemMenuItemsLOVRaw(requestParameters: GetGemMenuItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/gemMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for gem menu items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGemMenuItemsLOV</p>
     * Return list of values for hotel gem menu items
     */
    async getGemMenuItemsLOV(requestParameters: GetGemMenuItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGemMenuItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for generic reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGenericReportsLOV</p>
     * Return list of values for hotel generic reports
     */
    async getGenericReportsLOVRaw(requestParameters: GetGenericReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/genericReports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for generic reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGenericReportsLOV</p>
     * Return list of values for hotel generic reports
     */
    async getGenericReportsLOV(requestParameters: GetGenericReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGenericReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for global alert field queries based on search criteria such as sourceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertFieldQueryLOV</p>
     * Return list of values for global alert field queries
     */
    async getGlobalAlertFieldQueryLOVRaw(requestParameters: GetGlobalAlertFieldQueryLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/sourceId/{sourceId}/globalAlertFieldQuery`.replace(`{${"sourceId"}}`, encodeURIComponent(String(requestParameters.sourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for global alert field queries based on search criteria such as sourceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertFieldQueryLOV</p>
     * Return list of values for global alert field queries
     */
    async getGlobalAlertFieldQueryLOV(requestParameters: GetGlobalAlertFieldQueryLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGlobalAlertFieldQueryLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for global alert functions based on search criteria such as fieldType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertFunctionLOV</p>
     * Return list of values for global alert functions
     */
    async getGlobalAlertFunctionLOVRaw(requestParameters: GetGlobalAlertFunctionLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/fieldType/{fieldType}/globalAlertFunction`.replace(`{${"fieldType"}}`, encodeURIComponent(String(requestParameters.fieldType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for global alert functions based on search criteria such as fieldType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertFunctionLOV</p>
     * Return list of values for global alert functions
     */
    async getGlobalAlertFunctionLOV(requestParameters: GetGlobalAlertFunctionLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGlobalAlertFunctionLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for global alert operators based on search criteria such as tableName, fieldName, fieldType, sourceIdIn, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertOperatorLOV</p>
     * Return list of values for global alert operators
     */
    async getGlobalAlertOperatorLOVRaw(requestParameters: GetGlobalAlertOperatorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/sourceIdIn/{sourceIdIn}/fieldType/{fieldType}/fieldName/{fieldName}/tableName/{tableName}/globalAlertOperator`.replace(`{${"tableName"}}`, encodeURIComponent(String(requestParameters.tableName))).replace(`{${"fieldName"}}`, encodeURIComponent(String(requestParameters.fieldName))).replace(`{${"fieldType"}}`, encodeURIComponent(String(requestParameters.fieldType))).replace(`{${"sourceIdIn"}}`, encodeURIComponent(String(requestParameters.sourceIdIn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for global alert operators based on search criteria such as tableName, fieldName, fieldType, sourceIdIn, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGlobalAlertOperatorLOV</p>
     * Return list of values for global alert operators
     */
    async getGlobalAlertOperatorLOV(requestParameters: GetGlobalAlertOperatorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGlobalAlertOperatorLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for grid types based on search criteria such as bookingStatus, includeInactiveFlag, parameterName, parameterValue, excludeCodes. <p><strong>OperationId:</strong>getGridTypesLOV</p>
     * Return list of values for grid types
     */
    async getGridTypesLOVRaw(requestParameters: GetGridTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingStatus/{bookingStatus}/gridTypes`.replace(`{${"bookingStatus"}}`, encodeURIComponent(String(requestParameters.bookingStatus))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for grid types based on search criteria such as bookingStatus, includeInactiveFlag, parameterName, parameterValue, excludeCodes. <p><strong>OperationId:</strong>getGridTypesLOV</p>
     * Return list of values for grid types
     */
    async getGridTypesLOV(requestParameters: GetGridTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGridTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for group arrivals for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGroupArrivalsLOV</p>
     * Return list of values for hotel group arrivals
     */
    async getGroupArrivalsLOVRaw(requestParameters: GetGroupArrivalsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/groupArrivals`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for group arrivals for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGroupArrivalsLOV</p>
     * Return list of values for hotel group arrivals
     */
    async getGroupArrivalsLOV(requestParameters: GetGroupArrivalsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGroupArrivalsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGroupsLOV</p>
     * Return list of values for hotel groups
     */
    async getGroupsLOVRaw(requestParameters: GetGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/groups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGroupsLOV</p>
     * Return list of values for hotel groups
     */
    async getGroupsLOV(requestParameters: GetGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for guest messages multi hotel for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGuestMessagesMultiHotelLOV</p>
     * Return list of values for hotel guest messages multi hotel
     */
    async getGuestMessagesMultiHotelLOVRaw(requestParameters: GetGuestMessagesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/guestMessagesMultiHotel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for guest messages multi hotel for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGuestMessagesMultiHotelLOV</p>
     * Return list of values for hotel guest messages multi hotel
     */
    async getGuestMessagesMultiHotelLOV(requestParameters: GetGuestMessagesMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGuestMessagesMultiHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for guest messages quick texts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGuestMessagesQuickTextsLOV</p>
     * Return list of values for hotel guest messages quick texts
     */
    async getGuestMessagesQuickTextsLOVRaw(requestParameters: GetGuestMessagesQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/guestMessagesQuickTexts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for guest messages quick texts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getGuestMessagesQuickTextsLOV</p>
     * Return list of values for hotel guest messages quick texts
     */
    async getGuestMessagesQuickTextsLOV(requestParameters: GetGuestMessagesQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getGuestMessagesQuickTextsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping attendants for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKAttendantsLOV</p>
     * Return list of values for hotel  housekeeping attendants
     */
    async getHKAttendantsLOVRaw(requestParameters: GetHKAttendantsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkAttendants`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping attendants for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKAttendantsLOV</p>
     * Return list of values for hotel  housekeeping attendants
     */
    async getHKAttendantsLOV(requestParameters: GetHKAttendantsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKAttendantsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping attendants mobile for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKAttendantsMobileLOV</p>
     * Return list of values for hotel housekeeping attendants mobile
     */
    async getHKAttendantsMobileLOVRaw(requestParameters: GetHKAttendantsMobileLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkAttendantsMobile`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping attendants mobile for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKAttendantsMobileLOV</p>
     * Return list of values for hotel housekeeping attendants mobile
     */
    async getHKAttendantsMobileLOV(requestParameters: GetHKAttendantsMobileLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKAttendantsMobileLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping scheduled attendants for a specific property based on search criteria such as businessDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKScheduledAttendantsLOV</p>
     * Return list of values for hotel  housekeeping scheduled attendants
     */
    async getHKScheduledAttendantsLOVRaw(requestParameters: GetHKScheduledAttendantsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/businessDate/{businessDate}/hkScheduledAttendants`.replace(`{${"businessDate"}}`, encodeURIComponent(String(requestParameters.businessDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping scheduled attendants for a specific property based on search criteria such as businessDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKScheduledAttendantsLOV</p>
     * Return list of values for hotel  housekeeping scheduled attendants
     */
    async getHKScheduledAttendantsLOV(requestParameters: GetHKScheduledAttendantsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKScheduledAttendantsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping task break out for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskBreakOutLOV</p>
     * Return list of values for hotel housekeeping task break out
     */
    async getHKTaskBreakOutLOVRaw(requestParameters: GetHKTaskBreakOutLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkTaskBreakOut`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping task break out for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskBreakOutLOV</p>
     * Return list of values for hotel housekeeping task break out
     */
    async getHKTaskBreakOutLOV(requestParameters: GetHKTaskBreakOutLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKTaskBreakOutLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping task codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskCodesLOV</p>
     * Return list of values for hotel housekeeping task codes
     */
    async getHKTaskCodesLOVRaw(requestParameters: GetHKTaskCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkTaskCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping task codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskCodesLOV</p>
     * Return list of values for hotel housekeeping task codes
     */
    async getHKTaskCodesLOV(requestParameters: GetHKTaskCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKTaskCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping task sheets no for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskSheetsNoLOV</p>
     * Return list of values for hotel housekeeping task sheets no
     */
    async getHKTaskSheetsNoLOVRaw(requestParameters: GetHKTaskSheetsNoLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/breakOutId/{breakOutId}/hkTaskSheetsNo`.replace(`{${"breakOutId"}}`, encodeURIComponent(String(requestParameters.breakOutId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping task sheets no for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskSheetsNoLOV</p>
     * Return list of values for hotel housekeeping task sheets no
     */
    async getHKTaskSheetsNoLOV(requestParameters: GetHKTaskSheetsNoLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKTaskSheetsNoLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping task templates for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskTemplatesLOV</p>
     * Return list of values for hotel housekeeping task templates
     */
    async getHKTaskTemplatesLOVRaw(requestParameters: GetHKTaskTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkTaskTemplates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping task templates for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHKTaskTemplatesLOV</p>
     * Return list of values for hotel housekeeping task templates
     */
    async getHKTaskTemplatesLOV(requestParameters: GetHKTaskTemplatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHKTaskTemplatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping floors for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkFloorsLOV</p>
     * Return list of values for hotel housekeeping floors
     */
    async getHkFloorsLOVRaw(requestParameters: GetHkFloorsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkFloors`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping floors for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkFloorsLOV</p>
     * Return list of values for hotel housekeeping floors
     */
    async getHkFloorsLOV(requestParameters: GetHkFloorsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHkFloorsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkRoomTypesLOV</p>
     * Return list of values for hotel housekeeping room types
     */
    async getHkRoomTypesLOVRaw(requestParameters: GetHkRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkRoomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkRoomTypesLOV</p>
     * Return list of values for hotel housekeeping room types
     */
    async getHkRoomTypesLOV(requestParameters: GetHkRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHkRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkRoomsLOV</p>
     * Return list of values for hotel housekeeping rooms
     */
    async getHkRoomsLOVRaw(requestParameters: GetHkRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hkRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHkRoomsLOV</p>
     * Return list of values for hotel housekeeping rooms
     */
    async getHkRoomsLOV(requestParameters: GetHkRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHkRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotel contact communication methods for a specific property based on search criteria such as contactType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelContactCommMethodLOV</p>
     * Return list of values for hotel contact communication methods
     */
    async getHotelContactCommMethodLOVRaw(requestParameters: GetHotelContactCommMethodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/contactType/{contactType}/hotelContactCommMethod`.replace(`{${"contactType"}}`, encodeURIComponent(String(requestParameters.contactType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotel contact communication methods for a specific property based on search criteria such as contactType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelContactCommMethodLOV</p>
     * Return list of values for hotel contact communication methods
     */
    async getHotelContactCommMethodLOV(requestParameters: GetHotelContactCommMethodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelContactCommMethodLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for event types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelEventTypesLOV</p>
     * Return list of values for hotel event types
     */
    async getHotelEventTypesLOVRaw(requestParameters: GetHotelEventTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hotelEventTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for event types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelEventTypesLOV</p>
     * Return list of values for hotel event types
     */
    async getHotelEventTypesLOV(requestParameters: GetHotelEventTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelEventTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data line types for a specific property based on search criteria such as logo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelInterfaceDataLineTypesLOV</p>
     * Return list of values for hotel interface data line types
     */
    async getHotelInterfaceDataLineTypesLOVRaw(requestParameters: GetHotelInterfaceDataLineTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/logo/{logo}/hotelInterfaceDataLineTypes`.replace(`{${"logo"}}`, encodeURIComponent(String(requestParameters.logo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data line types for a specific property based on search criteria such as logo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelInterfaceDataLineTypesLOV</p>
     * Return list of values for hotel interface data line types
     */
    async getHotelInterfaceDataLineTypesLOV(requestParameters: GetHotelInterfaceDataLineTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelInterfaceDataLineTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface import rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelInterfaceImportRoomsLOV</p>
     * Return list of values for hotel interface import rooms
     */
    async getHotelInterfaceImportRoomsLOVRaw(requestParameters: GetHotelInterfaceImportRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hotelInterfaceImportRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface import rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelInterfaceImportRoomsLOV</p>
     * Return list of values for hotel interface import rooms
     */
    async getHotelInterfaceImportRoomsLOV(requestParameters: GetHotelInterfaceImportRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelInterfaceImportRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate tiers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelRateTierLOV</p>
     * Return list of values for hotel rate tiers
     */
    async getHotelRateTierLOVRaw(requestParameters: GetHotelRateTierLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/hotelRateTier`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate tiers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelRateTierLOV</p>
     * Return list of values for hotel rate tiers
     */
    async getHotelRateTierLOV(requestParameters: GetHotelRateTierLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelRateTierLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotels for account receivable profiles based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelsForARProfileLOV</p>
     * Return list of values for hotels for account receivable profiles
     */
    async getHotelsForARProfileLOVRaw(requestParameters: GetHotelsForARProfileLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/hotelsForARProfile`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotels for account receivable profiles based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelsForARProfileLOV</p>
     * Return list of values for hotels for account receivable profiles
     */
    async getHotelsForARProfileLOV(requestParameters: GetHotelsForARProfileLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelsForARProfileLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotels for OPERA Sales and Catering based on search criteria such as cateringEvents, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelsForSnCLOV</p>
     * Return list of values for hotels for OPERA Sales and Catering
     */
    async getHotelsForSnCLOVRaw(requestParameters: GetHotelsForSnCLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/cateringEvents/{cateringEvents}/hotelsForSnC`.replace(`{${"cateringEvents"}}`, encodeURIComponent(String(requestParameters.cateringEvents))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotels for OPERA Sales and Catering based on search criteria such as cateringEvents, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHotelsForSnCLOV</p>
     * Return list of values for hotels for OPERA Sales and Catering
     */
    async getHotelsForSnCLOV(requestParameters: GetHotelsForSnCLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHotelsForSnCLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHouseKeepingRoomsLOV</p>
     * Return list of values for hotel housekeeping rooms
     */
    async getHouseKeepingRoomsLOVRaw(requestParameters: GetHouseKeepingRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/houseKeepingRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHouseKeepingRoomsLOV</p>
     * Return list of values for hotel housekeeping rooms
     */
    async getHouseKeepingRoomsLOV(requestParameters: GetHouseKeepingRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHouseKeepingRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping sections for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHouseKeepingSectionsLOV</p>
     * Return list of values for hotel housekeeping sections
     */
    async getHouseKeepingSectionsLOVRaw(requestParameters: GetHouseKeepingSectionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/houseKeepingSections`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping sections for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHouseKeepingSectionsLOV</p>
     * Return list of values for hotel housekeeping sections
     */
    async getHouseKeepingSectionsLOV(requestParameters: GetHouseKeepingSectionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHouseKeepingSectionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for housekeeping credit rules for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHousekeepingCreditRulesLOV</p>
     * Return list of values for hotel  housekeeping credit rules
     */
    async getHousekeepingCreditRulesLOVRaw(requestParameters: GetHousekeepingCreditRulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/housekeepingCreditRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for housekeeping credit rules for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getHousekeepingCreditRulesLOV</p>
     * Return list of values for hotel  housekeeping credit rules
     */
    async getHousekeepingCreditRulesLOV(requestParameters: GetHousekeepingCreditRulesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getHousekeepingCreditRulesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface rights view for a specific property based on search criteria such as category, ifcId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getIfcRightsViewLOV</p>
     * Return list of values for hotel interface rights view
     */
    async getIfcRightsViewLOVRaw(requestParameters: GetIfcRightsViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/ifcId/{ifcId}/category/{category}/ifcRightsView`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))).replace(`{${"ifcId"}}`, encodeURIComponent(String(requestParameters.ifcId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface rights view for a specific property based on search criteria such as category, ifcId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getIfcRightsViewLOV</p>
     * Return list of values for hotel interface rights view
     */
    async getIfcRightsViewLOV(requestParameters: GetIfcRightsViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getIfcRightsViewLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for imbalance verification types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getImbalanceVerificationTypesLOV</p>
     * Return list of values for hotel imbalance verification types
     */
    async getImbalanceVerificationTypesLOVRaw(requestParameters: GetImbalanceVerificationTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/imbalanceVerificationTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for imbalance verification types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getImbalanceVerificationTypesLOV</p>
     * Return list of values for hotel imbalance verification types
     */
    async getImbalanceVerificationTypesLOV(requestParameters: GetImbalanceVerificationTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getImbalanceVerificationTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface auto balance for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceAutoBalanceLOV</p>
     * Return list of values for hotel interface auto balance
     */
    async getInterfaceAutoBalanceLOVRaw(requestParameters: GetInterfaceAutoBalanceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceAutoBalance`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface auto balance for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceAutoBalanceLOV</p>
     * Return list of values for hotel interface auto balance
     */
    async getInterfaceAutoBalanceLOV(requestParameters: GetInterfaceAutoBalanceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceAutoBalanceLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestMarketCodeLOV</p>
     * Return list of values for hotel interface data request market codes
     */
    async getInterfaceDataRequestMarketCodeLOVRaw(requestParameters: GetInterfaceDataRequestMarketCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestMarketCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestMarketCodeLOV</p>
     * Return list of values for hotel interface data request market codes
     */
    async getInterfaceDataRequestMarketCodeLOV(requestParameters: GetInterfaceDataRequestMarketCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestMarketCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request market groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestMarketGroupLOV</p>
     * Return list of values for hotel interface data request market groups
     */
    async getInterfaceDataRequestMarketGroupLOVRaw(requestParameters: GetInterfaceDataRequestMarketGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestMarketGroup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request market groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestMarketGroupLOV</p>
     * Return list of values for hotel interface data request market groups
     */
    async getInterfaceDataRequestMarketGroupLOV(requestParameters: GetInterfaceDataRequestMarketGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestMarketGroupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request room classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestRoomClassLOV</p>
     * Return list of values for hotel interface data request room classes
     */
    async getInterfaceDataRequestRoomClassLOVRaw(requestParameters: GetInterfaceDataRequestRoomClassLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestRoomClass`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request room classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestRoomClassLOV</p>
     * Return list of values for hotel interface data request room classes
     */
    async getInterfaceDataRequestRoomClassLOV(requestParameters: GetInterfaceDataRequestRoomClassLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestRoomClassLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestRoomTypesLOV</p>
     * Return list of values for hotel interface data request room types
     */
    async getInterfaceDataRequestRoomTypesLOVRaw(requestParameters: GetInterfaceDataRequestRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestRoomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestRoomTypesLOV</p>
     * Return list of values for hotel interface data request room types
     */
    async getInterfaceDataRequestRoomTypesLOV(requestParameters: GetInterfaceDataRequestRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request source codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestSourceCodeLOV</p>
     * Return list of values for hotel interface data request source codes
     */
    async getInterfaceDataRequestSourceCodeLOVRaw(requestParameters: GetInterfaceDataRequestSourceCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestSourceCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request source codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestSourceCodeLOV</p>
     * Return list of values for hotel interface data request source codes
     */
    async getInterfaceDataRequestSourceCodeLOV(requestParameters: GetInterfaceDataRequestSourceCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestSourceCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface data request source groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestSourceGroupLOV</p>
     * Return list of values for hotel interface data request source groups
     */
    async getInterfaceDataRequestSourceGroupLOVRaw(requestParameters: GetInterfaceDataRequestSourceGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceDataRequestSourceGroup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface data request source groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceDataRequestSourceGroupLOV</p>
     * Return list of values for hotel interface data request source groups
     */
    async getInterfaceDataRequestSourceGroupLOV(requestParameters: GetInterfaceDataRequestSourceGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceDataRequestSourceGroupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface pseudo rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfacePseudoRoomLOV</p>
     * Return list of values for hotel interface pseudo rooms
     */
    async getInterfacePseudoRoomLOVRaw(requestParameters: GetInterfacePseudoRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfacePseudoRoom`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface pseudo rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfacePseudoRoomLOV</p>
     * Return list of values for hotel interface pseudo rooms
     */
    async getInterfacePseudoRoomLOV(requestParameters: GetInterfacePseudoRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfacePseudoRoomLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface resync function spaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncFunctionSpaceLOV</p>
     * Return list of values for hotel interface resync function spaces
     */
    async getInterfaceResyncFunctionSpaceLOVRaw(requestParameters: GetInterfaceResyncFunctionSpaceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceResyncFunctionSpace`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface resync function spaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncFunctionSpaceLOV</p>
     * Return list of values for hotel interface resync function spaces
     */
    async getInterfaceResyncFunctionSpaceLOV(requestParameters: GetInterfaceResyncFunctionSpaceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceResyncFunctionSpaceLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface resync owner contracts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncOwnerContractLOV</p>
     * Return list of values for hotel interface resync owner contracts
     */
    async getInterfaceResyncOwnerContractLOVRaw(requestParameters: GetInterfaceResyncOwnerContractLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceResyncOwnerContract`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface resync owner contracts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncOwnerContractLOV</p>
     * Return list of values for hotel interface resync owner contracts
     */
    async getInterfaceResyncOwnerContractLOV(requestParameters: GetInterfaceResyncOwnerContractLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceResyncOwnerContractLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface resync owner contract rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncOwnerContractRoomLOV</p>
     * Return list of values for hotel interface resync owner contract rooms
     */
    async getInterfaceResyncOwnerContractRoomLOVRaw(requestParameters: GetInterfaceResyncOwnerContractRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceResyncOwnerContractRoom`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface resync owner contract rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncOwnerContractRoomLOV</p>
     * Return list of values for hotel interface resync owner contract rooms
     */
    async getInterfaceResyncOwnerContractRoomLOV(requestParameters: GetInterfaceResyncOwnerContractRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceResyncOwnerContractRoomLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface resync products for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncProductsLOV</p>
     * Return list of values for hotel interface resync products
     */
    async getInterfaceResyncProductsLOVRaw(requestParameters: GetInterfaceResyncProductsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceResyncProducts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface resync products for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceResyncProductsLOV</p>
     * Return list of values for hotel interface resync products
     */
    async getInterfaceResyncProductsLOV(requestParameters: GetInterfaceResyncProductsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceResyncProductsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface revenue codes for a specific property based on search criteria such as logo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceRevenueCodeLOV</p>
     * Return list of values for hotel interface revenue codes
     */
    async getInterfaceRevenueCodeLOVRaw(requestParameters: GetInterfaceRevenueCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/logo/{logo}/interfaceRevenueCode`.replace(`{${"logo"}}`, encodeURIComponent(String(requestParameters.logo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface revenue codes for a specific property based on search criteria such as logo, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceRevenueCodeLOV</p>
     * Return list of values for hotel interface revenue codes
     */
    async getInterfaceRevenueCodeLOV(requestParameters: GetInterfaceRevenueCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceRevenueCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface tab columns based on search criteria such as tableName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTabColumnsLOV</p>
     * Return list of values for interface tab columns
     */
    async getInterfaceTabColumnsLOVRaw(requestParameters: GetInterfaceTabColumnsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/tableName/{tableName}/interfaceTabColumns`.replace(`{${"tableName"}}`, encodeURIComponent(String(requestParameters.tableName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface tab columns based on search criteria such as tableName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTabColumnsLOV</p>
     * Return list of values for interface tab columns
     */
    async getInterfaceTabColumnsLOV(requestParameters: GetInterfaceTabColumnsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceTabColumnsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface transaction codes all charges for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTrxCodesAllChargesLOV</p>
     * Return list of values for hotel interface tansaction codes all charges
     */
    async getInterfaceTrxCodesAllChargesLOVRaw(requestParameters: GetInterfaceTrxCodesAllChargesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceTrxCodesAllCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface transaction codes all charges for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTrxCodesAllChargesLOV</p>
     * Return list of values for hotel interface tansaction codes all charges
     */
    async getInterfaceTrxCodesAllChargesLOV(requestParameters: GetInterfaceTrxCodesAllChargesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceTrxCodesAllChargesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for interface tansaction codes minibar for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTrxCodesMinibarLOV</p>
     * Return list of values for hotel interface transaction codes minibar
     */
    async getInterfaceTrxCodesMinibarLOVRaw(requestParameters: GetInterfaceTrxCodesMinibarLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/interfaceTrxCodesMinibar`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for interface tansaction codes minibar for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInterfaceTrxCodesMinibarLOV</p>
     * Return list of values for hotel interface transaction codes minibar
     */
    async getInterfaceTrxCodesMinibarLOV(requestParameters: GetInterfaceTrxCodesMinibarLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInterfaceTrxCodesMinibarLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInvItemsClassesLOV</p>
     * Return list of values for hotel inventory item classes
     */
    async getInvItemsClassesLOVRaw(requestParameters: GetInvItemsClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/invItemsClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInvItemsClassesLOV</p>
     * Return list of values for hotel inventory item classes
     */
    async getInvItemsClassesLOV(requestParameters: GetInvItemsClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInvItemsClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInvItemsPoolsLOV</p>
     * Return list of values for hotel inventory item pools
     */
    async getInvItemsPoolsLOVRaw(requestParameters: GetInvItemsPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/invItemsPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInvItemsPoolsLOV</p>
     * Return list of values for hotel inventory item pools
     */
    async getInvItemsPoolsLOV(requestParameters: GetInvItemsPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInvItemsPoolsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item attributes for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemAttributesLOV</p>
     * Return list of values for hotel inventory item attributes
     */
    async getInventoryItemAttributesLOVRaw(requestParameters: GetInventoryItemAttributesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemId/{itemId}/inventoryItemAttributes`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item attributes for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemAttributesLOV</p>
     * Return list of values for hotel inventory item attributes
     */
    async getInventoryItemAttributesLOV(requestParameters: GetInventoryItemAttributesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInventoryItemAttributesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item rates for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemRatesLOV</p>
     * Return list of values for hotel inventory item rates
     */
    async getInventoryItemRatesLOVRaw(requestParameters: GetInventoryItemRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemId/{itemId}/inventoryItemRates`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item rates for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemRatesLOV</p>
     * Return list of values for hotel inventory item rates
     */
    async getInventoryItemRatesLOV(requestParameters: GetInventoryItemRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInventoryItemRatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item template items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemTemplateItemsLOV</p>
     * Return list of values for hotel inventory item template items
     */
    async getInventoryItemTemplateItemsLOVRaw(requestParameters: GetInventoryItemTemplateItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/inventoryItemTemplateItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item template items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemTemplateItemsLOV</p>
     * Return list of values for hotel inventory item template items
     */
    async getInventoryItemTemplateItemsLOV(requestParameters: GetInventoryItemTemplateItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInventoryItemTemplateItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory items for a specific property based on search criteria such as sellInEvent, sellInReservation, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemsLOV</p>
     * Return list of values for hotel inventory items
     */
    async getInventoryItemsLOVRaw(requestParameters: GetInventoryItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/sellInReservation/{sellInReservation}/sellInEvent/{sellInEvent}/inventoryItems`.replace(`{${"sellInEvent"}}`, encodeURIComponent(String(requestParameters.sellInEvent))).replace(`{${"sellInReservation"}}`, encodeURIComponent(String(requestParameters.sellInReservation))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory items for a specific property based on search criteria such as sellInEvent, sellInReservation, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getInventoryItemsLOV</p>
     * Return list of values for hotel inventory items
     */
    async getInventoryItemsLOV(requestParameters: GetInventoryItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getInventoryItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemClassesLOV</p>
     * Return list of values for hotel inventory item classes
     */
    async getItemClassesLOVRaw(requestParameters: GetItemClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemClassesLOV</p>
     * Return list of values for hotel inventory item classes
     */
    async getItemClassesLOV(requestParameters: GetItemClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getItemClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemCodesLOV</p>
     * Return list of values for hotel inventory item codes
     */
    async getItemCodesLOVRaw(requestParameters: GetItemCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemCodesLOV</p>
     * Return list of values for hotel inventory item codes
     */
    async getItemCodesLOV(requestParameters: GetItemCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getItemCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item price codes for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemPriceCodeLOV</p>
     * Return list of values for hotel inventory item price codes
     */
    async getItemPriceCodeLOVRaw(requestParameters: GetItemPriceCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemId/{itemId}/itemPriceCode`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item price codes for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemPriceCodeLOV</p>
     * Return list of values for hotel inventory item price codes
     */
    async getItemPriceCodeLOV(requestParameters: GetItemPriceCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getItemPriceCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for inventory item vendors for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemVendorLOV</p>
     * Return list of values for hotel inventory item vendors
     */
    async getItemVendorLOVRaw(requestParameters: GetItemVendorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/itemId/{itemId}/itemVendor`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for inventory item vendors for a specific property based on search criteria such as itemId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getItemVendorLOV</p>
     * Return list of values for hotel inventory item vendors
     */
    async getItemVendorLOV(requestParameters: GetItemVendorLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getItemVendorLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for job titles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getJobTitlesLOV</p>
     * Return list of values for hotel job titles
     */
    async getJobTitlesLOVRaw(requestParameters: GetJobTitlesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/jobTitles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for job titles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getJobTitlesLOV</p>
     * Return list of values for hotel job titles
     */
    async getJobTitlesLOV(requestParameters: GetJobTitlesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getJobTitlesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for key options for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getKeyOptionsLOV</p>
     * Return list of values for hotel key options
     */
    async getKeyOptionsLOVRaw(requestParameters: GetKeyOptionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/keyOptions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for key options for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getKeyOptionsLOV</p>
     * Return list of values for hotel key options
     */
    async getKeyOptionsLOV(requestParameters: GetKeyOptionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getKeyOptionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return list of value names. <p><strong>OperationId:</strong>getLOVNames</p>
     * Return list of value names
     */
    async getLOVNamesRaw(requestParameters: GetLOVNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValueNames>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValueNamesFromJSON(jsonValue));
    }

    /**
     * Use this API to return list of value names. <p><strong>OperationId:</strong>getLOVNames</p>
     * Return list of value names
     */
    async getLOVNames(requestParameters: GetLOVNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValueNames> {
        const response = await this.getLOVNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for licenses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getLicensesLOV</p>
     * Return list of values for hotel licenses
     */
    async getLicensesLOVRaw(requestParameters: GetLicensesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/licenses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for licenses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getLicensesLOV</p>
     * Return list of values for hotel licenses
     */
    async getLicensesLOV(requestParameters: GetLicensesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getLicensesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for the given name of the LOV based on search criteria such as name, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getListOfValues</p>
     * Return list of values for the given name of the LOV
     */
    async getListOfValuesRaw(requestParameters: GetListOfValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for the given name of the LOV based on search criteria such as name, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getListOfValues</p>
     * Return list of values for the given name of the LOV
     */
    async getListOfValues(requestParameters: GetListOfValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getListOfValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for locator quick texts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getLocatorQuickTextsLOV</p>
     * Return list of values for hotel locator quick texts
     */
    async getLocatorQuickTextsLOVRaw(requestParameters: GetLocatorQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/locatorQuickTexts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for locator quick texts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getLocatorQuickTextsLOV</p>
     * Return list of values for hotel locator quick texts
     */
    async getLocatorQuickTextsLOV(requestParameters: GetLocatorQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getLocatorQuickTextsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for generic mail based on search criteria such as sourceIdIn, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMailGenericLOV</p>
     * Return list of values for generic mail
     */
    async getMailGenericLOVRaw(requestParameters: GetMailGenericLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/sourceIdIn/{sourceIdIn}/mailGeneric`.replace(`{${"sourceIdIn"}}`, encodeURIComponent(String(requestParameters.sourceIdIn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for generic mail based on search criteria such as sourceIdIn, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMailGenericLOV</p>
     * Return list of values for generic mail
     */
    async getMailGenericLOV(requestParameters: GetMailGenericLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMailGenericLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for manager report details for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getManagerReportDetailsLOV</p>
     * Return list of values for hotel manager report details
     */
    async getManagerReportDetailsLOVRaw(requestParameters: GetManagerReportDetailsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/managerReportDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for manager report details for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getManagerReportDetailsLOV</p>
     * Return list of values for hotel manager report details
     */
    async getManagerReportDetailsLOV(requestParameters: GetManagerReportDetailsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getManagerReportDetailsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for manager reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getManagersReportsLOV</p>
     * Return list of values for hotel manager reports
     */
    async getManagersReportsLOVRaw(requestParameters: GetManagersReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/managersReports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for manager reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getManagersReportsLOV</p>
     * Return list of values for hotel manager reports
     */
    async getManagersReportsLOV(requestParameters: GetManagersReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getManagersReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for market groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMarketGroupsLOV</p>
     * Return list of values for hotel market groups
     */
    async getMarketGroupsLOVRaw(requestParameters: GetMarketGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/marketGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for market groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMarketGroupsLOV</p>
     * Return list of values for hotel market groups
     */
    async getMarketGroupsLOV(requestParameters: GetMarketGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMarketGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for market segments for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMarketSegmentLOV</p>
     * Return list of values for hotel market segments
     */
    async getMarketSegmentLOVRaw(requestParameters: GetMarketSegmentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/marketSegment`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for market segments for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMarketSegmentLOV</p>
     * Return list of values for hotel market segments
     */
    async getMarketSegmentLOV(requestParameters: GetMarketSegmentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMarketSegmentLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for master blocks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMasterBlockLOV</p>
     * Return list of values for hotel master blocks
     */
    async getMasterBlockLOVRaw(requestParameters: GetMasterBlockLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/masterBlock`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for master blocks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMasterBlockLOV</p>
     * Return list of values for hotel master blocks
     */
    async getMasterBlockLOV(requestParameters: GetMasterBlockLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMasterBlockLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership award financial transactions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardFinTrxLOV</p>
     * Return list of values for hotel membership award financial transactions
     */
    async getMembershipAwardFinTrxLOVRaw(requestParameters: GetMembershipAwardFinTrxLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipAwardFinTrx`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership award financial transactions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardFinTrxLOV</p>
     * Return list of values for hotel membership award financial transactions
     */
    async getMembershipAwardFinTrxLOV(requestParameters: GetMembershipAwardFinTrxLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipAwardFinTrxLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership award products for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardProductsLOV</p>
     * Return list of values for hotel membership award products
     */
    async getMembershipAwardProductsLOVRaw(requestParameters: GetMembershipAwardProductsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipAwardProducts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership award products for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardProductsLOV</p>
     * Return list of values for hotel membership award products
     */
    async getMembershipAwardProductsLOV(requestParameters: GetMembershipAwardProductsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipAwardProductsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership award rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardRateCodesLOV</p>
     * Return list of values for hotel membership award rate codes
     */
    async getMembershipAwardRateCodesLOVRaw(requestParameters: GetMembershipAwardRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipAwardRateCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership award rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardRateCodesLOV</p>
     * Return list of values for hotel membership award rate codes
     */
    async getMembershipAwardRateCodesLOV(requestParameters: GetMembershipAwardRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipAwardRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership award upgrade room groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardUpgradeRoomGroupLOV</p>
     * Return list of values for hotel membership award upgrade room groups
     */
    async getMembershipAwardUpgradeRoomGroupLOVRaw(requestParameters: GetMembershipAwardUpgradeRoomGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipAwardUpgradeRoomGroup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership award upgrade room groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardUpgradeRoomGroupLOV</p>
     * Return list of values for hotel membership award upgrade room groups
     */
    async getMembershipAwardUpgradeRoomGroupLOV(requestParameters: GetMembershipAwardUpgradeRoomGroupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipAwardUpgradeRoomGroupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership award upgrade rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardUpgradeRoomLOV</p>
     * Return list of values for hotel membership award upgrade rooms
     */
    async getMembershipAwardUpgradeRoomLOVRaw(requestParameters: GetMembershipAwardUpgradeRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/membershipAwardUpgradeRoom`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership award upgrade rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipAwardUpgradeRoomLOV</p>
     * Return list of values for hotel membership award upgrade rooms
     */
    async getMembershipAwardUpgradeRoomLOV(requestParameters: GetMembershipAwardUpgradeRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipAwardUpgradeRoomLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership benefit programs based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipBenefitProgramLOV</p>
     * Return list of values for membership benefit programs
     */
    async getMembershipBenefitProgramLOVRaw(requestParameters: GetMembershipBenefitProgramLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipType/{membershipType}/membershipBenefitProgram`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership benefit programs based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipBenefitProgramLOV</p>
     * Return list of values for membership benefit programs
     */
    async getMembershipBenefitProgramLOV(requestParameters: GetMembershipBenefitProgramLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipBenefitProgramLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership benefits based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipBenefitsLOV</p>
     * Return list of values for membership benefits
     */
    async getMembershipBenefitsLOVRaw(requestParameters: GetMembershipBenefitsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipType/{membershipType}/membershipBenefits`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership benefits based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipBenefitsLOV</p>
     * Return list of values for membership benefits
     */
    async getMembershipBenefitsLOV(requestParameters: GetMembershipBenefitsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipBenefitsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership card fee amounts based on search criteria such as membershipLevel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipCardFeeAmountLOV</p>
     * Return list of values for membership card fee amounts
     */
    async getMembershipCardFeeAmountLOVRaw(requestParameters: GetMembershipCardFeeAmountLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipLevel/{membershipLevel}/membershipCardFeeAmount`.replace(`{${"membershipLevel"}}`, encodeURIComponent(String(requestParameters.membershipLevel))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership card fee amounts based on search criteria such as membershipLevel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipCardFeeAmountLOV</p>
     * Return list of values for membership card fee amounts
     */
    async getMembershipCardFeeAmountLOV(requestParameters: GetMembershipCardFeeAmountLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipCardFeeAmountLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership class types based on search criteria such as loyalty, airlines, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipClassTypesLOV</p>
     * Return list of values for membership class types
     */
    async getMembershipClassTypesLOVRaw(requestParameters: GetMembershipClassTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/airlines/{airlines}/loyalty/{loyalty}/membershipClassTypes`.replace(`{${"loyalty"}}`, encodeURIComponent(String(requestParameters.loyalty))).replace(`{${"airlines"}}`, encodeURIComponent(String(requestParameters.airlines))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership class types based on search criteria such as loyalty, airlines, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipClassTypesLOV</p>
     * Return list of values for membership class types
     */
    async getMembershipClassTypesLOV(requestParameters: GetMembershipClassTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipClassTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership max downgrade level based on search criteria such as membershipType, membershipLevelRank, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipMaxDowngradeLevelLOV</p>
     * Return list of values for membership max downgrade level
     */
    async getMembershipMaxDowngradeLevelLOVRaw(requestParameters: GetMembershipMaxDowngradeLevelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipLevelRank/{membershipLevelRank}/membershipType/{membershipType}/membershipMaxDowngradeLevel`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"membershipLevelRank"}}`, encodeURIComponent(String(requestParameters.membershipLevelRank))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership max downgrade level based on search criteria such as membershipType, membershipLevelRank, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipMaxDowngradeLevelLOV</p>
     * Return list of values for membership max downgrade level
     */
    async getMembershipMaxDowngradeLevelLOV(requestParameters: GetMembershipMaxDowngradeLevelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipMaxDowngradeLevelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership points rule codes based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipPointsRuleCodesLOV</p>
     * Return list of values for membership points rule codes
     */
    async getMembershipPointsRuleCodesLOVRaw(requestParameters: GetMembershipPointsRuleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipType/{membershipType}/membershipPointsRuleCodes`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership points rule codes based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipPointsRuleCodesLOV</p>
     * Return list of values for membership points rule codes
     */
    async getMembershipPointsRuleCodesLOV(requestParameters: GetMembershipPointsRuleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipPointsRuleCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership promotions for a specific property based on search criteria such as membershipId, endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipPromotionsLOV</p>
     * Return list of values for hotel membership promotions
     */
    async getMembershipPromotionsLOVRaw(requestParameters: GetMembershipPromotionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beginDate/{beginDate}/membershipId/{membershipId}/membershipPromotions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"beginDate"}}`, encodeURIComponent(String(requestParameters.beginDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership promotions for a specific property based on search criteria such as membershipId, endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipPromotionsLOV</p>
     * Return list of values for hotel membership promotions
     */
    async getMembershipPromotionsLOV(requestParameters: GetMembershipPromotionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipPromotionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership statement batch list based on search criteria such as membershipId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipStatementBatchListLOV</p>
     * Return list of values for membership statement batch list
     */
    async getMembershipStatementBatchListLOVRaw(requestParameters: GetMembershipStatementBatchListLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipId/{membershipId}/membershipStatementBatchList`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership statement batch list based on search criteria such as membershipId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipStatementBatchListLOV</p>
     * Return list of values for membership statement batch list
     */
    async getMembershipStatementBatchListLOV(requestParameters: GetMembershipStatementBatchListLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipStatementBatchListLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for membership total points available based on search criteria such as membershipId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipTotalPointsAvailableLOV</p>
     * Return list of values for membership total points available
     */
    async getMembershipTotalPointsAvailableLOVRaw(requestParameters: GetMembershipTotalPointsAvailableLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipId/{membershipId}/membershipTotalPointsAvailable`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for membership total points available based on search criteria such as membershipId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipTotalPointsAvailableLOV</p>
     * Return list of values for membership total points available
     */
    async getMembershipTotalPointsAvailableLOV(requestParameters: GetMembershipTotalPointsAvailableLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipTotalPointsAvailableLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for hotels for membership transfer points based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipTransferPointsLOV</p>
     * Return list of values for membership transfer points
     */
    async getMembershipTransferPointsLOVRaw(requestParameters: GetMembershipTransferPointsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/membershipTransferPoints`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for hotels for membership transfer points based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMembershipTransferPointsLOV</p>
     * Return list of values for membership transfer points
     */
    async getMembershipTransferPointsLOV(requestParameters: GetMembershipTransferPointsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMembershipTransferPointsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for menu classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuClassesLOV</p>
     * Return list of values for hotel menu classes
     */
    async getMenuClassesLOVRaw(requestParameters: GetMenuClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/menuClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for menu classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuClassesLOV</p>
     * Return list of values for hotel menu classes
     */
    async getMenuClassesLOV(requestParameters: GetMenuClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMenuClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for menu items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuItemsLOV</p>
     * Return list of values for hotel menu items
     */
    async getMenuItemsLOVRaw(requestParameters: GetMenuItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/menuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for menu items for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuItemsLOV</p>
     * Return list of values for hotel menu items
     */
    async getMenuItemsLOV(requestParameters: GetMenuItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMenuItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for menus based on search criteria such as menuClassId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuLOV</p>
     * Return list of values for menus
     */
    async getMenuLOVRaw(requestParameters: GetMenuLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/menuClassId/{menuClassId}/menu`.replace(`{${"menuClassId"}}`, encodeURIComponent(String(requestParameters.menuClassId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for menus based on search criteria such as menuClassId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getMenuLOV</p>
     * Return list of values for menus
     */
    async getMenuLOV(requestParameters: GetMenuLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getMenuLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for negotiated rate hotels based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNegotiatedRateHotelsLOV</p>
     * Return list of values for negotiated rate hotels
     */
    async getNegotiatedRateHotelsLOVRaw(requestParameters: GetNegotiatedRateHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/negotiatedRateHotels`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for negotiated rate hotels based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNegotiatedRateHotelsLOV</p>
     * Return list of values for negotiated rate hotels
     */
    async getNegotiatedRateHotelsLOV(requestParameters: GetNegotiatedRateHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getNegotiatedRateHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for negotiated rate hotels based on search criteria such as profileId, rateCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNegotiatedRatesHotelsLOV</p>
     * Return list of values for negotiated rate hotels
     */
    async getNegotiatedRatesHotelsLOVRaw(requestParameters: GetNegotiatedRatesHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/rateCode/{rateCode}/profiles/{profileId}/negotiatedRatesHotels`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for negotiated rate hotels based on search criteria such as profileId, rateCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNegotiatedRatesHotelsLOV</p>
     * Return list of values for negotiated rate hotels
     */
    async getNegotiatedRatesHotelsLOV(requestParameters: GetNegotiatedRatesHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getNegotiatedRatesHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for note types based on search criteria such as departmentType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNoteTypesLOV</p>
     * Return list of values for note types
     */
    async getNoteTypesLOVRaw(requestParameters: GetNoteTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/departments/{departmentType}/noteTypes`.replace(`{${"departmentType"}}`, encodeURIComponent(String(requestParameters.departmentType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for note types based on search criteria such as departmentType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getNoteTypesLOV</p>
     * Return list of values for note types
     */
    async getNoteTypesLOV(requestParameters: GetNoteTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getNoteTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for OSAActivity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOSAActivityTypesLOV</p>
     * Return list of values for hotel OSAActivity types
     */
    async getOSAActivityTypesLOVRaw(requestParameters: GetOSAActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/osaActivityTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for OSAActivity types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOSAActivityTypesLOV</p>
     * Return list of values for hotel OSAActivity types
     */
    async getOSAActivityTypesLOV(requestParameters: GetOSAActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOSAActivityTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for OXIInterface references for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfaceReferencesLOV</p>
     * Return list of values for hotel OXIInterface references
     */
    async getOXIInterfaceReferencesLOVRaw(requestParameters: GetOXIInterfaceReferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/oxiInterfaceReferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for OXIInterface references for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfaceReferencesLOV</p>
     * Return list of values for hotel OXIInterface references
     */
    async getOXIInterfaceReferencesLOV(requestParameters: GetOXIInterfaceReferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOXIInterfaceReferencesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for OXIInterface resorts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfaceResortsLOV</p>
     * Return list of values for hotel OXIInterface resorts
     */
    async getOXIInterfaceResortsLOVRaw(requestParameters: GetOXIInterfaceResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/oxiInterfaceResorts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for OXIInterface resorts for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfaceResortsLOV</p>
     * Return list of values for hotel OXIInterface resorts
     */
    async getOXIInterfaceResortsLOV(requestParameters: GetOXIInterfaceResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOXIInterfaceResortsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for OXIInterfaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfacesLOV</p>
     * Return list of values for hotel OXIInterfaces
     */
    async getOXIInterfacesLOVRaw(requestParameters: GetOXIInterfacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/oxiInterfaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for OXIInterfaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIInterfacesLOV</p>
     * Return list of values for hotel OXIInterfaces
     */
    async getOXIInterfacesLOV(requestParameters: GetOXIInterfacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOXIInterfacesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for OXIResorts based on search criteria such as interfaceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIResortsLOV</p>
     * Return list of values for OXIResorts
     */
    async getOXIResortsLOVRaw(requestParameters: GetOXIResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/interfaceId/{interfaceId}/oxiResorts`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for OXIResorts based on search criteria such as interfaceId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOXIResortsLOV</p>
     * Return list of values for OXIResorts
     */
    async getOXIResortsLOV(requestParameters: GetOXIResortsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOXIResortsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for organizations based on search criteria such as actionTask, chainCode, roles, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOrganizationsLOV</p>
     * Return list of values for organizations
     */
    async getOrganizationsLOVRaw(requestParameters: GetOrganizationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/roles/{roles}/chainCode/{chainCode}/actionTask/{actionTask}/organizations`.replace(`{${"actionTask"}}`, encodeURIComponent(String(requestParameters.actionTask))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"roles"}}`, encodeURIComponent(String(requestParameters.roles))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for organizations based on search criteria such as actionTask, chainCode, roles, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getOrganizationsLOV</p>
     * Return list of values for organizations
     */
    async getOrganizationsLOV(requestParameters: GetOrganizationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getOrganizationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for pack forecast group codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPackForecastGroupCodeLOV</p>
     * Return list of values for hotel pack forecast group codes
     */
    async getPackForecastGroupCodeLOVRaw(requestParameters: GetPackForecastGroupCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/packForecastGroupCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for pack forecast group codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPackForecastGroupCodeLOV</p>
     * Return list of values for hotel pack forecast group codes
     */
    async getPackForecastGroupCodeLOV(requestParameters: GetPackForecastGroupCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPackForecastGroupCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for package arrangement associations for a specific property based on search criteria such as arrangementCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPackageArrangementAssociationLOV</p>
     * Return list of values for hotel package arrangement associations
     */
    async getPackageArrangementAssociationLOVRaw(requestParameters: GetPackageArrangementAssociationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arrangementCode/{arrangementCode}/packageArrangementAssociation`.replace(`{${"arrangementCode"}}`, encodeURIComponent(String(requestParameters.arrangementCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for package arrangement associations for a specific property based on search criteria such as arrangementCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPackageArrangementAssociationLOV</p>
     * Return list of values for hotel package arrangement associations
     */
    async getPackageArrangementAssociationLOV(requestParameters: GetPackageArrangementAssociationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPackageArrangementAssociationLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for parameter active under chain based on search criteria such as chainCode, parameter, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getParameterActiveUnderChainLOV</p>
     * Return list of values for parameter active under chain
     */
    async getParameterActiveUnderChainLOVRaw(requestParameters: GetParameterActiveUnderChainLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/parameterName/{parameter}/chainCode/{chainCode}/parameterActiveUnderChain`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"parameter"}}`, encodeURIComponent(String(requestParameters.parameter))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for parameter active under chain based on search criteria such as chainCode, parameter, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getParameterActiveUnderChainLOV</p>
     * Return list of values for parameter active under chain
     */
    async getParameterActiveUnderChainLOV(requestParameters: GetParameterActiveUnderChainLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getParameterActiveUnderChainLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPaymentMethodsLOV</p>
     * Return list of values for hotel payment methods
     */
    async getPaymentMethodsLOVRaw(requestParameters: GetPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/paymentMethods`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for payment methods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPaymentMethodsLOV</p>
     * Return list of values for hotel payment methods
     */
    async getPaymentMethodsLOV(requestParameters: GetPaymentMethodsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPaymentMethodsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for payment types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPaymentTypesLOV</p>
     * Return list of values for hotel payment types
     */
    async getPaymentTypesLOVRaw(requestParameters: GetPaymentTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/paymentTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for payment types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPaymentTypesLOV</p>
     * Return list of values for hotel payment types
     */
    async getPaymentTypesLOV(requestParameters: GetPaymentTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPaymentTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for period setups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPeriodSetupLOV</p>
     * Return list of values for hotel period setups
     */
    async getPeriodSetupLOVRaw(requestParameters: GetPeriodSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/periodSetup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for period setups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPeriodSetupLOV</p>
     * Return list of values for hotel period setups
     */
    async getPeriodSetupLOV(requestParameters: GetPeriodSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPeriodSetupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for periods setups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPeriodsSetupLOV</p>
     * Return list of values for hotel periods setups
     */
    async getPeriodsSetupLOVRaw(requestParameters: GetPeriodsSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/periodsSetup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for periods setups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPeriodsSetupLOV</p>
     * Return list of values for hotel periods setups
     */
    async getPeriodsSetupLOV(requestParameters: GetPeriodsSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPeriodsSetupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for postal codes based on search criteria such as country, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostalCodesLOV</p>
     * Return list of values for postal codes
     */
    async getPostalCodesLOVRaw(requestParameters: GetPostalCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/country/{country}/postalCodes`.replace(`{${"country"}}`, encodeURIComponent(String(requestParameters.country))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for postal codes based on search criteria such as country, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostalCodesLOV</p>
     * Return list of values for postal codes
     */
    async getPostalCodesLOV(requestParameters: GetPostalCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPostalCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for posting rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostingRoomLOV</p>
     * Return list of values for hotel posting rooms
     */
    async getPostingRoomLOVRaw(requestParameters: GetPostingRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/postingRoom`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for posting rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostingRoomLOV</p>
     * Return list of values for hotel posting rooms
     */
    async getPostingRoomLOV(requestParameters: GetPostingRoomLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPostingRoomLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for posting transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostingTransactionCodesLOV</p>
     * Return list of values for hotel posting transaction codes
     */
    async getPostingTransactionCodesLOVRaw(requestParameters: GetPostingTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/postingTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for posting transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPostingTransactionCodesLOV</p>
     * Return list of values for hotel posting transaction codes
     */
    async getPostingTransactionCodesLOV(requestParameters: GetPostingTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPostingTransactionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for preference subgroups based on search criteria such as preferenceGroup, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPreferenceSubgroupsLOV</p>
     * Return list of values for preference subgroups
     */
    async getPreferenceSubgroupsLOVRaw(requestParameters: GetPreferenceSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/chainCode/{chainCode}/preferenceGroup/{preferenceGroup}/preferenceSubgroups`.replace(`{${"preferenceGroup"}}`, encodeURIComponent(String(requestParameters.preferenceGroup))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for preference subgroups based on search criteria such as preferenceGroup, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPreferenceSubgroupsLOV</p>
     * Return list of values for preference subgroups
     */
    async getPreferenceSubgroupsLOV(requestParameters: GetPreferenceSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPreferenceSubgroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for preferences multi hotels based on search criteria such as preferenceGroup, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPreferencesMultiHotelsLOV</p>
     * Return list of values for preferences multi hotels
     */
    async getPreferencesMultiHotelsLOVRaw(requestParameters: GetPreferencesMultiHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/preferenceGroup/{preferenceGroup}/preferencesMultiHotels`.replace(`{${"preferenceGroup"}}`, encodeURIComponent(String(requestParameters.preferenceGroup))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for preferences multi hotels based on search criteria such as preferenceGroup, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPreferencesMultiHotelsLOV</p>
     * Return list of values for preferences multi hotels
     */
    async getPreferencesMultiHotelsLOV(requestParameters: GetPreferencesMultiHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPreferencesMultiHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for prepaid card interfaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrepaidCardInterfacesLOV</p>
     * Return list of values for hotel prepaid card interfaces
     */
    async getPrepaidCardInterfacesLOVRaw(requestParameters: GetPrepaidCardInterfacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/prepaidCardInterfaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for prepaid card interfaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrepaidCardInterfacesLOV</p>
     * Return list of values for hotel prepaid card interfaces
     */
    async getPrepaidCardInterfacesLOV(requestParameters: GetPrepaidCardInterfacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPrepaidCardInterfacesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for printers based on search criteria such as alertPrinters, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrintersLOV</p>
     * Return list of values for printers
     */
    async getPrintersLOVRaw(requestParameters: GetPrintersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/alertPrinters/{alertPrinters}/printers`.replace(`{${"alertPrinters"}}`, encodeURIComponent(String(requestParameters.alertPrinters))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for printers based on search criteria such as alertPrinters, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrintersLOV</p>
     * Return list of values for printers
     */
    async getPrintersLOV(requestParameters: GetPrintersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPrintersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for priorities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrioritiesLOV</p>
     * Return list of values for hotel priorities
     */
    async getPrioritiesLOVRaw(requestParameters: GetPrioritiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/priorities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for priorities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPrioritiesLOV</p>
     * Return list of values for hotel priorities
     */
    async getPrioritiesLOV(requestParameters: GetPrioritiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPrioritiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile communications based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileCommunicationsLOV</p>
     * Return list of values for profile communications
     */
    async getProfileCommunicationsLOVRaw(requestParameters: GetProfileCommunicationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/profileCommunications`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile communications based on search criteria such as profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileCommunicationsLOV</p>
     * Return list of values for profile communications
     */
    async getProfileCommunicationsLOV(requestParameters: GetProfileCommunicationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileCommunicationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile enrollment match criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentMatchCriteriaLOV</p>
     * Return list of values for profile enrollment match criteria
     */
    async getProfileEnrollmentMatchCriteriaLOVRaw(requestParameters: GetProfileEnrollmentMatchCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/nameType/{nameType}/profileEnrollmentMatchCriteria`.replace(`{${"nameType"}}`, encodeURIComponent(String(requestParameters.nameType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile enrollment match criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentMatchCriteriaLOV</p>
     * Return list of values for profile enrollment match criteria
     */
    async getProfileEnrollmentMatchCriteriaLOV(requestParameters: GetProfileEnrollmentMatchCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileEnrollmentMatchCriteriaLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile enrollment rule do not merge criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentRuleDoNotMergeCriteriaLOV</p>
     * Return list of values for profile enrollment rule do not merge criteria
     */
    async getProfileEnrollmentRuleDoNotMergeCriteriaLOVRaw(requestParameters: GetProfileEnrollmentRuleDoNotMergeCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/nameType/{nameType}/profileEnrollmentRuleDoNotMergeCriteria`.replace(`{${"nameType"}}`, encodeURIComponent(String(requestParameters.nameType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile enrollment rule do not merge criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentRuleDoNotMergeCriteriaLOV</p>
     * Return list of values for profile enrollment rule do not merge criteria
     */
    async getProfileEnrollmentRuleDoNotMergeCriteriaLOV(requestParameters: GetProfileEnrollmentRuleDoNotMergeCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileEnrollmentRuleDoNotMergeCriteriaLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile enrollment rule filter criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentRuleFilterCriteriaLOV</p>
     * Return list of values for profile enrollment rule filter criteria
     */
    async getProfileEnrollmentRuleFilterCriteriaLOVRaw(requestParameters: GetProfileEnrollmentRuleFilterCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/nameType/{nameType}/profileEnrollmentRuleFilterCriteria`.replace(`{${"nameType"}}`, encodeURIComponent(String(requestParameters.nameType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile enrollment rule filter criteria based on search criteria such as nameType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileEnrollmentRuleFilterCriteriaLOV</p>
     * Return list of values for profile enrollment rule filter criteria
     */
    async getProfileEnrollmentRuleFilterCriteriaLOV(requestParameters: GetProfileEnrollmentRuleFilterCriteriaLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileEnrollmentRuleFilterCriteriaLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile hotels based on search criteria such as taxTypeCheck, profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileHotelsLOV</p>
     * Return list of values for profile hotels
     */
    async getProfileHotelsLOVRaw(requestParameters: GetProfileHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/profiles/{profileId}/taxTypeCheck/{taxTypeCheck}/profileHotels`.replace(`{${"taxTypeCheck"}}`, encodeURIComponent(String(requestParameters.taxTypeCheck))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile hotels based on search criteria such as taxTypeCheck, profileId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileHotelsLOV</p>
     * Return list of values for profile hotels
     */
    async getProfileHotelsLOV(requestParameters: GetProfileHotelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileHotelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile identifications for a specific property based on search criteria such as profileId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileIdentificationsLOV</p>
     * Return list of values for hotel profile identifications
     */
    async getProfileIdentificationsLOVRaw(requestParameters: GetProfileIdentificationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/profiles/{profileId}/profileIdentifications`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile identifications for a specific property based on search criteria such as profileId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileIdentificationsLOV</p>
     * Return list of values for hotel profile identifications
     */
    async getProfileIdentificationsLOV(requestParameters: GetProfileIdentificationsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileIdentificationsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for profile name validation types based on search criteria such as number, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileNameValidationsTypeLOV</p>
     * Return list of values for profile name validation types
     */
    async getProfileNameValidationsTypeLOVRaw(requestParameters: GetProfileNameValidationsTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/operaParam/{operaParam}/profileNameValidationsType`.replace(`{${"operaParam"}}`, encodeURIComponent(String(requestParameters.operaParam))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for profile name validation types based on search criteria such as number, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getProfileNameValidationsTypeLOV</p>
     * Return list of values for profile name validation types
     */
    async getProfileNameValidationsTypeLOV(requestParameters: GetProfileNameValidationsTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getProfileNameValidationsTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for promotion groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPromoGroupsLOV</p>
     * Return list of values for hotel promotion groups
     */
    async getPromoGroupsLOVRaw(requestParameters: GetPromoGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/promoGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for promotion groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPromoGroupsLOV</p>
     * Return list of values for hotel promotion groups
     */
    async getPromoGroupsLOV(requestParameters: GetPromoGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPromoGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for promotion rates for a specific property based on search criteria such as promoCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPromoRatesLOV</p>
     * Return list of values for hotel promotion rates
     */
    async getPromoRatesLOVRaw(requestParameters: GetPromoRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/promoCode/{promoCode}/promoRates`.replace(`{${"promoCode"}}`, encodeURIComponent(String(requestParameters.promoCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for promotion rates for a specific property based on search criteria such as promoCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPromoRatesLOV</p>
     * Return list of values for hotel promotion rates
     */
    async getPromoRatesLOV(requestParameters: GetPromoRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPromoRatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for property amenities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPropertyAmenitiesLOV</p>
     * Return list of values for hotel property amenities
     */
    async getPropertyAmenitiesLOVRaw(requestParameters: GetPropertyAmenitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/propertyAmenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for property amenities for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPropertyAmenitiesLOV</p>
     * Return list of values for hotel property amenities
     */
    async getPropertyAmenitiesLOV(requestParameters: GetPropertyAmenitiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPropertyAmenitiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for publisher properties based on search criteria such as subscriber, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPublisherPropertiesLOV</p>
     * Return list of values for publisher properties
     */
    async getPublisherPropertiesLOVRaw(requestParameters: GetPublisherPropertiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/subscriber/{subscriber}/publisherProperties`.replace(`{${"subscriber"}}`, encodeURIComponent(String(requestParameters.subscriber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for publisher properties based on search criteria such as subscriber, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getPublisherPropertiesLOV</p>
     * Return list of values for publisher properties
     */
    async getPublisherPropertiesLOV(requestParameters: GetPublisherPropertiesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getPublisherPropertiesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for queue names based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getQueueNameLOV</p>
     * Return list of values for queue names
     */
    async getQueueNameLOVRaw(requestParameters: GetQueueNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotelCodeList/{hotelCodeList}/queueName`.replace(`{${"hotelCodeList"}}`, encodeURIComponent(String(requestParameters.hotelCodeList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for queue names based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getQueueNameLOV</p>
     * Return list of values for queue names
     */
    async getQueueNameLOV(requestParameters: GetQueueNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getQueueNameLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for quick texts for a specific property based on search criteria such as departmentId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getQuickTextsLOV</p>
     * Return list of values for hotel quick texts
     */
    async getQuickTextsLOVRaw(requestParameters: GetQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/departmentId/{departmentId}/quickTexts`.replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters.departmentId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for quick texts for a specific property based on search criteria such as departmentId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getQuickTextsLOV</p>
     * Return list of values for hotel quick texts
     */
    async getQuickTextsLOV(requestParameters: GetQuickTextsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getQuickTextsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCategoriesLOV</p>
     * Return list of values for hotel rate categories
     */
    async getRateCategoriesLOVRaw(requestParameters: GetRateCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCategoriesLOV</p>
     * Return list of values for hotel rate categories
     */
    async getRateCategoriesLOV(requestParameters: GetRateCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateCategoriesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate code global description edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodeGlobalDescEditLOV</p>
     * Return list of values for hotel rate code global description edit
     */
    async getRateCodeGlobalDescEditLOVRaw(requestParameters: GetRateCodeGlobalDescEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCodeGlobalDescEdit`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate code global description edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodeGlobalDescEditLOV</p>
     * Return list of values for hotel rate code global description edit
     */
    async getRateCodeGlobalDescEditLOV(requestParameters: GetRateCodeGlobalDescEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateCodeGlobalDescEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate codes by type for a specific property based on search criteria such as rateCodeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodesByTypeLOV</p>
     * Return list of values for hotel rate codes by type
     */
    async getRateCodesByTypeLOVRaw(requestParameters: GetRateCodesByTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCodeType/{rateCodeType}/rateCodesByType`.replace(`{${"rateCodeType"}}`, encodeURIComponent(String(requestParameters.rateCodeType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate codes by type for a specific property based on search criteria such as rateCodeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodesByTypeLOV</p>
     * Return list of values for hotel rate codes by type
     */
    async getRateCodesByTypeLOV(requestParameters: GetRateCodesByTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateCodesByTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for valid rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodesValidLOV</p>
     * Return list of values for hotel valid rate codes
     */
    async getRateCodesValidLOVRaw(requestParameters: GetRateCodesValidLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCodesValid`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for valid rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCodesValidLOV</p>
     * Return list of values for hotel valid rate codes
     */
    async getRateCodesValidLOV(requestParameters: GetRateCodesValidLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateCodesValidLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate commission codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCommissionCodesLOV</p>
     * Return list of values for hotel rate commission codes
     */
    async getRateCommissionCodesLOVRaw(requestParameters: GetRateCommissionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCommissionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate commission codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateCommissionCodesLOV</p>
     * Return list of values for hotel rate commission codes
     */
    async getRateCommissionCodesLOV(requestParameters: GetRateCommissionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateCommissionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate configuration currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateConfigCurrenciesLOV</p>
     * Return list of values for hotel rate configuration currencies
     */
    async getRateConfigCurrenciesLOVRaw(requestParameters: GetRateConfigCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateConfigCurrencies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate configuration currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateConfigCurrenciesLOV</p>
     * Return list of values for hotel rate configuration currencies
     */
    async getRateConfigCurrenciesLOV(requestParameters: GetRateConfigCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateConfigCurrenciesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateGroupsLOV</p>
     * Return list of values for hotel rate groups
     */
    async getRateGroupsLOVRaw(requestParameters: GetRateGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRateGroupsLOV</p>
     * Return list of values for hotel rate groups
     */
    async getRateGroupsLOV(requestParameters: GetRateGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRateGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate plans for mass rate for a specific property based on search criteria such as rateCodeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlanForMassRateLOV</p>
     * Return list of values for hotel rate plans for mass rate
     */
    async getRatePlanForMassRateLOVRaw(requestParameters: GetRatePlanForMassRateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCodeType/{rateCodeType}/ratePlanForMassRate`.replace(`{${"rateCodeType"}}`, encodeURIComponent(String(requestParameters.rateCodeType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate plans for mass rate for a specific property based on search criteria such as rateCodeType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlanForMassRateLOV</p>
     * Return list of values for hotel rate plans for mass rate
     */
    async getRatePlanForMassRateLOV(requestParameters: GetRatePlanForMassRateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRatePlanForMassRateLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate plans for yield as configuration for a specific property based on search criteria such as rateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlansForYieldAsConfigLOV</p>
     * Return list of values for hotel rate plans for yield as configuration
     */
    async getRatePlansForYieldAsConfigLOVRaw(requestParameters: GetRatePlansForYieldAsConfigLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rateCode/{rateCode}/ratePlansForYieldAsConfig`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate plans for yield as configuration for a specific property based on search criteria such as rateCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlansForYieldAsConfigLOV</p>
     * Return list of values for hotel rate plans for yield as configuration
     */
    async getRatePlansForYieldAsConfigLOV(requestParameters: GetRatePlansForYieldAsConfigLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRatePlansForYieldAsConfigLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rate plans for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlansLOV</p>
     * Return list of values for hotel rate plans
     */
    async getRatePlansLOVRaw(requestParameters: GetRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rate plans for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRatePlansLOV</p>
     * Return list of values for hotel rate plans
     */
    async getRatePlansLOV(requestParameters: GetRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep block codes parameter off for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue.<p><strong>OperationId:</strong>getRepBlockCodesParamOffLOV</p>
     * Return list of values for hotel rep block codes parameter off
     */
    async getRepBlockCodesParamOffLOVRaw(requestParameters: GetRepBlockCodesParamOffLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repBlockCodesParamOff`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep block codes parameter off for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue.<p><strong>OperationId:</strong>getRepBlockCodesParamOffLOV</p>
     * Return list of values for hotel rep block codes parameter off
     */
    async getRepBlockCodesParamOffLOV(requestParameters: GetRepBlockCodesParamOffLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepBlockCodesParamOffLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep block codes parameter on for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepBlockCodesParamOnLOV</p>
     * Return list of values for hotel rep block codes parameter on
     */
    async getRepBlockCodesParamOnLOVRaw(requestParameters: GetRepBlockCodesParamOnLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repBlockCodesParamOn`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep block codes parameter on for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepBlockCodesParamOnLOV</p>
     * Return list of values for hotel rep block codes parameter on
     */
    async getRepBlockCodesParamOnLOV(requestParameters: GetRepBlockCodesParamOnLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepBlockCodesParamOnLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep calendar months based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarMonthsLOV</p>
     * Return list of values for rep calendar months
     */
    async getRepCalendarMonthsLOVRaw(requestParameters: GetRepCalendarMonthsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/year/{year}/repCalendarMonths`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep calendar months based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarMonthsLOV</p>
     * Return list of values for rep calendar months
     */
    async getRepCalendarMonthsLOV(requestParameters: GetRepCalendarMonthsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepCalendarMonthsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep calendar weeks based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarWeeksLOV</p>
     * Return list of values for rep calendar weeks
     */
    async getRepCalendarWeeksLOVRaw(requestParameters: GetRepCalendarWeeksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/year/{year}/repCalendarWeeks`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep calendar weeks based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarWeeksLOV</p>
     * Return list of values for rep calendar weeks
     */
    async getRepCalendarWeeksLOV(requestParameters: GetRepCalendarWeeksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepCalendarWeeksLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep calendar years based on search criteria such as period, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarYearsLOV</p>
     * Return list of values for rep calendar years
     */
    async getRepCalendarYearsLOVRaw(requestParameters: GetRepCalendarYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/period/{period}/repCalendarYears`.replace(`{${"period"}}`, encodeURIComponent(String(requestParameters.period))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep calendar years based on search criteria such as period, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCalendarYearsLOV</p>
     * Return list of values for rep calendar years
     */
    async getRepCalendarYearsLOV(requestParameters: GetRepCalendarYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepCalendarYearsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep cashiers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCashiersLOV</p>
     * Return list of values for hotel rep cashiers
     */
    async getRepCashiersLOVRaw(requestParameters: GetRepCashiersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repCashiers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep cashiers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCashiersLOV</p>
     * Return list of values for hotel rep cashiers
     */
    async getRepCashiersLOV(requestParameters: GetRepCashiersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepCashiersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep contact lists for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepContactListLOV</p>
     * Return list of values for hotel rep contact lists
     */
    async getRepContactListLOVRaw(requestParameters: GetRepContactListLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repContactList`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep contact lists for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepContactListLOV</p>
     * Return list of values for hotel rep contact lists
     */
    async getRepContactListLOV(requestParameters: GetRepContactListLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepContactListLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCurrenciesLOV</p>
     * Return list of values for hotel rep currencies
     */
    async getRepCurrenciesLOVRaw(requestParameters: GetRepCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repCurrencies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepCurrenciesLOV</p>
     * Return list of values for hotel rep currencies
     */
    async getRepCurrenciesLOV(requestParameters: GetRepCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepCurrenciesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep departments for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepDepartmentsLOV</p>
     * Return list of values for hotel rep departments
     */
    async getRepDepartmentsLOVRaw(requestParameters: GetRepDepartmentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repDepartments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep departments for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepDepartmentsLOV</p>
     * Return list of values for hotel rep departments
     */
    async getRepDepartmentsLOV(requestParameters: GetRepDepartmentsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepDepartmentsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep fiscal months for a specific property based on search criteria such as fiscalYearId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalMonthsLOV</p>
     * Return list of values for hotel rep fiscal months
     */
    async getRepFiscalMonthsLOVRaw(requestParameters: GetRepFiscalMonthsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fiscalYearId/{fiscalYearId}/repFiscalMonths`.replace(`{${"fiscalYearId"}}`, encodeURIComponent(String(requestParameters.fiscalYearId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep fiscal months for a specific property based on search criteria such as fiscalYearId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalMonthsLOV</p>
     * Return list of values for hotel rep fiscal months
     */
    async getRepFiscalMonthsLOV(requestParameters: GetRepFiscalMonthsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepFiscalMonthsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep fiscal weeks for a specific property based on search criteria such as fiscalYearId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalWeeksLOV</p>
     * Return list of values for hotel rep fiscal weeks
     */
    async getRepFiscalWeeksLOVRaw(requestParameters: GetRepFiscalWeeksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fiscalYearId/{fiscalYearId}/repFiscalWeeks`.replace(`{${"fiscalYearId"}}`, encodeURIComponent(String(requestParameters.fiscalYearId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep fiscal weeks for a specific property based on search criteria such as fiscalYearId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalWeeksLOV</p>
     * Return list of values for hotel rep fiscal weeks
     */
    async getRepFiscalWeeksLOV(requestParameters: GetRepFiscalWeeksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepFiscalWeeksLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep fiscal years for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalYearsLOV</p>
     * Return list of values for hotel rep fiscal years
     */
    async getRepFiscalYearsLOVRaw(requestParameters: GetRepFiscalYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repFiscalYears`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep fiscal years for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepFiscalYearsLOV</p>
     * Return list of values for hotel rep fiscal years
     */
    async getRepFiscalYearsLOV(requestParameters: GetRepFiscalYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepFiscalYearsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep foreign currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepForeignCurrenciesLOV</p>
     * Return list of values for hotel rep foreign currencies
     */
    async getRepForeignCurrenciesLOVRaw(requestParameters: GetRepForeignCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repForeignCurrencies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep foreign currencies for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepForeignCurrenciesLOV</p>
     * Return list of values for hotel rep foreign currencies
     */
    async getRepForeignCurrenciesLOV(requestParameters: GetRepForeignCurrenciesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepForeignCurrenciesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep group reports based on search criteria such as groupName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepGroupReportsLOV</p>
     * Return list of values for rep group reports
     */
    async getRepGroupReportsLOVRaw(requestParameters: GetRepGroupReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/groupName/{groupName}/repGroupReports`.replace(`{${"groupName"}}`, encodeURIComponent(String(requestParameters.groupName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep group reports based on search criteria such as groupName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepGroupReportsLOV</p>
     * Return list of values for rep group reports
     */
    async getRepGroupReportsLOV(requestParameters: GetRepGroupReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepGroupReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepGroupsLOV</p>
     * Return list of values for hotel rep groups
     */
    async getRepGroupsLOVRaw(requestParameters: GetRepGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepGroupsLOV</p>
     * Return list of values for hotel rep groups
     */
    async getRepGroupsLOV(requestParameters: GetRepGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep inventory item pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepInventoryItemPoolsLOV</p>
     * Return list of values for hotel rep inventory item pools
     */
    async getRepInventoryItemPoolsLOVRaw(requestParameters: GetRepInventoryItemPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repInventoryItemPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep inventory item pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepInventoryItemPoolsLOV</p>
     * Return list of values for hotel rep inventory item pools
     */
    async getRepInventoryItemPoolsLOV(requestParameters: GetRepInventoryItemPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepInventoryItemPoolsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepMarketCodesLOV</p>
     * Return list of values for hotel rep market codes
     */
    async getRepMarketCodesLOVRaw(requestParameters: GetRepMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repMarketCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepMarketCodesLOV</p>
     * Return list of values for hotel rep market codes
     */
    async getRepMarketCodesLOV(requestParameters: GetRepMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepMarketCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep owner codes based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepOwnerCodesLOV</p>
     * Return list of values for rep owner codes
     */
    async getRepOwnerCodesLOVRaw(requestParameters: GetRepOwnerCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotelCodesList/{hotelCodesList}/repOwnerCodes`.replace(`{${"hotelCodesList"}}`, encodeURIComponent(String(requestParameters.hotelCodesList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep owner codes based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepOwnerCodesLOV</p>
     * Return list of values for rep owner codes
     */
    async getRepOwnerCodesLOV(requestParameters: GetRepOwnerCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepOwnerCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep rate plans based on search criteria such as propertyList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRatePlansLOV</p>
     * Return list of values for rep rate plans
     */
    async getRepRatePlansLOVRaw(requestParameters: GetRepRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/propertyList/{propertyList}/repRatePlans`.replace(`{${"propertyList"}}`, encodeURIComponent(String(requestParameters.propertyList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep rate plans based on search criteria such as propertyList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRatePlansLOV</p>
     * Return list of values for rep rate plans
     */
    async getRepRatePlansLOV(requestParameters: GetRepRatePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRatePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep room statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomStatusesLOV</p>
     * Return list of values for hotel rep room statuses
     */
    async getRepRoomStatusesLOVRaw(requestParameters: GetRepRoomStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repRoomStatuses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep room statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomStatusesLOV</p>
     * Return list of values for hotel rep room statuses
     */
    async getRepRoomStatusesLOV(requestParameters: GetRepRoomStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRoomStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep room type multi hotel based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomTypeMultiHotelLOV</p>
     * Return list of values for rep room type multi hotel
     */
    async getRepRoomTypeMultiHotelLOVRaw(requestParameters: GetRepRoomTypeMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotelCodeList/{hotelCodeList}/repRoomTypeMultiHotel`.replace(`{${"hotelCodeList"}}`, encodeURIComponent(String(requestParameters.hotelCodeList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep room type multi hotel based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomTypeMultiHotelLOV</p>
     * Return list of values for rep room type multi hotel
     */
    async getRepRoomTypeMultiHotelLOV(requestParameters: GetRepRoomTypeMultiHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRoomTypeMultiHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values forrep room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomTypesLOV</p>
     * Return list of values for hotel rep room types
     */
    async getRepRoomTypesLOVRaw(requestParameters: GetRepRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repRoomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values forrep room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomTypesLOV</p>
     * Return list of values for hotel rep room types
     */
    async getRepRoomTypesLOV(requestParameters: GetRepRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomsLOV</p>
     * Return list of values for hotel rep rooms
     */
    async getRepRoomsLOVRaw(requestParameters: GetRepRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomsLOV</p>
     * Return list of values for hotel rep rooms
     */
    async getRepRoomsLOV(requestParameters: GetRepRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep rooms statistics for a specific property based on search criteria such as toDate, fromDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomsStatLOV</p>
     * Return list of values for hotel rep rooms statistics
     */
    async getRepRoomsStatLOVRaw(requestParameters: GetRepRoomsStatLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fromDate/{fromDate}/toDate/{toDate}/repRoomsStat`.replace(`{${"toDate"}}`, encodeURIComponent(String(requestParameters.toDate))).replace(`{${"fromDate"}}`, encodeURIComponent(String(requestParameters.fromDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep rooms statistics for a specific property based on search criteria such as toDate, fromDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepRoomsStatLOV</p>
     * Return list of values for hotel rep rooms statistics
     */
    async getRepRoomsStatLOV(requestParameters: GetRepRoomsStatLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepRoomsStatLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep service request codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepServiceRequestCodesLOV</p>
     * Return list of values for hotel rep service request codes
     */
    async getRepServiceRequestCodesLOVRaw(requestParameters: GetRepServiceRequestCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repServiceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep service request codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepServiceRequestCodesLOV</p>
     * Return list of values for hotel rep service request codes
     */
    async getRepServiceRequestCodesLOV(requestParameters: GetRepServiceRequestCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepServiceRequestCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepTransactionCodesLOV</p>
     * Return list of values for hotel rep transaction codes
     */
    async getRepTransactionCodesLOVRaw(requestParameters: GetRepTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepTransactionCodesLOV</p>
     * Return list of values for hotel rep transaction codes
     */
    async getRepTransactionCodesLOV(requestParameters: GetRepTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepTransactionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rep travel agent calendar years for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepTraveAgtCalendarYearLOV</p>
     * Return list of values for hotel rep travel agent calendar years
     */
    async getRepTraveAgtCalendarYearLOVRaw(requestParameters: GetRepTraveAgtCalendarYearLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/repTraveAgtCalendarYear`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rep travel agent calendar years for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRepTraveAgtCalendarYearLOV</p>
     * Return list of values for hotel rep travel agent calendar years
     */
    async getRepTraveAgtCalendarYearLOV(requestParameters: GetRepTraveAgtCalendarYearLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRepTraveAgtCalendarYearLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for generic reports based on search criteria such as parameter, moduleId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReportsGenericLOV</p>
     * Return list of values for generic reports
     */
    async getReportsGenericLOVRaw(requestParameters: GetReportsGenericLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/moduleId/{moduleId}/parameterName/{parameter}/reportsGeneric`.replace(`{${"parameter"}}`, encodeURIComponent(String(requestParameters.parameter))).replace(`{${"moduleId"}}`, encodeURIComponent(String(requestParameters.moduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for generic reports based on search criteria such as parameter, moduleId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReportsGenericLOV</p>
     * Return list of values for generic reports
     */
    async getReportsGenericLOV(requestParameters: GetReportsGenericLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReportsGenericLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for report rate codes for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResStatReportRateCodeLOV</p>
     * Return list of values for hotel report rate codes
     */
    async getResStatReportRateCodeLOVRaw(requestParameters: GetResStatReportRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/beginDate/{beginDate}/endDate/{endDate}/resStatReportRateCode`.replace(`{${"endDate"}}`, encodeURIComponent(String(requestParameters.endDate))).replace(`{${"beginDate"}}`, encodeURIComponent(String(requestParameters.beginDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for report rate codes for a specific property based on search criteria such as endDate, beginDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResStatReportRateCodeLOV</p>
     * Return list of values for hotel report rate codes
     */
    async getResStatReportRateCodeLOV(requestParameters: GetResStatReportRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResStatReportRateCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation based blocks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationBasedBlocksLOV</p>
     * Return list of values for hotel reservation based blocks
     */
    async getReservationBasedBlocksLOVRaw(requestParameters: GetReservationBasedBlocksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/reservationBasedBlocks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation based blocks for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationBasedBlocksLOV</p>
     * Return list of values for hotel reservation based blocks
     */
    async getReservationBasedBlocksLOV(requestParameters: GetReservationBasedBlocksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationBasedBlocksLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation based profiles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationBasedProfilesLOV</p>
     * Return list of values for hotel reservation based profiles
     */
    async getReservationBasedProfilesLOVRaw(requestParameters: GetReservationBasedProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/reservationBasedProfiles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation based profiles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationBasedProfilesLOV</p>
     * Return list of values for hotel reservation based profiles
     */
    async getReservationBasedProfilesLOV(requestParameters: GetReservationBasedProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationBasedProfilesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation package group items for a specific property based on search criteria such as group, arrival, children, adults, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPackagesGroupItemsLOV</p>
     * Return list of values for hotel reservation package group items
     */
    async getReservationPackagesGroupItemsLOVRaw(requestParameters: GetReservationPackagesGroupItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/adults/{adults}/children/{children}/arrival/{arrival}/group/{group}/reservationPackagesGroupItems`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"arrival"}}`, encodeURIComponent(String(requestParameters.arrival))).replace(`{${"children"}}`, encodeURIComponent(String(requestParameters.children))).replace(`{${"adults"}}`, encodeURIComponent(String(requestParameters.adults))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation package group items for a specific property based on search criteria such as group, arrival, children, adults, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPackagesGroupItemsLOV</p>
     * Return list of values for hotel reservation package group items
     */
    async getReservationPackagesGroupItemsLOV(requestParameters: GetReservationPackagesGroupItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationPackagesGroupItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation packages for a specific property based on search criteria such as departure, arrival, children, adults, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPackagesLOV</p>
     * Return list of values for hotel reservation packages
     */
    async getReservationPackagesLOVRaw(requestParameters: GetReservationPackagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/adults/{adults}/children/{children}/arrival/{arrival}/departure/{departure}/reservationPackages`.replace(`{${"departure"}}`, encodeURIComponent(String(requestParameters.departure))).replace(`{${"arrival"}}`, encodeURIComponent(String(requestParameters.arrival))).replace(`{${"children"}}`, encodeURIComponent(String(requestParameters.children))).replace(`{${"adults"}}`, encodeURIComponent(String(requestParameters.adults))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation packages for a specific property based on search criteria such as departure, arrival, children, adults, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPackagesLOV</p>
     * Return list of values for hotel reservation packages
     */
    async getReservationPackagesLOV(requestParameters: GetReservationPackagesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationPackagesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation preferences for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPreferencesLOV</p>
     * Return list of values for hotel reservation preferences
     */
    async getReservationPreferencesLOVRaw(requestParameters: GetReservationPreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/reservationPreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation preferences for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationPreferencesLOV</p>
     * Return list of values for hotel reservation preferences
     */
    async getReservationPreferencesLOV(requestParameters: GetReservationPreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationPreferencesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationStatusesHotelLOV</p>
     * Return list of values for hotel reservation statuses
     */
    async getReservationStatusesHotelLOVRaw(requestParameters: GetReservationStatusesHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/reservationStatusesHotel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationStatusesHotelLOV</p>
     * Return list of values for hotel reservation statuses
     */
    async getReservationStatusesHotelLOV(requestParameters: GetReservationStatusesHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationStatusesHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation tickets codes for a specific property based on search criteria such as departure, arrival, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationTicketsCodesLOV</p>
     * Return list of values for hotel  reservation tickets codes
     */
    async getReservationTicketsCodesLOVRaw(requestParameters: GetReservationTicketsCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/arrival/{arrival}/departure/{departure}/reservationTicketsCodes`.replace(`{${"departure"}}`, encodeURIComponent(String(requestParameters.departure))).replace(`{${"arrival"}}`, encodeURIComponent(String(requestParameters.arrival))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation tickets codes for a specific property based on search criteria such as departure, arrival, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationTicketsCodesLOV</p>
     * Return list of values for hotel  reservation tickets codes
     */
    async getReservationTicketsCodesLOV(requestParameters: GetReservationTicketsCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationTicketsCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation tickets for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationTicketsLOV</p>
     * Return list of values for hotel reservation tickets
     */
    async getReservationTicketsLOVRaw(requestParameters: GetReservationTicketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resvNameId/{resvNameId}/reservationTickets`.replace(`{${"resvNameId"}}`, encodeURIComponent(String(requestParameters.resvNameId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation tickets for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getReservationTicketsLOV</p>
     * Return list of values for hotel reservation tickets
     */
    async getReservationTicketsLOV(requestParameters: GetReservationTicketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getReservationTicketsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort airports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortAirportsLOV</p>
     * Return list of values for hotel resort airports
     */
    async getResortAirportsLOVRaw(requestParameters: GetResortAirportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortAirports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort airports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortAirportsLOV</p>
     * Return list of values for hotel resort airports
     */
    async getResortAirportsLOV(requestParameters: GetResortAirportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortAirportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort CROs for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortCROsLOV</p>
     * Return list of values for hotel resort CROs
     */
    async getResortCROsLOVRaw(requestParameters: GetResortCROsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortCROs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort CROs for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortCROsLOV</p>
     * Return list of values for hotel resort CROs
     */
    async getResortCROsLOV(requestParameters: GetResortCROsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortCROsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort guarantee codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortGuaranteeCodesLOV</p>
     * Return list of values for hotel resort guarantee codes
     */
    async getResortGuaranteeCodesLOVRaw(requestParameters: GetResortGuaranteeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortGuaranteeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort guarantee codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortGuaranteeCodesLOV</p>
     * Return list of values for hotel resort guarantee codes
     */
    async getResortGuaranteeCodesLOV(requestParameters: GetResortGuaranteeCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortGuaranteeCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort inventory items for a specific property based on search criteria such as sellInEvent, sellInReservation, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortInventoryItemsLOV</p>
     * Return list of values for hotel resort inventory items
     */
    async getResortInventoryItemsLOVRaw(requestParameters: GetResortInventoryItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/sellInReservation/{sellInReservation}/sellInEvent/{sellInEvent}/resortInventoryItems`.replace(`{${"sellInEvent"}}`, encodeURIComponent(String(requestParameters.sellInEvent))).replace(`{${"sellInReservation"}}`, encodeURIComponent(String(requestParameters.sellInReservation))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort inventory items for a specific property based on search criteria such as sellInEvent, sellInReservation, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortInventoryItemsLOV</p>
     * Return list of values for hotel resort inventory items
     */
    async getResortInventoryItemsLOV(requestParameters: GetResortInventoryItemsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortInventoryItemsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortMarketCodesLOV</p>
     * Return list of values for hotel resort market codes
     */
    async getResortMarketCodesLOVRaw(requestParameters: GetResortMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortMarketCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort market codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortMarketCodesLOV</p>
     * Return list of values for hotel resort market codes
     */
    async getResortMarketCodesLOV(requestParameters: GetResortMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortMarketCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort rate classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRateClassesLOV</p>
     * Return list of values for hotel resort rate classes
     */
    async getResortRateClassesLOVRaw(requestParameters: GetResortRateClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortRateClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort rate classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRateClassesLOV</p>
     * Return list of values for hotel resort rate classes
     */
    async getResortRateClassesLOV(requestParameters: GetResortRateClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortRateClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort restriction statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRestrictionStatusesLOV</p>
     * Return list of values for hotel resort restriction statuses
     */
    async getResortRestrictionStatusesLOVRaw(requestParameters: GetResortRestrictionStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortRestrictionStatuses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort restriction statuses for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRestrictionStatusesLOV</p>
     * Return list of values for hotel resort restriction statuses
     */
    async getResortRestrictionStatusesLOV(requestParameters: GetResortRestrictionStatusesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortRestrictionStatusesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort room numbers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRoomNumbersLOV</p>
     * Return list of values for hotel resort room numbers
     */
    async getResortRoomNumbersLOVRaw(requestParameters: GetResortRoomNumbersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortRoomNumbers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort room numbers for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRoomNumbersLOV</p>
     * Return list of values for hotel resort room numbers
     */
    async getResortRoomNumbersLOV(requestParameters: GetResortRoomNumbersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortRoomNumbersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRoomTypesLOV</p>
     * Return list of values for hotel resort room types
     */
    async getResortRoomTypesLOVRaw(requestParameters: GetResortRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortRoomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortRoomTypesLOV</p>
     * Return list of values for hotel resort room types
     */
    async getResortRoomTypesLOV(requestParameters: GetResortRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resort transportation labels for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortTransportationLabelsLOV</p>
     * Return list of values for hotel resort transportation labels
     */
    async getResortTransportationLabelsLOVRaw(requestParameters: GetResortTransportationLabelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortTransportationLabels`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resort transportation labels for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResortTransportationLabelsLOV</p>
     * Return list of values for hotel resort transportation labels
     */
    async getResortTransportationLabelsLOV(requestParameters: GetResortTransportationLabelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResortTransportationLabelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for resource item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResourceItemClassesLOV</p>
     * Return list of values for hotel resource item classes
     */
    async getResourceItemClassesLOVRaw(requestParameters: GetResourceItemClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resourceItemClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for resource item classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResourceItemClassesLOV</p>
     * Return list of values for hotel resource item classes
     */
    async getResourceItemClassesLOV(requestParameters: GetResourceItemClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResourceItemClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation auto attach rule codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvAutoAttachRulesCodesLOV</p>
     * Return list of values for hotel reservation auto attach rule codes
     */
    async getResvAutoAttachRulesCodesLOVRaw(requestParameters: GetResvAutoAttachRulesCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resvAutoAttachRulesCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation auto attach rule codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvAutoAttachRulesCodesLOV</p>
     * Return list of values for hotel reservation auto attach rule codes
     */
    async getResvAutoAttachRulesCodesLOV(requestParameters: GetResvAutoAttachRulesCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResvAutoAttachRulesCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation auto attach rule types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvAutoAttachRulesRuleTypeLOV</p>
     * Return list of values for hotel reservation auto attach rule types
     */
    async getResvAutoAttachRulesRuleTypeLOVRaw(requestParameters: GetResvAutoAttachRulesRuleTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resvAutoAttachRulesRuleType`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation auto attach rule types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvAutoAttachRulesRuleTypeLOV</p>
     * Return list of values for hotel reservation auto attach rule types
     */
    async getResvAutoAttachRulesRuleTypeLOV(requestParameters: GetResvAutoAttachRulesRuleTypeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResvAutoAttachRulesRuleTypeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation based profiles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvBasedProfilesLOV</p>
     * Return list of values for hotel reservation based profiles
     */
    async getResvBasedProfilesLOVRaw(requestParameters: GetResvBasedProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resvBasedProfiles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation based profiles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvBasedProfilesLOV</p>
     * Return list of values for hotel reservation based profiles
     */
    async getResvBasedProfilesLOV(requestParameters: GetResvBasedProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResvBasedProfilesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for reservation transaction diversion codes for a specific property based on search criteria such as resvNameId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvTransactionDiversionCodesLOV</p>
     * Return list of values for hotel reservation transaction diversion codes
     */
    async getResvTransactionDiversionCodesLOVRaw(requestParameters: GetResvTransactionDiversionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resvNameId/{resvNameId}/resvTransactionDiversionCodes`.replace(`{${"resvNameId"}}`, encodeURIComponent(String(requestParameters.resvNameId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for reservation transaction diversion codes for a specific property based on search criteria such as resvNameId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getResvTransactionDiversionCodesLOV</p>
     * Return list of values for hotel reservation transaction diversion codes
     */
    async getResvTransactionDiversionCodesLOV(requestParameters: GetResvTransactionDiversionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getResvTransactionDiversionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for revenue bucket transaction codes for a specific property based on search criteria such as bucketType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueBucketTrxCodesLOV</p>
     * Return list of values for hotel revenue bucket transaction codes
     */
    async getRevenueBucketTrxCodesLOVRaw(requestParameters: GetRevenueBucketTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/bucketType/{bucketType}/revenueBucketTrxCodes`.replace(`{${"bucketType"}}`, encodeURIComponent(String(requestParameters.bucketType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for revenue bucket transaction codes for a specific property based on search criteria such as bucketType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueBucketTrxCodesLOV</p>
     * Return list of values for hotel revenue bucket transaction codes
     */
    async getRevenueBucketTrxCodesLOV(requestParameters: GetRevenueBucketTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRevenueBucketTrxCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for revenue buckets based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueBucketsLOV</p>
     * Return list of values for revenue buckets
     */
    async getRevenueBucketsLOVRaw(requestParameters: GetRevenueBucketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/type/{type}/revenueBuckets`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for revenue buckets based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueBucketsLOV</p>
     * Return list of values for revenue buckets
     */
    async getRevenueBucketsLOV(requestParameters: GetRevenueBucketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRevenueBucketsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for revenue type mapping space for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueTypeMappingSpaceLOV</p>
     * Return list of values for hotel revenue type mapping space
     */
    async getRevenueTypeMappingSpaceLOVRaw(requestParameters: GetRevenueTypeMappingSpaceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/revenueTypeMappingSpace`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for revenue type mapping space for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueTypeMappingSpaceLOV</p>
     * Return list of values for hotel revenue type mapping space
     */
    async getRevenueTypeMappingSpaceLOV(requestParameters: GetRevenueTypeMappingSpaceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRevenueTypeMappingSpaceLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for revenue type mapping transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueTypeMappingTrxCodesLOV</p>
     * Return list of values for hotel revenue type mapping transaction codes
     */
    async getRevenueTypeMappingTrxCodesLOVRaw(requestParameters: GetRevenueTypeMappingTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/revenueTypeMappingTrxCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for revenue type mapping transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRevenueTypeMappingTrxCodesLOV</p>
     * Return list of values for hotel revenue type mapping transaction codes
     */
    async getRevenueTypeMappingTrxCodesLOV(requestParameters: GetRevenueTypeMappingTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRevenueTypeMappingTrxCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for roles for level based on search criteria such as levelCode, roleLevel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRolesForLevelLOV</p>
     * Return list of values for roles for level
     */
    async getRolesForLevelLOVRaw(requestParameters: GetRolesForLevelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/roleLevel/{roleLevel}/levelCode/{levelCode}/rolesForLevel`.replace(`{${"levelCode"}}`, encodeURIComponent(String(requestParameters.levelCode))).replace(`{${"roleLevel"}}`, encodeURIComponent(String(requestParameters.roleLevel))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for roles for level based on search criteria such as levelCode, roleLevel, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRolesForLevelLOV</p>
     * Return list of values for roles for level
     */
    async getRolesForLevelLOV(requestParameters: GetRolesForLevelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRolesForLevelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room class categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassCategoriesLOV</p>
     * Return list of values for hotel room class categories
     */
    async getRoomClassCategoriesLOVRaw(requestParameters: GetRoomClassCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomClassCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room class categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassCategoriesLOV</p>
     * Return list of values for hotel room class categories
     */
    async getRoomClassCategoriesLOV(requestParameters: GetRoomClassCategoriesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomClassCategoriesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room class multi property based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassMultiPropertyLOV</p>
     * Return list of values for room class multi property
     */
    async getRoomClassMultiPropertyLOVRaw(requestParameters: GetRoomClassMultiPropertyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotelCodeList/{hotelCodeList}/roomClassMultiProperty`.replace(`{${"hotelCodeList"}}`, encodeURIComponent(String(requestParameters.hotelCodeList))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room class multi property based on search criteria such as hotelCodeList, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassMultiPropertyLOV</p>
     * Return list of values for room class multi property
     */
    async getRoomClassMultiPropertyLOV(requestParameters: GetRoomClassMultiPropertyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomClassMultiPropertyLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassesLOV</p>
     * Return list of values for hotel room classes
     */
    async getRoomClassesLOVRaw(requestParameters: GetRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room classes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomClassesLOV</p>
     * Return list of values for hotel room classes
     */
    async getRoomClassesLOV(requestParameters: GetRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room features for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomFeaturesLOV</p>
     * Return list of values for hotel room features
     */
    async getRoomFeaturesLOVRaw(requestParameters: GetRoomFeaturesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomFeatures`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room features for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomFeaturesLOV</p>
     * Return list of values for hotel room features
     */
    async getRoomFeaturesLOV(requestParameters: GetRoomFeaturesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomFeaturesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room hierarchy classes copy for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyClassesCopyLOV</p>
     * Return list of values for hotel room hierarchy classes copy
     */
    async getRoomHierarchyClassesCopyLOVRaw(requestParameters: GetRoomHierarchyClassesCopyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/property/{property}/roomHierarchyClassesCopy`.replace(`{${"property"}}`, encodeURIComponent(String(requestParameters.property))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room hierarchy classes copy for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyClassesCopyLOV</p>
     * Return list of values for hotel room hierarchy classes copy
     */
    async getRoomHierarchyClassesCopyLOV(requestParameters: GetRoomHierarchyClassesCopyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomHierarchyClassesCopyLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room hierarchy room classes for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyRoomClassesLOV</p>
     * Return list of values for hotel room hierarchy room classes
     */
    async getRoomHierarchyRoomClassesLOVRaw(requestParameters: GetRoomHierarchyRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/property/{property}/roomHierarchyRoomClasses`.replace(`{${"property"}}`, encodeURIComponent(String(requestParameters.property))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room hierarchy room classes for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyRoomClassesLOV</p>
     * Return list of values for hotel room hierarchy room classes
     */
    async getRoomHierarchyRoomClassesLOV(requestParameters: GetRoomHierarchyRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomHierarchyRoomClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room hierarchy room types for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyRoomTypesLOV</p>
     * Return list of values for hotel room hierarchy room types
     */
    async getRoomHierarchyRoomTypesLOVRaw(requestParameters: GetRoomHierarchyRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/property/{property}/roomHierarchyRoomTypes`.replace(`{${"property"}}`, encodeURIComponent(String(requestParameters.property))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room hierarchy room types for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyRoomTypesLOV</p>
     * Return list of values for hotel room hierarchy room types
     */
    async getRoomHierarchyRoomTypesLOV(requestParameters: GetRoomHierarchyRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomHierarchyRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room hierarchy types copy for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyTypesCopyLOV</p>
     * Return list of values for hotel room hierarchy types copy
     */
    async getRoomHierarchyTypesCopyLOVRaw(requestParameters: GetRoomHierarchyTypesCopyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/property/{property}/roomHierarchyTypesCopy`.replace(`{${"property"}}`, encodeURIComponent(String(requestParameters.property))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room hierarchy types copy for a specific property based on search criteria such as property, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHierarchyTypesCopyLOV</p>
     * Return list of values for hotel room hierarchy types copy
     */
    async getRoomHierarchyTypesCopyLOV(requestParameters: GetRoomHierarchyTypesCopyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomHierarchyTypesCopyLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room hold conditions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHoldConditionsLOV</p>
     * Return list of values for hotel room hold conditions
     */
    async getRoomHoldConditionsLOVRaw(requestParameters: GetRoomHoldConditionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomHoldConditions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room hold conditions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomHoldConditionsLOV</p>
     * Return list of values for hotel room hold conditions
     */
    async getRoomHoldConditionsLOV(requestParameters: GetRoomHoldConditionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomHoldConditionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room maintenance for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomMaintenanceLOV</p>
     * Return list of values for hotel room maintenance
     */
    async getRoomMaintenanceLOVRaw(requestParameters: GetRoomMaintenanceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomMaintenance`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room maintenance for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomMaintenanceLOV</p>
     * Return list of values for hotel room maintenance
     */
    async getRoomMaintenanceLOV(requestParameters: GetRoomMaintenanceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomMaintenanceLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room pool room types for a specific property based on search criteria such as roomPool, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomPoolRoomTypesLOV</p>
     * Return list of values for hotel room pool room types
     */
    async getRoomPoolRoomTypesLOVRaw(requestParameters: GetRoomPoolRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomPool/{roomPool}/roomPoolRoomTypes`.replace(`{${"roomPool"}}`, encodeURIComponent(String(requestParameters.roomPool))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room pool room types for a specific property based on search criteria such as roomPool, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomPoolRoomTypesLOV</p>
     * Return list of values for hotel room pool room types
     */
    async getRoomPoolRoomTypesLOV(requestParameters: GetRoomPoolRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomPoolRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomPoolsLOV</p>
     * Return list of values for hotel room pools
     */
    async getRoomPoolsLOVRaw(requestParameters: GetRoomPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomPoolsLOV</p>
     * Return list of values for hotel room pools
     */
    async getRoomPoolsLOV(requestParameters: GetRoomPoolsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomPoolsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room rates for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRatesLOV</p>
     * Return list of values for hotel room rates
     */
    async getRoomRatesLOVRaw(requestParameters: GetRoomRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/room/{room}/roomRates`.replace(`{${"room"}}`, encodeURIComponent(String(requestParameters.room))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room rates for a specific property based on search criteria such as room, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRatesLOV</p>
     * Return list of values for hotel room rates
     */
    async getRoomRatesLOV(requestParameters: GetRoomRatesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomRatesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room reservation status based on search criteria such as includeDayUse, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomReservationStatusLOV</p>
     * Return list of values for room reservation status
     */
    async getRoomReservationStatusLOVRaw(requestParameters: GetRoomReservationStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeDayUse/{includeDayUse}/roomReservationStatus`.replace(`{${"includeDayUse"}}`, encodeURIComponent(String(requestParameters.includeDayUse))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room reservation status based on search criteria such as includeDayUse, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomReservationStatusLOV</p>
     * Return list of values for room reservation status
     */
    async getRoomReservationStatusLOV(requestParameters: GetRoomReservationStatusLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomReservationStatusLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room revenue transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRevenueTrxCodesLOV</p>
     * Return list of values for hotel room revenue transaction codes
     */
    async getRoomRevenueTrxCodesLOVRaw(requestParameters: GetRoomRevenueTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomRevenueTrxCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room revenue transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRevenueTrxCodesLOV</p>
     * Return list of values for hotel room revenue transaction codes
     */
    async getRoomRevenueTrxCodesLOV(requestParameters: GetRoomRevenueTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomRevenueTrxCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room rotation groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRotationGroupsLOV</p>
     * Return list of values for hotel room rotation groups
     */
    async getRoomRotationGroupsLOVRaw(requestParameters: GetRoomRotationGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomRotationGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room rotation groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRotationGroupsLOV</p>
     * Return list of values for hotel room rotation groups
     */
    async getRoomRotationGroupsLOV(requestParameters: GetRoomRotationGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomRotationGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room rotation unit grades for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRotationUnitGradesLOV</p>
     * Return list of values for hotel room rotation unit grades
     */
    async getRoomRotationUnitGradesLOVRaw(requestParameters: GetRoomRotationUnitGradesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomRotationUnitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room rotation unit grades for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomRotationUnitGradesLOV</p>
     * Return list of values for hotel room rotation unit grades
     */
    async getRoomRotationUnitGradesLOV(requestParameters: GetRoomRotationUnitGradesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomRotationUnitGradesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room specials for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomSpecialsLOV</p>
     * Return list of values for hotel room specials
     */
    async getRoomSpecialsLOVRaw(requestParameters: GetRoomSpecialsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomSpecials`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room specials for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomSpecialsLOV</p>
     * Return list of values for hotel room specials
     */
    async getRoomSpecialsLOV(requestParameters: GetRoomSpecialsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomSpecialsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room type pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypePoolLOV</p>
     * Return list of values for hotel room type pools
     */
    async getRoomTypePoolLOVRaw(requestParameters: GetRoomTypePoolLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomTypePool`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room type pools for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypePoolLOV</p>
     * Return list of values for hotel room type pools
     */
    async getRoomTypePoolLOV(requestParameters: GetRoomTypePoolLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomTypePoolLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room types for mass rate for a specific property based on search criteria such as ratePlanCodes, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypesForMassRateLOV</p>
     * Return list of values for hotel room types for mass rate
     */
    async getRoomTypesForMassRateLOVRaw(requestParameters: GetRoomTypesForMassRateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/ratePlanCodes/{ratePlanCodes}/roomTypesForMassRate`.replace(`{${"ratePlanCodes"}}`, encodeURIComponent(String(requestParameters.ratePlanCodes))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room types for mass rate for a specific property based on search criteria such as ratePlanCodes, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypesForMassRateLOV</p>
     * Return list of values for hotel room types for mass rate
     */
    async getRoomTypesForMassRateLOV(requestParameters: GetRoomTypesForMassRateLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomTypesForMassRateLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypesLOV</p>
     * Return list of values for hotel room types
     */
    async getRoomTypesLOVRaw(requestParameters: GetRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomTypesLOV</p>
     * Return list of values for hotel room types
     */
    async getRoomTypesLOV(requestParameters: GetRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rooming list housekeeping rooms for a specific property based on search criteria such as departure, arrival, roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomingListHKRoomsLOV</p>
     * Return list of values for hotel rooming list housekeeping rooms
     */
    async getRoomingListHKRoomsLOVRaw(requestParameters: GetRoomingListHKRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomType/{roomType}/arrival/{arrival}/departure/{departure}/roomingListHKRooms`.replace(`{${"departure"}}`, encodeURIComponent(String(requestParameters.departure))).replace(`{${"arrival"}}`, encodeURIComponent(String(requestParameters.arrival))).replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rooming list housekeeping rooms for a specific property based on search criteria such as departure, arrival, roomType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomingListHKRoomsLOV</p>
     * Return list of values for hotel rooming list housekeeping rooms
     */
    async getRoomingListHKRoomsLOV(requestParameters: GetRoomingListHKRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomingListHKRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rooms key generation for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomsKeyGenerationLOV</p>
     * Return list of values for hotel rooms key generation
     */
    async getRoomsKeyGenerationLOVRaw(requestParameters: GetRoomsKeyGenerationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roomsKeyGeneration`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rooms key generation for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomsKeyGenerationLOV</p>
     * Return list of values for hotel rooms key generation
     */
    async getRoomsKeyGenerationLOV(requestParameters: GetRoomsKeyGenerationLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomsKeyGenerationLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomsLOV</p>
     * Return list of values for hotel rooms
     */
    async getRoomsLOVRaw(requestParameters: GetRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoomsLOV</p>
     * Return list of values for hotel rooms
     */
    async getRoomsLOV(requestParameters: GetRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for routing instructions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoutingInstructionsLOV</p>
     * Return list of values for hotel routing instructions
     */
    async getRoutingInstructionsLOVRaw(requestParameters: GetRoutingInstructionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/routingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for routing instructions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getRoutingInstructionsLOV</p>
     * Return list of values for hotel routing instructions
     */
    async getRoutingInstructionsLOV(requestParameters: GetRoutingInstructionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getRoutingInstructionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for sales manager goal periods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSalesManagerGoalPeriodLOV</p>
     * Return list of values for hotel sales manager goal periods
     */
    async getSalesManagerGoalPeriodLOVRaw(requestParameters: GetSalesManagerGoalPeriodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/salesManagerGoalPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for sales manager goal periods for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSalesManagerGoalPeriodLOV</p>
     * Return list of values for hotel sales manager goal periods
     */
    async getSalesManagerGoalPeriodLOV(requestParameters: GetSalesManagerGoalPeriodLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSalesManagerGoalPeriodLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for scheduled report exports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScheduledReportsExportLOV</p>
     * Return list of values for hotel  scheduled report exports
     */
    async getScheduledReportsExportLOVRaw(requestParameters: GetScheduledReportsExportLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/scheduledReportsExport`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for scheduled report exports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScheduledReportsExportLOV</p>
     * Return list of values for hotel  scheduled report exports
     */
    async getScheduledReportsExportLOV(requestParameters: GetScheduledReportsExportLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getScheduledReportsExportLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for screen codes based on search criteria such as screenArea, screenType, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScreenCodesLOV</p>
     * Return list of values for screen codes
     */
    async getScreenCodesLOVRaw(requestParameters: GetScreenCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/chainCode/{chainCode}/screenType/{screenType}/screenArea/{screenArea}/screenCodes`.replace(`{${"screenArea"}}`, encodeURIComponent(String(requestParameters.screenArea))).replace(`{${"screenType"}}`, encodeURIComponent(String(requestParameters.screenType))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for screen codes based on search criteria such as screenArea, screenType, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScreenCodesLOV</p>
     * Return list of values for screen codes
     */
    async getScreenCodesLOV(requestParameters: GetScreenCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getScreenCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for screen style codes based on search criteria such as screenCode, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScreenStyleCodesLOV</p>
     * Return list of values for screen style codes
     */
    async getScreenStyleCodesLOVRaw(requestParameters: GetScreenStyleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/chainCode/{chainCode}/screenCode/{screenCode}/screenStyleCodes`.replace(`{${"screenCode"}}`, encodeURIComponent(String(requestParameters.screenCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for screen style codes based on search criteria such as screenCode, chainCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getScreenStyleCodesLOV</p>
     * Return list of values for screen style codes
     */
    async getScreenStyleCodesLOV(requestParameters: GetScreenStyleCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getScreenStyleCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for service names based on search criteria such as protocol, outboundType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getServiceNameLOV</p>
     * Return list of values for service names
     */
    async getServiceNameLOVRaw(requestParameters: GetServiceNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/outboundType/{outboundType}/protocol/{protocol}/outboundServiceNames`.replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters.protocol))).replace(`{${"outboundType"}}`, encodeURIComponent(String(requestParameters.outboundType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for service names based on search criteria such as protocol, outboundType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getServiceNameLOV</p>
     * Return list of values for service names
     */
    async getServiceNameLOV(requestParameters: GetServiceNameLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getServiceNameLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for service request codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getServiceRequestCodesLOV</p>
     * Return list of values for hotel service request codes
     */
    async getServiceRequestCodesLOVRaw(requestParameters: GetServiceRequestCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for service request codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getServiceRequestCodesLOV</p>
     * Return list of values for hotel service request codes
     */
    async getServiceRequestCodesLOV(requestParameters: GetServiceRequestCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getServiceRequestCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for setup styles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSetupStylesLOV</p>
     * Return list of values for hotel setup styles
     */
    async getSetupStylesLOVRaw(requestParameters: GetSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/setupStyles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for setup styles for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSetupStylesLOV</p>
     * Return list of values for hotel setup styles
     */
    async getSetupStylesLOV(requestParameters: GetSetupStylesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSetupStylesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for shift reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getShiftReportsLOV</p>
     * Return list of values for hotel shift reports
     */
    async getShiftReportsLOVRaw(requestParameters: GetShiftReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/shiftReports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for shift reports for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getShiftReportsLOV</p>
     * Return list of values for hotel shift reports
     */
    async getShiftReportsLOV(requestParameters: GetShiftReportsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getShiftReportsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for shift reports no parameter based on search criteria such as shiftGroupId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getShiftReportsNoParamLOV</p>
     * Return list of values for shift reports no parameter
     */
    async getShiftReportsNoParamLOVRaw(requestParameters: GetShiftReportsNoParamLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/shiftGroupId/{shiftGroupId}/shiftReportsNoParam`.replace(`{${"shiftGroupId"}}`, encodeURIComponent(String(requestParameters.shiftGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for shift reports no parameter based on search criteria such as shiftGroupId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getShiftReportsNoParamLOV</p>
     * Return list of values for shift reports no parameter
     */
    async getShiftReportsNoParamLOV(requestParameters: GetShiftReportsNoParamLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getShiftReportsNoParamLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for site plan section type links for a specific property based on search criteria such as sectionType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlanSectionTypeLinksLOV</p>
     * Return list of values for hotel site plan section type links
     */
    async getSitePlanSectionTypeLinksLOVRaw(requestParameters: GetSitePlanSectionTypeLinksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/sectionType/{sectionType}/sitePlanSectionTypeLinks`.replace(`{${"sectionType"}}`, encodeURIComponent(String(requestParameters.sectionType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for site plan section type links for a specific property based on search criteria such as sectionType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlanSectionTypeLinksLOV</p>
     * Return list of values for hotel site plan section type links
     */
    async getSitePlanSectionTypeLinksLOV(requestParameters: GetSitePlanSectionTypeLinksLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSitePlanSectionTypeLinksLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for site plan section types based on search criteria such as siteType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlanSectionTypesLOV</p>
     * Return list of values for site plan section types
     */
    async getSitePlanSectionTypesLOVRaw(requestParameters: GetSitePlanSectionTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/siteType/{siteType}/sitePlanSectionTypes`.replace(`{${"siteType"}}`, encodeURIComponent(String(requestParameters.siteType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for site plan section types based on search criteria such as siteType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlanSectionTypesLOV</p>
     * Return list of values for site plan section types
     */
    async getSitePlanSectionTypesLOV(requestParameters: GetSitePlanSectionTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSitePlanSectionTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for site plans for a specific property based on search criteria such as siteType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlansLOV</p>
     * Return list of values for hotel site plans
     */
    async getSitePlansLOVRaw(requestParameters: GetSitePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/siteType/{siteType}/sitePlans`.replace(`{${"siteType"}}`, encodeURIComponent(String(requestParameters.siteType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for site plans for a specific property based on search criteria such as siteType, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSitePlansLOV</p>
     * Return list of values for hotel site plans
     */
    async getSitePlansLOV(requestParameters: GetSitePlansLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSitePlansLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for source groups for a specific property based on search criteria such as includeInactive, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSourceGroupsLOV</p>
     * Return list of values for hotel source groups
     */
    async getSourceGroupsLOVRaw(requestParameters: GetSourceGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/includeInactive/{includeInactive}/sourceGroups`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for source groups for a specific property based on search criteria such as includeInactive, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSourceGroupsLOV</p>
     * Return list of values for hotel source groups
     */
    async getSourceGroupsLOV(requestParameters: GetSourceGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSourceGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for spaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpacesLOV</p>
     * Return list of values for hotel spaces
     */
    async getSpacesLOVRaw(requestParameters: GetSpacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/spaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for spaces for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpacesLOV</p>
     * Return list of values for hotel spaces
     */
    async getSpacesLOV(requestParameters: GetSpacesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSpacesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for special requests for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpecialRequestsLOV</p>
     * Return list of values for hotel special requests
     */
    async getSpecialRequestsLOVRaw(requestParameters: GetSpecialRequestsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/specialRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for special requests for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpecialRequestsLOV</p>
     * Return list of values for hotel special requests
     */
    async getSpecialRequestsLOV(requestParameters: GetSpecialRequestsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSpecialRequestsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for specials for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpecialsLOV</p>
     * Return list of values for hotel specials
     */
    async getSpecialsLOVRaw(requestParameters: GetSpecialsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/specials`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for specials for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSpecialsLOV</p>
     * Return list of values for hotel specials
     */
    async getSpecialsLOV(requestParameters: GetSpecialsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSpecialsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for stage profiles for a specific property based on search criteria such as criteria, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStageProfilesLOV</p>
     * Return list of values for hotel stage profiles
     */
    async getStageProfilesLOVRaw(requestParameters: GetStageProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/criteria/{criteria}/stageProfiles`.replace(`{${"criteria"}}`, encodeURIComponent(String(requestParameters.criteria))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for stage profiles for a specific property based on search criteria such as criteria, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStageProfilesLOV</p>
     * Return list of values for hotel stage profiles
     */
    async getStageProfilesLOV(requestParameters: GetStageProfilesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getStageProfilesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for staged profile preferences for a specific property based on search criteria such as resortNameId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStagedProfilePreferencesLOV</p>
     * Return list of values for hotel staged profile preferences
     */
    async getStagedProfilePreferencesLOVRaw(requestParameters: GetStagedProfilePreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/resortNameId/{resortNameId}/stagedProfilePreferences`.replace(`{${"resortNameId"}}`, encodeURIComponent(String(requestParameters.resortNameId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for staged profile preferences for a specific property based on search criteria such as resortNameId, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStagedProfilePreferencesLOV</p>
     * Return list of values for hotel staged profile preferences
     */
    async getStagedProfilePreferencesLOV(requestParameters: GetStagedProfilePreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getStagedProfilePreferencesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for statistics years based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStatisticsYearsLOV</p>
     * Return list of values for statistics years
     */
    async getStatisticsYearsLOVRaw(requestParameters: GetStatisticsYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/year/{year}/statisticsYears`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for statistics years based on search criteria such as year, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStatisticsYearsLOV</p>
     * Return list of values for statistics years
     */
    async getStatisticsYearsLOV(requestParameters: GetStatisticsYearsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getStatisticsYearsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for stored value redeem transactions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStoredValueRedeemTrxLOV</p>
     * Return list of values for hotel stored value redeem transactions
     */
    async getStoredValueRedeemTrxLOVRaw(requestParameters: GetStoredValueRedeemTrxLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/storedValueRedeemTrx`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for stored value redeem transactions for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getStoredValueRedeemTrxLOV</p>
     * Return list of values for hotel stored value redeem transactions
     */
    async getStoredValueRedeemTrxLOV(requestParameters: GetStoredValueRedeemTrxLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getStoredValueRedeemTrxLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for sub blocks for a specific property based on search criteria such as superBlock, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSubBlockLOV</p>
     * Return list of values for hotel sub blocks
     */
    async getSubBlockLOVRaw(requestParameters: GetSubBlockLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/superBlock/{superBlock}/subBlock`.replace(`{${"superBlock"}}`, encodeURIComponent(String(requestParameters.superBlock))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for sub blocks for a specific property based on search criteria such as superBlock, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSubBlockLOV</p>
     * Return list of values for hotel sub blocks
     */
    async getSubBlockLOV(requestParameters: GetSubBlockLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSubBlockLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for summary refresh logs for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSummaryRefreshLogLOV</p>
     * Return list of values for hotel summary refresh logs
     */
    async getSummaryRefreshLogLOVRaw(requestParameters: GetSummaryRefreshLogLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/summaryRefreshLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for summary refresh logs for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSummaryRefreshLogLOV</p>
     * Return list of values for hotel summary refresh logs
     */
    async getSummaryRefreshLogLOV(requestParameters: GetSummaryRefreshLogLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSummaryRefreshLogLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for synchronize rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSynchronizeRateCodesLOV</p>
     * Return list of values for hotel synchronize rate codes
     */
    async getSynchronizeRateCodesLOVRaw(requestParameters: GetSynchronizeRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/synchronizeRateCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for synchronize rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getSynchronizeRateCodesLOV</p>
     * Return list of values for hotel synchronize rate codes
     */
    async getSynchronizeRateCodesLOV(requestParameters: GetSynchronizeRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getSynchronizeRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for task break out for a specific property based on search criteria such as fromDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskBreakOutLOV</p>
     * Return list of values for hotel task break out
     */
    async getTaskBreakOutLOVRaw(requestParameters: GetTaskBreakOutLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fromDate/{fromDate}/taskBreakOut`.replace(`{${"fromDate"}}`, encodeURIComponent(String(requestParameters.fromDate))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for task break out for a specific property based on search criteria such as fromDate, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskBreakOutLOV</p>
     * Return list of values for hotel task break out
     */
    async getTaskBreakOutLOV(requestParameters: GetTaskBreakOutLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaskBreakOutLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for task sheet departments based on search criteria such as levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetDeptLOV</p>
     * Return list of values for task sheet departments
     */
    async getTaskSheetDeptLOVRaw(requestParameters: GetTaskSheetDeptLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/levelCode/{levelCode}/taskSheetDept`.replace(`{${"levelCode"}}`, encodeURIComponent(String(requestParameters.levelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for task sheet departments based on search criteria such as levelCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetDeptLOV</p>
     * Return list of values for task sheet departments
     */
    async getTaskSheetDeptLOV(requestParameters: GetTaskSheetDeptLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaskSheetDeptLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for task sheets based on search criteria such as breakOutId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetLOV</p>
     * Return list of values for task sheets
     */
    async getTaskSheetLOVRaw(requestParameters: GetTaskSheetLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/breakOutId/{breakOutId}/taskSheet`.replace(`{${"breakOutId"}}`, encodeURIComponent(String(requestParameters.breakOutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for task sheets based on search criteria such as breakOutId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetLOV</p>
     * Return list of values for task sheets
     */
    async getTaskSheetLOV(requestParameters: GetTaskSheetLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaskSheetLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for task sheet rooms for a specific property based on search criteria such as taskSheetNo, taskCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetRoomsLOV</p>
     * Return list of values for hotel task sheet rooms
     */
    async getTaskSheetRoomsLOVRaw(requestParameters: GetTaskSheetRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/taskCode/{taskCode}/taskSheetNo/{taskSheetNo}/taskSheetRooms`.replace(`{${"taskSheetNo"}}`, encodeURIComponent(String(requestParameters.taskSheetNo))).replace(`{${"taskCode"}}`, encodeURIComponent(String(requestParameters.taskCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for task sheet rooms for a specific property based on search criteria such as taskSheetNo, taskCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaskSheetRoomsLOV</p>
     * Return list of values for hotel task sheet rooms
     */
    async getTaskSheetRoomsLOV(requestParameters: GetTaskSheetRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaskSheetRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for tax transaction code for a specific property based on search criteria such as taxCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaxTransactionCodeLOV</p>
     * Return list of values for hotel tax transaction code
     */
    async getTaxTransactionCodeLOVRaw(requestParameters: GetTaxTransactionCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/taxCode/{taxCode}/taxTransactionCode`.replace(`{${"taxCode"}}`, encodeURIComponent(String(requestParameters.taxCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for tax transaction code for a specific property based on search criteria such as taxCode, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaxTransactionCodeLOV</p>
     * Return list of values for hotel tax transaction code
     */
    async getTaxTransactionCodeLOV(requestParameters: GetTaxTransactionCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaxTransactionCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for tax types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaxTypesLOV</p>
     * Return list of values for hotel tax types
     */
    async getTaxTypesLOVRaw(requestParameters: GetTaxTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/taxTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for tax types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTaxTypesLOV</p>
     * Return list of values for hotel tax types
     */
    async getTaxTypesLOV(requestParameters: GetTaxTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTaxTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for telephone categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTelephoneCategoryLOV</p>
     * Return list of values for hotel telephone categories
     */
    async getTelephoneCategoryLOVRaw(requestParameters: GetTelephoneCategoryLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/telephoneCategory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for telephone categories for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTelephoneCategoryLOV</p>
     * Return list of values for hotel telephone categories
     */
    async getTelephoneCategoryLOV(requestParameters: GetTelephoneCategoryLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTelephoneCategoryLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to return the list of values for booking channel room type templates based on search criteria such as bookingChannelCodes, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateBookingChannelRoomTypesLOV</p>
     * Return list of values for booking channel room type templates
     */
    async getTemplateBookingChannelRoomTypesLOVRaw(requestParameters: GetTemplateBookingChannelRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/bookingChannels/{bookingChannelCode}/templateBookingChannelRoomTypes`.replace(`{${"bookingChannelCode"}}`, encodeURIComponent(String(requestParameters.bookingChannelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     *  Use this API to return the list of values for booking channel room type templates based on search criteria such as bookingChannelCodes, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateBookingChannelRoomTypesLOV</p>
     * Return list of values for booking channel room type templates
     */
    async getTemplateBookingChannelRoomTypesLOV(requestParameters: GetTemplateBookingChannelRoomTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateBookingChannelRoomTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for fiscal folio parameter templates based on search criteria such as templateCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateFiscalFolioParametersLOV</p>
     * Return list of values for fiscal folio parameter templates
     */
    async getTemplateFiscalFolioParametersLOVRaw(requestParameters: GetTemplateFiscalFolioParametersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/templateCode/{templateCode}/templateFiscalFolioParameters`.replace(`{${"templateCode"}}`, encodeURIComponent(String(requestParameters.templateCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for fiscal folio parameter templates based on search criteria such as templateCode, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateFiscalFolioParametersLOV</p>
     * Return list of values for fiscal folio parameter templates
     */
    async getTemplateFiscalFolioParametersLOV(requestParameters: GetTemplateFiscalFolioParametersLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateFiscalFolioParametersLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for market code templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateMarketCodesLOV</p>
     * Return list of values for market code templates
     */
    async getTemplateMarketCodesLOVRaw(requestParameters: GetTemplateMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeInactive/{includeInactive}/templateMarketCodes`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for market code templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateMarketCodesLOV</p>
     * Return list of values for market code templates
     */
    async getTemplateMarketCodesLOV(requestParameters: GetTemplateMarketCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateMarketCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for market group templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateMarketGroupsLOV</p>
     * Return list of values for market group templates
     */
    async getTemplateMarketGroupsLOVRaw(requestParameters: GetTemplateMarketGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeInactive/{includeInactive}/templateMarketGroups`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for market group templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateMarketGroupsLOV</p>
     * Return list of values for market group templates
     */
    async getTemplateMarketGroupsLOV(requestParameters: GetTemplateMarketGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateMarketGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for policy code templates based on search criteria such as policyType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplatePolicyCodesLOV</p>
     * Return list of values for policy code templates
     */
    async getTemplatePolicyCodesLOVRaw(requestParameters: GetTemplatePolicyCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/policyType/{policyType}/templatePolicyCodes`.replace(`{${"policyType"}}`, encodeURIComponent(String(requestParameters.policyType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for policy code templates based on search criteria such as policyType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplatePolicyCodesLOV</p>
     * Return list of values for policy code templates
     */
    async getTemplatePolicyCodesLOV(requestParameters: GetTemplatePolicyCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplatePolicyCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for preference templates based on search criteria such as includeGlobals, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplatePreferencesLOV</p>
     * Return list of values for preference templates
     */
    async getTemplatePreferencesLOVRaw(requestParameters: GetTemplatePreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeGlobals/{includeGlobals}/templatePreferences`.replace(`{${"includeGlobals"}}`, encodeURIComponent(String(requestParameters.includeGlobals))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for preference templates based on search criteria such as includeGlobals, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplatePreferencesLOV</p>
     * Return list of values for preference templates
     */
    async getTemplatePreferencesLOV(requestParameters: GetTemplatePreferencesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplatePreferencesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for room class templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateRoomClassesLOV</p>
     * Return list of values for room class templates
     */
    async getTemplateRoomClassesLOVRaw(requestParameters: GetTemplateRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeInactive/{includeInactive}/templateRoomClasses`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for room class templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateRoomClassesLOV</p>
     * Return list of values for room class templates
     */
    async getTemplateRoomClassesLOV(requestParameters: GetTemplateRoomClassesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateRoomClassesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for source code templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateSourceCodesLOV</p>
     * Return list of values for source code templates
     */
    async getTemplateSourceCodesLOVRaw(requestParameters: GetTemplateSourceCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeInactive/{includeInactive}/templateSourceCodes`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for source code templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateSourceCodesLOV</p>
     * Return list of values for source code templates
     */
    async getTemplateSourceCodesLOV(requestParameters: GetTemplateSourceCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateSourceCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for source group templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateSourceGroupsLOV</p>
     * Return list of values for source group templates
     */
    async getTemplateSourceGroupsLOVRaw(requestParameters: GetTemplateSourceGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/includeInactive/{includeInactive}/templateSourceGroups`.replace(`{${"includeInactive"}}`, encodeURIComponent(String(requestParameters.includeInactive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for source group templates based on search criteria such as includeInactive, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateSourceGroupsLOV</p>
     * Return list of values for source group templates
     */
    async getTemplateSourceGroupsLOV(requestParameters: GetTemplateSourceGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateSourceGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction subgroup templates based on search criteria such as fetchOnlyUniqueValues, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateTransactionSubgroupsLOV</p>
     * Return list of values for transaction subgroup templates
     */
    async getTemplateTransactionSubgroupsLOVRaw(requestParameters: GetTemplateTransactionSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/fetchOnlyUniqueValues/{fetchOnlyUniqueValues}/templateTransactionSubgroups`.replace(`{${"fetchOnlyUniqueValues"}}`, encodeURIComponent(String(requestParameters.fetchOnlyUniqueValues))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction subgroup templates based on search criteria such as fetchOnlyUniqueValues, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTemplateTransactionSubgroupsLOV</p>
     * Return list of values for transaction subgroup templates
     */
    async getTemplateTransactionSubgroupsLOV(requestParameters: GetTemplateTransactionSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTemplateTransactionSubgroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for test upsell rule rate codes for a specific property based on search criteria such as roomCategory, arrivalDate, nights, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTestUpsellRulesRateCodeLOV</p>
     * Return list of values for hotel test upsell rule rate codes
     */
    async getTestUpsellRulesRateCodeLOVRaw(requestParameters: GetTestUpsellRulesRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/nights/{nights}/arrivalDate/{arrivalDate}/roomCategory/{roomCategory}/testUpsellRulesRateCode`.replace(`{${"roomCategory"}}`, encodeURIComponent(String(requestParameters.roomCategory))).replace(`{${"arrivalDate"}}`, encodeURIComponent(String(requestParameters.arrivalDate))).replace(`{${"nights"}}`, encodeURIComponent(String(requestParameters.nights))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for test upsell rule rate codes for a specific property based on search criteria such as roomCategory, arrivalDate, nights, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTestUpsellRulesRateCodeLOV</p>
     * Return list of values for hotel test upsell rule rate codes
     */
    async getTestUpsellRulesRateCodeLOV(requestParameters: GetTestUpsellRulesRateCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTestUpsellRulesRateCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for to postal codes based on search criteria such as country, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getToPostalCodesLOV</p>
     * Return list of values for to postal codes
     */
    async getToPostalCodesLOVRaw(requestParameters: GetToPostalCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/country/{country}/toPostalCodes`.replace(`{${"country"}}`, encodeURIComponent(String(requestParameters.country))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for to postal codes based on search criteria such as country, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getToPostalCodesLOV</p>
     * Return list of values for to postal codes
     */
    async getToPostalCodesLOV(requestParameters: GetToPostalCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getToPostalCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for trace date calculations based on search criteria such as view, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTraceDateCalcLOV</p>
     * Return list of values for trace date calculations
     */
    async getTraceDateCalcLOVRaw(requestParameters: GetTraceDateCalcLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/view/{view}/traceDateCalc`.replace(`{${"view"}}`, encodeURIComponent(String(requestParameters.view))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for trace date calculations based on search criteria such as view, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTraceDateCalcLOV</p>
     * Return list of values for trace date calculations
     */
    async getTraceDateCalcLOV(requestParameters: GetTraceDateCalcLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTraceDateCalcLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for trace fields based on search criteria such as view, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTraceFieldLOV</p>
     * Return list of values for trace fields
     */
    async getTraceFieldLOVRaw(requestParameters: GetTraceFieldLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/view/{view}/traceField`.replace(`{${"view"}}`, encodeURIComponent(String(requestParameters.view))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for trace fields based on search criteria such as view, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTraceFieldLOV</p>
     * Return list of values for trace fields
     */
    async getTraceFieldLOV(requestParameters: GetTraceFieldLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTraceFieldLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction adjustment reason codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionAdjustmentReasonCodesLOV</p>
     * Return list of values for hotel transaction adjustment reason codes
     */
    async getTransactionAdjustmentReasonCodesLOVRaw(requestParameters: GetTransactionAdjustmentReasonCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionAdjustmentReasonCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction adjustment reason codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionAdjustmentReasonCodesLOV</p>
     * Return list of values for hotel transaction adjustment reason codes
     */
    async getTransactionAdjustmentReasonCodesLOV(requestParameters: GetTransactionAdjustmentReasonCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionAdjustmentReasonCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction codes consumption for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesConsumptionLOV</p>
     * Return list of values for hotel transaction codes consumption
     */
    async getTransactionCodesConsumptionLOVRaw(requestParameters: GetTransactionCodesConsumptionLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionCodesConsumption`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction codes consumption for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesConsumptionLOV</p>
     * Return list of values for hotel transaction codes consumption
     */
    async getTransactionCodesConsumptionLOV(requestParameters: GetTransactionCodesConsumptionLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionCodesConsumptionLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesLOV</p>
     * Return list of values for hotel transaction codes
     */
    async getTransactionCodesLOVRaw(requestParameters: GetTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesLOV</p>
     * Return list of values for hotel transaction codes
     */
    async getTransactionCodesLOV(requestParameters: GetTransactionCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction codes payment for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesPaymentLOV</p>
     * Return list of values for hotel transaction codes payment
     */
    async getTransactionCodesPaymentLOVRaw(requestParameters: GetTransactionCodesPaymentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionCodesPayment`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction codes payment for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionCodesPaymentLOV</p>
     * Return list of values for hotel transaction codes payment
     */
    async getTransactionCodesPaymentLOV(requestParameters: GetTransactionCodesPaymentLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionCodesPaymentLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction delete reason codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionDeleteReasonCodesLOV</p>
     * Return list of values for hotel transaction delete reason codes
     */
    async getTransactionDeleteReasonCodesLOVRaw(requestParameters: GetTransactionDeleteReasonCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionDeleteReasonCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction delete reason codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionDeleteReasonCodesLOV</p>
     * Return list of values for hotel transaction delete reason codes
     */
    async getTransactionDeleteReasonCodesLOV(requestParameters: GetTransactionDeleteReasonCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionDeleteReasonCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction diversion rule rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionDiversionRuleRoomsLOV</p>
     * Return list of values for hotel transaction diversion rule rooms
     */
    async getTransactionDiversionRuleRoomsLOVRaw(requestParameters: GetTransactionDiversionRuleRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionDiversionRuleRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction diversion rule rooms for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionDiversionRuleRoomsLOV</p>
     * Return list of values for hotel transaction diversion rule rooms
     */
    async getTransactionDiversionRuleRoomsLOV(requestParameters: GetTransactionDiversionRuleRoomsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionDiversionRuleRoomsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionGroupsLOV</p>
     * Return list of values for hotel transaction groups
     */
    async getTransactionGroupsLOVRaw(requestParameters: GetTransactionGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionGroupsLOV</p>
     * Return list of values for hotel transaction groups
     */
    async getTransactionGroupsLOV(requestParameters: GetTransactionGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction subgroups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionSubgroupsLOV</p>
     * Return list of values for hotel transaction subgroups
     */
    async getTransactionSubgroupsLOVRaw(requestParameters: GetTransactionSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transactionSubgroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction subgroups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransactionSubgroupsLOV</p>
     * Return list of values for hotel transaction subgroups
     */
    async getTransactionSubgroupsLOV(requestParameters: GetTransactionSubgroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransactionSubgroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transport types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransportTypesLOV</p>
     * Return list of values for hotel transport types
     */
    async getTransportTypesHotelLOVRaw(requestParameters: GetTransportTypesHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transportTypesHotel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transport types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransportTypesLOV</p>
     * Return list of values for hotel transport types
     */
    async getTransportTypesHotelLOV(requestParameters: GetTransportTypesHotelLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransportTypesHotelLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transport types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransportTypesLOV</p>
     * Return list of values for hotel transport types
     */
    async getTransportTypesLOVRaw(requestParameters: GetTransportTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/transportTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transport types for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTransportTypesLOV</p>
     * Return list of values for hotel transport types
     */
    async getTransportTypesLOV(requestParameters: GetTransportTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTransportTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for travel agent sources for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTravelAgentSourceLOV</p>
     * Return list of values for hotel travel agent source reservations
     */
    async getTravelAgentSourceLOVRaw(requestParameters: GetTravelAgentSourceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/travelAgentSource`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for travel agent sources for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTravelAgentSourceLOV</p>
     * Return list of values for hotel travel agent source reservations
     */
    async getTravelAgentSourceLOV(requestParameters: GetTravelAgentSourceLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTravelAgentSourceLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for travel agent source reservations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTravelAgentSourceResvLOV</p>
     * Return list of values for hotel travel agent source reservations
     */
    async getTravelAgentSourceResvLOVRaw(requestParameters: GetTravelAgentSourceResvLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/travelAgentSourceResv`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for travel agent source reservations for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTravelAgentSourceResvLOV</p>
     * Return list of values for hotel travel agent source reservations
     */
    async getTravelAgentSourceResvLOV(requestParameters: GetTravelAgentSourceResvLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTravelAgentSourceResvLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for transaction code arrangements based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTrxCodeArrangementLOV</p>
     * Return list of values for transaction code arrangements
     */
    async getTrxCodeArrangementLOVRaw(requestParameters: GetTrxCodeArrangementLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/type/{type}/trxCodeArrangement`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for transaction code arrangements based on search criteria such as type, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTrxCodeArrangementLOV</p>
     * Return list of values for transaction code arrangements
     */
    async getTrxCodeArrangementLOV(requestParameters: GetTrxCodeArrangementLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTrxCodeArrangementLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for turnaway codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTurnawayCodesLOV</p>
     * Return list of values for hotel turnaway codes
     */
    async getTurnawayCodesLOVRaw(requestParameters: GetTurnawayCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for turnaway codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getTurnawayCodesLOV</p>
     * Return list of values for hotel turnaway codes
     */
    async getTurnawayCodesLOV(requestParameters: GetTurnawayCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getTurnawayCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user defined field mappings based on search criteria such as moduleName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUDFMappingsLOV</p>
     * Return list of values for user defined field mappings
     */
    async getUDFMappingsLOVRaw(requestParameters: GetUDFMappingsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/moduleName/{moduleName}/udfMappings`.replace(`{${"moduleName"}}`, encodeURIComponent(String(requestParameters.moduleName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user defined field mappings based on search criteria such as moduleName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUDFMappingsLOV</p>
     * Return list of values for user defined field mappings
     */
    async getUDFMappingsLOV(requestParameters: GetUDFMappingsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUDFMappingsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user defined field attributes based on search criteria such as udfCategory, udfType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUdfAttributesLOV</p>
     * Return list of values for user defined field attributes
     */
    async getUdfAttributesLOVRaw(requestParameters: GetUdfAttributesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/udfType/{udfType}/udfCategory/{udfCategory}/udfAttributes`.replace(`{${"udfCategory"}}`, encodeURIComponent(String(requestParameters.udfCategory))).replace(`{${"udfType"}}`, encodeURIComponent(String(requestParameters.udfType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user defined field attributes based on search criteria such as udfCategory, udfType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUdfAttributesLOV</p>
     * Return list of values for user defined field attributes
     */
    async getUdfAttributesLOV(requestParameters: GetUdfAttributesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUdfAttributesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell default transaction code for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellDefaultTrxCodeLOV</p>
     * Return list of values for hotel upsell default transaction code
     */
    async getUpsellDefaultTrxCodeLOVRaw(requestParameters: GetUpsellDefaultTrxCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellDefaultTrxCode`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell default transaction code for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellDefaultTrxCodeLOV</p>
     * Return list of values for hotel upsell default transaction code
     */
    async getUpsellDefaultTrxCodeLOV(requestParameters: GetUpsellDefaultTrxCodeLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellDefaultTrxCodeLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell from room class edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellFromRoomClassEditLOV</p>
     * Return list of values for hotel upsell from room class edit
     */
    async getUpsellFromRoomClassEditLOVRaw(requestParameters: GetUpsellFromRoomClassEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellFromRoomClassEdit`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell from room class edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellFromRoomClassEditLOV</p>
     * Return list of values for hotel upsell from room class edit
     */
    async getUpsellFromRoomClassEditLOV(requestParameters: GetUpsellFromRoomClassEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellFromRoomClassEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell from room type edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellFromRoomTypeEditLOV</p>
     * Return list of values for hotel upsell from room type edit
     */
    async getUpsellFromRoomTypeEditLOVRaw(requestParameters: GetUpsellFromRoomTypeEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellFromRoomTypeEdit`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell from room type edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellFromRoomTypeEditLOV</p>
     * Return list of values for hotel upsell from room type edit
     */
    async getUpsellFromRoomTypeEditLOV(requestParameters: GetUpsellFromRoomTypeEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellFromRoomTypeEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell hierarchy levels for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellHierarchyLevelsLOV</p>
     * Return list of values for hotel upsell hierarchy levels
     */
    async getUpsellHierarchyLevelsLOVRaw(requestParameters: GetUpsellHierarchyLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellHierarchyLevels`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell hierarchy levels for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellHierarchyLevelsLOV</p>
     * Return list of values for hotel upsell hierarchy levels
     */
    async getUpsellHierarchyLevelsLOV(requestParameters: GetUpsellHierarchyLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellHierarchyLevelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell membership levels only based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellMembershipLevelsOnlyLOV</p>
     * Return list of values for upsell membership levels only
     */
    async getUpsellMembershipLevelsOnlyLOVRaw(requestParameters: GetUpsellMembershipLevelsOnlyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/membershipType/{membershipType}/upsellMembershipLevelsOnly`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell membership levels only based on search criteria such as membershipType, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellMembershipLevelsOnlyLOV</p>
     * Return list of values for upsell membership levels only
     */
    async getUpsellMembershipLevelsOnlyLOV(requestParameters: GetUpsellMembershipLevelsOnlyLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellMembershipLevelsOnlyLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell occupancy levels for a specific property based on search criteria such as includeBlank, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellOccupancyLevelsLOV</p>
     * Return list of values for hotel upsell occupancy levels
     */
    async getUpsellOccupancyLevelsLOVRaw(requestParameters: GetUpsellOccupancyLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/includeBlank/{includeBlank}/upsellOccupancyLevels`.replace(`{${"includeBlank"}}`, encodeURIComponent(String(requestParameters.includeBlank))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell occupancy levels for a specific property based on search criteria such as includeBlank, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellOccupancyLevelsLOV</p>
     * Return list of values for hotel upsell occupancy levels
     */
    async getUpsellOccupancyLevelsLOV(requestParameters: GetUpsellOccupancyLevelsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellOccupancyLevelsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell rate categories edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRateCategoriesEditLOV</p>
     * Return list of values for hotel upsell rate categories edit
     */
    async getUpsellRateCategoriesEditLOVRaw(requestParameters: GetUpsellRateCategoriesEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellRateCategoriesEdit`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell rate categories edit for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRateCategoriesEditLOV</p>
     * Return list of values for hotel upsell rate categories edit
     */
    async getUpsellRateCategoriesEditLOV(requestParameters: GetUpsellRateCategoriesEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellRateCategoriesEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRateCodesLOV</p>
     * Return list of values for hotel upsell rate codes
     */
    async getUpsellRateCodesLOVRaw(requestParameters: GetUpsellRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellRateCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell rate codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRateCodesLOV</p>
     * Return list of values for hotel upsell rate codes
     */
    async getUpsellRateCodesLOV(requestParameters: GetUpsellRateCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellRateCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell room class view for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRoomClassViewLOV</p>
     * Return list of values for hotel upsell room class view
     */
    async getUpsellRoomClassViewLOVRaw(requestParameters: GetUpsellRoomClassViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellRoomClassView`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell room class view for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRoomClassViewLOV</p>
     * Return list of values for hotel upsell room class view
     */
    async getUpsellRoomClassViewLOV(requestParameters: GetUpsellRoomClassViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellRoomClassViewLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell room type view for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRoomTypeViewLOV</p>
     * Return list of values for hotel upsell room type view
     */
    async getUpsellRoomTypeViewLOVRaw(requestParameters: GetUpsellRoomTypeViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellRoomTypeView`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell room type view for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRoomTypeViewLOV</p>
     * Return list of values for hotel upsell room type view
     */
    async getUpsellRoomTypeViewLOV(requestParameters: GetUpsellRoomTypeViewLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellRoomTypeViewLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell rules for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRuleLOV</p>
     * Return list of values for hotel upsell rules
     */
    async getUpsellRuleLOVRaw(requestParameters: GetUpsellRuleLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellRule`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell rules for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellRuleLOV</p>
     * Return list of values for hotel upsell rules
     */
    async getUpsellRuleLOV(requestParameters: GetUpsellRuleLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellRuleLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell to room class edit for a specific property based on search criteria such as fromRoomClass, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellToRoomClassEditLOV</p>
     * Return list of values for hotel upsell to room class edit
     */
    async getUpsellToRoomClassEditLOVRaw(requestParameters: GetUpsellToRoomClassEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fromRoomClass/{fromRoomClass}/upsellToRoomClassEdit`.replace(`{${"fromRoomClass"}}`, encodeURIComponent(String(requestParameters.fromRoomClass))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell to room class edit for a specific property based on search criteria such as fromRoomClass, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellToRoomClassEditLOV</p>
     * Return list of values for hotel upsell to room class edit
     */
    async getUpsellToRoomClassEditLOV(requestParameters: GetUpsellToRoomClassEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellToRoomClassEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell to room type edit for a specific property based on search criteria such as fromRoomTypeLabel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellToRoomTypeEditLOV</p>
     * Return list of values for hotel upsell to room type edit
     */
    async getUpsellToRoomTypeEditLOVRaw(requestParameters: GetUpsellToRoomTypeEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/fromRoomTypeLabel/{fromRoomTypeLabel}/upsellToRoomTypeEdit`.replace(`{${"fromRoomTypeLabel"}}`, encodeURIComponent(String(requestParameters.fromRoomTypeLabel))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell to room type edit for a specific property based on search criteria such as fromRoomTypeLabel, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellToRoomTypeEditLOV</p>
     * Return list of values for hotel upsell to room type edit
     */
    async getUpsellToRoomTypeEditLOV(requestParameters: GetUpsellToRoomTypeEditLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellToRoomTypeEditLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for upsell transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellTrxCodesLOV</p>
     * Return list of values for hotel upsell transaction codes
     */
    async getUpsellTrxCodesLOVRaw(requestParameters: GetUpsellTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/upsellTrxCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for upsell transaction codes for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUpsellTrxCodesLOV</p>
     * Return list of values for hotel upsell transaction codes
     */
    async getUpsellTrxCodesLOV(requestParameters: GetUpsellTrxCodesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUpsellTrxCodesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user database function arguments based on search criteria such as category, functionName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserDbFunctionArgsLOV</p>
     * Return list of values for user database function arguments
     */
    async getUserDbFunctionArgsLOVRaw(requestParameters: GetUserDbFunctionArgsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/functionName/{functionName}/category/{category}/userDbFunctionArgs`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))).replace(`{${"functionName"}}`, encodeURIComponent(String(requestParameters.functionName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user database function arguments based on search criteria such as category, functionName, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserDbFunctionArgsLOV</p>
     * Return list of values for user database function arguments
     */
    async getUserDbFunctionArgsLOV(requestParameters: GetUserDbFunctionArgsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUserDbFunctionArgsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user database functions based on search criteria such as category, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserDbFunctionsLOV</p>
     * Return list of values for user database functions
     */
    async getUserDbFunctionsLOVRaw(requestParameters: GetUserDbFunctionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/category/{category}/userDbFunctions`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user database functions based on search criteria such as category, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserDbFunctionsLOV</p>
     * Return list of values for user database functions
     */
    async getUserDbFunctionsLOV(requestParameters: GetUserDbFunctionsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUserDbFunctionsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user log activity groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserLogActivityGroupsLOV</p>
     * Return list of values for hotel user log activity groups
     */
    async getUserLogActivityGroupsLOVRaw(requestParameters: GetUserLogActivityGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/userLogActivityGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user log activity groups for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserLogActivityGroupsLOV</p>
     * Return list of values for hotel user log activity groups
     */
    async getUserLogActivityGroupsLOV(requestParameters: GetUserLogActivityGroupsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUserLogActivityGroupsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user log activity types for a specific property based on search criteria such as activityGroup, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserLogActivityTypesLOV</p>
     * Return list of values for hotel user log activity types
     */
    async getUserLogActivityTypesLOVRaw(requestParameters: GetUserLogActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/activityGroup/{activityGroup}/userLogActivityTypes`.replace(`{${"activityGroup"}}`, encodeURIComponent(String(requestParameters.activityGroup))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user log activity types for a specific property based on search criteria such as activityGroup, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserLogActivityTypesLOV</p>
     * Return list of values for hotel user log activity types
     */
    async getUserLogActivityTypesLOV(requestParameters: GetUserLogActivityTypesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUserLogActivityTypesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user roles for a specific property based on search criteria such as roleWithDepartment, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserRolesLOV</p>
     * Return list of values for hotel user roles
     */
    async getUserRolesLOVRaw(requestParameters: GetUserRolesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/roleWithDepartment/{roleWithDepartment}/userRoles`.replace(`{${"roleWithDepartment"}}`, encodeURIComponent(String(requestParameters.roleWithDepartment))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user roles for a specific property based on search criteria such as roleWithDepartment, hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getUserRolesLOV</p>
     * Return list of values for hotel user roles
     */
    async getUserRolesLOV(requestParameters: GetUserRolesLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getUserRolesLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for user hotel year setup for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getYearSetupLOV</p>
     * Return list of values for hotel year setup
     */
    async getYearSetupLOVRaw(requestParameters: GetYearSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/yearSetup`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for user hotel year setup for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getYearSetupLOV</p>
     * Return list of values for hotel year setup
     */
    async getYearSetupLOV(requestParameters: GetYearSetupLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getYearSetupLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the list of values for yield markets for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getYieldMarketsLOV</p>
     * Return list of values for hotel yield markets
     */
    async getYieldMarketsLOVRaw(requestParameters: GetYieldMarketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactiveFlag !== undefined) {
            queryParameters['includeInactiveFlag'] = requestParameters.includeInactiveFlag;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.excludeCodes) {
            queryParameters['excludeCodes'] = requestParameters.excludeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/hotels/{hotelId}/yieldMarkets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfValuesFromJSON(jsonValue));
    }

    /**
     * Use this API to return the list of values for yield markets for a specific property based on search criteria such as hotelId, includeInactiveFlag, parameterName, parameterValue. <p><strong>OperationId:</strong>getYieldMarketsLOV</p>
     * Return list of values for hotel yield markets
     */
    async getYieldMarketsLOV(requestParameters: GetYieldMarketsLOVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfValues> {
        const response = await this.getYieldMarketsLOVRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the the list of values service version. <p><strong>OperationId:</strong>pingLOVService</p>
     * Ping list of values service version
     */
    async pingLOVServiceRaw(requestParameters: PingLOVServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/listOfValues/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     * Use this API to return the the list of values service version. <p><strong>OperationId:</strong>pingLOVService</p>
     * Ping list of values service version
     */
    async pingLOVService(requestParameters: PingLOVServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingLOVServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to validate the  the list of values based on search criteria such as validateListOfValues. <p><strong>OperationId:</strong>validateListOfValues</p>
     * Validate list of values
     */
    async validateListOfValuesRaw(requestParameters: ValidateListOfValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateListOfValuesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listOfValues/validate`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateListOfValuesRequestToJSON(requestParameters.validateListOfValues),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateListOfValuesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to validate the  the list of values based on search criteria such as validateListOfValues. <p><strong>OperationId:</strong>validateListOfValues</p>
     * Validate list of values
     */
    async validateListOfValues(requestParameters: ValidateListOfValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateListOfValuesDetails> {
        const response = await this.validateListOfValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetListOfValuesNameEnum = {
    AdsErrorType: 'ADSErrorType',
    ArNoteTypes: 'ARNoteTypes',
    ArReminderCycleType: 'ARReminderCycleType',
    ArStatementModeType: 'ARStatementModeType',
    AccountPriorities: 'AccountPriorities',
    AccountRelationshipTypes: 'AccountRelationshipTypes',
    AccountTypes: 'AccountTypes',
    AccumulatedBusinessEvtModuleType: 'AccumulatedBusinessEvtModuleType',
    AccumulatedBusinessEvtStatusType: 'AccumulatedBusinessEvtStatusType',
    ActivityClasses: 'ActivityClasses',
    ActivityResults: 'ActivityResults',
    AddOnLicenses: 'AddOnLicenses',
    AddressDoctorModes: 'AddressDoctorModes',
    AddressFormats: 'AddressFormats',
    AddressTypes: 'AddressTypes',
    AdjustmentCodeCalculationType: 'AdjustmentCodeCalculationType',
    AdjustmentCodes: 'AdjustmentCodes',
    AirportTemplates: 'AirportTemplates',
    AirportsMultiHotels: 'AirportsMultiHotels',
    AlertAreas: 'AlertAreas',
    AlertCodesMultiHotel: 'AlertCodesMultiHotel',
    AllCashiers: 'AllCashiers',
    AllNoteTypes: 'AllNoteTypes',
    AllProfileTypes: 'AllProfileTypes',
    AllotmentOrigins: 'AllotmentOrigins',
    AlternateHotelDirections: 'AlternateHotelDirections',
    AlternateLanguageTitles: 'AlternateLanguageTitles',
    AmenitiesMultiHotel: 'AmenitiesMultiHotel',
    AmenityTypes: 'AmenityTypes',
    AmountType: 'AmountType',
    AppUsers: 'AppUsers',
    ArticleCodesMultiHotel: 'ArticleCodesMultiHotel',
    AssociatedCreditFoioType: 'AssociatedCreditFoioType',
    AttractionClasses: 'AttractionClasses',
    AttractionsConfigMultiHotels: 'AttractionsConfigMultiHotels',
    AttractionsMultiHotel: 'AttractionsMultiHotel',
    AuthorizerGroupsMultiHotel: 'AuthorizerGroupsMultiHotel',
    AutoFolioSettlementPreferences: 'AutoFolioSettlementPreferences',
    AutoFolioSettlementTypes: 'AutoFolioSettlementTypes',
    AutoSettleRulesPaymentType: 'AutoSettleRulesPaymentType',
    AutomaticTranSchedulesFrequencyType: 'AutomaticTranSchedulesFrequencyType',
    AutomaticTranSchedulesModuleType: 'AutomaticTranSchedulesModuleType',
    AvailabilityType: 'AvailabilityType',
    AvailableColumnsForExport: 'AvailableColumnsForExport',
    AvailableExportSources: 'AvailableExportSources',
    AwardRateCodesMultiSel: 'AwardRateCodesMultiSel',
    AwardTypes: 'AwardTypes',
    BankMaster: 'BankMaster',
    BanquetForeignCurrency: 'BanquetForeignCurrency',
    BanquetRevenueSummary: 'BanquetRevenueSummary',
    BaseRounding: 'BaseRounding',
    BedTypeRequests: 'BedTypeRequests',
    BedTypes: 'BedTypes',
    Beverages: 'Beverages',
    BillingAccountContractChannel: 'BillingAccountContractChannel',
    BillingAccountContractChannelType: 'BillingAccountContractChannelType',
    BillingAccountContractFeeType: 'BillingAccountContractFeeType',
    BillingAccountContractFrequency: 'BillingAccountContractFrequency',
    BillingAccountContractPriceType: 'BillingAccountContractPriceType',
    BillingAccountContractTransactionType: 'BillingAccountContractTransactionType',
    BillingAccountTypes: 'BillingAccountTypes',
    BirGuestTypes: 'BirGuestTypes',
    BirthCountry: 'BirthCountry',
    BlockAllotmentCodes: 'BlockAllotmentCodes',
    BlockCancellationCodes: 'BlockCancellationCodes',
    BlockCatNewStatuses: 'BlockCatNewStatuses',
    BlockCodeStatusType: 'BlockCodeStatusType',
    BlockConversions: 'BlockConversions',
    BlockCurrentStatus: 'BlockCurrentStatus',
    BlockDestinations: 'BlockDestinations',
    BlockLostBookingCodes: 'BlockLostBookingCodes',
    BlockNewStatuses: 'BlockNewStatuses',
    BlockOrigins: 'BlockOrigins',
    BlockOwners: 'BlockOwners',
    BlockRankings: 'BlockRankings',
    BlockRefusedBookingCodes: 'BlockRefusedBookingCodes',
    BlockRefusedReasons: 'BlockRefusedReasons',
    BlockReservationMethods: 'BlockReservationMethods',
    BlockStatusColor: 'BlockStatusColor',
    BlockStatuses: 'BlockStatuses',
    BlockTraceCodes: 'BlockTraceCodes',
    BookingChannelErrorCodes: 'BookingChannelErrorCodes',
    BookingChannels: 'BookingChannels',
    BookingNoteTypes: 'BookingNoteTypes',
    BookingResponses: 'BookingResponses',
    BookingStatusCodes: 'BookingStatusCodes',
    BookingTypes: 'BookingTypes',
    BrandCode: 'BrandCode',
    BudgetYear: 'BudgetYear',
    BuildingGroups: 'BuildingGroups',
    Buildings: 'Buildings',
    BusinessEventDataElement: 'BusinessEventDataElement',
    BusinessEventModule: 'BusinessEventModule',
    BusinessProfileTypes: 'BusinessProfileTypes',
    BusinessSegments: 'BusinessSegments',
    CalculationRules: 'CalculationRules',
    CancelStatus: 'CancelStatus',
    CancellationPolicyTypes: 'CancellationPolicyTypes',
    CancellationReasons: 'CancellationReasons',
    CardNumberBasedOn: 'CardNumberBasedOn',
    CardTypes: 'CardTypes',
    CardTypesIfc: 'CardTypesIfc',
    CashierShiftDropLocations: 'CashierShiftDropLocations',
    CashieringTransactionTypes: 'CashieringTransactionTypes',
    Cashiers: 'Cashiers',
    CashiersConfig: 'CashiersConfig',
    CateringEventTypes: 'CateringEventTypes',
    CateringRevenueCodes: 'CateringRevenueCodes',
    CateringRevenueGroups: 'CateringRevenueGroups',
    CateringStatuses: 'CateringStatuses',
    CentralSalesHotels: 'CentralSalesHotels',
    CertificateActivities: 'CertificateActivities',
    CertificateStatus: 'CertificateStatus',
    ChainInventoryItems: 'ChainInventoryItems',
    ChainMaintenanceCodes: 'ChainMaintenanceCodes',
    ChainPackageCodes: 'ChainPackageCodes',
    ChainRoomConditions: 'ChainRoomConditions',
    ChainRoomStatusReasons: 'ChainRoomStatusReasons',
    ChainRoomTypes: 'ChainRoomTypes',
    ChainTrackItTypes: 'ChainTrackItTypes',
    Chains: 'Chains',
    ChannelBillingAccounts: 'ChannelBillingAccounts',
    ChannelCardTypeMappingResort: 'ChannelCardTypeMappingResort',
    ChannelRateCode: 'ChannelRateCode',
    ChannelResortMappingGdsHost: 'ChannelResortMappingGdsHost',
    ChannelResortMappingResort: 'ChannelResortMappingResort',
    Channels: 'Channels',
    CityTaxRanges: 'CityTaxRanges',
    ClaimAdjustmentLimitCodes: 'ClaimAdjustmentLimitCodes',
    CollectingAgentTaxCodeSeq: 'CollectingAgentTaxCodeSeq',
    Colors: 'Colors',
    CommissionCalculatedOnType: 'CommissionCalculatedOnType',
    CommissionPaidType: 'CommissionPaidType',
    CommissionPaymentActivityStatus: 'CommissionPaymentActivityStatus',
    CommissionPaymentMethods: 'CommissionPaymentMethods',
    CommissionTaxType: 'CommissionTaxType',
    CommunicationMethods: 'CommunicationMethods',
    CommunicationMethodsEntDetail: 'CommunicationMethodsEntDetail',
    CommunicationMethodsSystemType: 'CommunicationMethodsSystemType',
    CommunicationRoles: 'CommunicationRoles',
    CommunicationTypeEmail: 'CommunicationTypeEmail',
    CommunicationTypePhone: 'CommunicationTypePhone',
    CommunicationTypeWeb: 'CommunicationTypeWeb',
    CommunicationsLocale: 'CommunicationsLocale',
    CompInHouse: 'CompInHouse',
    CompanyTypes: 'CompanyTypes',
    CompetitionCodes: 'CompetitionCodes',
    CompositeResvStatuses: 'CompositeResvStatuses',
    ConfigModes: 'ConfigModes',
    ConfigTitles: 'ConfigTitles',
    ContactMethod: 'ContactMethod',
    Container: 'Container',
    ContractBillingInstructions: 'ContractBillingInstructions',
    ConversionCodes: 'ConversionCodes',
    CorporateBusinessUnits: 'CorporateBusinessUnits',
    CorporateDepartmentCodes: 'CorporateDepartmentCodes',
    CorporateDivisions: 'CorporateDivisions',
    CorporateOperatingUnits: 'CorporateOperatingUnits',
    Countries: 'Countries',
    CountryMainGroup: 'CountryMainGroup',
    CountryModes: 'CountryModes',
    CreditCardProcessingType: 'CreditCardProcessingType',
    CreditRatings: 'CreditRatings',
    CroChains: 'CroChains',
    CroViews: 'CroViews',
    Currencies: 'Currencies',
    CurrencyExchangeRateType: 'CurrencyExchangeRateType',
    CurrencyFormat: 'CurrencyFormat',
    CustomBudgetCodes: 'CustomBudgetCodes',
    Databases: 'Databases',
    DatamartSynchType: 'DatamartSynchType',
    DayTypeCodesMultiHotels: 'DayTypeCodesMultiHotels',
    DayTypeColors: 'DayTypeColors',
    DaysOfWeek: 'DaysOfWeek',
    DbInstance: 'DbInstance',
    DefaultFolioStyle: 'DefaultFolioStyle',
    DefaultReservationType: 'DefaultReservationType',
    DefiniteStatus: 'DefiniteStatus',
    DeleteCharacterIndicator: 'DeleteCharacterIndicator',
    DeleteDateIndicator: 'DeleteDateIndicator',
    DeleteNumberIndicator: 'DeleteNumberIndicator',
    DeliveryStatus: 'DeliveryStatus',
    DeltaMode: 'DeltaMode',
    DepartmentHotel: 'DepartmentHotel',
    DepartmentMenuItem: 'DepartmentMenuItem',
    Departments: 'Departments',
    DepositMaturityPreferenceType: 'DepositMaturityPreferenceType',
    DepositPolicyTypes: 'DepositPolicyTypes',
    DepositType: 'DepositType',
    DirectionCodes: 'DirectionCodes',
    DiscountReasons: 'DiscountReasons',
    DistanceTypes: 'DistanceTypes',
    Districts: 'Districts',
    DiversionEntityTypes: 'DiversionEntityTypes',
    DiversionScopeTypes: 'DiversionScopeTypes',
    Domains: 'Domains',
    DummyHotels: 'DummyHotels',
    ECertificateIssue: 'ECertificateIssue',
    ECertificateStatus: 'ECertificateStatus',
    ECertificateTypes: 'ECertificateTypes',
    EcertMembershipTypes: 'EcertMembershipTypes',
    EmailDeliveryFormats: 'EmailDeliveryFormats',
    EmailFormats: 'EmailFormats',
    EmployeeEmails: 'EmployeeEmails',
    EndOfDayReportDestinations: 'EndOfDayReportDestinations',
    EnrollmentCodes: 'EnrollmentCodes',
    EnrollmentMatchCommunicationName: 'EnrollmentMatchCommunicationName',
    EntityDetails: 'EntityDetails',
    EntityHeaderDataTypes: 'EntityHeaderDataTypes',
    EntityHeaders: 'EntityHeaders',
    EntryPoint: 'EntryPoint',
    EventActions: 'EventActions',
    EventChangeSources: 'EventChangeSources',
    EventDisplays: 'EventDisplays',
    EventSpaceTypes: 'EventSpaceTypes',
    EventTypes: 'EventTypes',
    ExchangeServiceTaxCode: 'ExchangeServiceTaxCode',
    ExportBucketCodes: 'ExportBucketCodes',
    ExportColumnXmlTypes: 'ExportColumnXMLTypes',
    ExportCommonFields: 'ExportCommonFields',
    ExportEndPoints: 'ExportEndPoints',
    ExportMappingTypes: 'ExportMappingTypes',
    ExternalDatabases: 'ExternalDatabases',
    ExternalSystemSubTypes: 'ExternalSystemSubTypes',
    ExternalSystems: 'ExternalSystems',
    FitContractStatus: 'FITContractStatus',
    FitContractTypes: 'FITContractTypes',
    FeatureTypes: 'FeatureTypes',
    FetchCount30rPlusValues: 'FetchCount30rPlusValues',
    FileTypes: 'FileTypes',
    FiscalBeActionType: 'FiscalBEActionType',
    FiscalBeModule: 'FiscalBEModule',
    FiscalBeStatus: 'FiscalBEStatus',
    FiscalSupportingDocTypes: 'FiscalSupportingDocTypes',
    FiscalFolioParameters: 'FiscalFolioParameters',
    FiscalFolioProfileHandling: 'FiscalFolioProfileHandling',
    FiscalGuestTypes: 'FiscalGuestTypes',
    FiscalOperations: 'FiscalOperations',
    FiscalPartners: 'FiscalPartners',
    FiscalRegionCodes: 'FiscalRegionCodes',
    FiscalServiceType: 'FiscalServiceType',
    FixedChargeFrequencyTypes: 'FixedChargeFrequencyTypes',
    FlaggedReasons: 'FlaggedReasons',
    FloorRequests: 'FloorRequests',
    FolioLegends: 'FolioLegends',
    FolioMessageMergeCodes: 'FolioMessageMergeCodes',
    FolioTypeReports: 'FolioTypeReports',
    FolioWindows: 'FolioWindows',
    ForeignCurrency: 'ForeignCurrency',
    ForeignCurrencyPosting: 'ForeignCurrencyPosting',
    Formula: 'Formula',
    FullPurgeNoOfDays: 'FullPurgeNoOfDays',
    FunctionSpaceCodes: 'FunctionSpaceCodes',
    FunctionSpaceLocations: 'FunctionSpaceLocations',
    FunctionSpaceSetupStyles: 'FunctionSpaceSetupStyles',
    GrsCodes: 'GRSCodes',
    GdsAmenities: 'GdsAmenities',
    GdsCardTypes: 'GdsCardTypes',
    GdsConvAvailRateCodes: 'GdsConvAvailRateCodes',
    GdsHostAndResortCombinedGuaranteeCodes: 'GdsHostAndResortCombinedGuaranteeCodes',
    GdsMarketingPolicyDetails: 'GdsMarketingPolicyDetails',
    GdsMarketingPolicyTypes: 'GdsMarketingPolicyTypes',
    GdsMarketingTransactionTypes: 'GdsMarketingTransactionTypes',
    GdsRateTypes: 'GdsRateTypes',
    GemItemClass: 'GemItemClass',
    GenderTypes: 'GenderTypes',
    GenerateRoundingMethod: 'GenerateRoundingMethod',
    GenericRevenueTypes: 'GenericRevenueTypes',
    GlobalActionCodes: 'GlobalActionCodes',
    GuaranteeCodes: 'GuaranteeCodes',
    GuaranteeCodesMultiHotels: 'GuaranteeCodesMultiHotels',
    GuestSecretQuestions: 'GuestSecretQuestions',
    GuestTypes: 'GuestTypes',
    HkStatus: 'HKStatus',
    HkCreditRuleTravelTypes: 'HkCreditRuleTravelTypes',
    HoldReasons: 'HoldReasons',
    HotelCategories: 'HotelCategories',
    HotelContactRoleType: 'HotelContactRoleType',
    HotelInterfaceIds: 'HotelInterfaceIds',
    HotelInterfaceMachine: 'HotelInterfaceMachine',
    HotelInterfaceMenuType: 'HotelInterfaceMenuType',
    HotelInterfaceTypes: 'HotelInterfaceTypes',
    HotelTypes: 'HotelTypes',
    Hotels: 'Hotels',
    HouseKeepingGroups: 'HouseKeepingGroups',
    HousekeepingCreditRuleTypes: 'HousekeepingCreditRuleTypes',
    Hubs: 'Hubs',
    IdentificationCountry: 'IdentificationCountry',
    IdentificationRoleType: 'IdentificationRoleType',
    IdentificationTypes: 'IdentificationTypes',
    ImageTypes: 'ImageTypes',
    ImportPostalCodesCountry: 'ImportPostalCodesCountry',
    InactiveHotels: 'InactiveHotels',
    Industries: 'Industries',
    InfluenceCodes: 'InfluenceCodes',
    IntegrationMessageErrorType: 'IntegrationMessageErrorType',
    Interests: 'Interests',
    InterfaceCalcTrxCodes: 'InterfaceCalcTrxCodes',
    InterfaceCashCreditPosting: 'InterfaceCashCreditPosting',
    InterfaceChargeScaling: 'InterfaceChargeScaling',
    InterfaceDataRequestConfigLevel: 'InterfaceDataRequestConfigLevel',
    InterfaceDataRequestConfigType: 'InterfaceDataRequestConfigType',
    InterfaceDataRequestExchangeRate: 'InterfaceDataRequestExchangeRate',
    InterfaceDialedDigits: 'InterfaceDialedDigits',
    InterfaceDifferencePosting: 'InterfaceDifferencePosting',
    InterfaceOriginCodes: 'InterfaceOriginCodes',
    InterfacePostType: 'InterfacePostType',
    InterfacePostingCodeSetup: 'InterfacePostingCodeSetup',
    InterfacePostings: 'InterfacePostings',
    InterfacePostingsAddInfo: 'InterfacePostingsAddInfo',
    InterfacePrograms: 'InterfacePrograms',
    InterfaceReferenceField: 'InterfaceReferenceField',
    InterfaceResyncDatamartType: 'InterfaceResyncDatamartType',
    InterfaceResyncOwnerContractStatus: 'InterfaceResyncOwnerContractStatus',
    InterfaceSplitCode: 'InterfaceSplitCode',
    InterfaceSubtotalPosting: 'InterfaceSubtotalPosting',
    InterfaceSystemType: 'InterfaceSystemType',
    InterfaceType: 'InterfaceType',
    InterfaceWorkstationTerminals: 'InterfaceWorkstationTerminals',
    InterfaceWorkstationType: 'InterfaceWorkstationType',
    InterfaceZeroPostings: 'InterfaceZeroPostings',
    ItemPoolsClassCode: 'ItemPoolsClassCode',
    ItemPoolsCode: 'ItemPoolsCode',
    ItemRates: 'ItemRates',
    JobTitlesMultiHotels: 'JobTitlesMultiHotels',
    KeepingCharacterIndicator: 'KeepingCharacterIndicator',
    KeepingDateIndicator: 'KeepingDateIndicator',
    KeepingNumberIndicator: 'KeepingNumberIndicator',
    KeyPacketsReport: 'KeyPacketsReport',
    KeywordTypes: 'KeywordTypes',
    LanguageCodes: 'LanguageCodes',
    Languages: 'Languages',
    LatitudeDirections: 'LatitudeDirections',
    LetterNames: 'LetterNames',
    LetterTypes: 'LetterTypes',
    LocationTypes: 'LocationTypes',
    LogicalOperator: 'LogicalOperator',
    LogoType: 'LogoType',
    LongDateFormats: 'LongDateFormats',
    LongitudeDirections: 'LongitudeDirections',
    LookupExternalDatabases: 'LookupExternalDatabases',
    MdsCustomValidators: 'MDSCustomValidators',
    MailingActions: 'MailingActions',
    MaintenanceCodes: 'MaintenanceCodes',
    MaintenanceCodesMultiHotel: 'MaintenanceCodesMultiHotel',
    ManagerReportUdfFields: 'ManagerReportUDFFields',
    MarketCodePrintGroupType: 'MarketCodePrintGroupType',
    MarketCodes: 'MarketCodes',
    MarketCodesMultiHotels: 'MarketCodesMultiHotels',
    MarketGroupsMultiHotels: 'MarketGroupsMultiHotels',
    MarketSegments: 'MarketSegments',
    MarketSelection: 'MarketSelection',
    MarketingCities: 'MarketingCities',
    MarketingCitiesMultiHotels: 'MarketingCitiesMultiHotels',
    MarketingCityTemplates: 'MarketingCityTemplates',
    MarketingRegions: 'MarketingRegions',
    MarriottModeArrivalAlerts: 'MarriottModeArrivalAlerts',
    MealTypes: 'MealTypes',
    MemberLetterList: 'MemberLetterList',
    MembershipActions: 'MembershipActions',
    MembershipAwardDisplaySet: 'MembershipAwardDisplaySet',
    MembershipAwardPointsValidityDuration: 'MembershipAwardPointsValidityDuration',
    MembershipAwards: 'MembershipAwards',
    MembershipBasedOn: 'MembershipBasedOn',
    MembershipBillingGroups: 'MembershipBillingGroups',
    MembershipCalculationPeriod: 'MembershipCalculationPeriod',
    MembershipCalendarGracePeriod: 'MembershipCalendarGracePeriod',
    MembershipCardValidationRules: 'MembershipCardValidationRules',
    MembershipClaimActivity: 'MembershipClaimActivity',
    MembershipClaimApprovalStatus: 'MembershipClaimApprovalStatus',
    MembershipClaimApprovalStatusSearch: 'MembershipClaimApprovalStatusSearch',
    MembershipClaimOrigins: 'MembershipClaimOrigins',
    MembershipClaimRecordTypes: 'MembershipClaimRecordTypes',
    MembershipClaimStatus: 'MembershipClaimStatus',
    MembershipClaimTypes: 'MembershipClaimTypes',
    MembershipClasses: 'MembershipClasses',
    MembershipDowngrade: 'MembershipDowngrade',
    MembershipEnrollmentCodes: 'MembershipEnrollmentCodes',
    MembershipEnrollmentGroups: 'MembershipEnrollmentGroups',
    MembershipExtractTypes: 'MembershipExtractTypes',
    MembershipLevelRuleType: 'MembershipLevelRuleType',
    MembershipLevels: 'MembershipLevels',
    MembershipMarketGroups: 'MembershipMarketGroups',
    MembershipMultipleRooms: 'MembershipMultipleRooms',
    MembershipNumberOfYears: 'MembershipNumberOfYears',
    MembershipPointsCalcAwards: 'MembershipPointsCalcAwards',
    MembershipPointsCalculationCurrency: 'MembershipPointsCalculationCurrency',
    MembershipPointsSchedule: 'MembershipPointsSchedule',
    MembershipRateCodes: 'MembershipRateCodes',
    MembershipRateGroupRateCodes: 'MembershipRateGroupRateCodes',
    MembershipRateGroups: 'MembershipRateGroups',
    MembershipResortGroupCodes: 'MembershipResortGroupCodes',
    MembershipResortGroups: 'MembershipResortGroups',
    MembershipRevenueGroups: 'MembershipRevenueGroups',
    MembershipRevenueTypes: 'MembershipRevenueTypes',
    MembershipRoomGrps: 'MembershipRoomGrps',
    MembershipStatementUdfSet: 'MembershipStatementUDFSet',
    MembershipStatuses: 'MembershipStatuses',
    MembershipTierAdministration: 'MembershipTierAdministration',
    MembershipTransactionCodes: 'MembershipTransactionCodes',
    MembershipTransactionGroupCode: 'MembershipTransactionGroupCode',
    MembershipTscHeader: 'MembershipTscHeader',
    MembershipTypeRuleAppliesOn: 'MembershipTypeRuleAppliesOn',
    MembershipTypeRuleBasedOn: 'MembershipTypeRuleBasedOn',
    MembershipTypeRulePointsRoundingFlags: 'MembershipTypeRulePointsRoundingFlags',
    MembershipTypeRulePointsType: 'MembershipTypeRulePointsType',
    MembershipTypeRuleTransactionCode: 'MembershipTypeRuleTransactionCode',
    MembershipTypeRuleTypes: 'MembershipTypeRuleTypes',
    MembershipTypes: 'MembershipTypes',
    MembershipTypesAndLevels: 'MembershipTypesAndLevels',
    MembershipUpgradeDowngradeCalendarPeriod: 'MembershipUpgradeDowngradeCalendarPeriod',
    MembrshipMarketGroupCodes: 'MembrshipMarketGroupCodes',
    MergeCodes: 'MergeCodes',
    Messages: 'Messages',
    Modules: 'Modules',
    MonthNames: 'MonthNames',
    MonthNumber: 'MonthNumber',
    MoveReasons: 'MoveReasons',
    MrwTitle: 'MrwTitle',
    NameType: 'NameType',
    Nationalities: 'Nationalities',
    Newspapers: 'Newspapers',
    NextBlockStatus: 'NextBlockStatus',
    NoShowPostingRuleValues: 'NoShowPostingRuleValues',
    NoShowPostingRules: 'NoShowPostingRules',
    NoShowReservationTypes: 'NoShowReservationTypes',
    NoShowSourceCodes: 'NoShowSourceCodes',
    NoteActionTypes: 'NoteActionTypes',
    NoteGroups: 'NoteGroups',
    NotificationAreas: 'NotificationAreas',
    NumberDescriptions: 'NumberDescriptions',
    NumberOfChains: 'NumberOfChains',
    OcaTemplates: 'OCATemplates',
    OosReasonConfigMultiHotels: 'OOSReasonConfigMultiHotels',
    OosReasonsConfig: 'OOSReasonsConfig',
    OxiActiveInterfaces: 'OXIActiveInterfaces',
    OxiInterfaceSetup: 'OXIInterfaceSetup',
    OxiInterfacesSetup: 'OXIInterfacesSetup',
    OxiMessageFormats: 'OXIMessageFormats',
    OxiMessageTypes: 'OXIMessageTypes',
    OxiMesssgeStatuses: 'OXIMesssgeStatuses',
    OxiProcessorLogsErrorType: 'OXIProcessorLogsErrorType',
    OxiProcessorLogsReviewType: 'OXIProcessorLogsReviewType',
    TransactionDiscountsMultiHotels: 'TransactionDiscountsMultiHotels',
    OperatorType: 'OperatorType',
    Origins: 'Origins',
    OutboundAuthenticationTypes: 'OutboundAuthenticationTypes',
    OutboundCodes: 'OutboundCodes',
    OutboundTypes: 'OutboundTypes',
    OwnerCodes: 'OwnerCodes',
    OwnerRelationTypes: 'OwnerRelationTypes',
    OwnerTeams: 'OwnerTeams',
    PackCodes: 'PackCodes',
    PackageCodes: 'PackageCodes',
    PackageCodesMultiHotel: 'PackageCodesMultiHotel',
    PackageForecastGroupMultiHotel: 'PackageForecastGroupMultiHotel',
    PackageForecastGroupTemplates: 'PackageForecastGroupTemplates',
    PaperSize: 'PaperSize',
    PartnerFiscalStatus: 'PartnerFiscalStatus',
    PastYears: 'PastYears',
    PayDays: 'PayDays',
    PaymentAuthorizationRules: 'PaymentAuthorizationRules',
    PaymentMethodValidationRules: 'PaymentMethodValidationRules',
    PaymentMethodsMultiHotel: 'PaymentMethodsMultiHotel',
    PaymentTaxTypes: 'PaymentTaxTypes',
    PaymentTransactionCodeType: 'PaymentTransactionCodeType',
    PercentageBaseCode: 'PercentageBaseCode',
    PhoneTypes: 'PhoneTypes',
    PillowTypes: 'PillowTypes',
    PostedTransactionTypes: 'PostedTransactionTypes',
    PostingRhythms: 'PostingRhythms',
    PotentialForecastTypes: 'PotentialForecastTypes',
    PotentialFrequency: 'PotentialFrequency',
    PreRegistrationRuleTypes: 'PreRegistrationRuleTypes',
    PreferenceTypes: 'PreferenceTypes',
    Preferences: 'Preferences',
    PreferencesView: 'PreferencesView',
    PrintTask: 'PrintTask',
    PriorStatuses: 'PriorStatuses',
    ProductFeatures: 'ProductFeatures',
    ProfileAccountTypes: 'ProfileAccountTypes',
    ProfileDistributionCountry: 'ProfileDistributionCountry',
    ProfileDistributionDatabase: 'ProfileDistributionDatabase',
    ProfileDistributionFilter: 'ProfileDistributionFilter',
    ProfileDistributionKeywordType: 'ProfileDistributionKeywordType',
    ProfileDistributionRegion: 'ProfileDistributionRegion',
    ProfileDistributionRoomLabel: 'ProfileDistributionRoomLabel',
    ProfileEnrollmentMatchRules: 'ProfileEnrollmentMatchRules',
    ProfileIdCountries: 'ProfileIdCountries',
    ProfileIdTypes: 'ProfileIdTypes',
    ProfileInactiveReasons: 'ProfileInactiveReasons',
    ProfileKeywordTypes: 'ProfileKeywordTypes',
    ProfileLinkNameTypes: 'ProfileLinkNameTypes',
    ProfileMemberships: 'ProfileMemberships',
    ProfileRegions: 'ProfileRegions',
    ProfileRelationships: 'ProfileRelationships',
    ProfileResortRegions: 'ProfileResortRegions',
    ProfileRestrictionReasons: 'ProfileRestrictionReasons',
    ProfileViewBy: 'ProfileViewBy',
    PromoGroupTemplates: 'PromoGroupTemplates',
    PromotionCodeRegistration: 'PromotionCodeRegistration',
    Promotions: 'Promotions',
    PropertyDayTypes: 'PropertyDayTypes',
    PropertyDetailCategroy: 'PropertyDetailCategroy',
    PropertyEventCodes: 'PropertyEventCodes',
    PurgeableOedsTables: 'PurgeableOEDSTables',
    PurposeOfStay: 'PurposeOfStay',
    RankingCodes: 'RankingCodes',
    RateCategoryMultiHotels: 'RateCategoryMultiHotels',
    RateCategoryTemplates: 'RateCategoryTemplates',
    RateClassTemplates: 'RateClassTemplates',
    RateClassesMultiHotels: 'RateClassesMultiHotels',
    RateCodePostingRhythm: 'RateCodePostingRhythm',
    RateCodes: 'RateCodes',
    RateCodesGlobalDesc: 'RateCodesGlobalDesc',
    RateConfigExchangeTypes: 'RateConfigExchangeTypes',
    RateDisplaySets: 'RateDisplaySets',
    RateDisplaySetsConfiguration: 'RateDisplaySetsConfiguration',
    RateOverrideReasons: 'RateOverrideReasons',
    RateOwnership: 'RateOwnership',
    RatePkgTrxCodes: 'RatePkgTrxCodes',
    RatePlanSets: 'RatePlanSets',
    RatePlansMultiHotel: 'RatePlansMultiHotel',
    RateRoomCategory: 'RateRoomCategory',
    RateSeasonCodeTemplates: 'RateSeasonCodeTemplates',
    RateSeasonCodes: 'RateSeasonCodes',
    RateSeasonCodesMultiHotel: 'RateSeasonCodesMultiHotel',
    RateStrategyConditionTypes: 'RateStrategyConditionTypes',
    RateTiers: 'RateTiers',
    ReasonType: 'ReasonType',
    ReceiptHistoryTypes: 'ReceiptHistoryTypes',
    ReferenceCurrency: 'ReferenceCurrency',
    RefreshProperty: 'RefreshProperty',
    RegCards: 'RegCards',
    Regions: 'Regions',
    RelationshipTypes: 'RelationshipTypes',
    RepAppUsers: 'RepAppUsers',
    RepDayOfWeek: 'RepDayOfWeek',
    RepEmployeeUsers: 'RepEmployeeUsers',
    RepHorizontalValues: 'RepHorizontalValues',
    RepNoteTypes: 'RepNoteTypes',
    RepProfileTypes: 'RepProfileTypes',
    RepRateCategories: 'RepRateCategories',
    RepResvTypeCodeList: 'RepResvTypeCodeList',
    RepServiceRequestStatuses: 'RepServiceRequestStatuses',
    RepStates: 'RepStates',
    ReportDateLanguage: 'ReportDateLanguage',
    ReportDestinations: 'ReportDestinations',
    ReportDetails: 'ReportDetails',
    ReportFileNames: 'ReportFileNames',
    ReportFormats: 'ReportFormats',
    ReportGroups: 'ReportGroups',
    ReportParameterDataTypes: 'ReportParameterDataTypes',
    ReportParameterForms: 'ReportParameterForms',
    ReportPrinters: 'ReportPrinters',
    ReportServersList: 'ReportServersList',
    ReportTextConfiguration: 'ReportTextConfiguration',
    Reports: 'Reports',
    ReportsToAttach: 'ReportsToAttach',
    RequirementCodes: 'RequirementCodes',
    ResStatusWithGuaranteeCodes: 'ResStatusWithGuaranteeCodes',
    ReservationAgents: 'ReservationAgents',
    ReservationChannels: 'ReservationChannels',
    ReservationContactType: 'ReservationContactType',
    ReservationGuestStatus: 'ReservationGuestStatus',
    ReservationImmigrationStatus: 'ReservationImmigrationStatus',
    ReservationNoteTypes: 'ReservationNoteTypes',
    ReservationStatuses: 'ReservationStatuses',
    ReservationTypes: 'ReservationTypes',
    ReservationUdfs: 'ReservationUDFs',
    ResortCardTypes: 'ResortCardTypes',
    ResortChains: 'ResortChains',
    ResortFeatures: 'ResortFeatures',
    ResortNoteTypes: 'ResortNoteTypes',
    ResortReservationTypes: 'ResortReservationTypes',
    RestApiGroups: 'RestApiGroups',
    RestApiModules: 'RestApiModules',
    RestApiOperations: 'RestApiOperations',
    ResvAutoAttachRulesBasedOn: 'ResvAutoAttachRulesBasedOn',
    ResyncBlockCodes: 'ResyncBlockCodes',
    RevenueBucketTypes: 'RevenueBucketTypes',
    RevenueGroups: 'RevenueGroups',
    RevenueTypes: 'RevenueTypes',
    RoomAmenities: 'RoomAmenities',
    RoomAssignmentRating: 'RoomAssignmentRating',
    RoomClassMultiHotels: 'RoomClassMultiHotels',
    RoomClassesTemplate: 'RoomClassesTemplate',
    RoomConditions: 'RoomConditions',
    RoomConditionsMultiHotels: 'RoomConditionsMultiHotels',
    RoomFeatureRating: 'RoomFeatureRating',
    RoomFeatures: 'RoomFeatures',
    RoomFeaturesAll: 'RoomFeaturesAll',
    RoomMaintenanceTemplates: 'RoomMaintenanceTemplates',
    RoomMoveReasons: 'RoomMoveReasons',
    RoomPool: 'RoomPool',
    RoomPotential: 'RoomPotential',
    RoomPriorityRequests: 'RoomPriorityRequests',
    RoomRateAssignment: 'RoomRateAssignment',
    RoomReadyStatus: 'RoomReadyStatus',
    RoomRotationAdjustmentReasons: 'RoomRotationAdjustmentReasons',
    RoomRotationOverrideReasons: 'RoomRotationOverrideReasons',
    RoomSpecialRatings: 'RoomSpecialRatings',
    RoomStatus: 'RoomStatus',
    RoomStatusReasons: 'RoomStatusReasons',
    RoomTypeRequests: 'RoomTypeRequests',
    RoomTypeTemplates: 'RoomTypeTemplates',
    RoomTypeTypes: 'RoomTypeTypes',
    RoomTypeYieldStatus: 'RoomTypeYieldStatus',
    RoomTypesGlobalDesc: 'RoomTypesGlobalDesc',
    RoomTypesMultiHotel: 'RoomTypesMultiHotel',
    RoundingRule: 'RoundingRule',
    RoutingProfileTypes: 'RoutingProfileTypes',
    RoutingTypes: 'RoutingTypes',
    ScMailingActions: 'SCMailingActions',
    ScPeriods: 'SCPeriods',
    SalesCateringEventStatus: 'SalesCateringEventStatus',
    SalesScopeCities: 'SalesScopeCities',
    SalesScopes: 'SalesScopes',
    SampleDynamic: 'SampleDynamic',
    ScannerDevice: 'ScannerDevice',
    ScheduledActivitiesLocationCodes: 'ScheduledActivitiesLocationCodes',
    ScheduledActivitiesStatusCodes: 'ScheduledActivitiesStatusCodes',
    SellBy: 'SellBy',
    ServiceRequestPriority: 'ServiceRequestPriority',
    ServiceRequestStatus: 'ServiceRequestStatus',
    ShortDateFormats: 'ShortDateFormats',
    SitePlanTypes: 'SitePlanTypes',
    Snacks: 'Snacks',
    SourceCodes: 'SourceCodes',
    SourceCodesMultiHotels: 'SourceCodesMultiHotels',
    SourceGroupsMultiHotels: 'SourceGroupsMultiHotels',
    Sources: 'Sources',
    StagedProfileMembership: 'StagedProfileMembership',
    StartDayOfWeek: 'StartDayOfWeek',
    States: 'States',
    StatisticsContactProfileRoles: 'StatisticsContactProfileRoles',
    StatisticsCurrencyCodes: 'StatisticsCurrencyCodes',
    StoredValueTransaction: 'StoredValueTransaction',
    SynchronizeEventType: 'SynchronizeEventType',
    SynchronizeExternalSystems: 'SynchronizeExternalSystems',
    SynchronizeReservationStatus: 'SynchronizeReservationStatus',
    TaxCategoryCodes: 'TaxCategoryCodes',
    TaxOffice: 'TaxOffice',
    TaxRangesType: 'TaxRangesType',
    TaxTypesConfiguration: 'TaxTypesConfiguration',
    TempExclusivePreferences: 'TempExclusivePreferences',
    TemplateAlertCodes: 'TemplateAlertCodes',
    TemplateAmenityCodes: 'TemplateAmenityCodes',
    TemplateAttractionCodes: 'TemplateAttractionCodes',
    TemplateDayTypeCodes: 'TemplateDayTypeCodes',
    TemplateDeviceLocations: 'TemplateDeviceLocations',
    TemplateEventCodes: 'TemplateEventCodes',
    TemplateGuestMessages: 'TemplateGuestMessages',
    TemplateHousekeepingTasks: 'TemplateHousekeepingTasks',
    TemplateJobTitles: 'TemplateJobTitles',
    TemplateLocatorCodes: 'TemplateLocatorCodes',
    TemplatePreferenceTypes: 'TemplatePreferenceTypes',
    TemplatePromotionCodes: 'TemplatePromotionCodes',
    TemplatePromotionGroups: 'TemplatePromotionGroups',
    TemplateRoomConditions: 'TemplateRoomConditions',
    TemplateTransactionCodes: 'TemplateTransactionCodes',
    TemplateTransactionGroups: 'TemplateTransactionGroups',
    TemplateTransportCodes: 'TemplateTransportCodes',
    TemplateTransportationLabels: 'TemplateTransportationLabels',
    TemplateType: 'TemplateType',
    Territories: 'Territories',
    TimeFormats: 'TimeFormats',
    TimezoneRegions: 'TimezoneRegions',
    Titles: 'Titles',
    TmplCashierShiftDropLocations: 'TmplCashierShiftDropLocations',
    TopBasedOn: 'TopBasedOn',
    TraceCodes: 'TraceCodes',
    TraceGroups: 'TraceGroups',
    TraceStatuses: 'TraceStatuses',
    TraceTexts: 'TraceTexts',
    TrackItActions: 'TrackItActions',
    TrackItGroups: 'TrackItGroups',
    TrackItLocations: 'TrackItLocations',
    TrackItTypes: 'TrackItTypes',
    TransactionCodeTypes: 'TransactionCodeTypes',
    TransactionCodesMultiHotel: 'TransactionCodesMultiHotel',
    TransactionDiversionCodesMultiHotel: 'TransactionDiversionCodesMultiHotel',
    TransactionDiversionLevels: 'TransactionDiversionLevels',
    TransactionDiversionRuleTypes: 'TransactionDiversionRuleTypes',
    TransactionGroupsMultiHotel: 'TransactionGroupsMultiHotel',
    TransactionSubgroupsMultiHotel: 'TransactionSubgroupsMultiHotel',
    TransactionUsages: 'TransactionUsages',
    TransactionUserGroupHotels: 'TransactionUserGroupHotels',
    TranslatedLanguages: 'TranslatedLanguages',
    TranslationLanguageCode: 'TranslationLanguageCode',
    TransportTypesMultiHotels: 'TransportTypesMultiHotels',
    TravelAgentTypes: 'TravelAgentTypes',
    TrxCodeConsumptionMultiHotel: 'TrxCodeConsumptionMultiHotel',
    TrxServiceTypes: 'TrxServiceTypes',
    TurnawayCodesMultiHotels: 'TurnawayCodesMultiHotels',
    TurnawayTemplateCode: 'TurnawayTemplateCode',
    TurnawaysInterfaceResync: 'TurnawaysInterfaceResync',
    UdfAttributesMultiHotels: 'UDFAttributesMultiHotels',
    UdfTypes: 'UdfTypes',
    UpdateContactActivityStatus: 'UpdateContactActivityStatus',
    UpsellMarketCodes: 'UpsellMarketCodes',
    UpsellMembershipTypesEdit: 'UpsellMembershipTypesEdit',
    UpsellMembershipTypesOnly: 'UpsellMembershipTypesOnly',
    UpsellMembershipTypesView: 'UpsellMembershipTypesView',
    UserDefinedFieldGroups: 'UserDefinedFieldGroups',
    UserRoleGroups: 'UserRoleGroups',
    VipStatuses: 'VIPStatuses',
    WaitlistCodes: 'WaitlistCodes',
    WaitlistPriorities: 'WaitlistPriorities',
    WakeupCallStatuses: 'WakeupCallStatuses',
    WashScheduleMultiHotel: 'WashScheduleMultiHotel',
    YieldAdjustmentCodes: 'YieldAdjustmentCodes',
    YieldAdjustmentTypeValues: 'YieldAdjustmentTypeValues',
    YieldCategories: 'YieldCategories',
    YieldMarketsMultiHotel: 'YieldMarketsMultiHotel',
    YieldableCodes: 'YieldableCodes'
} as const;
export type GetListOfValuesNameEnum = typeof GetListOfValuesNameEnum[keyof typeof GetListOfValuesNameEnum];
