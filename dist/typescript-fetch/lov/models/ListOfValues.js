"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListOfValuesToJSON = exports.ListOfValuesFromJSONTyped = exports.ListOfValuesFromJSON = exports.instanceOfListOfValues = void 0;
const runtime_1 = require("../runtime");
const ListOfValuesType_1 = require("./ListOfValuesType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ListOfValues interface.
 */
function instanceOfListOfValues(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfListOfValues = instanceOfListOfValues;
function ListOfValuesFromJSON(json) {
    return ListOfValuesFromJSONTyped(json, false);
}
exports.ListOfValuesFromJSON = ListOfValuesFromJSON;
function ListOfValuesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'listOfValues': !(0, runtime_1.exists)(json, 'listOfValues') ? undefined : (0, ListOfValuesType_1.ListOfValuesTypeFromJSON)(json['listOfValues']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ListOfValuesFromJSONTyped = ListOfValuesFromJSONTyped;
function ListOfValuesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'listOfValues': (0, ListOfValuesType_1.ListOfValuesTypeToJSON)(value.listOfValues),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ListOfValuesToJSON = ListOfValuesToJSON;
