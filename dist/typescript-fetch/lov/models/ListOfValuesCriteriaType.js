"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListOfValuesCriteriaTypeToJSON = exports.ListOfValuesCriteriaTypeFromJSONTyped = exports.ListOfValuesCriteriaTypeFromJSON = exports.instanceOfListOfValuesCriteriaType = void 0;
const runtime_1 = require("../runtime");
const ParameterType_1 = require("./ParameterType");
/**
 * Check if a given object implements the ListOfValuesCriteriaType interface.
 */
function instanceOfListOfValuesCriteriaType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfListOfValuesCriteriaType = instanceOfListOfValuesCriteriaType;
function ListOfValuesCriteriaTypeFromJSON(json) {
    return ListOfValuesCriteriaTypeFromJSONTyped(json, false);
}
exports.ListOfValuesCriteriaTypeFromJSON = ListOfValuesCriteriaTypeFromJSON;
function ListOfValuesCriteriaTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'parameters': !(0, runtime_1.exists)(json, 'parameters') ? undefined : (json['parameters'].map(ParameterType_1.ParameterTypeFromJSON)),
        'itemCodes': !(0, runtime_1.exists)(json, 'itemCodes') ? undefined : json['itemCodes'],
        'excludeCodeList': !(0, runtime_1.exists)(json, 'excludeCodeList') ? undefined : json['excludeCodeList'],
        'lovName': !(0, runtime_1.exists)(json, 'lovName') ? undefined : json['lovName'],
        'includeInactive': !(0, runtime_1.exists)(json, 'includeInactive') ? undefined : json['includeInactive'],
    };
}
exports.ListOfValuesCriteriaTypeFromJSONTyped = ListOfValuesCriteriaTypeFromJSONTyped;
function ListOfValuesCriteriaTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'parameters': value.parameters === undefined ? undefined : (value.parameters.map(ParameterType_1.ParameterTypeToJSON)),
        'itemCodes': value.itemCodes,
        'excludeCodeList': value.excludeCodeList,
        'lovName': value.lovName,
        'includeInactive': value.includeInactive,
    };
}
exports.ListOfValuesCriteriaTypeToJSON = ListOfValuesCriteriaTypeToJSON;
