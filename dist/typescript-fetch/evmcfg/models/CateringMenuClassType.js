"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringMenuClassTypeToJSON = exports.CateringMenuClassTypeFromJSONTyped = exports.CateringMenuClassTypeFromJSON = exports.instanceOfCateringMenuClassType = void 0;
const runtime_1 = require("../runtime");
const CateringMenuClassInfoType_1 = require("./CateringMenuClassInfoType");
const CateringMenuType_1 = require("./CateringMenuType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringMenuClassType interface.
 */
function instanceOfCateringMenuClassType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringMenuClassType = instanceOfCateringMenuClassType;
function CateringMenuClassTypeFromJSON(json) {
    return CateringMenuClassTypeFromJSONTyped(json, false);
}
exports.CateringMenuClassTypeFromJSON = CateringMenuClassTypeFromJSON;
function CateringMenuClassTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'classId': !(0, runtime_1.exists)(json, 'classId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['classId']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'classInfo': !(0, runtime_1.exists)(json, 'classInfo') ? undefined : (0, CateringMenuClassInfoType_1.CateringMenuClassInfoTypeFromJSON)(json['classInfo']),
        'menuList': !(0, runtime_1.exists)(json, 'menuList') ? undefined : (json['menuList'].map(CateringMenuType_1.CateringMenuTypeFromJSON)),
    };
}
exports.CateringMenuClassTypeFromJSONTyped = CateringMenuClassTypeFromJSONTyped;
function CateringMenuClassTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'classId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.classId),
        'hotelId': value.hotelId,
        'classInfo': (0, CateringMenuClassInfoType_1.CateringMenuClassInfoTypeToJSON)(value.classInfo),
        'menuList': value.menuList === undefined ? undefined : (value.menuList.map(CateringMenuType_1.CateringMenuTypeToJSON)),
    };
}
exports.CateringMenuClassTypeToJSON = CateringMenuClassTypeToJSON;
