/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EventResourceNoteType } from './EventResourceNoteType';
import type { InventoryItemTypeSellInfo } from './InventoryItemTypeSellInfo';
import type { ItemAttributeType } from './ItemAttributeType';
import type { ItemRateType } from './ItemRateType';
import type { ItemVendorType } from './ItemVendorType';
import type { TranslationTextType200 } from './TranslationTextType200';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Inventory Items identification details.
 * @export
 * @interface InventoryItemType
 */
export interface InventoryItemType {
    /**
     * The Hotel code which the item belongs to.
     * @type {string}
     * @memberof InventoryItemType
     */
    hotelId?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof InventoryItemType
     */
    itemId?: UniqueIDType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof InventoryItemType
     */
    itemClassId?: UniqueIDType;
    /**
     * The Item Class Code which the item belongs to.
     * @type {string}
     * @memberof InventoryItemType
     */
    itemClassCode?: string;
    /**
     * The Description of the Item Class.
     * @type {string}
     * @memberof InventoryItemType
     */
    itemClassDescription?: string;
    /**
     *
     * @type {TranslationTextType200}
     * @memberof InventoryItemType
     */
    itemName?: TranslationTextType200;
    /**
     * The Description of the Item.
     * @type {string}
     * @memberof InventoryItemType
     */
    itemDescription?: string;
    /**
     * The Article Number of the Item.
     * @type {string}
     * @memberof InventoryItemType
     */
    itemCode?: string;
    /**
     * The Revenue Type of the Item.
     * @type {string}
     * @memberof InventoryItemType
     */
    revenueType?: string;
    /**
     * If true, the revenue could be changed.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    revenueTypeEditable?: boolean;
    /**
     * Flag to define if the inventory item can be ordered externally when the item is marked as critical.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    externalOrder?: boolean;
    /**
     * The Revenue Type of the Item.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    print?: boolean;
    /**
     *
     * @type {InventoryItemTypeSellInfo}
     * @memberof InventoryItemType
     */
    sellInfo?: InventoryItemTypeSellInfo;
    /**
     * Setup Time of the Item in minutes.
     * @type {number}
     * @memberof InventoryItemType
     */
    setupTime?: number;
    /**
     * Setdown Time of the Item in minutes.
     * @type {number}
     * @memberof InventoryItemType
     */
    setdownTime?: number;
    /**
     * The Trace Text of the Item.
     * @type {string}
     * @memberof InventoryItemType
     */
    traceText?: string;
    /**
     * Flag to indicate that trace text will be created for each day of the Item Inventory.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    tracesPerDay?: boolean;
    /**
     * The Item Pool description of the Item.
     * @type {string}
     * @memberof InventoryItemType
     */
    itemPool?: string;
    /**
     * The display sequence of the Item.
     * @type {number}
     * @memberof InventoryItemType
     */
    displaySequence?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof InventoryItemType
     */
    eventTypes?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InventoryItemType
     */
    departments?: Array<string>;
    /**
     * List of Item Attributes.
     * @type {Array<ItemAttributeType>}
     * @memberof InventoryItemType
     */
    attributes?: Array<ItemAttributeType>;
    /**
     * List of Item Rates.
     * @type {Array<ItemRateType>}
     * @memberof InventoryItemType
     */
    rates?: Array<ItemRateType>;
    /**
     * List of Item Vendors.
     * @type {Array<ItemVendorType>}
     * @memberof InventoryItemType
     */
    vendors?: Array<ItemVendorType>;
    /**
     * Contains event resource note information.
     * @type {Array<EventResourceNoteType>}
     * @memberof InventoryItemType
     */
    resourceNotes?: Array<EventResourceNoteType>;
    /**
     * Display sequence of Item Class.
     * @type {number}
     * @memberof InventoryItemType
     */
    itemClassDisplaySequence?: number;
    /**
     * If true, the item is used for events.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    usedForEvents?: boolean;
    /**
     * If true, the item is used for reservation.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    usedForReservation?: boolean;
    /**
     * Indicates whether Item is from a Template or not.
     * @type {boolean}
     * @memberof InventoryItemType
     */
    itemFromTemplate?: boolean;
}
/**
 * Check if a given object implements the InventoryItemType interface.
 */
export declare function instanceOfInventoryItemType(value: object): boolean;
export declare function InventoryItemTypeFromJSON(json: any): InventoryItemType;
export declare function InventoryItemTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryItemType;
export declare function InventoryItemTypeToJSON(value?: InventoryItemType | null): any;
