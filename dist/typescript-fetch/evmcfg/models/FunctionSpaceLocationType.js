"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionSpaceLocationTypeToJSON = exports.FunctionSpaceLocationTypeFromJSONTyped = exports.FunctionSpaceLocationTypeFromJSON = exports.instanceOfFunctionSpaceLocationType = void 0;
const runtime_1 = require("../runtime");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the FunctionSpaceLocationType interface.
 */
function instanceOfFunctionSpaceLocationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFunctionSpaceLocationType = instanceOfFunctionSpaceLocationType;
function FunctionSpaceLocationTypeFromJSON(json) {
    return FunctionSpaceLocationTypeFromJSONTyped(json, false);
}
exports.FunctionSpaceLocationTypeFromJSON = FunctionSpaceLocationTypeFromJSON;
function FunctionSpaceLocationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'translatableDescription': !(0, runtime_1.exists)(json, 'translatableDescription') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['translatableDescription']),
    };
}
exports.FunctionSpaceLocationTypeFromJSONTyped = FunctionSpaceLocationTypeFromJSONTyped;
function FunctionSpaceLocationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'hotelId': value.hotelId,
        'translatableDescription': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.translatableDescription),
    };
}
exports.FunctionSpaceLocationTypeToJSON = FunctionSpaceLocationTypeToJSON;
