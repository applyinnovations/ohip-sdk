/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringMenuClassInfoType } from './CateringMenuClassInfoType';
import {
    CateringMenuClassInfoTypeFromJSON,
    CateringMenuClassInfoTypeFromJSONTyped,
    CateringMenuClassInfoTypeToJSON,
} from './CateringMenuClassInfoType';
import type { CateringMenuType } from './CateringMenuType';
import {
    CateringMenuTypeFromJSON,
    CateringMenuTypeFromJSONTyped,
    CateringMenuTypeToJSON,
} from './CateringMenuType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Catering Menu Class which holds the value of menu class.
 * @export
 * @interface CateringMenuClassType
 */
export interface CateringMenuClassType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringMenuClassType
     */
    classId?: UniqueIDType;
    /**
     * The Hotel code which the menu class belongs to.
     * @type {string}
     * @memberof CateringMenuClassType
     */
    hotelId?: string;
    /**
     * 
     * @type {CateringMenuClassInfoType}
     * @memberof CateringMenuClassType
     */
    classInfo?: CateringMenuClassInfoType;
    /**
     * List of Values of Menu.
     * @type {Array<CateringMenuType>}
     * @memberof CateringMenuClassType
     */
    menuList?: Array<CateringMenuType>;
}

/**
 * Check if a given object implements the CateringMenuClassType interface.
 */
export function instanceOfCateringMenuClassType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringMenuClassTypeFromJSON(json: any): CateringMenuClassType {
    return CateringMenuClassTypeFromJSONTyped(json, false);
}

export function CateringMenuClassTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringMenuClassType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'classId': !exists(json, 'classId') ? undefined : UniqueIDTypeFromJSON(json['classId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'classInfo': !exists(json, 'classInfo') ? undefined : CateringMenuClassInfoTypeFromJSON(json['classInfo']),
        'menuList': !exists(json, 'menuList') ? undefined : ((json['menuList'] as Array<any>).map(CateringMenuTypeFromJSON)),
    };
}

export function CateringMenuClassTypeToJSON(value?: CateringMenuClassType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'classId': UniqueIDTypeToJSON(value.classId),
        'hotelId': value.hotelId,
        'classInfo': CateringMenuClassInfoTypeToJSON(value.classInfo),
        'menuList': value.menuList === undefined ? undefined : ((value.menuList as Array<any>).map(CateringMenuTypeToJSON)),
    };
}

