"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemPoolsInfoToJSON = exports.ItemPoolsInfoFromJSONTyped = exports.ItemPoolsInfoFromJSON = exports.instanceOfItemPoolsInfo = void 0;
const runtime_1 = require("../runtime");
const InstanceLink_1 = require("./InstanceLink");
const ItemPoolType_1 = require("./ItemPoolType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ItemPoolsInfo interface.
 */
function instanceOfItemPoolsInfo(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfItemPoolsInfo = instanceOfItemPoolsInfo;
function ItemPoolsInfoFromJSON(json) {
    return ItemPoolsInfoFromJSONTyped(json, false);
}
exports.ItemPoolsInfoFromJSON = ItemPoolsInfoFromJSON;
function ItemPoolsInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'itemPools': !(0, runtime_1.exists)(json, 'itemPools') ? undefined : (json['itemPools'].map(ItemPoolType_1.ItemPoolTypeFromJSON)),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ItemPoolsInfoFromJSONTyped = ItemPoolsInfoFromJSONTyped;
function ItemPoolsInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'itemPools': value.itemPools === undefined ? undefined : (value.itemPools.map(ItemPoolType_1.ItemPoolTypeToJSON)),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ItemPoolsInfoToJSON = ItemPoolsInfoToJSON;
