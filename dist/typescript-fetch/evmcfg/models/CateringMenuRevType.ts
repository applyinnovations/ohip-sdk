/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { MenuTypeType } from './MenuTypeType';
import {
    MenuTypeTypeFromJSON,
    MenuTypeTypeFromJSONTyped,
    MenuTypeTypeToJSON,
} from './MenuTypeType';

/**
 * 
 * @export
 * @interface CateringMenuRevType
 */
export interface CateringMenuRevType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringMenuRevType
     */
    cost?: CurrencyAmountType;
    /**
     * This type holds cost of the Menu.
     * @type {number}
     * @memberof CateringMenuRevType
     */
    costMargin?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringMenuRevType
     */
    internalQuote?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringMenuRevType
     */
    price?: CurrencyAmountType;
    /**
     * This type holds price margin for the given Menu.
     * @type {number}
     * @memberof CateringMenuRevType
     */
    priceMargin?: number;
    /**
     * This supports all Revenue Types
     * @type {string}
     * @memberof CateringMenuRevType
     */
    revenueType?: string;
    /**
     * 
     * @type {MenuTypeType}
     * @memberof CateringMenuRevType
     */
    type?: MenuTypeType;
}

/**
 * Check if a given object implements the CateringMenuRevType interface.
 */
export function instanceOfCateringMenuRevType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringMenuRevTypeFromJSON(json: any): CateringMenuRevType {
    return CateringMenuRevTypeFromJSONTyped(json, false);
}

export function CateringMenuRevTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringMenuRevType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cost': !exists(json, 'cost') ? undefined : CurrencyAmountTypeFromJSON(json['cost']),
        'costMargin': !exists(json, 'costMargin') ? undefined : json['costMargin'],
        'internalQuote': !exists(json, 'internalQuote') ? undefined : CurrencyAmountTypeFromJSON(json['internalQuote']),
        'price': !exists(json, 'price') ? undefined : CurrencyAmountTypeFromJSON(json['price']),
        'priceMargin': !exists(json, 'priceMargin') ? undefined : json['priceMargin'],
        'revenueType': !exists(json, 'revenueType') ? undefined : json['revenueType'],
        'type': !exists(json, 'type') ? undefined : MenuTypeTypeFromJSON(json['type']),
    };
}

export function CateringMenuRevTypeToJSON(value?: CateringMenuRevType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cost': CurrencyAmountTypeToJSON(value.cost),
        'costMargin': value.costMargin,
        'internalQuote': CurrencyAmountTypeToJSON(value.internalQuote),
        'price': CurrencyAmountTypeToJSON(value.price),
        'priceMargin': value.priceMargin,
        'revenueType': value.revenueType,
        'type': MenuTypeTypeToJSON(value.type),
    };
}

