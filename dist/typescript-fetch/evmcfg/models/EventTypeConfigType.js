"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeConfigTypeToJSON = exports.EventTypeConfigTypeFromJSONTyped = exports.EventTypeConfigTypeFromJSON = exports.instanceOfEventTypeConfigType = void 0;
const runtime_1 = require("../runtime");
const TimeWindowType_1 = require("./TimeWindowType");
const TranslationTextType50_1 = require("./TranslationTextType50");
/**
 * Check if a given object implements the EventTypeConfigType interface.
 */
function instanceOfEventTypeConfigType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEventTypeConfigType = instanceOfEventTypeConfigType;
function EventTypeConfigTypeFromJSON(json) {
    return EventTypeConfigTypeFromJSONTyped(json, false);
}
exports.EventTypeConfigTypeFromJSON = EventTypeConfigTypeFromJSON;
function EventTypeConfigTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'coverable': !(0, runtime_1.exists)(json, 'coverable') ? undefined : json['coverable'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'eventTypeCode': !(0, runtime_1.exists)(json, 'eventTypeCode') ? undefined : json['eventTypeCode'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'mealType': !(0, runtime_1.exists)(json, 'mealType') ? undefined : json['mealType'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'timeWindow': !(0, runtime_1.exists)(json, 'timeWindow') ? undefined : (0, TimeWindowType_1.TimeWindowTypeFromJSON)(json['timeWindow']),
        'translatableDescription': !(0, runtime_1.exists)(json, 'translatableDescription') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['translatableDescription']),
        'webBookable': !(0, runtime_1.exists)(json, 'webBookable') ? undefined : json['webBookable'],
    };
}
exports.EventTypeConfigTypeFromJSONTyped = EventTypeConfigTypeFromJSONTyped;
function EventTypeConfigTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'coverable': value.coverable,
        'description': value.description,
        'eventTypeCode': value.eventTypeCode,
        'inactive': value.inactive,
        'mealType': value.mealType,
        'sequence': value.sequence,
        'timeWindow': (0, TimeWindowType_1.TimeWindowTypeToJSON)(value.timeWindow),
        'translatableDescription': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.translatableDescription),
        'webBookable': value.webBookable,
    };
}
exports.EventTypeConfigTypeToJSON = EventTypeConfigTypeToJSON;
