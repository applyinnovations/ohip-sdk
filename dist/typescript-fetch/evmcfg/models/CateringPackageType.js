"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringPackageTypeToJSON = exports.CateringPackageTypeFromJSONTyped = exports.CateringPackageTypeFromJSON = exports.instanceOfCateringPackageType = void 0;
const runtime_1 = require("../runtime");
const CateringPackageEventListType_1 = require("./CateringPackageEventListType");
const CateringPackageInfoType_1 = require("./CateringPackageInfoType");
const CateringPackagePricingListType_1 = require("./CateringPackagePricingListType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringPackageType interface.
 */
function instanceOfCateringPackageType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringPackageType = instanceOfCateringPackageType;
function CateringPackageTypeFromJSON(json) {
    return CateringPackageTypeFromJSONTyped(json, false);
}
exports.CateringPackageTypeFromJSON = CateringPackageTypeFromJSON;
function CateringPackageTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'eventsList': !(0, runtime_1.exists)(json, 'eventsList') ? undefined : (0, CateringPackageEventListType_1.CateringPackageEventListTypeFromJSON)(json['eventsList']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'packageDetail': !(0, runtime_1.exists)(json, 'packageDetail') ? undefined : (0, CateringPackageInfoType_1.CateringPackageInfoTypeFromJSON)(json['packageDetail']),
        'pkgId': !(0, runtime_1.exists)(json, 'pkgId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['pkgId']),
        'pricingList': !(0, runtime_1.exists)(json, 'pricingList') ? undefined : (0, CateringPackagePricingListType_1.CateringPackagePricingListTypeFromJSON)(json['pricingList']),
    };
}
exports.CateringPackageTypeFromJSONTyped = CateringPackageTypeFromJSONTyped;
function CateringPackageTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'eventsList': (0, CateringPackageEventListType_1.CateringPackageEventListTypeToJSON)(value.eventsList),
        'hotelId': value.hotelId,
        'packageDetail': (0, CateringPackageInfoType_1.CateringPackageInfoTypeToJSON)(value.packageDetail),
        'pkgId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.pkgId),
        'pricingList': (0, CateringPackagePricingListType_1.CateringPackagePricingListTypeToJSON)(value.pricingList),
    };
}
exports.CateringPackageTypeToJSON = CateringPackageTypeToJSON;
