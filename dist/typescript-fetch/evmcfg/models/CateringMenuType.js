"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringMenuTypeToJSON = exports.CateringMenuTypeFromJSONTyped = exports.CateringMenuTypeFromJSON = exports.instanceOfCateringMenuType = void 0;
const runtime_1 = require("../runtime");
const CateringMenuDetailType_1 = require("./CateringMenuDetailType");
const CateringMenuInfoType_1 = require("./CateringMenuInfoType");
const CateringMenuRevType_1 = require("./CateringMenuRevType");
const CateringMultiChoiceMenuType_1 = require("./CateringMultiChoiceMenuType");
const EventResourceNoteType_1 = require("./EventResourceNoteType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringMenuType interface.
 */
function instanceOfCateringMenuType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringMenuType = instanceOfCateringMenuType;
function CateringMenuTypeFromJSON(json) {
    return CateringMenuTypeFromJSONTyped(json, false);
}
exports.CateringMenuTypeFromJSON = CateringMenuTypeFromJSON;
function CateringMenuTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['id']),
        'classId': !(0, runtime_1.exists)(json, 'classId') ? undefined : json['classId'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'info': !(0, runtime_1.exists)(json, 'info') ? undefined : (0, CateringMenuInfoType_1.CateringMenuInfoTypeFromJSON)(json['info']),
        'revenueList': !(0, runtime_1.exists)(json, 'revenueList') ? undefined : (json['revenueList'].map(CateringMenuRevType_1.CateringMenuRevTypeFromJSON)),
        'menuDetailList': !(0, runtime_1.exists)(json, 'menuDetailList') ? undefined : (json['menuDetailList'].map(CateringMenuDetailType_1.CateringMenuDetailTypeFromJSON)),
        'multiChoiceList': !(0, runtime_1.exists)(json, 'multiChoiceList') ? undefined : (json['multiChoiceList'].map(CateringMultiChoiceMenuType_1.CateringMultiChoiceMenuTypeFromJSON)),
        'menuNoteList': !(0, runtime_1.exists)(json, 'menuNoteList') ? undefined : (json['menuNoteList'].map(EventResourceNoteType_1.EventResourceNoteTypeFromJSON)),
    };
}
exports.CateringMenuTypeFromJSONTyped = CateringMenuTypeFromJSONTyped;
function CateringMenuTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.id),
        'classId': value.classId,
        'hotelId': value.hotelId,
        'info': (0, CateringMenuInfoType_1.CateringMenuInfoTypeToJSON)(value.info),
        'revenueList': value.revenueList === undefined ? undefined : (value.revenueList.map(CateringMenuRevType_1.CateringMenuRevTypeToJSON)),
        'menuDetailList': value.menuDetailList === undefined ? undefined : (value.menuDetailList.map(CateringMenuDetailType_1.CateringMenuDetailTypeToJSON)),
        'multiChoiceList': value.multiChoiceList === undefined ? undefined : (value.multiChoiceList.map(CateringMultiChoiceMenuType_1.CateringMultiChoiceMenuTypeToJSON)),
        'menuNoteList': value.menuNoteList === undefined ? undefined : (value.menuNoteList.map(EventResourceNoteType_1.EventResourceNoteTypeToJSON)),
    };
}
exports.CateringMenuTypeToJSON = CateringMenuTypeToJSON;
