"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionSpaceDimensionTypeToJSON = exports.FunctionSpaceDimensionTypeFromJSONTyped = exports.FunctionSpaceDimensionTypeFromJSON = exports.instanceOfFunctionSpaceDimensionType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the FunctionSpaceDimensionType interface.
 */
function instanceOfFunctionSpaceDimensionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFunctionSpaceDimensionType = instanceOfFunctionSpaceDimensionType;
function FunctionSpaceDimensionTypeFromJSON(json) {
    return FunctionSpaceDimensionTypeFromJSONTyped(json, false);
}
exports.FunctionSpaceDimensionTypeFromJSON = FunctionSpaceDimensionTypeFromJSON;
function FunctionSpaceDimensionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'area': !(0, runtime_1.exists)(json, 'area') ? undefined : json['area'],
        'length': !(0, runtime_1.exists)(json, 'length') ? undefined : json['length'],
        'maxHeight': !(0, runtime_1.exists)(json, 'maxHeight') ? undefined : json['maxHeight'],
        'minHeight': !(0, runtime_1.exists)(json, 'minHeight') ? undefined : json['minHeight'],
        'note': !(0, runtime_1.exists)(json, 'note') ? undefined : json['note'],
        'unitOfMeasureCode': !(0, runtime_1.exists)(json, 'unitOfMeasureCode') ? undefined : json['unitOfMeasureCode'],
        'weight': !(0, runtime_1.exists)(json, 'weight') ? undefined : json['weight'],
        'width': !(0, runtime_1.exists)(json, 'width') ? undefined : json['width'],
    };
}
exports.FunctionSpaceDimensionTypeFromJSONTyped = FunctionSpaceDimensionTypeFromJSONTyped;
function FunctionSpaceDimensionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'area': value.area,
        'length': value.length,
        'maxHeight': value.maxHeight,
        'minHeight': value.minHeight,
        'note': value.note,
        'unitOfMeasureCode': value.unitOfMeasureCode,
        'weight': value.weight,
        'width': value.width,
    };
}
exports.FunctionSpaceDimensionTypeToJSON = FunctionSpaceDimensionTypeToJSON;
