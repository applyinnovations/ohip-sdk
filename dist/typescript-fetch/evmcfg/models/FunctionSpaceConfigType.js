"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionSpaceConfigTypeToJSON = exports.FunctionSpaceConfigTypeFromJSONTyped = exports.FunctionSpaceConfigTypeFromJSON = exports.instanceOfFunctionSpaceConfigType = void 0;
const runtime_1 = require("../runtime");
const BaseFunctionSpaceRateType_1 = require("./BaseFunctionSpaceRateType");
const ComboElementRoomType_1 = require("./ComboElementRoomType");
const FunctionSpaceAlternateType_1 = require("./FunctionSpaceAlternateType");
const FunctionSpaceConfigTypeSetupStylesInner_1 = require("./FunctionSpaceConfigTypeSetupStylesInner");
const FunctionSpaceDimensionType_1 = require("./FunctionSpaceDimensionType");
const RoomCapacityType_1 = require("./RoomCapacityType");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the FunctionSpaceConfigType interface.
 */
function instanceOfFunctionSpaceConfigType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFunctionSpaceConfigType = instanceOfFunctionSpaceConfigType;
function FunctionSpaceConfigTypeFromJSON(json) {
    return FunctionSpaceConfigTypeFromJSONTyped(json, false);
}
exports.FunctionSpaceConfigTypeFromJSON = FunctionSpaceConfigTypeFromJSON;
function FunctionSpaceConfigTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'roomCode': !(0, runtime_1.exists)(json, 'roomCode') ? undefined : json['roomCode'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'psuedoRoomType': !(0, runtime_1.exists)(json, 'psuedoRoomType') ? undefined : json['psuedoRoomType'],
        'spaceName': !(0, runtime_1.exists)(json, 'spaceName') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['spaceName']),
        'shortName': !(0, runtime_1.exists)(json, 'shortName') ? undefined : json['shortName'],
        'floor': !(0, runtime_1.exists)(json, 'floor') ? undefined : json['floor'],
        'spaceType': !(0, runtime_1.exists)(json, 'spaceType') ? undefined : json['spaceType'],
        'location': !(0, runtime_1.exists)(json, 'location') ? undefined : json['location'],
        'combo': !(0, runtime_1.exists)(json, 'combo') ? undefined : json['combo'],
        'element': !(0, runtime_1.exists)(json, 'element') ? undefined : json['element'],
        'shareable': !(0, runtime_1.exists)(json, 'shareable') ? undefined : json['shareable'],
        'forceAlternate': !(0, runtime_1.exists)(json, 'forceAlternate') ? undefined : json['forceAlternate'],
        'webBookable': !(0, runtime_1.exists)(json, 'webBookable') ? undefined : json['webBookable'],
        'webViewable': !(0, runtime_1.exists)(json, 'webViewable') ? undefined : json['webViewable'],
        'excludeFromForecast': !(0, runtime_1.exists)(json, 'excludeFromForecast') ? undefined : json['excludeFromForecast'],
        'fullUtilizationTime': !(0, runtime_1.exists)(json, 'fullUtilizationTime') ? undefined : json['fullUtilizationTime'],
        'handicapFacilities': !(0, runtime_1.exists)(json, 'handicapFacilities') ? undefined : json['handicapFacilities'],
        'orderBy1': !(0, runtime_1.exists)(json, 'orderBy1') ? undefined : json['orderBy1'],
        'orderBy2': !(0, runtime_1.exists)(json, 'orderBy2') ? undefined : json['orderBy2'],
        'orderBy3': !(0, runtime_1.exists)(json, 'orderBy3') ? undefined : json['orderBy3'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['description']),
        'capacity': !(0, runtime_1.exists)(json, 'capacity') ? undefined : (0, RoomCapacityType_1.RoomCapacityTypeFromJSON)(json['capacity']),
        'displayInDiary': !(0, runtime_1.exists)(json, 'displayInDiary') ? undefined : json['displayInDiary'],
        'maxEvents': !(0, runtime_1.exists)(json, 'maxEvents') ? undefined : json['maxEvents'],
        'futureEventsExist': !(0, runtime_1.exists)(json, 'futureEventsExist') ? undefined : json['futureEventsExist'],
        'setupStyles': !(0, runtime_1.exists)(json, 'setupStyles') ? undefined : (json['setupStyles'].map(FunctionSpaceConfigTypeSetupStylesInner_1.FunctionSpaceConfigTypeSetupStylesInnerFromJSON)),
        'comboRooms': !(0, runtime_1.exists)(json, 'comboRooms') ? undefined : (json['comboRooms'].map(ComboElementRoomType_1.ComboElementRoomTypeFromJSON)),
        'rates': !(0, runtime_1.exists)(json, 'rates') ? undefined : (json['rates'].map(BaseFunctionSpaceRateType_1.BaseFunctionSpaceRateTypeFromJSON)),
        'comboElements': !(0, runtime_1.exists)(json, 'comboElements') ? undefined : json['comboElements'],
        'dimension': !(0, runtime_1.exists)(json, 'dimension') ? undefined : (0, FunctionSpaceDimensionType_1.FunctionSpaceDimensionTypeFromJSON)(json['dimension']),
        'alternate': !(0, runtime_1.exists)(json, 'alternate') ? undefined : (0, FunctionSpaceAlternateType_1.FunctionSpaceAlternateTypeFromJSON)(json['alternate']),
    };
}
exports.FunctionSpaceConfigTypeFromJSONTyped = FunctionSpaceConfigTypeFromJSONTyped;
function FunctionSpaceConfigTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'roomCode': value.roomCode,
        'roomType': value.roomType,
        'psuedoRoomType': value.psuedoRoomType,
        'spaceName': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.spaceName),
        'shortName': value.shortName,
        'floor': value.floor,
        'spaceType': value.spaceType,
        'location': value.location,
        'combo': value.combo,
        'element': value.element,
        'shareable': value.shareable,
        'forceAlternate': value.forceAlternate,
        'webBookable': value.webBookable,
        'webViewable': value.webViewable,
        'excludeFromForecast': value.excludeFromForecast,
        'fullUtilizationTime': value.fullUtilizationTime,
        'handicapFacilities': value.handicapFacilities,
        'orderBy1': value.orderBy1,
        'orderBy2': value.orderBy2,
        'orderBy3': value.orderBy3,
        'description': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.description),
        'capacity': (0, RoomCapacityType_1.RoomCapacityTypeToJSON)(value.capacity),
        'displayInDiary': value.displayInDiary,
        'maxEvents': value.maxEvents,
        'futureEventsExist': value.futureEventsExist,
        'setupStyles': value.setupStyles === undefined ? undefined : (value.setupStyles.map(FunctionSpaceConfigTypeSetupStylesInner_1.FunctionSpaceConfigTypeSetupStylesInnerToJSON)),
        'comboRooms': value.comboRooms === undefined ? undefined : (value.comboRooms.map(ComboElementRoomType_1.ComboElementRoomTypeToJSON)),
        'rates': value.rates === undefined ? undefined : (value.rates.map(BaseFunctionSpaceRateType_1.BaseFunctionSpaceRateTypeToJSON)),
        'comboElements': value.comboElements,
        'dimension': (0, FunctionSpaceDimensionType_1.FunctionSpaceDimensionTypeToJSON)(value.dimension),
        'alternate': (0, FunctionSpaceAlternateType_1.FunctionSpaceAlternateTypeToJSON)(value.alternate),
    };
}
exports.FunctionSpaceConfigTypeToJSON = FunctionSpaceConfigTypeToJSON;
