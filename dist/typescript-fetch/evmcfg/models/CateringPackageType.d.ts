/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CateringPackageEventType } from './CateringPackageEventType';
import type { CateringPackageInfoType } from './CateringPackageInfoType';
import type { CateringPackagePricingType } from './CateringPackagePricingType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Type used for managing Catering Package.
 * @export
 * @interface CateringPackageType
 */
export interface CateringPackageType {
    /**
     * Collection of multiple Events associated with a particular Catering Packages.
     * @type {Array<CateringPackageEventType>}
     * @memberof CateringPackageType
     */
    eventsList?: Array<CateringPackageEventType>;
    /**
     * Hotel Code associated with the Catering Package.
     * @type {string}
     * @memberof CateringPackageType
     */
    hotelId?: string;
    /**
     *
     * @type {CateringPackageInfoType}
     * @memberof CateringPackageType
     */
    packageDetail?: CateringPackageInfoType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof CateringPackageType
     */
    pkgId?: UniqueIDType;
    /**
     * Collection of multiple Pricing Details associated with a particular Catering Package.
     * @type {Array<CateringPackagePricingType>}
     * @memberof CateringPackageType
     */
    pricingList?: Array<CateringPackagePricingType>;
}
/**
 * Check if a given object implements the CateringPackageType interface.
 */
export declare function instanceOfCateringPackageType(value: object): boolean;
export declare function CateringPackageTypeFromJSON(json: any): CateringPackageType;
export declare function CateringPackageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackageType;
export declare function CateringPackageTypeToJSON(value?: CateringPackageType | null): any;
