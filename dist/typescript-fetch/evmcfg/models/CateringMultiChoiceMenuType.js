"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringMultiChoiceMenuTypeToJSON = exports.CateringMultiChoiceMenuTypeFromJSONTyped = exports.CateringMultiChoiceMenuTypeFromJSON = exports.instanceOfCateringMultiChoiceMenuType = void 0;
const runtime_1 = require("../runtime");
const TranslationTextType100_1 = require("./TranslationTextType100");
const TranslationTextType20_1 = require("./TranslationTextType20");
/**
 * Check if a given object implements the CateringMultiChoiceMenuType interface.
 */
function instanceOfCateringMultiChoiceMenuType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringMultiChoiceMenuType = instanceOfCateringMultiChoiceMenuType;
function CateringMultiChoiceMenuTypeFromJSON(json) {
    return CateringMultiChoiceMenuTypeFromJSONTyped(json, false);
}
exports.CateringMultiChoiceMenuTypeFromJSON = CateringMultiChoiceMenuTypeFromJSON;
function CateringMultiChoiceMenuTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'courseId': !(0, runtime_1.exists)(json, 'courseId') ? undefined : json['courseId'],
        'course': !(0, runtime_1.exists)(json, 'course') ? undefined : json['course'],
        'choiceCount': !(0, runtime_1.exists)(json, 'choiceCount') ? undefined : json['choiceCount'],
        'courseDescription': !(0, runtime_1.exists)(json, 'courseDescription') ? undefined : (0, TranslationTextType100_1.TranslationTextType100FromJSON)(json['courseDescription']),
        'courseName': !(0, runtime_1.exists)(json, 'courseName') ? undefined : (0, TranslationTextType20_1.TranslationTextType20FromJSON)(json['courseName']),
    };
}
exports.CateringMultiChoiceMenuTypeFromJSONTyped = CateringMultiChoiceMenuTypeFromJSONTyped;
function CateringMultiChoiceMenuTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'courseId': value.courseId,
        'course': value.course,
        'choiceCount': value.choiceCount,
        'courseDescription': (0, TranslationTextType100_1.TranslationTextType100ToJSON)(value.courseDescription),
        'courseName': (0, TranslationTextType20_1.TranslationTextType20ToJSON)(value.courseName),
    };
}
exports.CateringMultiChoiceMenuTypeToJSON = CateringMultiChoiceMenuTypeToJSON;
