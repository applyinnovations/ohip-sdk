"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringPackageRevenueTypeToJSON = exports.CateringPackageRevenueTypeFromJSONTyped = exports.CateringPackageRevenueTypeFromJSON = exports.instanceOfCateringPackageRevenueType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringPackageRevenueType interface.
 */
function instanceOfCateringPackageRevenueType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringPackageRevenueType = instanceOfCateringPackageRevenueType;
function CateringPackageRevenueTypeFromJSON(json) {
    return CateringPackageRevenueTypeFromJSONTyped(json, false);
}
exports.CateringPackageRevenueTypeFromJSON = CateringPackageRevenueTypeFromJSON;
function CateringPackageRevenueTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'costExpected': !(0, runtime_1.exists)(json, 'costExpected') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['costExpected']),
        'orderBy': !(0, runtime_1.exists)(json, 'orderBy') ? undefined : json['orderBy'],
        'packageEventId': !(0, runtime_1.exists)(json, 'packageEventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['packageEventId']),
        'revExpected': !(0, runtime_1.exists)(json, 'revExpected') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['revExpected']),
        'revForecast': !(0, runtime_1.exists)(json, 'revForecast') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['revForecast']),
        'revType': !(0, runtime_1.exists)(json, 'revType') ? undefined : json['revType'],
    };
}
exports.CateringPackageRevenueTypeFromJSONTyped = CateringPackageRevenueTypeFromJSONTyped;
function CateringPackageRevenueTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'costExpected': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.costExpected),
        'orderBy': value.orderBy,
        'packageEventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.packageEventId),
        'revExpected': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.revExpected),
        'revForecast': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.revForecast),
        'revType': value.revType,
    };
}
exports.CateringPackageRevenueTypeToJSON = CateringPackageRevenueTypeToJSON;
