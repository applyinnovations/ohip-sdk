"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyCateringMenuTypeToJSON = exports.CopyCateringMenuTypeFromJSONTyped = exports.CopyCateringMenuTypeFromJSON = exports.instanceOfCopyCateringMenuType = void 0;
const runtime_1 = require("../runtime");
const CateringMenuClassListType_1 = require("./CateringMenuClassListType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CopyCateringMenuType interface.
 */
function instanceOfCopyCateringMenuType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCopyCateringMenuType = instanceOfCopyCateringMenuType;
function CopyCateringMenuTypeFromJSON(json) {
    return CopyCateringMenuTypeFromJSONTyped(json, false);
}
exports.CopyCateringMenuTypeFromJSON = CopyCateringMenuTypeFromJSON;
function CopyCateringMenuTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'menuClassList': !(0, runtime_1.exists)(json, 'menuClassList') ? undefined : (0, CateringMenuClassListType_1.CateringMenuClassListTypeFromJSON)(json['menuClassList']),
        'menuId': !(0, runtime_1.exists)(json, 'menuId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['menuId']),
    };
}
exports.CopyCateringMenuTypeFromJSONTyped = CopyCateringMenuTypeFromJSONTyped;
function CopyCateringMenuTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'menuClassList': (0, CateringMenuClassListType_1.CateringMenuClassListTypeToJSON)(value.menuClassList),
        'menuId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.menuId),
    };
}
exports.CopyCateringMenuTypeToJSON = CopyCateringMenuTypeToJSON;
