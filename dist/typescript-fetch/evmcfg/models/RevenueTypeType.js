"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevenueTypeTypeToJSON = exports.RevenueTypeTypeFromJSONTyped = exports.RevenueTypeTypeFromJSON = exports.instanceOfRevenueTypeType = void 0;
const runtime_1 = require("../runtime");
const RevenueTypeDetailType_1 = require("./RevenueTypeDetailType");
const TranslationTextType200_1 = require("./TranslationTextType200");
/**
 * Check if a given object implements the RevenueTypeType interface.
 */
function instanceOfRevenueTypeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRevenueTypeType = instanceOfRevenueTypeType;
function RevenueTypeTypeFromJSON(json) {
    return RevenueTypeTypeFromJSONTyped(json, false);
}
exports.RevenueTypeTypeFromJSON = RevenueTypeTypeFromJSON;
function RevenueTypeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'translatableDescription': !(0, runtime_1.exists)(json, 'translatableDescription') ? undefined : (0, TranslationTextType200_1.TranslationTextType200FromJSON)(json['translatableDescription']),
        'displaySequence': !(0, runtime_1.exists)(json, 'displaySequence') ? undefined : json['displaySequence'],
        'revenueGroup': !(0, runtime_1.exists)(json, 'revenueGroup') ? undefined : json['revenueGroup'],
        'foodAndBeverage': !(0, runtime_1.exists)(json, 'foodAndBeverage') ? undefined : json['foodAndBeverage'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'revenueDetails': !(0, runtime_1.exists)(json, 'revenueDetails') ? undefined : (json['revenueDetails'].map(RevenueTypeDetailType_1.RevenueTypeDetailTypeFromJSON)),
    };
}
exports.RevenueTypeTypeFromJSONTyped = RevenueTypeTypeFromJSONTyped;
function RevenueTypeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'translatableDescription': (0, TranslationTextType200_1.TranslationTextType200ToJSON)(value.translatableDescription),
        'displaySequence': value.displaySequence,
        'revenueGroup': value.revenueGroup,
        'foodAndBeverage': value.foodAndBeverage,
        'inactive': value.inactive,
        'revenueDetails': value.revenueDetails === undefined ? undefined : (value.revenueDetails.map(RevenueTypeDetailType_1.RevenueTypeDetailTypeToJSON)),
    };
}
exports.RevenueTypeTypeToJSON = RevenueTypeTypeToJSON;
