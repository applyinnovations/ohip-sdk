"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringMenuInfoTypeToJSON = exports.CateringMenuInfoTypeFromJSONTyped = exports.CateringMenuInfoTypeFromJSON = exports.instanceOfCateringMenuInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const DateRangeType_1 = require("./DateRangeType");
const MenuTypeType_1 = require("./MenuTypeType");
const ServingType_1 = require("./ServingType");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the CateringMenuInfoType interface.
 */
function instanceOfCateringMenuInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringMenuInfoType = instanceOfCateringMenuInfoType;
function CateringMenuInfoTypeFromJSON(json) {
    return CateringMenuInfoTypeFromJSONTyped(json, false);
}
exports.CateringMenuInfoTypeFromJSON = CateringMenuInfoTypeFromJSON;
function CateringMenuInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'className': !(0, runtime_1.exists)(json, 'className') ? undefined : json['className'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['name']),
        'restriction': !(0, runtime_1.exists)(json, 'restriction') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['restriction']),
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['description']),
        'dietaryList': !(0, runtime_1.exists)(json, 'dietaryList') ? undefined : json['dietaryList'],
        'eventTypes': !(0, runtime_1.exists)(json, 'eventTypes') ? undefined : json['eventTypes'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, MenuTypeType_1.MenuTypeTypeFromJSON)(json['type']),
        'quickInsertCode': !(0, runtime_1.exists)(json, 'quickInsertCode') ? undefined : json['quickInsertCode'],
        'servingType': !(0, runtime_1.exists)(json, 'servingType') ? undefined : (0, ServingType_1.ServingTypeFromJSON)(json['servingType']),
        'servingSize': !(0, runtime_1.exists)(json, 'servingSize') ? undefined : json['servingSize'],
        'includedInMenu': !(0, runtime_1.exists)(json, 'includedInMenu') ? undefined : json['includedInMenu'],
        'consumptionBased': !(0, runtime_1.exists)(json, 'consumptionBased') ? undefined : json['consumptionBased'],
        'sellDateRange': !(0, runtime_1.exists)(json, 'sellDateRange') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['sellDateRange']),
        'eventDateRange': !(0, runtime_1.exists)(json, 'eventDateRange') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['eventDateRange']),
        'menusSold': !(0, runtime_1.exists)(json, 'menusSold') ? undefined : json['menusSold'],
        'webBookable': !(0, runtime_1.exists)(json, 'webBookable') ? undefined : json['webBookable'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'salesPrice': !(0, runtime_1.exists)(json, 'salesPrice') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['salesPrice']),
        'includedInPrice': !(0, runtime_1.exists)(json, 'includedInPrice') ? undefined : json['includedInPrice'],
        'multiChoice': !(0, runtime_1.exists)(json, 'multiChoice') ? undefined : json['multiChoice'],
        'courseCount': !(0, runtime_1.exists)(json, 'courseCount') ? undefined : json['courseCount'],
    };
}
exports.CateringMenuInfoTypeFromJSONTyped = CateringMenuInfoTypeFromJSONTyped;
function CateringMenuInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'className': value.className,
        'name': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.name),
        'restriction': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.restriction),
        'description': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.description),
        'dietaryList': value.dietaryList,
        'eventTypes': value.eventTypes,
        'type': (0, MenuTypeType_1.MenuTypeTypeToJSON)(value.type),
        'quickInsertCode': value.quickInsertCode,
        'servingType': (0, ServingType_1.ServingTypeToJSON)(value.servingType),
        'servingSize': value.servingSize,
        'includedInMenu': value.includedInMenu,
        'consumptionBased': value.consumptionBased,
        'sellDateRange': (0, DateRangeType_1.DateRangeTypeToJSON)(value.sellDateRange),
        'eventDateRange': (0, DateRangeType_1.DateRangeTypeToJSON)(value.eventDateRange),
        'menusSold': value.menusSold,
        'webBookable': value.webBookable,
        'inactive': value.inactive,
        'salesPrice': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.salesPrice),
        'includedInPrice': value.includedInPrice,
        'multiChoice': value.multiChoice,
        'courseCount': value.courseCount,
    };
}
exports.CateringMenuInfoTypeToJSON = CateringMenuInfoTypeToJSON;
