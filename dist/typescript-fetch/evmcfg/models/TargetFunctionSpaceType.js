"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetFunctionSpaceTypeToJSON = exports.TargetFunctionSpaceTypeFromJSONTyped = exports.TargetFunctionSpaceTypeFromJSON = exports.instanceOfTargetFunctionSpaceType = void 0;
const runtime_1 = require("../runtime");
const CodeListType_1 = require("./CodeListType");
/**
 * Check if a given object implements the TargetFunctionSpaceType interface.
 */
function instanceOfTargetFunctionSpaceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTargetFunctionSpaceType = instanceOfTargetFunctionSpaceType;
function TargetFunctionSpaceTypeFromJSON(json) {
    return TargetFunctionSpaceTypeFromJSONTyped(json, false);
}
exports.TargetFunctionSpaceTypeFromJSON = TargetFunctionSpaceTypeFromJSON;
function TargetFunctionSpaceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'comboElements': !(0, runtime_1.exists)(json, 'comboElements') ? undefined : (0, CodeListType_1.CodeListTypeFromJSON)(json['comboElements']),
        'orderBy1': !(0, runtime_1.exists)(json, 'orderBy1') ? undefined : json['orderBy1'],
        'orderBy2': !(0, runtime_1.exists)(json, 'orderBy2') ? undefined : json['orderBy2'],
        'orderBy3': !(0, runtime_1.exists)(json, 'orderBy3') ? undefined : json['orderBy3'],
        'shortName': !(0, runtime_1.exists)(json, 'shortName') ? undefined : json['shortName'],
        'spaceName': !(0, runtime_1.exists)(json, 'spaceName') ? undefined : json['spaceName'],
        'targetRoomNumber': !(0, runtime_1.exists)(json, 'targetRoomNumber') ? undefined : json['targetRoomNumber'],
    };
}
exports.TargetFunctionSpaceTypeFromJSONTyped = TargetFunctionSpaceTypeFromJSONTyped;
function TargetFunctionSpaceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'comboElements': (0, CodeListType_1.CodeListTypeToJSON)(value.comboElements),
        'orderBy1': value.orderBy1,
        'orderBy2': value.orderBy2,
        'orderBy3': value.orderBy3,
        'shortName': value.shortName,
        'spaceName': value.spaceName,
        'targetRoomNumber': value.targetRoomNumber,
    };
}
exports.TargetFunctionSpaceTypeToJSON = TargetFunctionSpaceTypeToJSON;
