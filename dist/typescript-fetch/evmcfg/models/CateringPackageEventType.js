"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CateringPackageEventTypeToJSON = exports.CateringPackageEventTypeFromJSONTyped = exports.CateringPackageEventTypeFromJSON = exports.instanceOfCateringPackageEventType = void 0;
const runtime_1 = require("../runtime");
const CateringPackageEventNoteType_1 = require("./CateringPackageEventNoteType");
const CateringPackageEventResourceType_1 = require("./CateringPackageEventResourceType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CateringPackageEventType interface.
 */
function instanceOfCateringPackageEventType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCateringPackageEventType = instanceOfCateringPackageEventType;
function CateringPackageEventTypeFromJSON(json) {
    return CateringPackageEventTypeFromJSONTyped(json, false);
}
exports.CateringPackageEventTypeFromJSON = CateringPackageEventTypeFromJSON;
function CateringPackageEventTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'alternate': !(0, runtime_1.exists)(json, 'alternate') ? undefined : json['alternate'],
        'dayOrder': !(0, runtime_1.exists)(json, 'dayOrder') ? undefined : json['dayOrder'],
        'eventName': !(0, runtime_1.exists)(json, 'eventName') ? undefined : json['eventName'],
        'eventTime': !(0, runtime_1.exists)(json, 'eventTime') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['eventTime']),
        'eventType': !(0, runtime_1.exists)(json, 'eventType') ? undefined : json['eventType'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['id']),
        'isMaster': !(0, runtime_1.exists)(json, 'isMaster') ? undefined : json['isMaster'],
        'isShareable': !(0, runtime_1.exists)(json, 'isShareable') ? undefined : json['isShareable'],
        'masterEventId': !(0, runtime_1.exists)(json, 'masterEventId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['masterEventId']),
        'notes': !(0, runtime_1.exists)(json, 'notes') ? undefined : (json['notes'].map(CateringPackageEventNoteType_1.CateringPackageEventNoteTypeFromJSON)),
        'resources': !(0, runtime_1.exists)(json, 'resources') ? undefined : (json['resources'].map(CateringPackageEventResourceType_1.CateringPackageEventResourceTypeFromJSON)),
        'room': !(0, runtime_1.exists)(json, 'room') ? undefined : json['room'],
        'roomRateCode': !(0, runtime_1.exists)(json, 'roomRateCode') ? undefined : json['roomRateCode'],
        'roomSetup': !(0, runtime_1.exists)(json, 'roomSetup') ? undefined : json['roomSetup'],
        'sub': !(0, runtime_1.exists)(json, 'sub') ? undefined : json['sub'],
    };
}
exports.CateringPackageEventTypeFromJSONTyped = CateringPackageEventTypeFromJSONTyped;
function CateringPackageEventTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'alternate': value.alternate,
        'dayOrder': value.dayOrder,
        'eventName': value.eventName,
        'eventTime': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.eventTime),
        'eventType': value.eventType,
        'id': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.id),
        'isMaster': value.isMaster,
        'isShareable': value.isShareable,
        'masterEventId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.masterEventId),
        'notes': value.notes === undefined ? undefined : (value.notes.map(CateringPackageEventNoteType_1.CateringPackageEventNoteTypeToJSON)),
        'resources': value.resources === undefined ? undefined : (value.resources.map(CateringPackageEventResourceType_1.CateringPackageEventResourceTypeToJSON)),
        'room': value.room,
        'roomRateCode': value.roomRateCode,
        'roomSetup': value.roomSetup,
        'sub': value.sub,
    };
}
exports.CateringPackageEventTypeToJSON = CateringPackageEventTypeToJSON;
