"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetItemClassesCriteriaEnum = exports.GetEventForecastsFetchInstructionsEnum = exports.GetCateringPackagesMultiPropertiesFetchInstructionsEnum = exports.GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum = exports.GetCateringPackagesFetchInstructionsEnum = exports.GetCateringPackagesPkgTmpltTypeEnum = exports.GetCateringPackageByChainFetchInstructionsEnum = exports.GetCateringPackageFetchInstructionsEnum = exports.GetCateringMenusFetchInstructionsEnum = exports.GetCateringMenusMenuTypesEnum = exports.GetCateringMenuItemClassesMenuTypesEnum = exports.GetCateringMenuFetchInstructionsEnum = exports.DeleteEventForecastsAmountTypeEnum = exports.ResourceConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ResourceConfigApi extends runtime.BaseAPI {
    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    checkDiscountAvailableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling checkDiscountAvailable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/discountAvailable/check`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CheckedDiscountAvailableFromJSON)(jsonValue));
        });
    }
    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    checkDiscountAvailable(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.checkDiscountAvailableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    copyCateringMenuItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClassesCode', 'Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling copyCateringMenuItemClasses.');
            }
            if (requestParameters.cateringMenuItemClassesCopy === null || requestParameters.cateringMenuItemClassesCopy === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClassesCopy', 'Required parameter requestParameters.cateringMenuItemClassesCopy was null or undefined when calling copyCateringMenuItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}/copy`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemClassesCopyToJSON)(requestParameters.cateringMenuItemClassesCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    copyCateringMenuItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCateringMenuItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    copyCateringMenuItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyCateringMenuItems.');
            }
            if (requestParameters.cateringMenuItemsCopy === null || requestParameters.cateringMenuItemsCopy === undefined) {
                throw new runtime.RequiredError('cateringMenuItemsCopy', 'Required parameter requestParameters.cateringMenuItemsCopy was null or undefined when calling copyCateringMenuItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItems/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemsCopyToJSON)(requestParameters.cateringMenuItemsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    copyCateringMenuItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCateringMenuItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    copyCateringMenusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
                throw new runtime.RequiredError('cateringMenuId', 'Required parameter requestParameters.cateringMenuId was null or undefined when calling copyCateringMenus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyCateringMenus.');
            }
            if (requestParameters.cateringMenusCopy === null || requestParameters.cateringMenusCopy === undefined) {
                throw new runtime.RequiredError('cateringMenusCopy', 'Required parameter requestParameters.cateringMenusCopy was null or undefined when calling copyCateringMenus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}/copy`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenusCopyToJSON)(requestParameters.cateringMenusCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    copyCateringMenus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCateringMenusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    copyEventForecastsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventForecastsCopy === null || requestParameters.eventForecastsCopy === undefined) {
                throw new runtime.RequiredError('eventForecastsCopy', 'Required parameter requestParameters.eventForecastsCopy was null or undefined when calling copyEventForecasts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/EventForecasts/copy`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventForecastsCopyToJSON)(requestParameters.eventForecastsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    copyEventForecasts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyEventForecastsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    copyInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
                throw new runtime.RequiredError('sourceHotelId', 'Required parameter requestParameters.sourceHotelId was null or undefined when calling copyInventoryItems.');
            }
            if (requestParameters.inventoryItemsCopy === null || requestParameters.inventoryItemsCopy === undefined) {
                throw new runtime.RequiredError('inventoryItemsCopy', 'Required parameter requestParameters.inventoryItemsCopy was null or undefined when calling copyInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{sourceHotelId}/inventoryItems/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InventoryItemsCopyToJSON)(requestParameters.inventoryItemsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    copyInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    copyItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemClassesCopy === null || requestParameters.itemClassesCopy === undefined) {
                throw new runtime.RequiredError('itemClassesCopy', 'Required parameter requestParameters.itemClassesCopy was null or undefined when calling copyItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemClasses/copy`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.itemClassesCopy.map(index_1.CopyConfigurationCodeTypeToJSON),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    copyItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    deleteCateringContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringContainersCode === null || requestParameters.cateringContainersCode === undefined) {
                throw new runtime.RequiredError('cateringContainersCode', 'Required parameter requestParameters.cateringContainersCode was null or undefined when calling deleteCateringContainers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringContainers/{cateringContainersCode}`.replace(`{${"cateringContainersCode"}}`, encodeURIComponent(String(requestParameters.cateringContainersCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    deleteCateringContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    deleteCateringItemRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringItemRatesCode === null || requestParameters.cateringItemRatesCode === undefined) {
                throw new runtime.RequiredError('cateringItemRatesCode', 'Required parameter requestParameters.cateringItemRatesCode was null or undefined when calling deleteCateringItemRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringItemRates/{cateringItemRatesCode}`.replace(`{${"cateringItemRatesCode"}}`, encodeURIComponent(String(requestParameters.cateringItemRatesCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    deleteCateringItemRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringItemRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    deleteCateringMenuClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.menuClassesId === null || requestParameters.menuClassesId === undefined) {
                throw new runtime.RequiredError('menuClassesId', 'Required parameter requestParameters.menuClassesId was null or undefined when calling deleteCateringMenuClasses.');
            }
            const queryParameters = {};
            if (requestParameters.menuClassListIDExtension) {
                queryParameters['menuClassListIDExtension'] = requestParameters.menuClassListIDExtension;
            }
            if (requestParameters.menuClassListIdContext) {
                queryParameters['menuClassListIdContext'] = requestParameters.menuClassListIdContext;
            }
            if (requestParameters.menuClassListUniqueIdType) {
                queryParameters['menuClassListUniqueIdType'] = requestParameters.menuClassListUniqueIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/menuClasses/{menuClassesId}/cateringMenuClasses`.replace(`{${"menuClassesId"}}`, encodeURIComponent(String(requestParameters.menuClassesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    deleteCateringMenuClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenuClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    deleteCateringMenuItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClassesCode', 'Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling deleteCateringMenuItemClasses.');
            }
            const queryParameters = {};
            if (requestParameters.menuItemClassesIdExtension) {
                queryParameters['menuItemClassesIdExtension'] = requestParameters.menuItemClassesIdExtension;
            }
            if (requestParameters.menuItemClassesIdContext) {
                queryParameters['menuItemClassesIdContext'] = requestParameters.menuItemClassesIdContext;
            }
            if (requestParameters.menuItemClassesUniqueIdType) {
                queryParameters['menuItemClassesUniqueIdType'] = requestParameters.menuItemClassesUniqueIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    deleteCateringMenuItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenuItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    deleteCateringMenuItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
                throw new runtime.RequiredError('cateringMenuItemId', 'Required parameter requestParameters.cateringMenuItemId was null or undefined when calling deleteCateringMenuItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenuItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    deleteCateringMenuItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenuItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    deleteCateringMenuItemsByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
                throw new runtime.RequiredError('cateringMenuItemId', 'Required parameter requestParameters.cateringMenuItemId was null or undefined when calling deleteCateringMenuItemsByChain.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    deleteCateringMenuItemsByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenuItemsByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    deleteCateringMenuMultiCoursesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.coursesId === null || requestParameters.coursesId === undefined) {
                throw new runtime.RequiredError('coursesId', 'Required parameter requestParameters.coursesId was null or undefined when calling deleteCateringMenuMultiCourses.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenuMultiCourses.');
            }
            const queryParameters = {};
            if (requestParameters.courseIdListUniqueIdExtension) {
                queryParameters['courseIdListUniqueIdExtension'] = requestParameters.courseIdListUniqueIdExtension;
            }
            if (requestParameters.courseIdListUniqueIdContext) {
                queryParameters['courseIdListUniqueIdContext'] = requestParameters.courseIdListUniqueIdContext;
            }
            if (requestParameters.courseIdListUniqueIdType) {
                queryParameters['courseIdListUniqueIdType'] = requestParameters.courseIdListUniqueIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/courses/{coursesId}/menuMultiCourses`.replace(`{${"coursesId"}}`, encodeURIComponent(String(requestParameters.coursesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    deleteCateringMenuMultiCourses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenuMultiCoursesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    deleteCateringMenusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
                throw new runtime.RequiredError('cateringMenuId', 'Required parameter requestParameters.cateringMenuId was null or undefined when calling deleteCateringMenus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    deleteCateringMenus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringMenusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    deleteCateringPackageEventNotesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.notedId === null || requestParameters.notedId === undefined) {
                throw new runtime.RequiredError('notedId', 'Required parameter requestParameters.notedId was null or undefined when calling deleteCateringPackageEventNotes.');
            }
            if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
                throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling deleteCateringPackageEventNotes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageEventNotes.');
            }
            const queryParameters = {};
            if (requestParameters.pkgEventIdExtension !== undefined) {
                queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
            }
            if (requestParameters.pkgEventIdContext !== undefined) {
                queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
            }
            if (requestParameters.pkgEventIdType !== undefined) {
                queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
            }
            if (requestParameters.noteIdExtension !== undefined) {
                queryParameters['noteIdExtension'] = requestParameters.noteIdExtension;
            }
            if (requestParameters.noteIdContext !== undefined) {
                queryParameters['noteIdContext'] = requestParameters.noteIdContext;
            }
            if (requestParameters.noteIdType !== undefined) {
                queryParameters['noteIdType'] = requestParameters.noteIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{eventId}/notes/{notedId}/cateringPackageEventNotes`.replace(`{${"notedId"}}`, encodeURIComponent(String(requestParameters.notedId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    deleteCateringPackageEventNotes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageEventNotesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    deleteCateringPackageEventsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageEventsId === null || requestParameters.packageEventsId === undefined) {
                throw new runtime.RequiredError('packageEventsId', 'Required parameter requestParameters.packageEventsId was null or undefined when calling deleteCateringPackageEvents.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageEvents.');
            }
            const queryParameters = {};
            if (requestParameters.pkgEventIdExtension !== undefined) {
                queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
            }
            if (requestParameters.pkgEventIdContext !== undefined) {
                queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
            }
            if (requestParameters.pkgEventIdType !== undefined) {
                queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageEvents/{packageEventsId}/cateringPackageEvents`.replace(`{${"packageEventsId"}}`, encodeURIComponent(String(requestParameters.packageEventsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    deleteCateringPackageEvents(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageEventsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    deleteCateringPackagePricesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pricesId === null || requestParameters.pricesId === undefined) {
                throw new runtime.RequiredError('pricesId', 'Required parameter requestParameters.pricesId was null or undefined when calling deleteCateringPackagePrices.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackagePrices.');
            }
            const queryParameters = {};
            if (requestParameters.packagPriceIdExtension !== undefined) {
                queryParameters['packagPriceIdExtension'] = requestParameters.packagPriceIdExtension;
            }
            if (requestParameters.packagPriceIdContext !== undefined) {
                queryParameters['packagPriceIdContext'] = requestParameters.packagPriceIdContext;
            }
            if (requestParameters.packagPriceIdType !== undefined) {
                queryParameters['packagPriceIdType'] = requestParameters.packagPriceIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packagePrices/{pricesId}/cateringPackagePrices`.replace(`{${"pricesId"}}`, encodeURIComponent(String(requestParameters.pricesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    deleteCateringPackagePrices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackagePricesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    deleteCateringPackageResourceNotesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.notesId === null || requestParameters.notesId === undefined) {
                throw new runtime.RequiredError('notesId', 'Required parameter requestParameters.notesId was null or undefined when calling deleteCateringPackageResourceNotes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageResourceNotes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/notes/{notesId}/cateringPackageResourceNotes`.replace(`{${"notesId"}}`, encodeURIComponent(String(requestParameters.notesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    deleteCateringPackageResourceNotes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageResourceNotesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    deleteCateringPackageResourcesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageResources.');
            }
            if (requestParameters.pkgEventId === null || requestParameters.pkgEventId === undefined) {
                throw new runtime.RequiredError('pkgEventId', 'Required parameter requestParameters.pkgEventId was null or undefined when calling deleteCateringPackageResources.');
            }
            if (requestParameters.pkgEventIdType === null || requestParameters.pkgEventIdType === undefined) {
                throw new runtime.RequiredError('pkgEventIdType', 'Required parameter requestParameters.pkgEventIdType was null or undefined when calling deleteCateringPackageResources.');
            }
            if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
                throw new runtime.RequiredError('resourceId', 'Required parameter requestParameters.resourceId was null or undefined when calling deleteCateringPackageResources.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.pkgEventId) {
                queryParameters['pkgEventId'] = requestParameters.pkgEventId;
            }
            if (requestParameters.pkgEventIdType) {
                queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
            }
            if (requestParameters.resourceId) {
                queryParameters['resourceId'] = requestParameters.resourceId;
            }
            if (requestParameters.pkgEventIdExtension !== undefined) {
                queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
            }
            if (requestParameters.pkgEventIdContext !== undefined) {
                queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
            }
            if (requestParameters.pkgEventType) {
                queryParameters['pkgEventType'] = requestParameters.pkgEventType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringPackageResources`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    deleteCateringPackageResources(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageResourcesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    deleteCateringPackageRevenuesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.priceId === null || requestParameters.priceId === undefined) {
                throw new runtime.RequiredError('priceId', 'Required parameter requestParameters.priceId was null or undefined when calling deleteCateringPackageRevenues.');
            }
            if (requestParameters.revenueType === null || requestParameters.revenueType === undefined) {
                throw new runtime.RequiredError('revenueType', 'Required parameter requestParameters.revenueType was null or undefined when calling deleteCateringPackageRevenues.');
            }
            if (requestParameters.eventsId === null || requestParameters.eventsId === undefined) {
                throw new runtime.RequiredError('eventsId', 'Required parameter requestParameters.eventsId was null or undefined when calling deleteCateringPackageRevenues.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageRevenues.');
            }
            const queryParameters = {};
            if (requestParameters.packagePriceIdExtension !== undefined) {
                queryParameters['packagePriceIdExtension'] = requestParameters.packagePriceIdExtension;
            }
            if (requestParameters.packagePriceIdContext !== undefined) {
                queryParameters['packagePriceIdContext'] = requestParameters.packagePriceIdContext;
            }
            if (requestParameters.packagePriceIdType !== undefined) {
                queryParameters['packagePriceIdType'] = requestParameters.packagePriceIdType;
            }
            if (requestParameters.eventIdExtension !== undefined) {
                queryParameters['eventIdExtension'] = requestParameters.eventIdExtension;
            }
            if (requestParameters.eventIdContext !== undefined) {
                queryParameters['eventIdContext'] = requestParameters.eventIdContext;
            }
            if (requestParameters.eventIdType !== undefined) {
                queryParameters['eventIdType'] = requestParameters.eventIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/events/{eventsId}/revenues/{revenueType}/packages/{priceId}/cateringPackageRevenues`.replace(`{${"priceId"}}`, encodeURIComponent(String(requestParameters.priceId))).replace(`{${"revenueType"}}`, encodeURIComponent(String(requestParameters.revenueType))).replace(`{${"eventsId"}}`, encodeURIComponent(String(requestParameters.eventsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    deleteCateringPackageRevenues(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackageRevenuesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    deleteCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling deleteCateringPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    deleteCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    deleteEventForecastsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventTypesCode === null || requestParameters.eventTypesCode === undefined) {
                throw new runtime.RequiredError('eventTypesCode', 'Required parameter requestParameters.eventTypesCode was null or undefined when calling deleteEventForecasts.');
            }
            if (requestParameters.forecastsId === null || requestParameters.forecastsId === undefined) {
                throw new runtime.RequiredError('forecastsId', 'Required parameter requestParameters.forecastsId was null or undefined when calling deleteEventForecasts.');
            }
            const queryParameters = {};
            if (requestParameters.forecastIdExtension !== undefined) {
                queryParameters['forecastIdExtension'] = requestParameters.forecastIdExtension;
            }
            if (requestParameters.forecastIdContext !== undefined) {
                queryParameters['forecastIdContext'] = requestParameters.forecastIdContext;
            }
            if (requestParameters.forecastIdType !== undefined) {
                queryParameters['forecastIdType'] = requestParameters.forecastIdType;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.revenueTypeCode !== undefined) {
                queryParameters['revenueTypeCode'] = requestParameters.revenueTypeCode;
            }
            if (requestParameters.revenueTypeDescription !== undefined) {
                queryParameters['revenueTypeDescription'] = requestParameters.revenueTypeDescription;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.amountType) {
                queryParameters['amountType'] = requestParameters.amountType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventForecasts/{forecastsId}/eventTypes/{eventTypesCode}/eventForecasts`.replace(`{${"eventTypesCode"}}`, encodeURIComponent(String(requestParameters.eventTypesCode))).replace(`{${"forecastsId"}}`, encodeURIComponent(String(requestParameters.forecastsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    deleteEventForecasts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteEventForecastsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    deleteInventoryItemTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
                throw new runtime.RequiredError('inventoryItemId', 'Required parameter requestParameters.inventoryItemId was null or undefined when calling deleteInventoryItemTemplates.');
            }
            const queryParameters = {};
            if (requestParameters.inventoryItemTemplatesIdExtension) {
                queryParameters['inventoryItemTemplatesIdExtension'] = requestParameters.inventoryItemTemplatesIdExtension;
            }
            if (requestParameters.inventoryItemTemplatesContext) {
                queryParameters['inventoryItemTemplatesContext'] = requestParameters.inventoryItemTemplatesContext;
            }
            if (requestParameters.inventoryItemTemplatesType) {
                queryParameters['inventoryItemTemplatesType'] = requestParameters.inventoryItemTemplatesType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    deleteInventoryItemTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteInventoryItemTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    deleteInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
                throw new runtime.RequiredError('inventoryItemId', 'Required parameter requestParameters.inventoryItemId was null or undefined when calling deleteInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteInventoryItems.');
            }
            const queryParameters = {};
            if (requestParameters.itemIDExtension !== undefined) {
                queryParameters['itemIDExtension'] = requestParameters.itemIDExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.itemIDType !== undefined) {
                queryParameters['itemIDType'] = requestParameters.itemIDType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    deleteInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    deleteItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemClassesCode === null || requestParameters.itemClassesCode === undefined) {
                throw new runtime.RequiredError('itemClassesCode', 'Required parameter requestParameters.itemClassesCode was null or undefined when calling deleteItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemClasses/{itemClassesCode}`.replace(`{${"itemClassesCode"}}`, encodeURIComponent(String(requestParameters.itemClassesCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    deleteItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    deleteItemPoolsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemPoolsCode === null || requestParameters.itemPoolsCode === undefined) {
                throw new runtime.RequiredError('itemPoolsCode', 'Required parameter requestParameters.itemPoolsCode was null or undefined when calling deleteItemPools.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteItemPools.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/itemPools/{itemPoolsCode}/itemPools`.replace(`{${"itemPoolsCode"}}`, encodeURIComponent(String(requestParameters.itemPoolsCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    deleteItemPools(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteItemPoolsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    deleteRevenueGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.revenueGroupsCode === null || requestParameters.revenueGroupsCode === undefined) {
                throw new runtime.RequiredError('revenueGroupsCode', 'Required parameter requestParameters.revenueGroupsCode was null or undefined when calling deleteRevenueGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueGroups/{revenueGroupsCode}`.replace(`{${"revenueGroupsCode"}}`, encodeURIComponent(String(requestParameters.revenueGroupsCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    deleteRevenueGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRevenueGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    getCateringContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringContainers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringContainersInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    getCateringContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    getCateringItemRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringItemRates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringItemRatesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    getCateringItemRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringItemRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    getCateringMenuRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
                throw new runtime.RequiredError('cateringMenuId', 'Required parameter requestParameters.cateringMenuId was null or undefined when calling getCateringMenu.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenu.');
            }
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringMenusInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    getCateringMenu(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringMenuRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    getCateringMenuClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuClasses.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.className !== undefined) {
                queryParameters['className'] = requestParameters.className;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.includeMenus !== undefined) {
                queryParameters['includeMenus'] = requestParameters.includeMenus;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringMenuClassesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    getCateringMenuClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringMenuClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    getCateringMenuItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuItemClasses.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.className !== undefined) {
                queryParameters['className'] = requestParameters.className;
            }
            if (requestParameters.menuTypes) {
                queryParameters['menuTypes'] = requestParameters.menuTypes;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.includeMenuItems !== undefined) {
                queryParameters['includeMenuItems'] = requestParameters.includeMenuItems;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItemClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringMenuItemClassesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    getCateringMenuItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringMenuItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    getCateringMenuItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuItems.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.quickInsertCode !== undefined) {
                queryParameters['quickInsertCode'] = requestParameters.quickInsertCode;
            }
            if (requestParameters.listTypeCodes) {
                queryParameters['listTypeCodes'] = requestParameters.listTypeCodes;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.eventTypesCodes) {
                queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringMenuItemsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    getCateringMenuItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringMenuItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    getCateringMenusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenus.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.menuId !== undefined) {
                queryParameters['menuId'] = requestParameters.menuId;
            }
            if (requestParameters.iDExtension !== undefined) {
                queryParameters['iDExtension'] = requestParameters.iDExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.menuIDType !== undefined) {
                queryParameters['menuIDType'] = requestParameters.menuIDType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.classNameListCodes) {
                queryParameters['classNameListCodes'] = requestParameters.classNameListCodes;
            }
            if (requestParameters.eventTypesCodes) {
                queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
            }
            if (requestParameters.menuTypes) {
                queryParameters['menuTypes'] = requestParameters.menuTypes;
            }
            if (requestParameters.dietaryListCodes) {
                queryParameters['dietaryListCodes'] = requestParameters.dietaryListCodes;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.multiChoice !== undefined) {
                queryParameters['multiChoice'] = requestParameters.multiChoice;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringMenusInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    getCateringMenus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringMenusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    getCateringPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling getCateringPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringPackage.');
            }
            const queryParameters = {};
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.pkgIDType !== undefined) {
                queryParameters['pkgIDType'] = requestParameters.pkgIDType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackageFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    getCateringPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    getCateringPackageByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling getCateringPackageByChain.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.pkgIDType !== undefined) {
                queryParameters['pkgIDType'] = requestParameters.pkgIDType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackageFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    getCateringPackageByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackageByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    getCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCateringPackages.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.pkgTmpltType !== undefined) {
                queryParameters['pkgTmpltType'] = requestParameters.pkgTmpltType;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.priceCode !== undefined) {
                queryParameters['priceCode'] = requestParameters.priceCode;
            }
            if (requestParameters.minAttendees !== undefined) {
                queryParameters['minAttendees'] = requestParameters.minAttendees;
            }
            if (requestParameters.maxAttendees !== undefined) {
                queryParameters['maxAttendees'] = requestParameters.maxAttendees;
            }
            if (requestParameters.sellDate !== undefined) {
                queryParameters['sellDate'] = requestParameters.sellDate;
            }
            if (requestParameters.startDateTime !== undefined) {
                queryParameters['startDateTime'] = requestParameters.startDateTime;
            }
            if (requestParameters.endDateTime !== undefined) {
                queryParameters['endDateTime'] = requestParameters.endDateTime;
            }
            if (requestParameters.bookingType !== undefined) {
                queryParameters['bookingType'] = requestParameters.bookingType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringPackages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackagesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    getCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    getCateringPackagesMultiPropertiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.pkgTmpltType !== undefined) {
                queryParameters['pkgTmpltType'] = requestParameters.pkgTmpltType;
            }
            if (requestParameters.marketCode !== undefined) {
                queryParameters['marketCode'] = requestParameters.marketCode;
            }
            if (requestParameters.priceCode !== undefined) {
                queryParameters['priceCode'] = requestParameters.priceCode;
            }
            if (requestParameters.minAttendees !== undefined) {
                queryParameters['minAttendees'] = requestParameters.minAttendees;
            }
            if (requestParameters.maxAttendees !== undefined) {
                queryParameters['maxAttendees'] = requestParameters.maxAttendees;
            }
            if (requestParameters.sellDate !== undefined) {
                queryParameters['sellDate'] = requestParameters.sellDate;
            }
            if (requestParameters.startDateTime !== undefined) {
                queryParameters['startDateTime'] = requestParameters.startDateTime;
            }
            if (requestParameters.endDateTime !== undefined) {
                queryParameters['endDateTime'] = requestParameters.endDateTime;
            }
            if (requestParameters.bookingType !== undefined) {
                queryParameters['bookingType'] = requestParameters.bookingType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringPackages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringPackagesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    getCateringPackagesMultiProperties(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringPackagesMultiPropertiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    getCateringServingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.servingCodes) {
                queryParameters['servingCodes'] = requestParameters.servingCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringServings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringServingsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    getCateringServings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringServingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    getDailyInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDailyInventoryItems.');
            }
            const queryParameters = {};
            if (requestParameters.itemClassCode !== undefined) {
                queryParameters['itemClassCode'] = requestParameters.itemClassCode;
            }
            if (requestParameters.itemName !== undefined) {
                queryParameters['itemName'] = requestParameters.itemName;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/dailyInventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DailyInventoryItemsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    getDailyInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDailyInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    getEventForecastsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEventForecasts.');
            }
            if (requestParameters.fetchInstructions === null || requestParameters.fetchInstructions === undefined) {
                throw new runtime.RequiredError('fetchInstructions', 'Required parameter requestParameters.fetchInstructions was null or undefined when calling getEventForecasts.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.eventTypeCodes) {
                queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
            }
            if (requestParameters.eventTypeWildCard !== undefined) {
                queryParameters['eventTypeWildCard'] = requestParameters.eventTypeWildCard;
            }
            if (requestParameters.revenueTypeCodes) {
                queryParameters['revenueTypeCodes'] = requestParameters.revenueTypeCodes;
            }
            if (requestParameters.revenueTypeWildCard !== undefined) {
                queryParameters['revenueTypeWildCard'] = requestParameters.revenueTypeWildCard;
            }
            if (requestParameters.eventDate !== undefined) {
                queryParameters['eventDate'] = requestParameters.eventDate;
            }
            if (requestParameters.blockTypeCodes) {
                queryParameters['blockTypeCodes'] = requestParameters.blockTypeCodes;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventForecasts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventForecastsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    getEventForecasts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventForecastsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    getInventoryItemTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.inventoryItemTemplateName !== undefined) {
                queryParameters['inventoryItemTemplateName'] = requestParameters.inventoryItemTemplateName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/inventoryItems`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InventoryItemTemplatesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    getInventoryItemTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInventoryItemTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    getInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getInventoryItems.');
            }
            const queryParameters = {};
            if (requestParameters.itemClassCode !== undefined) {
                queryParameters['itemClassCode'] = requestParameters.itemClassCode;
            }
            if (requestParameters.itemName !== undefined) {
                queryParameters['itemName'] = requestParameters.itemName;
            }
            if (requestParameters.itemCode !== undefined) {
                queryParameters['itemCode'] = requestParameters.itemCode;
            }
            if (requestParameters.eventTypecodes) {
                queryParameters['eventTypecodes'] = requestParameters.eventTypecodes;
            }
            if (requestParameters.usedForEvents !== undefined) {
                queryParameters['usedForEvents'] = requestParameters.usedForEvents;
            }
            if (requestParameters.includeItemsFromTemplates !== undefined) {
                queryParameters['includeItemsFromTemplates'] = requestParameters.includeItemsFromTemplates;
            }
            if (requestParameters.startDateTime !== undefined) {
                queryParameters['startDateTime'] = requestParameters.startDateTime;
            }
            if (requestParameters.endDateTime !== undefined) {
                queryParameters['endDateTime'] = requestParameters.endDateTime;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/inventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InventoryItemsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    getInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    getItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.itemClassesCode) {
                queryParameters['itemClassesCode'] = requestParameters.itemClassesCode.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.criteria !== undefined) {
                queryParameters['criteria'] = requestParameters.criteria;
            }
            if (requestParameters.classId !== undefined) {
                queryParameters['classId'] = requestParameters.classId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemClasses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ItemClassesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    getItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    getItemPoolsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getItemPools.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.itemClasseCodes) {
                queryParameters['itemClasseCodes'] = requestParameters.itemClasseCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.itemPoolCodes) {
                queryParameters['itemPoolCodes'] = requestParameters.itemPoolCodes;
            }
            if (requestParameters.itemPoolsWildCard !== undefined) {
                queryParameters['itemPoolsWildCard'] = requestParameters.itemPoolsWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/itemPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ItemPoolsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    getItemPools(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getItemPoolsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    getRevenueGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.revenueGroupCodes) {
                queryParameters['revenueGroupCodes'] = requestParameters.revenueGroupCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.includeRevenueType !== undefined) {
                queryParameters['includeRevenueType'] = requestParameters.includeRevenueType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RevenueGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    getRevenueGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRevenueGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    getRevenueTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.revenueGroupCodes) {
                queryParameters['revenueGroupCodes'] = requestParameters.revenueGroupCodes;
            }
            if (requestParameters.revenueGroupWildCard !== undefined) {
                queryParameters['revenueGroupWildCard'] = requestParameters.revenueGroupWildCard;
            }
            if (requestParameters.revenueTypeCodes) {
                queryParameters['revenueTypeCodes'] = requestParameters.revenueTypeCodes;
            }
            if (requestParameters.revenueTypeWildCard !== undefined) {
                queryParameters['revenueTypeWildCard'] = requestParameters.revenueTypeWildCard;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeRevenueTypeDetail !== undefined) {
                queryParameters['includeRevenueTypeDetail'] = requestParameters.includeRevenueTypeDetail;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RevenueTypesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    getRevenueTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRevenueTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    postCateringContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringContainers === null || requestParameters.cateringContainers === undefined) {
                throw new runtime.RequiredError('cateringContainers', 'Required parameter requestParameters.cateringContainers was null or undefined when calling postCateringContainers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringContainers`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringContainersToJSON)(requestParameters.cateringContainers),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    postCateringContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    postCateringItemRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringItemRates === null || requestParameters.cateringItemRates === undefined) {
                throw new runtime.RequiredError('cateringItemRates', 'Required parameter requestParameters.cateringItemRates was null or undefined when calling postCateringItemRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringItemRates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringItemRatesToJSON)(requestParameters.cateringItemRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    postCateringItemRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringItemRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    postCateringMenuClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuClasses === null || requestParameters.cateringMenuClasses === undefined) {
                throw new runtime.RequiredError('cateringMenuClasses', 'Required parameter requestParameters.cateringMenuClasses was null or undefined when calling postCateringMenuClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuClasses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuClassesToJSON)(requestParameters.cateringMenuClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    postCateringMenuClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringMenuClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    postCateringMenuItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemClasses === null || requestParameters.cateringMenuItemClasses === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClasses', 'Required parameter requestParameters.cateringMenuItemClasses was null or undefined when calling postCateringMenuItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuItemClasses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemClassesToJSON)(requestParameters.cateringMenuItemClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    postCateringMenuItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringMenuItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    postCateringMenuItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCateringMenuItems.');
            }
            if (requestParameters.cateringMenuItems === null || requestParameters.cateringMenuItems === undefined) {
                throw new runtime.RequiredError('cateringMenuItems', 'Required parameter requestParameters.cateringMenuItems was null or undefined when calling postCateringMenuItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemsToJSON)(requestParameters.cateringMenuItems),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    postCateringMenuItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringMenuItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    postCateringMenusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCateringMenus.');
            }
            if (requestParameters.cateringMenus === null || requestParameters.cateringMenus === undefined) {
                throw new runtime.RequiredError('cateringMenus', 'Required parameter requestParameters.cateringMenus was null or undefined when calling postCateringMenus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenusToJSON)(requestParameters.cateringMenus),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    postCateringMenus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringMenusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    postCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCateringPackages.');
            }
            if (requestParameters.cateringPackages === null || requestParameters.cateringPackages === undefined) {
                throw new runtime.RequiredError('cateringPackages', 'Required parameter requestParameters.cateringPackages was null or undefined when calling postCateringPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringPackages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringPackagesToJSON)(requestParameters.cateringPackages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    postCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    postEventForecastsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventForecasts === null || requestParameters.eventForecasts === undefined) {
                throw new runtime.RequiredError('eventForecasts', 'Required parameter requestParameters.eventForecasts was null or undefined when calling postEventForecasts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventForecasts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventForecastsToJSON)(requestParameters.eventForecasts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    postEventForecasts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEventForecastsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    postInventoryItemTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.inventoryItemTemplates === null || requestParameters.inventoryItemTemplates === undefined) {
                throw new runtime.RequiredError('inventoryItemTemplates', 'Required parameter requestParameters.inventoryItemTemplates was null or undefined when calling postInventoryItemTemplates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/inventoryItems`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InventoryItemTemplatesToJSON)(requestParameters.inventoryItemTemplates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    postInventoryItemTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postInventoryItemTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    postInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postInventoryItems.');
            }
            if (requestParameters.inventoryItems === null || requestParameters.inventoryItems === undefined) {
                throw new runtime.RequiredError('inventoryItems', 'Required parameter requestParameters.inventoryItems was null or undefined when calling postInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/inventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InventoryItemsToJSON)(requestParameters.inventoryItems),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InventoryItemsCreatedFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    postInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    postItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemClasses === null || requestParameters.itemClasses === undefined) {
                throw new runtime.RequiredError('itemClasses', 'Required parameter requestParameters.itemClasses was null or undefined when calling postItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemClasses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ItemClassesToJSON)(requestParameters.itemClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    postItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    postItemPoolsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemPools === null || requestParameters.itemPools === undefined) {
                throw new runtime.RequiredError('itemPools', 'Required parameter requestParameters.itemPools was null or undefined when calling postItemPools.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemPools`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ItemPoolsToJSON)(requestParameters.itemPools),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    postItemPools(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postItemPoolsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    postRevenueGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.revenueGroups === null || requestParameters.revenueGroups === undefined) {
                throw new runtime.RequiredError('revenueGroups', 'Required parameter requestParameters.revenueGroups was null or undefined when calling postRevenueGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RevenueGroupsToJSON)(requestParameters.revenueGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    postRevenueGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRevenueGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    postRevenueTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.revenueTypes === null || requestParameters.revenueTypes === undefined) {
                throw new runtime.RequiredError('revenueTypes', 'Required parameter requestParameters.revenueTypes was null or undefined when calling postRevenueTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RevenueTypesToJSON)(requestParameters.revenueTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    postRevenueTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRevenueTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    putCateringContainersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringContainersCode === null || requestParameters.cateringContainersCode === undefined) {
                throw new runtime.RequiredError('cateringContainersCode', 'Required parameter requestParameters.cateringContainersCode was null or undefined when calling putCateringContainers.');
            }
            if (requestParameters.cateringContainers === null || requestParameters.cateringContainers === undefined) {
                throw new runtime.RequiredError('cateringContainers', 'Required parameter requestParameters.cateringContainers was null or undefined when calling putCateringContainers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringContainers/{cateringContainersCode}`.replace(`{${"cateringContainersCode"}}`, encodeURIComponent(String(requestParameters.cateringContainersCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringContainersToJSON)(requestParameters.cateringContainers),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    putCateringContainers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringContainersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    putCateringItemRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringItemRatesCode === null || requestParameters.cateringItemRatesCode === undefined) {
                throw new runtime.RequiredError('cateringItemRatesCode', 'Required parameter requestParameters.cateringItemRatesCode was null or undefined when calling putCateringItemRates.');
            }
            if (requestParameters.cateringItemRates === null || requestParameters.cateringItemRates === undefined) {
                throw new runtime.RequiredError('cateringItemRates', 'Required parameter requestParameters.cateringItemRates was null or undefined when calling putCateringItemRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringItemRates/{cateringItemRatesCode}`.replace(`{${"cateringItemRatesCode"}}`, encodeURIComponent(String(requestParameters.cateringItemRatesCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringItemRatesToJSON)(requestParameters.cateringItemRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    putCateringItemRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringItemRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    putCateringMenuClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuClasses === null || requestParameters.cateringMenuClasses === undefined) {
                throw new runtime.RequiredError('cateringMenuClasses', 'Required parameter requestParameters.cateringMenuClasses was null or undefined when calling putCateringMenuClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuClasses`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuClassesToJSON)(requestParameters.cateringMenuClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    putCateringMenuClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringMenuClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    putCateringMenuItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClassesCode', 'Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling putCateringMenuItemClasses.');
            }
            if (requestParameters.cateringMenuItemClasses === null || requestParameters.cateringMenuItemClasses === undefined) {
                throw new runtime.RequiredError('cateringMenuItemClasses', 'Required parameter requestParameters.cateringMenuItemClasses was null or undefined when calling putCateringMenuItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemClassesToJSON)(requestParameters.cateringMenuItemClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    putCateringMenuItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringMenuItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    putCateringMenuItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
                throw new runtime.RequiredError('cateringMenuItemId', 'Required parameter requestParameters.cateringMenuItemId was null or undefined when calling putCateringMenuItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCateringMenuItems.');
            }
            if (requestParameters.cateringMenuItems === null || requestParameters.cateringMenuItems === undefined) {
                throw new runtime.RequiredError('cateringMenuItems', 'Required parameter requestParameters.cateringMenuItems was null or undefined when calling putCateringMenuItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenuItemsToJSON)(requestParameters.cateringMenuItems),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    putCateringMenuItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringMenuItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    putCateringMenusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
                throw new runtime.RequiredError('cateringMenuId', 'Required parameter requestParameters.cateringMenuId was null or undefined when calling putCateringMenus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCateringMenus.');
            }
            if (requestParameters.cateringMenus === null || requestParameters.cateringMenus === undefined) {
                throw new runtime.RequiredError('cateringMenus', 'Required parameter requestParameters.cateringMenus was null or undefined when calling putCateringMenus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringMenusToJSON)(requestParameters.cateringMenus),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    putCateringMenus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringMenusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    putCateringPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
                throw new runtime.RequiredError('cateringPackageId', 'Required parameter requestParameters.cateringPackageId was null or undefined when calling putCateringPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCateringPackages.');
            }
            if (requestParameters.cateringPackages === null || requestParameters.cateringPackages === undefined) {
                throw new runtime.RequiredError('cateringPackages', 'Required parameter requestParameters.cateringPackages was null or undefined when calling putCateringPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringPackagesToJSON)(requestParameters.cateringPackages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    putCateringPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    putCateringServingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringServingsCode === null || requestParameters.cateringServingsCode === undefined) {
                throw new runtime.RequiredError('cateringServingsCode', 'Required parameter requestParameters.cateringServingsCode was null or undefined when calling putCateringServings.');
            }
            if (requestParameters.cateringServings === null || requestParameters.cateringServings === undefined) {
                throw new runtime.RequiredError('cateringServings', 'Required parameter requestParameters.cateringServings was null or undefined when calling putCateringServings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cateringServings/{cateringServingsCode}`.replace(`{${"cateringServingsCode"}}`, encodeURIComponent(String(requestParameters.cateringServingsCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringServingsToJSON)(requestParameters.cateringServings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    putCateringServings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCateringServingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    putEventForecastsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventForecasts === null || requestParameters.eventForecasts === undefined) {
                throw new runtime.RequiredError('eventForecasts', 'Required parameter requestParameters.eventForecasts was null or undefined when calling putEventForecasts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventForecasts`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventForecastsToJSON)(requestParameters.eventForecasts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    putEventForecasts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putEventForecastsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    putInventoryItemTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
                throw new runtime.RequiredError('inventoryItemId', 'Required parameter requestParameters.inventoryItemId was null or undefined when calling putInventoryItemTemplates.');
            }
            if (requestParameters.inventoryItemTemplates === null || requestParameters.inventoryItemTemplates === undefined) {
                throw new runtime.RequiredError('inventoryItemTemplates', 'Required parameter requestParameters.inventoryItemTemplates was null or undefined when calling putInventoryItemTemplates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InventoryItemTemplatesToJSON)(requestParameters.inventoryItemTemplates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    putInventoryItemTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putInventoryItemTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    putInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
                throw new runtime.RequiredError('inventoryItemId', 'Required parameter requestParameters.inventoryItemId was null or undefined when calling putInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putInventoryItems.');
            }
            if (requestParameters.inventoryItems === null || requestParameters.inventoryItems === undefined) {
                throw new runtime.RequiredError('inventoryItems', 'Required parameter requestParameters.inventoryItems was null or undefined when calling putInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.InventoryItemsToJSON)(requestParameters.inventoryItems),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    putInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    putItemClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemClassesCode === null || requestParameters.itemClassesCode === undefined) {
                throw new runtime.RequiredError('itemClassesCode', 'Required parameter requestParameters.itemClassesCode was null or undefined when calling putItemClasses.');
            }
            if (requestParameters.itemClasses === null || requestParameters.itemClasses === undefined) {
                throw new runtime.RequiredError('itemClasses', 'Required parameter requestParameters.itemClasses was null or undefined when calling putItemClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemClasses/{itemClassesCode}`.replace(`{${"itemClassesCode"}}`, encodeURIComponent(String(requestParameters.itemClassesCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ItemClassesToJSON)(requestParameters.itemClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    putItemClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putItemClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    putItemPoolsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.itemPoolsCode === null || requestParameters.itemPoolsCode === undefined) {
                throw new runtime.RequiredError('itemPoolsCode', 'Required parameter requestParameters.itemPoolsCode was null or undefined when calling putItemPools.');
            }
            if (requestParameters.itemPools === null || requestParameters.itemPools === undefined) {
                throw new runtime.RequiredError('itemPools', 'Required parameter requestParameters.itemPools was null or undefined when calling putItemPools.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/itemPools/{itemPoolsCode}`.replace(`{${"itemPoolsCode"}}`, encodeURIComponent(String(requestParameters.itemPoolsCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ItemPoolsToJSON)(requestParameters.itemPools),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    putItemPools(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putItemPoolsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    putRevenueGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.revenueGroupsCode === null || requestParameters.revenueGroupsCode === undefined) {
                throw new runtime.RequiredError('revenueGroupsCode', 'Required parameter requestParameters.revenueGroupsCode was null or undefined when calling putRevenueGroups.');
            }
            if (requestParameters.revenueGroups === null || requestParameters.revenueGroups === undefined) {
                throw new runtime.RequiredError('revenueGroups', 'Required parameter requestParameters.revenueGroups was null or undefined when calling putRevenueGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueGroups/{revenueGroupsCode}`.replace(`{${"revenueGroupsCode"}}`, encodeURIComponent(String(requestParameters.revenueGroupsCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RevenueGroupsToJSON)(requestParameters.revenueGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    putRevenueGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRevenueGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    putRevenueTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.revenueTypesId === null || requestParameters.revenueTypesId === undefined) {
                throw new runtime.RequiredError('revenueTypesId', 'Required parameter requestParameters.revenueTypesId was null or undefined when calling putRevenueTypes.');
            }
            if (requestParameters.revenueTypes === null || requestParameters.revenueTypes === undefined) {
                throw new runtime.RequiredError('revenueTypes', 'Required parameter requestParameters.revenueTypes was null or undefined when calling putRevenueTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/revenueTypes/{revenueTypesId}`.replace(`{${"revenueTypesId"}}`, encodeURIComponent(String(requestParameters.revenueTypesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RevenueTypesToJSON)(requestParameters.revenueTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    putRevenueTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRevenueTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ResourceConfigApi = ResourceConfigApi;
/**
 * @export
 */
exports.DeleteEventForecastsAmountTypeEnum = {
    FlatAmount: 'FlatAmount',
    PerPerson: 'PerPerson'
};
/**
 * @export
 */
exports.GetCateringMenuFetchInstructionsEnum = {
    Revenue: 'Revenue',
    MenuDetails: 'MenuDetails',
    MenuNotes: 'MenuNotes'
};
/**
 * @export
 */
exports.GetCateringMenuItemClassesMenuTypesEnum = {
    Food: 'Food',
    Beverage: 'Beverage'
};
/**
 * @export
 */
exports.GetCateringMenusMenuTypesEnum = {
    Food: 'Food',
    Beverage: 'Beverage'
};
/**
 * @export
 */
exports.GetCateringMenusFetchInstructionsEnum = {
    Revenue: 'Revenue',
    MenuDetails: 'MenuDetails',
    MenuNotes: 'MenuNotes'
};
/**
 * @export
 */
exports.GetCateringPackageFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
};
/**
 * @export
 */
exports.GetCateringPackageByChainFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
};
/**
 * @export
 */
exports.GetCateringPackagesPkgTmpltTypeEnum = {
    Packages: 'Packages',
    Templates: 'Templates',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetCateringPackagesFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
};
/**
 * @export
 */
exports.GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum = {
    Packages: 'Packages',
    Templates: 'Templates',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetCateringPackagesMultiPropertiesFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
};
/**
 * @export
 */
exports.GetEventForecastsFetchInstructionsEnum = {
    ForecastInfo: 'ForecastInfo',
    RevenueDetails: 'RevenueDetails'
};
/**
 * @export
 */
exports.GetItemClassesCriteriaEnum = {
    Reservation: 'Reservation',
    Events: 'Events',
    ReservationAndEvents: 'ReservationAndEvents'
};
