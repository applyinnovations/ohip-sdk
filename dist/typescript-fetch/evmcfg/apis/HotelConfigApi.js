"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFunctionSpacesSortingByEnum = exports.HotelConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class HotelConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to update Catering s Rental Codes. <p><strong>OperationId:</strong>changeCateringRentalCodes</p>
     * Change Catering s Rental Codes
     */
    changeCateringRentalCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringRentalId === null || requestParameters.cateringRentalId === undefined) {
                throw new runtime.RequiredError('cateringRentalId', 'Required parameter requestParameters.cateringRentalId was null or undefined when calling changeCateringRentalCodes.');
            }
            if (requestParameters.cateringRentalCodesToBeChanged === null || requestParameters.cateringRentalCodesToBeChanged === undefined) {
                throw new runtime.RequiredError('cateringRentalCodesToBeChanged', 'Required parameter requestParameters.cateringRentalCodesToBeChanged was null or undefined when calling changeCateringRentalCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionSpaceRentalCodes/{cateringRentalId}`.replace(`{${"cateringRentalId"}}`, encodeURIComponent(String(requestParameters.cateringRentalId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringRentalCodesToBeChangedToJSON)(requestParameters.cateringRentalCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Catering s Rental Codes. <p><strong>OperationId:</strong>changeCateringRentalCodes</p>
     * Change Catering s Rental Codes
     */
    changeCateringRentalCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCateringRentalCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Hotel Event Codes. <p><strong>OperationId:</strong>changeEventCodes</p>
     * Change Hotel Event Codes
     */
    changeEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeEventCodes.');
            }
            if (requestParameters.eventCodesToBeChanged === null || requestParameters.eventCodesToBeChanged === undefined) {
                throw new runtime.RequiredError('eventCodesToBeChanged', 'Required parameter requestParameters.eventCodesToBeChanged was null or undefined when calling changeEventCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventCodesToBeChangedToJSON)(requestParameters.eventCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Hotel Event Codes. <p><strong>OperationId:</strong>changeEventCodes</p>
     * Change Hotel Event Codes
     */
    changeEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update function space locations. <p><strong>OperationId:</strong>changeFunctionSpaceLocations</p>
     * Change function space locations
     */
    changeFunctionSpaceLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
                throw new runtime.RequiredError('functionspaceLocationCode', 'Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling changeFunctionSpaceLocations.');
            }
            if (requestParameters.functionSpaceLocationsToBeChanged === null || requestParameters.functionSpaceLocationsToBeChanged === undefined) {
                throw new runtime.RequiredError('functionSpaceLocationsToBeChanged', 'Required parameter requestParameters.functionSpaceLocationsToBeChanged was null or undefined when calling changeFunctionSpaceLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpaceLocationsToBeChangedToJSON)(requestParameters.functionSpaceLocationsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update function space locations. <p><strong>OperationId:</strong>changeFunctionSpaceLocations</p>
     * Change function space locations
     */
    changeFunctionSpaceLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeFunctionSpaceLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update function space setup styles. <p><strong>OperationId:</strong>changeFunctionSpaceSetupStyles</p>
     * Change function space setup styles
     */
    changeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceSetupStyleId === null || requestParameters.functionSpaceSetupStyleId === undefined) {
                throw new runtime.RequiredError('functionSpaceSetupStyleId', 'Required parameter requestParameters.functionSpaceSetupStyleId was null or undefined when calling changeFunctionSpaceSetupStyles.');
            }
            if (requestParameters.functionSpaceSetupStylesToBeChanged === null || requestParameters.functionSpaceSetupStylesToBeChanged === undefined) {
                throw new runtime.RequiredError('functionSpaceSetupStylesToBeChanged', 'Required parameter requestParameters.functionSpaceSetupStylesToBeChanged was null or undefined when calling changeFunctionSpaceSetupStyles.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceSetupStyles/{functionSpaceSetupStyleId}`.replace(`{${"functionSpaceSetupStyleId"}}`, encodeURIComponent(String(requestParameters.functionSpaceSetupStyleId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpaceSetupStylesToBeChangedToJSON)(requestParameters.functionSpaceSetupStylesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update function space setup styles. <p><strong>OperationId:</strong>changeFunctionSpaceSetupStyles</p>
     * Change function space setup styles
     */
    changeFunctionSpaceSetupStyles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Function Spaces. <p><strong>OperationId:</strong>changeFunctionSpaces</p>
     * Change Function Spaces
     */
    changeFunctionSpacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
                throw new runtime.RequiredError('functionSpaceCode', 'Required parameter requestParameters.functionSpaceCode was null or undefined when calling changeFunctionSpaces.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeFunctionSpaces.');
            }
            if (requestParameters.functionSpacesToBeChanged === null || requestParameters.functionSpacesToBeChanged === undefined) {
                throw new runtime.RequiredError('functionSpacesToBeChanged', 'Required parameter requestParameters.functionSpacesToBeChanged was null or undefined when calling changeFunctionSpaces.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpacesToBeChangedToJSON)(requestParameters.functionSpacesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Function Spaces. <p><strong>OperationId:</strong>changeFunctionSpaces</p>
     * Change Function Spaces
     */
    changeFunctionSpaces(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeFunctionSpacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool
     */
    changeRoomTypePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomPoolCode === null || requestParameters.roomPoolCode === undefined) {
                throw new runtime.RequiredError('roomPoolCode', 'Required parameter requestParameters.roomPoolCode was null or undefined when calling changeRoomTypePool.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeRoomTypePool.');
            }
            if (requestParameters.roomTypePoolToBeChanged === null || requestParameters.roomTypePoolToBeChanged === undefined) {
                throw new runtime.RequiredError('roomTypePoolToBeChanged', 'Required parameter requestParameters.roomTypePoolToBeChanged was null or undefined when calling changeRoomTypePool.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomTypePoolToBeChangedToJSON)(requestParameters.roomTypePoolToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool
     */
    changeRoomTypePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeRoomTypePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Template Event Codes. <p><strong>OperationId:</strong>changeTemplateEventCodes</p>
     * Change Template Event Codes
     */
    changeTemplateEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateEventCodesToBeChanged === null || requestParameters.templateEventCodesToBeChanged === undefined) {
                throw new runtime.RequiredError('templateEventCodesToBeChanged', 'Required parameter requestParameters.templateEventCodesToBeChanged was null or undefined when calling changeTemplateEventCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventCodes`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateEventCodesToBeChangedToJSON)(requestParameters.templateEventCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Template Event Codes. <p><strong>OperationId:</strong>changeTemplateEventCodes</p>
     * Change Template Event Codes
     */
    changeTemplateEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to copy function space locations. <p><strong>OperationId:</strong>copyFunctionSpaceLocations</p>
     * Copy function space locations
     */
    copyFunctionSpaceLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
                throw new runtime.RequiredError('sourceHotelId', 'Required parameter requestParameters.sourceHotelId was null or undefined when calling copyFunctionSpaceLocations.');
            }
            if (requestParameters.copyFunctionSpaceLocations === null || requestParameters.copyFunctionSpaceLocations === undefined) {
                throw new runtime.RequiredError('copyFunctionSpaceLocations', 'Required parameter requestParameters.copyFunctionSpaceLocations was null or undefined when calling copyFunctionSpaceLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{sourceHotelId}/functionspaceLocations/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyFunctionSpaceLocationsToJSON)(requestParameters.copyFunctionSpaceLocations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to copy function space locations. <p><strong>OperationId:</strong>copyFunctionSpaceLocations</p>
     * Copy function space locations
     */
    copyFunctionSpaceLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyFunctionSpaceLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Use this API to copy Function Space. <p><strong>OperationId:</strong>copyFunctionSpaces</p>
     * Copy Function Spaces
     */
    copyFunctionSpacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
                throw new runtime.RequiredError('sourceHotelId', 'Required parameter requestParameters.sourceHotelId was null or undefined when calling copyFunctionSpaces.');
            }
            if (requestParameters.copyFunctionSpaces === null || requestParameters.copyFunctionSpaces === undefined) {
                throw new runtime.RequiredError('copyFunctionSpaces', 'Required parameter requestParameters.copyFunctionSpaces was null or undefined when calling copyFunctionSpaces.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{sourceHotelId}/functionSpaces/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyFunctionSpacesToJSON)(requestParameters.copyFunctionSpaces),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  Use this API to copy Function Space. <p><strong>OperationId:</strong>copyFunctionSpaces</p>
     * Copy Function Spaces
     */
    copyFunctionSpaces(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyFunctionSpacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Catering s Rental Codes. <p><strong>OperationId:</strong>getCateringRentalCodes</p>
     * Get Catering s Rental Codes
     */
    getCateringRentalCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionSpaceRentalCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CateringRentalCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Catering s Rental Codes. <p><strong>OperationId:</strong>getCateringRentalCodes</p>
     * Get Catering s Rental Codes
     */
    getCateringRentalCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCateringRentalCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Hotel Event Codes. <p><strong>OperationId:</strong>getEventCodes</p>
     * Get Hotel Event Codes
     */
    getEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getEventCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.eventsCodes) {
                queryParameters['eventsCodes'] = requestParameters.eventsCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Hotel Event Codes. <p><strong>OperationId:</strong>getEventCodes</p>
     * Get Hotel Event Codes
     */
    getEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve detailed information on function spaces, for example Meeting Room. <p><strong>OperationId:</strong>getFunctionSpace</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>
     * Get Function space
     */
    getFunctionSpaceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
                throw new runtime.RequiredError('functionSpaceCode', 'Required parameter requestParameters.functionSpaceCode was null or undefined when calling getFunctionSpace.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.physical !== undefined) {
                queryParameters['physical'] = requestParameters.physical;
            }
            if (requestParameters.pseudo !== undefined) {
                queryParameters['pseudo'] = requestParameters.pseudo;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.roomClassCodes) {
                queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
            }
            if (requestParameters.roomTypeCodes) {
                queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve detailed information on function spaces, for example Meeting Room. <p><strong>OperationId:</strong>getFunctionSpace</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>
     * Get Function space
     */
    getFunctionSpace(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpaceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Use this  get Function Space detailed information. <p><strong>OperationId:</strong>getFunctionSpaceConfig</p>
     * Get Function Space Configuration
     */
    getFunctionSpaceConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
                throw new runtime.RequiredError('functionSpaceCode', 'Required parameter requestParameters.functionSpaceCode was null or undefined when calling getFunctionSpaceConfig.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFunctionSpaceConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}/configurations`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceConfigDetailsFromJSON)(jsonValue));
        });
    }
    /**
     *  Use this  get Function Space detailed information. <p><strong>OperationId:</strong>getFunctionSpaceConfig</p>
     * Get Function Space Configuration
     */
    getFunctionSpaceConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpaceConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get detail information of function space locations. <p><strong>OperationId:</strong>getFunctionSpaceLocations</p>
     * Get Function space locations
     */
    getFunctionSpaceLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceLocations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceLocationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get detail information of function space locations. <p><strong>OperationId:</strong>getFunctionSpaceLocations</p>
     * Get Function space locations
     */
    getFunctionSpaceLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpaceLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Function space setup styles. <p><strong>OperationId:</strong>getFunctionSpaceSetupStyles</p>
     * Get Function space setup styles
     */
    getFunctionSpaceSetupStylesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceSetupStyles`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpaceSetupStylesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Function space setup styles. <p><strong>OperationId:</strong>getFunctionSpaceSetupStyles</p>
     * Get Function space setup styles
     */
    getFunctionSpaceSetupStyles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches the configured function spaces of a specific property with possible search criteria of function space code, and space type. The result returns the function spaces that fit the search criteria with details about space name, short name, attributes such as shareable, combo, web bookable, and more. <p><strong>OperationId:</strong>getFunctionSpaces</p>
     * Get Function Spaces
     */
    getFunctionSpacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFunctionSpaces.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.sortingBy !== undefined) {
                queryParameters['sortingBy'] = requestParameters.sortingBy;
            }
            if (requestParameters.roomCodes) {
                queryParameters['roomCodes'] = requestParameters.roomCodes;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.spaceType !== undefined) {
                queryParameters['spaceType'] = requestParameters.spaceType;
            }
            if (requestParameters.functionSpaceWildcard !== undefined) {
                queryParameters['functionSpaceWildcard'] = requestParameters.functionSpaceWildcard;
            }
            if (requestParameters.webBookable !== undefined) {
                queryParameters['webBookable'] = requestParameters.webBookable;
            }
            if (requestParameters.floorCodes) {
                queryParameters['floorCodes'] = requestParameters.floorCodes;
            }
            if (requestParameters.locationCodes) {
                queryParameters['locationCodes'] = requestParameters.locationCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionSpaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FunctionSpacesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches the configured function spaces of a specific property with possible search criteria of function space code, and space type. The result returns the function spaces that fit the search criteria with details about space name, short name, attributes such as shareable, combo, web bookable, and more. <p><strong>OperationId:</strong>getFunctionSpaces</p>
     * Get Function Spaces
     */
    getFunctionSpaces(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFunctionSpacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>
     * Fetch Room Type Pool
     */
    getRoomTypePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomTypePool.');
            }
            const queryParameters = {};
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.physical !== undefined) {
                queryParameters['physical'] = requestParameters.physical;
            }
            if (requestParameters.pseudo !== undefined) {
                queryParameters['pseudo'] = requestParameters.pseudo;
            }
            if (requestParameters.summaryInfo !== undefined) {
                queryParameters['summaryInfo'] = requestParameters.summaryInfo;
            }
            if (requestParameters.roomTypeCodes) {
                queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
            }
            if (requestParameters.roomClassCodes) {
                queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
            }
            if (requestParameters.roomTypePoolCodes) {
                queryParameters['roomTypePoolCodes'] = requestParameters.roomTypePoolCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomTypePoolDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>
     * Fetch Room Type Pool
     */
    getRoomTypePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomTypePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Template Event Codes. <p><strong>OperationId:</strong>getTemplateEventCodes</p>
     * Get Template Event Codes
     */
    getTemplateEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.eventsCodes) {
                queryParameters['eventsCodes'] = requestParameters.eventsCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateEventCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Template Event Codes. <p><strong>OperationId:</strong>getTemplateEventCodes</p>
     * Get Template Event Codes
     */
    getTemplateEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Catering s Rental Codes. <p><strong>OperationId:</strong>postCateringRentalCodes</p>
     * Create Catering s Rental Codes
     */
    postCateringRentalCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringRentalCodesCriteria === null || requestParameters.cateringRentalCodesCriteria === undefined) {
                throw new runtime.RequiredError('cateringRentalCodesCriteria', 'Required parameter requestParameters.cateringRentalCodesCriteria was null or undefined when calling postCateringRentalCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionSpaceRentalCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CateringRentalCodesCriteriaToJSON)(requestParameters.cateringRentalCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Catering s Rental Codes. <p><strong>OperationId:</strong>postCateringRentalCodes</p>
     * Create Catering s Rental Codes
     */
    postCateringRentalCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCateringRentalCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Hotel Event Codes. <p><strong>OperationId:</strong>postEventCodes</p>
     * Create Hotel Event Codes
     */
    postEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postEventCodes.');
            }
            if (requestParameters.eventCodesCriteria === null || requestParameters.eventCodesCriteria === undefined) {
                throw new runtime.RequiredError('eventCodesCriteria', 'Required parameter requestParameters.eventCodesCriteria was null or undefined when calling postEventCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventCodesCriteriaToJSON)(requestParameters.eventCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Hotel Event Codes. <p><strong>OperationId:</strong>postEventCodes</p>
     * Create Hotel Event Codes
     */
    postEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create function space locations. <p><strong>OperationId:</strong>postFunctionSpaceLocations</p>
     * Create function space locations
     */
    postFunctionSpaceLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
                throw new runtime.RequiredError('functionspaceLocationCode', 'Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling postFunctionSpaceLocations.');
            }
            if (requestParameters.functionSpaceLocationsCriteria === null || requestParameters.functionSpaceLocationsCriteria === undefined) {
                throw new runtime.RequiredError('functionSpaceLocationsCriteria', 'Required parameter requestParameters.functionSpaceLocationsCriteria was null or undefined when calling postFunctionSpaceLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpaceLocationsCriteriaToJSON)(requestParameters.functionSpaceLocationsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create function space locations. <p><strong>OperationId:</strong>postFunctionSpaceLocations</p>
     * Create function space locations
     */
    postFunctionSpaceLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFunctionSpaceLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create function space setup styles. <p><strong>OperationId:</strong>postFunctionSpaceSetupStyles</p>
     * Create function space setup styles
     */
    postFunctionSpaceSetupStylesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceSetupStylesCriteria === null || requestParameters.functionSpaceSetupStylesCriteria === undefined) {
                throw new runtime.RequiredError('functionSpaceSetupStylesCriteria', 'Required parameter requestParameters.functionSpaceSetupStylesCriteria was null or undefined when calling postFunctionSpaceSetupStyles.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceSetupStyles`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpaceSetupStylesCriteriaToJSON)(requestParameters.functionSpaceSetupStylesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create function space setup styles. <p><strong>OperationId:</strong>postFunctionSpaceSetupStyles</p>
     * Create function space setup styles
     */
    postFunctionSpaceSetupStyles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows the creation of function spaces. Criteria that need to be supplied in the request body include function space code, description, space type, and min / max attendees. Optional details such as short name, shareable, combo, web bookable, and dimensions can also be included. <p><strong>OperationId:</strong>postFunctionSpaces</p>
     * Create Function Spaces
     */
    postFunctionSpacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postFunctionSpaces.');
            }
            if (requestParameters.functionSpacesCriteria === null || requestParameters.functionSpacesCriteria === undefined) {
                throw new runtime.RequiredError('functionSpacesCriteria', 'Required parameter requestParameters.functionSpacesCriteria was null or undefined when calling postFunctionSpaces.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionSpaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FunctionSpacesCriteriaToJSON)(requestParameters.functionSpacesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows the creation of function spaces. Criteria that need to be supplied in the request body include function space code, description, space type, and min / max attendees. Optional details such as short name, shareable, combo, web bookable, and dimensions can also be included. <p><strong>OperationId:</strong>postFunctionSpaces</p>
     * Create Function Spaces
     */
    postFunctionSpaces(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postFunctionSpacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    postRoomTypePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRoomTypePool.');
            }
            if (requestParameters.roomTypePoolCriteria === null || requestParameters.roomTypePoolCriteria === undefined) {
                throw new runtime.RequiredError('roomTypePoolCriteria', 'Required parameter requestParameters.roomTypePoolCriteria was null or undefined when calling postRoomTypePool.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoomTypePoolCriteriaToJSON)(requestParameters.roomTypePoolCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    postRoomTypePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomTypePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Template Event Codes. <p><strong>OperationId:</strong>postTemplateEventCodes</p>
     * Create Template Event Codes
     */
    postTemplateEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateEventCodesCriteria === null || requestParameters.templateEventCodesCriteria === undefined) {
                throw new runtime.RequiredError('templateEventCodesCriteria', 'Required parameter requestParameters.templateEventCodesCriteria was null or undefined when calling postTemplateEventCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateEventCodesCriteriaToJSON)(requestParameters.templateEventCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Template Event Codes. <p><strong>OperationId:</strong>postTemplateEventCodes</p>
     * Create Template Event Codes
     */
    postTemplateEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Catering s Rental Codes. <p><strong>OperationId:</strong>removeCateringRentalCodes</p>
     * Delete Catering s Rental Codes
     */
    removeCateringRentalCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cateringRentalId === null || requestParameters.cateringRentalId === undefined) {
                throw new runtime.RequiredError('cateringRentalId', 'Required parameter requestParameters.cateringRentalId was null or undefined when calling removeCateringRentalCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionSpaceRentalCodes/{cateringRentalId}`.replace(`{${"cateringRentalId"}}`, encodeURIComponent(String(requestParameters.cateringRentalId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Catering s Rental Codes. <p><strong>OperationId:</strong>removeCateringRentalCodes</p>
     * Delete Catering s Rental Codes
     */
    removeCateringRentalCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCateringRentalCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Hotel Event Codes. <p><strong>OperationId:</strong>removeEventCodes</p>
     * Delete Hotel Event Codes
     */
    removeEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeEventCodes.');
            }
            const queryParameters = {};
            if (requestParameters.eventCode) {
                queryParameters['eventCode'] = requestParameters.eventCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Hotel Event Codes. <p><strong>OperationId:</strong>removeEventCodes</p>
     * Delete Hotel Event Codes
     */
    removeEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete function space locations. <p><strong>OperationId:</strong>removeFunctionSpaceLocations</p>
     * Delete function space locations
     */
    removeFunctionSpaceLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
                throw new runtime.RequiredError('functionspaceLocationCode', 'Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling removeFunctionSpaceLocations.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete function space locations. <p><strong>OperationId:</strong>removeFunctionSpaceLocations</p>
     * Delete function space locations
     */
    removeFunctionSpaceLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeFunctionSpaceLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete function space setup styles. <p><strong>OperationId:</strong>removeFunctionSpaceSetupStyles</p>
     * Delete function space setup styles
     */
    removeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceSetupStyleId === null || requestParameters.functionSpaceSetupStyleId === undefined) {
                throw new runtime.RequiredError('functionSpaceSetupStyleId', 'Required parameter requestParameters.functionSpaceSetupStyleId was null or undefined when calling removeFunctionSpaceSetupStyles.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/functionspaceSetupStyles/{functionSpaceSetupStyleId}`.replace(`{${"functionSpaceSetupStyleId"}}`, encodeURIComponent(String(requestParameters.functionSpaceSetupStyleId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete function space setup styles. <p><strong>OperationId:</strong>removeFunctionSpaceSetupStyles</p>
     * Delete function space setup styles
     */
    removeFunctionSpaceSetupStyles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Function Spaces. <p><strong>OperationId:</strong>removeFunctionSpaces</p>
     * Delete Function Spaces
     */
    removeFunctionSpacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
                throw new runtime.RequiredError('functionSpaceCode', 'Required parameter requestParameters.functionSpaceCode was null or undefined when calling removeFunctionSpaces.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeFunctionSpaces.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Function Spaces. <p><strong>OperationId:</strong>removeFunctionSpaces</p>
     * Delete Function Spaces
     */
    removeFunctionSpaces(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeFunctionSpacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    removeRoomTypePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomPoolCode === null || requestParameters.roomPoolCode === undefined) {
                throw new runtime.RequiredError('roomPoolCode', 'Required parameter requestParameters.roomPoolCode was null or undefined when calling removeRoomTypePool.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeRoomTypePool.');
            }
            const queryParameters = {};
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.defaultText !== undefined) {
                queryParameters['defaultText'] = requestParameters.defaultText;
            }
            if (requestParameters.lang) {
                queryParameters['lang'] = requestParameters.lang;
            }
            if (requestParameters.sequence) {
                queryParameters['sequence'] = requestParameters.sequence;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.numberOfRooms) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.shortDescription) {
                queryParameters['shortDescription'] = requestParameters.shortDescription;
            }
            if (requestParameters.activeDate) {
                queryParameters['activeDate'] = requestParameters.activeDate;
            }
            if (requestParameters.pseudo) {
                queryParameters['pseudo'] = requestParameters.pseudo;
            }
            if (requestParameters.accessible) {
                queryParameters['accessible'] = requestParameters.accessible;
            }
            if (requestParameters.sendToInterface) {
                queryParameters['sendToInterface'] = requestParameters.sendToInterface;
            }
            if (requestParameters.sellSequence) {
                queryParameters['sellSequence'] = requestParameters.sellSequence;
            }
            if (requestParameters.suite) {
                queryParameters['suite'] = requestParameters.suite;
            }
            if (requestParameters.meetingRoom) {
                queryParameters['meetingRoom'] = requestParameters.meetingRoom;
            }
            if (requestParameters.restricted) {
                queryParameters['restricted'] = requestParameters.restricted;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    removeRoomTypePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeRoomTypePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Template Event Codes. <p><strong>OperationId:</strong>removeTemplateEventCodes</p>
     * Delete Template Event Codes
     */
    removeTemplateEventCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.templateEventCodes) {
                queryParameters['templateEventCodes'] = requestParameters.templateEventCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/eventCodes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Template Event Codes. <p><strong>OperationId:</strong>removeTemplateEventCodes</p>
     * Delete Template Event Codes
     */
    removeTemplateEventCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateEventCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.HotelConfigApi = HotelConfigApi;
/**
 * @export
 */
exports.GetFunctionSpacesSortingByEnum = {
    Name: 'Name',
    AttendeeCapacity: 'AttendeeCapacity',
    AreaSize: 'AreaSize',
    CustomOrder1: 'CustomOrder1',
    CustomOrder2: 'CustomOrder2',
    CustomOrder3: 'CustomOrder3'
};
