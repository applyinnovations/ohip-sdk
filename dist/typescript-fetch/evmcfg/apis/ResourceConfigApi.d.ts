/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CateringContainers, CateringContainersInfo, CateringItemRates, CateringItemRatesInfo, CateringMenuClasses, CateringMenuClassesInfo, CateringMenuItemClasses, CateringMenuItemClassesCopy, CateringMenuItemClassesInfo, CateringMenuItems, CateringMenuItemsCopy, CateringMenuItemsInfo, CateringMenus, CateringMenusCopy, CateringMenusInfo, CateringPackage, CateringPackages, CateringPackagesInfo, CateringServings, CateringServingsInfo, CheckedDiscountAvailable, CopyConfigurationCodeType, DailyInventoryItems, EventForecasts, EventForecastsCopy, EventForecastsInfo, InventoryItemTemplates, InventoryItems, InventoryItemsCopy, InventoryItemsCreated, ItemClasses, ItemClassesInfo, ItemPools, ItemPoolsInfo, RevenueGroups, RevenueGroupsInfo, RevenueTypes, RevenueTypesInfo, Status } from '../models/index';
export interface CheckDiscountAvailableRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItemClassesCopy: CateringMenuItemClassesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyCateringMenuItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItemsCopy: CateringMenuItemsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenusCopy: CateringMenusCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyEventForecastsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventForecastsCopy: EventForecastsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyInventoryItemsRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItemsCopy: InventoryItemsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyItemClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemClassesCopy: Array<CopyConfigurationCodeType>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringContainersRequest {
    cateringContainersCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringItemRatesRequest {
    cateringItemRatesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenuClassesRequest {
    menuClassesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    menuClassListIDExtension?: Array<number>;
    menuClassListIdContext?: Array<string>;
    menuClassListUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    menuItemClassesIdExtension?: Array<number>;
    menuItemClassesIdContext?: Array<string>;
    menuItemClassesUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenuItemsRequest {
    cateringMenuItemId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenuItemsByChainRequest {
    cateringMenuItemId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenuMultiCoursesRequest {
    coursesId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    courseIdListUniqueIdExtension?: Array<number>;
    courseIdListUniqueIdContext?: Array<string>;
    courseIdListUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageEventNotesRequest {
    notedId: string;
    eventId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventIdType?: string;
    noteIdExtension?: number;
    noteIdContext?: string;
    noteIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageEventsRequest {
    packageEventsId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackagePricesRequest {
    pricesId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packagPriceIdExtension?: number;
    packagPriceIdContext?: string;
    packagPriceIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageResourceNotesRequest {
    notesId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageResourcesRequest {
    hotelId: Array<string>;
    pkgEventId: Array<string>;
    pkgEventIdType: Array<string>;
    resourceId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackageRevenuesRequest {
    priceId: string;
    revenueType: string;
    eventsId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packagePriceIdExtension?: number;
    packagePriceIdContext?: string;
    packagePriceIdType?: string;
    eventIdExtension?: number;
    eventIdContext?: string;
    eventIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCateringPackagesRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteEventForecastsRequest {
    eventTypesCode: string;
    forecastsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forecastIdExtension?: number;
    forecastIdContext?: string;
    forecastIdType?: string;
    hotelId?: Array<string>;
    revenueTypeCode?: string;
    revenueTypeDescription?: string;
    amount?: number;
    currencyCode?: string;
    amountType?: Set<DeleteEventForecastsAmountTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInventoryItemTemplatesRequest {
    inventoryItemId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItemTemplatesIdExtension?: Array<number>;
    inventoryItemTemplatesContext?: Array<string>;
    inventoryItemTemplatesType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInventoryItemsRequest {
    inventoryItemId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemIDExtension?: number;
    idContext?: string;
    itemIDType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteItemClassesRequest {
    itemClassesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteItemPoolsRequest {
    itemPoolsCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRevenueGroupsRequest {
    revenueGroupsCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringContainersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringItemRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringMenuRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    fetchInstructions?: Set<GetCateringMenuFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringMenuClassesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    className?: string;
    webBookable?: boolean;
    includeMenus?: boolean;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringMenuItemClassesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    className?: string;
    menuTypes?: Set<GetCateringMenuItemClassesMenuTypesEnum>;
    webBookable?: boolean;
    includeMenuItems?: boolean;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringMenuItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    name?: string;
    codes?: Array<string>;
    quickInsertCode?: string;
    listTypeCodes?: Array<string>;
    inactive?: boolean;
    eventTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringMenusRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    menuId?: string;
    iDExtension?: number;
    idContext?: string;
    menuIDType?: string;
    name?: string;
    classNameListCodes?: Array<string>;
    eventTypesCodes?: Array<string>;
    menuTypes?: Set<GetCateringMenusMenuTypesEnum>;
    dietaryListCodes?: Array<string>;
    inactive?: boolean;
    multiChoice?: boolean;
    webBookable?: boolean;
    end?: string;
    start?: string;
    fetchInstructions?: Set<GetCateringMenusFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackageRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    pkgIDType?: string;
    fetchInstructions?: Set<GetCateringPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackageByChainRequest {
    cateringPackageId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idExtension?: number;
    idContext?: string;
    pkgIDType?: string;
    fetchInstructions?: Set<GetCateringPackageByChainFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    packageCode?: Array<string>;
    description?: string;
    duration?: number;
    webBookable?: boolean;
    pkgTmpltType?: GetCateringPackagesPkgTmpltTypeEnum;
    marketCode?: string;
    priceCode?: string;
    minAttendees?: number;
    maxAttendees?: number;
    sellDate?: string;
    startDateTime?: string;
    endDateTime?: string;
    bookingType?: string;
    fetchInstructions?: Set<GetCateringPackagesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringPackagesMultiPropertiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    packageCode?: Array<string>;
    description?: string;
    duration?: number;
    webBookable?: boolean;
    pkgTmpltType?: GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum;
    marketCode?: string;
    priceCode?: string;
    minAttendees?: number;
    maxAttendees?: number;
    sellDate?: string;
    startDateTime?: string;
    endDateTime?: string;
    bookingType?: string;
    fetchInstructions?: Set<GetCateringPackagesMultiPropertiesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCateringServingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    servingCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDailyInventoryItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemClassCode?: string;
    itemName?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    startDate?: string;
    endDate?: string;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventForecastsRequest {
    hotelId: string;
    fetchInstructions: Set<GetEventForecastsFetchInstructionsEnum>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    eventTypeCodes?: Array<string>;
    eventTypeWildCard?: string;
    revenueTypeCodes?: Array<string>;
    revenueTypeWildCard?: string;
    eventDate?: string;
    blockTypeCodes?: Array<string>;
    marketCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInventoryItemTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    inventoryItemTemplateName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInventoryItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemClassCode?: string;
    itemName?: string;
    itemCode?: string;
    eventTypecodes?: Array<string>;
    usedForEvents?: boolean;
    includeItemsFromTemplates?: boolean;
    startDateTime?: string;
    endDateTime?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetItemClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    itemClassesCode?: Array<string>;
    wildCard?: string;
    criteria?: GetItemClassesCriteriaEnum;
    classId?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetItemPoolsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    itemClasseCodes?: Array<string>;
    wildCard?: string;
    itemPoolCodes?: Array<string>;
    itemPoolsWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRevenueGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    revenueGroupCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    includeRevenueType?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRevenueTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueGroupCodes?: Array<string>;
    revenueGroupWildCard?: string;
    revenueTypeCodes?: Array<string>;
    revenueTypeWildCard?: string;
    includeInactive?: boolean;
    includeRevenueTypeDetail?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringContainersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringContainers: CateringContainers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringItemRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringItemRates: CateringItemRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringMenuClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuClasses: CateringMenuClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringMenuItemClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItemClasses: CateringMenuItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringMenuItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItems: CateringMenuItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringMenusRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenus: CateringMenus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCateringPackagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringPackages: CateringPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostEventForecastsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventForecasts: EventForecasts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostInventoryItemTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItemTemplates: InventoryItemTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostInventoryItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItems: InventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostItemClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemClasses: ItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostItemPoolsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemPools: ItemPools;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRevenueGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueGroups: RevenueGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRevenueTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypes: RevenueTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringContainersRequest {
    cateringContainersCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringContainers: CateringContainers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringItemRatesRequest {
    cateringItemRatesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringItemRates: CateringItemRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringMenuClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuClasses: CateringMenuClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItemClasses: CateringMenuItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringMenuItemsRequest {
    cateringMenuItemId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenuItems: CateringMenuItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringMenus: CateringMenus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringPackagesRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringPackages: CateringPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringServingsRequest {
    cateringServingsCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringServings: CateringServings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutEventForecastsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventForecasts: EventForecasts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInventoryItemTemplatesRequest {
    inventoryItemId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItemTemplates: InventoryItemTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInventoryItemsRequest {
    inventoryItemId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryItems: InventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutItemClassesRequest {
    itemClassesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemClasses: ItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutItemPoolsRequest {
    itemPoolsCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemPools: ItemPools;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRevenueGroupsRequest {
    revenueGroupsCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueGroups: RevenueGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRevenueTypesRequest {
    revenueTypesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypes: RevenueTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ResourceConfigApi extends runtime.BaseAPI {
    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    checkDiscountAvailableRaw(requestParameters: CheckDiscountAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedDiscountAvailable>>;
    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    checkDiscountAvailable(requestParameters: CheckDiscountAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedDiscountAvailable>;
    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    copyCateringMenuItemClassesRaw(requestParameters: CopyCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    copyCateringMenuItemClasses(requestParameters: CopyCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    copyCateringMenuItemsRaw(requestParameters: CopyCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    copyCateringMenuItems(requestParameters: CopyCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    copyCateringMenusRaw(requestParameters: CopyCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    copyCateringMenus(requestParameters: CopyCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    copyEventForecastsRaw(requestParameters: CopyEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    copyEventForecasts(requestParameters: CopyEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    copyInventoryItemsRaw(requestParameters: CopyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    copyInventoryItems(requestParameters: CopyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    copyItemClassesRaw(requestParameters: CopyItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    copyItemClasses(requestParameters: CopyItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    deleteCateringContainersRaw(requestParameters: DeleteCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    deleteCateringContainers(requestParameters: DeleteCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    deleteCateringItemRatesRaw(requestParameters: DeleteCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    deleteCateringItemRates(requestParameters: DeleteCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    deleteCateringMenuClassesRaw(requestParameters: DeleteCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    deleteCateringMenuClasses(requestParameters: DeleteCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    deleteCateringMenuItemClassesRaw(requestParameters: DeleteCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    deleteCateringMenuItemClasses(requestParameters: DeleteCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    deleteCateringMenuItemsRaw(requestParameters: DeleteCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    deleteCateringMenuItems(requestParameters: DeleteCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    deleteCateringMenuItemsByChainRaw(requestParameters: DeleteCateringMenuItemsByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    deleteCateringMenuItemsByChain(requestParameters: DeleteCateringMenuItemsByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    deleteCateringMenuMultiCoursesRaw(requestParameters: DeleteCateringMenuMultiCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    deleteCateringMenuMultiCourses(requestParameters: DeleteCateringMenuMultiCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    deleteCateringMenusRaw(requestParameters: DeleteCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    deleteCateringMenus(requestParameters: DeleteCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    deleteCateringPackageEventNotesRaw(requestParameters: DeleteCateringPackageEventNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    deleteCateringPackageEventNotes(requestParameters: DeleteCateringPackageEventNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    deleteCateringPackageEventsRaw(requestParameters: DeleteCateringPackageEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    deleteCateringPackageEvents(requestParameters: DeleteCateringPackageEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    deleteCateringPackagePricesRaw(requestParameters: DeleteCateringPackagePricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    deleteCateringPackagePrices(requestParameters: DeleteCateringPackagePricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    deleteCateringPackageResourceNotesRaw(requestParameters: DeleteCateringPackageResourceNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    deleteCateringPackageResourceNotes(requestParameters: DeleteCateringPackageResourceNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    deleteCateringPackageResourcesRaw(requestParameters: DeleteCateringPackageResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    deleteCateringPackageResources(requestParameters: DeleteCateringPackageResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    deleteCateringPackageRevenuesRaw(requestParameters: DeleteCateringPackageRevenuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    deleteCateringPackageRevenues(requestParameters: DeleteCateringPackageRevenuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    deleteCateringPackagesRaw(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    deleteCateringPackages(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    deleteEventForecastsRaw(requestParameters: DeleteEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    deleteEventForecasts(requestParameters: DeleteEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    deleteInventoryItemTemplatesRaw(requestParameters: DeleteInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    deleteInventoryItemTemplates(requestParameters: DeleteInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    deleteInventoryItemsRaw(requestParameters: DeleteInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    deleteInventoryItems(requestParameters: DeleteInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    deleteItemClassesRaw(requestParameters: DeleteItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    deleteItemClasses(requestParameters: DeleteItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    deleteItemPoolsRaw(requestParameters: DeleteItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    deleteItemPools(requestParameters: DeleteItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    deleteRevenueGroupsRaw(requestParameters: DeleteRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    deleteRevenueGroups(requestParameters: DeleteRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    getCateringContainersRaw(requestParameters: GetCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringContainersInfo>>;
    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    getCateringContainers(requestParameters: GetCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringContainersInfo>;
    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    getCateringItemRatesRaw(requestParameters: GetCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringItemRatesInfo>>;
    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    getCateringItemRates(requestParameters: GetCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringItemRatesInfo>;
    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    getCateringMenuRaw(requestParameters: GetCateringMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenusInfo>>;
    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    getCateringMenu(requestParameters: GetCateringMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenusInfo>;
    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    getCateringMenuClassesRaw(requestParameters: GetCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuClassesInfo>>;
    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    getCateringMenuClasses(requestParameters: GetCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuClassesInfo>;
    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    getCateringMenuItemClassesRaw(requestParameters: GetCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuItemClassesInfo>>;
    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    getCateringMenuItemClasses(requestParameters: GetCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuItemClassesInfo>;
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    getCateringMenuItemsRaw(requestParameters: GetCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuItemsInfo>>;
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    getCateringMenuItems(requestParameters: GetCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuItemsInfo>;
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    getCateringMenusRaw(requestParameters: GetCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenusInfo>>;
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    getCateringMenus(requestParameters: GetCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenusInfo>;
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    getCateringPackageRaw(requestParameters: GetCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackage>>;
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    getCateringPackage(requestParameters: GetCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackage>;
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    getCateringPackageByChainRaw(requestParameters: GetCateringPackageByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackage>>;
    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    getCateringPackageByChain(requestParameters: GetCateringPackageByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackage>;
    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    getCateringPackagesRaw(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackagesInfo>>;
    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    getCateringPackages(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackagesInfo>;
    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    getCateringPackagesMultiPropertiesRaw(requestParameters: GetCateringPackagesMultiPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackagesInfo>>;
    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    getCateringPackagesMultiProperties(requestParameters: GetCateringPackagesMultiPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackagesInfo>;
    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    getCateringServingsRaw(requestParameters: GetCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringServingsInfo>>;
    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    getCateringServings(requestParameters: GetCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringServingsInfo>;
    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    getDailyInventoryItemsRaw(requestParameters: GetDailyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyInventoryItems>>;
    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    getDailyInventoryItems(requestParameters: GetDailyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyInventoryItems>;
    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    getEventForecastsRaw(requestParameters: GetEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventForecastsInfo>>;
    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    getEventForecasts(requestParameters: GetEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventForecastsInfo>;
    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    getInventoryItemTemplatesRaw(requestParameters: GetInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItemTemplates>>;
    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    getInventoryItemTemplates(requestParameters: GetInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItemTemplates>;
    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    getInventoryItemsRaw(requestParameters: GetInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItems>>;
    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    getInventoryItems(requestParameters: GetInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItems>;
    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    getItemClassesRaw(requestParameters: GetItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemClassesInfo>>;
    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    getItemClasses(requestParameters: GetItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemClassesInfo>;
    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    getItemPoolsRaw(requestParameters: GetItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPoolsInfo>>;
    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    getItemPools(requestParameters: GetItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPoolsInfo>;
    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    getRevenueGroupsRaw(requestParameters: GetRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueGroupsInfo>>;
    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    getRevenueGroups(requestParameters: GetRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueGroupsInfo>;
    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    getRevenueTypesRaw(requestParameters: GetRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueTypesInfo>>;
    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    getRevenueTypes(requestParameters: GetRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueTypesInfo>;
    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    postCateringContainersRaw(requestParameters: PostCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    postCateringContainers(requestParameters: PostCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    postCateringItemRatesRaw(requestParameters: PostCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    postCateringItemRates(requestParameters: PostCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    postCateringMenuClassesRaw(requestParameters: PostCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    postCateringMenuClasses(requestParameters: PostCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    postCateringMenuItemClassesRaw(requestParameters: PostCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    postCateringMenuItemClasses(requestParameters: PostCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    postCateringMenuItemsRaw(requestParameters: PostCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    postCateringMenuItems(requestParameters: PostCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    postCateringMenusRaw(requestParameters: PostCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    postCateringMenus(requestParameters: PostCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    postCateringPackagesRaw(requestParameters: PostCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    postCateringPackages(requestParameters: PostCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    postEventForecastsRaw(requestParameters: PostEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    postEventForecasts(requestParameters: PostEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    postInventoryItemTemplatesRaw(requestParameters: PostInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    postInventoryItemTemplates(requestParameters: PostInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    postInventoryItemsRaw(requestParameters: PostInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItemsCreated>>;
    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    postInventoryItems(requestParameters: PostInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItemsCreated>;
    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    postItemClassesRaw(requestParameters: PostItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    postItemClasses(requestParameters: PostItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    postItemPoolsRaw(requestParameters: PostItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    postItemPools(requestParameters: PostItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    postRevenueGroupsRaw(requestParameters: PostRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    postRevenueGroups(requestParameters: PostRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    postRevenueTypesRaw(requestParameters: PostRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    postRevenueTypes(requestParameters: PostRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    putCateringContainersRaw(requestParameters: PutCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    putCateringContainers(requestParameters: PutCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    putCateringItemRatesRaw(requestParameters: PutCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    putCateringItemRates(requestParameters: PutCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    putCateringMenuClassesRaw(requestParameters: PutCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    putCateringMenuClasses(requestParameters: PutCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    putCateringMenuItemClassesRaw(requestParameters: PutCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    putCateringMenuItemClasses(requestParameters: PutCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    putCateringMenuItemsRaw(requestParameters: PutCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    putCateringMenuItems(requestParameters: PutCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    putCateringMenusRaw(requestParameters: PutCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    putCateringMenus(requestParameters: PutCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    putCateringPackagesRaw(requestParameters: PutCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    putCateringPackages(requestParameters: PutCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    putCateringServingsRaw(requestParameters: PutCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    putCateringServings(requestParameters: PutCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    putEventForecastsRaw(requestParameters: PutEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    putEventForecasts(requestParameters: PutEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    putInventoryItemTemplatesRaw(requestParameters: PutInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    putInventoryItemTemplates(requestParameters: PutInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    putInventoryItemsRaw(requestParameters: PutInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    putInventoryItems(requestParameters: PutInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    putItemClassesRaw(requestParameters: PutItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    putItemClasses(requestParameters: PutItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    putItemPoolsRaw(requestParameters: PutItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    putItemPools(requestParameters: PutItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    putRevenueGroupsRaw(requestParameters: PutRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    putRevenueGroups(requestParameters: PutRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    putRevenueTypesRaw(requestParameters: PutRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    putRevenueTypes(requestParameters: PutRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const DeleteEventForecastsAmountTypeEnum: {
    readonly FlatAmount: "FlatAmount";
    readonly PerPerson: "PerPerson";
};
export type DeleteEventForecastsAmountTypeEnum = typeof DeleteEventForecastsAmountTypeEnum[keyof typeof DeleteEventForecastsAmountTypeEnum];
/**
 * @export
 */
export declare const GetCateringMenuFetchInstructionsEnum: {
    readonly Revenue: "Revenue";
    readonly MenuDetails: "MenuDetails";
    readonly MenuNotes: "MenuNotes";
};
export type GetCateringMenuFetchInstructionsEnum = typeof GetCateringMenuFetchInstructionsEnum[keyof typeof GetCateringMenuFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringMenuItemClassesMenuTypesEnum: {
    readonly Food: "Food";
    readonly Beverage: "Beverage";
};
export type GetCateringMenuItemClassesMenuTypesEnum = typeof GetCateringMenuItemClassesMenuTypesEnum[keyof typeof GetCateringMenuItemClassesMenuTypesEnum];
/**
 * @export
 */
export declare const GetCateringMenusMenuTypesEnum: {
    readonly Food: "Food";
    readonly Beverage: "Beverage";
};
export type GetCateringMenusMenuTypesEnum = typeof GetCateringMenusMenuTypesEnum[keyof typeof GetCateringMenusMenuTypesEnum];
/**
 * @export
 */
export declare const GetCateringMenusFetchInstructionsEnum: {
    readonly Revenue: "Revenue";
    readonly MenuDetails: "MenuDetails";
    readonly MenuNotes: "MenuNotes";
};
export type GetCateringMenusFetchInstructionsEnum = typeof GetCateringMenusFetchInstructionsEnum[keyof typeof GetCateringMenusFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringPackageFetchInstructionsEnum: {
    readonly PackageInfo: "PackageInfo";
    readonly Events: "Events";
    readonly Resources: "Resources";
    readonly Pricing: "Pricing";
    readonly Indicators: "Indicators";
    readonly BlockPackageInfo: "BlockPackageInfo";
    readonly EventNotes: "EventNotes";
};
export type GetCateringPackageFetchInstructionsEnum = typeof GetCateringPackageFetchInstructionsEnum[keyof typeof GetCateringPackageFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringPackageByChainFetchInstructionsEnum: {
    readonly PackageInfo: "PackageInfo";
    readonly Events: "Events";
    readonly Resources: "Resources";
    readonly Pricing: "Pricing";
    readonly Indicators: "Indicators";
    readonly BlockPackageInfo: "BlockPackageInfo";
    readonly EventNotes: "EventNotes";
};
export type GetCateringPackageByChainFetchInstructionsEnum = typeof GetCateringPackageByChainFetchInstructionsEnum[keyof typeof GetCateringPackageByChainFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringPackagesPkgTmpltTypeEnum: {
    readonly Packages: "Packages";
    readonly Templates: "Templates";
    readonly Both: "Both";
};
export type GetCateringPackagesPkgTmpltTypeEnum = typeof GetCateringPackagesPkgTmpltTypeEnum[keyof typeof GetCateringPackagesPkgTmpltTypeEnum];
/**
 * @export
 */
export declare const GetCateringPackagesFetchInstructionsEnum: {
    readonly PackageInfo: "PackageInfo";
    readonly Events: "Events";
    readonly Resources: "Resources";
    readonly Pricing: "Pricing";
    readonly Indicators: "Indicators";
    readonly BlockPackageInfo: "BlockPackageInfo";
    readonly EventNotes: "EventNotes";
};
export type GetCateringPackagesFetchInstructionsEnum = typeof GetCateringPackagesFetchInstructionsEnum[keyof typeof GetCateringPackagesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum: {
    readonly Packages: "Packages";
    readonly Templates: "Templates";
    readonly Both: "Both";
};
export type GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum = typeof GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum[keyof typeof GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum];
/**
 * @export
 */
export declare const GetCateringPackagesMultiPropertiesFetchInstructionsEnum: {
    readonly PackageInfo: "PackageInfo";
    readonly Events: "Events";
    readonly Resources: "Resources";
    readonly Pricing: "Pricing";
    readonly Indicators: "Indicators";
    readonly BlockPackageInfo: "BlockPackageInfo";
    readonly EventNotes: "EventNotes";
};
export type GetCateringPackagesMultiPropertiesFetchInstructionsEnum = typeof GetCateringPackagesMultiPropertiesFetchInstructionsEnum[keyof typeof GetCateringPackagesMultiPropertiesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventForecastsFetchInstructionsEnum: {
    readonly ForecastInfo: "ForecastInfo";
    readonly RevenueDetails: "RevenueDetails";
};
export type GetEventForecastsFetchInstructionsEnum = typeof GetEventForecastsFetchInstructionsEnum[keyof typeof GetEventForecastsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetItemClassesCriteriaEnum: {
    readonly Reservation: "Reservation";
    readonly Events: "Events";
    readonly ReservationAndEvents: "ReservationAndEvents";
};
export type GetItemClassesCriteriaEnum = typeof GetItemClassesCriteriaEnum[keyof typeof GetItemClassesCriteriaEnum];
