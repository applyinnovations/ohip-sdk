/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeRoomTypePoolRequest,
  ExceptionDetailType,
  PostRoomTypePoolRequest,
  RoomTypePoolDetails,
  Status,
} from '../models';
import {
    ChangeRoomTypePoolRequestFromJSON,
    ChangeRoomTypePoolRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostRoomTypePoolRequestFromJSON,
    PostRoomTypePoolRequestToJSON,
    RoomTypePoolDetailsFromJSON,
    RoomTypePoolDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface ChangeRoomTypePoolOperationRequest {
    roomPoolCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypePoolToBeChanged?: ChangeRoomTypePoolRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomTypePoolRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    limit?: number;
    pageNumber?: number;
    physical?: boolean;
    pseudo?: boolean;
    summaryInfo?: boolean;
    roomTypeCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    roomTypePoolCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomTypePoolOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypePoolCriteria?: PostRoomTypePoolRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRoomTypePoolRequest {
    roomPoolCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    description?: Array<string>;
    defaultText?: string;
    lang?: Array<string>;
    sequence?: Array<number>;
    inactive?: Array<boolean>;
    numberOfRooms?: Array<number>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    shortDescription?: Array<string>;
    activeDate?: Array<Date>;
    pseudo?: Array<boolean>;
    accessible?: Array<boolean>;
    sendToInterface?: Array<boolean>;
    sellSequence?: Array<number>;
    suite?: Array<boolean>;
    meetingRoom?: Array<boolean>;
    restricted?: Array<boolean>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool 
     */
    async changeRoomTypePoolRaw(requestParameters: ChangeRoomTypePoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoomTypePoolRequestToJSON(requestParameters.roomTypePoolToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool 
     */
    async changeRoomTypePool(requestParameters: ChangeRoomTypePoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p>
     * Fetch Room Type Pool
     */
    async getRoomTypePoolRaw(requestParameters: GetRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomTypePoolDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.roomTypePoolCodes) {
            queryParameters['roomTypePoolCodes'] = requestParameters.roomTypePoolCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomTypePoolDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p>
     * Fetch Room Type Pool
     */
    async getRoomTypePool(requestParameters: GetRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomTypePoolDetails> {
        const response = await this.getRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    async postRoomTypePoolRaw(requestParameters: PostRoomTypePoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomTypePoolRequestToJSON(requestParameters.roomTypePoolCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    async postRoomTypePool(requestParameters: PostRoomTypePoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    async removeRoomTypePoolRaw(requestParameters: RemoveRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.defaultText !== undefined) {
            queryParameters['defaultText'] = requestParameters.defaultText;
        }

        if (requestParameters.lang) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.sequence) {
            queryParameters['sequence'] = requestParameters.sequence;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.numberOfRooms) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.shortDescription) {
            queryParameters['shortDescription'] = requestParameters.shortDescription;
        }

        if (requestParameters.activeDate) {
            queryParameters['activeDate'] = requestParameters.activeDate;
        }

        if (requestParameters.pseudo) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.accessible) {
            queryParameters['accessible'] = requestParameters.accessible;
        }

        if (requestParameters.sendToInterface) {
            queryParameters['sendToInterface'] = requestParameters.sendToInterface;
        }

        if (requestParameters.sellSequence) {
            queryParameters['sellSequence'] = requestParameters.sellSequence;
        }

        if (requestParameters.suite) {
            queryParameters['suite'] = requestParameters.suite;
        }

        if (requestParameters.meetingRoom) {
            queryParameters['meetingRoom'] = requestParameters.meetingRoom;
        }

        if (requestParameters.restricted) {
            queryParameters['restricted'] = requestParameters.restricted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    async removeRoomTypePool(requestParameters: RemoveRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
