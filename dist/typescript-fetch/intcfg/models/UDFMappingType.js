"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UDFMappingTypeToJSON = exports.UDFMappingTypeFromJSONTyped = exports.UDFMappingTypeFromJSON = exports.instanceOfUDFMappingType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the UDFMappingType interface.
 */
function instanceOfUDFMappingType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUDFMappingType = instanceOfUDFMappingType;
function UDFMappingTypeFromJSON(json) {
    return UDFMappingTypeFromJSONTyped(json, false);
}
exports.UDFMappingTypeFromJSON = UDFMappingTypeFromJSON;
function UDFMappingTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'active': !(0, runtime_1.exists)(json, 'active') ? undefined : json['active'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
        'uDFLabel': !(0, runtime_1.exists)(json, 'uDFLabel') ? undefined : json['uDFLabel'],
        'uDFName': !(0, runtime_1.exists)(json, 'uDFName') ? undefined : json['uDFName'],
        'updateAllowed': !(0, runtime_1.exists)(json, 'updateAllowed') ? undefined : json['updateAllowed'],
    };
}
exports.UDFMappingTypeFromJSONTyped = UDFMappingTypeFromJSONTyped;
function UDFMappingTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'active': value.active,
        'type': value.type,
        'uDFLabel': value.uDFLabel,
        'uDFName': value.uDFName,
        'updateAllowed': value.updateAllowed,
    };
}
exports.UDFMappingTypeToJSON = UDFMappingTypeToJSON;
