/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExpressionOperatorType
 */
export interface ExpressionOperatorType {
    /**
     * 
     * @type {string}
     * @memberof ExpressionOperatorType
     */
    operatorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpressionOperatorType
     */
    operatorDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof ExpressionOperatorType
     */
    parameterSize?: number;
}

/**
 * Check if a given object implements the ExpressionOperatorType interface.
 */
export function instanceOfExpressionOperatorType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExpressionOperatorTypeFromJSON(json: any): ExpressionOperatorType {
    return ExpressionOperatorTypeFromJSONTyped(json, false);
}

export function ExpressionOperatorTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpressionOperatorType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operatorName': !exists(json, 'operatorName') ? undefined : json['operatorName'],
        'operatorDescription': !exists(json, 'operatorDescription') ? undefined : json['operatorDescription'],
        'parameterSize': !exists(json, 'parameterSize') ? undefined : json['parameterSize'],
    };
}

export function ExpressionOperatorTypeToJSON(value?: ExpressionOperatorType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operatorName': value.operatorName,
        'operatorDescription': value.operatorDescription,
        'parameterSize': value.parameterSize,
    };
}

