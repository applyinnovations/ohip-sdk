/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DeviceCode } from './DeviceCode';
import type { DeviceType } from './DeviceType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
/**
 * External device details.
 * @export
 * @interface SupportedExternalDeviceType
 */
export interface SupportedExternalDeviceType {
    /**
     *
     * @type {DeviceType}
     * @memberof SupportedExternalDeviceType
     */
    deviceType?: DeviceType;
    /**
     *
     * @type {DeviceCode}
     * @memberof SupportedExternalDeviceType
     */
    deviceCode?: DeviceCode;
    /**
     * The area where the device is installed
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    deviceArea?: string;
    /**
     * External device display name.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    displayName?: string;
    /**
     * Indicator if device type is mobile or desktop.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    mobileYN?: boolean;
    /**
     * Indicator if device type is mobile or desktop.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    desktopYN?: boolean;
    /**
     * The address which the Cash Register ID ( Device ID ) is associated with.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    registerAddress?: string;
    /**
     * External device Value.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    deviceValue?: string;
    /**
     * Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    fiscalPartnerCode?: string;
    /**
     * Flag to designate the primary Fiscal Terminal.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    primary?: boolean;
    /**
     * Flag that indicates whether the device is active.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    label?: string;
    /**
     *
     * @type {TranslationTextType2000}
     * @memberof SupportedExternalDeviceType
     */
    translatableLabel?: TranslationTextType2000;
    /**
     *
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    iDEditable?: boolean;
}
/**
 * Check if a given object implements the SupportedExternalDeviceType interface.
 */
export declare function instanceOfSupportedExternalDeviceType(value: object): boolean;
export declare function SupportedExternalDeviceTypeFromJSON(json: any): SupportedExternalDeviceType;
export declare function SupportedExternalDeviceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SupportedExternalDeviceType;
export declare function SupportedExternalDeviceTypeToJSON(value?: SupportedExternalDeviceType | null): any;
