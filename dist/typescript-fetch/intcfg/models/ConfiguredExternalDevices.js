"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfiguredExternalDevicesToJSON = exports.ConfiguredExternalDevicesFromJSONTyped = exports.ConfiguredExternalDevicesFromJSON = exports.instanceOfConfiguredExternalDevices = void 0;
const runtime_1 = require("../runtime");
const DeviceType_1 = require("./DeviceType");
const HotelExternalDevicesType_1 = require("./HotelExternalDevicesType");
/**
 * Check if a given object implements the ConfiguredExternalDevices interface.
 */
function instanceOfConfiguredExternalDevices(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConfiguredExternalDevices = instanceOfConfiguredExternalDevices;
function ConfiguredExternalDevicesFromJSON(json) {
    return ConfiguredExternalDevicesFromJSONTyped(json, false);
}
exports.ConfiguredExternalDevicesFromJSON = ConfiguredExternalDevicesFromJSON;
function ConfiguredExternalDevicesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'deviceType': !(0, runtime_1.exists)(json, 'deviceType') ? undefined : (0, DeviceType_1.DeviceTypeFromJSON)(json['deviceType']),
        'supportedExternalDevices': !(0, runtime_1.exists)(json, 'supportedExternalDevices') ? undefined : (json['supportedExternalDevices'].map(HotelExternalDevicesType_1.HotelExternalDevicesTypeFromJSON)),
    };
}
exports.ConfiguredExternalDevicesFromJSONTyped = ConfiguredExternalDevicesFromJSONTyped;
function ConfiguredExternalDevicesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'deviceType': (0, DeviceType_1.DeviceTypeToJSON)(value.deviceType),
        'supportedExternalDevices': value.supportedExternalDevices === undefined ? undefined : (value.supportedExternalDevices.map(HotelExternalDevicesType_1.HotelExternalDevicesTypeToJSON)),
    };
}
exports.ConfiguredExternalDevicesToJSON = ConfiguredExternalDevicesToJSON;
