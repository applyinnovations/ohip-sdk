"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionCodeInfoTypeToJSON = exports.TransactionCodeInfoTypeFromJSONTyped = exports.TransactionCodeInfoTypeFromJSON = exports.instanceOfTransactionCodeInfoType = void 0;
const runtime_1 = require("../runtime");
const ItemizerType_1 = require("./ItemizerType");
const PostingAccountType_1 = require("./PostingAccountType");
const TransactionCodeDetailType_1 = require("./TransactionCodeDetailType");
/**
 * Check if a given object implements the TransactionCodeInfoType interface.
 */
function instanceOfTransactionCodeInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTransactionCodeInfoType = instanceOfTransactionCodeInfoType;
function TransactionCodeInfoTypeFromJSON(json) {
    return TransactionCodeInfoTypeFromJSONTyped(json, false);
}
exports.TransactionCodeInfoTypeFromJSON = TransactionCodeInfoTypeFromJSON;
function TransactionCodeInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'allChargesCode': !(0, runtime_1.exists)(json, 'allChargesCode') ? undefined : json['allChargesCode'],
        'miniBarCode': !(0, runtime_1.exists)(json, 'miniBarCode') ? undefined : json['miniBarCode'],
        'cashCreditCardPosting': !(0, runtime_1.exists)(json, 'cashCreditCardPosting') ? undefined : json['cashCreditCardPosting'],
        'subtotalPosting': !(0, runtime_1.exists)(json, 'subtotalPosting') ? undefined : json['subtotalPosting'],
        'differencePosting': !(0, runtime_1.exists)(json, 'differencePosting') ? undefined : json['differencePosting'],
        'calcTrxCodePosting': !(0, runtime_1.exists)(json, 'calcTrxCodePosting') ? undefined : json['calcTrxCodePosting'],
        'numberOfDialedDigits': !(0, runtime_1.exists)(json, 'numberOfDialedDigits') ? undefined : json['numberOfDialedDigits'],
        'postingAccounts': !(0, runtime_1.exists)(json, 'postingAccounts') ? undefined : (json['postingAccounts'].map(PostingAccountType_1.PostingAccountTypeFromJSON)),
        'itemizers': !(0, runtime_1.exists)(json, 'itemizers') ? undefined : (json['itemizers'].map(ItemizerType_1.ItemizerTypeFromJSON)),
        'transactionCodes': !(0, runtime_1.exists)(json, 'transactionCodes') ? undefined : (json['transactionCodes'].map(TransactionCodeDetailType_1.TransactionCodeDetailTypeFromJSON)),
    };
}
exports.TransactionCodeInfoTypeFromJSONTyped = TransactionCodeInfoTypeFromJSONTyped;
function TransactionCodeInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'allChargesCode': value.allChargesCode,
        'miniBarCode': value.miniBarCode,
        'cashCreditCardPosting': value.cashCreditCardPosting,
        'subtotalPosting': value.subtotalPosting,
        'differencePosting': value.differencePosting,
        'calcTrxCodePosting': value.calcTrxCodePosting,
        'numberOfDialedDigits': value.numberOfDialedDigits,
        'postingAccounts': value.postingAccounts === undefined ? undefined : (value.postingAccounts.map(PostingAccountType_1.PostingAccountTypeToJSON)),
        'itemizers': value.itemizers === undefined ? undefined : (value.itemizers.map(ItemizerType_1.ItemizerTypeToJSON)),
        'transactionCodes': value.transactionCodes === undefined ? undefined : (value.transactionCodes.map(TransactionCodeDetailType_1.TransactionCodeDetailTypeToJSON)),
    };
}
exports.TransactionCodeInfoTypeToJSON = TransactionCodeInfoTypeToJSON;
