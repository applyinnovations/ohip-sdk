"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportedExternalDeviceTypeToJSON = exports.SupportedExternalDeviceTypeFromJSONTyped = exports.SupportedExternalDeviceTypeFromJSON = exports.instanceOfSupportedExternalDeviceType = void 0;
const runtime_1 = require("../runtime");
const DeviceCode_1 = require("./DeviceCode");
const DeviceType_1 = require("./DeviceType");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the SupportedExternalDeviceType interface.
 */
function instanceOfSupportedExternalDeviceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSupportedExternalDeviceType = instanceOfSupportedExternalDeviceType;
function SupportedExternalDeviceTypeFromJSON(json) {
    return SupportedExternalDeviceTypeFromJSONTyped(json, false);
}
exports.SupportedExternalDeviceTypeFromJSON = SupportedExternalDeviceTypeFromJSON;
function SupportedExternalDeviceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'deviceType': !(0, runtime_1.exists)(json, 'deviceType') ? undefined : (0, DeviceType_1.DeviceTypeFromJSON)(json['deviceType']),
        'deviceCode': !(0, runtime_1.exists)(json, 'deviceCode') ? undefined : (0, DeviceCode_1.DeviceCodeFromJSON)(json['deviceCode']),
        'deviceArea': !(0, runtime_1.exists)(json, 'deviceArea') ? undefined : json['deviceArea'],
        'displayName': !(0, runtime_1.exists)(json, 'displayName') ? undefined : json['displayName'],
        'mobileYN': !(0, runtime_1.exists)(json, 'mobileYN') ? undefined : json['mobileYN'],
        'desktopYN': !(0, runtime_1.exists)(json, 'desktopYN') ? undefined : json['desktopYN'],
        'registerAddress': !(0, runtime_1.exists)(json, 'registerAddress') ? undefined : json['registerAddress'],
        'deviceValue': !(0, runtime_1.exists)(json, 'deviceValue') ? undefined : json['deviceValue'],
        'fiscalPartnerCode': !(0, runtime_1.exists)(json, 'fiscalPartnerCode') ? undefined : json['fiscalPartnerCode'],
        'primary': !(0, runtime_1.exists)(json, 'primary') ? undefined : json['primary'],
        'active': !(0, runtime_1.exists)(json, 'active') ? undefined : json['active'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'label': !(0, runtime_1.exists)(json, 'label') ? undefined : json['label'],
        'translatableLabel': !(0, runtime_1.exists)(json, 'translatableLabel') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['translatableLabel']),
        'iDEditable': !(0, runtime_1.exists)(json, 'iDEditable') ? undefined : json['iDEditable'],
    };
}
exports.SupportedExternalDeviceTypeFromJSONTyped = SupportedExternalDeviceTypeFromJSONTyped;
function SupportedExternalDeviceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'deviceType': (0, DeviceType_1.DeviceTypeToJSON)(value.deviceType),
        'deviceCode': (0, DeviceCode_1.DeviceCodeToJSON)(value.deviceCode),
        'deviceArea': value.deviceArea,
        'displayName': value.displayName,
        'mobileYN': value.mobileYN,
        'desktopYN': value.desktopYN,
        'registerAddress': value.registerAddress,
        'deviceValue': value.deviceValue,
        'fiscalPartnerCode': value.fiscalPartnerCode,
        'primary': value.primary,
        'active': value.active,
        'id': value.id,
        'label': value.label,
        'translatableLabel': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.translatableLabel),
        'iDEditable': value.iDEditable,
    };
}
exports.SupportedExternalDeviceTypeToJSON = SupportedExternalDeviceTypeToJSON;
