/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DataLineType } from './DataLineType';
import type { RoomMaskSetupType } from './RoomMaskSetupType';
/**
 *
 * @export
 * @interface ImportInterfaceRoomsType
 */
export interface ImportInterfaceRoomsType {
    /**
     * Hotel Code to which the Interface Room belongs to.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    hotelId?: string;
    /**
     * Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    logo?: string;
    /**
     *
     * @type {DataLineType}
     * @memberof ImportInterfaceRoomsType
     */
    dataLine?: DataLineType;
    /**
     * Number of lines to use for the import of a Hotel Interface Room.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    numberOfLines?: number;
    /**
     * Number of lines to use for the import of a Hotel Interface Room.
     * @type {boolean}
     * @memberof ImportInterfaceRoomsType
     */
    removeLeadingZeros?: boolean;
    /**
     * Prefix for the Hotel Interface Room number for Line 1.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line1Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 1.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line1AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 2.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line2Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 2.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line2AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 3.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line3Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 3.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line3AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 4.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line4Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 4.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line4AddTo?: number;
    /**
     * Concatenated label of Hotel Room Categories, which will be imported to the Hotel Interface.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    selectedRoomTypes?: string;
    /**
     * Mask configurations for different line types.
     * @type {Array<RoomMaskSetupType>}
     * @memberof ImportInterfaceRoomsType
     */
    maskLines?: Array<RoomMaskSetupType>;
}
/**
 * Check if a given object implements the ImportInterfaceRoomsType interface.
 */
export declare function instanceOfImportInterfaceRoomsType(value: object): boolean;
export declare function ImportInterfaceRoomsTypeFromJSON(json: any): ImportInterfaceRoomsType;
export declare function ImportInterfaceRoomsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportInterfaceRoomsType;
export declare function ImportInterfaceRoomsTypeToJSON(value?: ImportInterfaceRoomsType | null): any;
