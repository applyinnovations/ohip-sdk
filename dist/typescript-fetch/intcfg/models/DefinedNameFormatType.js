"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefinedNameFormatTypeToJSON = exports.DefinedNameFormatTypeFromJSONTyped = exports.DefinedNameFormatTypeFromJSON = exports.instanceOfDefinedNameFormatType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the DefinedNameFormatType interface.
 */
function instanceOfDefinedNameFormatType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDefinedNameFormatType = instanceOfDefinedNameFormatType;
function DefinedNameFormatTypeFromJSON(json) {
    return DefinedNameFormatTypeFromJSONTyped(json, false);
}
exports.DefinedNameFormatTypeFromJSON = DefinedNameFormatTypeFromJSON;
function DefinedNameFormatTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'definedFormatId': !(0, runtime_1.exists)(json, 'definedFormatId') ? undefined : json['definedFormatId'],
        'expressionTable': !(0, runtime_1.exists)(json, 'expressionTable') ? undefined : json['expressionTable'],
        'expression': !(0, runtime_1.exists)(json, 'expression') ? undefined : json['expression'],
        'logo': !(0, runtime_1.exists)(json, 'logo') ? undefined : json['logo'],
    };
}
exports.DefinedNameFormatTypeFromJSONTyped = DefinedNameFormatTypeFromJSONTyped;
function DefinedNameFormatTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'definedFormatId': value.definedFormatId,
        'expressionTable': value.expressionTable,
        'expression': value.expression,
        'logo': value.logo,
    };
}
exports.DefinedNameFormatTypeToJSON = DefinedNameFormatTypeToJSON;
