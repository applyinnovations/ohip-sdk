"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceRightTypeToJSON = exports.InterfaceRightTypeFromJSONTyped = exports.InterfaceRightTypeFromJSON = exports.instanceOfInterfaceRightType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the InterfaceRightType interface.
 */
function instanceOfInterfaceRightType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfInterfaceRightType = instanceOfInterfaceRightType;
function InterfaceRightTypeFromJSON(json) {
    return InterfaceRightTypeFromJSONTyped(json, false);
}
exports.InterfaceRightTypeFromJSON = InterfaceRightTypeFromJSON;
function InterfaceRightTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['interfaceId']),
        'interfaceRightDescription': !(0, runtime_1.exists)(json, 'interfaceRightDescription') ? undefined : json['interfaceRightDescription'],
        'right': !(0, runtime_1.exists)(json, 'right') ? undefined : json['right'],
    };
}
exports.InterfaceRightTypeFromJSONTyped = InterfaceRightTypeFromJSONTyped;
function InterfaceRightTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'description': value.description,
        'hotelId': value.hotelId,
        'interfaceId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.interfaceId),
        'interfaceRightDescription': value.interfaceRightDescription,
        'right': value.right,
    };
}
exports.InterfaceRightTypeToJSON = InterfaceRightTypeToJSON;
