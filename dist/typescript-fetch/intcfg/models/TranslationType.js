"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationTypeToJSON = exports.TranslationTypeFromJSONTyped = exports.TranslationTypeFromJSON = exports.instanceOfTranslationType = void 0;
const runtime_1 = require("../runtime");
const InterfaceControlArticleType_1 = require("./InterfaceControlArticleType");
const InterfaceControlCfgType_1 = require("./InterfaceControlCfgType");
const InterfaceControlLangType_1 = require("./InterfaceControlLangType");
const InterfaceControlSpecType_1 = require("./InterfaceControlSpecType");
/**
 * Check if a given object implements the TranslationType interface.
 */
function instanceOfTranslationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTranslationType = instanceOfTranslationType;
function TranslationTypeFromJSON(json) {
    return TranslationTypeFromJSONTyped(json, false);
}
exports.TranslationTypeFromJSON = TranslationTypeFromJSON;
function TranslationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'guestNoLength': !(0, runtime_1.exists)(json, 'guestNoLength') ? undefined : json['guestNoLength'],
        'guestMessageIdLength': !(0, runtime_1.exists)(json, 'guestMessageIdLength') ? undefined : json['guestMessageIdLength'],
        'groupNoLength': !(0, runtime_1.exists)(json, 'groupNoLength') ? undefined : json['groupNoLength'],
        'defaultCharge': !(0, runtime_1.exists)(json, 'defaultCharge') ? undefined : json['defaultCharge'],
        'configuation': !(0, runtime_1.exists)(json, 'configuation') ? undefined : (json['configuation'].map(InterfaceControlCfgType_1.InterfaceControlCfgTypeFromJSON)),
        'articles': !(0, runtime_1.exists)(json, 'articles') ? undefined : (json['articles'].map(InterfaceControlArticleType_1.InterfaceControlArticleTypeFromJSON)),
        'specifications': !(0, runtime_1.exists)(json, 'specifications') ? undefined : (json['specifications'].map(InterfaceControlSpecType_1.InterfaceControlSpecTypeFromJSON)),
        'languages': !(0, runtime_1.exists)(json, 'languages') ? undefined : (json['languages'].map(InterfaceControlLangType_1.InterfaceControlLangTypeFromJSON)),
    };
}
exports.TranslationTypeFromJSONTyped = TranslationTypeFromJSONTyped;
function TranslationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'guestNoLength': value.guestNoLength,
        'guestMessageIdLength': value.guestMessageIdLength,
        'groupNoLength': value.groupNoLength,
        'defaultCharge': value.defaultCharge,
        'configuation': value.configuation === undefined ? undefined : (value.configuation.map(InterfaceControlCfgType_1.InterfaceControlCfgTypeToJSON)),
        'articles': value.articles === undefined ? undefined : (value.articles.map(InterfaceControlArticleType_1.InterfaceControlArticleTypeToJSON)),
        'specifications': value.specifications === undefined ? undefined : (value.specifications.map(InterfaceControlSpecType_1.InterfaceControlSpecTypeToJSON)),
        'languages': value.languages === undefined ? undefined : (value.languages.map(InterfaceControlLangType_1.InterfaceControlLangTypeToJSON)),
    };
}
exports.TranslationTypeToJSON = TranslationTypeToJSON;
