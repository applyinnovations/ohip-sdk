"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelInterfaceErrorTypeToJSON = exports.HotelInterfaceErrorTypeFromJSONTyped = exports.HotelInterfaceErrorTypeFromJSON = exports.instanceOfHotelInterfaceErrorType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the HotelInterfaceErrorType interface.
 */
function instanceOfHotelInterfaceErrorType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelInterfaceErrorType = instanceOfHotelInterfaceErrorType;
function HotelInterfaceErrorTypeFromJSON(json) {
    return HotelInterfaceErrorTypeFromJSONTyped(json, false);
}
exports.HotelInterfaceErrorTypeFromJSON = HotelInterfaceErrorTypeFromJSON;
function HotelInterfaceErrorTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'actionName': !(0, runtime_1.exists)(json, 'actionName') ? undefined : json['actionName'],
        'error': !(0, runtime_1.exists)(json, 'error') ? undefined : json['error'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'ifcType': !(0, runtime_1.exists)(json, 'ifcType') ? undefined : json['ifcType'],
        'insertDate': !(0, runtime_1.exists)(json, 'insertDate') ? undefined : json['insertDate'],
        'logo': !(0, runtime_1.exists)(json, 'logo') ? undefined : json['logo'],
        'message': !(0, runtime_1.exists)(json, 'message') ? undefined : json['message'],
        'resvNameId': !(0, runtime_1.exists)(json, 'resvNameId') ? undefined : json['resvNameId'],
    };
}
exports.HotelInterfaceErrorTypeFromJSONTyped = HotelInterfaceErrorTypeFromJSONTyped;
function HotelInterfaceErrorTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'actionName': value.actionName,
        'error': value.error,
        'hotelId': value.hotelId,
        'ifcType': value.ifcType,
        'insertDate': value.insertDate,
        'logo': value.logo,
        'message': value.message,
        'resvNameId': value.resvNameId,
    };
}
exports.HotelInterfaceErrorTypeToJSON = HotelInterfaceErrorTypeToJSON;
