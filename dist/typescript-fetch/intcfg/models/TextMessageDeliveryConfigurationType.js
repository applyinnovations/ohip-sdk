"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextMessageDeliveryConfigurationTypeToJSON = exports.TextMessageDeliveryConfigurationTypeFromJSONTyped = exports.TextMessageDeliveryConfigurationTypeFromJSON = exports.instanceOfTextMessageDeliveryConfigurationType = void 0;
const runtime_1 = require("../runtime");
const TextDeliveryMethodType_1 = require("./TextDeliveryMethodType");
const UrlFormatType_1 = require("./UrlFormatType");
/**
 * Check if a given object implements the TextMessageDeliveryConfigurationType interface.
 */
function instanceOfTextMessageDeliveryConfigurationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTextMessageDeliveryConfigurationType = instanceOfTextMessageDeliveryConfigurationType;
function TextMessageDeliveryConfigurationTypeFromJSON(json) {
    return TextMessageDeliveryConfigurationTypeFromJSONTyped(json, false);
}
exports.TextMessageDeliveryConfigurationTypeFromJSON = TextMessageDeliveryConfigurationTypeFromJSON;
function TextMessageDeliveryConfigurationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'userId': !(0, runtime_1.exists)(json, 'userId') ? undefined : json['userId'],
        'serverName': !(0, runtime_1.exists)(json, 'serverName') ? undefined : json['serverName'],
        'account': !(0, runtime_1.exists)(json, 'account') ? undefined : json['account'],
        'password': !(0, runtime_1.exists)(json, 'password') ? undefined : json['password'],
        'timeOut': !(0, runtime_1.exists)(json, 'timeOut') ? undefined : json['timeOut'],
        'url': !(0, runtime_1.exists)(json, 'url') ? undefined : json['url'],
        'uRLParameter': !(0, runtime_1.exists)(json, 'uRLParameter') ? undefined : (0, UrlFormatType_1.UrlFormatTypeFromJSON)(json['uRLParameter']),
        'format': !(0, runtime_1.exists)(json, 'format') ? undefined : json['format'],
        'message': !(0, runtime_1.exists)(json, 'message') ? undefined : json['message'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, TextDeliveryMethodType_1.TextDeliveryMethodTypeFromJSON)(json['type']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
    };
}
exports.TextMessageDeliveryConfigurationTypeFromJSONTyped = TextMessageDeliveryConfigurationTypeFromJSONTyped;
function TextMessageDeliveryConfigurationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'userId': value.userId,
        'serverName': value.serverName,
        'account': value.account,
        'password': value.password,
        'timeOut': value.timeOut,
        'url': value.url,
        'uRLParameter': (0, UrlFormatType_1.UrlFormatTypeToJSON)(value.uRLParameter),
        'format': value.format,
        'message': value.message,
        'type': (0, TextDeliveryMethodType_1.TextDeliveryMethodTypeToJSON)(value.type),
        'hotelId': value.hotelId,
    };
}
exports.TextMessageDeliveryConfigurationTypeToJSON = TextMessageDeliveryConfigurationTypeToJSON;
