"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceMappingTypeToJSON = exports.DeviceMappingTypeFromJSONTyped = exports.DeviceMappingTypeFromJSON = exports.instanceOfDeviceMappingType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the DeviceMappingType interface.
 */
function instanceOfDeviceMappingType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDeviceMappingType = instanceOfDeviceMappingType;
function DeviceMappingTypeFromJSON(json) {
    return DeviceMappingTypeFromJSONTyped(json, false);
}
exports.DeviceMappingTypeFromJSON = DeviceMappingTypeFromJSON;
function DeviceMappingTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'codeType': !(0, runtime_1.exists)(json, 'codeType') ? undefined : json['codeType'],
        'externalCode': !(0, runtime_1.exists)(json, 'externalCode') ? undefined : json['externalCode'],
        'displayName': !(0, runtime_1.exists)(json, 'displayName') ? undefined : json['displayName'],
        'operaCode': !(0, runtime_1.exists)(json, 'operaCode') ? undefined : json['operaCode'],
    };
}
exports.DeviceMappingTypeFromJSONTyped = DeviceMappingTypeFromJSONTyped;
function DeviceMappingTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'codeType': value.codeType,
        'externalCode': value.externalCode,
        'displayName': value.displayName,
        'operaCode': value.operaCode,
    };
}
exports.DeviceMappingTypeToJSON = DeviceMappingTypeToJSON;
