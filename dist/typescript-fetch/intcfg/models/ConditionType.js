"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionTypeToJSON = exports.ConditionTypeFromJSONTyped = exports.ConditionTypeFromJSON = exports.instanceOfConditionType = void 0;
const runtime_1 = require("../runtime");
const ExpressionFieldType_1 = require("./ExpressionFieldType");
const ExpressionOperatorType_1 = require("./ExpressionOperatorType");
const ExpressionParameterType_1 = require("./ExpressionParameterType");
const LogicalOperatorType_1 = require("./LogicalOperatorType");
/**
 * Check if a given object implements the ConditionType interface.
 */
function instanceOfConditionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConditionType = instanceOfConditionType;
function ConditionTypeFromJSON(json) {
    return ConditionTypeFromJSONTyped(json, false);
}
exports.ConditionTypeFromJSON = ConditionTypeFromJSON;
function ConditionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'leftExpression': !(0, runtime_1.exists)(json, 'leftExpression') ? undefined : (0, ExpressionFieldType_1.ExpressionFieldTypeFromJSON)(json['leftExpression']),
        'operator': !(0, runtime_1.exists)(json, 'operator') ? undefined : (0, ExpressionOperatorType_1.ExpressionOperatorTypeFromJSON)(json['operator']),
        'rightExpression': !(0, runtime_1.exists)(json, 'rightExpression') ? undefined : (0, ExpressionParameterType_1.ExpressionParameterTypeFromJSON)(json['rightExpression']),
        'logicalOperator': !(0, runtime_1.exists)(json, 'logicalOperator') ? undefined : (0, LogicalOperatorType_1.LogicalOperatorTypeFromJSON)(json['logicalOperator']),
    };
}
exports.ConditionTypeFromJSONTyped = ConditionTypeFromJSONTyped;
function ConditionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'leftExpression': (0, ExpressionFieldType_1.ExpressionFieldTypeToJSON)(value.leftExpression),
        'operator': (0, ExpressionOperatorType_1.ExpressionOperatorTypeToJSON)(value.operator),
        'rightExpression': (0, ExpressionParameterType_1.ExpressionParameterTypeToJSON)(value.rightExpression),
        'logicalOperator': (0, LogicalOperatorType_1.LogicalOperatorTypeToJSON)(value.logicalOperator),
    };
}
exports.ConditionTypeToJSON = ConditionTypeToJSON;
