"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceUnitChargeTypeToJSON = exports.InterfaceUnitChargeTypeFromJSONTyped = exports.InterfaceUnitChargeTypeFromJSON = exports.instanceOfInterfaceUnitChargeType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the InterfaceUnitChargeType interface.
 */
function instanceOfInterfaceUnitChargeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfInterfaceUnitChargeType = instanceOfInterfaceUnitChargeType;
function InterfaceUnitChargeTypeFromJSON(json) {
    return InterfaceUnitChargeTypeFromJSONTyped(json, false);
}
exports.InterfaceUnitChargeTypeFromJSON = InterfaceUnitChargeTypeFromJSON;
function InterfaceUnitChargeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'trunkId': !(0, runtime_1.exists)(json, 'trunkId') ? undefined : json['trunkId'],
        'lineType': !(0, runtime_1.exists)(json, 'lineType') ? undefined : json['lineType'],
        'vipCode': !(0, runtime_1.exists)(json, 'vipCode') ? undefined : json['vipCode'],
        'startUnit': !(0, runtime_1.exists)(json, 'startUnit') ? undefined : json['startUnit'],
        'endUnit': !(0, runtime_1.exists)(json, 'endUnit') ? undefined : json['endUnit'],
        'pricePerUnit': !(0, runtime_1.exists)(json, 'pricePerUnit') ? undefined : json['pricePerUnit'],
    };
}
exports.InterfaceUnitChargeTypeFromJSONTyped = InterfaceUnitChargeTypeFromJSONTyped;
function InterfaceUnitChargeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'trunkId': value.trunkId,
        'lineType': value.lineType,
        'vipCode': value.vipCode,
        'startUnit': value.startUnit,
        'endUnit': value.endUnit,
        'pricePerUnit': value.pricePerUnit,
    };
}
exports.InterfaceUnitChargeTypeToJSON = InterfaceUnitChargeTypeToJSON;
