"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionFieldTypeToJSON = exports.ExpressionFieldTypeFromJSONTyped = exports.ExpressionFieldTypeFromJSON = exports.instanceOfExpressionFieldType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the ExpressionFieldType interface.
 */
function instanceOfExpressionFieldType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExpressionFieldType = instanceOfExpressionFieldType;
function ExpressionFieldTypeFromJSON(json) {
    return ExpressionFieldTypeFromJSONTyped(json, false);
}
exports.ExpressionFieldTypeFromJSON = ExpressionFieldTypeFromJSON;
function ExpressionFieldTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'fieldName': !(0, runtime_1.exists)(json, 'fieldName') ? undefined : json['fieldName'],
        'fieldDescription': !(0, runtime_1.exists)(json, 'fieldDescription') ? undefined : json['fieldDescription'],
        'tableName': !(0, runtime_1.exists)(json, 'tableName') ? undefined : json['tableName'],
        'virtual': !(0, runtime_1.exists)(json, 'virtual') ? undefined : json['virtual'],
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : json['dataType'],
        'lovSelected': !(0, runtime_1.exists)(json, 'lovSelected') ? undefined : json['lovSelected'],
    };
}
exports.ExpressionFieldTypeFromJSONTyped = ExpressionFieldTypeFromJSONTyped;
function ExpressionFieldTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'fieldName': value.fieldName,
        'fieldDescription': value.fieldDescription,
        'tableName': value.tableName,
        'virtual': value.virtual,
        'dataType': value.dataType,
        'lovSelected': value.lovSelected,
    };
}
exports.ExpressionFieldTypeToJSON = ExpressionFieldTypeToJSON;
