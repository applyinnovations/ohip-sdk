"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceExportDataDetailTypeToJSON = exports.InterfaceExportDataDetailTypeFromJSONTyped = exports.InterfaceExportDataDetailTypeFromJSON = exports.instanceOfInterfaceExportDataDetailType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the InterfaceExportDataDetailType interface.
 */
function instanceOfInterfaceExportDataDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfInterfaceExportDataDetailType = instanceOfInterfaceExportDataDetailType;
function InterfaceExportDataDetailTypeFromJSON(json) {
    return InterfaceExportDataDetailTypeFromJSONTyped(json, false);
}
exports.InterfaceExportDataDetailTypeFromJSON = InterfaceExportDataDetailTypeFromJSON;
function InterfaceExportDataDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'sourceTableName': !(0, runtime_1.exists)(json, 'sourceTableName') ? undefined : json['sourceTableName'],
        'columnName': !(0, runtime_1.exists)(json, 'columnName') ? undefined : json['columnName'],
        'dataType': !(0, runtime_1.exists)(json, 'dataType') ? undefined : json['dataType'],
        'dataLength': !(0, runtime_1.exists)(json, 'dataLength') ? undefined : json['dataLength'],
        'xMLTagName': !(0, runtime_1.exists)(json, 'xMLTagName') ? undefined : json['xMLTagName'],
        'columnSelected': !(0, runtime_1.exists)(json, 'columnSelected') ? undefined : json['columnSelected'],
    };
}
exports.InterfaceExportDataDetailTypeFromJSONTyped = InterfaceExportDataDetailTypeFromJSONTyped;
function InterfaceExportDataDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'sourceTableName': value.sourceTableName,
        'columnName': value.columnName,
        'dataType': value.dataType,
        'dataLength': value.dataLength,
        'xMLTagName': value.xMLTagName,
        'columnSelected': value.columnSelected,
    };
}
exports.InterfaceExportDataDetailTypeToJSON = InterfaceExportDataDetailTypeToJSON;
