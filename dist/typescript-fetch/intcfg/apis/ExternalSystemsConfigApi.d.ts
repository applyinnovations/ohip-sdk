/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChangeDeliveryMethods, ChangeExternalDeviceConfigurations, ChangeInterfaceAccount, ChangeInterfaceMachine, ChangeInterfaceRight, ChangeInterfaceRoom, ChangeInterfaceRoomStatus, ChangeInterfaceUnitCharges, ChangeUDFMapping, ChangedDeliveryMethods, ChangedExternalDeviceConfigurations, ChangedInterfaceAccount, ChangedInterfaceMachine, ChangedInterfaceRight, ChangedInterfaceRoom, ChangedInterfaceRoomStatus, ChangedInterfaceUnitCharges, ChangedUDFMapping, CreateDeliveryMethods, CreateInterfaceAccount, CreateInterfaceRoom, CreatePublishers, FetchedConfiguredExternalDevices, FetchedDeliveryMethods, FetchedExternalDatabaseAvailableProperties, FetchedExternalDeviceConfigurations, FetchedHotelInterfaceControllerRegistry, FetchedHotelInterfaceDetails, FetchedHotelInterfaceErrors, FetchedHotelInterfaceFailedMessages, FetchedHotelInterfaceSchemas, FetchedHotelInterfaces, FetchedInterfaceUnitCharges, FetchedPublishers, FetchedUDFMappings, HotelInterface, ImportInterfaceRooms, InterfaceMachineType, InterfaceRightType, InterfaceRoomStatusType, InterfaceRoomType, OperaVersion, Status } from '../models/index';
export interface ClearCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    type?: DeleteDeliveryMethodsTypeEnum;
    options?: Set<DeleteDeliveryMethodsOptionsEnum>;
    configurationId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteHotelInterfaceRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    logo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInterfaceAccountRequest {
    accountId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoBalance?: boolean;
    paymentMethod?: string;
    account?: string;
    accountDescription?: string;
    salesOutlet?: string;
    trxCode?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInterfaceMachineRequest {
    machineId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    machine?: string;
    program?: string;
    controllerPort?: number;
    vncPort?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    right?: number;
    code?: string;
    description?: string;
    interfaceRightDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInterfaceRoomRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: string;
    roomNumber?: string;
    lineNumber?: string;
    oldLineNumber?: string;
    type?: string;
    dataLine?: DeleteInterfaceRoomDataLineEnum;
    dataLineId?: string;
    wakeUpCall?: boolean;
    doNotDisturb?: DeleteInterfaceRoomDoNotDisturbEnum;
    classOfService?: DeleteInterfaceRoomClassOfServiceEnum;
    directInwardDial?: DeleteInterfaceRoomDirectInwardDialEnum;
    messageWaiting?: DeleteInterfaceRoomMessageWaitingEnum;
    maskDialNumber?: DeleteInterfaceRoomMaskDialNumberEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteInterfaceRoomStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    entryCode?: string;
    status?: string;
    housekeepingStatus?: string;
    customRoomTranslation?: string;
    description?: string;
    interfaceRoomStatusId?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeletePublisherRequest {
    hotelId: string;
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subscriberHotelId?: string;
    code?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetConfiguredExternalDevicesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    active?: boolean;
    id?: string;
    idEditable?: boolean;
    label?: string;
    deviceType?: GetConfiguredExternalDevicesDeviceTypeEnum;
    deviceCode?: GetConfiguredExternalDevicesDeviceCodeEnum;
    deviceArea?: string;
    displayName?: string;
    mobileYN?: boolean;
    desktopYN?: boolean;
    registerAddress?: string;
    deviceValue?: string;
    parameterName?: string;
    parameterValue?: string;
    includeInactive?: boolean;
    fiscalPartnerCode?: string;
    partnerCode?: Array<string>;
    fetchInstruction?: GetConfiguredExternalDevicesFetchInstructionEnum;
    partnerPayloadType?: GetConfiguredExternalDevicesPartnerPayloadTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    croCode?: string;
    usages?: Set<GetDeliveryMethodsUsagesEnum>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExternalDatabaseAvailablePropertiesRequest {
    databaseId: string;
    interfaceId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    interfaceCodes?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExternalDeviceConfigurationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    active?: boolean;
    id?: string;
    idEditable?: boolean;
    label?: string;
    deviceType?: GetExternalDeviceConfigurationsDeviceTypeEnum;
    deviceCode?: GetExternalDeviceConfigurationsDeviceCodeEnum;
    deviceArea?: string;
    displayName?: string;
    mobileYN?: boolean;
    desktopYN?: boolean;
    registerAddress?: string;
    deviceValue?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceControllerRegistryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    machine?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceDetailsRequest {
    logo: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetHotelInterfaceDetailsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceErrorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceErrorsInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceFailedMessagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceFailedMessagesInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceSchemasRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceSchemasInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfacesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfacesInterfaceTypesEnum>;
    logosCodes?: Array<string>;
    includeInactive?: boolean;
    includeOutboundCode?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInterfaceMachinesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInterfaceRightsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInterfaceRoomStatusesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInterfaceRoomsRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromRoom?: string;
    toRoom?: string;
    fromLineType?: string;
    toLineType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInterfaceUnitChargesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    logo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPublishersRequest {
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetUDFMappingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    type?: string;
    uDFName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ImportInterfaceRoomsRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    importInterfaceRooms: ImportInterfaceRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createDeliveryMethods: CreateDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostHotelInterfaceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelInterface: HotelInterface;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostInterfaceAccountRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createInterfaceAccount: CreateInterfaceAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostInterfaceRoomRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createInterfaceRoom: CreateInterfaceRoom;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostPublishersRequest {
    hotelId: string;
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createPublishers: CreatePublishers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeDeliveryMethods: ChangeDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutExternalDeviceConfigurationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeExternalDeviceConfigurations: ChangeExternalDeviceConfigurations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutHotelInterfaceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelInterface: HotelInterface;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceAccountRequest {
    accountId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceAccount: ChangeInterfaceAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceMachineRequest {
    machineId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceMachine: ChangeInterfaceMachine;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRight: ChangeInterfaceRight;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceRoomRequest {
    roomId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRoom: ChangeInterfaceRoom;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceRoomStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRoomStatus: ChangeInterfaceRoomStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInterfaceUnitChargesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceUnitCharges: ChangeInterfaceUnitCharges;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutUDFMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUDFMapping: ChangeUDFMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ExternalSystemsConfigApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    clearCacheRaw(requestParameters: ClearCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    clearCache(requestParameters: ClearCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    deleteDeliveryMethodsRaw(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    deleteDeliveryMethods(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    deleteHotelInterfaceRaw(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    deleteHotelInterface(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceAccount</p>
     * Operation to remove interface account.
     */
    deleteInterfaceAccountRaw(requestParameters: DeleteInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceAccount</p>
     * Operation to remove interface account.
     */
    deleteInterfaceAccount(requestParameters: DeleteInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceMachine</p>
     * Operation to remove interface machine.
     */
    deleteInterfaceMachineRaw(requestParameters: DeleteInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceMachine</p>
     * Operation to remove interface machine.
     */
    deleteInterfaceMachine(requestParameters: DeleteInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    deleteInterfaceRightRaw(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    deleteInterfaceRight(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoom</p>
     * Operation to remove interface room.
     */
    deleteInterfaceRoomRaw(requestParameters: DeleteInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoom</p>
     * Operation to remove interface room.
     */
    deleteInterfaceRoom(requestParameters: DeleteInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoomStatus</p>
     * Operation to remove interface room status.
     */
    deleteInterfaceRoomStatusRaw(requestParameters: DeleteInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoomStatus</p>
     * Operation to remove interface room status.
     */
    deleteInterfaceRoomStatus(requestParameters: DeleteInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    deletePublisherRaw(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    deletePublisher(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>getConfiguredExternalDevices</p>
     * Operation to fetch configured external devices.
     */
    getConfiguredExternalDevicesRaw(requestParameters: GetConfiguredExternalDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedConfiguredExternalDevices>>;
    /**
     *  <p><strong>OperationId:</strong>getConfiguredExternalDevices</p>
     * Operation to fetch configured external devices.
     */
    getConfiguredExternalDevices(requestParameters: GetConfiguredExternalDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedConfiguredExternalDevices>;
    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    getDeliveryMethodsRaw(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedDeliveryMethods>>;
    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    getDeliveryMethods(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedDeliveryMethods>;
    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    getExternalDatabaseAvailablePropertiesRaw(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedExternalDatabaseAvailableProperties>>;
    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    getExternalDatabaseAvailableProperties(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedExternalDatabaseAvailableProperties>;
    /**
     *  <p><strong>OperationId:</strong>getExternalDeviceConfigurations</p>
     * Operation to fetch external device configurations.
     */
    getExternalDeviceConfigurationsRaw(requestParameters: GetExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedExternalDeviceConfigurations>>;
    /**
     *  <p><strong>OperationId:</strong>getExternalDeviceConfigurations</p>
     * Operation to fetch external device configurations.
     */
    getExternalDeviceConfigurations(requestParameters: GetExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedExternalDeviceConfigurations>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    getHotelInterfaceControllerRegistryRaw(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceControllerRegistry>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    getHotelInterfaceControllerRegistry(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceControllerRegistry>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceDetails</p>
     * Operation to fetch hotel interface details.
     */
    getHotelInterfaceDetailsRaw(requestParameters: GetHotelInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceDetails</p>
     * Operation to fetch hotel interface details.
     */
    getHotelInterfaceDetails(requestParameters: GetHotelInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceDetails>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    getHotelInterfaceErrorsRaw(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceErrors>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    getHotelInterfaceErrors(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceErrors>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    getHotelInterfaceFailedMessagesRaw(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceFailedMessages>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    getHotelInterfaceFailedMessages(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceFailedMessages>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    getHotelInterfaceSchemasRaw(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceSchemas>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    getHotelInterfaceSchemas(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceSchemas>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    getHotelInterfacesRaw(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaces>>;
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    getHotelInterfaces(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaces>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceMachines</p>
     * Operation to fetch interface machines.
     */
    getInterfaceMachinesRaw(requestParameters: GetInterfaceMachinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceMachineType>>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceMachines</p>
     * Operation to fetch interface machines.
     */
    getInterfaceMachines(requestParameters: GetInterfaceMachinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceMachineType>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    getInterfaceRightsRaw(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRightType>>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    getInterfaceRights(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRightType>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRoomStatuses</p>
     * Operation to fetch interface room statuses.
     */
    getInterfaceRoomStatusesRaw(requestParameters: GetInterfaceRoomStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRoomStatusType>>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRoomStatuses</p>
     * Operation to fetch interface room statuses.
     */
    getInterfaceRoomStatuses(requestParameters: GetInterfaceRoomStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRoomStatusType>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRooms</p>
     * Operation to fetch interface rooms.
     */
    getInterfaceRoomsRaw(requestParameters: GetInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRoomType>>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRooms</p>
     * Operation to fetch interface rooms.
     */
    getInterfaceRooms(requestParameters: GetInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRoomType>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceUnitCharges</p>
     * Operation to fetch interface unit charges.
     */
    getInterfaceUnitChargesRaw(requestParameters: GetInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedInterfaceUnitCharges>>;
    /**
     *  <p><strong>OperationId:</strong>getInterfaceUnitCharges</p>
     * Operation to fetch interface unit charges.
     */
    getInterfaceUnitCharges(requestParameters: GetInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedInterfaceUnitCharges>;
    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    getPublishersRaw(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedPublishers>>;
    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    getPublishers(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedPublishers>;
    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    getUDFMappingsRaw(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedUDFMappings>>;
    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    getUDFMappings(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedUDFMappings>;
    /**
     *  <p><strong>OperationId:</strong>importInterfaceRooms</p>
     * Operation to import interface rooms.
     */
    importInterfaceRoomsRaw(requestParameters: ImportInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>importInterfaceRooms</p>
     * Operation to import interface rooms.
     */
    importInterfaceRooms(requestParameters: ImportInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    pingRaw(requestParameters: PingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>>;
    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    ping(requestParameters: PingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion>;
    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    postDeliveryMethodsRaw(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    postDeliveryMethods(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postHotelInterface</p>
     * Operation to create hotel interface.
     */
    postHotelInterfaceRaw(requestParameters: PostHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postHotelInterface</p>
     * Operation to create hotel interface.
     */
    postHotelInterface(requestParameters: PostHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postInterfaceAccount</p>
     * Operation to create interface account.
     */
    postInterfaceAccountRaw(requestParameters: PostInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postInterfaceAccount</p>
     * Operation to create interface account.
     */
    postInterfaceAccount(requestParameters: PostInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postInterfaceRoom</p>
     * Operation to create interface room.
     */
    postInterfaceRoomRaw(requestParameters: PostInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postInterfaceRoom</p>
     * Operation to create interface room.
     */
    postInterfaceRoom(requestParameters: PostInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    postPublishersRaw(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    postPublishers(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    putDeliveryMethodsRaw(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedDeliveryMethods>>;
    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    putDeliveryMethods(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedDeliveryMethods>;
    /**
     *  <p><strong>OperationId:</strong>putExternalDeviceConfigurations</p>
     * Operation to change external device configurations.
     */
    putExternalDeviceConfigurationsRaw(requestParameters: PutExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedExternalDeviceConfigurations>>;
    /**
     *  <p><strong>OperationId:</strong>putExternalDeviceConfigurations</p>
     * Operation to change external device configurations.
     */
    putExternalDeviceConfigurations(requestParameters: PutExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedExternalDeviceConfigurations>;
    /**
     *  <p><strong>OperationId:</strong>putHotelInterface</p>
     * Operation to change hotel interface.
     */
    putHotelInterfaceRaw(requestParameters: PutHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putHotelInterface</p>
     * Operation to change hotel interface.
     */
    putHotelInterface(requestParameters: PutHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceAccount</p>
     * Operation to change interface account.
     */
    putInterfaceAccountRaw(requestParameters: PutInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceAccount>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceAccount</p>
     * Operation to change interface account.
     */
    putInterfaceAccount(requestParameters: PutInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceAccount>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceMachine</p>
     * Operation to change interface machine.
     */
    putInterfaceMachineRaw(requestParameters: PutInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceMachine>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceMachine</p>
     * Operation to change interface machine.
     */
    putInterfaceMachine(requestParameters: PutInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceMachine>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    putInterfaceRightRaw(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRight>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    putInterfaceRight(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRight>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoom</p>
     * Operation to change interface room.
     */
    putInterfaceRoomRaw(requestParameters: PutInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRoom>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoom</p>
     * Operation to change interface room.
     */
    putInterfaceRoom(requestParameters: PutInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRoom>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoomStatus</p>
     * Operation to change interface room status.
     */
    putInterfaceRoomStatusRaw(requestParameters: PutInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRoomStatus>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoomStatus</p>
     * Operation to change interface room status.
     */
    putInterfaceRoomStatus(requestParameters: PutInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRoomStatus>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceUnitCharges</p>
     * Operation to change interface unit charges.
     */
    putInterfaceUnitChargesRaw(requestParameters: PutInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceUnitCharges>>;
    /**
     *  <p><strong>OperationId:</strong>putInterfaceUnitCharges</p>
     * Operation to change interface unit charges.
     */
    putInterfaceUnitCharges(requestParameters: PutInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceUnitCharges>;
    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    putUDFMappingRaw(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedUDFMapping>>;
    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    putUDFMapping(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedUDFMapping>;
}
/**
 * @export
 */
export declare const DeleteDeliveryMethodsTypeEnum: {
    readonly General: "General";
    readonly QueueReservation: "QueueReservation";
    readonly Confirmation: "Confirmation";
    readonly GuestMessage: "GuestMessage";
    readonly BillingFolio: "BillingFolio";
    readonly QueueRush: "QueueRush";
    readonly Ar: "AR";
    readonly OtherFolio: "OtherFolio";
};
export type DeleteDeliveryMethodsTypeEnum = typeof DeleteDeliveryMethodsTypeEnum[keyof typeof DeleteDeliveryMethodsTypeEnum];
/**
 * @export
 */
export declare const DeleteDeliveryMethodsOptionsEnum: {
    readonly Email: "Email";
    readonly Fax: "Fax";
    readonly TextMessage: "TextMessage";
    readonly Sftp: "Sftp";
};
export type DeleteDeliveryMethodsOptionsEnum = typeof DeleteDeliveryMethodsOptionsEnum[keyof typeof DeleteDeliveryMethodsOptionsEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomDataLineEnum: {
    readonly In: "In";
    readonly Out: "Out";
};
export type DeleteInterfaceRoomDataLineEnum = typeof DeleteInterfaceRoomDataLineEnum[keyof typeof DeleteInterfaceRoomDataLineEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomDoNotDisturbEnum: {
    readonly NotAvailable: "NotAvailable";
    readonly AlwaysOn: "AlwaysOn";
    readonly AlwaysOff: "AlwaysOff";
    readonly FreelySwitchable: "FreelySwitchable";
};
export type DeleteInterfaceRoomDoNotDisturbEnum = typeof DeleteInterfaceRoomDoNotDisturbEnum[keyof typeof DeleteInterfaceRoomDoNotDisturbEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomClassOfServiceEnum: {
    readonly NotAvailable: "NotAvailable";
    readonly AlwaysOn: "AlwaysOn";
    readonly AlwaysOff: "AlwaysOff";
    readonly FreelySwitchable: "FreelySwitchable";
};
export type DeleteInterfaceRoomClassOfServiceEnum = typeof DeleteInterfaceRoomClassOfServiceEnum[keyof typeof DeleteInterfaceRoomClassOfServiceEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomDirectInwardDialEnum: {
    readonly NotAvailable: "NotAvailable";
    readonly AlwaysOn: "AlwaysOn";
    readonly AlwaysOff: "AlwaysOff";
    readonly FreelySwitchable: "FreelySwitchable";
};
export type DeleteInterfaceRoomDirectInwardDialEnum = typeof DeleteInterfaceRoomDirectInwardDialEnum[keyof typeof DeleteInterfaceRoomDirectInwardDialEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomMessageWaitingEnum: {
    readonly NotAvailable: "NotAvailable";
    readonly AlwaysOn: "AlwaysOn";
    readonly AlwaysOff: "AlwaysOff";
    readonly FreelySwitchable: "FreelySwitchable";
};
export type DeleteInterfaceRoomMessageWaitingEnum = typeof DeleteInterfaceRoomMessageWaitingEnum[keyof typeof DeleteInterfaceRoomMessageWaitingEnum];
/**
 * @export
 */
export declare const DeleteInterfaceRoomMaskDialNumberEnum: {
    readonly NoMasking: "NoMasking";
    readonly MaskLast2Digits: "MaskLast2Digits";
    readonly MaskLast4Digits: "MaskLast4Digits";
    readonly Mask4DigitsLeaveLast2Intact: "Mask4DigitsLeaveLast2Intact";
    readonly MaskAllExceptFirst2: "MaskAllExceptFirst2";
    readonly MaskAll: "MaskAll";
    readonly MaskingPerRoom: "MaskingPerRoom";
};
export type DeleteInterfaceRoomMaskDialNumberEnum = typeof DeleteInterfaceRoomMaskDialNumberEnum[keyof typeof DeleteInterfaceRoomMaskDialNumberEnum];
/**
 * @export
 */
export declare const GetConfiguredExternalDevicesDeviceTypeEnum: {
    readonly Scanner: "Scanner";
    readonly CreditCard: "CreditCard";
    readonly Fiscal: "Fiscal";
    readonly Device: "Device";
};
export type GetConfiguredExternalDevicesDeviceTypeEnum = typeof GetConfiguredExternalDevicesDeviceTypeEnum[keyof typeof GetConfiguredExternalDevicesDeviceTypeEnum];
/**
 * @export
 */
export declare const GetConfiguredExternalDevicesDeviceCodeEnum: {
    readonly TtiScannerMobile: "TtiScannerMobile";
    readonly TtiScannerDesktop: "TtiScannerDesktop";
    readonly SamsotechScanner: "SamsotechScanner";
    readonly GenScannerDesktop: "GenScannerDesktop";
    readonly GenScannerMobile: "GenScannerMobile";
    readonly ChipAndPin: "ChipAndPin";
    readonly FiscalTerminal: "FiscalTerminal";
    readonly Device: "Device";
};
export type GetConfiguredExternalDevicesDeviceCodeEnum = typeof GetConfiguredExternalDevicesDeviceCodeEnum[keyof typeof GetConfiguredExternalDevicesDeviceCodeEnum];
/**
 * @export
 */
export declare const GetConfiguredExternalDevicesFetchInstructionEnum: {
    readonly Default: "Default";
    readonly Partner: "Partner";
};
export type GetConfiguredExternalDevicesFetchInstructionEnum = typeof GetConfiguredExternalDevicesFetchInstructionEnum[keyof typeof GetConfiguredExternalDevicesFetchInstructionEnum];
/**
 * @export
 */
export declare const GetConfiguredExternalDevicesPartnerPayloadTypeEnum: {
    readonly CheckOut: "CheckOut";
    readonly FolioGeneration: "FolioGeneration";
};
export type GetConfiguredExternalDevicesPartnerPayloadTypeEnum = typeof GetConfiguredExternalDevicesPartnerPayloadTypeEnum[keyof typeof GetConfiguredExternalDevicesPartnerPayloadTypeEnum];
/**
 * @export
 */
export declare const GetDeliveryMethodsUsagesEnum: {
    readonly General: "General";
    readonly QueueReservation: "QueueReservation";
    readonly Confirmation: "Confirmation";
    readonly GuestMessage: "GuestMessage";
    readonly BillingFolio: "BillingFolio";
    readonly QueueRush: "QueueRush";
    readonly Ar: "AR";
    readonly OtherFolio: "OtherFolio";
};
export type GetDeliveryMethodsUsagesEnum = typeof GetDeliveryMethodsUsagesEnum[keyof typeof GetDeliveryMethodsUsagesEnum];
/**
 * @export
 */
export declare const GetExternalDeviceConfigurationsDeviceTypeEnum: {
    readonly Scanner: "Scanner";
    readonly CreditCard: "CreditCard";
    readonly Fiscal: "Fiscal";
    readonly Device: "Device";
};
export type GetExternalDeviceConfigurationsDeviceTypeEnum = typeof GetExternalDeviceConfigurationsDeviceTypeEnum[keyof typeof GetExternalDeviceConfigurationsDeviceTypeEnum];
/**
 * @export
 */
export declare const GetExternalDeviceConfigurationsDeviceCodeEnum: {
    readonly TtiScannerMobile: "TtiScannerMobile";
    readonly TtiScannerDesktop: "TtiScannerDesktop";
    readonly SamsotechScanner: "SamsotechScanner";
    readonly GenScannerDesktop: "GenScannerDesktop";
    readonly GenScannerMobile: "GenScannerMobile";
    readonly ChipAndPin: "ChipAndPin";
    readonly FiscalTerminal: "FiscalTerminal";
    readonly Device: "Device";
};
export type GetExternalDeviceConfigurationsDeviceCodeEnum = typeof GetExternalDeviceConfigurationsDeviceCodeEnum[keyof typeof GetExternalDeviceConfigurationsDeviceCodeEnum];
/**
 * @export
 */
export declare const GetHotelInterfaceDetailsFetchInstructionsEnum: {
    readonly PrimaryInfo: "PrimaryInfo";
    readonly AdditionalInfo: "AdditionalInfo";
    readonly GeneralInfo: "GeneralInfo";
    readonly CommunicationInfo: "CommunicationInfo";
    readonly IfcTranslation: "IfcTranslation";
    readonly IfcClassOfService: "IfcClassOfService";
    readonly IfcImportRooms: "IfcImportRooms";
    readonly WorkstationSetupInfo: "WorkstationSetupInfo";
    readonly PostingsInfo: "PostingsInfo";
    readonly CustomDataInfo: "CustomDataInfo";
    readonly ExportDataInfo: "ExportDataInfo";
    readonly TransactionCodesInfo: "TransactionCodesInfo";
};
export type GetHotelInterfaceDetailsFetchInstructionsEnum = typeof GetHotelInterfaceDetailsFetchInstructionsEnum[keyof typeof GetHotelInterfaceDetailsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetHotelInterfaceErrorsInterfaceTypesEnum: {
    readonly Bms: "Bms";
    readonly Cas: "Cas";
    readonly Ccw: "Ccw";
    readonly Dls: "Dls";
    readonly Eft: "Eft";
    readonly Exp: "Exp";
    readonly Mak: "Mak";
    readonly Mbs: "Mbs";
    readonly Msc: "Msc";
    readonly Pbx: "Pbx";
    readonly Pos: "Pos";
    readonly Svs: "Svs";
    readonly Tik: "Tik";
    readonly Vid: "Vid";
    readonly Vms: "Vms";
    readonly Www: "Www";
    readonly Xml: "Xml";
};
export type GetHotelInterfaceErrorsInterfaceTypesEnum = typeof GetHotelInterfaceErrorsInterfaceTypesEnum[keyof typeof GetHotelInterfaceErrorsInterfaceTypesEnum];
/**
 * @export
 */
export declare const GetHotelInterfaceFailedMessagesInterfaceTypesEnum: {
    readonly Bms: "Bms";
    readonly Cas: "Cas";
    readonly Ccw: "Ccw";
    readonly Dls: "Dls";
    readonly Eft: "Eft";
    readonly Exp: "Exp";
    readonly Mak: "Mak";
    readonly Mbs: "Mbs";
    readonly Msc: "Msc";
    readonly Pbx: "Pbx";
    readonly Pos: "Pos";
    readonly Svs: "Svs";
    readonly Tik: "Tik";
    readonly Vid: "Vid";
    readonly Vms: "Vms";
    readonly Www: "Www";
    readonly Xml: "Xml";
};
export type GetHotelInterfaceFailedMessagesInterfaceTypesEnum = typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum[keyof typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum];
/**
 * @export
 */
export declare const GetHotelInterfaceSchemasInterfaceTypesEnum: {
    readonly Bms: "Bms";
    readonly Cas: "Cas";
    readonly Ccw: "Ccw";
    readonly Dls: "Dls";
    readonly Eft: "Eft";
    readonly Exp: "Exp";
    readonly Mak: "Mak";
    readonly Mbs: "Mbs";
    readonly Msc: "Msc";
    readonly Pbx: "Pbx";
    readonly Pos: "Pos";
    readonly Svs: "Svs";
    readonly Tik: "Tik";
    readonly Vid: "Vid";
    readonly Vms: "Vms";
    readonly Www: "Www";
    readonly Xml: "Xml";
};
export type GetHotelInterfaceSchemasInterfaceTypesEnum = typeof GetHotelInterfaceSchemasInterfaceTypesEnum[keyof typeof GetHotelInterfaceSchemasInterfaceTypesEnum];
/**
 * @export
 */
export declare const GetHotelInterfacesInterfaceTypesEnum: {
    readonly Bms: "Bms";
    readonly Cas: "Cas";
    readonly Ccw: "Ccw";
    readonly Dls: "Dls";
    readonly Eft: "Eft";
    readonly Exp: "Exp";
    readonly Mak: "Mak";
    readonly Mbs: "Mbs";
    readonly Msc: "Msc";
    readonly Pbx: "Pbx";
    readonly Pos: "Pos";
    readonly Svs: "Svs";
    readonly Tik: "Tik";
    readonly Vid: "Vid";
    readonly Vms: "Vms";
    readonly Www: "Www";
    readonly Xml: "Xml";
};
export type GetHotelInterfacesInterfaceTypesEnum = typeof GetHotelInterfacesInterfaceTypesEnum[keyof typeof GetHotelInterfacesInterfaceTypesEnum];
