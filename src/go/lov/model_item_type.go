/*
OPERA Cloud List of Values Management API

APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lov

import (
	"encoding/json"
)

// checks if the ItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemType{}

// ItemType struct for ItemType
type ItemType struct {
	Active *bool `json:"active,omitempty"`
	Code *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Flexfields *ParametersType `json:"flexfields,omitempty"`
	Name *string `json:"name,omitempty"`
	ShortDescription *string `json:"shortDescription,omitempty"`
}

// NewItemType instantiates a new ItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemType() *ItemType {
	this := ItemType{}
	return &this
}

// NewItemTypeWithDefaults instantiates a new ItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemTypeWithDefaults() *ItemType {
	this := ItemType{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ItemType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ItemType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ItemType) SetActive(v bool) {
	o.Active = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ItemType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ItemType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ItemType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ItemType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ItemType) SetDescription(v string) {
	o.Description = &v
}

// GetFlexfields returns the Flexfields field value if set, zero value otherwise.
func (o *ItemType) GetFlexfields() ParametersType {
	if o == nil || IsNil(o.Flexfields) {
		var ret ParametersType
		return ret
	}
	return *o.Flexfields
}

// GetFlexfieldsOk returns a tuple with the Flexfields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetFlexfieldsOk() (*ParametersType, bool) {
	if o == nil || IsNil(o.Flexfields) {
		return nil, false
	}
	return o.Flexfields, true
}

// HasFlexfields returns a boolean if a field has been set.
func (o *ItemType) HasFlexfields() bool {
	if o != nil && !IsNil(o.Flexfields) {
		return true
	}

	return false
}

// SetFlexfields gets a reference to the given ParametersType and assigns it to the Flexfields field.
func (o *ItemType) SetFlexfields(v ParametersType) {
	o.Flexfields = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemType) SetName(v string) {
	o.Name = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ItemType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ItemType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ItemType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

func (o ItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Flexfields) {
		toSerialize["flexfields"] = o.Flexfields
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	return toSerialize, nil
}

type NullableItemType struct {
	value *ItemType
	isSet bool
}

func (v NullableItemType) Get() *ItemType {
	return v.value
}

func (v *NullableItemType) Set(val *ItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemType(val *ItemType) *NullableItemType {
	return &NullableItemType{value: val, isSet: true}
}

func (v NullableItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


