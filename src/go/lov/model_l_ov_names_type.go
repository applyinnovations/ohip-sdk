/*
OPERA Cloud List of Values Management API

APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lov

import (
	"encoding/json"
)

// checks if the LOVNamesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LOVNamesType{}

// LOVNamesType List of List of Value names along with all parameters applicable for the LOV.
type LOVNamesType struct {
	Items []LOVNameType
}

// NewLOVNamesType instantiates a new LOVNamesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLOVNamesType() *LOVNamesType {
	this := LOVNamesType{}
	return &this
}

// NewLOVNamesTypeWithDefaults instantiates a new LOVNamesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLOVNamesTypeWithDefaults() *LOVNamesType {
	this := LOVNamesType{}
	return &this
}

func (o LOVNamesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LOVNamesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *LOVNamesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableLOVNamesType struct {
	value LOVNamesType
	isSet bool
}

func (v NullableLOVNamesType) Get() LOVNamesType {
	return v.value
}

func (v *NullableLOVNamesType) Set(val LOVNamesType) {
	v.value = val
	v.isSet = true
}

func (v NullableLOVNamesType) IsSet() bool {
	return v.isSet
}

func (v *NullableLOVNamesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLOVNamesType(val LOVNamesType) *NullableLOVNamesType {
	return &NullableLOVNamesType{value: val, isSet: true}
}

func (v NullableLOVNamesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLOVNamesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


