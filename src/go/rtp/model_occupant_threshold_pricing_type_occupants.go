/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the OccupantThresholdPricingTypeOccupants type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OccupantThresholdPricingTypeOccupants{}

// OccupantThresholdPricingTypeOccupants Threshold for Occupants in the room.
type OccupantThresholdPricingTypeOccupants struct {
	// Amount to be charged after the threshold is reached.
	Amount *float32 `json:"amount,omitempty"`
	// Threshold value, after it is reached the corresponding amount will be charged.
	Threshold *int32 `json:"threshold,omitempty"`
}

// NewOccupantThresholdPricingTypeOccupants instantiates a new OccupantThresholdPricingTypeOccupants object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOccupantThresholdPricingTypeOccupants() *OccupantThresholdPricingTypeOccupants {
	this := OccupantThresholdPricingTypeOccupants{}
	return &this
}

// NewOccupantThresholdPricingTypeOccupantsWithDefaults instantiates a new OccupantThresholdPricingTypeOccupants object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOccupantThresholdPricingTypeOccupantsWithDefaults() *OccupantThresholdPricingTypeOccupants {
	this := OccupantThresholdPricingTypeOccupants{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *OccupantThresholdPricingTypeOccupants) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OccupantThresholdPricingTypeOccupants) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *OccupantThresholdPricingTypeOccupants) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *OccupantThresholdPricingTypeOccupants) SetAmount(v float32) {
	o.Amount = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *OccupantThresholdPricingTypeOccupants) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OccupantThresholdPricingTypeOccupants) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *OccupantThresholdPricingTypeOccupants) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *OccupantThresholdPricingTypeOccupants) SetThreshold(v int32) {
	o.Threshold = &v
}

func (o OccupantThresholdPricingTypeOccupants) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OccupantThresholdPricingTypeOccupants) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableOccupantThresholdPricingTypeOccupants struct {
	value *OccupantThresholdPricingTypeOccupants
	isSet bool
}

func (v NullableOccupantThresholdPricingTypeOccupants) Get() *OccupantThresholdPricingTypeOccupants {
	return v.value
}

func (v *NullableOccupantThresholdPricingTypeOccupants) Set(val *OccupantThresholdPricingTypeOccupants) {
	v.value = val
	v.isSet = true
}

func (v NullableOccupantThresholdPricingTypeOccupants) IsSet() bool {
	return v.isSet
}

func (v *NullableOccupantThresholdPricingTypeOccupants) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOccupantThresholdPricingTypeOccupants(val *OccupantThresholdPricingTypeOccupants) *NullableOccupantThresholdPricingTypeOccupants {
	return &NullableOccupantThresholdPricingTypeOccupants{value: val, isSet: true}
}

func (v NullableOccupantThresholdPricingTypeOccupants) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOccupantThresholdPricingTypeOccupants) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


