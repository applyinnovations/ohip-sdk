/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanMasterInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanMasterInfoType{}

// RatePlanMasterInfoType The Rate plan info type is used primarily by rate plan schedules to get basic rate plan header details.
type RatePlanMasterInfoType struct {
	// Flag to identify if Rate Code is Advanced Daily Base Rate Code
	AdvancedDailyBase *bool `json:"advancedDailyBase,omitempty"`
	// Is rate plan code of BAR Rate type?
	BARRate *bool `json:"bARRate,omitempty"`
	// Is rate plan code Complimentary?
	Complimentary *bool `json:"complimentary,omitempty"`
	// Currency code used by the rate plan.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Is rate plan code a daily rate?
	Daily *bool `json:"daily,omitempty"`
	// An amount that act as Floor value for Rate Plan.
	FloorAmount *float32 `json:"floorAmount,omitempty"`
	// Hotel Code of the rate plan.
	HotelId *string `json:"hotelId,omitempty"`
	// Is rate plan code for House Use?
	HouseUse *bool `json:"houseUse,omitempty"`
	PrimaryDetails *RatePlanPrimaryDetailsType `json:"primaryDetails,omitempty"`
	RatePlanBasedOnRates *RatePlanBasedOnRatesType `json:"ratePlanBasedOnRates,omitempty"`
	// Rate Plan Code of the rate plan.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	RateTiers *RateTiersType `json:"rateTiers,omitempty"`
	RoomTypeList *RateRoomTypeListType `json:"roomTypeList,omitempty"`
	// Is Rate plan tiered?
	Tiered *bool `json:"tiered,omitempty"`
}

// NewRatePlanMasterInfoType instantiates a new RatePlanMasterInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanMasterInfoType() *RatePlanMasterInfoType {
	this := RatePlanMasterInfoType{}
	return &this
}

// NewRatePlanMasterInfoTypeWithDefaults instantiates a new RatePlanMasterInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanMasterInfoTypeWithDefaults() *RatePlanMasterInfoType {
	this := RatePlanMasterInfoType{}
	return &this
}

// GetAdvancedDailyBase returns the AdvancedDailyBase field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetAdvancedDailyBase() bool {
	if o == nil || IsNil(o.AdvancedDailyBase) {
		var ret bool
		return ret
	}
	return *o.AdvancedDailyBase
}

// GetAdvancedDailyBaseOk returns a tuple with the AdvancedDailyBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetAdvancedDailyBaseOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvancedDailyBase) {
		return nil, false
	}
	return o.AdvancedDailyBase, true
}

// HasAdvancedDailyBase returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasAdvancedDailyBase() bool {
	if o != nil && !IsNil(o.AdvancedDailyBase) {
		return true
	}

	return false
}

// SetAdvancedDailyBase gets a reference to the given bool and assigns it to the AdvancedDailyBase field.
func (o *RatePlanMasterInfoType) SetAdvancedDailyBase(v bool) {
	o.AdvancedDailyBase = &v
}

// GetBARRate returns the BARRate field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetBARRate() bool {
	if o == nil || IsNil(o.BARRate) {
		var ret bool
		return ret
	}
	return *o.BARRate
}

// GetBARRateOk returns a tuple with the BARRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetBARRateOk() (*bool, bool) {
	if o == nil || IsNil(o.BARRate) {
		return nil, false
	}
	return o.BARRate, true
}

// HasBARRate returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasBARRate() bool {
	if o != nil && !IsNil(o.BARRate) {
		return true
	}

	return false
}

// SetBARRate gets a reference to the given bool and assigns it to the BARRate field.
func (o *RatePlanMasterInfoType) SetBARRate(v bool) {
	o.BARRate = &v
}

// GetComplimentary returns the Complimentary field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetComplimentary() bool {
	if o == nil || IsNil(o.Complimentary) {
		var ret bool
		return ret
	}
	return *o.Complimentary
}

// GetComplimentaryOk returns a tuple with the Complimentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetComplimentaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Complimentary) {
		return nil, false
	}
	return o.Complimentary, true
}

// HasComplimentary returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasComplimentary() bool {
	if o != nil && !IsNil(o.Complimentary) {
		return true
	}

	return false
}

// SetComplimentary gets a reference to the given bool and assigns it to the Complimentary field.
func (o *RatePlanMasterInfoType) SetComplimentary(v bool) {
	o.Complimentary = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *RatePlanMasterInfoType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetDaily() bool {
	if o == nil || IsNil(o.Daily) {
		var ret bool
		return ret
	}
	return *o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetDailyOk() (*bool, bool) {
	if o == nil || IsNil(o.Daily) {
		return nil, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasDaily() bool {
	if o != nil && !IsNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given bool and assigns it to the Daily field.
func (o *RatePlanMasterInfoType) SetDaily(v bool) {
	o.Daily = &v
}

// GetFloorAmount returns the FloorAmount field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetFloorAmount() float32 {
	if o == nil || IsNil(o.FloorAmount) {
		var ret float32
		return ret
	}
	return *o.FloorAmount
}

// GetFloorAmountOk returns a tuple with the FloorAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetFloorAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.FloorAmount) {
		return nil, false
	}
	return o.FloorAmount, true
}

// HasFloorAmount returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasFloorAmount() bool {
	if o != nil && !IsNil(o.FloorAmount) {
		return true
	}

	return false
}

// SetFloorAmount gets a reference to the given float32 and assigns it to the FloorAmount field.
func (o *RatePlanMasterInfoType) SetFloorAmount(v float32) {
	o.FloorAmount = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RatePlanMasterInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHouseUse returns the HouseUse field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetHouseUse() bool {
	if o == nil || IsNil(o.HouseUse) {
		var ret bool
		return ret
	}
	return *o.HouseUse
}

// GetHouseUseOk returns a tuple with the HouseUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetHouseUseOk() (*bool, bool) {
	if o == nil || IsNil(o.HouseUse) {
		return nil, false
	}
	return o.HouseUse, true
}

// HasHouseUse returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasHouseUse() bool {
	if o != nil && !IsNil(o.HouseUse) {
		return true
	}

	return false
}

// SetHouseUse gets a reference to the given bool and assigns it to the HouseUse field.
func (o *RatePlanMasterInfoType) SetHouseUse(v bool) {
	o.HouseUse = &v
}

// GetPrimaryDetails returns the PrimaryDetails field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetPrimaryDetails() RatePlanPrimaryDetailsType {
	if o == nil || IsNil(o.PrimaryDetails) {
		var ret RatePlanPrimaryDetailsType
		return ret
	}
	return *o.PrimaryDetails
}

// GetPrimaryDetailsOk returns a tuple with the PrimaryDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetPrimaryDetailsOk() (*RatePlanPrimaryDetailsType, bool) {
	if o == nil || IsNil(o.PrimaryDetails) {
		return nil, false
	}
	return o.PrimaryDetails, true
}

// HasPrimaryDetails returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasPrimaryDetails() bool {
	if o != nil && !IsNil(o.PrimaryDetails) {
		return true
	}

	return false
}

// SetPrimaryDetails gets a reference to the given RatePlanPrimaryDetailsType and assigns it to the PrimaryDetails field.
func (o *RatePlanMasterInfoType) SetPrimaryDetails(v RatePlanPrimaryDetailsType) {
	o.PrimaryDetails = &v
}

// GetRatePlanBasedOnRates returns the RatePlanBasedOnRates field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetRatePlanBasedOnRates() RatePlanBasedOnRatesType {
	if o == nil || IsNil(o.RatePlanBasedOnRates) {
		var ret RatePlanBasedOnRatesType
		return ret
	}
	return *o.RatePlanBasedOnRates
}

// GetRatePlanBasedOnRatesOk returns a tuple with the RatePlanBasedOnRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetRatePlanBasedOnRatesOk() (*RatePlanBasedOnRatesType, bool) {
	if o == nil || IsNil(o.RatePlanBasedOnRates) {
		return nil, false
	}
	return o.RatePlanBasedOnRates, true
}

// HasRatePlanBasedOnRates returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasRatePlanBasedOnRates() bool {
	if o != nil && !IsNil(o.RatePlanBasedOnRates) {
		return true
	}

	return false
}

// SetRatePlanBasedOnRates gets a reference to the given RatePlanBasedOnRatesType and assigns it to the RatePlanBasedOnRates field.
func (o *RatePlanMasterInfoType) SetRatePlanBasedOnRates(v RatePlanBasedOnRatesType) {
	o.RatePlanBasedOnRates = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *RatePlanMasterInfoType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRateTiers returns the RateTiers field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetRateTiers() RateTiersType {
	if o == nil || IsNil(o.RateTiers) {
		var ret RateTiersType
		return ret
	}
	return *o.RateTiers
}

// GetRateTiersOk returns a tuple with the RateTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetRateTiersOk() (*RateTiersType, bool) {
	if o == nil || IsNil(o.RateTiers) {
		return nil, false
	}
	return o.RateTiers, true
}

// HasRateTiers returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasRateTiers() bool {
	if o != nil && !IsNil(o.RateTiers) {
		return true
	}

	return false
}

// SetRateTiers gets a reference to the given RateTiersType and assigns it to the RateTiers field.
func (o *RatePlanMasterInfoType) SetRateTiers(v RateTiersType) {
	o.RateTiers = &v
}

// GetRoomTypeList returns the RoomTypeList field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetRoomTypeList() RateRoomTypeListType {
	if o == nil || IsNil(o.RoomTypeList) {
		var ret RateRoomTypeListType
		return ret
	}
	return *o.RoomTypeList
}

// GetRoomTypeListOk returns a tuple with the RoomTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetRoomTypeListOk() (*RateRoomTypeListType, bool) {
	if o == nil || IsNil(o.RoomTypeList) {
		return nil, false
	}
	return o.RoomTypeList, true
}

// HasRoomTypeList returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasRoomTypeList() bool {
	if o != nil && !IsNil(o.RoomTypeList) {
		return true
	}

	return false
}

// SetRoomTypeList gets a reference to the given RateRoomTypeListType and assigns it to the RoomTypeList field.
func (o *RatePlanMasterInfoType) SetRoomTypeList(v RateRoomTypeListType) {
	o.RoomTypeList = &v
}

// GetTiered returns the Tiered field value if set, zero value otherwise.
func (o *RatePlanMasterInfoType) GetTiered() bool {
	if o == nil || IsNil(o.Tiered) {
		var ret bool
		return ret
	}
	return *o.Tiered
}

// GetTieredOk returns a tuple with the Tiered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanMasterInfoType) GetTieredOk() (*bool, bool) {
	if o == nil || IsNil(o.Tiered) {
		return nil, false
	}
	return o.Tiered, true
}

// HasTiered returns a boolean if a field has been set.
func (o *RatePlanMasterInfoType) HasTiered() bool {
	if o != nil && !IsNil(o.Tiered) {
		return true
	}

	return false
}

// SetTiered gets a reference to the given bool and assigns it to the Tiered field.
func (o *RatePlanMasterInfoType) SetTiered(v bool) {
	o.Tiered = &v
}

func (o RatePlanMasterInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanMasterInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdvancedDailyBase) {
		toSerialize["advancedDailyBase"] = o.AdvancedDailyBase
	}
	if !IsNil(o.BARRate) {
		toSerialize["bARRate"] = o.BARRate
	}
	if !IsNil(o.Complimentary) {
		toSerialize["complimentary"] = o.Complimentary
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Daily) {
		toSerialize["daily"] = o.Daily
	}
	if !IsNil(o.FloorAmount) {
		toSerialize["floorAmount"] = o.FloorAmount
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HouseUse) {
		toSerialize["houseUse"] = o.HouseUse
	}
	if !IsNil(o.PrimaryDetails) {
		toSerialize["primaryDetails"] = o.PrimaryDetails
	}
	if !IsNil(o.RatePlanBasedOnRates) {
		toSerialize["ratePlanBasedOnRates"] = o.RatePlanBasedOnRates
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RateTiers) {
		toSerialize["rateTiers"] = o.RateTiers
	}
	if !IsNil(o.RoomTypeList) {
		toSerialize["roomTypeList"] = o.RoomTypeList
	}
	if !IsNil(o.Tiered) {
		toSerialize["tiered"] = o.Tiered
	}
	return toSerialize, nil
}

type NullableRatePlanMasterInfoType struct {
	value *RatePlanMasterInfoType
	isSet bool
}

func (v NullableRatePlanMasterInfoType) Get() *RatePlanMasterInfoType {
	return v.value
}

func (v *NullableRatePlanMasterInfoType) Set(val *RatePlanMasterInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanMasterInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanMasterInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanMasterInfoType(val *RatePlanMasterInfoType) *NullableRatePlanMasterInfoType {
	return &NullableRatePlanMasterInfoType{value: val, isSet: true}
}

func (v NullableRatePlanMasterInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanMasterInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


