/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AvailabilityApiService AvailabilityApi service
type AvailabilityApiService service

type AvailabilityApiValidateRateCouponRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	couponCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AvailabilityApiValidateRateCouponRequest) Authorization(authorization string) AvailabilityApiValidateRateCouponRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AvailabilityApiValidateRateCouponRequest) XAppKey(xAppKey string) AvailabilityApiValidateRateCouponRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AvailabilityApiValidateRateCouponRequest) XHotelid(xHotelid string) AvailabilityApiValidateRateCouponRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r AvailabilityApiValidateRateCouponRequest) XExternalsystem(xExternalsystem string) AvailabilityApiValidateRateCouponRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AvailabilityApiValidateRateCouponRequest) AcceptLanguage(acceptLanguage string) AvailabilityApiValidateRateCouponRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AvailabilityApiValidateRateCouponRequest) Execute() (*PromotionCouponValidationDetails, *http.Response, error) {
	return r.ApiService.ValidateRateCouponExecute(r)
}

/*
ValidateRateCoupon Validate a coupon code

This API allows you to validate a coupon code. <p><strong>OperationId:</strong>validateRateCoupon</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param couponCode Coupon Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return AvailabilityApiValidateRateCouponRequest
*/
func (a *AvailabilityApiService) ValidateRateCoupon(ctx context.Context, couponCode string, hotelId string) AvailabilityApiValidateRateCouponRequest {
	return AvailabilityApiValidateRateCouponRequest{
		ApiService: a,
		ctx: ctx,
		couponCode: couponCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PromotionCouponValidationDetails
func (a *AvailabilityApiService) ValidateRateCouponExecute(r AvailabilityApiValidateRateCouponRequest) (*PromotionCouponValidationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PromotionCouponValidationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.ValidateRateCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rates/coupons/{couponCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"couponCode"+"}", url.PathEscape(parameterValueToString(r.couponCode, "couponCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.couponCode) < 1 {
		return localVarReturnValue, nil, reportError("couponCode must have at least 1 elements")
	}
	if strlen(r.couponCode) > 2000 {
		return localVarReturnValue, nil, reportError("couponCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvailabilityApiValidateRatePromotionRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	promotionCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AvailabilityApiValidateRatePromotionRequest) Authorization(authorization string) AvailabilityApiValidateRatePromotionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AvailabilityApiValidateRatePromotionRequest) XAppKey(xAppKey string) AvailabilityApiValidateRatePromotionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AvailabilityApiValidateRatePromotionRequest) XHotelid(xHotelid string) AvailabilityApiValidateRatePromotionRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r AvailabilityApiValidateRatePromotionRequest) XExternalsystem(xExternalsystem string) AvailabilityApiValidateRatePromotionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AvailabilityApiValidateRatePromotionRequest) AcceptLanguage(acceptLanguage string) AvailabilityApiValidateRatePromotionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AvailabilityApiValidateRatePromotionRequest) Execute() (*PromotionCouponValidationDetails, *http.Response, error) {
	return r.ApiService.ValidateRatePromotionExecute(r)
}

/*
ValidateRatePromotion Validate a promotion code

This API allows you to validate a promotion code. <p><strong>OperationId:</strong>validateRatePromotion</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionCode Promotion Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return AvailabilityApiValidateRatePromotionRequest
*/
func (a *AvailabilityApiService) ValidateRatePromotion(ctx context.Context, promotionCode string, hotelId string) AvailabilityApiValidateRatePromotionRequest {
	return AvailabilityApiValidateRatePromotionRequest{
		ApiService: a,
		ctx: ctx,
		promotionCode: promotionCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PromotionCouponValidationDetails
func (a *AvailabilityApiService) ValidateRatePromotionExecute(r AvailabilityApiValidateRatePromotionRequest) (*PromotionCouponValidationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PromotionCouponValidationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.ValidateRatePromotion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rates/promotions/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.promotionCode) < 1 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 1 elements")
	}
	if strlen(r.promotionCode) > 2000 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvailabilityApiValidateRatePromotionCouponRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	couponCode *string
	promotionCode *string
	authorization *string
	xAppKey *string
	xHotelid *string
	startDate *string
	endDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Coupon code to validate.
func (r AvailabilityApiValidateRatePromotionCouponRequest) CouponCode(couponCode string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.couponCode = &couponCode
	return r
}

// Promotion Code to which the coupon belongs.
func (r AvailabilityApiValidateRatePromotionCouponRequest) PromotionCode(promotionCode string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.promotionCode = &promotionCode
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AvailabilityApiValidateRatePromotionCouponRequest) Authorization(authorization string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AvailabilityApiValidateRatePromotionCouponRequest) XAppKey(xAppKey string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AvailabilityApiValidateRatePromotionCouponRequest) XHotelid(xHotelid string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r AvailabilityApiValidateRatePromotionCouponRequest) StartDate(startDate string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.startDate = &startDate
	return r
}

func (r AvailabilityApiValidateRatePromotionCouponRequest) EndDate(endDate string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.endDate = &endDate
	return r
}

// External system code.
func (r AvailabilityApiValidateRatePromotionCouponRequest) XExternalsystem(xExternalsystem string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AvailabilityApiValidateRatePromotionCouponRequest) AcceptLanguage(acceptLanguage string) AvailabilityApiValidateRatePromotionCouponRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AvailabilityApiValidateRatePromotionCouponRequest) Execute() (*PromotionCouponValidationDetails, *http.Response, error) {
	return r.ApiService.ValidateRatePromotionCouponExecute(r)
}

/*
ValidateRatePromotionCoupon Validate promotion and coupon code

This API allows you to validate a promotion and coupon code. <p><strong>OperationId:</strong>validateRatePromotionCoupon</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return AvailabilityApiValidateRatePromotionCouponRequest
*/
func (a *AvailabilityApiService) ValidateRatePromotionCoupon(ctx context.Context, hotelId string) AvailabilityApiValidateRatePromotionCouponRequest {
	return AvailabilityApiValidateRatePromotionCouponRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PromotionCouponValidationDetails
func (a *AvailabilityApiService) ValidateRatePromotionCouponExecute(r AvailabilityApiValidateRatePromotionCouponRequest) (*PromotionCouponValidationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PromotionCouponValidationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.ValidateRatePromotionCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rates/promotionsCoupons"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "couponCode", r.couponCode, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", r.promotionCode, "")
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
