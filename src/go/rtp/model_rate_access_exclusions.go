/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateAccessExclusions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAccessExclusions{}

// RateAccessExclusions struct for RateAccessExclusions
type RateAccessExclusions struct {
	Links *Links `json:"links,omitempty"`
	RateAccessExclusions *RateAccessExclusionsType `json:"rateAccessExclusions,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewRateAccessExclusions instantiates a new RateAccessExclusions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAccessExclusions() *RateAccessExclusions {
	this := RateAccessExclusions{}
	return &this
}

// NewRateAccessExclusionsWithDefaults instantiates a new RateAccessExclusions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAccessExclusionsWithDefaults() *RateAccessExclusions {
	this := RateAccessExclusions{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RateAccessExclusions) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusions) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RateAccessExclusions) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *RateAccessExclusions) SetLinks(v Links) {
	o.Links = &v
}

// GetRateAccessExclusions returns the RateAccessExclusions field value if set, zero value otherwise.
func (o *RateAccessExclusions) GetRateAccessExclusions() RateAccessExclusionsType {
	if o == nil || IsNil(o.RateAccessExclusions) {
		var ret RateAccessExclusionsType
		return ret
	}
	return *o.RateAccessExclusions
}

// GetRateAccessExclusionsOk returns a tuple with the RateAccessExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusions) GetRateAccessExclusionsOk() (*RateAccessExclusionsType, bool) {
	if o == nil || IsNil(o.RateAccessExclusions) {
		return nil, false
	}
	return o.RateAccessExclusions, true
}

// HasRateAccessExclusions returns a boolean if a field has been set.
func (o *RateAccessExclusions) HasRateAccessExclusions() bool {
	if o != nil && !IsNil(o.RateAccessExclusions) {
		return true
	}

	return false
}

// SetRateAccessExclusions gets a reference to the given RateAccessExclusionsType and assigns it to the RateAccessExclusions field.
func (o *RateAccessExclusions) SetRateAccessExclusions(v RateAccessExclusionsType) {
	o.RateAccessExclusions = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RateAccessExclusions) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusions) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RateAccessExclusions) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *RateAccessExclusions) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o RateAccessExclusions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAccessExclusions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RateAccessExclusions) {
		toSerialize["rateAccessExclusions"] = o.RateAccessExclusions
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRateAccessExclusions struct {
	value *RateAccessExclusions
	isSet bool
}

func (v NullableRateAccessExclusions) Get() *RateAccessExclusions {
	return v.value
}

func (v *NullableRateAccessExclusions) Set(val *RateAccessExclusions) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAccessExclusions) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAccessExclusions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAccessExclusions(val *RateAccessExclusions) *NullableRateAccessExclusions {
	return &NullableRateAccessExclusions{value: val, isSet: true}
}

func (v NullableRateAccessExclusions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAccessExclusions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


