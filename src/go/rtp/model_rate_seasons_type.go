/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateSeasonsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateSeasonsType{}

// RateSeasonsType Hotel rate season details.
type RateSeasonsType struct {
	Items []RateSeasonType
}

// NewRateSeasonsType instantiates a new RateSeasonsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateSeasonsType() *RateSeasonsType {
	this := RateSeasonsType{}
	return &this
}

// NewRateSeasonsTypeWithDefaults instantiates a new RateSeasonsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateSeasonsTypeWithDefaults() *RateSeasonsType {
	this := RateSeasonsType{}
	return &this
}

func (o RateSeasonsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateSeasonsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *RateSeasonsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableRateSeasonsType struct {
	value RateSeasonsType
	isSet bool
}

func (v NullableRateSeasonsType) Get() RateSeasonsType {
	return v.value
}

func (v *NullableRateSeasonsType) Set(val RateSeasonsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateSeasonsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateSeasonsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateSeasonsType(val RateSeasonsType) *NullableRateSeasonsType {
	return &NullableRateSeasonsType{value: val, isSet: true}
}

func (v NullableRateSeasonsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateSeasonsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


