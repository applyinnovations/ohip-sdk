/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PostRateSeasonsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRateSeasonsRequest{}

// PostRateSeasonsRequest struct for PostRateSeasonsRequest
type PostRateSeasonsRequest struct {
	Links *Links `json:"links,omitempty"`
	RateSeasons *RateSeasonsType `json:"rateSeasons,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostRateSeasonsRequest instantiates a new PostRateSeasonsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRateSeasonsRequest() *PostRateSeasonsRequest {
	this := PostRateSeasonsRequest{}
	return &this
}

// NewPostRateSeasonsRequestWithDefaults instantiates a new PostRateSeasonsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRateSeasonsRequestWithDefaults() *PostRateSeasonsRequest {
	this := PostRateSeasonsRequest{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostRateSeasonsRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateSeasonsRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostRateSeasonsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostRateSeasonsRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetRateSeasons returns the RateSeasons field value if set, zero value otherwise.
func (o *PostRateSeasonsRequest) GetRateSeasons() RateSeasonsType {
	if o == nil || IsNil(o.RateSeasons) {
		var ret RateSeasonsType
		return ret
	}
	return *o.RateSeasons
}

// GetRateSeasonsOk returns a tuple with the RateSeasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateSeasonsRequest) GetRateSeasonsOk() (*RateSeasonsType, bool) {
	if o == nil || IsNil(o.RateSeasons) {
		return nil, false
	}
	return o.RateSeasons, true
}

// HasRateSeasons returns a boolean if a field has been set.
func (o *PostRateSeasonsRequest) HasRateSeasons() bool {
	if o != nil && !IsNil(o.RateSeasons) {
		return true
	}

	return false
}

// SetRateSeasons gets a reference to the given RateSeasonsType and assigns it to the RateSeasons field.
func (o *PostRateSeasonsRequest) SetRateSeasons(v RateSeasonsType) {
	o.RateSeasons = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostRateSeasonsRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateSeasonsRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostRateSeasonsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostRateSeasonsRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostRateSeasonsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRateSeasonsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RateSeasons) {
		toSerialize["rateSeasons"] = o.RateSeasons
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostRateSeasonsRequest struct {
	value *PostRateSeasonsRequest
	isSet bool
}

func (v NullablePostRateSeasonsRequest) Get() *PostRateSeasonsRequest {
	return v.value
}

func (v *NullablePostRateSeasonsRequest) Set(val *PostRateSeasonsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRateSeasonsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRateSeasonsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRateSeasonsRequest(val *PostRateSeasonsRequest) *NullablePostRateSeasonsRequest {
	return &NullablePostRateSeasonsRequest{value: val, isSet: true}
}

func (v NullablePostRateSeasonsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRateSeasonsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


