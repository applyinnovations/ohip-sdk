/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateAmountBoundaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAmountBoundaryType{}

// RateAmountBoundaryType Set of rate amounts for one and/or two adults. This set will represent either the minimum or maximum rate boundary.
type RateAmountBoundaryType struct {
	// One person rate amount for the rate boundary.
	OnePersonRate *float32 `json:"onePersonRate,omitempty"`
	// Two person rate amount for the rate boundary.
	TwoPersonRate *float32 `json:"twoPersonRate,omitempty"`
}

// NewRateAmountBoundaryType instantiates a new RateAmountBoundaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAmountBoundaryType() *RateAmountBoundaryType {
	this := RateAmountBoundaryType{}
	return &this
}

// NewRateAmountBoundaryTypeWithDefaults instantiates a new RateAmountBoundaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAmountBoundaryTypeWithDefaults() *RateAmountBoundaryType {
	this := RateAmountBoundaryType{}
	return &this
}

// GetOnePersonRate returns the OnePersonRate field value if set, zero value otherwise.
func (o *RateAmountBoundaryType) GetOnePersonRate() float32 {
	if o == nil || IsNil(o.OnePersonRate) {
		var ret float32
		return ret
	}
	return *o.OnePersonRate
}

// GetOnePersonRateOk returns a tuple with the OnePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountBoundaryType) GetOnePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OnePersonRate) {
		return nil, false
	}
	return o.OnePersonRate, true
}

// HasOnePersonRate returns a boolean if a field has been set.
func (o *RateAmountBoundaryType) HasOnePersonRate() bool {
	if o != nil && !IsNil(o.OnePersonRate) {
		return true
	}

	return false
}

// SetOnePersonRate gets a reference to the given float32 and assigns it to the OnePersonRate field.
func (o *RateAmountBoundaryType) SetOnePersonRate(v float32) {
	o.OnePersonRate = &v
}

// GetTwoPersonRate returns the TwoPersonRate field value if set, zero value otherwise.
func (o *RateAmountBoundaryType) GetTwoPersonRate() float32 {
	if o == nil || IsNil(o.TwoPersonRate) {
		var ret float32
		return ret
	}
	return *o.TwoPersonRate
}

// GetTwoPersonRateOk returns a tuple with the TwoPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountBoundaryType) GetTwoPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoPersonRate) {
		return nil, false
	}
	return o.TwoPersonRate, true
}

// HasTwoPersonRate returns a boolean if a field has been set.
func (o *RateAmountBoundaryType) HasTwoPersonRate() bool {
	if o != nil && !IsNil(o.TwoPersonRate) {
		return true
	}

	return false
}

// SetTwoPersonRate gets a reference to the given float32 and assigns it to the TwoPersonRate field.
func (o *RateAmountBoundaryType) SetTwoPersonRate(v float32) {
	o.TwoPersonRate = &v
}

func (o RateAmountBoundaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAmountBoundaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnePersonRate) {
		toSerialize["onePersonRate"] = o.OnePersonRate
	}
	if !IsNil(o.TwoPersonRate) {
		toSerialize["twoPersonRate"] = o.TwoPersonRate
	}
	return toSerialize, nil
}

type NullableRateAmountBoundaryType struct {
	value *RateAmountBoundaryType
	isSet bool
}

func (v NullableRateAmountBoundaryType) Get() *RateAmountBoundaryType {
	return v.value
}

func (v *NullableRateAmountBoundaryType) Set(val *RateAmountBoundaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAmountBoundaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAmountBoundaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAmountBoundaryType(val *RateAmountBoundaryType) *NullableRateAmountBoundaryType {
	return &NullableRateAmountBoundaryType{value: val, isSet: true}
}

func (v NullableRateAmountBoundaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAmountBoundaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


