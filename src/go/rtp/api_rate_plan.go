/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RatePlanApiService RatePlanApi service
type RatePlanApiService service

type RatePlanApiCopyPackagesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	packagesCopy *UNKNOWN_BASE_TYPE
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiCopyPackagesRequest) Authorization(authorization string) RatePlanApiCopyPackagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiCopyPackagesRequest) XAppKey(xAppKey string) RatePlanApiCopyPackagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiCopyPackagesRequest) XHotelid(xHotelid string) RatePlanApiCopyPackagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// List of the package codes to be copied to other hotel code(s).
func (r RatePlanApiCopyPackagesRequest) PackagesCopy(packagesCopy UNKNOWN_BASE_TYPE) RatePlanApiCopyPackagesRequest {
	r.packagesCopy = &packagesCopy
	return r
}

// External system code.
func (r RatePlanApiCopyPackagesRequest) XExternalsystem(xExternalsystem string) RatePlanApiCopyPackagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiCopyPackagesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiCopyPackagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiCopyPackagesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyPackagesExecute(r)
}

/*
CopyPackages Copy package code(s) 

This API allows you to copy package codes(s) from one hotel to another. <p><strong>OperationId:</strong>copyPackages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiCopyPackagesRequest
*/
func (a *RatePlanApiService) CopyPackages(ctx context.Context) RatePlanApiCopyPackagesRequest {
	return RatePlanApiCopyPackagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) CopyPackagesExecute(r RatePlanApiCopyPackagesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.CopyPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packages/copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packagesCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiCopyPromotionGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	promotionGroupsCopy *CopyPromotionGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiCopyPromotionGroupsRequest) Authorization(authorization string) RatePlanApiCopyPromotionGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiCopyPromotionGroupsRequest) XAppKey(xAppKey string) RatePlanApiCopyPromotionGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiCopyPromotionGroupsRequest) XHotelid(xHotelid string) RatePlanApiCopyPromotionGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiCopyPromotionGroupsRequest) PromotionGroupsCopy(promotionGroupsCopy CopyPromotionGroupsRequest) RatePlanApiCopyPromotionGroupsRequest {
	r.promotionGroupsCopy = &promotionGroupsCopy
	return r
}

// External system code.
func (r RatePlanApiCopyPromotionGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiCopyPromotionGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiCopyPromotionGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiCopyPromotionGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiCopyPromotionGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyPromotionGroupsExecute(r)
}

/*
CopyPromotionGroups Copy promotion groups

This API allows you to copy promotions groups. <p><strong>OperationId:</strong>copyPromotionGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiCopyPromotionGroupsRequest
*/
func (a *RatePlanApiService) CopyPromotionGroups(ctx context.Context, hotelId string) RatePlanApiCopyPromotionGroupsRequest {
	return RatePlanApiCopyPromotionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) CopyPromotionGroupsExecute(r RatePlanApiCopyPromotionGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.CopyPromotionGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionGroups/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.promotionGroupsCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiCopyRatePlansRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlansCopy *CopyRatePlansRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiCopyRatePlansRequest) Authorization(authorization string) RatePlanApiCopyRatePlansRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiCopyRatePlansRequest) XAppKey(xAppKey string) RatePlanApiCopyRatePlansRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiCopyRatePlansRequest) XHotelid(xHotelid string) RatePlanApiCopyRatePlansRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for Copying rate plans to multiple hotels.
func (r RatePlanApiCopyRatePlansRequest) RatePlansCopy(ratePlansCopy CopyRatePlansRequest) RatePlanApiCopyRatePlansRequest {
	r.ratePlansCopy = &ratePlansCopy
	return r
}

// External system code.
func (r RatePlanApiCopyRatePlansRequest) XExternalsystem(xExternalsystem string) RatePlanApiCopyRatePlansRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiCopyRatePlansRequest) AcceptLanguage(acceptLanguage string) RatePlanApiCopyRatePlansRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiCopyRatePlansRequest) Execute() (*RatePlansCopyDetails, *http.Response, error) {
	return r.ApiService.CopyRatePlansExecute(r)
}

/*
CopyRatePlans Copy rate plans

This API allows you to copy Rate Plans. <p><strong>OperationId:</strong>copyRatePlans</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiCopyRatePlansRequest
*/
func (a *RatePlanApiService) CopyRatePlans(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiCopyRatePlansRequest {
	return RatePlanApiCopyRatePlansRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RatePlansCopyDetails
func (a *RatePlanApiService) CopyRatePlansExecute(r RatePlanApiCopyRatePlansRequest) (*RatePlansCopyDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlansCopyDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.CopyRatePlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlansCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiCopyTieredRateSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	destinationTierId string
	sourceTierId string
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	tieredRateSchedulesCopy *CopyTieredRateSchedulesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiCopyTieredRateSchedulesRequest) Authorization(authorization string) RatePlanApiCopyTieredRateSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiCopyTieredRateSchedulesRequest) XAppKey(xAppKey string) RatePlanApiCopyTieredRateSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiCopyTieredRateSchedulesRequest) XHotelid(xHotelid string) RatePlanApiCopyTieredRateSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to copy the specified tier 1 rate schedules into the specified tiers.
func (r RatePlanApiCopyTieredRateSchedulesRequest) TieredRateSchedulesCopy(tieredRateSchedulesCopy CopyTieredRateSchedulesRequest) RatePlanApiCopyTieredRateSchedulesRequest {
	r.tieredRateSchedulesCopy = &tieredRateSchedulesCopy
	return r
}

// External system code.
func (r RatePlanApiCopyTieredRateSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiCopyTieredRateSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiCopyTieredRateSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiCopyTieredRateSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiCopyTieredRateSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyTieredRateSchedulesExecute(r)
}

/*
CopyTieredRateSchedules Copy tiered rate schedules

This API allows you to copy tiered rate schedules. <p><strong>OperationId:</strong>copyTieredRateSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param destinationTierId Destination Tier Id.
 @param sourceTierId Source Tier Id.
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiCopyTieredRateSchedulesRequest
*/
func (a *RatePlanApiService) CopyTieredRateSchedules(ctx context.Context, destinationTierId string, sourceTierId string, ratePlanCode string, hotelId string) RatePlanApiCopyTieredRateSchedulesRequest {
	return RatePlanApiCopyTieredRateSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		destinationTierId: destinationTierId,
		sourceTierId: sourceTierId,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) CopyTieredRateSchedulesExecute(r RatePlanApiCopyTieredRateSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.CopyTieredRateSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/sourceTiers/{sourceTierId}/destinationTiers/{destinationTierId}/schedules/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"destinationTierId"+"}", url.PathEscape(parameterValueToString(r.destinationTierId, "destinationTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceTierId"+"}", url.PathEscape(parameterValueToString(r.sourceTierId, "sourceTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.destinationTierId) < 1 {
		return localVarReturnValue, nil, reportError("destinationTierId must have at least 1 elements")
	}
	if strlen(r.destinationTierId) > 2000 {
		return localVarReturnValue, nil, reportError("destinationTierId must have less than 2000 elements")
	}
	if strlen(r.sourceTierId) < 1 {
		return localVarReturnValue, nil, reportError("sourceTierId must have at least 1 elements")
	}
	if strlen(r.sourceTierId) > 2000 {
		return localVarReturnValue, nil, reportError("sourceTierId must have less than 2000 elements")
	}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.tieredRateSchedulesCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteBestAvailableRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	code *[]string
	end *string
	start *string
	authorization *string
	xAppKey *string
	xHotelid *string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	lOS1 *bool
	lOS2 *bool
	lOS3 *bool
	lOS4 *bool
	lOS5 *bool
	lOS6 *bool
	lOS7 *bool
	lOS8 *bool
	xExternalsystem *string
	acceptLanguage *string
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Code(code []string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.code = &code
	return r
}

// The ending value of the date range.
func (r RatePlanApiDeleteBestAvailableRatesRequest) End(end string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.end = &end
	return r
}

// The starting value of the date range.
func (r RatePlanApiDeleteBestAvailableRatesRequest) Start(start string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.start = &start
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteBestAvailableRatesRequest) Authorization(authorization string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteBestAvailableRatesRequest) XAppKey(xAppKey string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteBestAvailableRatesRequest) XHotelid(xHotelid string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Friday(friday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.friday = &friday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Monday(monday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.monday = &monday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Saturday(saturday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.saturday = &saturday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Sunday(sunday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.sunday = &sunday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Thursday(thursday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.thursday = &thursday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Tuesday(tuesday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.tuesday = &tuesday
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Wednesday(wednesday bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.wednesday = &wednesday
	return r
}

// Indicates Length of Stay 1 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS1(lOS1 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS1 = &lOS1
	return r
}

// Indicates Length of Stay 2 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS2(lOS2 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS2 = &lOS2
	return r
}

// Indicates Length of Stay 3 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS3(lOS3 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS3 = &lOS3
	return r
}

// Indicates Length of Stay 4 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS4(lOS4 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS4 = &lOS4
	return r
}

// Indicates Length of Stay 5 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS5(lOS5 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS5 = &lOS5
	return r
}

// Indicates Length of Stay 6 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS6(lOS6 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS6 = &lOS6
	return r
}

// Indicates Length of Stay 7 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS7(lOS7 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS7 = &lOS7
	return r
}

// Indicates Length of Stay 8 configuration.
func (r RatePlanApiDeleteBestAvailableRatesRequest) LOS8(lOS8 bool) RatePlanApiDeleteBestAvailableRatesRequest {
	r.lOS8 = &lOS8
	return r
}

// External system code.
func (r RatePlanApiDeleteBestAvailableRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteBestAvailableRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteBestAvailableRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteBestAvailableRatesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteBestAvailableRatesExecute(r)
}

/*
DeleteBestAvailableRates Delete Best Available Rates

This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteBestAvailableRatesRequest
*/
func (a *RatePlanApiService) DeleteBestAvailableRates(ctx context.Context, hotelId string) RatePlanApiDeleteBestAvailableRatesRequest {
	return RatePlanApiDeleteBestAvailableRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteBestAvailableRatesExecute(r RatePlanApiDeleteBestAvailableRatesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteBestAvailableRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bestavailablerates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	{
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
	}
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
	}
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
	}
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
	}
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
	}
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
	}
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
	}
	if r.lOS1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS1", r.lOS1, "")
	}
	if r.lOS2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS2", r.lOS2, "")
	}
	if r.lOS3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS3", r.lOS3, "")
	}
	if r.lOS4 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS4", r.lOS4, "")
	}
	if r.lOS5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS5", r.lOS5, "")
	}
	if r.lOS6 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS6", r.lOS6, "")
	}
	if r.lOS7 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS7", r.lOS7, "")
	}
	if r.lOS8 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lOS8", r.lOS8, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteDailyRatePlanScheduleRangeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	startDate *string
	endDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomType *[]string
	roomClass *[]string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	duration *string
	advancedDailyBaseRatePlanCode *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) StartDate(startDate string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.startDate = &startDate
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) EndDate(endDate string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.endDate = &endDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Authorization(authorization string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) XAppKey(xAppKey string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) XHotelid(xHotelid string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Room Type.
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) RoomType(roomType []string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.roomType = &roomType
	return r
}

// Room Class.
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) RoomClass(roomClass []string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.roomClass = &roomClass
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Friday(friday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.friday = &friday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Monday(monday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.monday = &monday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Saturday(saturday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.saturday = &saturday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Sunday(sunday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.sunday = &sunday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Thursday(thursday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.thursday = &thursday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Tuesday(tuesday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.tuesday = &tuesday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Wednesday(wednesday bool) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.wednesday = &wednesday
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Duration(duration string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.duration = &duration
	return r
}

// The Base Rate Plan Code which will be used to look up for and configure the Pricing Schedule for the main Rate Plan Code
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) AdvancedDailyBaseRatePlanCode(advancedDailyBaseRatePlanCode string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.advancedDailyBaseRatePlanCode = &advancedDailyBaseRatePlanCode
	return r
}

// External system code.
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteDailyRatePlanScheduleRangeExecute(r)
}

/*
DeleteDailyRatePlanScheduleRange Delete daily rate plan schedule range

This API allows you to delete daily Rate Plan schedules. <p><strong>OperationId:</strong>deleteDailyRatePlanScheduleRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteDailyRatePlanScheduleRangeRequest
*/
func (a *RatePlanApiService) DeleteDailyRatePlanScheduleRange(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDeleteDailyRatePlanScheduleRangeRequest {
	return RatePlanApiDeleteDailyRatePlanScheduleRangeRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteDailyRatePlanScheduleRangeExecute(r RatePlanApiDeleteDailyRatePlanScheduleRangeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteDailyRatePlanScheduleRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "csv")
	}
	if r.roomClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", r.roomClass, "csv")
	}
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
	}
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
	}
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
	}
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
	}
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
	}
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
	}
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.advancedDailyBaseRatePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advancedDailyBaseRatePlanCode", r.advancedDailyBaseRatePlanCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteHotelPackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	code *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Configuration code.
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) Code(code []string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.code = &code
	return r
}

// External system code.
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteHotelPackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteHotelPackageForecastGroupsExecute(r)
}

/*
DeleteHotelPackageForecastGroups Delete Hotel Package Forecast Groups

This API allows you to delete package forecast groups. <p><strong>OperationId:</strong>deleteHotelPackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteHotelPackageForecastGroupsRequest
*/
func (a *RatePlanApiService) DeleteHotelPackageForecastGroups(ctx context.Context, hotelId string) RatePlanApiDeleteHotelPackageForecastGroupsRequest {
	return RatePlanApiDeleteHotelPackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteHotelPackageForecastGroupsExecute(r RatePlanApiDeleteHotelPackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteHotelPackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageForecastGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteMassRateChangeLogRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteMassRateChangeLogRequest) Authorization(authorization string) RatePlanApiDeleteMassRateChangeLogRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteMassRateChangeLogRequest) XAppKey(xAppKey string) RatePlanApiDeleteMassRateChangeLogRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteMassRateChangeLogRequest) XHotelid(xHotelid string) RatePlanApiDeleteMassRateChangeLogRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteMassRateChangeLogRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteMassRateChangeLogRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteMassRateChangeLogRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteMassRateChangeLogRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteMassRateChangeLogRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteMassRateChangeLogExecute(r)
}

/*
DeleteMassRateChangeLog Delete mass rate change log

This API allows you to delete mass rate change log. <p><strong>OperationId:</strong>deleteMassRateChangeLog</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteMassRateChangeLogRequest
*/
func (a *RatePlanApiService) DeleteMassRateChangeLog(ctx context.Context, hotelId string) RatePlanApiDeleteMassRateChangeLogRequest {
	return RatePlanApiDeleteMassRateChangeLogRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteMassRateChangeLogExecute(r RatePlanApiDeleteMassRateChangeLogRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteMassRateChangeLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/massRateChangeLog"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteNegotiatedRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanId string
	startDate string
	profileId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteNegotiatedRatesRequest) Authorization(authorization string) RatePlanApiDeleteNegotiatedRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteNegotiatedRatesRequest) XAppKey(xAppKey string) RatePlanApiDeleteNegotiatedRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteNegotiatedRatesRequest) XHotelid(xHotelid string) RatePlanApiDeleteNegotiatedRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteNegotiatedRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteNegotiatedRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteNegotiatedRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteNegotiatedRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteNegotiatedRatesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteNegotiatedRatesExecute(r)
}

/*
DeleteNegotiatedRates Delete negotiated rates

This API allows you to delete negotiated rate. <p><strong>OperationId:</strong>deleteNegotiatedRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanId Rate Plan ID.
 @param startDate Start Date.
 @param profileId Unique ID that identifies a profile.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteNegotiatedRatesRequest
*/
func (a *RatePlanApiService) DeleteNegotiatedRates(ctx context.Context, ratePlanId string, startDate string, profileId string, hotelId string) RatePlanApiDeleteNegotiatedRatesRequest {
	return RatePlanApiDeleteNegotiatedRatesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanId: ratePlanId,
		startDate: startDate,
		profileId: profileId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteNegotiatedRatesExecute(r RatePlanApiDeleteNegotiatedRatesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteNegotiatedRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/profiles/{profileId}/startDate/{startDate}/negotiatedRates/{ratePlanId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanId"+"}", url.PathEscape(parameterValueToString(r.ratePlanId, "ratePlanId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDate"+"}", url.PathEscape(parameterValueToString(r.startDate, "startDate")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanId) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanId must have at least 1 elements")
	}
	if strlen(r.ratePlanId) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanId must have less than 2000 elements")
	}
	if strlen(r.startDate) < 1 {
		return localVarReturnValue, nil, reportError("startDate must have at least 1 elements")
	}
	if strlen(r.startDate) > 2000 {
		return localVarReturnValue, nil, reportError("startDate must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeletePackageRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeletePackageRequest) Authorization(authorization string) RatePlanApiDeletePackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeletePackageRequest) XAppKey(xAppKey string) RatePlanApiDeletePackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeletePackageRequest) XHotelid(xHotelid string) RatePlanApiDeletePackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeletePackageRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeletePackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeletePackageRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeletePackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeletePackageRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePackageExecute(r)
}

/*
DeletePackage Delete the package

This API allows you to delete a package. <p><strong>OperationId:</strong>deletePackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeletePackageRequest
*/
func (a *RatePlanApiService) DeletePackage(ctx context.Context, packageCode string, hotelId string) RatePlanApiDeletePackageRequest {
	return RatePlanApiDeletePackageRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeletePackageExecute(r RatePlanApiDeletePackageRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeletePackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packages/{packageCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeletePackageFormulaRangesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageFormulaRangeId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	amount *float32
	currencyCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeletePackageFormulaRangesRequest) Authorization(authorization string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeletePackageFormulaRangesRequest) XAppKey(xAppKey string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeletePackageFormulaRangesRequest) XHotelid(xHotelid string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A monetary amount.
func (r RatePlanApiDeletePackageFormulaRangesRequest) Amount(amount float32) RatePlanApiDeletePackageFormulaRangesRequest {
	r.amount = &amount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r RatePlanApiDeletePackageFormulaRangesRequest) CurrencyCode(currencyCode string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.currencyCode = &currencyCode
	return r
}

// External system code.
func (r RatePlanApiDeletePackageFormulaRangesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeletePackageFormulaRangesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeletePackageFormulaRangesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeletePackageFormulaRangesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePackageFormulaRangesExecute(r)
}

/*
DeletePackageFormulaRanges Delete package formula ranges

This API allows you to delete package formula ranges. <p><strong>OperationId:</strong>deletePackageFormulaRanges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageFormulaRangeId Package Formula Range Id.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeletePackageFormulaRangesRequest
*/
func (a *RatePlanApiService) DeletePackageFormulaRanges(ctx context.Context, packageFormulaRangeId string, hotelId string) RatePlanApiDeletePackageFormulaRangesRequest {
	return RatePlanApiDeletePackageFormulaRangesRequest{
		ApiService: a,
		ctx: ctx,
		packageFormulaRangeId: packageFormulaRangeId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeletePackageFormulaRangesExecute(r RatePlanApiDeletePackageFormulaRangesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeletePackageFormulaRanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageFormulaRangeId"+"}", url.PathEscape(parameterValueToString(r.packageFormulaRangeId, "packageFormulaRangeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageFormulaRangeId) < 1 {
		return localVarReturnValue, nil, reportError("packageFormulaRangeId must have at least 1 elements")
	}
	if strlen(r.packageFormulaRangeId) > 2000 {
		return localVarReturnValue, nil, reportError("packageFormulaRangeId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "")
	}
	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeletePackageGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeletePackageGroupsRequest) Authorization(authorization string) RatePlanApiDeletePackageGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeletePackageGroupsRequest) XAppKey(xAppKey string) RatePlanApiDeletePackageGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeletePackageGroupsRequest) XHotelid(xHotelid string) RatePlanApiDeletePackageGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeletePackageGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeletePackageGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeletePackageGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeletePackageGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeletePackageGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePackageGroupsExecute(r)
}

/*
DeletePackageGroups Delete package group

This API allows you to delete package group. <p><strong>OperationId:</strong>deletePackageGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeletePackageGroupsRequest
*/
func (a *RatePlanApiService) DeletePackageGroups(ctx context.Context, packageCode string, hotelId string) RatePlanApiDeletePackageGroupsRequest {
	return RatePlanApiDeletePackageGroupsRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeletePackageGroupsExecute(r RatePlanApiDeletePackageGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeletePackageGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageGroups/{packageCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeletePromotionGroupRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	groupCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeletePromotionGroupRequest) Authorization(authorization string) RatePlanApiDeletePromotionGroupRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeletePromotionGroupRequest) XAppKey(xAppKey string) RatePlanApiDeletePromotionGroupRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeletePromotionGroupRequest) XHotelid(xHotelid string) RatePlanApiDeletePromotionGroupRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeletePromotionGroupRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeletePromotionGroupRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeletePromotionGroupRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeletePromotionGroupRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeletePromotionGroupRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePromotionGroupExecute(r)
}

/*
DeletePromotionGroup Delete promotion groups

This API allows you to delete promotion groups. <p><strong>OperationId:</strong>deletePromotionGroup</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupCode Promotion Group Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeletePromotionGroupRequest
*/
func (a *RatePlanApiService) DeletePromotionGroup(ctx context.Context, groupCode string, hotelId string) RatePlanApiDeletePromotionGroupRequest {
	return RatePlanApiDeletePromotionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupCode: groupCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeletePromotionGroupExecute(r RatePlanApiDeletePromotionGroupRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeletePromotionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionGroups/{groupCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupCode"+"}", url.PathEscape(parameterValueToString(r.groupCode, "groupCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.groupCode) < 1 {
		return localVarReturnValue, nil, reportError("groupCode must have at least 1 elements")
	}
	if strlen(r.groupCode) > 2000 {
		return localVarReturnValue, nil, reportError("groupCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRateAccessExclusionsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateCode *string
	allowCancelReservation *[]bool
	allowCreateReservation *[]bool
	allowModifyReservation *[]bool
	excludeFromAvailability *[]bool
	inactive *[]bool
	sourceType *[]string
	sourceValue *[]string
	end *string
	start *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRateAccessExclusionsRequest) Authorization(authorization string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRateAccessExclusionsRequest) XAppKey(xAppKey string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRateAccessExclusionsRequest) XHotelid(xHotelid string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Rate code
func (r RatePlanApiDeleteRateAccessExclusionsRequest) RateCode(rateCode string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.rateCode = &rateCode
	return r
}

// Allow to cancel a reservation under this access exclusion.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) AllowCancelReservation(allowCancelReservation []bool) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.allowCancelReservation = &allowCancelReservation
	return r
}

// Allow to create a reservation under this access exclusion.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) AllowCreateReservation(allowCreateReservation []bool) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.allowCreateReservation = &allowCreateReservation
	return r
}

// Allow to modify a reservation under this access exclusion.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) AllowModifyReservation(allowModifyReservation []bool) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.allowModifyReservation = &allowModifyReservation
	return r
}

// Exclude a specific rate from availability
func (r RatePlanApiDeleteRateAccessExclusionsRequest) ExcludeFromAvailability(excludeFromAvailability []bool) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.excludeFromAvailability = &excludeFromAvailability
	return r
}

// The rate access exclusion is inactive
func (r RatePlanApiDeleteRateAccessExclusionsRequest) Inactive(inactive []bool) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.inactive = &inactive
	return r
}

// The type of source (CRO or Hotel code) for which the rate access exclusion is set.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) SourceType(sourceType []string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.sourceType = &sourceType
	return r
}

// CRO or Hotel code value.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) SourceValue(sourceValue []string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.sourceValue = &sourceValue
	return r
}

// The ending value of the date range.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) End(end string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.end = &end
	return r
}

// The starting value of the date range.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) Start(start string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.start = &start
	return r
}

// External system code.
func (r RatePlanApiDeleteRateAccessExclusionsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRateAccessExclusionsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRateAccessExclusionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRateAccessExclusionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRateAccessExclusionsExecute(r)
}

/*
DeleteRateAccessExclusions Delete rate access exclusions

This API allows you to delete rate access exclusions. <p><strong>OperationId:</strong>deleteRateAccessExclusions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRateAccessExclusionsRequest
*/
func (a *RatePlanApiService) DeleteRateAccessExclusions(ctx context.Context, hotelId string) RatePlanApiDeleteRateAccessExclusionsRequest {
	return RatePlanApiDeleteRateAccessExclusionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRateAccessExclusionsExecute(r RatePlanApiDeleteRateAccessExclusionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRateAccessExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateAccessExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
	}
	if r.allowCancelReservation != nil {
		t := *r.allowCancelReservation
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowCancelReservation", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowCancelReservation", t, "multi")
		}
	}
	if r.allowCreateReservation != nil {
		t := *r.allowCreateReservation
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowCreateReservation", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowCreateReservation", t, "multi")
		}
	}
	if r.allowModifyReservation != nil {
		t := *r.allowModifyReservation
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowModifyReservation", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowModifyReservation", t, "multi")
		}
	}
	if r.excludeFromAvailability != nil {
		t := *r.excludeFromAvailability
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFromAvailability", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFromAvailability", t, "multi")
		}
	}
	if r.inactive != nil {
		t := *r.inactive
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inactive", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inactive", t, "multi")
		}
	}
	if r.sourceType != nil {
		t := *r.sourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceType", t, "multi")
		}
	}
	if r.sourceValue != nil {
		t := *r.sourceValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceValue", t, "multi")
		}
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRateGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRateGroupsRequest) Authorization(authorization string) RatePlanApiDeleteRateGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRateGroupsRequest) XAppKey(xAppKey string) RatePlanApiDeleteRateGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRateGroupsRequest) XHotelid(xHotelid string) RatePlanApiDeleteRateGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteRateGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRateGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRateGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRateGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRateGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRateGroupsExecute(r)
}

/*
DeleteRateGroups Delete rate groups

This API allows you to delete rate groups. <p><strong>OperationId:</strong>deleteRateGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRateGroupsRequest
*/
func (a *RatePlanApiService) DeleteRateGroups(ctx context.Context, hotelId string) RatePlanApiDeleteRateGroupsRequest {
	return RatePlanApiDeleteRateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRateGroupsExecute(r RatePlanApiDeleteRateGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRateGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRatePlanRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRatePlanRequest) Authorization(authorization string) RatePlanApiDeleteRatePlanRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRatePlanRequest) XAppKey(xAppKey string) RatePlanApiDeleteRatePlanRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRatePlanRequest) XHotelid(xHotelid string) RatePlanApiDeleteRatePlanRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteRatePlanRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRatePlanRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRatePlanRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRatePlanRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRatePlanRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRatePlanExecute(r)
}

/*
DeleteRatePlan Delete rate plan 

This API allows you to delete Rate Plan for a given hotel id. <p><strong>OperationId:</strong>deleteRatePlan</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRatePlanRequest
*/
func (a *RatePlanApiService) DeleteRatePlan(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDeleteRatePlanRequest {
	return RatePlanApiDeleteRatePlanRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRatePlanExecute(r RatePlanApiDeleteRatePlanRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRatePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRatePlanPackagesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageCode *[]string
	packageGroup *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRatePlanPackagesRequest) Authorization(authorization string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRatePlanPackagesRequest) XAppKey(xAppKey string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRatePlanPackagesRequest) XHotelid(xHotelid string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Configuration code.
func (r RatePlanApiDeleteRatePlanPackagesRequest) PackageCode(packageCode []string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.packageCode = &packageCode
	return r
}

// Configuration code.
func (r RatePlanApiDeleteRatePlanPackagesRequest) PackageGroup(packageGroup []string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.packageGroup = &packageGroup
	return r
}

// External system code.
func (r RatePlanApiDeleteRatePlanPackagesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRatePlanPackagesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRatePlanPackagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRatePlanPackagesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRatePlanPackagesExecute(r)
}

/*
DeleteRatePlanPackages Delete rate plan packages

This API allows you to delete Rate Plan package. <p><strong>OperationId:</strong>deleteRatePlanPackages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRatePlanPackagesRequest
*/
func (a *RatePlanApiService) DeleteRatePlanPackages(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDeleteRatePlanPackagesRequest {
	return RatePlanApiDeleteRatePlanPackagesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRatePlanPackagesExecute(r RatePlanApiDeleteRatePlanPackagesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRatePlanPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.packageCode != nil {
		t := *r.packageCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", t, "multi")
		}
	}
	if r.packageGroup != nil {
		t := *r.packageGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageGroup", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageGroup", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRatePlanPostingRhythmsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	code *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) Authorization(authorization string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) XAppKey(xAppKey string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) XHotelid(xHotelid string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) Code(code []string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.code = &code
	return r
}

// External system code.
func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRatePlanPostingRhythmsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRatePlanPostingRhythmsExecute(r)
}

/*
DeleteRatePlanPostingRhythms Delete rate plan posting rhythms

This API allows you to delete Rate Plan posting rhythms. <p><strong>OperationId:</strong>deleteRatePlanPostingRhythms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRatePlanPostingRhythmsRequest
*/
func (a *RatePlanApiService) DeleteRatePlanPostingRhythms(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDeleteRatePlanPostingRhythmsRequest {
	return RatePlanApiDeleteRatePlanPostingRhythmsRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRatePlanPostingRhythmsExecute(r RatePlanApiDeleteRatePlanPostingRhythmsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRatePlanPostingRhythms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRatePlanSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	ratePlanScheduleIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	tierID *int32
	seasonCode *string
	start *string
	end *string
	roomType *[]string
	sunday *bool
	monday *bool
	tuesday *bool
	wednesday *bool
	thursday *bool
	friday *bool
	saturday *bool
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) RatePlanScheduleIds(ratePlanScheduleIds []string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.ratePlanScheduleIds = &ratePlanScheduleIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Authorization(authorization string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRatePlanSchedulesRequest) XAppKey(xAppKey string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRatePlanSchedulesRequest) XHotelid(xHotelid string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Tier that the rate plan schedule belongs to.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) TierID(tierID int32) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.tierID = &tierID
	return r
}

// Season code attached to the rate plan schedule that defines the start and end dates. When creating a rate plan schedule, if a season code is provided the start and end dates will be ignored. These values will be pulled from the season code record.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) SeasonCode(seasonCode string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.seasonCode = &seasonCode
	return r
}

// The starting value of the date range.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Start(start string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.start = &start
	return r
}

// The ending value of the date range.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) End(end string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.end = &end
	return r
}

// List of room types that are for the rate plan schedule.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) RoomType(roomType []string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.roomType = &roomType
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Sunday(sunday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.sunday = &sunday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Monday(monday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.monday = &monday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Tuesday(tuesday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.tuesday = &tuesday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Wednesday(wednesday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.wednesday = &wednesday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Thursday(thursday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.thursday = &thursday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Friday(friday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.friday = &friday
	return r
}

// Day Of The Week Schedule Should Be Applicable.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) Saturday(saturday bool) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.saturday = &saturday
	return r
}

// External system code.
func (r RatePlanApiDeleteRatePlanSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRatePlanSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRatePlanSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRatePlanSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRatePlanSchedulesExecute(r)
}

/*
DeleteRatePlanSchedules Delete rate plan schedule

Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRatePlanSchedulesRequest
*/
func (a *RatePlanApiService) DeleteRatePlanSchedules(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDeleteRatePlanSchedulesRequest {
	return RatePlanApiDeleteRatePlanSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRatePlanSchedulesExecute(r RatePlanApiDeleteRatePlanSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRatePlanSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	{
		t := *r.ratePlanScheduleIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanScheduleIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanScheduleIds", t, "multi")
		}
	}
	if r.tierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tierID", r.tierID, "")
	}
	if r.seasonCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seasonCode", r.seasonCode, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
	}
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
	}
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
	}
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
	}
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
	}
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
	}
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
	}
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRatePlanServiceCacheRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRatePlanServiceCacheRequest) Authorization(authorization string) RatePlanApiDeleteRatePlanServiceCacheRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRatePlanServiceCacheRequest) XAppKey(xAppKey string) RatePlanApiDeleteRatePlanServiceCacheRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRatePlanServiceCacheRequest) XHotelid(xHotelid string) RatePlanApiDeleteRatePlanServiceCacheRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteRatePlanServiceCacheRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRatePlanServiceCacheRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRatePlanServiceCacheRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRatePlanServiceCacheRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRatePlanServiceCacheRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRatePlanServiceCacheExecute(r)
}

/*
DeleteRatePlanServiceCache Delete the Rate plan service cache

This API allows you to delete Rate Plan service cache. <p><strong>OperationId:</strong>deleteRatePlanServiceCache</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiDeleteRatePlanServiceCacheRequest
*/
func (a *RatePlanApiService) DeleteRatePlanServiceCache(ctx context.Context) RatePlanApiDeleteRatePlanServiceCacheRequest {
	return RatePlanApiDeleteRatePlanServiceCacheRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRatePlanServiceCacheExecute(r RatePlanApiDeleteRatePlanServiceCacheRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRatePlanServiceCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/rateplan/cache"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteRateStrategyRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	rateStrategyId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteRateStrategyRequest) Authorization(authorization string) RatePlanApiDeleteRateStrategyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteRateStrategyRequest) XAppKey(xAppKey string) RatePlanApiDeleteRateStrategyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteRateStrategyRequest) XHotelid(xHotelid string) RatePlanApiDeleteRateStrategyRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteRateStrategyRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteRateStrategyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteRateStrategyRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteRateStrategyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteRateStrategyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRateStrategyExecute(r)
}

/*
DeleteRateStrategy Delete rate strategies

This API allows you to delete rate strategies. <p><strong>OperationId:</strong>deleteRateStrategy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rateStrategyId Strategy Id
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDeleteRateStrategyRequest
*/
func (a *RatePlanApiService) DeleteRateStrategy(ctx context.Context, rateStrategyId string, hotelId string) RatePlanApiDeleteRateStrategyRequest {
	return RatePlanApiDeleteRateStrategyRequest{
		ApiService: a,
		ctx: ctx,
		rateStrategyId: rateStrategyId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteRateStrategyExecute(r RatePlanApiDeleteRateStrategyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteRateStrategy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateStrategies/{rateStrategyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"rateStrategyId"+"}", url.PathEscape(parameterValueToString(r.rateStrategyId, "rateStrategyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.rateStrategyId) < 1 {
		return localVarReturnValue, nil, reportError("rateStrategyId must have at least 1 elements")
	}
	if strlen(r.rateStrategyId) > 2000 {
		return localVarReturnValue, nil, reportError("rateStrategyId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDeleteTemplatePackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageForecastGroupCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTemplatePackageForecastGroupsExecute(r)
}

/*
DeleteTemplatePackageForecastGroups Delete Template Package Forecast Groups

This API allows you to delete Package Forecast groups template. <p><strong>OperationId:</strong>deleteTemplatePackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageForecastGroupCode Code.
 @return RatePlanApiDeleteTemplatePackageForecastGroupsRequest
*/
func (a *RatePlanApiService) DeleteTemplatePackageForecastGroups(ctx context.Context, packageForecastGroupCode string) RatePlanApiDeleteTemplatePackageForecastGroupsRequest {
	return RatePlanApiDeleteTemplatePackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
		packageForecastGroupCode: packageForecastGroupCode,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DeleteTemplatePackageForecastGroupsExecute(r RatePlanApiDeleteTemplatePackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DeleteTemplatePackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packageForecastGroups/{packageForecastGroupCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageForecastGroupCode"+"}", url.PathEscape(parameterValueToString(r.packageForecastGroupCode, "packageForecastGroupCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageForecastGroupCode) < 1 {
		return localVarReturnValue, nil, reportError("packageForecastGroupCode must have at least 1 elements")
	}
	if strlen(r.packageForecastGroupCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageForecastGroupCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDistributeNegotiatedRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	distributedNegotiatedRates *DistributeNegotiatedRatesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDistributeNegotiatedRatesRequest) Authorization(authorization string) RatePlanApiDistributeNegotiatedRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDistributeNegotiatedRatesRequest) XAppKey(xAppKey string) RatePlanApiDistributeNegotiatedRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDistributeNegotiatedRatesRequest) XHotelid(xHotelid string) RatePlanApiDistributeNegotiatedRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for distribute negotiated rates. This object contains a list of negotiated rates that are to be distributed and a list of properties to which to distribute to.
func (r RatePlanApiDistributeNegotiatedRatesRequest) DistributedNegotiatedRates(distributedNegotiatedRates DistributeNegotiatedRatesRequest) RatePlanApiDistributeNegotiatedRatesRequest {
	r.distributedNegotiatedRates = &distributedNegotiatedRates
	return r
}

// External system code.
func (r RatePlanApiDistributeNegotiatedRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiDistributeNegotiatedRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDistributeNegotiatedRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDistributeNegotiatedRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDistributeNegotiatedRatesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DistributeNegotiatedRatesExecute(r)
}

/*
DistributeNegotiatedRates Distribute negotiated rates

This API allows you to distribute negotiated Rate. <p><strong>OperationId:</strong>distributeNegotiatedRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDistributeNegotiatedRatesRequest
*/
func (a *RatePlanApiService) DistributeNegotiatedRates(ctx context.Context, hotelId string) RatePlanApiDistributeNegotiatedRatesRequest {
	return RatePlanApiDistributeNegotiatedRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DistributeNegotiatedRatesExecute(r RatePlanApiDistributeNegotiatedRatesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DistributeNegotiatedRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/negotiatedRates/distributions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.distributedNegotiatedRates
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiDownloadExternalRatePlanRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiDownloadExternalRatePlanRequest) Authorization(authorization string) RatePlanApiDownloadExternalRatePlanRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiDownloadExternalRatePlanRequest) XAppKey(xAppKey string) RatePlanApiDownloadExternalRatePlanRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiDownloadExternalRatePlanRequest) XHotelid(xHotelid string) RatePlanApiDownloadExternalRatePlanRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiDownloadExternalRatePlanRequest) XExternalsystem(xExternalsystem string) RatePlanApiDownloadExternalRatePlanRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiDownloadExternalRatePlanRequest) AcceptLanguage(acceptLanguage string) RatePlanApiDownloadExternalRatePlanRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiDownloadExternalRatePlanRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DownloadExternalRatePlanExecute(r)
}

/*
DownloadExternalRatePlan Get external rate plan

This API allows you to fetch external Rate Plan. <p><strong>OperationId:</strong>downloadExternalRatePlan</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiDownloadExternalRatePlanRequest
*/
func (a *RatePlanApiService) DownloadExternalRatePlan(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiDownloadExternalRatePlanRequest {
	return RatePlanApiDownloadExternalRatePlanRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) DownloadExternalRatePlanExecute(r RatePlanApiDownloadExternalRatePlanRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.DownloadExternalRatePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalRatePlans/{ratePlanCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetBestAvailableRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	startDay *string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	rateCode *[]string
	endDay *string
	daysOfWeek *[]string
	lengthOfStay *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The starting value of the date range.
func (r RatePlanApiGetBestAvailableRatesRequest) StartDay(startDay string) RatePlanApiGetBestAvailableRatesRequest {
	r.startDay = &startDay
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetBestAvailableRatesRequest) Authorization(authorization string) RatePlanApiGetBestAvailableRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetBestAvailableRatesRequest) XAppKey(xAppKey string) RatePlanApiGetBestAvailableRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetBestAvailableRatesRequest) XHotelid(xHotelid string) RatePlanApiGetBestAvailableRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetBestAvailableRatesRequest) Limit(limit int32) RatePlanApiGetBestAvailableRatesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetBestAvailableRatesRequest) Offset(offset int32) RatePlanApiGetBestAvailableRatesRequest {
	r.offset = &offset
	return r
}

func (r RatePlanApiGetBestAvailableRatesRequest) RateCode(rateCode []string) RatePlanApiGetBestAvailableRatesRequest {
	r.rateCode = &rateCode
	return r
}

// The ending value of the date range.
func (r RatePlanApiGetBestAvailableRatesRequest) EndDay(endDay string) RatePlanApiGetBestAvailableRatesRequest {
	r.endDay = &endDay
	return r
}

// Allowed values for the days of week type.
func (r RatePlanApiGetBestAvailableRatesRequest) DaysOfWeek(daysOfWeek []string) RatePlanApiGetBestAvailableRatesRequest {
	r.daysOfWeek = &daysOfWeek
	return r
}

// Allowed values for length stay type.
func (r RatePlanApiGetBestAvailableRatesRequest) LengthOfStay(lengthOfStay []string) RatePlanApiGetBestAvailableRatesRequest {
	r.lengthOfStay = &lengthOfStay
	return r
}

// External system code.
func (r RatePlanApiGetBestAvailableRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetBestAvailableRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetBestAvailableRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetBestAvailableRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetBestAvailableRatesRequest) Execute() (*GetBestAvailableRatesDetails, *http.Response, error) {
	return r.ApiService.GetBestAvailableRatesExecute(r)
}

/*
GetBestAvailableRates Fetch Best Available Rates

This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetBestAvailableRatesRequest
*/
func (a *RatePlanApiService) GetBestAvailableRates(ctx context.Context, hotelId string) RatePlanApiGetBestAvailableRatesRequest {
	return RatePlanApiGetBestAvailableRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GetBestAvailableRatesDetails
func (a *RatePlanApiService) GetBestAvailableRatesExecute(r RatePlanApiGetBestAvailableRatesRequest) (*GetBestAvailableRatesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBestAvailableRatesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetBestAvailableRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bestavailablerates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startDay", r.startDay, "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.rateCode != nil {
		t := *r.rateCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", t, "multi")
		}
	}
	if r.endDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDay", r.endDay, "")
	}
	if r.daysOfWeek != nil {
		t := *r.daysOfWeek
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "daysOfWeek", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "daysOfWeek", t, "multi")
		}
	}
	if r.lengthOfStay != nil {
		t := *r.lengthOfStay
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "lengthOfStay", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "lengthOfStay", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetHotelPackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	limit *int32
	offset *int32
	packageForecastGroupCodes *[]string
	wildCard *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel code.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) HotelIds(hotelIds []string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) Limit(limit int32) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) Offset(offset int32) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.offset = &offset
	return r
}

// Codes to be searched.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) PackageForecastGroupCodes(packageForecastGroupCodes []string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.packageForecastGroupCodes = &packageForecastGroupCodes
	return r
}

// Wildcard search on the code.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) WildCard(wildCard string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.wildCard = &wildCard
	return r
}

// Inactive flag - whether or not to display inactive records
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) IncludeInactive(includeInactive bool) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetHotelPackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetHotelPackageForecastGroupsRequest) Execute() (*HotelPackageForecastGroups, *http.Response, error) {
	return r.ApiService.GetHotelPackageForecastGroupsExecute(r)
}

/*
GetHotelPackageForecastGroups Get Hotel Package Forecast Groups

This API allows you to fetch package forecast groups. <p><strong>OperationId:</strong>getHotelPackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetHotelPackageForecastGroupsRequest
*/
func (a *RatePlanApiService) GetHotelPackageForecastGroups(ctx context.Context, hotelId string) RatePlanApiGetHotelPackageForecastGroupsRequest {
	return RatePlanApiGetHotelPackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HotelPackageForecastGroups
func (a *RatePlanApiService) GetHotelPackageForecastGroupsExecute(r RatePlanApiGetHotelPackageForecastGroupsRequest) (*HotelPackageForecastGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HotelPackageForecastGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetHotelPackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageForecastGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.packageForecastGroupCodes != nil {
		t := *r.packageForecastGroupCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "PackageForecastGroupCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "PackageForecastGroupCodes", t, "multi")
		}
	}
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetMassRateChangeStatusRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	detailStatus *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetMassRateChangeStatusRequest) Authorization(authorization string) RatePlanApiGetMassRateChangeStatusRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetMassRateChangeStatusRequest) XAppKey(xAppKey string) RatePlanApiGetMassRateChangeStatusRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetMassRateChangeStatusRequest) XHotelid(xHotelid string) RatePlanApiGetMassRateChangeStatusRequest {
	r.xHotelid = &xHotelid
	return r
}

// Flag to indicate to include the update process details or not.
func (r RatePlanApiGetMassRateChangeStatusRequest) DetailStatus(detailStatus bool) RatePlanApiGetMassRateChangeStatusRequest {
	r.detailStatus = &detailStatus
	return r
}

// External system code.
func (r RatePlanApiGetMassRateChangeStatusRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetMassRateChangeStatusRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetMassRateChangeStatusRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetMassRateChangeStatusRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetMassRateChangeStatusRequest) Execute() (*MassRateChangeStatus, *http.Response, error) {
	return r.ApiService.GetMassRateChangeStatusExecute(r)
}

/*
GetMassRateChangeStatus Get mass rate change status

This API allows you to fetch mass rate change status. <p><strong>OperationId:</strong>getMassRateChangeStatus</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetMassRateChangeStatusRequest
*/
func (a *RatePlanApiService) GetMassRateChangeStatus(ctx context.Context, hotelId string) RatePlanApiGetMassRateChangeStatusRequest {
	return RatePlanApiGetMassRateChangeStatusRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MassRateChangeStatus
func (a *RatePlanApiService) GetMassRateChangeStatusExecute(r RatePlanApiGetMassRateChangeStatusRequest) (*MassRateChangeStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MassRateChangeStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetMassRateChangeStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/massRateChangeStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.detailStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailStatus", r.detailStatus, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetNegotiatedRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	startDate *string
	endDate *string
	includeInactiveNegotiatedRates *bool
	fetchInstructionsLimit *int32
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetNegotiatedRatesRequest) Authorization(authorization string) RatePlanApiGetNegotiatedRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetNegotiatedRatesRequest) XAppKey(xAppKey string) RatePlanApiGetNegotiatedRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetNegotiatedRatesRequest) XHotelid(xHotelid string) RatePlanApiGetNegotiatedRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesRequest) Limit(limit int32) RatePlanApiGetNegotiatedRatesRequest {
	r.limit = &limit
	return r
}

// Start Date.
func (r RatePlanApiGetNegotiatedRatesRequest) StartDate(startDate string) RatePlanApiGetNegotiatedRatesRequest {
	r.startDate = &startDate
	return r
}

// End Date.
func (r RatePlanApiGetNegotiatedRatesRequest) EndDate(endDate string) RatePlanApiGetNegotiatedRatesRequest {
	r.endDate = &endDate
	return r
}

// Inactive negotiated rates.
func (r RatePlanApiGetNegotiatedRatesRequest) IncludeInactiveNegotiatedRates(includeInactiveNegotiatedRates bool) RatePlanApiGetNegotiatedRatesRequest {
	r.includeInactiveNegotiatedRates = &includeInactiveNegotiatedRates
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesRequest) FetchInstructionsLimit(fetchInstructionsLimit int32) RatePlanApiGetNegotiatedRatesRequest {
	r.fetchInstructionsLimit = &fetchInstructionsLimit
	return r
}

// Simple type for negotiated rates instructions that can be used in requests for partial operations.
func (r RatePlanApiGetNegotiatedRatesRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetNegotiatedRatesRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetNegotiatedRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetNegotiatedRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetNegotiatedRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetNegotiatedRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetNegotiatedRatesRequest) Execute() (*NegotiatedRates, *http.Response, error) {
	return r.ApiService.GetNegotiatedRatesExecute(r)
}

/*
GetNegotiatedRates Get negotiated rates and profiles 

This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetNegotiatedRatesRequest
*/
func (a *RatePlanApiService) GetNegotiatedRates(ctx context.Context, hotelId string) RatePlanApiGetNegotiatedRatesRequest {
	return RatePlanApiGetNegotiatedRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return NegotiatedRates
func (a *RatePlanApiService) GetNegotiatedRatesExecute(r RatePlanApiGetNegotiatedRatesRequest) (*NegotiatedRates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NegotiatedRates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetNegotiatedRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/negotiatedRates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.includeInactiveNegotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactiveNegotiatedRates", r.includeInactiveNegotiatedRates, "")
	}
	if r.fetchInstructionsLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructionsLimit", r.fetchInstructionsLimit, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	rateCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	startDate *string
	endDate *string
	includeInactiveNegotiatedRates *bool
	fetchInstructionsLimit *int32
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) Authorization(authorization string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) XAppKey(xAppKey string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) XHotelid(xHotelid string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) Limit(limit int32) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.limit = &limit
	return r
}

// Start Date.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) StartDate(startDate string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.startDate = &startDate
	return r
}

// End Date.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) EndDate(endDate string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.endDate = &endDate
	return r
}

// Inactive negotiated rates.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) IncludeInactiveNegotiatedRates(includeInactiveNegotiatedRates bool) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.includeInactiveNegotiatedRates = &includeInactiveNegotiatedRates
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) FetchInstructionsLimit(fetchInstructionsLimit int32) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.fetchInstructionsLimit = &fetchInstructionsLimit
	return r
}

// Simple type for negotiated rates instructions that can be used in requests for partial operations.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) Execute() (*NegotiatedRates, *http.Response, error) {
	return r.ApiService.GetNegotiatedRatesForGivenHotelAndRateExecute(r)
}

/*
GetNegotiatedRatesForGivenHotelAndRate Fetch Negotiated Rates

This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rateCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest
*/
func (a *RatePlanApiService) GetNegotiatedRatesForGivenHotelAndRate(ctx context.Context, rateCode string, hotelId string) RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest {
	return RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest{
		ApiService: a,
		ctx: ctx,
		rateCode: rateCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return NegotiatedRates
func (a *RatePlanApiService) GetNegotiatedRatesForGivenHotelAndRateExecute(r RatePlanApiGetNegotiatedRatesForGivenHotelAndRateRequest) (*NegotiatedRates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NegotiatedRates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetNegotiatedRatesForGivenHotelAndRate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/negotiatedRates/{rateCode}/profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"rateCode"+"}", url.PathEscape(parameterValueToString(r.rateCode, "rateCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.rateCode) < 1 {
		return localVarReturnValue, nil, reportError("rateCode must have at least 1 elements")
	}
	if strlen(r.rateCode) > 2000 {
		return localVarReturnValue, nil, reportError("rateCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.includeInactiveNegotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactiveNegotiatedRates", r.includeInactiveNegotiatedRates, "")
	}
	if r.fetchInstructionsLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructionsLimit", r.fetchInstructionsLimit, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetNegotiatedRatesForGivenProfileRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	startDate *string
	endDate *string
	hotelCode *string
	ratePlanCode *string
	includeInactiveNegotiatedRates *bool
	fetchInstructionsLimit *int32
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) Authorization(authorization string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) XAppKey(xAppKey string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) XHotelid(xHotelid string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) Limit(limit int32) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.limit = &limit
	return r
}

// Start Date.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) StartDate(startDate string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.startDate = &startDate
	return r
}

// End Date.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) EndDate(endDate string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.endDate = &endDate
	return r
}

// Hotel code associated to the hotel
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) HotelCode(hotelCode string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.hotelCode = &hotelCode
	return r
}

// Rate Plan Code associated with the rate
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) RatePlanCode(ratePlanCode string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Inactive negotiated rates.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) IncludeInactiveNegotiatedRates(includeInactiveNegotiatedRates bool) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.includeInactiveNegotiatedRates = &includeInactiveNegotiatedRates
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) FetchInstructionsLimit(fetchInstructionsLimit int32) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.fetchInstructionsLimit = &fetchInstructionsLimit
	return r
}

// Simple type for negotiated rates instructions that can be used in requests for partial operations.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) Execute() (*NegotiatedRates, *http.Response, error) {
	return r.ApiService.GetNegotiatedRatesForGivenProfileExecute(r)
}

/*
GetNegotiatedRatesForGivenProfile Get negotiated rate details for given profile

This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetNegotiatedRatesForGivenProfileRequest
*/
func (a *RatePlanApiService) GetNegotiatedRatesForGivenProfile(ctx context.Context, profileId string) RatePlanApiGetNegotiatedRatesForGivenProfileRequest {
	return RatePlanApiGetNegotiatedRatesForGivenProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return NegotiatedRates
func (a *RatePlanApiService) GetNegotiatedRatesForGivenProfileExecute(r RatePlanApiGetNegotiatedRatesForGivenProfileRequest) (*NegotiatedRates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NegotiatedRates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetNegotiatedRatesForGivenProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/negotiatedRates"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.hotelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelCode", r.hotelCode, "")
	}
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
	}
	if r.includeInactiveNegotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactiveNegotiatedRates", r.includeInactiveNegotiatedRates, "")
	}
	if r.fetchInstructionsLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructionsLimit", r.fetchInstructionsLimit, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPackageRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPackageRequest) Authorization(authorization string) RatePlanApiGetPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPackageRequest) XAppKey(xAppKey string) RatePlanApiGetPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPackageRequest) XHotelid(xHotelid string) RatePlanApiGetPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// Simple type for package instructions that can be used in requests for partial operations.
func (r RatePlanApiGetPackageRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetPackageRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetPackageRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPackageRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPackageRequest) Execute() (*PackageInfo, *http.Response, error) {
	return r.ApiService.GetPackageExecute(r)
}

/*
GetPackage Get package for given package

This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPackageRequest
*/
func (a *RatePlanApiService) GetPackage(ctx context.Context, packageCode string, hotelId string) RatePlanApiGetPackageRequest {
	return RatePlanApiGetPackageRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PackageInfo
func (a *RatePlanApiService) GetPackageExecute(r RatePlanApiGetPackageRequest) (*PackageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PackageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packages/{packageCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPackageFormulaRangesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taxRangeType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPackageFormulaRangesRequest) Authorization(authorization string) RatePlanApiGetPackageFormulaRangesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPackageFormulaRangesRequest) XAppKey(xAppKey string) RatePlanApiGetPackageFormulaRangesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPackageFormulaRangesRequest) XHotelid(xHotelid string) RatePlanApiGetPackageFormulaRangesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Tax Range Type.
func (r RatePlanApiGetPackageFormulaRangesRequest) TaxRangeType(taxRangeType string) RatePlanApiGetPackageFormulaRangesRequest {
	r.taxRangeType = &taxRangeType
	return r
}

// External system code.
func (r RatePlanApiGetPackageFormulaRangesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPackageFormulaRangesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPackageFormulaRangesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPackageFormulaRangesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPackageFormulaRangesRequest) Execute() (*PackageFormulaRanges, *http.Response, error) {
	return r.ApiService.GetPackageFormulaRangesExecute(r)
}

/*
GetPackageFormulaRanges Get package formula ranges

This API allows you to fetch package formula ranges. <p><strong>OperationId:</strong>getPackageFormulaRanges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPackageFormulaRangesRequest
*/
func (a *RatePlanApiService) GetPackageFormulaRanges(ctx context.Context, hotelId string) RatePlanApiGetPackageFormulaRangesRequest {
	return RatePlanApiGetPackageFormulaRangesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PackageFormulaRanges
func (a *RatePlanApiService) GetPackageFormulaRangesExecute(r RatePlanApiGetPackageFormulaRangesRequest) (*PackageFormulaRanges, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PackageFormulaRanges
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPackageFormulaRanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageFormulaRanges"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.taxRangeType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taxRangeType", r.taxRangeType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPackageGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	limit *int32
	code *string
	descriptionWildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPackageGroupsRequest) Authorization(authorization string) RatePlanApiGetPackageGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPackageGroupsRequest) XAppKey(xAppKey string) RatePlanApiGetPackageGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPackageGroupsRequest) XHotelid(xHotelid string) RatePlanApiGetPackageGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel code.
func (r RatePlanApiGetPackageGroupsRequest) HotelIds(hotelIds []string) RatePlanApiGetPackageGroupsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetPackageGroupsRequest) Limit(limit int32) RatePlanApiGetPackageGroupsRequest {
	r.limit = &limit
	return r
}

// Package code or group to be searched.
func (r RatePlanApiGetPackageGroupsRequest) Code(code string) RatePlanApiGetPackageGroupsRequest {
	r.code = &code
	return r
}

// The description or a part of the description based on which results should be filtered.
func (r RatePlanApiGetPackageGroupsRequest) DescriptionWildCard(descriptionWildCard string) RatePlanApiGetPackageGroupsRequest {
	r.descriptionWildCard = &descriptionWildCard
	return r
}

// External system code.
func (r RatePlanApiGetPackageGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPackageGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPackageGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPackageGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPackageGroupsRequest) Execute() (*PackageGroupsInfo, *http.Response, error) {
	return r.ApiService.GetPackageGroupsExecute(r)
}

/*
GetPackageGroups Get package groups

This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPackageGroupsRequest
*/
func (a *RatePlanApiService) GetPackageGroups(ctx context.Context, hotelId string) RatePlanApiGetPackageGroupsRequest {
	return RatePlanApiGetPackageGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PackageGroupsInfo
func (a *RatePlanApiService) GetPackageGroupsExecute(r RatePlanApiGetPackageGroupsRequest) (*PackageGroupsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PackageGroupsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPackageGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	}
	if r.descriptionWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descriptionWildCard", r.descriptionWildCard, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPackageRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPackageRatesRequest) Authorization(authorization string) RatePlanApiGetPackageRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPackageRatesRequest) XAppKey(xAppKey string) RatePlanApiGetPackageRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPackageRatesRequest) XHotelid(xHotelid string) RatePlanApiGetPackageRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetPackageRatesRequest) Limit(limit int32) RatePlanApiGetPackageRatesRequest {
	r.limit = &limit
	return r
}

// External system code.
func (r RatePlanApiGetPackageRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPackageRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPackageRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPackageRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPackageRatesRequest) Execute() (*PackageRates, *http.Response, error) {
	return r.ApiService.GetPackageRatesExecute(r)
}

/*
GetPackageRates Get package rates

This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPackageRatesRequest
*/
func (a *RatePlanApiService) GetPackageRates(ctx context.Context, packageCode string, hotelId string) RatePlanApiGetPackageRatesRequest {
	return RatePlanApiGetPackageRatesRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PackageRates
func (a *RatePlanApiService) GetPackageRatesExecute(r RatePlanApiGetPackageRatesRequest) (*PackageRates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PackageRates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPackageRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packages/{packageCode}/rates"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPackagesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	hotelId *[]string
	packageCode *[]string
	descriptionWildCard *string
	startDate *string
	endDate *string
	adults *int32
	children *int32
	bucket1Count *int32
	bucket2Count *int32
	bucket3Count *int32
	bucket4Count *int32
	bucket5Count *int32
	includeGroup *bool
	sellSeparate *bool
	ticketPostingRhythm *bool
	excludeRedemptionPackages *bool
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPackagesRequest) Authorization(authorization string) RatePlanApiGetPackagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPackagesRequest) XAppKey(xAppKey string) RatePlanApiGetPackagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPackagesRequest) XHotelid(xHotelid string) RatePlanApiGetPackagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetPackagesRequest) Limit(limit int32) RatePlanApiGetPackagesRequest {
	r.limit = &limit
	return r
}

// Hotel code.
func (r RatePlanApiGetPackagesRequest) HotelId(hotelId []string) RatePlanApiGetPackagesRequest {
	r.hotelId = &hotelId
	return r
}

func (r RatePlanApiGetPackagesRequest) PackageCode(packageCode []string) RatePlanApiGetPackagesRequest {
	r.packageCode = &packageCode
	return r
}

// The description or a part of the description based on which results should be filtered.
func (r RatePlanApiGetPackagesRequest) DescriptionWildCard(descriptionWildCard string) RatePlanApiGetPackagesRequest {
	r.descriptionWildCard = &descriptionWildCard
	return r
}

// Start Date for pricing schedule.
func (r RatePlanApiGetPackagesRequest) StartDate(startDate string) RatePlanApiGetPackagesRequest {
	r.startDate = &startDate
	return r
}

// End Date for pricing schedule.
func (r RatePlanApiGetPackagesRequest) EndDate(endDate string) RatePlanApiGetPackagesRequest {
	r.endDate = &endDate
	return r
}

// Number of adults for pricing schedule calculation.
func (r RatePlanApiGetPackagesRequest) Adults(adults int32) RatePlanApiGetPackagesRequest {
	r.adults = &adults
	return r
}

// Number of children for pricing schedule calculation.
func (r RatePlanApiGetPackagesRequest) Children(children int32) RatePlanApiGetPackagesRequest {
	r.children = &children
	return r
}

// Number of children classified under the first Age Qualifying Group(Child Bucket#1).
func (r RatePlanApiGetPackagesRequest) Bucket1Count(bucket1Count int32) RatePlanApiGetPackagesRequest {
	r.bucket1Count = &bucket1Count
	return r
}

// Number of children classified under the second Age Qualifying Group(Child Bucket#2).
func (r RatePlanApiGetPackagesRequest) Bucket2Count(bucket2Count int32) RatePlanApiGetPackagesRequest {
	r.bucket2Count = &bucket2Count
	return r
}

// Number of children classified under the third Age Qualifying Group(Child Bucket#3).
func (r RatePlanApiGetPackagesRequest) Bucket3Count(bucket3Count int32) RatePlanApiGetPackagesRequest {
	r.bucket3Count = &bucket3Count
	return r
}

// Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
func (r RatePlanApiGetPackagesRequest) Bucket4Count(bucket4Count int32) RatePlanApiGetPackagesRequest {
	r.bucket4Count = &bucket4Count
	return r
}

// Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
func (r RatePlanApiGetPackagesRequest) Bucket5Count(bucket5Count int32) RatePlanApiGetPackagesRequest {
	r.bucket5Count = &bucket5Count
	return r
}

// Indicates if Group Packages will be fetched.
func (r RatePlanApiGetPackagesRequest) IncludeGroup(includeGroup bool) RatePlanApiGetPackagesRequest {
	r.includeGroup = &includeGroup
	return r
}

// Indicates if Only Sell Separate Packages will be fetched, if not specified, it will ignore the criteria.
func (r RatePlanApiGetPackagesRequest) SellSeparate(sellSeparate bool) RatePlanApiGetPackagesRequest {
	r.sellSeparate = &sellSeparate
	return r
}

// Indicates if Only Ticket Posting Rhythm will be fetched, if not specified, it will ignore the criteria.
func (r RatePlanApiGetPackagesRequest) TicketPostingRhythm(ticketPostingRhythm bool) RatePlanApiGetPackagesRequest {
	r.ticketPostingRhythm = &ticketPostingRhythm
	return r
}

// Indicates if redemption packages must be excluded from the list.
func (r RatePlanApiGetPackagesRequest) ExcludeRedemptionPackages(excludeRedemptionPackages bool) RatePlanApiGetPackagesRequest {
	r.excludeRedemptionPackages = &excludeRedemptionPackages
	return r
}

// Simple type for package instructions that can be used in requests for partial operations.
func (r RatePlanApiGetPackagesRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetPackagesRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetPackagesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPackagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPackagesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPackagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPackagesRequest) Execute() (*PackagesInfo, *http.Response, error) {
	return r.ApiService.GetPackagesExecute(r)
}

/*
GetPackages Get Packages

Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiGetPackagesRequest
*/
func (a *RatePlanApiService) GetPackages(ctx context.Context) RatePlanApiGetPackagesRequest {
	return RatePlanApiGetPackagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PackagesInfo
func (a *RatePlanApiService) GetPackagesExecute(r RatePlanApiGetPackagesRequest) (*PackagesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PackagesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.hotelId != nil {
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
	}
	if r.packageCode != nil {
		t := *r.packageCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", t, "multi")
		}
	}
	if r.descriptionWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descriptionWildCard", r.descriptionWildCard, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.adults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adults", r.adults, "")
	}
	if r.children != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "children", r.children, "")
	}
	if r.bucket1Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket1Count", r.bucket1Count, "")
	}
	if r.bucket2Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket2Count", r.bucket2Count, "")
	}
	if r.bucket3Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket3Count", r.bucket3Count, "")
	}
	if r.bucket4Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket4Count", r.bucket4Count, "")
	}
	if r.bucket5Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket5Count", r.bucket5Count, "")
	}
	if r.includeGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGroup", r.includeGroup, "")
	}
	if r.sellSeparate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellSeparate", r.sellSeparate, "")
	}
	if r.ticketPostingRhythm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketPostingRhythm", r.ticketPostingRhythm, "")
	}
	if r.excludeRedemptionPackages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRedemptionPackages", r.excludeRedemptionPackages, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPromotionCodesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	promotionCode *[]string
	promotionGroup *[]string
	rateCodes *string
	description *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPromotionCodesRequest) Authorization(authorization string) RatePlanApiGetPromotionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPromotionCodesRequest) XAppKey(xAppKey string) RatePlanApiGetPromotionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPromotionCodesRequest) XHotelid(xHotelid string) RatePlanApiGetPromotionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetPromotionCodesRequest) Limit(limit int32) RatePlanApiGetPromotionCodesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetPromotionCodesRequest) Offset(offset int32) RatePlanApiGetPromotionCodesRequest {
	r.offset = &offset
	return r
}

func (r RatePlanApiGetPromotionCodesRequest) PromotionCode(promotionCode []string) RatePlanApiGetPromotionCodesRequest {
	r.promotionCode = &promotionCode
	return r
}

func (r RatePlanApiGetPromotionCodesRequest) PromotionGroup(promotionGroup []string) RatePlanApiGetPromotionCodesRequest {
	r.promotionGroup = &promotionGroup
	return r
}

// Comma separated list of rates codes. This is used to filter the response and return only those promotion codes that are tied to any of these rate codes.
func (r RatePlanApiGetPromotionCodesRequest) RateCodes(rateCodes string) RatePlanApiGetPromotionCodesRequest {
	r.rateCodes = &rateCodes
	return r
}

// Category Description of the promotion.
func (r RatePlanApiGetPromotionCodesRequest) Description(description string) RatePlanApiGetPromotionCodesRequest {
	r.description = &description
	return r
}

// Indicates whether to include inactive promotions.
func (r RatePlanApiGetPromotionCodesRequest) IncludeInactive(includeInactive bool) RatePlanApiGetPromotionCodesRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RatePlanApiGetPromotionCodesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPromotionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPromotionCodesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPromotionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPromotionCodesRequest) Execute() (*PropertyPromotionCodes, *http.Response, error) {
	return r.ApiService.GetPromotionCodesExecute(r)
}

/*
GetPromotionCodes Get promotion codes

This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPromotionCodesRequest
*/
func (a *RatePlanApiService) GetPromotionCodes(ctx context.Context, hotelId string) RatePlanApiGetPromotionCodesRequest {
	return RatePlanApiGetPromotionCodesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PropertyPromotionCodes
func (a *RatePlanApiService) GetPromotionCodesExecute(r RatePlanApiGetPromotionCodesRequest) (*PropertyPromotionCodes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PropertyPromotionCodes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPromotionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.promotionCode != nil {
		t := *r.promotionCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", t, "multi")
		}
	}
	if r.promotionGroup != nil {
		t := *r.promotionGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroup", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroup", t, "multi")
		}
	}
	if r.rateCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCodes", r.rateCodes, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetPromotionGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	code *[]string
	promotionGroupListCode *[]string
	rateCodes *string
	description *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetPromotionGroupsRequest) Authorization(authorization string) RatePlanApiGetPromotionGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetPromotionGroupsRequest) XAppKey(xAppKey string) RatePlanApiGetPromotionGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetPromotionGroupsRequest) XHotelid(xHotelid string) RatePlanApiGetPromotionGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetPromotionGroupsRequest) Limit(limit int32) RatePlanApiGetPromotionGroupsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetPromotionGroupsRequest) Offset(offset int32) RatePlanApiGetPromotionGroupsRequest {
	r.offset = &offset
	return r
}

func (r RatePlanApiGetPromotionGroupsRequest) Code(code []string) RatePlanApiGetPromotionGroupsRequest {
	r.code = &code
	return r
}

func (r RatePlanApiGetPromotionGroupsRequest) PromotionGroupListCode(promotionGroupListCode []string) RatePlanApiGetPromotionGroupsRequest {
	r.promotionGroupListCode = &promotionGroupListCode
	return r
}

// Comma separated list of rates codes. This is used to filter the response and return only those promotion codes that are tied to any of these rate codes.
func (r RatePlanApiGetPromotionGroupsRequest) RateCodes(rateCodes string) RatePlanApiGetPromotionGroupsRequest {
	r.rateCodes = &rateCodes
	return r
}

// Category Description of the promotion.
func (r RatePlanApiGetPromotionGroupsRequest) Description(description string) RatePlanApiGetPromotionGroupsRequest {
	r.description = &description
	return r
}

// Indicates whether to include inactive promotions.
func (r RatePlanApiGetPromotionGroupsRequest) IncludeInactive(includeInactive bool) RatePlanApiGetPromotionGroupsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RatePlanApiGetPromotionGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetPromotionGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetPromotionGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetPromotionGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetPromotionGroupsRequest) Execute() (*PromotionGroups, *http.Response, error) {
	return r.ApiService.GetPromotionGroupsExecute(r)
}

/*
GetPromotionGroups Get promotion groups

This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetPromotionGroupsRequest
*/
func (a *RatePlanApiService) GetPromotionGroups(ctx context.Context, hotelId string) RatePlanApiGetPromotionGroupsRequest {
	return RatePlanApiGetPromotionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PromotionGroups
func (a *RatePlanApiService) GetPromotionGroupsExecute(r RatePlanApiGetPromotionGroupsRequest) (*PromotionGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PromotionGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetPromotionGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
	}
	if r.promotionGroupListCode != nil {
		t := *r.promotionGroupListCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroupListCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroupListCode", t, "multi")
		}
	}
	if r.rateCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCodes", r.rateCodes, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRateActivityLogRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	module *string
	parameterName *[]string
	parameterValue *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	activityGroup *string
	activityType *string
	fromDate *string
	toDate *string
	searchText *string
	userId *[]int32
	userForIdsUserId *[]int32
	xExternalsystem *string
	acceptLanguage *string
}

// Activity module.
func (r RatePlanApiGetRateActivityLogRequest) Module(module string) RatePlanApiGetRateActivityLogRequest {
	r.module = &module
	return r
}

// Name of the parameter.
func (r RatePlanApiGetRateActivityLogRequest) ParameterName(parameterName []string) RatePlanApiGetRateActivityLogRequest {
	r.parameterName = &parameterName
	return r
}

// Value of the parameter.
func (r RatePlanApiGetRateActivityLogRequest) ParameterValue(parameterValue []string) RatePlanApiGetRateActivityLogRequest {
	r.parameterValue = &parameterValue
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRateActivityLogRequest) Authorization(authorization string) RatePlanApiGetRateActivityLogRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRateActivityLogRequest) XAppKey(xAppKey string) RatePlanApiGetRateActivityLogRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRateActivityLogRequest) XHotelid(xHotelid string) RatePlanApiGetRateActivityLogRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRateActivityLogRequest) Limit(limit int32) RatePlanApiGetRateActivityLogRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetRateActivityLogRequest) Offset(offset int32) RatePlanApiGetRateActivityLogRequest {
	r.offset = &offset
	return r
}

func (r RatePlanApiGetRateActivityLogRequest) ActivityGroup(activityGroup string) RatePlanApiGetRateActivityLogRequest {
	r.activityGroup = &activityGroup
	return r
}

func (r RatePlanApiGetRateActivityLogRequest) ActivityType(activityType string) RatePlanApiGetRateActivityLogRequest {
	r.activityType = &activityType
	return r
}

// Search from date for the user activity log.
func (r RatePlanApiGetRateActivityLogRequest) FromDate(fromDate string) RatePlanApiGetRateActivityLogRequest {
	r.fromDate = &fromDate
	return r
}

// Search to date for the user activity log.
func (r RatePlanApiGetRateActivityLogRequest) ToDate(toDate string) RatePlanApiGetRateActivityLogRequest {
	r.toDate = &toDate
	return r
}

// Search text for the user activity log.
func (r RatePlanApiGetRateActivityLogRequest) SearchText(searchText string) RatePlanApiGetRateActivityLogRequest {
	r.searchText = &searchText
	return r
}

func (r RatePlanApiGetRateActivityLogRequest) UserId(userId []int32) RatePlanApiGetRateActivityLogRequest {
	r.userId = &userId
	return r
}

func (r RatePlanApiGetRateActivityLogRequest) UserForIdsUserId(userForIdsUserId []int32) RatePlanApiGetRateActivityLogRequest {
	r.userForIdsUserId = &userForIdsUserId
	return r
}

// External system code.
func (r RatePlanApiGetRateActivityLogRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRateActivityLogRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRateActivityLogRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRateActivityLogRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRateActivityLogRequest) Execute() (*RateActivityLog, *http.Response, error) {
	return r.ApiService.GetRateActivityLogExecute(r)
}

/*
GetRateActivityLog Get rate activity log

This API allows you to fetch Rate Activity Log. <p><strong>OperationId:</strong>getRateActivityLog</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRateActivityLogRequest
*/
func (a *RatePlanApiService) GetRateActivityLog(ctx context.Context, hotelId string) RatePlanApiGetRateActivityLogRequest {
	return RatePlanApiGetRateActivityLogRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateActivityLog
func (a *RatePlanApiService) GetRateActivityLogExecute(r RatePlanApiGetRateActivityLogRequest) (*RateActivityLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateActivityLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRateActivityLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rates/activityLog"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "module", r.module, "")
	{
		t := *r.parameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", t, "multi")
		}
	}
	{
		t := *r.parameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.activityGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityGroup", r.activityGroup, "")
	}
	if r.activityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityType", r.activityType, "")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchText", r.searchText, "")
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userId", t, "multi")
		}
	}
	if r.userForIdsUserId != nil {
		t := *r.userForIdsUserId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userForIdsUserId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userForIdsUserId", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRateGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	code *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRateGroupsRequest) Authorization(authorization string) RatePlanApiGetRateGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRateGroupsRequest) XAppKey(xAppKey string) RatePlanApiGetRateGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRateGroupsRequest) XHotelid(xHotelid string) RatePlanApiGetRateGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRateGroupsRequest) Limit(limit int32) RatePlanApiGetRateGroupsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetRateGroupsRequest) Offset(offset int32) RatePlanApiGetRateGroupsRequest {
	r.offset = &offset
	return r
}

// Codes to be searched.
func (r RatePlanApiGetRateGroupsRequest) Code(code []string) RatePlanApiGetRateGroupsRequest {
	r.code = &code
	return r
}

// Wildcard search on the code.
func (r RatePlanApiGetRateGroupsRequest) WildCard(wildCard string) RatePlanApiGetRateGroupsRequest {
	r.wildCard = &wildCard
	return r
}

// Rate Group Description.
func (r RatePlanApiGetRateGroupsRequest) Description(description string) RatePlanApiGetRateGroupsRequest {
	r.description = &description
	return r
}

// External system code.
func (r RatePlanApiGetRateGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRateGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRateGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRateGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRateGroupsRequest) Execute() (*RateGroupsInfo, *http.Response, error) {
	return r.ApiService.GetRateGroupsExecute(r)
}

/*
GetRateGroups Get rate groups

This API allows you to update rate groups. <p><strong>OperationId:</strong>getRateGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRateGroupsRequest
*/
func (a *RatePlanApiService) GetRateGroups(ctx context.Context, hotelId string) RatePlanApiGetRateGroupsRequest {
	return RatePlanApiGetRateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateGroupsInfo
func (a *RatePlanApiService) GetRateGroupsExecute(r RatePlanApiGetRateGroupsRequest) (*RateGroupsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateGroupsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRateGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
	}
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlanRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlanRequest) Authorization(authorization string) RatePlanApiGetRatePlanRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlanRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlanRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlanRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlanRequest {
	r.xHotelid = &xHotelid
	return r
}

// Simple type for Rate plan codes instructions that can be used in requests for partial operations.
func (r RatePlanApiGetRatePlanRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetRatePlanRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetRatePlanRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlanRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlanRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlanRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlanRequest) Execute() (*RatePlanInfo, *http.Response, error) {
	return r.ApiService.GetRatePlanExecute(r)
}

/*
GetRatePlan Get rate plan

This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRatePlanRequest
*/
func (a *RatePlanApiService) GetRatePlan(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiGetRatePlanRequest {
	return RatePlanApiGetRatePlanRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RatePlanInfo
func (a *RatePlanApiService) GetRatePlanExecute(r RatePlanApiGetRatePlanRequest) (*RatePlanInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlanInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	summaryInfo *bool
	id *string
	ratePlanCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) Authorization(authorization string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) Limit(limit int32) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.limit = &limit
	return r
}

// When true response will return summary information otherwise detailed information.
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) SummaryInfo(summaryInfo bool) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.summaryInfo = &summaryInfo
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) Id(id string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.id = &id
	return r
}

// Rate plan code.
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) RatePlanCode(ratePlanCode string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// External system code.
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) Execute() (*RatePlanScheduleYieldAdjustments, *http.Response, error) {
	return r.ApiService.GetRatePlanScheduleYieldAdjustmentsExecute(r)
}

/*
GetRatePlanScheduleYieldAdjustments Get rate plan schedule yield adjustments

This API allows you to fetch Rate Plan  schedules for yield adjustments. <p><strong>OperationId:</strong>getRatePlanScheduleYieldAdjustments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest
*/
func (a *RatePlanApiService) GetRatePlanScheduleYieldAdjustments(ctx context.Context, hotelId string) RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest {
	return RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RatePlanScheduleYieldAdjustments
func (a *RatePlanApiService) GetRatePlanScheduleYieldAdjustmentsExecute(r RatePlanApiGetRatePlanScheduleYieldAdjustmentsRequest) (*RatePlanScheduleYieldAdjustments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlanScheduleYieldAdjustments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlanScheduleYieldAdjustments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlan/schedule/yieldAdjustment"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.summaryInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summaryInfo", r.summaryInfo, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlanSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	excludeRatePlanPackage *bool
	limit *int32
	tierId *int32
	ratePlanScheduleId *string
	ratePlanScheduleIdType *string
	startDate *string
	endDate *string
	duration *string
	roomType *[]string
	roomClass *[]string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlanSchedulesRequest) Authorization(authorization string) RatePlanApiGetRatePlanSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlanSchedulesRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlanSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlanSchedulesRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlanSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Exclude the List of Pricing Schedule Packages from the response.
func (r RatePlanApiGetRatePlanSchedulesRequest) ExcludeRatePlanPackage(excludeRatePlanPackage bool) RatePlanApiGetRatePlanSchedulesRequest {
	r.excludeRatePlanPackage = &excludeRatePlanPackage
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRatePlanSchedulesRequest) Limit(limit int32) RatePlanApiGetRatePlanSchedulesRequest {
	r.limit = &limit
	return r
}

func (r RatePlanApiGetRatePlanSchedulesRequest) TierId(tierId int32) RatePlanApiGetRatePlanSchedulesRequest {
	r.tierId = &tierId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlanSchedulesRequest) RatePlanScheduleId(ratePlanScheduleId string) RatePlanApiGetRatePlanSchedulesRequest {
	r.ratePlanScheduleId = &ratePlanScheduleId
	return r
}

// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
func (r RatePlanApiGetRatePlanSchedulesRequest) RatePlanScheduleIdType(ratePlanScheduleIdType string) RatePlanApiGetRatePlanSchedulesRequest {
	r.ratePlanScheduleIdType = &ratePlanScheduleIdType
	return r
}

func (r RatePlanApiGetRatePlanSchedulesRequest) StartDate(startDate string) RatePlanApiGetRatePlanSchedulesRequest {
	r.startDate = &startDate
	return r
}

func (r RatePlanApiGetRatePlanSchedulesRequest) EndDate(endDate string) RatePlanApiGetRatePlanSchedulesRequest {
	r.endDate = &endDate
	return r
}

func (r RatePlanApiGetRatePlanSchedulesRequest) Duration(duration string) RatePlanApiGetRatePlanSchedulesRequest {
	r.duration = &duration
	return r
}

// Room Type.
func (r RatePlanApiGetRatePlanSchedulesRequest) RoomType(roomType []string) RatePlanApiGetRatePlanSchedulesRequest {
	r.roomType = &roomType
	return r
}

// Room Class.
func (r RatePlanApiGetRatePlanSchedulesRequest) RoomClass(roomClass []string) RatePlanApiGetRatePlanSchedulesRequest {
	r.roomClass = &roomClass
	return r
}

// Include inactive rate schedules in the fetch result.
func (r RatePlanApiGetRatePlanSchedulesRequest) IncludeInactive(includeInactive bool) RatePlanApiGetRatePlanSchedulesRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RatePlanApiGetRatePlanSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlanSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlanSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlanSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlanSchedulesRequest) Execute() (*RatePlanSchedulesInfo, *http.Response, error) {
	return r.ApiService.GetRatePlanSchedulesExecute(r)
}

/*
GetRatePlanSchedules Get rate plan schedules

Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRatePlanSchedulesRequest
*/
func (a *RatePlanApiService) GetRatePlanSchedules(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiGetRatePlanSchedulesRequest {
	return RatePlanApiGetRatePlanSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RatePlanSchedulesInfo
func (a *RatePlanApiService) GetRatePlanSchedulesExecute(r RatePlanApiGetRatePlanSchedulesRequest) (*RatePlanSchedulesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlanSchedulesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlanSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.excludeRatePlanPackage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRatePlanPackage", r.excludeRatePlanPackage, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.tierId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tierId", r.tierId, "")
	}
	if r.ratePlanScheduleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanScheduleId", r.ratePlanScheduleId, "")
	}
	if r.ratePlanScheduleIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanScheduleIdType", r.ratePlanScheduleIdType, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
	}
	if r.roomClass != nil {
		t := *r.roomClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", t, "multi")
		}
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlansRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeRateInformation *bool
	limit *int32
	offset *int32
	ratePlanCode *[]string
	rateCategory *[]string
	sellDate *string
	displaySet *string
	id *string
	idExtension *int32
	idContext *string
	type_ *string
	attributeName *[]string
	orderType *[]string
	includeInactive *bool
	dayUseOnly *bool
	approvalStatus *string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel code.
func (r RatePlanApiGetRatePlansRequest) HotelId(hotelId []string) RatePlanApiGetRatePlansRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlansRequest) Authorization(authorization string) RatePlanApiGetRatePlansRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlansRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlansRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlansRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlansRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates whether rate plan short and long information should be included in the fetched results.
func (r RatePlanApiGetRatePlansRequest) IncludeRateInformation(includeRateInformation bool) RatePlanApiGetRatePlansRequest {
	r.includeRateInformation = &includeRateInformation
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRatePlansRequest) Limit(limit int32) RatePlanApiGetRatePlansRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetRatePlansRequest) Offset(offset int32) RatePlanApiGetRatePlansRequest {
	r.offset = &offset
	return r
}

// Rate Plan code.
func (r RatePlanApiGetRatePlansRequest) RatePlanCode(ratePlanCode []string) RatePlanApiGetRatePlansRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Rate category of the rate plan.
func (r RatePlanApiGetRatePlansRequest) RateCategory(rateCategory []string) RatePlanApiGetRatePlansRequest {
	r.rateCategory = &rateCategory
	return r
}

// Sell date of the rate plan.
func (r RatePlanApiGetRatePlansRequest) SellDate(sellDate string) RatePlanApiGetRatePlansRequest {
	r.sellDate = &sellDate
	return r
}

// Display set for the rate plan.
func (r RatePlanApiGetRatePlansRequest) DisplaySet(displaySet string) RatePlanApiGetRatePlansRequest {
	r.displaySet = &displaySet
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlansRequest) Id(id string) RatePlanApiGetRatePlansRequest {
	r.id = &id
	return r
}

// Additional identifying value assigned by the creating system.
func (r RatePlanApiGetRatePlansRequest) IdExtension(idExtension int32) RatePlanApiGetRatePlansRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r RatePlanApiGetRatePlansRequest) IdContext(idContext string) RatePlanApiGetRatePlansRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
func (r RatePlanApiGetRatePlansRequest) Type_(type_ string) RatePlanApiGetRatePlansRequest {
	r.type_ = &type_
	return r
}

func (r RatePlanApiGetRatePlansRequest) AttributeName(attributeName []string) RatePlanApiGetRatePlansRequest {
	r.attributeName = &attributeName
	return r
}

func (r RatePlanApiGetRatePlansRequest) OrderType(orderType []string) RatePlanApiGetRatePlansRequest {
	r.orderType = &orderType
	return r
}

// Include or not include inactive rate codes.
func (r RatePlanApiGetRatePlansRequest) IncludeInactive(includeInactive bool) RatePlanApiGetRatePlansRequest {
	r.includeInactive = &includeInactive
	return r
}

// Indicates to only fetch rate plans flagged as Day Use.
func (r RatePlanApiGetRatePlansRequest) DayUseOnly(dayUseOnly bool) RatePlanApiGetRatePlansRequest {
	r.dayUseOnly = &dayUseOnly
	return r
}

// Indicates that the Rate Plan is approved for selling.
func (r RatePlanApiGetRatePlansRequest) ApprovalStatus(approvalStatus string) RatePlanApiGetRatePlansRequest {
	r.approvalStatus = &approvalStatus
	return r
}

// External system code.
func (r RatePlanApiGetRatePlansRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlansRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlansRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlansRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlansRequest) Execute() (*RatePlansSummary, *http.Response, error) {
	return r.ApiService.GetRatePlansExecute(r)
}

/*
GetRatePlans Get rate plans

Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiGetRatePlansRequest
*/
func (a *RatePlanApiService) GetRatePlans(ctx context.Context) RatePlanApiGetRatePlansRequest {
	return RatePlanApiGetRatePlansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RatePlansSummary
func (a *RatePlanApiService) GetRatePlansExecute(r RatePlanApiGetRatePlansRequest) (*RatePlansSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlansSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ratePlans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
	}
	if r.includeRateInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRateInformation", r.includeRateInformation, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
	}
	if r.rateCategory != nil {
		t := *r.rateCategory
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rateCategory", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rateCategory", t, "multi")
		}
	}
	if r.sellDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellDate", r.sellDate, "")
	}
	if r.displaySet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displaySet", r.displaySet, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.attributeName != nil {
		t := *r.attributeName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "attributeName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "attributeName", t, "multi")
		}
	}
	if r.orderType != nil {
		t := *r.orderType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orderType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orderType", t, "multi")
		}
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	if r.dayUseOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayUseOnly", r.dayUseOnly, "")
	}
	if r.approvalStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalStatus", r.approvalStatus, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlansByHotelRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanCode *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlansByHotelRequest) Authorization(authorization string) RatePlanApiGetRatePlansByHotelRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlansByHotelRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlansByHotelRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlansByHotelRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlansByHotelRequest {
	r.xHotelid = &xHotelid
	return r
}

// Rate plan code.
func (r RatePlanApiGetRatePlansByHotelRequest) RatePlanCode(ratePlanCode string) RatePlanApiGetRatePlansByHotelRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Simple type for Rate plan codes instructions that can be used in requests for partial operations.
func (r RatePlanApiGetRatePlansByHotelRequest) FetchInstructions(fetchInstructions []string) RatePlanApiGetRatePlansByHotelRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r RatePlanApiGetRatePlansByHotelRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlansByHotelRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlansByHotelRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlansByHotelRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlansByHotelRequest) Execute() (*RatePlanInfo, *http.Response, error) {
	return r.ApiService.GetRatePlansByHotelExecute(r)
}

/*
GetRatePlansByHotel Get rate plans by Hotel Code

This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlansByHotel</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRatePlansByHotelRequest
*/
func (a *RatePlanApiService) GetRatePlansByHotel(ctx context.Context, hotelId string) RatePlanApiGetRatePlansByHotelRequest {
	return RatePlanApiGetRatePlansByHotelRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RatePlanInfo
func (a *RatePlanApiService) GetRatePlansByHotelExecute(r RatePlanApiGetRatePlansByHotelRequest) (*RatePlanInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RatePlanInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlansByHotel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRatePlansForBlockRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanCode *[]string
	beginDate *string
	endDate *string
	companyId *string
	companyIdType *string
	sourceId *string
	sourceIdType *string
	agentId *string
	agentIdType *string
	negotiatedOnly *bool
	currencyCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRatePlansForBlockRequest) Authorization(authorization string) RatePlanApiGetRatePlansForBlockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRatePlansForBlockRequest) XAppKey(xAppKey string) RatePlanApiGetRatePlansForBlockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRatePlansForBlockRequest) XHotelid(xHotelid string) RatePlanApiGetRatePlansForBlockRequest {
	r.xHotelid = &xHotelid
	return r
}

// Rate Plan code.
func (r RatePlanApiGetRatePlansForBlockRequest) RatePlanCode(ratePlanCode []string) RatePlanApiGetRatePlansForBlockRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Start sell date of the rate code.
func (r RatePlanApiGetRatePlansForBlockRequest) BeginDate(beginDate string) RatePlanApiGetRatePlansForBlockRequest {
	r.beginDate = &beginDate
	return r
}

// End sell date of the rate code.
func (r RatePlanApiGetRatePlansForBlockRequest) EndDate(endDate string) RatePlanApiGetRatePlansForBlockRequest {
	r.endDate = &endDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlansForBlockRequest) CompanyId(companyId string) RatePlanApiGetRatePlansForBlockRequest {
	r.companyId = &companyId
	return r
}

// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
func (r RatePlanApiGetRatePlansForBlockRequest) CompanyIdType(companyIdType string) RatePlanApiGetRatePlansForBlockRequest {
	r.companyIdType = &companyIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlansForBlockRequest) SourceId(sourceId string) RatePlanApiGetRatePlansForBlockRequest {
	r.sourceId = &sourceId
	return r
}

// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
func (r RatePlanApiGetRatePlansForBlockRequest) SourceIdType(sourceIdType string) RatePlanApiGetRatePlansForBlockRequest {
	r.sourceIdType = &sourceIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RatePlanApiGetRatePlansForBlockRequest) AgentId(agentId string) RatePlanApiGetRatePlansForBlockRequest {
	r.agentId = &agentId
	return r
}

// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
func (r RatePlanApiGetRatePlansForBlockRequest) AgentIdType(agentIdType string) RatePlanApiGetRatePlansForBlockRequest {
	r.agentIdType = &agentIdType
	return r
}

// Flag to indicate if negotiated rate codes to be fetched.
func (r RatePlanApiGetRatePlansForBlockRequest) NegotiatedOnly(negotiatedOnly bool) RatePlanApiGetRatePlansForBlockRequest {
	r.negotiatedOnly = &negotiatedOnly
	return r
}

// Currency for the rate code to be fetched.
func (r RatePlanApiGetRatePlansForBlockRequest) CurrencyCode(currencyCode string) RatePlanApiGetRatePlansForBlockRequest {
	r.currencyCode = &currencyCode
	return r
}

// External system code.
func (r RatePlanApiGetRatePlansForBlockRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRatePlansForBlockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRatePlansForBlockRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRatePlansForBlockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRatePlansForBlockRequest) Execute() (*BlockRatePlans, *http.Response, error) {
	return r.ApiService.GetRatePlansForBlockExecute(r)
}

/*
GetRatePlansForBlock Get rate plans for a given block

This API allows you to fetch Rate Plans on a specific block. <p><strong>OperationId:</strong>getRatePlansForBlock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRatePlansForBlockRequest
*/
func (a *RatePlanApiService) GetRatePlansForBlock(ctx context.Context, hotelId string) RatePlanApiGetRatePlansForBlockRequest {
	return RatePlanApiGetRatePlansForBlockRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BlockRatePlans
func (a *RatePlanApiService) GetRatePlansForBlockExecute(r RatePlanApiGetRatePlansForBlockRequest) (*BlockRatePlans, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockRatePlans
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRatePlansForBlock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blocks/ratePlans"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
	}
	if r.beginDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "beginDate", r.beginDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	}
	if r.companyIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyIdType", r.companyIdType, "")
	}
	if r.sourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceId", r.sourceId, "")
	}
	if r.sourceIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIdType", r.sourceIdType, "")
	}
	if r.agentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentId", r.agentId, "")
	}
	if r.agentIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentIdType", r.agentIdType, "")
	}
	if r.negotiatedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "negotiatedOnly", r.negotiatedOnly, "")
	}
	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetRateStrategiesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	restrictionDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetRateStrategiesRequest) Authorization(authorization string) RatePlanApiGetRateStrategiesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetRateStrategiesRequest) XAppKey(xAppKey string) RatePlanApiGetRateStrategiesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetRateStrategiesRequest) XHotelid(xHotelid string) RatePlanApiGetRateStrategiesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetRateStrategiesRequest) Limit(limit int32) RatePlanApiGetRateStrategiesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetRateStrategiesRequest) Offset(offset int32) RatePlanApiGetRateStrategiesRequest {
	r.offset = &offset
	return r
}

// search Rate Strategies with this restriction date.
func (r RatePlanApiGetRateStrategiesRequest) RestrictionDate(restrictionDate string) RatePlanApiGetRateStrategiesRequest {
	r.restrictionDate = &restrictionDate
	return r
}

// External system code.
func (r RatePlanApiGetRateStrategiesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetRateStrategiesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetRateStrategiesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetRateStrategiesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetRateStrategiesRequest) Execute() (*RateStrategies, *http.Response, error) {
	return r.ApiService.GetRateStrategiesExecute(r)
}

/*
GetRateStrategies Get rate strategies

This API allows you to fetch rate strategies. <p><strong>OperationId:</strong>getRateStrategies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetRateStrategiesRequest
*/
func (a *RatePlanApiService) GetRateStrategies(ctx context.Context, hotelId string) RatePlanApiGetRateStrategiesRequest {
	return RatePlanApiGetRateStrategiesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateStrategies
func (a *RatePlanApiService) GetRateStrategiesExecute(r RatePlanApiGetRateStrategiesRequest) (*RateStrategies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateStrategies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetRateStrategies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateStrategies"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.restrictionDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "restrictionDate", r.restrictionDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetTemplatePackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	includeInactive *bool
	authorization *string
	xAppKey *string
	xHotelid *string
	packageForecastGroupCode *[]string
	wildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

// Inactive flag - whether or not to display inactive records
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) IncludeInactive(includeInactive bool) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.includeInactive = &includeInactive
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Codes to be searched.
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) PackageForecastGroupCode(packageForecastGroupCode []string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.packageForecastGroupCode = &packageForecastGroupCode
	return r
}

// Wildcard search on the code.
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) WildCard(wildCard string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.wildCard = &wildCard
	return r
}

// External system code.
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetTemplatePackageForecastGroupsRequest) Execute() (*TemplatePackageForecastGroups, *http.Response, error) {
	return r.ApiService.GetTemplatePackageForecastGroupsExecute(r)
}

/*
GetTemplatePackageForecastGroups Get Template Package Forecast Groups

This API allows you to fetch Package Forecast groups template. <p><strong>OperationId:</strong>getTemplatePackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiGetTemplatePackageForecastGroupsRequest
*/
func (a *RatePlanApiService) GetTemplatePackageForecastGroups(ctx context.Context) RatePlanApiGetTemplatePackageForecastGroupsRequest {
	return RatePlanApiGetTemplatePackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TemplatePackageForecastGroups
func (a *RatePlanApiService) GetTemplatePackageForecastGroupsExecute(r RatePlanApiGetTemplatePackageForecastGroupsRequest) (*TemplatePackageForecastGroups, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplatePackageForecastGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetTemplatePackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packageForecastGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	if r.packageForecastGroupCode != nil {
		t := *r.packageForecastGroupCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageForecastGroupCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageForecastGroupCode", t, "multi")
		}
	}
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetTemplatePromotionCodesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelId *[]string
	promotionCode *[]string
	promotionGroup *[]string
	rateCodes *string
	description *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetTemplatePromotionCodesRequest) Authorization(authorization string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetTemplatePromotionCodesRequest) XAppKey(xAppKey string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetTemplatePromotionCodesRequest) XHotelid(xHotelid string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetTemplatePromotionCodesRequest) Limit(limit int32) RatePlanApiGetTemplatePromotionCodesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RatePlanApiGetTemplatePromotionCodesRequest) Offset(offset int32) RatePlanApiGetTemplatePromotionCodesRequest {
	r.offset = &offset
	return r
}

// Hotel code.
func (r RatePlanApiGetTemplatePromotionCodesRequest) HotelId(hotelId []string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.hotelId = &hotelId
	return r
}

func (r RatePlanApiGetTemplatePromotionCodesRequest) PromotionCode(promotionCode []string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.promotionCode = &promotionCode
	return r
}

func (r RatePlanApiGetTemplatePromotionCodesRequest) PromotionGroup(promotionGroup []string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.promotionGroup = &promotionGroup
	return r
}

// Comma separated list of rates codes. This is used to filter the response and return only those promotion codes that are tied to any of these rate codes.
func (r RatePlanApiGetTemplatePromotionCodesRequest) RateCodes(rateCodes string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.rateCodes = &rateCodes
	return r
}

// Category Description of the promotion.
func (r RatePlanApiGetTemplatePromotionCodesRequest) Description(description string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.description = &description
	return r
}

// Indicates whether to include inactive promotions.
func (r RatePlanApiGetTemplatePromotionCodesRequest) IncludeInactive(includeInactive bool) RatePlanApiGetTemplatePromotionCodesRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RatePlanApiGetTemplatePromotionCodesRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetTemplatePromotionCodesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetTemplatePromotionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetTemplatePromotionCodesRequest) Execute() (*TemplatePromotionCodes, *http.Response, error) {
	return r.ApiService.GetTemplatePromotionCodesExecute(r)
}

/*
GetTemplatePromotionCodes Get Template Promotion Codes

This API allows you to fetch Promotion Code template. <p><strong>OperationId:</strong>getTemplatePromotionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiGetTemplatePromotionCodesRequest
*/
func (a *RatePlanApiService) GetTemplatePromotionCodes(ctx context.Context) RatePlanApiGetTemplatePromotionCodesRequest {
	return RatePlanApiGetTemplatePromotionCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TemplatePromotionCodes
func (a *RatePlanApiService) GetTemplatePromotionCodesExecute(r RatePlanApiGetTemplatePromotionCodesRequest) (*TemplatePromotionCodes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplatePromotionCodes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetTemplatePromotionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotionCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.hotelId != nil {
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
	}
	if r.promotionCode != nil {
		t := *r.promotionCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", t, "multi")
		}
	}
	if r.promotionGroup != nil {
		t := *r.promotionGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroup", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionGroup", t, "multi")
		}
	}
	if r.rateCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCodes", r.rateCodes, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiGetYieldAdjustmentsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	currencyCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiGetYieldAdjustmentsRequest) Authorization(authorization string) RatePlanApiGetYieldAdjustmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiGetYieldAdjustmentsRequest) XAppKey(xAppKey string) RatePlanApiGetYieldAdjustmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiGetYieldAdjustmentsRequest) XHotelid(xHotelid string) RatePlanApiGetYieldAdjustmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RatePlanApiGetYieldAdjustmentsRequest) Limit(limit int32) RatePlanApiGetYieldAdjustmentsRequest {
	r.limit = &limit
	return r
}

// fetch adjustment codes attached to this Currency code.
func (r RatePlanApiGetYieldAdjustmentsRequest) CurrencyCode(currencyCode string) RatePlanApiGetYieldAdjustmentsRequest {
	r.currencyCode = &currencyCode
	return r
}

// External system code.
func (r RatePlanApiGetYieldAdjustmentsRequest) XExternalsystem(xExternalsystem string) RatePlanApiGetYieldAdjustmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiGetYieldAdjustmentsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiGetYieldAdjustmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiGetYieldAdjustmentsRequest) Execute() (*YieldAdjustments, *http.Response, error) {
	return r.ApiService.GetYieldAdjustmentsExecute(r)
}

/*
GetYieldAdjustments Get yield adjustments

This API allows you to fetch yield adjustments. <p><strong>OperationId:</strong>getYieldAdjustments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiGetYieldAdjustmentsRequest
*/
func (a *RatePlanApiService) GetYieldAdjustments(ctx context.Context, hotelId string) RatePlanApiGetYieldAdjustmentsRequest {
	return RatePlanApiGetYieldAdjustmentsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return YieldAdjustments
func (a *RatePlanApiService) GetYieldAdjustmentsExecute(r RatePlanApiGetYieldAdjustmentsRequest) (*YieldAdjustments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *YieldAdjustments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.GetYieldAdjustments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/yieldAdjustments"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiManageRatePlansSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlansSchedulesToManage *ManageRatePlansSchedulesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiManageRatePlansSchedulesRequest) Authorization(authorization string) RatePlanApiManageRatePlansSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiManageRatePlansSchedulesRequest) XAppKey(xAppKey string) RatePlanApiManageRatePlansSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiManageRatePlansSchedulesRequest) XHotelid(xHotelid string) RatePlanApiManageRatePlansSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create/change/delete rate plans schedules.
func (r RatePlanApiManageRatePlansSchedulesRequest) RatePlansSchedulesToManage(ratePlansSchedulesToManage ManageRatePlansSchedulesRequest) RatePlanApiManageRatePlansSchedulesRequest {
	r.ratePlansSchedulesToManage = &ratePlansSchedulesToManage
	return r
}

// External system code.
func (r RatePlanApiManageRatePlansSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiManageRatePlansSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiManageRatePlansSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiManageRatePlansSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiManageRatePlansSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ManageRatePlansSchedulesExecute(r)
}

/*
ManageRatePlansSchedules Manages rate plan schedules

This API allows you to update Rate Plan schedules. <p><strong>OperationId:</strong>manageRatePlansSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiManageRatePlansSchedulesRequest
*/
func (a *RatePlanApiService) ManageRatePlansSchedules(ctx context.Context) RatePlanApiManageRatePlansSchedulesRequest {
	return RatePlanApiManageRatePlansSchedulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) ManageRatePlansSchedulesExecute(r RatePlanApiManageRatePlansSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.ManageRatePlansSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ratePlanSchedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlansSchedulesToManage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPingRatePlanServiceRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPingRatePlanServiceRequest) Authorization(authorization string) RatePlanApiPingRatePlanServiceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPingRatePlanServiceRequest) XAppKey(xAppKey string) RatePlanApiPingRatePlanServiceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPingRatePlanServiceRequest) XHotelid(xHotelid string) RatePlanApiPingRatePlanServiceRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RatePlanApiPingRatePlanServiceRequest) XExternalsystem(xExternalsystem string) RatePlanApiPingRatePlanServiceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPingRatePlanServiceRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPingRatePlanServiceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPingRatePlanServiceRequest) Execute() (*OperaVersion, *http.Response, error) {
	return r.ApiService.PingRatePlanServiceExecute(r)
}

/*
PingRatePlanService Get Rate plan service version

This API allows you to fetch Rate Plan Service version. <p><strong>OperationId:</strong>pingRatePlanService</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiPingRatePlanServiceRequest
*/
func (a *RatePlanApiService) PingRatePlanService(ctx context.Context) RatePlanApiPingRatePlanServiceRequest {
	return RatePlanApiPingRatePlanServiceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OperaVersion
func (a *RatePlanApiService) PingRatePlanServiceExecute(r RatePlanApiPingRatePlanServiceRequest) (*OperaVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperaVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PingRatePlanService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/rateplan/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostBestAvailableRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createBestAvailableRates *PostBestAvailableRatesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostBestAvailableRatesRequest) Authorization(authorization string) RatePlanApiPostBestAvailableRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostBestAvailableRatesRequest) XAppKey(xAppKey string) RatePlanApiPostBestAvailableRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostBestAvailableRatesRequest) XHotelid(xHotelid string) RatePlanApiPostBestAvailableRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create best available rates for rate code(s)
func (r RatePlanApiPostBestAvailableRatesRequest) CreateBestAvailableRates(createBestAvailableRates PostBestAvailableRatesRequest) RatePlanApiPostBestAvailableRatesRequest {
	r.createBestAvailableRates = &createBestAvailableRates
	return r
}

// External system code.
func (r RatePlanApiPostBestAvailableRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostBestAvailableRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostBestAvailableRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostBestAvailableRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostBestAvailableRatesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostBestAvailableRatesExecute(r)
}

/*
PostBestAvailableRates Create a Best Available Rates

This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostBestAvailableRatesRequest
*/
func (a *RatePlanApiService) PostBestAvailableRates(ctx context.Context, hotelId string) RatePlanApiPostBestAvailableRatesRequest {
	return RatePlanApiPostBestAvailableRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostBestAvailableRatesExecute(r RatePlanApiPostBestAvailableRatesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostBestAvailableRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bestavailablerates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createBestAvailableRates
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostHotelPackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelPackageForecastGroupsToCreate *PostHotelPackageForecastGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating new package forecast groups for a hotel.
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) HotelPackageForecastGroupsToCreate(hotelPackageForecastGroupsToCreate PostHotelPackageForecastGroupsRequest) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.hotelPackageForecastGroupsToCreate = &hotelPackageForecastGroupsToCreate
	return r
}

// External system code.
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostHotelPackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostHotelPackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostHotelPackageForecastGroupsExecute(r)
}

/*
PostHotelPackageForecastGroups Create Hotel Package Forecast Groups

This API allows you to create package forecast groups. <p><strong>OperationId:</strong>postHotelPackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostHotelPackageForecastGroupsRequest
*/
func (a *RatePlanApiService) PostHotelPackageForecastGroups(ctx context.Context, hotelId string) RatePlanApiPostHotelPackageForecastGroupsRequest {
	return RatePlanApiPostHotelPackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostHotelPackageForecastGroupsExecute(r RatePlanApiPostHotelPackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostHotelPackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageForecastGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.hotelPackageForecastGroupsToCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostNegotiatedRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	negotiatedRates *PostNegotiatedRatesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostNegotiatedRatesRequest) Authorization(authorization string) RatePlanApiPostNegotiatedRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostNegotiatedRatesRequest) XAppKey(xAppKey string) RatePlanApiPostNegotiatedRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostNegotiatedRatesRequest) XHotelid(xHotelid string) RatePlanApiPostNegotiatedRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating negotiated rates. Also this object creates new profile discounts for given negotiated rates.
func (r RatePlanApiPostNegotiatedRatesRequest) NegotiatedRates(negotiatedRates PostNegotiatedRatesRequest) RatePlanApiPostNegotiatedRatesRequest {
	r.negotiatedRates = &negotiatedRates
	return r
}

// External system code.
func (r RatePlanApiPostNegotiatedRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostNegotiatedRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostNegotiatedRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostNegotiatedRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostNegotiatedRatesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostNegotiatedRatesExecute(r)
}

/*
PostNegotiatedRates Create negotiated rates 

This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostNegotiatedRatesRequest
*/
func (a *RatePlanApiService) PostNegotiatedRates(ctx context.Context, hotelId string) RatePlanApiPostNegotiatedRatesRequest {
	return RatePlanApiPostNegotiatedRatesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostNegotiatedRatesExecute(r RatePlanApiPostNegotiatedRatesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostNegotiatedRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/negotiatedRates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.negotiatedRates
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostPackageRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageInfo *PutPackageRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostPackageRequest) Authorization(authorization string) RatePlanApiPostPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostPackageRequest) XAppKey(xAppKey string) RatePlanApiPostPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostPackageRequest) XHotelid(xHotelid string) RatePlanApiPostPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create a package.
func (r RatePlanApiPostPackageRequest) PackageInfo(packageInfo PutPackageRequest) RatePlanApiPostPackageRequest {
	r.packageInfo = &packageInfo
	return r
}

// External system code.
func (r RatePlanApiPostPackageRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostPackageRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostPackageRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPackageExecute(r)
}

/*
PostPackage Create package

This API allows you to create a package. <p><strong>OperationId:</strong>postPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostPackageRequest
*/
func (a *RatePlanApiService) PostPackage(ctx context.Context, packageCode string, hotelId string) RatePlanApiPostPackageRequest {
	return RatePlanApiPostPackageRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostPackageExecute(r RatePlanApiPostPackageRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packages/{packageCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostPackageFormulaRangesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageFormulaRanges *PostPackageFormulaRangesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostPackageFormulaRangesRequest) Authorization(authorization string) RatePlanApiPostPackageFormulaRangesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostPackageFormulaRangesRequest) XAppKey(xAppKey string) RatePlanApiPostPackageFormulaRangesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostPackageFormulaRangesRequest) XHotelid(xHotelid string) RatePlanApiPostPackageFormulaRangesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create a new package formula range
func (r RatePlanApiPostPackageFormulaRangesRequest) PackageFormulaRanges(packageFormulaRanges PostPackageFormulaRangesRequest) RatePlanApiPostPackageFormulaRangesRequest {
	r.packageFormulaRanges = &packageFormulaRanges
	return r
}

// External system code.
func (r RatePlanApiPostPackageFormulaRangesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostPackageFormulaRangesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostPackageFormulaRangesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostPackageFormulaRangesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostPackageFormulaRangesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPackageFormulaRangesExecute(r)
}

/*
PostPackageFormulaRanges Create package formula ranges

This API allows you to create package formula ranges. <p><strong>OperationId:</strong>postPackageFormulaRanges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostPackageFormulaRangesRequest
*/
func (a *RatePlanApiService) PostPackageFormulaRanges(ctx context.Context, hotelId string) RatePlanApiPostPackageFormulaRangesRequest {
	return RatePlanApiPostPackageFormulaRangesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostPackageFormulaRangesExecute(r RatePlanApiPostPackageFormulaRangesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostPackageFormulaRanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageFormulaRanges"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageFormulaRanges
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostPackageGroupRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageGroup *PutPackageGroupRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostPackageGroupRequest) Authorization(authorization string) RatePlanApiPostPackageGroupRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostPackageGroupRequest) XAppKey(xAppKey string) RatePlanApiPostPackageGroupRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostPackageGroupRequest) XHotelid(xHotelid string) RatePlanApiPostPackageGroupRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPostPackageGroupRequest) PackageGroup(packageGroup PutPackageGroupRequest) RatePlanApiPostPackageGroupRequest {
	r.packageGroup = &packageGroup
	return r
}

// External system code.
func (r RatePlanApiPostPackageGroupRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostPackageGroupRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostPackageGroupRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostPackageGroupRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostPackageGroupRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPackageGroupExecute(r)
}

/*
PostPackageGroup Create package group

This API allows you to create package group. <p><strong>OperationId:</strong>postPackageGroup</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostPackageGroupRequest
*/
func (a *RatePlanApiService) PostPackageGroup(ctx context.Context, hotelId string) RatePlanApiPostPackageGroupRequest {
	return RatePlanApiPostPackageGroupRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostPackageGroupExecute(r RatePlanApiPostPackageGroupRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostPackageGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostPromotionCodeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	promotionCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	propertyPromotionCode *PutPromotionCodeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostPromotionCodeRequest) Authorization(authorization string) RatePlanApiPostPromotionCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostPromotionCodeRequest) XAppKey(xAppKey string) RatePlanApiPostPromotionCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostPromotionCodeRequest) XHotelid(xHotelid string) RatePlanApiPostPromotionCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPostPromotionCodeRequest) PropertyPromotionCode(propertyPromotionCode PutPromotionCodeRequest) RatePlanApiPostPromotionCodeRequest {
	r.propertyPromotionCode = &propertyPromotionCode
	return r
}

// External system code.
func (r RatePlanApiPostPromotionCodeRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostPromotionCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostPromotionCodeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostPromotionCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostPromotionCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPromotionCodeExecute(r)
}

/*
PostPromotionCode Create promotion codes

This API allows you to create promotion codes. <p><strong>OperationId:</strong>postPromotionCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionCode Promotion Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostPromotionCodeRequest
*/
func (a *RatePlanApiService) PostPromotionCode(ctx context.Context, promotionCode string, hotelId string) RatePlanApiPostPromotionCodeRequest {
	return RatePlanApiPostPromotionCodeRequest{
		ApiService: a,
		ctx: ctx,
		promotionCode: promotionCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostPromotionCodeExecute(r RatePlanApiPostPromotionCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostPromotionCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionCodes/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.promotionCode) < 1 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 1 elements")
	}
	if strlen(r.promotionCode) > 2000 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.propertyPromotionCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostPromotionGroupRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	groupCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	promotionGroup *PutPromotionGroupRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostPromotionGroupRequest) Authorization(authorization string) RatePlanApiPostPromotionGroupRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostPromotionGroupRequest) XAppKey(xAppKey string) RatePlanApiPostPromotionGroupRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostPromotionGroupRequest) XHotelid(xHotelid string) RatePlanApiPostPromotionGroupRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPostPromotionGroupRequest) PromotionGroup(promotionGroup PutPromotionGroupRequest) RatePlanApiPostPromotionGroupRequest {
	r.promotionGroup = &promotionGroup
	return r
}

// External system code.
func (r RatePlanApiPostPromotionGroupRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostPromotionGroupRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostPromotionGroupRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostPromotionGroupRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostPromotionGroupRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPromotionGroupExecute(r)
}

/*
PostPromotionGroup Create promotion groups

This API allows you to create promotion groups. <p><strong>OperationId:</strong>postPromotionGroup</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupCode Promotion Group Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostPromotionGroupRequest
*/
func (a *RatePlanApiService) PostPromotionGroup(ctx context.Context, groupCode string, hotelId string) RatePlanApiPostPromotionGroupRequest {
	return RatePlanApiPostPromotionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupCode: groupCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostPromotionGroupExecute(r RatePlanApiPostPromotionGroupRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostPromotionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionGroups/{groupCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupCode"+"}", url.PathEscape(parameterValueToString(r.groupCode, "groupCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.groupCode) < 1 {
		return localVarReturnValue, nil, reportError("groupCode must have at least 1 elements")
	}
	if strlen(r.groupCode) > 2000 {
		return localVarReturnValue, nil, reportError("groupCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.promotionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRateGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateGroups *PutRateGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRateGroupsRequest) Authorization(authorization string) RatePlanApiPostRateGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRateGroupsRequest) XAppKey(xAppKey string) RatePlanApiPostRateGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRateGroupsRequest) XHotelid(xHotelid string) RatePlanApiPostRateGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPostRateGroupsRequest) RateGroups(rateGroups PutRateGroupsRequest) RatePlanApiPostRateGroupsRequest {
	r.rateGroups = &rateGroups
	return r
}

// External system code.
func (r RatePlanApiPostRateGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRateGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRateGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRateGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRateGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRateGroupsExecute(r)
}

/*
PostRateGroups Create rate groups

This API allows you to create rate groups. <p><strong>OperationId:</strong>postRateGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRateGroupsRequest
*/
func (a *RatePlanApiService) PostRateGroups(ctx context.Context, hotelId string) RatePlanApiPostRateGroupsRequest {
	return RatePlanApiPostRateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRateGroupsExecute(r RatePlanApiPostRateGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRateGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateGroups
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRatePlanRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlan *PostRatePlanRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRatePlanRequest) Authorization(authorization string) RatePlanApiPostRatePlanRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRatePlanRequest) XAppKey(xAppKey string) RatePlanApiPostRatePlanRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRatePlanRequest) XHotelid(xHotelid string) RatePlanApiPostRatePlanRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create rate plan.
func (r RatePlanApiPostRatePlanRequest) RatePlan(ratePlan PostRatePlanRequest) RatePlanApiPostRatePlanRequest {
	r.ratePlan = &ratePlan
	return r
}

// External system code.
func (r RatePlanApiPostRatePlanRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRatePlanRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRatePlanRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRatePlanRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRatePlanRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRatePlanExecute(r)
}

/*
PostRatePlan Create rate plans

Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRatePlanRequest
*/
func (a *RatePlanApiService) PostRatePlan(ctx context.Context, hotelId string) RatePlanApiPostRatePlanRequest {
	return RatePlanApiPostRatePlanRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRatePlanExecute(r RatePlanApiPostRatePlanRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRatePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlan
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRatePlanPackagesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanPackages *PutRatePlanPackagesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRatePlanPackagesRequest) Authorization(authorization string) RatePlanApiPostRatePlanPackagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRatePlanPackagesRequest) XAppKey(xAppKey string) RatePlanApiPostRatePlanPackagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRatePlanPackagesRequest) XHotelid(xHotelid string) RatePlanApiPostRatePlanPackagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to attach package codes and package groups to a rate plan.
func (r RatePlanApiPostRatePlanPackagesRequest) RatePlanPackages(ratePlanPackages PutRatePlanPackagesRequest) RatePlanApiPostRatePlanPackagesRequest {
	r.ratePlanPackages = &ratePlanPackages
	return r
}

// External system code.
func (r RatePlanApiPostRatePlanPackagesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRatePlanPackagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRatePlanPackagesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRatePlanPackagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRatePlanPackagesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRatePlanPackagesExecute(r)
}

/*
PostRatePlanPackages Create rate plan package

This API allows you to create Rate Plan package. <p><strong>OperationId:</strong>postRatePlanPackages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRatePlanPackagesRequest
*/
func (a *RatePlanApiService) PostRatePlanPackages(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPostRatePlanPackagesRequest {
	return RatePlanApiPostRatePlanPackagesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRatePlanPackagesExecute(r RatePlanApiPostRatePlanPackagesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRatePlanPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanPackages
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRatePlanPostingRhythmsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanPostingRhythms *PutRatePlanPostingRhythmsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) Authorization(authorization string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) XAppKey(xAppKey string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) XHotelid(xHotelid string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating new rate plan advanced posting rhythms.
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) RatePlanPostingRhythms(ratePlanPostingRhythms PutRatePlanPostingRhythmsRequest) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.ratePlanPostingRhythms = &ratePlanPostingRhythms
	return r
}

// External system code.
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRatePlanPostingRhythmsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRatePlanPostingRhythmsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRatePlanPostingRhythmsExecute(r)
}

/*
PostRatePlanPostingRhythms Create rate plan posting rhythms

This API allows you to create Rate Plan posting rhythms. <p><strong>OperationId:</strong>postRatePlanPostingRhythms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRatePlanPostingRhythmsRequest
*/
func (a *RatePlanApiService) PostRatePlanPostingRhythms(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPostRatePlanPostingRhythmsRequest {
	return RatePlanApiPostRatePlanPostingRhythmsRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRatePlanPostingRhythmsExecute(r RatePlanApiPostRatePlanPostingRhythmsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRatePlanPostingRhythms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanPostingRhythms
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRatePlanSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanSchedulesToCreate *PostRatePlanSchedulesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRatePlanSchedulesRequest) Authorization(authorization string) RatePlanApiPostRatePlanSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRatePlanSchedulesRequest) XAppKey(xAppKey string) RatePlanApiPostRatePlanSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRatePlanSchedulesRequest) XHotelid(xHotelid string) RatePlanApiPostRatePlanSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create rate plan schedules.
func (r RatePlanApiPostRatePlanSchedulesRequest) RatePlanSchedulesToCreate(ratePlanSchedulesToCreate PostRatePlanSchedulesRequest) RatePlanApiPostRatePlanSchedulesRequest {
	r.ratePlanSchedulesToCreate = &ratePlanSchedulesToCreate
	return r
}

// External system code.
func (r RatePlanApiPostRatePlanSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRatePlanSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRatePlanSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRatePlanSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRatePlanSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRatePlanSchedulesExecute(r)
}

/*
PostRatePlanSchedules Create rate plan schedules

This API allows you to create Rate Plan pricing schedule. <p><strong>OperationId:</strong>postRatePlanSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRatePlanSchedulesRequest
*/
func (a *RatePlanApiService) PostRatePlanSchedules(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPostRatePlanSchedulesRequest {
	return RatePlanApiPostRatePlanSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRatePlanSchedulesExecute(r RatePlanApiPostRatePlanSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRatePlanSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanSchedulesToCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostRateStrategyRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateStrategy *PostRateStrategyRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostRateStrategyRequest) Authorization(authorization string) RatePlanApiPostRateStrategyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostRateStrategyRequest) XAppKey(xAppKey string) RatePlanApiPostRateStrategyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostRateStrategyRequest) XHotelid(xHotelid string) RatePlanApiPostRateStrategyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for Creating a new Rate Strategy.
func (r RatePlanApiPostRateStrategyRequest) RateStrategy(rateStrategy PostRateStrategyRequest) RatePlanApiPostRateStrategyRequest {
	r.rateStrategy = &rateStrategy
	return r
}

// External system code.
func (r RatePlanApiPostRateStrategyRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostRateStrategyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostRateStrategyRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostRateStrategyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostRateStrategyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRateStrategyExecute(r)
}

/*
PostRateStrategy Create rate strategies

This API allows you to create rate strategies. <p><strong>OperationId:</strong>postRateStrategy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPostRateStrategyRequest
*/
func (a *RatePlanApiService) PostRateStrategy(ctx context.Context, hotelId string) RatePlanApiPostRateStrategyRequest {
	return RatePlanApiPostRateStrategyRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostRateStrategyExecute(r RatePlanApiPostRateStrategyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostRateStrategy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateStrategies"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateStrategy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostTemplatePackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	templatePackageForecastGroups *PutTemplatePackageForecastGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating new template package forecast groups.
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) TemplatePackageForecastGroups(templatePackageForecastGroups PutTemplatePackageForecastGroupsRequest) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.templatePackageForecastGroups = &templatePackageForecastGroups
	return r
}

// External system code.
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostTemplatePackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTemplatePackageForecastGroupsExecute(r)
}

/*
PostTemplatePackageForecastGroups Create Template Package Forecast Groups

This API allows you to create Package Forecast groups template. <p><strong>OperationId:</strong>postTemplatePackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiPostTemplatePackageForecastGroupsRequest
*/
func (a *RatePlanApiService) PostTemplatePackageForecastGroups(ctx context.Context) RatePlanApiPostTemplatePackageForecastGroupsRequest {
	return RatePlanApiPostTemplatePackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostTemplatePackageForecastGroupsExecute(r RatePlanApiPostTemplatePackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostTemplatePackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packageForecastGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.templatePackageForecastGroups
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPostTemplatePromotionCodeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	promotionCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	templatePromotionCode *PutTemplatePromotionCodeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPostTemplatePromotionCodeRequest) Authorization(authorization string) RatePlanApiPostTemplatePromotionCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPostTemplatePromotionCodeRequest) XAppKey(xAppKey string) RatePlanApiPostTemplatePromotionCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPostTemplatePromotionCodeRequest) XHotelid(xHotelid string) RatePlanApiPostTemplatePromotionCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPostTemplatePromotionCodeRequest) TemplatePromotionCode(templatePromotionCode PutTemplatePromotionCodeRequest) RatePlanApiPostTemplatePromotionCodeRequest {
	r.templatePromotionCode = &templatePromotionCode
	return r
}

// External system code.
func (r RatePlanApiPostTemplatePromotionCodeRequest) XExternalsystem(xExternalsystem string) RatePlanApiPostTemplatePromotionCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPostTemplatePromotionCodeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPostTemplatePromotionCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPostTemplatePromotionCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTemplatePromotionCodeExecute(r)
}

/*
PostTemplatePromotionCode Create Template Promotion Code

This API allows you to create Promotion Code template. <p><strong>OperationId:</strong>postTemplatePromotionCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionCode Promotion Code.
 @return RatePlanApiPostTemplatePromotionCodeRequest
*/
func (a *RatePlanApiService) PostTemplatePromotionCode(ctx context.Context, promotionCode string) RatePlanApiPostTemplatePromotionCodeRequest {
	return RatePlanApiPostTemplatePromotionCodeRequest{
		ApiService: a,
		ctx: ctx,
		promotionCode: promotionCode,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PostTemplatePromotionCodeExecute(r RatePlanApiPostTemplatePromotionCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PostTemplatePromotionCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotionCodes/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.promotionCode) < 1 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 1 elements")
	}
	if strlen(r.promotionCode) > 2000 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.templatePromotionCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutHotelPackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelPackageForecastGroupsToChange *PutHotelPackageForecastGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for modifying package forecast groups for a hotel.
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) HotelPackageForecastGroupsToChange(hotelPackageForecastGroupsToChange PutHotelPackageForecastGroupsRequest) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.hotelPackageForecastGroupsToChange = &hotelPackageForecastGroupsToChange
	return r
}

// External system code.
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutHotelPackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutHotelPackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutHotelPackageForecastGroupsExecute(r)
}

/*
PutHotelPackageForecastGroups Change Hotel Package Forecast Groups

This API allows you to update package forecast groups. <p><strong>OperationId:</strong>putHotelPackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutHotelPackageForecastGroupsRequest
*/
func (a *RatePlanApiService) PutHotelPackageForecastGroups(ctx context.Context, hotelId string) RatePlanApiPutHotelPackageForecastGroupsRequest {
	return RatePlanApiPutHotelPackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutHotelPackageForecastGroupsExecute(r RatePlanApiPutHotelPackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutHotelPackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageForecastGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.hotelPackageForecastGroupsToChange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutNegotiatedRatesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	rateCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	negotiatedRates *PostNegotiatedRatesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutNegotiatedRatesRequest) Authorization(authorization string) RatePlanApiPutNegotiatedRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutNegotiatedRatesRequest) XAppKey(xAppKey string) RatePlanApiPutNegotiatedRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutNegotiatedRatesRequest) XHotelid(xHotelid string) RatePlanApiPutNegotiatedRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing negotiated rates. This object can be used to manage the negotiated rates and profile discounts. Profile discounts can be created/updated/deleted.
func (r RatePlanApiPutNegotiatedRatesRequest) NegotiatedRates(negotiatedRates PostNegotiatedRatesRequest) RatePlanApiPutNegotiatedRatesRequest {
	r.negotiatedRates = &negotiatedRates
	return r
}

// External system code.
func (r RatePlanApiPutNegotiatedRatesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutNegotiatedRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutNegotiatedRatesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutNegotiatedRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutNegotiatedRatesRequest) Execute() (*NegotiatedRatesDetails, *http.Response, error) {
	return r.ApiService.PutNegotiatedRatesExecute(r)
}

/*
PutNegotiatedRates Change negotiated rates 

This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rateCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutNegotiatedRatesRequest
*/
func (a *RatePlanApiService) PutNegotiatedRates(ctx context.Context, rateCode string, hotelId string) RatePlanApiPutNegotiatedRatesRequest {
	return RatePlanApiPutNegotiatedRatesRequest{
		ApiService: a,
		ctx: ctx,
		rateCode: rateCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return NegotiatedRatesDetails
func (a *RatePlanApiService) PutNegotiatedRatesExecute(r RatePlanApiPutNegotiatedRatesRequest) (*NegotiatedRatesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NegotiatedRatesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutNegotiatedRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/negotiatedRates/{rateCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"rateCode"+"}", url.PathEscape(parameterValueToString(r.rateCode, "rateCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.rateCode) < 1 {
		return localVarReturnValue, nil, reportError("rateCode must have at least 1 elements")
	}
	if strlen(r.rateCode) > 2000 {
		return localVarReturnValue, nil, reportError("rateCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.negotiatedRates
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutPackageRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageInfo *PutPackageRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutPackageRequest) Authorization(authorization string) RatePlanApiPutPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutPackageRequest) XAppKey(xAppKey string) RatePlanApiPutPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutPackageRequest) XHotelid(xHotelid string) RatePlanApiPutPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change a package details.
func (r RatePlanApiPutPackageRequest) PackageInfo(packageInfo PutPackageRequest) RatePlanApiPutPackageRequest {
	r.packageInfo = &packageInfo
	return r
}

// External system code.
func (r RatePlanApiPutPackageRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutPackageRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutPackageRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutPackageExecute(r)
}

/*
PutPackage Change the package

This API allows you to update a package. <p><strong>OperationId:</strong>putPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageCode Package Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutPackageRequest
*/
func (a *RatePlanApiService) PutPackage(ctx context.Context, packageCode string, hotelId string) RatePlanApiPutPackageRequest {
	return RatePlanApiPutPackageRequest{
		ApiService: a,
		ctx: ctx,
		packageCode: packageCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutPackageExecute(r RatePlanApiPutPackageRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packages/{packageCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageCode"+"}", url.PathEscape(parameterValueToString(r.packageCode, "packageCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageCode) < 1 {
		return localVarReturnValue, nil, reportError("packageCode must have at least 1 elements")
	}
	if strlen(r.packageCode) > 2000 {
		return localVarReturnValue, nil, reportError("packageCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutPackageFormulaRangesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	packageFormulaRangeId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageFormulaRanges *PostPackageFormulaRangesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutPackageFormulaRangesRequest) Authorization(authorization string) RatePlanApiPutPackageFormulaRangesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutPackageFormulaRangesRequest) XAppKey(xAppKey string) RatePlanApiPutPackageFormulaRangesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutPackageFormulaRangesRequest) XHotelid(xHotelid string) RatePlanApiPutPackageFormulaRangesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change and existing package formula ranges. The Property, Amount From, Amount To, Tax Amount, Interval Amount are the details that can be changed on an existing pacakage formula range.
func (r RatePlanApiPutPackageFormulaRangesRequest) PackageFormulaRanges(packageFormulaRanges PostPackageFormulaRangesRequest) RatePlanApiPutPackageFormulaRangesRequest {
	r.packageFormulaRanges = &packageFormulaRanges
	return r
}

// External system code.
func (r RatePlanApiPutPackageFormulaRangesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutPackageFormulaRangesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutPackageFormulaRangesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutPackageFormulaRangesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutPackageFormulaRangesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutPackageFormulaRangesExecute(r)
}

/*
PutPackageFormulaRanges Change package formula ranges

This API allows you to update package formula ranges. <p><strong>OperationId:</strong>putPackageFormulaRanges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param packageFormulaRangeId Package Formula Range Id.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutPackageFormulaRangesRequest
*/
func (a *RatePlanApiService) PutPackageFormulaRanges(ctx context.Context, packageFormulaRangeId string, hotelId string) RatePlanApiPutPackageFormulaRangesRequest {
	return RatePlanApiPutPackageFormulaRangesRequest{
		ApiService: a,
		ctx: ctx,
		packageFormulaRangeId: packageFormulaRangeId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutPackageFormulaRangesExecute(r RatePlanApiPutPackageFormulaRangesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutPackageFormulaRanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageFormulaRangeId"+"}", url.PathEscape(parameterValueToString(r.packageFormulaRangeId, "packageFormulaRangeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.packageFormulaRangeId) < 1 {
		return localVarReturnValue, nil, reportError("packageFormulaRangeId must have at least 1 elements")
	}
	if strlen(r.packageFormulaRangeId) > 2000 {
		return localVarReturnValue, nil, reportError("packageFormulaRangeId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageFormulaRanges
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutPackageGroupRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageGroup *PutPackageGroupRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutPackageGroupRequest) Authorization(authorization string) RatePlanApiPutPackageGroupRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutPackageGroupRequest) XAppKey(xAppKey string) RatePlanApiPutPackageGroupRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutPackageGroupRequest) XHotelid(xHotelid string) RatePlanApiPutPackageGroupRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPutPackageGroupRequest) PackageGroup(packageGroup PutPackageGroupRequest) RatePlanApiPutPackageGroupRequest {
	r.packageGroup = &packageGroup
	return r
}

// External system code.
func (r RatePlanApiPutPackageGroupRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutPackageGroupRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutPackageGroupRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutPackageGroupRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutPackageGroupRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutPackageGroupExecute(r)
}

/*
PutPackageGroup Change package group

This API allows you to change package group. <p><strong>OperationId:</strong>putPackageGroup</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutPackageGroupRequest
*/
func (a *RatePlanApiService) PutPackageGroup(ctx context.Context, hotelId string) RatePlanApiPutPackageGroupRequest {
	return RatePlanApiPutPackageGroupRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutPackageGroupExecute(r RatePlanApiPutPackageGroupRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutPackageGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/packageGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.packageGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutPromotionCodeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	promotionCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	propertyPromotionCode *PutPromotionCodeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutPromotionCodeRequest) Authorization(authorization string) RatePlanApiPutPromotionCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutPromotionCodeRequest) XAppKey(xAppKey string) RatePlanApiPutPromotionCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutPromotionCodeRequest) XHotelid(xHotelid string) RatePlanApiPutPromotionCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPutPromotionCodeRequest) PropertyPromotionCode(propertyPromotionCode PutPromotionCodeRequest) RatePlanApiPutPromotionCodeRequest {
	r.propertyPromotionCode = &propertyPromotionCode
	return r
}

// External system code.
func (r RatePlanApiPutPromotionCodeRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutPromotionCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutPromotionCodeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutPromotionCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutPromotionCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutPromotionCodeExecute(r)
}

/*
PutPromotionCode Change promotion codes

This API allows you to update promotion codes. <p><strong>OperationId:</strong>putPromotionCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionCode Promotion Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutPromotionCodeRequest
*/
func (a *RatePlanApiService) PutPromotionCode(ctx context.Context, promotionCode string, hotelId string) RatePlanApiPutPromotionCodeRequest {
	return RatePlanApiPutPromotionCodeRequest{
		ApiService: a,
		ctx: ctx,
		promotionCode: promotionCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutPromotionCodeExecute(r RatePlanApiPutPromotionCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutPromotionCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionCodes/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.promotionCode) < 1 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 1 elements")
	}
	if strlen(r.promotionCode) > 2000 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.propertyPromotionCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutPromotionGroupRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	groupCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	promotionGroup *PutPromotionGroupRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutPromotionGroupRequest) Authorization(authorization string) RatePlanApiPutPromotionGroupRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutPromotionGroupRequest) XAppKey(xAppKey string) RatePlanApiPutPromotionGroupRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutPromotionGroupRequest) XHotelid(xHotelid string) RatePlanApiPutPromotionGroupRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPutPromotionGroupRequest) PromotionGroup(promotionGroup PutPromotionGroupRequest) RatePlanApiPutPromotionGroupRequest {
	r.promotionGroup = &promotionGroup
	return r
}

// External system code.
func (r RatePlanApiPutPromotionGroupRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutPromotionGroupRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutPromotionGroupRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutPromotionGroupRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutPromotionGroupRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutPromotionGroupExecute(r)
}

/*
PutPromotionGroup Change promotion groups

This API allows you to update promotion groups. <p><strong>OperationId:</strong>putPromotionGroup</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupCode Promotion Group Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutPromotionGroupRequest
*/
func (a *RatePlanApiService) PutPromotionGroup(ctx context.Context, groupCode string, hotelId string) RatePlanApiPutPromotionGroupRequest {
	return RatePlanApiPutPromotionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupCode: groupCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutPromotionGroupExecute(r RatePlanApiPutPromotionGroupRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutPromotionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/promotionGroups/{groupCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupCode"+"}", url.PathEscape(parameterValueToString(r.groupCode, "groupCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.groupCode) < 1 {
		return localVarReturnValue, nil, reportError("groupCode must have at least 1 elements")
	}
	if strlen(r.groupCode) > 2000 {
		return localVarReturnValue, nil, reportError("groupCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.promotionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRateGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateGroups *PutRateGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRateGroupsRequest) Authorization(authorization string) RatePlanApiPutRateGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRateGroupsRequest) XAppKey(xAppKey string) RatePlanApiPutRateGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRateGroupsRequest) XHotelid(xHotelid string) RatePlanApiPutRateGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPutRateGroupsRequest) RateGroups(rateGroups PutRateGroupsRequest) RatePlanApiPutRateGroupsRequest {
	r.rateGroups = &rateGroups
	return r
}

// External system code.
func (r RatePlanApiPutRateGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRateGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRateGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRateGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRateGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRateGroupsExecute(r)
}

/*
PutRateGroups Change rate groups

This API allows you to update rate groups. <p><strong>OperationId:</strong>putRateGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRateGroupsRequest
*/
func (a *RatePlanApiService) PutRateGroups(ctx context.Context, hotelId string) RatePlanApiPutRateGroupsRequest {
	return RatePlanApiPutRateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRateGroupsExecute(r RatePlanApiPutRateGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRateGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateGroups
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRatePlanRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlan *PostRatePlanRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRatePlanRequest) Authorization(authorization string) RatePlanApiPutRatePlanRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRatePlanRequest) XAppKey(xAppKey string) RatePlanApiPutRatePlanRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRatePlanRequest) XHotelid(xHotelid string) RatePlanApiPutRatePlanRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change rate plan.
func (r RatePlanApiPutRatePlanRequest) RatePlan(ratePlan PostRatePlanRequest) RatePlanApiPutRatePlanRequest {
	r.ratePlan = &ratePlan
	return r
}

// External system code.
func (r RatePlanApiPutRatePlanRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRatePlanRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRatePlanRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRatePlanRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRatePlanRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRatePlanExecute(r)
}

/*
PutRatePlan Change rate plan

Use this API to update Rate Plan information such as date range, linked room types, and rate controls for a given hotel. Use the putRatePlanSchedules operation to add or update the rate plan pricing schedule.<p><strong>OperationId:</strong>putRatePlan</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRatePlanRequest
*/
func (a *RatePlanApiService) PutRatePlan(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPutRatePlanRequest {
	return RatePlanApiPutRatePlanRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRatePlanExecute(r RatePlanApiPutRatePlanRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRatePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlan
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRatePlanPackagesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanPackages *PutRatePlanPackagesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRatePlanPackagesRequest) Authorization(authorization string) RatePlanApiPutRatePlanPackagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRatePlanPackagesRequest) XAppKey(xAppKey string) RatePlanApiPutRatePlanPackagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRatePlanPackagesRequest) XHotelid(xHotelid string) RatePlanApiPutRatePlanPackagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change package code and package group details when attached to a rate plan.
func (r RatePlanApiPutRatePlanPackagesRequest) RatePlanPackages(ratePlanPackages PutRatePlanPackagesRequest) RatePlanApiPutRatePlanPackagesRequest {
	r.ratePlanPackages = &ratePlanPackages
	return r
}

// External system code.
func (r RatePlanApiPutRatePlanPackagesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRatePlanPackagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRatePlanPackagesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRatePlanPackagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRatePlanPackagesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRatePlanPackagesExecute(r)
}

/*
PutRatePlanPackages Change rate plan package

This API allows you to update Rate Plan package. <p><strong>OperationId:</strong>putRatePlanPackages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRatePlanPackagesRequest
*/
func (a *RatePlanApiService) PutRatePlanPackages(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPutRatePlanPackagesRequest {
	return RatePlanApiPutRatePlanPackagesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRatePlanPackagesExecute(r RatePlanApiPutRatePlanPackagesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRatePlanPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanPackages
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRatePlanPostingRhythmsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanPostingRhythms *PutRatePlanPostingRhythmsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) Authorization(authorization string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) XAppKey(xAppKey string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) XHotelid(xHotelid string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing existing rate plan advanced posting rhythms.
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) RatePlanPostingRhythms(ratePlanPostingRhythms PutRatePlanPostingRhythmsRequest) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.ratePlanPostingRhythms = &ratePlanPostingRhythms
	return r
}

// External system code.
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRatePlanPostingRhythmsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRatePlanPostingRhythmsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRatePlanPostingRhythmsExecute(r)
}

/*
PutRatePlanPostingRhythms Change rate plan posting rhythms

This API allows you to update Rate Plan posting rhythms. <p><strong>OperationId:</strong>putRatePlanPostingRhythms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRatePlanPostingRhythmsRequest
*/
func (a *RatePlanApiService) PutRatePlanPostingRhythms(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPutRatePlanPostingRhythmsRequest {
	return RatePlanApiPutRatePlanPostingRhythmsRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRatePlanPostingRhythmsExecute(r RatePlanApiPutRatePlanPostingRhythmsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRatePlanPostingRhythms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanPostingRhythms
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRatePlanSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanSchedules *PutRatePlanSchedulesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRatePlanSchedulesRequest) Authorization(authorization string) RatePlanApiPutRatePlanSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRatePlanSchedulesRequest) XAppKey(xAppKey string) RatePlanApiPutRatePlanSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRatePlanSchedulesRequest) XHotelid(xHotelid string) RatePlanApiPutRatePlanSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change rate plan schedules.
func (r RatePlanApiPutRatePlanSchedulesRequest) RatePlanSchedules(ratePlanSchedules PutRatePlanSchedulesRequest) RatePlanApiPutRatePlanSchedulesRequest {
	r.ratePlanSchedules = &ratePlanSchedules
	return r
}

// External system code.
func (r RatePlanApiPutRatePlanSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRatePlanSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRatePlanSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRatePlanSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRatePlanSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRatePlanSchedulesExecute(r)
}

/*
PutRatePlanSchedules Change rate plan schedules

Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRatePlanSchedulesRequest
*/
func (a *RatePlanApiService) PutRatePlanSchedules(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiPutRatePlanSchedulesRequest {
	return RatePlanApiPutRatePlanSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRatePlanSchedulesExecute(r RatePlanApiPutRatePlanSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRatePlanSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanSchedules
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutRateStrategyRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	rateStrategyId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateStrategy *PostRateStrategyRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutRateStrategyRequest) Authorization(authorization string) RatePlanApiPutRateStrategyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutRateStrategyRequest) XAppKey(xAppKey string) RatePlanApiPutRateStrategyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutRateStrategyRequest) XHotelid(xHotelid string) RatePlanApiPutRateStrategyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for Modifying Rate Strategy.
func (r RatePlanApiPutRateStrategyRequest) RateStrategy(rateStrategy PostRateStrategyRequest) RatePlanApiPutRateStrategyRequest {
	r.rateStrategy = &rateStrategy
	return r
}

// External system code.
func (r RatePlanApiPutRateStrategyRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutRateStrategyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutRateStrategyRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutRateStrategyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutRateStrategyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRateStrategyExecute(r)
}

/*
PutRateStrategy Change rate strategies

This API allows you to update rate strategies. <p><strong>OperationId:</strong>putRateStrategy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rateStrategyId Strategy Id
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiPutRateStrategyRequest
*/
func (a *RatePlanApiService) PutRateStrategy(ctx context.Context, rateStrategyId string, hotelId string) RatePlanApiPutRateStrategyRequest {
	return RatePlanApiPutRateStrategyRequest{
		ApiService: a,
		ctx: ctx,
		rateStrategyId: rateStrategyId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutRateStrategyExecute(r RatePlanApiPutRateStrategyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutRateStrategy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateStrategies/{rateStrategyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"rateStrategyId"+"}", url.PathEscape(parameterValueToString(r.rateStrategyId, "rateStrategyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.rateStrategyId) < 1 {
		return localVarReturnValue, nil, reportError("rateStrategyId must have at least 1 elements")
	}
	if strlen(r.rateStrategyId) > 2000 {
		return localVarReturnValue, nil, reportError("rateStrategyId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateStrategy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutTemplatePackageForecastGroupsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	templatePackageForecastGroups *PutTemplatePackageForecastGroupsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) Authorization(authorization string) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) XAppKey(xAppKey string) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) XHotelid(xHotelid string) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for modifying template package forecast groups.
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) TemplatePackageForecastGroups(templatePackageForecastGroups PutTemplatePackageForecastGroupsRequest) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.templatePackageForecastGroups = &templatePackageForecastGroups
	return r
}

// External system code.
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutTemplatePackageForecastGroupsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutTemplatePackageForecastGroupsExecute(r)
}

/*
PutTemplatePackageForecastGroups Change Template Package Forecast Groups

This API allows you to update Package Forecast groups template. <p><strong>OperationId:</strong>putTemplatePackageForecastGroups</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiPutTemplatePackageForecastGroupsRequest
*/
func (a *RatePlanApiService) PutTemplatePackageForecastGroups(ctx context.Context) RatePlanApiPutTemplatePackageForecastGroupsRequest {
	return RatePlanApiPutTemplatePackageForecastGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutTemplatePackageForecastGroupsExecute(r RatePlanApiPutTemplatePackageForecastGroupsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutTemplatePackageForecastGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/packageForecastGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.templatePackageForecastGroups
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiPutTemplatePromotionCodeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	promotionCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	templatePromotionCode *PutTemplatePromotionCodeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiPutTemplatePromotionCodeRequest) Authorization(authorization string) RatePlanApiPutTemplatePromotionCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiPutTemplatePromotionCodeRequest) XAppKey(xAppKey string) RatePlanApiPutTemplatePromotionCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiPutTemplatePromotionCodeRequest) XHotelid(xHotelid string) RatePlanApiPutTemplatePromotionCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiPutTemplatePromotionCodeRequest) TemplatePromotionCode(templatePromotionCode PutTemplatePromotionCodeRequest) RatePlanApiPutTemplatePromotionCodeRequest {
	r.templatePromotionCode = &templatePromotionCode
	return r
}

// External system code.
func (r RatePlanApiPutTemplatePromotionCodeRequest) XExternalsystem(xExternalsystem string) RatePlanApiPutTemplatePromotionCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiPutTemplatePromotionCodeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiPutTemplatePromotionCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiPutTemplatePromotionCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutTemplatePromotionCodeExecute(r)
}

/*
PutTemplatePromotionCode Change Template Promotion Code

This API allows you to update Promotion Code template. <p><strong>OperationId:</strong>putTemplatePromotionCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionCode Promotion Code.
 @return RatePlanApiPutTemplatePromotionCodeRequest
*/
func (a *RatePlanApiService) PutTemplatePromotionCode(ctx context.Context, promotionCode string) RatePlanApiPutTemplatePromotionCodeRequest {
	return RatePlanApiPutTemplatePromotionCodeRequest{
		ApiService: a,
		ctx: ctx,
		promotionCode: promotionCode,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) PutTemplatePromotionCodeExecute(r RatePlanApiPutTemplatePromotionCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.PutTemplatePromotionCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotionCodes/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.promotionCode) < 1 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 1 elements")
	}
	if strlen(r.promotionCode) > 2000 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.templatePromotionCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiSetDailyRatePlanScheduleRangeRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	ratePlanCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	dailyRatePlanScheduleRange *SetDailyRatePlanScheduleRangeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) Authorization(authorization string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) XAppKey(xAppKey string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) XHotelid(xHotelid string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// A Request message that sets the rate plan schedules for daily rates as a range.
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) DailyRatePlanScheduleRange(dailyRatePlanScheduleRange SetDailyRatePlanScheduleRangeRequest) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.dailyRatePlanScheduleRange = &dailyRatePlanScheduleRange
	return r
}

// External system code.
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) XExternalsystem(xExternalsystem string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) AcceptLanguage(acceptLanguage string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiSetDailyRatePlanScheduleRangeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetDailyRatePlanScheduleRangeExecute(r)
}

/*
SetDailyRatePlanScheduleRange Set daily rate plan schedule range

This API allows you to set Rate Plan schedule range. <p><strong>OperationId:</strong>setDailyRatePlanScheduleRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ratePlanCode Rate Plan Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiSetDailyRatePlanScheduleRangeRequest
*/
func (a *RatePlanApiService) SetDailyRatePlanScheduleRange(ctx context.Context, ratePlanCode string, hotelId string) RatePlanApiSetDailyRatePlanScheduleRangeRequest {
	return RatePlanApiSetDailyRatePlanScheduleRangeRequest{
		ApiService: a,
		ctx: ctx,
		ratePlanCode: ratePlanCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) SetDailyRatePlanScheduleRangeExecute(r RatePlanApiSetDailyRatePlanScheduleRangeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.SetDailyRatePlanScheduleRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"ratePlanCode"+"}", url.PathEscape(parameterValueToString(r.ratePlanCode, "ratePlanCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ratePlanCode) < 1 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have at least 1 elements")
	}
	if strlen(r.ratePlanCode) > 2000 {
		return localVarReturnValue, nil, reportError("ratePlanCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.dailyRatePlanScheduleRange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiSetMassRatePlanSchedulesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	massRatePlanSchedules *SetMassRatePlanSchedulesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiSetMassRatePlanSchedulesRequest) Authorization(authorization string) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiSetMassRatePlanSchedulesRequest) XAppKey(xAppKey string) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiSetMassRatePlanSchedulesRequest) XHotelid(xHotelid string) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A Request message to update the rate codes schedule.
func (r RatePlanApiSetMassRatePlanSchedulesRequest) MassRatePlanSchedules(massRatePlanSchedules SetMassRatePlanSchedulesRequest) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.massRatePlanSchedules = &massRatePlanSchedules
	return r
}

// External system code.
func (r RatePlanApiSetMassRatePlanSchedulesRequest) XExternalsystem(xExternalsystem string) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiSetMassRatePlanSchedulesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiSetMassRatePlanSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiSetMassRatePlanSchedulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetMassRatePlanSchedulesExecute(r)
}

/*
SetMassRatePlanSchedules Set mass rate plan schedules

This API allows you to update mass Rate Plan schedules. <p><strong>OperationId:</strong>setMassRatePlanSchedules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiSetMassRatePlanSchedulesRequest
*/
func (a *RatePlanApiService) SetMassRatePlanSchedules(ctx context.Context, hotelId string) RatePlanApiSetMassRatePlanSchedulesRequest {
	return RatePlanApiSetMassRatePlanSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) SetMassRatePlanSchedulesExecute(r RatePlanApiSetMassRatePlanSchedulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.SetMassRatePlanSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/massRatePlanSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.massRatePlanSchedules
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiSetRateAccessExclusionsRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateAccessExclusions *SetRateAccessExclusionsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiSetRateAccessExclusionsRequest) Authorization(authorization string) RatePlanApiSetRateAccessExclusionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiSetRateAccessExclusionsRequest) XAppKey(xAppKey string) RatePlanApiSetRateAccessExclusionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiSetRateAccessExclusionsRequest) XHotelid(xHotelid string) RatePlanApiSetRateAccessExclusionsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r RatePlanApiSetRateAccessExclusionsRequest) RateAccessExclusions(rateAccessExclusions SetRateAccessExclusionsRequest) RatePlanApiSetRateAccessExclusionsRequest {
	r.rateAccessExclusions = &rateAccessExclusions
	return r
}

// External system code.
func (r RatePlanApiSetRateAccessExclusionsRequest) XExternalsystem(xExternalsystem string) RatePlanApiSetRateAccessExclusionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiSetRateAccessExclusionsRequest) AcceptLanguage(acceptLanguage string) RatePlanApiSetRateAccessExclusionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiSetRateAccessExclusionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetRateAccessExclusionsExecute(r)
}

/*
SetRateAccessExclusions Set rate access exclusions

This API allows you to set rate access exclusions. <p><strong>OperationId:</strong>setRateAccessExclusions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiSetRateAccessExclusionsRequest
*/
func (a *RatePlanApiService) SetRateAccessExclusions(ctx context.Context, hotelId string) RatePlanApiSetRateAccessExclusionsRequest {
	return RatePlanApiSetRateAccessExclusionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) SetRateAccessExclusionsExecute(r RatePlanApiSetRateAccessExclusionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.SetRateAccessExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateAccessExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateAccessExclusions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiSetRateStrategiesRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	rateStrategiesToSet *SetRateStrategiesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiSetRateStrategiesRequest) Authorization(authorization string) RatePlanApiSetRateStrategiesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiSetRateStrategiesRequest) XAppKey(xAppKey string) RatePlanApiSetRateStrategiesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiSetRateStrategiesRequest) XHotelid(xHotelid string) RatePlanApiSetRateStrategiesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for setting rate strategies. This operation will change details of rate strategy if rate strategy with the given Hotel Code, Restriction Dates, Rate Code, Rate Category, Room Type, Condition Type and Restriction Type already exists. Otherwise, it will create new rate strategy.
func (r RatePlanApiSetRateStrategiesRequest) RateStrategiesToSet(rateStrategiesToSet SetRateStrategiesRequest) RatePlanApiSetRateStrategiesRequest {
	r.rateStrategiesToSet = &rateStrategiesToSet
	return r
}

// External system code.
func (r RatePlanApiSetRateStrategiesRequest) XExternalsystem(xExternalsystem string) RatePlanApiSetRateStrategiesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiSetRateStrategiesRequest) AcceptLanguage(acceptLanguage string) RatePlanApiSetRateStrategiesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiSetRateStrategiesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetRateStrategiesExecute(r)
}

/*
SetRateStrategies Set rate strategies

This API allows you to set Rate strategies. <p><strong>OperationId:</strong>setRateStrategies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RatePlanApiSetRateStrategiesRequest
*/
func (a *RatePlanApiService) SetRateStrategies(ctx context.Context) RatePlanApiSetRateStrategiesRequest {
	return RatePlanApiSetRateStrategiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) SetRateStrategiesExecute(r RatePlanApiSetRateStrategiesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.SetRateStrategies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rateStrategies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rateStrategiesToSet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RatePlanApiSplitRatePlanScheduleRequest struct {
	ctx context.Context
	ApiService *RatePlanApiService
	scheduleId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanScheduleToSplit *SplitRatePlanScheduleRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RatePlanApiSplitRatePlanScheduleRequest) Authorization(authorization string) RatePlanApiSplitRatePlanScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RatePlanApiSplitRatePlanScheduleRequest) XAppKey(xAppKey string) RatePlanApiSplitRatePlanScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RatePlanApiSplitRatePlanScheduleRequest) XHotelid(xHotelid string) RatePlanApiSplitRatePlanScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to split rate plan schedule.
func (r RatePlanApiSplitRatePlanScheduleRequest) RatePlanScheduleToSplit(ratePlanScheduleToSplit SplitRatePlanScheduleRequest) RatePlanApiSplitRatePlanScheduleRequest {
	r.ratePlanScheduleToSplit = &ratePlanScheduleToSplit
	return r
}

// External system code.
func (r RatePlanApiSplitRatePlanScheduleRequest) XExternalsystem(xExternalsystem string) RatePlanApiSplitRatePlanScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RatePlanApiSplitRatePlanScheduleRequest) AcceptLanguage(acceptLanguage string) RatePlanApiSplitRatePlanScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RatePlanApiSplitRatePlanScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SplitRatePlanScheduleExecute(r)
}

/*
SplitRatePlanSchedule Split rate plan schedule

This API allows you to split Rate Plan schedule. <p><strong>OperationId:</strong>splitRatePlanSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scheduleId Schedule Id.
 @param hotelId Unique ID that identifies a single hotel property.
 @return RatePlanApiSplitRatePlanScheduleRequest
*/
func (a *RatePlanApiService) SplitRatePlanSchedule(ctx context.Context, scheduleId string, hotelId string) RatePlanApiSplitRatePlanScheduleRequest {
	return RatePlanApiSplitRatePlanScheduleRequest{
		ApiService: a,
		ctx: ctx,
		scheduleId: scheduleId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RatePlanApiService) SplitRatePlanScheduleExecute(r RatePlanApiSplitRatePlanScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RatePlanApiService.SplitRatePlanSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ratePlanSchedules/{scheduleId}/split"
	localVarPath = strings.Replace(localVarPath, "{"+"scheduleId"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.scheduleId) < 1 {
		return localVarReturnValue, nil, reportError("scheduleId must have at least 1 elements")
	}
	if strlen(r.scheduleId) > 2000 {
		return localVarReturnValue, nil, reportError("scheduleId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ratePlanScheduleToSplit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
