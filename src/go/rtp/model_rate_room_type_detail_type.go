/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateRoomTypeDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateRoomTypeDetailType{}

// RateRoomTypeDetailType Details of single room type
type RateRoomTypeDetailType struct {
	// Room type code
	Code *string `json:"code,omitempty"`
	// Text description for the room type
	Description *string `json:"description,omitempty"`
	// True if room type will not be associated with physical rooms included in inventory
	Pseudo *bool `json:"pseudo,omitempty"`
	// This is the minimum amount of which room can be sold
	RateFloor *float32 `json:"rateFloor,omitempty"`
}

// NewRateRoomTypeDetailType instantiates a new RateRoomTypeDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateRoomTypeDetailType() *RateRoomTypeDetailType {
	this := RateRoomTypeDetailType{}
	return &this
}

// NewRateRoomTypeDetailTypeWithDefaults instantiates a new RateRoomTypeDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateRoomTypeDetailTypeWithDefaults() *RateRoomTypeDetailType {
	this := RateRoomTypeDetailType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RateRoomTypeDetailType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomTypeDetailType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RateRoomTypeDetailType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RateRoomTypeDetailType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RateRoomTypeDetailType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomTypeDetailType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RateRoomTypeDetailType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RateRoomTypeDetailType) SetDescription(v string) {
	o.Description = &v
}

// GetPseudo returns the Pseudo field value if set, zero value otherwise.
func (o *RateRoomTypeDetailType) GetPseudo() bool {
	if o == nil || IsNil(o.Pseudo) {
		var ret bool
		return ret
	}
	return *o.Pseudo
}

// GetPseudoOk returns a tuple with the Pseudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomTypeDetailType) GetPseudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Pseudo) {
		return nil, false
	}
	return o.Pseudo, true
}

// HasPseudo returns a boolean if a field has been set.
func (o *RateRoomTypeDetailType) HasPseudo() bool {
	if o != nil && !IsNil(o.Pseudo) {
		return true
	}

	return false
}

// SetPseudo gets a reference to the given bool and assigns it to the Pseudo field.
func (o *RateRoomTypeDetailType) SetPseudo(v bool) {
	o.Pseudo = &v
}

// GetRateFloor returns the RateFloor field value if set, zero value otherwise.
func (o *RateRoomTypeDetailType) GetRateFloor() float32 {
	if o == nil || IsNil(o.RateFloor) {
		var ret float32
		return ret
	}
	return *o.RateFloor
}

// GetRateFloorOk returns a tuple with the RateFloor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomTypeDetailType) GetRateFloorOk() (*float32, bool) {
	if o == nil || IsNil(o.RateFloor) {
		return nil, false
	}
	return o.RateFloor, true
}

// HasRateFloor returns a boolean if a field has been set.
func (o *RateRoomTypeDetailType) HasRateFloor() bool {
	if o != nil && !IsNil(o.RateFloor) {
		return true
	}

	return false
}

// SetRateFloor gets a reference to the given float32 and assigns it to the RateFloor field.
func (o *RateRoomTypeDetailType) SetRateFloor(v float32) {
	o.RateFloor = &v
}

func (o RateRoomTypeDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateRoomTypeDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Pseudo) {
		toSerialize["pseudo"] = o.Pseudo
	}
	if !IsNil(o.RateFloor) {
		toSerialize["rateFloor"] = o.RateFloor
	}
	return toSerialize, nil
}

type NullableRateRoomTypeDetailType struct {
	value *RateRoomTypeDetailType
	isSet bool
}

func (v NullableRateRoomTypeDetailType) Get() *RateRoomTypeDetailType {
	return v.value
}

func (v *NullableRateRoomTypeDetailType) Set(val *RateRoomTypeDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateRoomTypeDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateRoomTypeDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateRoomTypeDetailType(val *RateRoomTypeDetailType) *NullableRateRoomTypeDetailType {
	return &NullableRateRoomTypeDetailType{value: val, isSet: true}
}

func (v NullableRateRoomTypeDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateRoomTypeDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


