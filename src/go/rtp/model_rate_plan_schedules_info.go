/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanSchedulesInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanSchedulesInfo{}

// RatePlanSchedulesInfo Response object to fetch rate plan schedules.
type RatePlanSchedulesInfo struct {
	Links *Links `json:"links,omitempty"`
	RatePlanMasterInfo *RatePlanMasterInfoType `json:"ratePlanMasterInfo,omitempty"`
	RatePlanScheduleList *RatePlanScheduleListType `json:"ratePlanScheduleList,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewRatePlanSchedulesInfo instantiates a new RatePlanSchedulesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanSchedulesInfo() *RatePlanSchedulesInfo {
	this := RatePlanSchedulesInfo{}
	return &this
}

// NewRatePlanSchedulesInfoWithDefaults instantiates a new RatePlanSchedulesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanSchedulesInfoWithDefaults() *RatePlanSchedulesInfo {
	this := RatePlanSchedulesInfo{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RatePlanSchedulesInfo) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesInfo) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RatePlanSchedulesInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *RatePlanSchedulesInfo) SetLinks(v Links) {
	o.Links = &v
}

// GetRatePlanMasterInfo returns the RatePlanMasterInfo field value if set, zero value otherwise.
func (o *RatePlanSchedulesInfo) GetRatePlanMasterInfo() RatePlanMasterInfoType {
	if o == nil || IsNil(o.RatePlanMasterInfo) {
		var ret RatePlanMasterInfoType
		return ret
	}
	return *o.RatePlanMasterInfo
}

// GetRatePlanMasterInfoOk returns a tuple with the RatePlanMasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesInfo) GetRatePlanMasterInfoOk() (*RatePlanMasterInfoType, bool) {
	if o == nil || IsNil(o.RatePlanMasterInfo) {
		return nil, false
	}
	return o.RatePlanMasterInfo, true
}

// HasRatePlanMasterInfo returns a boolean if a field has been set.
func (o *RatePlanSchedulesInfo) HasRatePlanMasterInfo() bool {
	if o != nil && !IsNil(o.RatePlanMasterInfo) {
		return true
	}

	return false
}

// SetRatePlanMasterInfo gets a reference to the given RatePlanMasterInfoType and assigns it to the RatePlanMasterInfo field.
func (o *RatePlanSchedulesInfo) SetRatePlanMasterInfo(v RatePlanMasterInfoType) {
	o.RatePlanMasterInfo = &v
}

// GetRatePlanScheduleList returns the RatePlanScheduleList field value if set, zero value otherwise.
func (o *RatePlanSchedulesInfo) GetRatePlanScheduleList() RatePlanScheduleListType {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		var ret RatePlanScheduleListType
		return ret
	}
	return *o.RatePlanScheduleList
}

// GetRatePlanScheduleListOk returns a tuple with the RatePlanScheduleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesInfo) GetRatePlanScheduleListOk() (*RatePlanScheduleListType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		return nil, false
	}
	return o.RatePlanScheduleList, true
}

// HasRatePlanScheduleList returns a boolean if a field has been set.
func (o *RatePlanSchedulesInfo) HasRatePlanScheduleList() bool {
	if o != nil && !IsNil(o.RatePlanScheduleList) {
		return true
	}

	return false
}

// SetRatePlanScheduleList gets a reference to the given RatePlanScheduleListType and assigns it to the RatePlanScheduleList field.
func (o *RatePlanSchedulesInfo) SetRatePlanScheduleList(v RatePlanScheduleListType) {
	o.RatePlanScheduleList = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RatePlanSchedulesInfo) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesInfo) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RatePlanSchedulesInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *RatePlanSchedulesInfo) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o RatePlanSchedulesInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanSchedulesInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RatePlanMasterInfo) {
		toSerialize["ratePlanMasterInfo"] = o.RatePlanMasterInfo
	}
	if !IsNil(o.RatePlanScheduleList) {
		toSerialize["ratePlanScheduleList"] = o.RatePlanScheduleList
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRatePlanSchedulesInfo struct {
	value *RatePlanSchedulesInfo
	isSet bool
}

func (v NullableRatePlanSchedulesInfo) Get() *RatePlanSchedulesInfo {
	return v.value
}

func (v *NullableRatePlanSchedulesInfo) Set(val *RatePlanSchedulesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanSchedulesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanSchedulesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanSchedulesInfo(val *RatePlanSchedulesInfo) *NullableRatePlanSchedulesInfo {
	return &NullableRatePlanSchedulesInfo{value: val, isSet: true}
}

func (v NullableRatePlanSchedulesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanSchedulesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


