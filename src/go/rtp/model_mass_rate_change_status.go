/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the MassRateChangeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MassRateChangeStatus{}

// MassRateChangeStatus A response message to fetch the status of mass rate update operation.
type MassRateChangeStatus struct {
	Links *Links `json:"links,omitempty"`
	StatusList *MassRateChangeStatusListType `json:"statusList,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewMassRateChangeStatus instantiates a new MassRateChangeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMassRateChangeStatus() *MassRateChangeStatus {
	this := MassRateChangeStatus{}
	return &this
}

// NewMassRateChangeStatusWithDefaults instantiates a new MassRateChangeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMassRateChangeStatusWithDefaults() *MassRateChangeStatus {
	this := MassRateChangeStatus{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MassRateChangeStatus) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassRateChangeStatus) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MassRateChangeStatus) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *MassRateChangeStatus) SetLinks(v Links) {
	o.Links = &v
}

// GetStatusList returns the StatusList field value if set, zero value otherwise.
func (o *MassRateChangeStatus) GetStatusList() MassRateChangeStatusListType {
	if o == nil || IsNil(o.StatusList) {
		var ret MassRateChangeStatusListType
		return ret
	}
	return *o.StatusList
}

// GetStatusListOk returns a tuple with the StatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassRateChangeStatus) GetStatusListOk() (*MassRateChangeStatusListType, bool) {
	if o == nil || IsNil(o.StatusList) {
		return nil, false
	}
	return o.StatusList, true
}

// HasStatusList returns a boolean if a field has been set.
func (o *MassRateChangeStatus) HasStatusList() bool {
	if o != nil && !IsNil(o.StatusList) {
		return true
	}

	return false
}

// SetStatusList gets a reference to the given MassRateChangeStatusListType and assigns it to the StatusList field.
func (o *MassRateChangeStatus) SetStatusList(v MassRateChangeStatusListType) {
	o.StatusList = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *MassRateChangeStatus) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassRateChangeStatus) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *MassRateChangeStatus) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *MassRateChangeStatus) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o MassRateChangeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MassRateChangeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.StatusList) {
		toSerialize["statusList"] = o.StatusList
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableMassRateChangeStatus struct {
	value *MassRateChangeStatus
	isSet bool
}

func (v NullableMassRateChangeStatus) Get() *MassRateChangeStatus {
	return v.value
}

func (v *NullableMassRateChangeStatus) Set(val *MassRateChangeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMassRateChangeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMassRateChangeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMassRateChangeStatus(val *MassRateChangeStatus) *NullableMassRateChangeStatus {
	return &NullableMassRateChangeStatus{value: val, isSet: true}
}

func (v NullableMassRateChangeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMassRateChangeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


