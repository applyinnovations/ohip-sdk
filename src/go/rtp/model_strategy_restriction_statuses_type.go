/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// StrategyRestrictionStatusesType the model 'StrategyRestrictionStatusesType'
type StrategyRestrictionStatusesType string

// List of strategyRestrictionStatusesType
const (
	STRATEGYRESTRICTIONSTATUSESTYPE_CLOSED StrategyRestrictionStatusesType = "Closed"
	STRATEGYRESTRICTIONSTATUSESTYPE_CLOSED_FOR_ARRIVAL StrategyRestrictionStatusesType = "ClosedForArrival"
	STRATEGYRESTRICTIONSTATUSESTYPE_CLOSED_FOR_DEPARTURE StrategyRestrictionStatusesType = "ClosedForDeparture"
	STRATEGYRESTRICTIONSTATUSESTYPE_MINIMUM_STAY_THROUGH StrategyRestrictionStatusesType = "MinimumStayThrough"
	STRATEGYRESTRICTIONSTATUSESTYPE_MAXIMUM_STAY_THROUGH StrategyRestrictionStatusesType = "MaximumStayThrough"
	STRATEGYRESTRICTIONSTATUSESTYPE_MINIMUM_LENGTH_OF_STAY StrategyRestrictionStatusesType = "MinimumLengthOfStay"
	STRATEGYRESTRICTIONSTATUSESTYPE_MAXIMUM_LENGTH_OF_STAY StrategyRestrictionStatusesType = "MaximumLengthOfStay"
	STRATEGYRESTRICTIONSTATUSESTYPE_MINIMUM_ADVANCE_BOOKING StrategyRestrictionStatusesType = "MinimumAdvanceBooking"
	STRATEGYRESTRICTIONSTATUSESTYPE_MAXIMUM_ADVANCE_BOOKING StrategyRestrictionStatusesType = "MaximumAdvanceBooking"
	STRATEGYRESTRICTIONSTATUSESTYPE_OPEN StrategyRestrictionStatusesType = "Open"
	STRATEGYRESTRICTIONSTATUSESTYPE_OPEN_FOR_ARRIVAL StrategyRestrictionStatusesType = "OpenForArrival"
	STRATEGYRESTRICTIONSTATUSESTYPE_OPEN_FOR_DEPARTURE StrategyRestrictionStatusesType = "OpenForDeparture"
)

// All allowed values of StrategyRestrictionStatusesType enum
var AllowedStrategyRestrictionStatusesTypeEnumValues = []StrategyRestrictionStatusesType{
	"Closed",
	"ClosedForArrival",
	"ClosedForDeparture",
	"MinimumStayThrough",
	"MaximumStayThrough",
	"MinimumLengthOfStay",
	"MaximumLengthOfStay",
	"MinimumAdvanceBooking",
	"MaximumAdvanceBooking",
	"Open",
	"OpenForArrival",
	"OpenForDeparture",
}

func (v *StrategyRestrictionStatusesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StrategyRestrictionStatusesType(value)
	for _, existing := range AllowedStrategyRestrictionStatusesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StrategyRestrictionStatusesType", value)
}

// NewStrategyRestrictionStatusesTypeFromValue returns a pointer to a valid StrategyRestrictionStatusesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStrategyRestrictionStatusesTypeFromValue(v string) (*StrategyRestrictionStatusesType, error) {
	ev := StrategyRestrictionStatusesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StrategyRestrictionStatusesType: valid values are %v", v, AllowedStrategyRestrictionStatusesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StrategyRestrictionStatusesType) IsValid() bool {
	for _, existing := range AllowedStrategyRestrictionStatusesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to strategyRestrictionStatusesType value
func (v StrategyRestrictionStatusesType) Ptr() *StrategyRestrictionStatusesType {
	return &v
}

type NullableStrategyRestrictionStatusesType struct {
	value *StrategyRestrictionStatusesType
	isSet bool
}

func (v NullableStrategyRestrictionStatusesType) Get() *StrategyRestrictionStatusesType {
	return v.value
}

func (v *NullableStrategyRestrictionStatusesType) Set(val *StrategyRestrictionStatusesType) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyRestrictionStatusesType) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyRestrictionStatusesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyRestrictionStatusesType(val *StrategyRestrictionStatusesType) *NullableStrategyRestrictionStatusesType {
	return &NullableStrategyRestrictionStatusesType{value: val, isSet: true}
}

func (v NullableStrategyRestrictionStatusesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyRestrictionStatusesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

