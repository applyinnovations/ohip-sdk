/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the InterfaceRightsStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceRightsStatusType{}

// InterfaceRightsStatusType struct for InterfaceRightsStatusType
type InterfaceRightsStatusType struct {
	// Category code of this interface right.
	Category *string `json:"category,omitempty"`
	// User defined description for an Interface Right.
	Description *string `json:"description,omitempty"`
	// Internal code for each allowed right of a Hotel Interface record.
	Right *int32 `json:"right,omitempty"`
	// User defined code for an Interface Right.
	StatusCode *string `json:"statusCode,omitempty"`
}

// NewInterfaceRightsStatusType instantiates a new InterfaceRightsStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceRightsStatusType() *InterfaceRightsStatusType {
	this := InterfaceRightsStatusType{}
	return &this
}

// NewInterfaceRightsStatusTypeWithDefaults instantiates a new InterfaceRightsStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceRightsStatusTypeWithDefaults() *InterfaceRightsStatusType {
	this := InterfaceRightsStatusType{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *InterfaceRightsStatusType) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightsStatusType) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *InterfaceRightsStatusType) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *InterfaceRightsStatusType) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterfaceRightsStatusType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightsStatusType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterfaceRightsStatusType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterfaceRightsStatusType) SetDescription(v string) {
	o.Description = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *InterfaceRightsStatusType) GetRight() int32 {
	if o == nil || IsNil(o.Right) {
		var ret int32
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightsStatusType) GetRightOk() (*int32, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *InterfaceRightsStatusType) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given int32 and assigns it to the Right field.
func (o *InterfaceRightsStatusType) SetRight(v int32) {
	o.Right = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *InterfaceRightsStatusType) GetStatusCode() string {
	if o == nil || IsNil(o.StatusCode) {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightsStatusType) GetStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *InterfaceRightsStatusType) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *InterfaceRightsStatusType) SetStatusCode(v string) {
	o.StatusCode = &v
}

func (o InterfaceRightsStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceRightsStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableInterfaceRightsStatusType struct {
	value *InterfaceRightsStatusType
	isSet bool
}

func (v NullableInterfaceRightsStatusType) Get() *InterfaceRightsStatusType {
	return v.value
}

func (v *NullableInterfaceRightsStatusType) Set(val *InterfaceRightsStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRightsStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRightsStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRightsStatusType(val *InterfaceRightsStatusType) *NullableInterfaceRightsStatusType {
	return &NullableInterfaceRightsStatusType{value: val, isSet: true}
}

func (v NullableInterfaceRightsStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRightsStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


