/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the TicketsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketsType{}

// TicketsType Collection of TicketType objects.
type TicketsType struct {
	Items []TicketType
}

// NewTicketsType instantiates a new TicketsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketsType() *TicketsType {
	this := TicketsType{}
	return &this
}

// NewTicketsTypeWithDefaults instantiates a new TicketsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketsTypeWithDefaults() *TicketsType {
	this := TicketsType{}
	return &this
}

func (o TicketsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *TicketsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableTicketsType struct {
	value TicketsType
	isSet bool
}

func (v NullableTicketsType) Get() TicketsType {
	return v.value
}

func (v *NullableTicketsType) Set(val TicketsType) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketsType) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketsType(val TicketsType) *NullableTicketsType {
	return &NullableTicketsType{value: val, isSet: true}
}

func (v NullableTicketsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


