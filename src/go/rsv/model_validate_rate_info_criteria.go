/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ValidateRateInfoCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateRateInfoCriteria{}

// ValidateRateInfoCriteria Search type can either be based on a reservation or based on a quotation. If a reservation name id is passed then most criteria are ignored.
type ValidateRateInfoCriteria struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// The code specifying a monetary unit. Use ISO 4217, three alpha code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
	CurrencySymbol *string `json:"currencySymbol,omitempty"`
	// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard \"minor unit\". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces=\"2\" to represent $85).
	DecimalPlaces *int32 `json:"decimalPlaces,omitempty"`
	// This field is only required when the criteria is meant for a detailed results. The date for the rate detail is needed.
	DetailDate *string `json:"detailDate,omitempty"`
	EffectiveRates *EffectiveRatesType `json:"effectiveRates,omitempty"`
	GuestCounts *GuestCountsType `json:"guestCounts,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
	ReservationPackages []ReservationPackageType `json:"reservationPackages,omitempty"`
	// Refer to Generic common types document.
	ReservationProfiles []ReservationProfileType `json:"reservationProfiles,omitempty"`
	ResvRateAmount *CurrencyAmountType `json:"resvRateAmount,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	RoomType *string `json:"roomType,omitempty"`
	// Flag to indicate if summary information is required.
	SummaryInfo *bool `json:"summaryInfo,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewValidateRateInfoCriteria instantiates a new ValidateRateInfoCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateRateInfoCriteria() *ValidateRateInfoCriteria {
	this := ValidateRateInfoCriteria{}
	return &this
}

// NewValidateRateInfoCriteriaWithDefaults instantiates a new ValidateRateInfoCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateRateInfoCriteriaWithDefaults() *ValidateRateInfoCriteria {
	this := ValidateRateInfoCriteria{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *ValidateRateInfoCriteria) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ValidateRateInfoCriteria) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetCurrencySymbol() string {
	if o == nil || IsNil(o.CurrencySymbol) {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencySymbol) {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasCurrencySymbol() bool {
	if o != nil && !IsNil(o.CurrencySymbol) {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *ValidateRateInfoCriteria) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetDecimalPlaces() int32 {
	if o == nil || IsNil(o.DecimalPlaces) {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPlaces) {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasDecimalPlaces() bool {
	if o != nil && !IsNil(o.DecimalPlaces) {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *ValidateRateInfoCriteria) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetDetailDate returns the DetailDate field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetDetailDate() string {
	if o == nil || IsNil(o.DetailDate) {
		var ret string
		return ret
	}
	return *o.DetailDate
}

// GetDetailDateOk returns a tuple with the DetailDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetDetailDateOk() (*string, bool) {
	if o == nil || IsNil(o.DetailDate) {
		return nil, false
	}
	return o.DetailDate, true
}

// HasDetailDate returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasDetailDate() bool {
	if o != nil && !IsNil(o.DetailDate) {
		return true
	}

	return false
}

// SetDetailDate gets a reference to the given string and assigns it to the DetailDate field.
func (o *ValidateRateInfoCriteria) SetDetailDate(v string) {
	o.DetailDate = &v
}

// GetEffectiveRates returns the EffectiveRates field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetEffectiveRates() EffectiveRatesType {
	if o == nil || IsNil(o.EffectiveRates) {
		var ret EffectiveRatesType
		return ret
	}
	return *o.EffectiveRates
}

// GetEffectiveRatesOk returns a tuple with the EffectiveRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetEffectiveRatesOk() (*EffectiveRatesType, bool) {
	if o == nil || IsNil(o.EffectiveRates) {
		return nil, false
	}
	return o.EffectiveRates, true
}

// HasEffectiveRates returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasEffectiveRates() bool {
	if o != nil && !IsNil(o.EffectiveRates) {
		return true
	}

	return false
}

// SetEffectiveRates gets a reference to the given EffectiveRatesType and assigns it to the EffectiveRates field.
func (o *ValidateRateInfoCriteria) SetEffectiveRates(v EffectiveRatesType) {
	o.EffectiveRates = &v
}

// GetGuestCounts returns the GuestCounts field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetGuestCounts() GuestCountsType {
	if o == nil || IsNil(o.GuestCounts) {
		var ret GuestCountsType
		return ret
	}
	return *o.GuestCounts
}

// GetGuestCountsOk returns a tuple with the GuestCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetGuestCountsOk() (*GuestCountsType, bool) {
	if o == nil || IsNil(o.GuestCounts) {
		return nil, false
	}
	return o.GuestCounts, true
}

// HasGuestCounts returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasGuestCounts() bool {
	if o != nil && !IsNil(o.GuestCounts) {
		return true
	}

	return false
}

// SetGuestCounts gets a reference to the given GuestCountsType and assigns it to the GuestCounts field.
func (o *ValidateRateInfoCriteria) SetGuestCounts(v GuestCountsType) {
	o.GuestCounts = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ValidateRateInfoCriteria) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *ValidateRateInfoCriteria) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ValidateRateInfoCriteria) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetReservationPackages returns the ReservationPackages field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetReservationPackages() []ReservationPackageType {
	if o == nil || IsNil(o.ReservationPackages) {
		var ret []ReservationPackageType
		return ret
	}
	return o.ReservationPackages
}

// GetReservationPackagesOk returns a tuple with the ReservationPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetReservationPackagesOk() ([]ReservationPackageType, bool) {
	if o == nil || IsNil(o.ReservationPackages) {
		return nil, false
	}
	return o.ReservationPackages, true
}

// HasReservationPackages returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasReservationPackages() bool {
	if o != nil && !IsNil(o.ReservationPackages) {
		return true
	}

	return false
}

// SetReservationPackages gets a reference to the given []ReservationPackageType and assigns it to the ReservationPackages field.
func (o *ValidateRateInfoCriteria) SetReservationPackages(v []ReservationPackageType) {
	o.ReservationPackages = v
}

// GetReservationProfiles returns the ReservationProfiles field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetReservationProfiles() []ReservationProfileType {
	if o == nil || IsNil(o.ReservationProfiles) {
		var ret []ReservationProfileType
		return ret
	}
	return o.ReservationProfiles
}

// GetReservationProfilesOk returns a tuple with the ReservationProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetReservationProfilesOk() ([]ReservationProfileType, bool) {
	if o == nil || IsNil(o.ReservationProfiles) {
		return nil, false
	}
	return o.ReservationProfiles, true
}

// HasReservationProfiles returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasReservationProfiles() bool {
	if o != nil && !IsNil(o.ReservationProfiles) {
		return true
	}

	return false
}

// SetReservationProfiles gets a reference to the given []ReservationProfileType and assigns it to the ReservationProfiles field.
func (o *ValidateRateInfoCriteria) SetReservationProfiles(v []ReservationProfileType) {
	o.ReservationProfiles = v
}

// GetResvRateAmount returns the ResvRateAmount field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetResvRateAmount() CurrencyAmountType {
	if o == nil || IsNil(o.ResvRateAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.ResvRateAmount
}

// GetResvRateAmountOk returns a tuple with the ResvRateAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetResvRateAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.ResvRateAmount) {
		return nil, false
	}
	return o.ResvRateAmount, true
}

// HasResvRateAmount returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasResvRateAmount() bool {
	if o != nil && !IsNil(o.ResvRateAmount) {
		return true
	}

	return false
}

// SetResvRateAmount gets a reference to the given CurrencyAmountType and assigns it to the ResvRateAmount field.
func (o *ValidateRateInfoCriteria) SetResvRateAmount(v CurrencyAmountType) {
	o.ResvRateAmount = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *ValidateRateInfoCriteria) SetRoomType(v string) {
	o.RoomType = &v
}

// GetSummaryInfo returns the SummaryInfo field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetSummaryInfo() bool {
	if o == nil || IsNil(o.SummaryInfo) {
		var ret bool
		return ret
	}
	return *o.SummaryInfo
}

// GetSummaryInfoOk returns a tuple with the SummaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetSummaryInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.SummaryInfo) {
		return nil, false
	}
	return o.SummaryInfo, true
}

// HasSummaryInfo returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasSummaryInfo() bool {
	if o != nil && !IsNil(o.SummaryInfo) {
		return true
	}

	return false
}

// SetSummaryInfo gets a reference to the given bool and assigns it to the SummaryInfo field.
func (o *ValidateRateInfoCriteria) SetSummaryInfo(v bool) {
	o.SummaryInfo = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *ValidateRateInfoCriteria) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateRateInfoCriteria) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *ValidateRateInfoCriteria) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *ValidateRateInfoCriteria) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o ValidateRateInfoCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateRateInfoCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencySymbol) {
		toSerialize["currencySymbol"] = o.CurrencySymbol
	}
	if !IsNil(o.DecimalPlaces) {
		toSerialize["decimalPlaces"] = o.DecimalPlaces
	}
	if !IsNil(o.DetailDate) {
		toSerialize["detailDate"] = o.DetailDate
	}
	if !IsNil(o.EffectiveRates) {
		toSerialize["effectiveRates"] = o.EffectiveRates
	}
	if !IsNil(o.GuestCounts) {
		toSerialize["guestCounts"] = o.GuestCounts
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.ReservationPackages) {
		toSerialize["reservationPackages"] = o.ReservationPackages
	}
	if !IsNil(o.ReservationProfiles) {
		toSerialize["reservationProfiles"] = o.ReservationProfiles
	}
	if !IsNil(o.ResvRateAmount) {
		toSerialize["resvRateAmount"] = o.ResvRateAmount
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.SummaryInfo) {
		toSerialize["summaryInfo"] = o.SummaryInfo
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableValidateRateInfoCriteria struct {
	value *ValidateRateInfoCriteria
	isSet bool
}

func (v NullableValidateRateInfoCriteria) Get() *ValidateRateInfoCriteria {
	return v.value
}

func (v *NullableValidateRateInfoCriteria) Set(val *ValidateRateInfoCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateRateInfoCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateRateInfoCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateRateInfoCriteria(val *ValidateRateInfoCriteria) *NullableValidateRateInfoCriteria {
	return &NullableValidateRateInfoCriteria{value: val, isSet: true}
}

func (v NullableValidateRateInfoCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateRateInfoCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


