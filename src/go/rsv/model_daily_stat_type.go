/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the DailyStatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyStatType{}

// DailyStatType Statistics of one day.
type DailyStatType struct {
	BlockStats *BlockStatsType `json:"blockStats,omitempty"`
	// Date of statistics.
	StatisticDate *string `json:"statisticDate,omitempty"`
}

// NewDailyStatType instantiates a new DailyStatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyStatType() *DailyStatType {
	this := DailyStatType{}
	return &this
}

// NewDailyStatTypeWithDefaults instantiates a new DailyStatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyStatTypeWithDefaults() *DailyStatType {
	this := DailyStatType{}
	return &this
}

// GetBlockStats returns the BlockStats field value if set, zero value otherwise.
func (o *DailyStatType) GetBlockStats() BlockStatsType {
	if o == nil || IsNil(o.BlockStats) {
		var ret BlockStatsType
		return ret
	}
	return *o.BlockStats
}

// GetBlockStatsOk returns a tuple with the BlockStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyStatType) GetBlockStatsOk() (*BlockStatsType, bool) {
	if o == nil || IsNil(o.BlockStats) {
		return nil, false
	}
	return o.BlockStats, true
}

// HasBlockStats returns a boolean if a field has been set.
func (o *DailyStatType) HasBlockStats() bool {
	if o != nil && !IsNil(o.BlockStats) {
		return true
	}

	return false
}

// SetBlockStats gets a reference to the given BlockStatsType and assigns it to the BlockStats field.
func (o *DailyStatType) SetBlockStats(v BlockStatsType) {
	o.BlockStats = &v
}

// GetStatisticDate returns the StatisticDate field value if set, zero value otherwise.
func (o *DailyStatType) GetStatisticDate() string {
	if o == nil || IsNil(o.StatisticDate) {
		var ret string
		return ret
	}
	return *o.StatisticDate
}

// GetStatisticDateOk returns a tuple with the StatisticDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyStatType) GetStatisticDateOk() (*string, bool) {
	if o == nil || IsNil(o.StatisticDate) {
		return nil, false
	}
	return o.StatisticDate, true
}

// HasStatisticDate returns a boolean if a field has been set.
func (o *DailyStatType) HasStatisticDate() bool {
	if o != nil && !IsNil(o.StatisticDate) {
		return true
	}

	return false
}

// SetStatisticDate gets a reference to the given string and assigns it to the StatisticDate field.
func (o *DailyStatType) SetStatisticDate(v string) {
	o.StatisticDate = &v
}

func (o DailyStatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyStatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockStats) {
		toSerialize["blockStats"] = o.BlockStats
	}
	if !IsNil(o.StatisticDate) {
		toSerialize["statisticDate"] = o.StatisticDate
	}
	return toSerialize, nil
}

type NullableDailyStatType struct {
	value *DailyStatType
	isSet bool
}

func (v NullableDailyStatType) Get() *DailyStatType {
	return v.value
}

func (v *NullableDailyStatType) Set(val *DailyStatType) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyStatType) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyStatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyStatType(val *DailyStatType) *NullableDailyStatType {
	return &NullableDailyStatType{value: val, isSet: true}
}

func (v NullableDailyStatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyStatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


