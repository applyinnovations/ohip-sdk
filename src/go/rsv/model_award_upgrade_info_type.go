/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the AwardUpgradeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardUpgradeInfoType{}

// AwardUpgradeInfoType struct for AwardUpgradeInfoType
type AwardUpgradeInfoType struct {
	AwardUpgradeSummaries *AwardUpgradeSummariesType `json:"awardUpgradeSummaries,omitempty"`
	// From Room type associated with the award.
	FromRoomType *string `json:"fromRoomType,omitempty"`
	// Property associated with the award upgrade.
	HotelId *string `json:"hotelId,omitempty"`
	// The card number associated with this membership.
	MembershipCardNo *string `json:"membershipCardNo,omitempty"`
	// The current level of the membership.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Current membership points available for this guest.
	MembershipPoints *int32 `json:"membershipPoints,omitempty"`
	// The type of the membership.
	MembershipType *string `json:"membershipType,omitempty"`
	ReservationTimeSpan *TimeSpanType `json:"reservationTimeSpan,omitempty"`
}

// NewAwardUpgradeInfoType instantiates a new AwardUpgradeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardUpgradeInfoType() *AwardUpgradeInfoType {
	this := AwardUpgradeInfoType{}
	return &this
}

// NewAwardUpgradeInfoTypeWithDefaults instantiates a new AwardUpgradeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardUpgradeInfoTypeWithDefaults() *AwardUpgradeInfoType {
	this := AwardUpgradeInfoType{}
	return &this
}

// GetAwardUpgradeSummaries returns the AwardUpgradeSummaries field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetAwardUpgradeSummaries() AwardUpgradeSummariesType {
	if o == nil || IsNil(o.AwardUpgradeSummaries) {
		var ret AwardUpgradeSummariesType
		return ret
	}
	return *o.AwardUpgradeSummaries
}

// GetAwardUpgradeSummariesOk returns a tuple with the AwardUpgradeSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetAwardUpgradeSummariesOk() (*AwardUpgradeSummariesType, bool) {
	if o == nil || IsNil(o.AwardUpgradeSummaries) {
		return nil, false
	}
	return o.AwardUpgradeSummaries, true
}

// HasAwardUpgradeSummaries returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasAwardUpgradeSummaries() bool {
	if o != nil && !IsNil(o.AwardUpgradeSummaries) {
		return true
	}

	return false
}

// SetAwardUpgradeSummaries gets a reference to the given AwardUpgradeSummariesType and assigns it to the AwardUpgradeSummaries field.
func (o *AwardUpgradeInfoType) SetAwardUpgradeSummaries(v AwardUpgradeSummariesType) {
	o.AwardUpgradeSummaries = &v
}

// GetFromRoomType returns the FromRoomType field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetFromRoomType() string {
	if o == nil || IsNil(o.FromRoomType) {
		var ret string
		return ret
	}
	return *o.FromRoomType
}

// GetFromRoomTypeOk returns a tuple with the FromRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetFromRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FromRoomType) {
		return nil, false
	}
	return o.FromRoomType, true
}

// HasFromRoomType returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasFromRoomType() bool {
	if o != nil && !IsNil(o.FromRoomType) {
		return true
	}

	return false
}

// SetFromRoomType gets a reference to the given string and assigns it to the FromRoomType field.
func (o *AwardUpgradeInfoType) SetFromRoomType(v string) {
	o.FromRoomType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AwardUpgradeInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMembershipCardNo returns the MembershipCardNo field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetMembershipCardNo() string {
	if o == nil || IsNil(o.MembershipCardNo) {
		var ret string
		return ret
	}
	return *o.MembershipCardNo
}

// GetMembershipCardNoOk returns a tuple with the MembershipCardNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetMembershipCardNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCardNo) {
		return nil, false
	}
	return o.MembershipCardNo, true
}

// HasMembershipCardNo returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasMembershipCardNo() bool {
	if o != nil && !IsNil(o.MembershipCardNo) {
		return true
	}

	return false
}

// SetMembershipCardNo gets a reference to the given string and assigns it to the MembershipCardNo field.
func (o *AwardUpgradeInfoType) SetMembershipCardNo(v string) {
	o.MembershipCardNo = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *AwardUpgradeInfoType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMembershipPoints returns the MembershipPoints field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetMembershipPoints() int32 {
	if o == nil || IsNil(o.MembershipPoints) {
		var ret int32
		return ret
	}
	return *o.MembershipPoints
}

// GetMembershipPointsOk returns a tuple with the MembershipPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetMembershipPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.MembershipPoints) {
		return nil, false
	}
	return o.MembershipPoints, true
}

// HasMembershipPoints returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasMembershipPoints() bool {
	if o != nil && !IsNil(o.MembershipPoints) {
		return true
	}

	return false
}

// SetMembershipPoints gets a reference to the given int32 and assigns it to the MembershipPoints field.
func (o *AwardUpgradeInfoType) SetMembershipPoints(v int32) {
	o.MembershipPoints = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *AwardUpgradeInfoType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetReservationTimeSpan returns the ReservationTimeSpan field value if set, zero value otherwise.
func (o *AwardUpgradeInfoType) GetReservationTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.ReservationTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.ReservationTimeSpan
}

// GetReservationTimeSpanOk returns a tuple with the ReservationTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeInfoType) GetReservationTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ReservationTimeSpan) {
		return nil, false
	}
	return o.ReservationTimeSpan, true
}

// HasReservationTimeSpan returns a boolean if a field has been set.
func (o *AwardUpgradeInfoType) HasReservationTimeSpan() bool {
	if o != nil && !IsNil(o.ReservationTimeSpan) {
		return true
	}

	return false
}

// SetReservationTimeSpan gets a reference to the given TimeSpanType and assigns it to the ReservationTimeSpan field.
func (o *AwardUpgradeInfoType) SetReservationTimeSpan(v TimeSpanType) {
	o.ReservationTimeSpan = &v
}

func (o AwardUpgradeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardUpgradeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardUpgradeSummaries) {
		toSerialize["awardUpgradeSummaries"] = o.AwardUpgradeSummaries
	}
	if !IsNil(o.FromRoomType) {
		toSerialize["fromRoomType"] = o.FromRoomType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MembershipCardNo) {
		toSerialize["membershipCardNo"] = o.MembershipCardNo
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MembershipPoints) {
		toSerialize["membershipPoints"] = o.MembershipPoints
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.ReservationTimeSpan) {
		toSerialize["reservationTimeSpan"] = o.ReservationTimeSpan
	}
	return toSerialize, nil
}

type NullableAwardUpgradeInfoType struct {
	value *AwardUpgradeInfoType
	isSet bool
}

func (v NullableAwardUpgradeInfoType) Get() *AwardUpgradeInfoType {
	return v.value
}

func (v *NullableAwardUpgradeInfoType) Set(val *AwardUpgradeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardUpgradeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardUpgradeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardUpgradeInfoType(val *AwardUpgradeInfoType) *NullableAwardUpgradeInfoType {
	return &NullableAwardUpgradeInfoType{value: val, isSet: true}
}

func (v NullableAwardUpgradeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardUpgradeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


