/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the SplitMultiRoomReservationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitMultiRoomReservationDetails{}

// SplitMultiRoomReservationDetails Response for splitting multi-room reservation into separate reservations.
type SplitMultiRoomReservationDetails struct {
	LinkedReservations *LinkedReservationsInfoType `json:"linkedReservations,omitempty"`
	Links *Links `json:"links,omitempty"`
	NewReservationIdList *UniqueIDListType `json:"newReservationIdList,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewSplitMultiRoomReservationDetails instantiates a new SplitMultiRoomReservationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitMultiRoomReservationDetails() *SplitMultiRoomReservationDetails {
	this := SplitMultiRoomReservationDetails{}
	return &this
}

// NewSplitMultiRoomReservationDetailsWithDefaults instantiates a new SplitMultiRoomReservationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitMultiRoomReservationDetailsWithDefaults() *SplitMultiRoomReservationDetails {
	this := SplitMultiRoomReservationDetails{}
	return &this
}

// GetLinkedReservations returns the LinkedReservations field value if set, zero value otherwise.
func (o *SplitMultiRoomReservationDetails) GetLinkedReservations() LinkedReservationsInfoType {
	if o == nil || IsNil(o.LinkedReservations) {
		var ret LinkedReservationsInfoType
		return ret
	}
	return *o.LinkedReservations
}

// GetLinkedReservationsOk returns a tuple with the LinkedReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitMultiRoomReservationDetails) GetLinkedReservationsOk() (*LinkedReservationsInfoType, bool) {
	if o == nil || IsNil(o.LinkedReservations) {
		return nil, false
	}
	return o.LinkedReservations, true
}

// HasLinkedReservations returns a boolean if a field has been set.
func (o *SplitMultiRoomReservationDetails) HasLinkedReservations() bool {
	if o != nil && !IsNil(o.LinkedReservations) {
		return true
	}

	return false
}

// SetLinkedReservations gets a reference to the given LinkedReservationsInfoType and assigns it to the LinkedReservations field.
func (o *SplitMultiRoomReservationDetails) SetLinkedReservations(v LinkedReservationsInfoType) {
	o.LinkedReservations = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SplitMultiRoomReservationDetails) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitMultiRoomReservationDetails) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SplitMultiRoomReservationDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *SplitMultiRoomReservationDetails) SetLinks(v Links) {
	o.Links = &v
}

// GetNewReservationIdList returns the NewReservationIdList field value if set, zero value otherwise.
func (o *SplitMultiRoomReservationDetails) GetNewReservationIdList() UniqueIDListType {
	if o == nil || IsNil(o.NewReservationIdList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.NewReservationIdList
}

// GetNewReservationIdListOk returns a tuple with the NewReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitMultiRoomReservationDetails) GetNewReservationIdListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.NewReservationIdList) {
		return nil, false
	}
	return o.NewReservationIdList, true
}

// HasNewReservationIdList returns a boolean if a field has been set.
func (o *SplitMultiRoomReservationDetails) HasNewReservationIdList() bool {
	if o != nil && !IsNil(o.NewReservationIdList) {
		return true
	}

	return false
}

// SetNewReservationIdList gets a reference to the given UniqueIDListType and assigns it to the NewReservationIdList field.
func (o *SplitMultiRoomReservationDetails) SetNewReservationIdList(v UniqueIDListType) {
	o.NewReservationIdList = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SplitMultiRoomReservationDetails) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitMultiRoomReservationDetails) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SplitMultiRoomReservationDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *SplitMultiRoomReservationDetails) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o SplitMultiRoomReservationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitMultiRoomReservationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkedReservations) {
		toSerialize["linkedReservations"] = o.LinkedReservations
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.NewReservationIdList) {
		toSerialize["newReservationIdList"] = o.NewReservationIdList
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSplitMultiRoomReservationDetails struct {
	value *SplitMultiRoomReservationDetails
	isSet bool
}

func (v NullableSplitMultiRoomReservationDetails) Get() *SplitMultiRoomReservationDetails {
	return v.value
}

func (v *NullableSplitMultiRoomReservationDetails) Set(val *SplitMultiRoomReservationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitMultiRoomReservationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitMultiRoomReservationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitMultiRoomReservationDetails(val *SplitMultiRoomReservationDetails) *NullableSplitMultiRoomReservationDetails {
	return &NullableSplitMultiRoomReservationDetails{value: val, isSet: true}
}

func (v NullableSplitMultiRoomReservationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitMultiRoomReservationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


