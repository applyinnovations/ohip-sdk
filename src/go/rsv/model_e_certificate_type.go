/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ECertificateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECertificateType{}

// ECertificateType E-Certificates details.
type ECertificateType struct {
	// Printed certificate no. This has to be unique.
	CertificateNo *string `json:"certificateNo,omitempty"`
	ConsumptionDetail *ECertificateConsumptionType `json:"consumptionDetail,omitempty"`
	ECertificateInfo *ECertificateInfoType `json:"eCertificateInfo,omitempty"`
	// Date of expiry.
	ExpiryDate *string `json:"expiryDate,omitempty"`
	// Date when certificate was issued.
	IssueDate *string `json:"issueDate,omitempty"`
	// Print status of the certificate.
	Printed *bool `json:"printed,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	Source *ECertificateIssueSourceType `json:"source,omitempty"`
	Status *ECertificateStatusType `json:"status,omitempty"`
	// System generated unique voucher number.
	VoucherNo *string `json:"voucherNo,omitempty"`
}

// NewECertificateType instantiates a new ECertificateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECertificateType() *ECertificateType {
	this := ECertificateType{}
	return &this
}

// NewECertificateTypeWithDefaults instantiates a new ECertificateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECertificateTypeWithDefaults() *ECertificateType {
	this := ECertificateType{}
	return &this
}

// GetCertificateNo returns the CertificateNo field value if set, zero value otherwise.
func (o *ECertificateType) GetCertificateNo() string {
	if o == nil || IsNil(o.CertificateNo) {
		var ret string
		return ret
	}
	return *o.CertificateNo
}

// GetCertificateNoOk returns a tuple with the CertificateNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetCertificateNoOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateNo) {
		return nil, false
	}
	return o.CertificateNo, true
}

// HasCertificateNo returns a boolean if a field has been set.
func (o *ECertificateType) HasCertificateNo() bool {
	if o != nil && !IsNil(o.CertificateNo) {
		return true
	}

	return false
}

// SetCertificateNo gets a reference to the given string and assigns it to the CertificateNo field.
func (o *ECertificateType) SetCertificateNo(v string) {
	o.CertificateNo = &v
}

// GetConsumptionDetail returns the ConsumptionDetail field value if set, zero value otherwise.
func (o *ECertificateType) GetConsumptionDetail() ECertificateConsumptionType {
	if o == nil || IsNil(o.ConsumptionDetail) {
		var ret ECertificateConsumptionType
		return ret
	}
	return *o.ConsumptionDetail
}

// GetConsumptionDetailOk returns a tuple with the ConsumptionDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetConsumptionDetailOk() (*ECertificateConsumptionType, bool) {
	if o == nil || IsNil(o.ConsumptionDetail) {
		return nil, false
	}
	return o.ConsumptionDetail, true
}

// HasConsumptionDetail returns a boolean if a field has been set.
func (o *ECertificateType) HasConsumptionDetail() bool {
	if o != nil && !IsNil(o.ConsumptionDetail) {
		return true
	}

	return false
}

// SetConsumptionDetail gets a reference to the given ECertificateConsumptionType and assigns it to the ConsumptionDetail field.
func (o *ECertificateType) SetConsumptionDetail(v ECertificateConsumptionType) {
	o.ConsumptionDetail = &v
}

// GetECertificateInfo returns the ECertificateInfo field value if set, zero value otherwise.
func (o *ECertificateType) GetECertificateInfo() ECertificateInfoType {
	if o == nil || IsNil(o.ECertificateInfo) {
		var ret ECertificateInfoType
		return ret
	}
	return *o.ECertificateInfo
}

// GetECertificateInfoOk returns a tuple with the ECertificateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetECertificateInfoOk() (*ECertificateInfoType, bool) {
	if o == nil || IsNil(o.ECertificateInfo) {
		return nil, false
	}
	return o.ECertificateInfo, true
}

// HasECertificateInfo returns a boolean if a field has been set.
func (o *ECertificateType) HasECertificateInfo() bool {
	if o != nil && !IsNil(o.ECertificateInfo) {
		return true
	}

	return false
}

// SetECertificateInfo gets a reference to the given ECertificateInfoType and assigns it to the ECertificateInfo field.
func (o *ECertificateType) SetECertificateInfo(v ECertificateInfoType) {
	o.ECertificateInfo = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *ECertificateType) GetExpiryDate() string {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *ECertificateType) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *ECertificateType) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *ECertificateType) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *ECertificateType) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *ECertificateType) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetPrinted returns the Printed field value if set, zero value otherwise.
func (o *ECertificateType) GetPrinted() bool {
	if o == nil || IsNil(o.Printed) {
		var ret bool
		return ret
	}
	return *o.Printed
}

// GetPrintedOk returns a tuple with the Printed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetPrintedOk() (*bool, bool) {
	if o == nil || IsNil(o.Printed) {
		return nil, false
	}
	return o.Printed, true
}

// HasPrinted returns a boolean if a field has been set.
func (o *ECertificateType) HasPrinted() bool {
	if o != nil && !IsNil(o.Printed) {
		return true
	}

	return false
}

// SetPrinted gets a reference to the given bool and assigns it to the Printed field.
func (o *ECertificateType) SetPrinted(v bool) {
	o.Printed = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ECertificateType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ECertificateType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *ECertificateType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ECertificateType) GetSource() ECertificateIssueSourceType {
	if o == nil || IsNil(o.Source) {
		var ret ECertificateIssueSourceType
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetSourceOk() (*ECertificateIssueSourceType, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ECertificateType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ECertificateIssueSourceType and assigns it to the Source field.
func (o *ECertificateType) SetSource(v ECertificateIssueSourceType) {
	o.Source = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ECertificateType) GetStatus() ECertificateStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ECertificateStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetStatusOk() (*ECertificateStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ECertificateType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ECertificateStatusType and assigns it to the Status field.
func (o *ECertificateType) SetStatus(v ECertificateStatusType) {
	o.Status = &v
}

// GetVoucherNo returns the VoucherNo field value if set, zero value otherwise.
func (o *ECertificateType) GetVoucherNo() string {
	if o == nil || IsNil(o.VoucherNo) {
		var ret string
		return ret
	}
	return *o.VoucherNo
}

// GetVoucherNoOk returns a tuple with the VoucherNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificateType) GetVoucherNoOk() (*string, bool) {
	if o == nil || IsNil(o.VoucherNo) {
		return nil, false
	}
	return o.VoucherNo, true
}

// HasVoucherNo returns a boolean if a field has been set.
func (o *ECertificateType) HasVoucherNo() bool {
	if o != nil && !IsNil(o.VoucherNo) {
		return true
	}

	return false
}

// SetVoucherNo gets a reference to the given string and assigns it to the VoucherNo field.
func (o *ECertificateType) SetVoucherNo(v string) {
	o.VoucherNo = &v
}

func (o ECertificateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECertificateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateNo) {
		toSerialize["certificateNo"] = o.CertificateNo
	}
	if !IsNil(o.ConsumptionDetail) {
		toSerialize["consumptionDetail"] = o.ConsumptionDetail
	}
	if !IsNil(o.ECertificateInfo) {
		toSerialize["eCertificateInfo"] = o.ECertificateInfo
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.Printed) {
		toSerialize["printed"] = o.Printed
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VoucherNo) {
		toSerialize["voucherNo"] = o.VoucherNo
	}
	return toSerialize, nil
}

type NullableECertificateType struct {
	value *ECertificateType
	isSet bool
}

func (v NullableECertificateType) Get() *ECertificateType {
	return v.value
}

func (v *NullableECertificateType) Set(val *ECertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableECertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableECertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECertificateType(val *ECertificateType) *NullableECertificateType {
	return &NullableECertificateType{value: val, isSet: true}
}

func (v NullableECertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


