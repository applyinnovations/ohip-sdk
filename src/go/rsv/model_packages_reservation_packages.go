/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the PackagesReservationPackages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackagesReservationPackages{}

// PackagesReservationPackages A collection of Service objects. This is the collection of all services associated with any part of this reservation (the reservation in its entirety, one or more guests, or one or more room stays). Which services are attributable to which part is determined by each object's ServiceRPHs collection.
type PackagesReservationPackages struct {
	InventoryItems *ResInventoryItemsType `json:"inventoryItems,omitempty"`
	// A Service object represents a package provided to guests. Service packages may have associated inventory and charges.
	ReservationPackage []ReservationPackageType `json:"reservationPackage,omitempty"`
}

// NewPackagesReservationPackages instantiates a new PackagesReservationPackages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackagesReservationPackages() *PackagesReservationPackages {
	this := PackagesReservationPackages{}
	return &this
}

// NewPackagesReservationPackagesWithDefaults instantiates a new PackagesReservationPackages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackagesReservationPackagesWithDefaults() *PackagesReservationPackages {
	this := PackagesReservationPackages{}
	return &this
}

// GetInventoryItems returns the InventoryItems field value if set, zero value otherwise.
func (o *PackagesReservationPackages) GetInventoryItems() ResInventoryItemsType {
	if o == nil || IsNil(o.InventoryItems) {
		var ret ResInventoryItemsType
		return ret
	}
	return *o.InventoryItems
}

// GetInventoryItemsOk returns a tuple with the InventoryItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackagesReservationPackages) GetInventoryItemsOk() (*ResInventoryItemsType, bool) {
	if o == nil || IsNil(o.InventoryItems) {
		return nil, false
	}
	return o.InventoryItems, true
}

// HasInventoryItems returns a boolean if a field has been set.
func (o *PackagesReservationPackages) HasInventoryItems() bool {
	if o != nil && !IsNil(o.InventoryItems) {
		return true
	}

	return false
}

// SetInventoryItems gets a reference to the given ResInventoryItemsType and assigns it to the InventoryItems field.
func (o *PackagesReservationPackages) SetInventoryItems(v ResInventoryItemsType) {
	o.InventoryItems = &v
}

// GetReservationPackage returns the ReservationPackage field value if set, zero value otherwise.
func (o *PackagesReservationPackages) GetReservationPackage() []ReservationPackageType {
	if o == nil || IsNil(o.ReservationPackage) {
		var ret []ReservationPackageType
		return ret
	}
	return o.ReservationPackage
}

// GetReservationPackageOk returns a tuple with the ReservationPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackagesReservationPackages) GetReservationPackageOk() ([]ReservationPackageType, bool) {
	if o == nil || IsNil(o.ReservationPackage) {
		return nil, false
	}
	return o.ReservationPackage, true
}

// HasReservationPackage returns a boolean if a field has been set.
func (o *PackagesReservationPackages) HasReservationPackage() bool {
	if o != nil && !IsNil(o.ReservationPackage) {
		return true
	}

	return false
}

// SetReservationPackage gets a reference to the given []ReservationPackageType and assigns it to the ReservationPackage field.
func (o *PackagesReservationPackages) SetReservationPackage(v []ReservationPackageType) {
	o.ReservationPackage = v
}

func (o PackagesReservationPackages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackagesReservationPackages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InventoryItems) {
		toSerialize["inventoryItems"] = o.InventoryItems
	}
	if !IsNil(o.ReservationPackage) {
		toSerialize["reservationPackage"] = o.ReservationPackage
	}
	return toSerialize, nil
}

type NullablePackagesReservationPackages struct {
	value *PackagesReservationPackages
	isSet bool
}

func (v NullablePackagesReservationPackages) Get() *PackagesReservationPackages {
	return v.value
}

func (v *NullablePackagesReservationPackages) Set(val *PackagesReservationPackages) {
	v.value = val
	v.isSet = true
}

func (v NullablePackagesReservationPackages) IsSet() bool {
	return v.isSet
}

func (v *NullablePackagesReservationPackages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackagesReservationPackages(val *PackagesReservationPackages) *NullablePackagesReservationPackages {
	return &NullablePackagesReservationPackages{value: val, isSet: true}
}

func (v NullablePackagesReservationPackages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackagesReservationPackages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


