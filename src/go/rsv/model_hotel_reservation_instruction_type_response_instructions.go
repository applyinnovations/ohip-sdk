/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the HotelReservationInstructionTypeResponseInstructions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelReservationInstructionTypeResponseInstructions{}

// HotelReservationInstructionTypeResponseInstructions Collection of instructions to be returned as a set of reservation information.
type HotelReservationInstructionTypeResponseInstructions struct {
	// If this value is set to TRUE, then the operation will only return for a Success or Failed flag.
	ConfirmationOnly *bool `json:"confirmationOnly,omitempty"`
	ResponseInstruction []ReservationInstructionType `json:"responseInstruction,omitempty"`
}

// NewHotelReservationInstructionTypeResponseInstructions instantiates a new HotelReservationInstructionTypeResponseInstructions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelReservationInstructionTypeResponseInstructions() *HotelReservationInstructionTypeResponseInstructions {
	this := HotelReservationInstructionTypeResponseInstructions{}
	return &this
}

// NewHotelReservationInstructionTypeResponseInstructionsWithDefaults instantiates a new HotelReservationInstructionTypeResponseInstructions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelReservationInstructionTypeResponseInstructionsWithDefaults() *HotelReservationInstructionTypeResponseInstructions {
	this := HotelReservationInstructionTypeResponseInstructions{}
	return &this
}

// GetConfirmationOnly returns the ConfirmationOnly field value if set, zero value otherwise.
func (o *HotelReservationInstructionTypeResponseInstructions) GetConfirmationOnly() bool {
	if o == nil || IsNil(o.ConfirmationOnly) {
		var ret bool
		return ret
	}
	return *o.ConfirmationOnly
}

// GetConfirmationOnlyOk returns a tuple with the ConfirmationOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationInstructionTypeResponseInstructions) GetConfirmationOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfirmationOnly) {
		return nil, false
	}
	return o.ConfirmationOnly, true
}

// HasConfirmationOnly returns a boolean if a field has been set.
func (o *HotelReservationInstructionTypeResponseInstructions) HasConfirmationOnly() bool {
	if o != nil && !IsNil(o.ConfirmationOnly) {
		return true
	}

	return false
}

// SetConfirmationOnly gets a reference to the given bool and assigns it to the ConfirmationOnly field.
func (o *HotelReservationInstructionTypeResponseInstructions) SetConfirmationOnly(v bool) {
	o.ConfirmationOnly = &v
}

// GetResponseInstruction returns the ResponseInstruction field value if set, zero value otherwise.
func (o *HotelReservationInstructionTypeResponseInstructions) GetResponseInstruction() []ReservationInstructionType {
	if o == nil || IsNil(o.ResponseInstruction) {
		var ret []ReservationInstructionType
		return ret
	}
	return o.ResponseInstruction
}

// GetResponseInstructionOk returns a tuple with the ResponseInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationInstructionTypeResponseInstructions) GetResponseInstructionOk() ([]ReservationInstructionType, bool) {
	if o == nil || IsNil(o.ResponseInstruction) {
		return nil, false
	}
	return o.ResponseInstruction, true
}

// HasResponseInstruction returns a boolean if a field has been set.
func (o *HotelReservationInstructionTypeResponseInstructions) HasResponseInstruction() bool {
	if o != nil && !IsNil(o.ResponseInstruction) {
		return true
	}

	return false
}

// SetResponseInstruction gets a reference to the given []ReservationInstructionType and assigns it to the ResponseInstruction field.
func (o *HotelReservationInstructionTypeResponseInstructions) SetResponseInstruction(v []ReservationInstructionType) {
	o.ResponseInstruction = v
}

func (o HotelReservationInstructionTypeResponseInstructions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelReservationInstructionTypeResponseInstructions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfirmationOnly) {
		toSerialize["confirmationOnly"] = o.ConfirmationOnly
	}
	if !IsNil(o.ResponseInstruction) {
		toSerialize["responseInstruction"] = o.ResponseInstruction
	}
	return toSerialize, nil
}

type NullableHotelReservationInstructionTypeResponseInstructions struct {
	value *HotelReservationInstructionTypeResponseInstructions
	isSet bool
}

func (v NullableHotelReservationInstructionTypeResponseInstructions) Get() *HotelReservationInstructionTypeResponseInstructions {
	return v.value
}

func (v *NullableHotelReservationInstructionTypeResponseInstructions) Set(val *HotelReservationInstructionTypeResponseInstructions) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelReservationInstructionTypeResponseInstructions) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelReservationInstructionTypeResponseInstructions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelReservationInstructionTypeResponseInstructions(val *HotelReservationInstructionTypeResponseInstructions) *NullableHotelReservationInstructionTypeResponseInstructions {
	return &NullableHotelReservationInstructionTypeResponseInstructions{value: val, isSet: true}
}

func (v NullableHotelReservationInstructionTypeResponseInstructions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelReservationInstructionTypeResponseInstructions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


