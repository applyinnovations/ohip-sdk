/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CombineShareInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombineShareInstructionType{}

// CombineShareInstructionType Instructions for overriding checks during combine share operation.
type CombineShareInstructionType struct {
	DistributionType *ShareDistributionInstructionType `json:"distributionType,omitempty"`
	EffectiveRates *EffectiveRatesType `json:"effectiveRates,omitempty"`
	OverrideInstruction *OverrideInstructionType `json:"overrideInstruction,omitempty"`
	// Indicate to override the room inventory check if applicable.
	OverrideInventoryCheck *bool `json:"overrideInventoryCheck,omitempty"`
	// Indicate to override the check on maximum room occupancy if applicable.
	OverrideMaxOccupancyCheck *bool `json:"overrideMaxOccupancyCheck,omitempty"`
	RateChangeInstruction *RateChangeInstructionType `json:"rateChangeInstruction,omitempty"`
	// If the joining sharer is checked in, do a room move to the main sharer's room.
	RoomMoveCheckedinResv *bool `json:"roomMoveCheckedinResv,omitempty"`
}

// NewCombineShareInstructionType instantiates a new CombineShareInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombineShareInstructionType() *CombineShareInstructionType {
	this := CombineShareInstructionType{}
	return &this
}

// NewCombineShareInstructionTypeWithDefaults instantiates a new CombineShareInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombineShareInstructionTypeWithDefaults() *CombineShareInstructionType {
	this := CombineShareInstructionType{}
	return &this
}

// GetDistributionType returns the DistributionType field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetDistributionType() ShareDistributionInstructionType {
	if o == nil || IsNil(o.DistributionType) {
		var ret ShareDistributionInstructionType
		return ret
	}
	return *o.DistributionType
}

// GetDistributionTypeOk returns a tuple with the DistributionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetDistributionTypeOk() (*ShareDistributionInstructionType, bool) {
	if o == nil || IsNil(o.DistributionType) {
		return nil, false
	}
	return o.DistributionType, true
}

// HasDistributionType returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasDistributionType() bool {
	if o != nil && !IsNil(o.DistributionType) {
		return true
	}

	return false
}

// SetDistributionType gets a reference to the given ShareDistributionInstructionType and assigns it to the DistributionType field.
func (o *CombineShareInstructionType) SetDistributionType(v ShareDistributionInstructionType) {
	o.DistributionType = &v
}

// GetEffectiveRates returns the EffectiveRates field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetEffectiveRates() EffectiveRatesType {
	if o == nil || IsNil(o.EffectiveRates) {
		var ret EffectiveRatesType
		return ret
	}
	return *o.EffectiveRates
}

// GetEffectiveRatesOk returns a tuple with the EffectiveRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetEffectiveRatesOk() (*EffectiveRatesType, bool) {
	if o == nil || IsNil(o.EffectiveRates) {
		return nil, false
	}
	return o.EffectiveRates, true
}

// HasEffectiveRates returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasEffectiveRates() bool {
	if o != nil && !IsNil(o.EffectiveRates) {
		return true
	}

	return false
}

// SetEffectiveRates gets a reference to the given EffectiveRatesType and assigns it to the EffectiveRates field.
func (o *CombineShareInstructionType) SetEffectiveRates(v EffectiveRatesType) {
	o.EffectiveRates = &v
}

// GetOverrideInstruction returns the OverrideInstruction field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetOverrideInstruction() OverrideInstructionType {
	if o == nil || IsNil(o.OverrideInstruction) {
		var ret OverrideInstructionType
		return ret
	}
	return *o.OverrideInstruction
}

// GetOverrideInstructionOk returns a tuple with the OverrideInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetOverrideInstructionOk() (*OverrideInstructionType, bool) {
	if o == nil || IsNil(o.OverrideInstruction) {
		return nil, false
	}
	return o.OverrideInstruction, true
}

// HasOverrideInstruction returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasOverrideInstruction() bool {
	if o != nil && !IsNil(o.OverrideInstruction) {
		return true
	}

	return false
}

// SetOverrideInstruction gets a reference to the given OverrideInstructionType and assigns it to the OverrideInstruction field.
func (o *CombineShareInstructionType) SetOverrideInstruction(v OverrideInstructionType) {
	o.OverrideInstruction = &v
}

// GetOverrideInventoryCheck returns the OverrideInventoryCheck field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetOverrideInventoryCheck() bool {
	if o == nil || IsNil(o.OverrideInventoryCheck) {
		var ret bool
		return ret
	}
	return *o.OverrideInventoryCheck
}

// GetOverrideInventoryCheckOk returns a tuple with the OverrideInventoryCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetOverrideInventoryCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideInventoryCheck) {
		return nil, false
	}
	return o.OverrideInventoryCheck, true
}

// HasOverrideInventoryCheck returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasOverrideInventoryCheck() bool {
	if o != nil && !IsNil(o.OverrideInventoryCheck) {
		return true
	}

	return false
}

// SetOverrideInventoryCheck gets a reference to the given bool and assigns it to the OverrideInventoryCheck field.
func (o *CombineShareInstructionType) SetOverrideInventoryCheck(v bool) {
	o.OverrideInventoryCheck = &v
}

// GetOverrideMaxOccupancyCheck returns the OverrideMaxOccupancyCheck field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetOverrideMaxOccupancyCheck() bool {
	if o == nil || IsNil(o.OverrideMaxOccupancyCheck) {
		var ret bool
		return ret
	}
	return *o.OverrideMaxOccupancyCheck
}

// GetOverrideMaxOccupancyCheckOk returns a tuple with the OverrideMaxOccupancyCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetOverrideMaxOccupancyCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideMaxOccupancyCheck) {
		return nil, false
	}
	return o.OverrideMaxOccupancyCheck, true
}

// HasOverrideMaxOccupancyCheck returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasOverrideMaxOccupancyCheck() bool {
	if o != nil && !IsNil(o.OverrideMaxOccupancyCheck) {
		return true
	}

	return false
}

// SetOverrideMaxOccupancyCheck gets a reference to the given bool and assigns it to the OverrideMaxOccupancyCheck field.
func (o *CombineShareInstructionType) SetOverrideMaxOccupancyCheck(v bool) {
	o.OverrideMaxOccupancyCheck = &v
}

// GetRateChangeInstruction returns the RateChangeInstruction field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetRateChangeInstruction() RateChangeInstructionType {
	if o == nil || IsNil(o.RateChangeInstruction) {
		var ret RateChangeInstructionType
		return ret
	}
	return *o.RateChangeInstruction
}

// GetRateChangeInstructionOk returns a tuple with the RateChangeInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetRateChangeInstructionOk() (*RateChangeInstructionType, bool) {
	if o == nil || IsNil(o.RateChangeInstruction) {
		return nil, false
	}
	return o.RateChangeInstruction, true
}

// HasRateChangeInstruction returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasRateChangeInstruction() bool {
	if o != nil && !IsNil(o.RateChangeInstruction) {
		return true
	}

	return false
}

// SetRateChangeInstruction gets a reference to the given RateChangeInstructionType and assigns it to the RateChangeInstruction field.
func (o *CombineShareInstructionType) SetRateChangeInstruction(v RateChangeInstructionType) {
	o.RateChangeInstruction = &v
}

// GetRoomMoveCheckedinResv returns the RoomMoveCheckedinResv field value if set, zero value otherwise.
func (o *CombineShareInstructionType) GetRoomMoveCheckedinResv() bool {
	if o == nil || IsNil(o.RoomMoveCheckedinResv) {
		var ret bool
		return ret
	}
	return *o.RoomMoveCheckedinResv
}

// GetRoomMoveCheckedinResvOk returns a tuple with the RoomMoveCheckedinResv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareInstructionType) GetRoomMoveCheckedinResvOk() (*bool, bool) {
	if o == nil || IsNil(o.RoomMoveCheckedinResv) {
		return nil, false
	}
	return o.RoomMoveCheckedinResv, true
}

// HasRoomMoveCheckedinResv returns a boolean if a field has been set.
func (o *CombineShareInstructionType) HasRoomMoveCheckedinResv() bool {
	if o != nil && !IsNil(o.RoomMoveCheckedinResv) {
		return true
	}

	return false
}

// SetRoomMoveCheckedinResv gets a reference to the given bool and assigns it to the RoomMoveCheckedinResv field.
func (o *CombineShareInstructionType) SetRoomMoveCheckedinResv(v bool) {
	o.RoomMoveCheckedinResv = &v
}

func (o CombineShareInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombineShareInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DistributionType) {
		toSerialize["distributionType"] = o.DistributionType
	}
	if !IsNil(o.EffectiveRates) {
		toSerialize["effectiveRates"] = o.EffectiveRates
	}
	if !IsNil(o.OverrideInstruction) {
		toSerialize["overrideInstruction"] = o.OverrideInstruction
	}
	if !IsNil(o.OverrideInventoryCheck) {
		toSerialize["overrideInventoryCheck"] = o.OverrideInventoryCheck
	}
	if !IsNil(o.OverrideMaxOccupancyCheck) {
		toSerialize["overrideMaxOccupancyCheck"] = o.OverrideMaxOccupancyCheck
	}
	if !IsNil(o.RateChangeInstruction) {
		toSerialize["rateChangeInstruction"] = o.RateChangeInstruction
	}
	if !IsNil(o.RoomMoveCheckedinResv) {
		toSerialize["roomMoveCheckedinResv"] = o.RoomMoveCheckedinResv
	}
	return toSerialize, nil
}

type NullableCombineShareInstructionType struct {
	value *CombineShareInstructionType
	isSet bool
}

func (v NullableCombineShareInstructionType) Get() *CombineShareInstructionType {
	return v.value
}

func (v *NullableCombineShareInstructionType) Set(val *CombineShareInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCombineShareInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCombineShareInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombineShareInstructionType(val *CombineShareInstructionType) *NullableCombineShareInstructionType {
	return &NullableCombineShareInstructionType{value: val, isSet: true}
}

func (v NullableCombineShareInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombineShareInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


