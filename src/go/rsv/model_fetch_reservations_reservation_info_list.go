/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the FetchReservationsReservationInfoList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchReservationsReservationInfoList{}

// FetchReservationsReservationInfoList List of reservations which can be shared.
type FetchReservationsReservationInfoList struct {
	// Information of the reservation which can be shared.
	ReservationInfo []ReservationInfoType `json:"reservationInfo,omitempty"`
}

// NewFetchReservationsReservationInfoList instantiates a new FetchReservationsReservationInfoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchReservationsReservationInfoList() *FetchReservationsReservationInfoList {
	this := FetchReservationsReservationInfoList{}
	return &this
}

// NewFetchReservationsReservationInfoListWithDefaults instantiates a new FetchReservationsReservationInfoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchReservationsReservationInfoListWithDefaults() *FetchReservationsReservationInfoList {
	this := FetchReservationsReservationInfoList{}
	return &this
}

// GetReservationInfo returns the ReservationInfo field value if set, zero value otherwise.
func (o *FetchReservationsReservationInfoList) GetReservationInfo() []ReservationInfoType {
	if o == nil || IsNil(o.ReservationInfo) {
		var ret []ReservationInfoType
		return ret
	}
	return o.ReservationInfo
}

// GetReservationInfoOk returns a tuple with the ReservationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchReservationsReservationInfoList) GetReservationInfoOk() ([]ReservationInfoType, bool) {
	if o == nil || IsNil(o.ReservationInfo) {
		return nil, false
	}
	return o.ReservationInfo, true
}

// HasReservationInfo returns a boolean if a field has been set.
func (o *FetchReservationsReservationInfoList) HasReservationInfo() bool {
	if o != nil && !IsNil(o.ReservationInfo) {
		return true
	}

	return false
}

// SetReservationInfo gets a reference to the given []ReservationInfoType and assigns it to the ReservationInfo field.
func (o *FetchReservationsReservationInfoList) SetReservationInfo(v []ReservationInfoType) {
	o.ReservationInfo = v
}

func (o FetchReservationsReservationInfoList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchReservationsReservationInfoList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationInfo) {
		toSerialize["reservationInfo"] = o.ReservationInfo
	}
	return toSerialize, nil
}

type NullableFetchReservationsReservationInfoList struct {
	value *FetchReservationsReservationInfoList
	isSet bool
}

func (v NullableFetchReservationsReservationInfoList) Get() *FetchReservationsReservationInfoList {
	return v.value
}

func (v *NullableFetchReservationsReservationInfoList) Set(val *FetchReservationsReservationInfoList) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchReservationsReservationInfoList) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchReservationsReservationInfoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchReservationsReservationInfoList(val *FetchReservationsReservationInfoList) *NullableFetchReservationsReservationInfoList {
	return &NullableFetchReservationsReservationInfoList{value: val, isSet: true}
}

func (v NullableFetchReservationsReservationInfoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchReservationsReservationInfoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


