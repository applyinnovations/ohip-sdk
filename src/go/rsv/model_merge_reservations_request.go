/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the MergeReservationsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeReservationsRequest{}

// MergeReservationsRequest struct for MergeReservationsRequest
type MergeReservationsRequest struct {
	FromReservationID *UniqueIDType `json:"fromReservationID,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	Links *Links `json:"links,omitempty"`
	ToReservationIDList *UniqueIDListType `json:"toReservationIDList,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewMergeReservationsRequest instantiates a new MergeReservationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeReservationsRequest() *MergeReservationsRequest {
	this := MergeReservationsRequest{}
	return &this
}

// NewMergeReservationsRequestWithDefaults instantiates a new MergeReservationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeReservationsRequestWithDefaults() *MergeReservationsRequest {
	this := MergeReservationsRequest{}
	return &this
}

// GetFromReservationID returns the FromReservationID field value if set, zero value otherwise.
func (o *MergeReservationsRequest) GetFromReservationID() UniqueIDType {
	if o == nil || IsNil(o.FromReservationID) {
		var ret UniqueIDType
		return ret
	}
	return *o.FromReservationID
}

// GetFromReservationIDOk returns a tuple with the FromReservationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReservationsRequest) GetFromReservationIDOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.FromReservationID) {
		return nil, false
	}
	return o.FromReservationID, true
}

// HasFromReservationID returns a boolean if a field has been set.
func (o *MergeReservationsRequest) HasFromReservationID() bool {
	if o != nil && !IsNil(o.FromReservationID) {
		return true
	}

	return false
}

// SetFromReservationID gets a reference to the given UniqueIDType and assigns it to the FromReservationID field.
func (o *MergeReservationsRequest) SetFromReservationID(v UniqueIDType) {
	o.FromReservationID = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MergeReservationsRequest) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReservationsRequest) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MergeReservationsRequest) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MergeReservationsRequest) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MergeReservationsRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReservationsRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MergeReservationsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *MergeReservationsRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetToReservationIDList returns the ToReservationIDList field value if set, zero value otherwise.
func (o *MergeReservationsRequest) GetToReservationIDList() UniqueIDListType {
	if o == nil || IsNil(o.ToReservationIDList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.ToReservationIDList
}

// GetToReservationIDListOk returns a tuple with the ToReservationIDList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReservationsRequest) GetToReservationIDListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.ToReservationIDList) {
		return nil, false
	}
	return o.ToReservationIDList, true
}

// HasToReservationIDList returns a boolean if a field has been set.
func (o *MergeReservationsRequest) HasToReservationIDList() bool {
	if o != nil && !IsNil(o.ToReservationIDList) {
		return true
	}

	return false
}

// SetToReservationIDList gets a reference to the given UniqueIDListType and assigns it to the ToReservationIDList field.
func (o *MergeReservationsRequest) SetToReservationIDList(v UniqueIDListType) {
	o.ToReservationIDList = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *MergeReservationsRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReservationsRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *MergeReservationsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *MergeReservationsRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o MergeReservationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeReservationsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromReservationID) {
		toSerialize["fromReservationID"] = o.FromReservationID
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ToReservationIDList) {
		toSerialize["toReservationIDList"] = o.ToReservationIDList
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableMergeReservationsRequest struct {
	value *MergeReservationsRequest
	isSet bool
}

func (v NullableMergeReservationsRequest) Get() *MergeReservationsRequest {
	return v.value
}

func (v *NullableMergeReservationsRequest) Set(val *MergeReservationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeReservationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeReservationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeReservationsRequest(val *MergeReservationsRequest) *NullableMergeReservationsRequest {
	return &NullableMergeReservationsRequest{value: val, isSet: true}
}

func (v NullableMergeReservationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeReservationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


