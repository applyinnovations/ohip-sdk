/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ChangePolicyScheduleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePolicyScheduleRequest{}

// ChangePolicyScheduleRequest struct for ChangePolicyScheduleRequest
type ChangePolicyScheduleRequest struct {
	Links *Links `json:"links,omitempty"`
	PolicySchedule *PolicyScheduleType `json:"policySchedule,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewChangePolicyScheduleRequest instantiates a new ChangePolicyScheduleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePolicyScheduleRequest() *ChangePolicyScheduleRequest {
	this := ChangePolicyScheduleRequest{}
	return &this
}

// NewChangePolicyScheduleRequestWithDefaults instantiates a new ChangePolicyScheduleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePolicyScheduleRequestWithDefaults() *ChangePolicyScheduleRequest {
	this := ChangePolicyScheduleRequest{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChangePolicyScheduleRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePolicyScheduleRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChangePolicyScheduleRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ChangePolicyScheduleRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetPolicySchedule returns the PolicySchedule field value if set, zero value otherwise.
func (o *ChangePolicyScheduleRequest) GetPolicySchedule() PolicyScheduleType {
	if o == nil || IsNil(o.PolicySchedule) {
		var ret PolicyScheduleType
		return ret
	}
	return *o.PolicySchedule
}

// GetPolicyScheduleOk returns a tuple with the PolicySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePolicyScheduleRequest) GetPolicyScheduleOk() (*PolicyScheduleType, bool) {
	if o == nil || IsNil(o.PolicySchedule) {
		return nil, false
	}
	return o.PolicySchedule, true
}

// HasPolicySchedule returns a boolean if a field has been set.
func (o *ChangePolicyScheduleRequest) HasPolicySchedule() bool {
	if o != nil && !IsNil(o.PolicySchedule) {
		return true
	}

	return false
}

// SetPolicySchedule gets a reference to the given PolicyScheduleType and assigns it to the PolicySchedule field.
func (o *ChangePolicyScheduleRequest) SetPolicySchedule(v PolicyScheduleType) {
	o.PolicySchedule = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChangePolicyScheduleRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePolicyScheduleRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChangePolicyScheduleRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ChangePolicyScheduleRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ChangePolicyScheduleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePolicyScheduleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.PolicySchedule) {
		toSerialize["policySchedule"] = o.PolicySchedule
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChangePolicyScheduleRequest struct {
	value *ChangePolicyScheduleRequest
	isSet bool
}

func (v NullableChangePolicyScheduleRequest) Get() *ChangePolicyScheduleRequest {
	return v.value
}

func (v *NullableChangePolicyScheduleRequest) Set(val *ChangePolicyScheduleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePolicyScheduleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePolicyScheduleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePolicyScheduleRequest(val *ChangePolicyScheduleRequest) *NullableChangePolicyScheduleRequest {
	return &NullableChangePolicyScheduleRequest{value: val, isSet: true}
}

func (v NullableChangePolicyScheduleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePolicyScheduleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


