/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the CopySchedulesCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopySchedulesCriteriaType{}

// CopySchedulesCriteriaType The Criteria for Schedules to be copied.
type CopySchedulesCriteriaType struct {
	CopySchedules *CopySchedulesType `json:"copySchedules,omitempty"`
}

// NewCopySchedulesCriteriaType instantiates a new CopySchedulesCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopySchedulesCriteriaType() *CopySchedulesCriteriaType {
	this := CopySchedulesCriteriaType{}
	return &this
}

// NewCopySchedulesCriteriaTypeWithDefaults instantiates a new CopySchedulesCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopySchedulesCriteriaTypeWithDefaults() *CopySchedulesCriteriaType {
	this := CopySchedulesCriteriaType{}
	return &this
}

// GetCopySchedules returns the CopySchedules field value if set, zero value otherwise.
func (o *CopySchedulesCriteriaType) GetCopySchedules() CopySchedulesType {
	if o == nil || IsNil(o.CopySchedules) {
		var ret CopySchedulesType
		return ret
	}
	return *o.CopySchedules
}

// GetCopySchedulesOk returns a tuple with the CopySchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySchedulesCriteriaType) GetCopySchedulesOk() (*CopySchedulesType, bool) {
	if o == nil || IsNil(o.CopySchedules) {
		return nil, false
	}
	return o.CopySchedules, true
}

// HasCopySchedules returns a boolean if a field has been set.
func (o *CopySchedulesCriteriaType) HasCopySchedules() bool {
	if o != nil && !IsNil(o.CopySchedules) {
		return true
	}

	return false
}

// SetCopySchedules gets a reference to the given CopySchedulesType and assigns it to the CopySchedules field.
func (o *CopySchedulesCriteriaType) SetCopySchedules(v CopySchedulesType) {
	o.CopySchedules = &v
}

func (o CopySchedulesCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopySchedulesCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CopySchedules) {
		toSerialize["copySchedules"] = o.CopySchedules
	}
	return toSerialize, nil
}

type NullableCopySchedulesCriteriaType struct {
	value *CopySchedulesCriteriaType
	isSet bool
}

func (v NullableCopySchedulesCriteriaType) Get() *CopySchedulesCriteriaType {
	return v.value
}

func (v *NullableCopySchedulesCriteriaType) Set(val *CopySchedulesCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopySchedulesCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopySchedulesCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopySchedulesCriteriaType(val *CopySchedulesCriteriaType) *NullableCopySchedulesCriteriaType {
	return &NullableCopySchedulesCriteriaType{value: val, isSet: true}
}

func (v NullableCopySchedulesCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopySchedulesCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


