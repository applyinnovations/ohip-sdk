/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ConditionGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionGroupType{}

// ConditionGroupType struct for ConditionGroupType
type ConditionGroupType struct {
	Condition []ConditionType `json:"condition,omitempty"`
	ConditionGroup []ConditionGroupType `json:"conditionGroup,omitempty"`
	LogicalOperator *LogicalOperatorType `json:"logicalOperator,omitempty"`
}

// NewConditionGroupType instantiates a new ConditionGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionGroupType() *ConditionGroupType {
	this := ConditionGroupType{}
	return &this
}

// NewConditionGroupTypeWithDefaults instantiates a new ConditionGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionGroupTypeWithDefaults() *ConditionGroupType {
	this := ConditionGroupType{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionGroupType) GetCondition() []ConditionType {
	if o == nil || IsNil(o.Condition) {
		var ret []ConditionType
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionGroupType) GetConditionOk() ([]ConditionType, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionGroupType) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []ConditionType and assigns it to the Condition field.
func (o *ConditionGroupType) SetCondition(v []ConditionType) {
	o.Condition = v
}

// GetConditionGroup returns the ConditionGroup field value if set, zero value otherwise.
func (o *ConditionGroupType) GetConditionGroup() []ConditionGroupType {
	if o == nil || IsNil(o.ConditionGroup) {
		var ret []ConditionGroupType
		return ret
	}
	return o.ConditionGroup
}

// GetConditionGroupOk returns a tuple with the ConditionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionGroupType) GetConditionGroupOk() ([]ConditionGroupType, bool) {
	if o == nil || IsNil(o.ConditionGroup) {
		return nil, false
	}
	return o.ConditionGroup, true
}

// HasConditionGroup returns a boolean if a field has been set.
func (o *ConditionGroupType) HasConditionGroup() bool {
	if o != nil && !IsNil(o.ConditionGroup) {
		return true
	}

	return false
}

// SetConditionGroup gets a reference to the given []ConditionGroupType and assigns it to the ConditionGroup field.
func (o *ConditionGroupType) SetConditionGroup(v []ConditionGroupType) {
	o.ConditionGroup = v
}

// GetLogicalOperator returns the LogicalOperator field value if set, zero value otherwise.
func (o *ConditionGroupType) GetLogicalOperator() LogicalOperatorType {
	if o == nil || IsNil(o.LogicalOperator) {
		var ret LogicalOperatorType
		return ret
	}
	return *o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionGroupType) GetLogicalOperatorOk() (*LogicalOperatorType, bool) {
	if o == nil || IsNil(o.LogicalOperator) {
		return nil, false
	}
	return o.LogicalOperator, true
}

// HasLogicalOperator returns a boolean if a field has been set.
func (o *ConditionGroupType) HasLogicalOperator() bool {
	if o != nil && !IsNil(o.LogicalOperator) {
		return true
	}

	return false
}

// SetLogicalOperator gets a reference to the given LogicalOperatorType and assigns it to the LogicalOperator field.
func (o *ConditionGroupType) SetLogicalOperator(v LogicalOperatorType) {
	o.LogicalOperator = &v
}

func (o ConditionGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ConditionGroup) {
		toSerialize["conditionGroup"] = o.ConditionGroup
	}
	if !IsNil(o.LogicalOperator) {
		toSerialize["logicalOperator"] = o.LogicalOperator
	}
	return toSerialize, nil
}

type NullableConditionGroupType struct {
	value *ConditionGroupType
	isSet bool
}

func (v NullableConditionGroupType) Get() *ConditionGroupType {
	return v.value
}

func (v *NullableConditionGroupType) Set(val *ConditionGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionGroupType(val *ConditionGroupType) *NullableConditionGroupType {
	return &NullableConditionGroupType{value: val, isSet: true}
}

func (v NullableConditionGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


