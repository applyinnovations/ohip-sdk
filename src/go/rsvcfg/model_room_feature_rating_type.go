/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
	"fmt"
)

// RoomFeatureRatingType Possible Room Feature rating values.
type RoomFeatureRatingType string

// List of roomFeatureRatingType
const (
	ROOMFEATURERATINGTYPE_MOST_IMPORTANT RoomFeatureRatingType = "MostImportant"
	ROOMFEATURERATINGTYPE_IMPORTANT RoomFeatureRatingType = "Important"
	ROOMFEATURERATINGTYPE_SOMEWHAT_IMPORTANT RoomFeatureRatingType = "SomewhatImportant"
	ROOMFEATURERATINGTYPE_LESS_IMPORTANT RoomFeatureRatingType = "LessImportant"
	ROOMFEATURERATINGTYPE_LEAST_IMPORTANT RoomFeatureRatingType = "LeastImportant"
	ROOMFEATURERATINGTYPE_NO_VALUE_SET RoomFeatureRatingType = "NoValueSet"
)

// All allowed values of RoomFeatureRatingType enum
var AllowedRoomFeatureRatingTypeEnumValues = []RoomFeatureRatingType{
	"MostImportant",
	"Important",
	"SomewhatImportant",
	"LessImportant",
	"LeastImportant",
	"NoValueSet",
}

func (v *RoomFeatureRatingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomFeatureRatingType(value)
	for _, existing := range AllowedRoomFeatureRatingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomFeatureRatingType", value)
}

// NewRoomFeatureRatingTypeFromValue returns a pointer to a valid RoomFeatureRatingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomFeatureRatingTypeFromValue(v string) (*RoomFeatureRatingType, error) {
	ev := RoomFeatureRatingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomFeatureRatingType: valid values are %v", v, AllowedRoomFeatureRatingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomFeatureRatingType) IsValid() bool {
	for _, existing := range AllowedRoomFeatureRatingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomFeatureRatingType value
func (v RoomFeatureRatingType) Ptr() *RoomFeatureRatingType {
	return &v
}

type NullableRoomFeatureRatingType struct {
	value *RoomFeatureRatingType
	isSet bool
}

func (v NullableRoomFeatureRatingType) Get() *RoomFeatureRatingType {
	return v.value
}

func (v *NullableRoomFeatureRatingType) Set(val *RoomFeatureRatingType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomFeatureRatingType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomFeatureRatingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomFeatureRatingType(val *RoomFeatureRatingType) *NullableRoomFeatureRatingType {
	return &NullableRoomFeatureRatingType{value: val, isSet: true}
}

func (v NullableRoomFeatureRatingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomFeatureRatingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

