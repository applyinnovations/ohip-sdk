/*
OPERA Cloud Reservation Master Data Management API

Testing HotelConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rsvcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rsvcfg"
)

func Test_rsvcfg_HotelConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigApiService ChangeCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeCancellationPolicy(context.Background(), cancelpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeDepositPolicy(context.Background(), depositpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeGuaranteeCode(context.Background(), guaranteeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeGuaranteeCodeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeGuaranteeCodeSchedule(context.Background(), policyScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketcode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeMarketCode(context.Background(), marketcode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeMarketGroup(context.Background(), marketGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangePolicySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyscheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangePolicySchedule(context.Background(), policyscheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangePreCheckInRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangePreCheckInRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeServiceRequestCodePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeServiceRequestCodePriorities(context.Background(), serviceRequestCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeServiceRequestCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeServiceRequestCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeSourceCode(context.Background(), sourceCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeSourceGroup(context.Background(), sourceGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateCancellationPolicy(context.Background(), cancelpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateDepositPolicy(context.Background(), depositpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateGuaranteeCode(context.Background(), guaranteeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketcode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateMarketCode(context.Background(), marketcode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateMarketGroup(context.Background(), marketGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateSourceCode(context.Background(), sourceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateSourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyGuaranteeCodeSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyGuaranteeCodeSchedules(context.Background(), policyScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyPolicySchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyscheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyPolicySchedules(context.Background(), policyscheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyServiceRequestCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyServiceRequestCodes(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteCancellationPolicy(context.Background(), cancelpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteDepositPolicy(context.Background(), depositpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteGuaranteeCode(context.Background(), guaranteeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteGuaranteeCodeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteGuaranteeCodeSchedule(context.Background(), policyScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeletePolicySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyscheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeletePolicySchedule(context.Background(), policyscheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteTemplateCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteTemplateCancellationPolicy(context.Background(), cancelpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteTemplateDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteTemplateDepositPolicy(context.Background(), depositpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteTemplateGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteTemplateGuaranteeCode(context.Background(), guaranteeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetCancellationPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetDepositPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetGuaranteeCodeSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetGuaranteeCodeSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetGuaranteeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetGuaranteeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetMarketCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetMarketCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetPolicySchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetPolicySchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetPreCheckInRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetPreCheckInRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetServiceRequestCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetServiceRequestCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetServiceRequestCodePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetServiceRequestCodePriorities(context.Background(), serviceRequestCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetServiceRequestCodePriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetServiceRequestCodePriority(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetServiceRequestCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetServiceRequestCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetSourceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetSourceCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetSourceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetSourceGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateCancellationPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateDepositPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateGuaranteeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateGuaranteeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateMarketCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateMarketCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateSourceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateSourceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateSourceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateSourceGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.PostCancellationPolicy(context.Background(), cancelpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicycode string

		resp, httpRes, err := apiClient.HotelConfigApi.PostDepositPolicy(context.Background(), depositpolicycode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostGuaranteeCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostGuaranteeCodeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostGuaranteeCodeSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketcode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostMarketCode(context.Background(), marketcode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostMarketGroup(context.Background(), marketGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostNewPolicySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostNewPolicySchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostPolicySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyscheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostPolicySchedule(context.Background(), policyscheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostPreCheckInRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostPreCheckInRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostServiceRequestCodePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostServiceRequestCodePriorities(context.Background(), serviceRequestCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostServiceRequestCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostServiceRequestCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostSourceCode(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostSourceGroup(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateCancellationPolicy(context.Background(), cancelpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var depositpolicytemplate string

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateDepositPolicy(context.Background(), depositpolicytemplate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateGuaranteeCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateGuaranteeCode(context.Background(), guaranteeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateMarketCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateMarketGroup(context.Background(), marketGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateSourceCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateSourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketcode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveMarketCode(context.Background(), marketcode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveMarketGroup(context.Background(), marketGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemovePreCheckInRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemovePreCheckInRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveServiceRequestCodePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveServiceRequestCodePriorities(context.Background(), serviceRequestCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveServiceRequestCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveServiceRequestCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveSourceCode(context.Background(), sourceCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveSourceGroup(context.Background(), sourceGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateMarketCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketcode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateMarketCode(context.Background(), marketcode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateMarketGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketGroupCode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateMarketGroup(context.Background(), marketGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateSourceCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceCode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateSourceCode(context.Background(), sourceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateSourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateSourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
