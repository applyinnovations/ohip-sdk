/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ScriptsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScriptsType{}

// ScriptsType A Script associated to either Chain, CRO or Property and to a Language and/or Membership Type.
type ScriptsType struct {
	Items []ScriptType
}

// NewScriptsType instantiates a new ScriptsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptsType() *ScriptsType {
	this := ScriptsType{}
	return &this
}

// NewScriptsTypeWithDefaults instantiates a new ScriptsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptsTypeWithDefaults() *ScriptsType {
	this := ScriptsType{}
	return &this
}

func (o ScriptsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScriptsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *ScriptsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableScriptsType struct {
	value ScriptsType
	isSet bool
}

func (v NullableScriptsType) Get() ScriptsType {
	return v.value
}

func (v *NullableScriptsType) Set(val ScriptsType) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptsType) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptsType(val ScriptsType) *NullableScriptsType {
	return &NullableScriptsType{value: val, isSet: true}
}

func (v NullableScriptsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


