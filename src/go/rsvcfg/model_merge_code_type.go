/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the MergeCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeCodeType{}

// MergeCodeType A Merge Code.
type MergeCodeType struct {
	// Merge Code.
	Tag *string `json:"tag,omitempty"`
	// Default value of Merge Code.
	Value *string `json:"value,omitempty"`
}

// NewMergeCodeType instantiates a new MergeCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeCodeType() *MergeCodeType {
	this := MergeCodeType{}
	return &this
}

// NewMergeCodeTypeWithDefaults instantiates a new MergeCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeCodeTypeWithDefaults() *MergeCodeType {
	this := MergeCodeType{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *MergeCodeType) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeCodeType) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *MergeCodeType) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *MergeCodeType) SetTag(v string) {
	o.Tag = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MergeCodeType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeCodeType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MergeCodeType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MergeCodeType) SetValue(v string) {
	o.Value = &v
}

func (o MergeCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableMergeCodeType struct {
	value *MergeCodeType
	isSet bool
}

func (v NullableMergeCodeType) Get() *MergeCodeType {
	return v.value
}

func (v *NullableMergeCodeType) Set(val *MergeCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeCodeType(val *MergeCodeType) *NullableMergeCodeType {
	return &NullableMergeCodeType{value: val, isSet: true}
}

func (v NullableMergeCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


