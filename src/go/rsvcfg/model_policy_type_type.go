/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
	"fmt"
)

// PolicyTypeType Simple type for Policy type.
type PolicyTypeType string

// List of policyTypeType
const (
	POLICYTYPETYPE_DEPOSIT PolicyTypeType = "Deposit"
	POLICYTYPETYPE_CANCELLATION PolicyTypeType = "Cancellation"
)

// All allowed values of PolicyTypeType enum
var AllowedPolicyTypeTypeEnumValues = []PolicyTypeType{
	"Deposit",
	"Cancellation",
}

func (v *PolicyTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyTypeType(value)
	for _, existing := range AllowedPolicyTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyTypeType", value)
}

// NewPolicyTypeTypeFromValue returns a pointer to a valid PolicyTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyTypeTypeFromValue(v string) (*PolicyTypeType, error) {
	ev := PolicyTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyTypeType: valid values are %v", v, AllowedPolicyTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyTypeType) IsValid() bool {
	for _, existing := range AllowedPolicyTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to policyTypeType value
func (v PolicyTypeType) Ptr() *PolicyTypeType {
	return &v
}

type NullablePolicyTypeType struct {
	value *PolicyTypeType
	isSet bool
}

func (v NullablePolicyTypeType) Get() *PolicyTypeType {
	return v.value
}

func (v *NullablePolicyTypeType) Set(val *PolicyTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTypeType(val *PolicyTypeType) *NullablePolicyTypeType {
	return &NullablePolicyTypeType{value: val, isSet: true}
}

func (v NullablePolicyTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

