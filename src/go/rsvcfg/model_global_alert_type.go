/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the GlobalAlertType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalAlertType{}

// GlobalAlertType A property level global alert attached with global alert types.
type GlobalAlertType struct {
	AlertCode *string `json:"alertCode,omitempty"`
	AlertId *float32 `json:"alertId,omitempty"`
	Area *string `json:"area,omitempty"`
	Conditions *ConditionGroupType `json:"conditions,omitempty"`
	Description *string `json:"description,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	Notifications *NotificationType `json:"notifications,omitempty"`
	QueryId *float32 `json:"queryId,omitempty"`
	// Indicates the Reservation Stop Check In/Check Out Global Alert.
	StopCheckInCheckOut *bool `json:"stopCheckInCheckOut,omitempty"`
	// Determines the Global Alert is a Welcome Offer Alert or not.
	WelcomeOffer *bool `json:"welcomeOffer,omitempty"`
}

// NewGlobalAlertType instantiates a new GlobalAlertType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalAlertType() *GlobalAlertType {
	this := GlobalAlertType{}
	return &this
}

// NewGlobalAlertTypeWithDefaults instantiates a new GlobalAlertType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalAlertTypeWithDefaults() *GlobalAlertType {
	this := GlobalAlertType{}
	return &this
}

// GetAlertCode returns the AlertCode field value if set, zero value otherwise.
func (o *GlobalAlertType) GetAlertCode() string {
	if o == nil || IsNil(o.AlertCode) {
		var ret string
		return ret
	}
	return *o.AlertCode
}

// GetAlertCodeOk returns a tuple with the AlertCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetAlertCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AlertCode) {
		return nil, false
	}
	return o.AlertCode, true
}

// HasAlertCode returns a boolean if a field has been set.
func (o *GlobalAlertType) HasAlertCode() bool {
	if o != nil && !IsNil(o.AlertCode) {
		return true
	}

	return false
}

// SetAlertCode gets a reference to the given string and assigns it to the AlertCode field.
func (o *GlobalAlertType) SetAlertCode(v string) {
	o.AlertCode = &v
}

// GetAlertId returns the AlertId field value if set, zero value otherwise.
func (o *GlobalAlertType) GetAlertId() float32 {
	if o == nil || IsNil(o.AlertId) {
		var ret float32
		return ret
	}
	return *o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetAlertIdOk() (*float32, bool) {
	if o == nil || IsNil(o.AlertId) {
		return nil, false
	}
	return o.AlertId, true
}

// HasAlertId returns a boolean if a field has been set.
func (o *GlobalAlertType) HasAlertId() bool {
	if o != nil && !IsNil(o.AlertId) {
		return true
	}

	return false
}

// SetAlertId gets a reference to the given float32 and assigns it to the AlertId field.
func (o *GlobalAlertType) SetAlertId(v float32) {
	o.AlertId = &v
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *GlobalAlertType) GetArea() string {
	if o == nil || IsNil(o.Area) {
		var ret string
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetAreaOk() (*string, bool) {
	if o == nil || IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *GlobalAlertType) HasArea() bool {
	if o != nil && !IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given string and assigns it to the Area field.
func (o *GlobalAlertType) SetArea(v string) {
	o.Area = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *GlobalAlertType) GetConditions() ConditionGroupType {
	if o == nil || IsNil(o.Conditions) {
		var ret ConditionGroupType
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetConditionsOk() (*ConditionGroupType, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *GlobalAlertType) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given ConditionGroupType and assigns it to the Conditions field.
func (o *GlobalAlertType) SetConditions(v ConditionGroupType) {
	o.Conditions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalAlertType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalAlertType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalAlertType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *GlobalAlertType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *GlobalAlertType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *GlobalAlertType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *GlobalAlertType) GetNotifications() NotificationType {
	if o == nil || IsNil(o.Notifications) {
		var ret NotificationType
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetNotificationsOk() (*NotificationType, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *GlobalAlertType) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given NotificationType and assigns it to the Notifications field.
func (o *GlobalAlertType) SetNotifications(v NotificationType) {
	o.Notifications = &v
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *GlobalAlertType) GetQueryId() float32 {
	if o == nil || IsNil(o.QueryId) {
		var ret float32
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetQueryIdOk() (*float32, bool) {
	if o == nil || IsNil(o.QueryId) {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *GlobalAlertType) HasQueryId() bool {
	if o != nil && !IsNil(o.QueryId) {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given float32 and assigns it to the QueryId field.
func (o *GlobalAlertType) SetQueryId(v float32) {
	o.QueryId = &v
}

// GetStopCheckInCheckOut returns the StopCheckInCheckOut field value if set, zero value otherwise.
func (o *GlobalAlertType) GetStopCheckInCheckOut() bool {
	if o == nil || IsNil(o.StopCheckInCheckOut) {
		var ret bool
		return ret
	}
	return *o.StopCheckInCheckOut
}

// GetStopCheckInCheckOutOk returns a tuple with the StopCheckInCheckOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetStopCheckInCheckOutOk() (*bool, bool) {
	if o == nil || IsNil(o.StopCheckInCheckOut) {
		return nil, false
	}
	return o.StopCheckInCheckOut, true
}

// HasStopCheckInCheckOut returns a boolean if a field has been set.
func (o *GlobalAlertType) HasStopCheckInCheckOut() bool {
	if o != nil && !IsNil(o.StopCheckInCheckOut) {
		return true
	}

	return false
}

// SetStopCheckInCheckOut gets a reference to the given bool and assigns it to the StopCheckInCheckOut field.
func (o *GlobalAlertType) SetStopCheckInCheckOut(v bool) {
	o.StopCheckInCheckOut = &v
}

// GetWelcomeOffer returns the WelcomeOffer field value if set, zero value otherwise.
func (o *GlobalAlertType) GetWelcomeOffer() bool {
	if o == nil || IsNil(o.WelcomeOffer) {
		var ret bool
		return ret
	}
	return *o.WelcomeOffer
}

// GetWelcomeOfferOk returns a tuple with the WelcomeOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAlertType) GetWelcomeOfferOk() (*bool, bool) {
	if o == nil || IsNil(o.WelcomeOffer) {
		return nil, false
	}
	return o.WelcomeOffer, true
}

// HasWelcomeOffer returns a boolean if a field has been set.
func (o *GlobalAlertType) HasWelcomeOffer() bool {
	if o != nil && !IsNil(o.WelcomeOffer) {
		return true
	}

	return false
}

// SetWelcomeOffer gets a reference to the given bool and assigns it to the WelcomeOffer field.
func (o *GlobalAlertType) SetWelcomeOffer(v bool) {
	o.WelcomeOffer = &v
}

func (o GlobalAlertType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalAlertType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertCode) {
		toSerialize["alertCode"] = o.AlertCode
	}
	if !IsNil(o.AlertId) {
		toSerialize["alertId"] = o.AlertId
	}
	if !IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.QueryId) {
		toSerialize["queryId"] = o.QueryId
	}
	if !IsNil(o.StopCheckInCheckOut) {
		toSerialize["stopCheckInCheckOut"] = o.StopCheckInCheckOut
	}
	if !IsNil(o.WelcomeOffer) {
		toSerialize["welcomeOffer"] = o.WelcomeOffer
	}
	return toSerialize, nil
}

type NullableGlobalAlertType struct {
	value *GlobalAlertType
	isSet bool
}

func (v NullableGlobalAlertType) Get() *GlobalAlertType {
	return v.value
}

func (v *NullableGlobalAlertType) Set(val *GlobalAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalAlertType(val *GlobalAlertType) *NullableGlobalAlertType {
	return &NullableGlobalAlertType{value: val, isSet: true}
}

func (v NullableGlobalAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


