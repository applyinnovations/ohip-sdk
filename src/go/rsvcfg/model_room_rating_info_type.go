/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the RoomRatingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomRatingInfoType{}

// RoomRatingInfoType Rating details for a room.
type RoomRatingInfoType struct {
	// Property code of the rooms.
	HotelId *string `json:"hotelId,omitempty"`
	Rating *RoomRatingType `json:"rating,omitempty"`
	// Room Class of the room.
	RoomClass *string `json:"roomClass,omitempty"`
	// Room number whose ratings are fetched.
	RoomId *string `json:"roomId,omitempty"`
	RoomType *CodeDescriptionType `json:"roomType,omitempty"`
}

// NewRoomRatingInfoType instantiates a new RoomRatingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomRatingInfoType() *RoomRatingInfoType {
	this := RoomRatingInfoType{}
	return &this
}

// NewRoomRatingInfoTypeWithDefaults instantiates a new RoomRatingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomRatingInfoTypeWithDefaults() *RoomRatingInfoType {
	this := RoomRatingInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomRatingInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRatingInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomRatingInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomRatingInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *RoomRatingInfoType) GetRating() RoomRatingType {
	if o == nil || IsNil(o.Rating) {
		var ret RoomRatingType
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRatingInfoType) GetRatingOk() (*RoomRatingType, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *RoomRatingInfoType) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given RoomRatingType and assigns it to the Rating field.
func (o *RoomRatingInfoType) SetRating(v RoomRatingType) {
	o.Rating = &v
}

// GetRoomClass returns the RoomClass field value if set, zero value otherwise.
func (o *RoomRatingInfoType) GetRoomClass() string {
	if o == nil || IsNil(o.RoomClass) {
		var ret string
		return ret
	}
	return *o.RoomClass
}

// GetRoomClassOk returns a tuple with the RoomClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRatingInfoType) GetRoomClassOk() (*string, bool) {
	if o == nil || IsNil(o.RoomClass) {
		return nil, false
	}
	return o.RoomClass, true
}

// HasRoomClass returns a boolean if a field has been set.
func (o *RoomRatingInfoType) HasRoomClass() bool {
	if o != nil && !IsNil(o.RoomClass) {
		return true
	}

	return false
}

// SetRoomClass gets a reference to the given string and assigns it to the RoomClass field.
func (o *RoomRatingInfoType) SetRoomClass(v string) {
	o.RoomClass = &v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomRatingInfoType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRatingInfoType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomRatingInfoType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomRatingInfoType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomRatingInfoType) GetRoomType() CodeDescriptionType {
	if o == nil || IsNil(o.RoomType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRatingInfoType) GetRoomTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomRatingInfoType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given CodeDescriptionType and assigns it to the RoomType field.
func (o *RoomRatingInfoType) SetRoomType(v CodeDescriptionType) {
	o.RoomType = &v
}

func (o RoomRatingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomRatingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.RoomClass) {
		toSerialize["roomClass"] = o.RoomClass
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableRoomRatingInfoType struct {
	value *RoomRatingInfoType
	isSet bool
}

func (v NullableRoomRatingInfoType) Get() *RoomRatingInfoType {
	return v.value
}

func (v *NullableRoomRatingInfoType) Set(val *RoomRatingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomRatingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomRatingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomRatingInfoType(val *RoomRatingInfoType) *NullableRoomRatingInfoType {
	return &NullableRoomRatingInfoType{value: val, isSet: true}
}

func (v NullableRoomRatingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomRatingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


