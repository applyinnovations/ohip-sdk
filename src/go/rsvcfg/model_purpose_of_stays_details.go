/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the PurposeOfStaysDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurposeOfStaysDetails{}

// PurposeOfStaysDetails Response object for fetching Purpose Of Stays.
type PurposeOfStaysDetails struct {
	Links *Links `json:"links,omitempty"`
	PurposeOfStays *PurposeOfStaysType `json:"purposeOfStays,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPurposeOfStaysDetails instantiates a new PurposeOfStaysDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurposeOfStaysDetails() *PurposeOfStaysDetails {
	this := PurposeOfStaysDetails{}
	return &this
}

// NewPurposeOfStaysDetailsWithDefaults instantiates a new PurposeOfStaysDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurposeOfStaysDetailsWithDefaults() *PurposeOfStaysDetails {
	this := PurposeOfStaysDetails{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PurposeOfStaysDetails) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurposeOfStaysDetails) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PurposeOfStaysDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PurposeOfStaysDetails) SetLinks(v Links) {
	o.Links = &v
}

// GetPurposeOfStays returns the PurposeOfStays field value if set, zero value otherwise.
func (o *PurposeOfStaysDetails) GetPurposeOfStays() PurposeOfStaysType {
	if o == nil || IsNil(o.PurposeOfStays) {
		var ret PurposeOfStaysType
		return ret
	}
	return *o.PurposeOfStays
}

// GetPurposeOfStaysOk returns a tuple with the PurposeOfStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurposeOfStaysDetails) GetPurposeOfStaysOk() (*PurposeOfStaysType, bool) {
	if o == nil || IsNil(o.PurposeOfStays) {
		return nil, false
	}
	return o.PurposeOfStays, true
}

// HasPurposeOfStays returns a boolean if a field has been set.
func (o *PurposeOfStaysDetails) HasPurposeOfStays() bool {
	if o != nil && !IsNil(o.PurposeOfStays) {
		return true
	}

	return false
}

// SetPurposeOfStays gets a reference to the given PurposeOfStaysType and assigns it to the PurposeOfStays field.
func (o *PurposeOfStaysDetails) SetPurposeOfStays(v PurposeOfStaysType) {
	o.PurposeOfStays = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PurposeOfStaysDetails) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurposeOfStaysDetails) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PurposeOfStaysDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PurposeOfStaysDetails) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PurposeOfStaysDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurposeOfStaysDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.PurposeOfStays) {
		toSerialize["purposeOfStays"] = o.PurposeOfStays
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePurposeOfStaysDetails struct {
	value *PurposeOfStaysDetails
	isSet bool
}

func (v NullablePurposeOfStaysDetails) Get() *PurposeOfStaysDetails {
	return v.value
}

func (v *NullablePurposeOfStaysDetails) Set(val *PurposeOfStaysDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePurposeOfStaysDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePurposeOfStaysDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurposeOfStaysDetails(val *PurposeOfStaysDetails) *NullablePurposeOfStaysDetails {
	return &NullablePurposeOfStaysDetails{value: val, isSet: true}
}

func (v NullablePurposeOfStaysDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurposeOfStaysDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


