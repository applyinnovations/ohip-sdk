/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the MoveReasonCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveReasonCodesType{}

// MoveReasonCodesType List of Move Reason Codes.
type MoveReasonCodesType struct {
	Items []MoveReasonCodeType
}

// NewMoveReasonCodesType instantiates a new MoveReasonCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveReasonCodesType() *MoveReasonCodesType {
	this := MoveReasonCodesType{}
	return &this
}

// NewMoveReasonCodesTypeWithDefaults instantiates a new MoveReasonCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveReasonCodesTypeWithDefaults() *MoveReasonCodesType {
	this := MoveReasonCodesType{}
	return &this
}

func (o MoveReasonCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveReasonCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *MoveReasonCodesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableMoveReasonCodesType struct {
	value MoveReasonCodesType
	isSet bool
}

func (v NullableMoveReasonCodesType) Get() MoveReasonCodesType {
	return v.value
}

func (v *NullableMoveReasonCodesType) Set(val MoveReasonCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveReasonCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveReasonCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveReasonCodesType(val MoveReasonCodesType) *NullableMoveReasonCodesType {
	return &NullableMoveReasonCodesType{value: val, isSet: true}
}

func (v NullableMoveReasonCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveReasonCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


