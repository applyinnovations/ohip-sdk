/*
OPERA Cloud Event Configuration API

Testing ChainConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/evmcfg"
)

func Test_evmcfg_ChainConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigApiService ChangeFunctionSpaceEventTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeFunctionSpaceEventTypes(context.Background(), eventTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteFunctionSpaceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var functionSpaceTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteFunctionSpaceTypes(context.Background(), functionSpaceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteMealTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mealTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteMealTypes(context.Background(), mealTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetFunctionSpaceEventTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetFunctionSpaceEventTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetFunctionSpaceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetFunctionSpaceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMealTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMealTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostFunctionSpaceEventTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostFunctionSpaceEventTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostFunctionSpaceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostFunctionSpaceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMealTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMealTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutFunctionSpaceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var functionSpaceTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutFunctionSpaceTypes(context.Background(), functionSpaceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutMealTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mealTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutMealTypes(context.Background(), mealTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveFunctionSpaceEventTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveFunctionSpaceEventTypes(context.Background(), eventTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
