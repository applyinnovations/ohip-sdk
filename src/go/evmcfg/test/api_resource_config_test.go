/*
OPERA Cloud Event Configuration API

Testing ResourceConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/evmcfg"
)

func Test_evmcfg_ResourceConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourceConfigApiService CheckDiscountAvailable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.CheckDiscountAvailable(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyInventoryItems(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService CopyItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.CopyItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringContainersCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringContainers(context.Background(), cateringContainersCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringItemRatesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringItemRates(context.Background(), cateringItemRatesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var menuClassesId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenuClasses(context.Background(), menuClassesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenuItems(context.Background(), cateringMenuItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenuItemsByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenuItemsByChain(context.Background(), cateringMenuItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenuMultiCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var coursesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenuMultiCourses(context.Background(), coursesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackageEventNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notedId string
		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackageEventNotes(context.Background(), notedId, eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackageEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageEventsId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackageEvents(context.Background(), packageEventsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackagePrices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pricesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackagePrices(context.Background(), pricesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackageResourceNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackageResourceNotes(context.Background(), notesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackageResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackageResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackageRevenues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string
		var revenueType string
		var eventsId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackageRevenues(context.Background(), priceId, revenueType, eventsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteCateringPackages(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypesCode string
		var forecastsId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteEventForecasts(context.Background(), eventTypesCode, forecastsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteInventoryItemTemplates(context.Background(), inventoryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteInventoryItems(context.Background(), inventoryItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteItemClasses(context.Background(), itemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemPoolsCode string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteItemPools(context.Background(), itemPoolsCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService DeleteRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueGroupsCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.DeleteRevenueGroups(context.Background(), revenueGroupsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringContainers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringItemRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringMenu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringMenu(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringMenuClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringMenuItemClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringMenus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringPackage(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringPackageByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringPackageByChain(context.Background(), cateringPackageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringPackages(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringPackagesMultiProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringPackagesMultiProperties(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetCateringServings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetCateringServings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetDailyInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetDailyInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetEventForecasts(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetInventoryItemTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.GetItemPools(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetRevenueGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService GetRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.GetRevenueTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringContainers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringItemRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringMenuClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringMenuItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringMenus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PostCateringPackages(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostInventoryItemTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PostInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostItemPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostRevenueGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PostRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PostRevenueTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringContainersCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringContainers(context.Background(), cateringContainersCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringItemRatesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringItemRates(context.Background(), cateringItemRatesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringMenuClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringMenuItems(context.Background(), cateringMenuItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringPackages(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutCateringServings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringServingsCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutCateringServings(context.Background(), cateringServingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigApi.PutEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutInventoryItemTemplates(context.Background(), inventoryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutInventoryItems(context.Background(), inventoryItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutItemClasses(context.Background(), itemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemPoolsCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutItemPools(context.Background(), itemPoolsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueGroupsCode string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutRevenueGroups(context.Background(), revenueGroupsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigApiService PutRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueTypesId string

		resp, httpRes, err := apiClient.ResourceConfigApi.PutRevenueTypes(context.Background(), revenueTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
