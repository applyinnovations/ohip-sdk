/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringPackageEventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringPackageEventType{}

// CateringPackageEventType Type used for managing Events associated with a particular Catering Package.
type CateringPackageEventType struct {
	// Indicates if the function space requires an alternate space.
	Alternate *bool `json:"alternate,omitempty"`
	// Event Day for the Catering Package Event.
	DayOrder *int32 `json:"dayOrder,omitempty"`
	// Event Name for the Catering Package Event.
	EventName *string `json:"eventName,omitempty"`
	EventTime *DateTimeSpanType `json:"eventTime,omitempty"`
	// Event Type associated with the Catering Package Event.
	EventType *string `json:"eventType,omitempty"`
	Id *UniqueIDType `json:"id,omitempty"`
	// Indiciates if this package event has sub-events.
	IsMaster *bool `json:"isMaster,omitempty"`
	// Indicates if the function space should be booked as sharable.
	IsShareable *bool `json:"isShareable,omitempty"`
	MasterEventId *UniqueIDType `json:"masterEventId,omitempty"`
	Notes *CateringPackageEventNoteListType `json:"notes,omitempty"`
	Resources *CateringPackageResourceListType `json:"resources,omitempty"`
	// Room details for the Catering Package Event.
	Room *string `json:"room,omitempty"`
	// Stores the selected rate code for the meeting room.
	RoomRateCode *string `json:"roomRateCode,omitempty"`
	// Room Setup details for the Catering Package Event.
	RoomSetup *string `json:"roomSetup,omitempty"`
	// Indicates if the package event is a sub-event or not.
	Sub *bool `json:"sub,omitempty"`
}

// NewCateringPackageEventType instantiates a new CateringPackageEventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringPackageEventType() *CateringPackageEventType {
	this := CateringPackageEventType{}
	return &this
}

// NewCateringPackageEventTypeWithDefaults instantiates a new CateringPackageEventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringPackageEventTypeWithDefaults() *CateringPackageEventType {
	this := CateringPackageEventType{}
	return &this
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetAlternate() bool {
	if o == nil || IsNil(o.Alternate) {
		var ret bool
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given bool and assigns it to the Alternate field.
func (o *CateringPackageEventType) SetAlternate(v bool) {
	o.Alternate = &v
}

// GetDayOrder returns the DayOrder field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetDayOrder() int32 {
	if o == nil || IsNil(o.DayOrder) {
		var ret int32
		return ret
	}
	return *o.DayOrder
}

// GetDayOrderOk returns a tuple with the DayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetDayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DayOrder) {
		return nil, false
	}
	return o.DayOrder, true
}

// HasDayOrder returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasDayOrder() bool {
	if o != nil && !IsNil(o.DayOrder) {
		return true
	}

	return false
}

// SetDayOrder gets a reference to the given int32 and assigns it to the DayOrder field.
func (o *CateringPackageEventType) SetDayOrder(v int32) {
	o.DayOrder = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *CateringPackageEventType) SetEventName(v string) {
	o.EventName = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetEventTime() DateTimeSpanType {
	if o == nil || IsNil(o.EventTime) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetEventTimeOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given DateTimeSpanType and assigns it to the EventTime field.
func (o *CateringPackageEventType) SetEventTime(v DateTimeSpanType) {
	o.EventTime = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CateringPackageEventType) SetEventType(v string) {
	o.EventType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetId() UniqueIDType {
	if o == nil || IsNil(o.Id) {
		var ret UniqueIDType
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UniqueIDType and assigns it to the Id field.
func (o *CateringPackageEventType) SetId(v UniqueIDType) {
	o.Id = &v
}

// GetIsMaster returns the IsMaster field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetIsMaster() bool {
	if o == nil || IsNil(o.IsMaster) {
		var ret bool
		return ret
	}
	return *o.IsMaster
}

// GetIsMasterOk returns a tuple with the IsMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetIsMasterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMaster) {
		return nil, false
	}
	return o.IsMaster, true
}

// HasIsMaster returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasIsMaster() bool {
	if o != nil && !IsNil(o.IsMaster) {
		return true
	}

	return false
}

// SetIsMaster gets a reference to the given bool and assigns it to the IsMaster field.
func (o *CateringPackageEventType) SetIsMaster(v bool) {
	o.IsMaster = &v
}

// GetIsShareable returns the IsShareable field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetIsShareable() bool {
	if o == nil || IsNil(o.IsShareable) {
		var ret bool
		return ret
	}
	return *o.IsShareable
}

// GetIsShareableOk returns a tuple with the IsShareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetIsShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShareable) {
		return nil, false
	}
	return o.IsShareable, true
}

// HasIsShareable returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasIsShareable() bool {
	if o != nil && !IsNil(o.IsShareable) {
		return true
	}

	return false
}

// SetIsShareable gets a reference to the given bool and assigns it to the IsShareable field.
func (o *CateringPackageEventType) SetIsShareable(v bool) {
	o.IsShareable = &v
}

// GetMasterEventId returns the MasterEventId field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetMasterEventId() UniqueIDType {
	if o == nil || IsNil(o.MasterEventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MasterEventId
}

// GetMasterEventIdOk returns a tuple with the MasterEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetMasterEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MasterEventId) {
		return nil, false
	}
	return o.MasterEventId, true
}

// HasMasterEventId returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasMasterEventId() bool {
	if o != nil && !IsNil(o.MasterEventId) {
		return true
	}

	return false
}

// SetMasterEventId gets a reference to the given UniqueIDType and assigns it to the MasterEventId field.
func (o *CateringPackageEventType) SetMasterEventId(v UniqueIDType) {
	o.MasterEventId = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetNotes() CateringPackageEventNoteListType {
	if o == nil || IsNil(o.Notes) {
		var ret CateringPackageEventNoteListType
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetNotesOk() (*CateringPackageEventNoteListType, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given CateringPackageEventNoteListType and assigns it to the Notes field.
func (o *CateringPackageEventType) SetNotes(v CateringPackageEventNoteListType) {
	o.Notes = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetResources() CateringPackageResourceListType {
	if o == nil || IsNil(o.Resources) {
		var ret CateringPackageResourceListType
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetResourcesOk() (*CateringPackageResourceListType, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given CateringPackageResourceListType and assigns it to the Resources field.
func (o *CateringPackageEventType) SetResources(v CateringPackageResourceListType) {
	o.Resources = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetRoom() string {
	if o == nil || IsNil(o.Room) {
		var ret string
		return ret
	}
	return *o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetRoomOk() (*string, bool) {
	if o == nil || IsNil(o.Room) {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasRoom() bool {
	if o != nil && !IsNil(o.Room) {
		return true
	}

	return false
}

// SetRoom gets a reference to the given string and assigns it to the Room field.
func (o *CateringPackageEventType) SetRoom(v string) {
	o.Room = &v
}

// GetRoomRateCode returns the RoomRateCode field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetRoomRateCode() string {
	if o == nil || IsNil(o.RoomRateCode) {
		var ret string
		return ret
	}
	return *o.RoomRateCode
}

// GetRoomRateCodeOk returns a tuple with the RoomRateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetRoomRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomRateCode) {
		return nil, false
	}
	return o.RoomRateCode, true
}

// HasRoomRateCode returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasRoomRateCode() bool {
	if o != nil && !IsNil(o.RoomRateCode) {
		return true
	}

	return false
}

// SetRoomRateCode gets a reference to the given string and assigns it to the RoomRateCode field.
func (o *CateringPackageEventType) SetRoomRateCode(v string) {
	o.RoomRateCode = &v
}

// GetRoomSetup returns the RoomSetup field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetRoomSetup() string {
	if o == nil || IsNil(o.RoomSetup) {
		var ret string
		return ret
	}
	return *o.RoomSetup
}

// GetRoomSetupOk returns a tuple with the RoomSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetRoomSetupOk() (*string, bool) {
	if o == nil || IsNil(o.RoomSetup) {
		return nil, false
	}
	return o.RoomSetup, true
}

// HasRoomSetup returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasRoomSetup() bool {
	if o != nil && !IsNil(o.RoomSetup) {
		return true
	}

	return false
}

// SetRoomSetup gets a reference to the given string and assigns it to the RoomSetup field.
func (o *CateringPackageEventType) SetRoomSetup(v string) {
	o.RoomSetup = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *CateringPackageEventType) GetSub() bool {
	if o == nil || IsNil(o.Sub) {
		var ret bool
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventType) GetSubOk() (*bool, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *CateringPackageEventType) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given bool and assigns it to the Sub field.
func (o *CateringPackageEventType) SetSub(v bool) {
	o.Sub = &v
}

func (o CateringPackageEventType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringPackageEventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.DayOrder) {
		toSerialize["dayOrder"] = o.DayOrder
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventTime) {
		toSerialize["eventTime"] = o.EventTime
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsMaster) {
		toSerialize["isMaster"] = o.IsMaster
	}
	if !IsNil(o.IsShareable) {
		toSerialize["isShareable"] = o.IsShareable
	}
	if !IsNil(o.MasterEventId) {
		toSerialize["masterEventId"] = o.MasterEventId
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Room) {
		toSerialize["room"] = o.Room
	}
	if !IsNil(o.RoomRateCode) {
		toSerialize["roomRateCode"] = o.RoomRateCode
	}
	if !IsNil(o.RoomSetup) {
		toSerialize["roomSetup"] = o.RoomSetup
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	return toSerialize, nil
}

type NullableCateringPackageEventType struct {
	value *CateringPackageEventType
	isSet bool
}

func (v NullableCateringPackageEventType) Get() *CateringPackageEventType {
	return v.value
}

func (v *NullableCateringPackageEventType) Set(val *CateringPackageEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageEventType(val *CateringPackageEventType) *NullableCateringPackageEventType {
	return &NullableCateringPackageEventType{value: val, isSet: true}
}

func (v NullableCateringPackageEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


