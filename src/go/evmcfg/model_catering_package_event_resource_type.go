/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringPackageEventResourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringPackageEventResourceType{}

// CateringPackageEventResourceType Type used for managing Resources associated with a particular Catering Package Event.
type CateringPackageEventResourceType struct {
	// Defines if the Function Space is shareable.
	IsShareable *bool `json:"isShareable,omitempty"`
	ItemAttribute *UniqueIDType `json:"itemAttribute,omitempty"`
	// Rate Code associated with the Item.
	ItemRate *string `json:"itemRate,omitempty"`
	// Name of the Resource.
	Name *string `json:"name,omitempty"`
	// Defines the Display Order of the Item or Pickup Sequence during the booking process for a Function Space.
	OrderBy *int32 `json:"orderBy,omitempty"`
	Price *CurrencyAmountType `json:"price,omitempty"`
	// Defines the quantity of the Item.
	Quantity *int32 `json:"quantity,omitempty"`
	// Unique Identifier for a Resource associated with a particular Catering Package Event.
	ResourceId *string `json:"resourceId,omitempty"`
	ResourceNotes *CateringPackageResourceNoteListType `json:"resourceNotes,omitempty"`
	RevenueTypes *CodeListType `json:"revenueTypes,omitempty"`
	// RateCode associated with the Function Space.
	RoomRate *string `json:"roomRate,omitempty"`
	// Setup code of th Function Space.
	RoomSetup *string `json:"roomSetup,omitempty"`
	Type *EventResourceType `json:"type,omitempty"`
}

// NewCateringPackageEventResourceType instantiates a new CateringPackageEventResourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringPackageEventResourceType() *CateringPackageEventResourceType {
	this := CateringPackageEventResourceType{}
	return &this
}

// NewCateringPackageEventResourceTypeWithDefaults instantiates a new CateringPackageEventResourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringPackageEventResourceTypeWithDefaults() *CateringPackageEventResourceType {
	this := CateringPackageEventResourceType{}
	return &this
}

// GetIsShareable returns the IsShareable field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetIsShareable() bool {
	if o == nil || IsNil(o.IsShareable) {
		var ret bool
		return ret
	}
	return *o.IsShareable
}

// GetIsShareableOk returns a tuple with the IsShareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetIsShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShareable) {
		return nil, false
	}
	return o.IsShareable, true
}

// HasIsShareable returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasIsShareable() bool {
	if o != nil && !IsNil(o.IsShareable) {
		return true
	}

	return false
}

// SetIsShareable gets a reference to the given bool and assigns it to the IsShareable field.
func (o *CateringPackageEventResourceType) SetIsShareable(v bool) {
	o.IsShareable = &v
}

// GetItemAttribute returns the ItemAttribute field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetItemAttribute() UniqueIDType {
	if o == nil || IsNil(o.ItemAttribute) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemAttribute
}

// GetItemAttributeOk returns a tuple with the ItemAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetItemAttributeOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemAttribute) {
		return nil, false
	}
	return o.ItemAttribute, true
}

// HasItemAttribute returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasItemAttribute() bool {
	if o != nil && !IsNil(o.ItemAttribute) {
		return true
	}

	return false
}

// SetItemAttribute gets a reference to the given UniqueIDType and assigns it to the ItemAttribute field.
func (o *CateringPackageEventResourceType) SetItemAttribute(v UniqueIDType) {
	o.ItemAttribute = &v
}

// GetItemRate returns the ItemRate field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetItemRate() string {
	if o == nil || IsNil(o.ItemRate) {
		var ret string
		return ret
	}
	return *o.ItemRate
}

// GetItemRateOk returns a tuple with the ItemRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetItemRateOk() (*string, bool) {
	if o == nil || IsNil(o.ItemRate) {
		return nil, false
	}
	return o.ItemRate, true
}

// HasItemRate returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasItemRate() bool {
	if o != nil && !IsNil(o.ItemRate) {
		return true
	}

	return false
}

// SetItemRate gets a reference to the given string and assigns it to the ItemRate field.
func (o *CateringPackageEventResourceType) SetItemRate(v string) {
	o.ItemRate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CateringPackageEventResourceType) SetName(v string) {
	o.Name = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *CateringPackageEventResourceType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetPrice() CurrencyAmountType {
	if o == nil || IsNil(o.Price) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CurrencyAmountType and assigns it to the Price field.
func (o *CateringPackageEventResourceType) SetPrice(v CurrencyAmountType) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *CateringPackageEventResourceType) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *CateringPackageEventResourceType) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceNotes returns the ResourceNotes field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetResourceNotes() CateringPackageResourceNoteListType {
	if o == nil || IsNil(o.ResourceNotes) {
		var ret CateringPackageResourceNoteListType
		return ret
	}
	return *o.ResourceNotes
}

// GetResourceNotesOk returns a tuple with the ResourceNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetResourceNotesOk() (*CateringPackageResourceNoteListType, bool) {
	if o == nil || IsNil(o.ResourceNotes) {
		return nil, false
	}
	return o.ResourceNotes, true
}

// HasResourceNotes returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasResourceNotes() bool {
	if o != nil && !IsNil(o.ResourceNotes) {
		return true
	}

	return false
}

// SetResourceNotes gets a reference to the given CateringPackageResourceNoteListType and assigns it to the ResourceNotes field.
func (o *CateringPackageEventResourceType) SetResourceNotes(v CateringPackageResourceNoteListType) {
	o.ResourceNotes = &v
}

// GetRevenueTypes returns the RevenueTypes field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetRevenueTypes() CodeListType {
	if o == nil || IsNil(o.RevenueTypes) {
		var ret CodeListType
		return ret
	}
	return *o.RevenueTypes
}

// GetRevenueTypesOk returns a tuple with the RevenueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetRevenueTypesOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.RevenueTypes) {
		return nil, false
	}
	return o.RevenueTypes, true
}

// HasRevenueTypes returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasRevenueTypes() bool {
	if o != nil && !IsNil(o.RevenueTypes) {
		return true
	}

	return false
}

// SetRevenueTypes gets a reference to the given CodeListType and assigns it to the RevenueTypes field.
func (o *CateringPackageEventResourceType) SetRevenueTypes(v CodeListType) {
	o.RevenueTypes = &v
}

// GetRoomRate returns the RoomRate field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetRoomRate() string {
	if o == nil || IsNil(o.RoomRate) {
		var ret string
		return ret
	}
	return *o.RoomRate
}

// GetRoomRateOk returns a tuple with the RoomRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetRoomRateOk() (*string, bool) {
	if o == nil || IsNil(o.RoomRate) {
		return nil, false
	}
	return o.RoomRate, true
}

// HasRoomRate returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasRoomRate() bool {
	if o != nil && !IsNil(o.RoomRate) {
		return true
	}

	return false
}

// SetRoomRate gets a reference to the given string and assigns it to the RoomRate field.
func (o *CateringPackageEventResourceType) SetRoomRate(v string) {
	o.RoomRate = &v
}

// GetRoomSetup returns the RoomSetup field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetRoomSetup() string {
	if o == nil || IsNil(o.RoomSetup) {
		var ret string
		return ret
	}
	return *o.RoomSetup
}

// GetRoomSetupOk returns a tuple with the RoomSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetRoomSetupOk() (*string, bool) {
	if o == nil || IsNil(o.RoomSetup) {
		return nil, false
	}
	return o.RoomSetup, true
}

// HasRoomSetup returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasRoomSetup() bool {
	if o != nil && !IsNil(o.RoomSetup) {
		return true
	}

	return false
}

// SetRoomSetup gets a reference to the given string and assigns it to the RoomSetup field.
func (o *CateringPackageEventResourceType) SetRoomSetup(v string) {
	o.RoomSetup = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CateringPackageEventResourceType) GetType() EventResourceType {
	if o == nil || IsNil(o.Type) {
		var ret EventResourceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageEventResourceType) GetTypeOk() (*EventResourceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CateringPackageEventResourceType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EventResourceType and assigns it to the Type field.
func (o *CateringPackageEventResourceType) SetType(v EventResourceType) {
	o.Type = &v
}

func (o CateringPackageEventResourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringPackageEventResourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsShareable) {
		toSerialize["isShareable"] = o.IsShareable
	}
	if !IsNil(o.ItemAttribute) {
		toSerialize["itemAttribute"] = o.ItemAttribute
	}
	if !IsNil(o.ItemRate) {
		toSerialize["itemRate"] = o.ItemRate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceNotes) {
		toSerialize["resourceNotes"] = o.ResourceNotes
	}
	if !IsNil(o.RevenueTypes) {
		toSerialize["revenueTypes"] = o.RevenueTypes
	}
	if !IsNil(o.RoomRate) {
		toSerialize["roomRate"] = o.RoomRate
	}
	if !IsNil(o.RoomSetup) {
		toSerialize["roomSetup"] = o.RoomSetup
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCateringPackageEventResourceType struct {
	value *CateringPackageEventResourceType
	isSet bool
}

func (v NullableCateringPackageEventResourceType) Get() *CateringPackageEventResourceType {
	return v.value
}

func (v *NullableCateringPackageEventResourceType) Set(val *CateringPackageEventResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageEventResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageEventResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageEventResourceType(val *CateringPackageEventResourceType) *NullableCateringPackageEventResourceType {
	return &NullableCateringPackageEventResourceType{value: val, isSet: true}
}

func (v NullableCateringPackageEventResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageEventResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


