/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuInfoType{}

// CateringMenuInfoType struct for CateringMenuInfoType
type CateringMenuInfoType struct {
	// This type holds name of Menu Class Name.
	ClassName *string `json:"className,omitempty"`
	// This type holds value of consumption, Menu items will be charged on a consumption basis.
	ConsumptionBased *bool `json:"consumptionBased,omitempty"`
	// Define the Courses populated into the Multi Choice Menu Configuration
	CourseCount *int32 `json:"courseCount,omitempty"`
	Description *TranslationTextType2000 `json:"description,omitempty"`
	DietaryList *CodeListType `json:"dietaryList,omitempty"`
	EventDateRange *DateRangeType `json:"eventDateRange,omitempty"`
	EventTypes *CodeListType `json:"eventTypes,omitempty"`
	// Selection will note this Menu is Inactive and unable to be added to a Catering Event.
	Inactive *bool `json:"inactive,omitempty"`
	// Return true, when all Menu Items added will be marked as Included and there will be a Global Price for this menu
	IncludedInMenu *bool `json:"includedInMenu,omitempty"`
	// Return true means, menu item as Included in the Menu Price
	IncludedInPrice *bool `json:"includedInPrice,omitempty"`
	// The total number of menus sold for the day on which the event takes place.
	MenusSold *int32 `json:"menusSold,omitempty"`
	// Indicator of this being a multi-choice menu
	MultiChoice *bool `json:"multiChoice,omitempty"`
	Name *TranslationTextType2000 `json:"name,omitempty"`
	// This type holds quick insert value, v5 functionality as Article Number for the Menu.
	QuickInsertCode *string `json:"quickInsertCode,omitempty"`
	Restriction *TranslationTextType2000 `json:"restriction,omitempty"`
	SalesPrice *CurrencyAmountType `json:"salesPrice,omitempty"`
	SellDateRange *DateRangeType `json:"sellDateRange,omitempty"`
	// This type holds TableCapacity for the given Menu.
	ServingSize *string `json:"servingSize,omitempty"`
	ServingType *ServingType `json:"servingType,omitempty"`
	Type *MenuTypeType `json:"type,omitempty"`
	// This type tells about whether menu is book through web or not.
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewCateringMenuInfoType instantiates a new CateringMenuInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuInfoType() *CateringMenuInfoType {
	this := CateringMenuInfoType{}
	return &this
}

// NewCateringMenuInfoTypeWithDefaults instantiates a new CateringMenuInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuInfoTypeWithDefaults() *CateringMenuInfoType {
	this := CateringMenuInfoType{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *CateringMenuInfoType) SetClassName(v string) {
	o.ClassName = &v
}

// GetConsumptionBased returns the ConsumptionBased field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetConsumptionBased() bool {
	if o == nil || IsNil(o.ConsumptionBased) {
		var ret bool
		return ret
	}
	return *o.ConsumptionBased
}

// GetConsumptionBasedOk returns a tuple with the ConsumptionBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetConsumptionBasedOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsumptionBased) {
		return nil, false
	}
	return o.ConsumptionBased, true
}

// HasConsumptionBased returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasConsumptionBased() bool {
	if o != nil && !IsNil(o.ConsumptionBased) {
		return true
	}

	return false
}

// SetConsumptionBased gets a reference to the given bool and assigns it to the ConsumptionBased field.
func (o *CateringMenuInfoType) SetConsumptionBased(v bool) {
	o.ConsumptionBased = &v
}

// GetCourseCount returns the CourseCount field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetCourseCount() int32 {
	if o == nil || IsNil(o.CourseCount) {
		var ret int32
		return ret
	}
	return *o.CourseCount
}

// GetCourseCountOk returns a tuple with the CourseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetCourseCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CourseCount) {
		return nil, false
	}
	return o.CourseCount, true
}

// HasCourseCount returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasCourseCount() bool {
	if o != nil && !IsNil(o.CourseCount) {
		return true
	}

	return false
}

// SetCourseCount gets a reference to the given int32 and assigns it to the CourseCount field.
func (o *CateringMenuInfoType) SetCourseCount(v int32) {
	o.CourseCount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetDescription() TranslationTextType2000 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetDescriptionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType2000 and assigns it to the Description field.
func (o *CateringMenuInfoType) SetDescription(v TranslationTextType2000) {
	o.Description = &v
}

// GetDietaryList returns the DietaryList field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetDietaryList() CodeListType {
	if o == nil || IsNil(o.DietaryList) {
		var ret CodeListType
		return ret
	}
	return *o.DietaryList
}

// GetDietaryListOk returns a tuple with the DietaryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetDietaryListOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.DietaryList) {
		return nil, false
	}
	return o.DietaryList, true
}

// HasDietaryList returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasDietaryList() bool {
	if o != nil && !IsNil(o.DietaryList) {
		return true
	}

	return false
}

// SetDietaryList gets a reference to the given CodeListType and assigns it to the DietaryList field.
func (o *CateringMenuInfoType) SetDietaryList(v CodeListType) {
	o.DietaryList = &v
}

// GetEventDateRange returns the EventDateRange field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetEventDateRange() DateRangeType {
	if o == nil || IsNil(o.EventDateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.EventDateRange
}

// GetEventDateRangeOk returns a tuple with the EventDateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetEventDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.EventDateRange) {
		return nil, false
	}
	return o.EventDateRange, true
}

// HasEventDateRange returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasEventDateRange() bool {
	if o != nil && !IsNil(o.EventDateRange) {
		return true
	}

	return false
}

// SetEventDateRange gets a reference to the given DateRangeType and assigns it to the EventDateRange field.
func (o *CateringMenuInfoType) SetEventDateRange(v DateRangeType) {
	o.EventDateRange = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetEventTypes() CodeListType {
	if o == nil || IsNil(o.EventTypes) {
		var ret CodeListType
		return ret
	}
	return *o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetEventTypesOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given CodeListType and assigns it to the EventTypes field.
func (o *CateringMenuInfoType) SetEventTypes(v CodeListType) {
	o.EventTypes = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *CateringMenuInfoType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetIncludedInMenu returns the IncludedInMenu field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetIncludedInMenu() bool {
	if o == nil || IsNil(o.IncludedInMenu) {
		var ret bool
		return ret
	}
	return *o.IncludedInMenu
}

// GetIncludedInMenuOk returns a tuple with the IncludedInMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetIncludedInMenuOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedInMenu) {
		return nil, false
	}
	return o.IncludedInMenu, true
}

// HasIncludedInMenu returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasIncludedInMenu() bool {
	if o != nil && !IsNil(o.IncludedInMenu) {
		return true
	}

	return false
}

// SetIncludedInMenu gets a reference to the given bool and assigns it to the IncludedInMenu field.
func (o *CateringMenuInfoType) SetIncludedInMenu(v bool) {
	o.IncludedInMenu = &v
}

// GetIncludedInPrice returns the IncludedInPrice field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetIncludedInPrice() bool {
	if o == nil || IsNil(o.IncludedInPrice) {
		var ret bool
		return ret
	}
	return *o.IncludedInPrice
}

// GetIncludedInPriceOk returns a tuple with the IncludedInPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetIncludedInPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedInPrice) {
		return nil, false
	}
	return o.IncludedInPrice, true
}

// HasIncludedInPrice returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasIncludedInPrice() bool {
	if o != nil && !IsNil(o.IncludedInPrice) {
		return true
	}

	return false
}

// SetIncludedInPrice gets a reference to the given bool and assigns it to the IncludedInPrice field.
func (o *CateringMenuInfoType) SetIncludedInPrice(v bool) {
	o.IncludedInPrice = &v
}

// GetMenusSold returns the MenusSold field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetMenusSold() int32 {
	if o == nil || IsNil(o.MenusSold) {
		var ret int32
		return ret
	}
	return *o.MenusSold
}

// GetMenusSoldOk returns a tuple with the MenusSold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetMenusSoldOk() (*int32, bool) {
	if o == nil || IsNil(o.MenusSold) {
		return nil, false
	}
	return o.MenusSold, true
}

// HasMenusSold returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasMenusSold() bool {
	if o != nil && !IsNil(o.MenusSold) {
		return true
	}

	return false
}

// SetMenusSold gets a reference to the given int32 and assigns it to the MenusSold field.
func (o *CateringMenuInfoType) SetMenusSold(v int32) {
	o.MenusSold = &v
}

// GetMultiChoice returns the MultiChoice field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetMultiChoice() bool {
	if o == nil || IsNil(o.MultiChoice) {
		var ret bool
		return ret
	}
	return *o.MultiChoice
}

// GetMultiChoiceOk returns a tuple with the MultiChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetMultiChoiceOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiChoice) {
		return nil, false
	}
	return o.MultiChoice, true
}

// HasMultiChoice returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasMultiChoice() bool {
	if o != nil && !IsNil(o.MultiChoice) {
		return true
	}

	return false
}

// SetMultiChoice gets a reference to the given bool and assigns it to the MultiChoice field.
func (o *CateringMenuInfoType) SetMultiChoice(v bool) {
	o.MultiChoice = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetName() TranslationTextType2000 {
	if o == nil || IsNil(o.Name) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetNameOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given TranslationTextType2000 and assigns it to the Name field.
func (o *CateringMenuInfoType) SetName(v TranslationTextType2000) {
	o.Name = &v
}

// GetQuickInsertCode returns the QuickInsertCode field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetQuickInsertCode() string {
	if o == nil || IsNil(o.QuickInsertCode) {
		var ret string
		return ret
	}
	return *o.QuickInsertCode
}

// GetQuickInsertCodeOk returns a tuple with the QuickInsertCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetQuickInsertCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QuickInsertCode) {
		return nil, false
	}
	return o.QuickInsertCode, true
}

// HasQuickInsertCode returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasQuickInsertCode() bool {
	if o != nil && !IsNil(o.QuickInsertCode) {
		return true
	}

	return false
}

// SetQuickInsertCode gets a reference to the given string and assigns it to the QuickInsertCode field.
func (o *CateringMenuInfoType) SetQuickInsertCode(v string) {
	o.QuickInsertCode = &v
}

// GetRestriction returns the Restriction field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetRestriction() TranslationTextType2000 {
	if o == nil || IsNil(o.Restriction) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Restriction
}

// GetRestrictionOk returns a tuple with the Restriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetRestrictionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Restriction) {
		return nil, false
	}
	return o.Restriction, true
}

// HasRestriction returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasRestriction() bool {
	if o != nil && !IsNil(o.Restriction) {
		return true
	}

	return false
}

// SetRestriction gets a reference to the given TranslationTextType2000 and assigns it to the Restriction field.
func (o *CateringMenuInfoType) SetRestriction(v TranslationTextType2000) {
	o.Restriction = &v
}

// GetSalesPrice returns the SalesPrice field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetSalesPrice() CurrencyAmountType {
	if o == nil || IsNil(o.SalesPrice) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetSalesPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.SalesPrice) {
		return nil, false
	}
	return o.SalesPrice, true
}

// HasSalesPrice returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasSalesPrice() bool {
	if o != nil && !IsNil(o.SalesPrice) {
		return true
	}

	return false
}

// SetSalesPrice gets a reference to the given CurrencyAmountType and assigns it to the SalesPrice field.
func (o *CateringMenuInfoType) SetSalesPrice(v CurrencyAmountType) {
	o.SalesPrice = &v
}

// GetSellDateRange returns the SellDateRange field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetSellDateRange() DateRangeType {
	if o == nil || IsNil(o.SellDateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.SellDateRange
}

// GetSellDateRangeOk returns a tuple with the SellDateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetSellDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.SellDateRange) {
		return nil, false
	}
	return o.SellDateRange, true
}

// HasSellDateRange returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasSellDateRange() bool {
	if o != nil && !IsNil(o.SellDateRange) {
		return true
	}

	return false
}

// SetSellDateRange gets a reference to the given DateRangeType and assigns it to the SellDateRange field.
func (o *CateringMenuInfoType) SetSellDateRange(v DateRangeType) {
	o.SellDateRange = &v
}

// GetServingSize returns the ServingSize field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetServingSize() string {
	if o == nil || IsNil(o.ServingSize) {
		var ret string
		return ret
	}
	return *o.ServingSize
}

// GetServingSizeOk returns a tuple with the ServingSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetServingSizeOk() (*string, bool) {
	if o == nil || IsNil(o.ServingSize) {
		return nil, false
	}
	return o.ServingSize, true
}

// HasServingSize returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasServingSize() bool {
	if o != nil && !IsNil(o.ServingSize) {
		return true
	}

	return false
}

// SetServingSize gets a reference to the given string and assigns it to the ServingSize field.
func (o *CateringMenuInfoType) SetServingSize(v string) {
	o.ServingSize = &v
}

// GetServingType returns the ServingType field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetServingType() ServingType {
	if o == nil || IsNil(o.ServingType) {
		var ret ServingType
		return ret
	}
	return *o.ServingType
}

// GetServingTypeOk returns a tuple with the ServingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetServingTypeOk() (*ServingType, bool) {
	if o == nil || IsNil(o.ServingType) {
		return nil, false
	}
	return o.ServingType, true
}

// HasServingType returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasServingType() bool {
	if o != nil && !IsNil(o.ServingType) {
		return true
	}

	return false
}

// SetServingType gets a reference to the given ServingType and assigns it to the ServingType field.
func (o *CateringMenuInfoType) SetServingType(v ServingType) {
	o.ServingType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetType() MenuTypeType {
	if o == nil || IsNil(o.Type) {
		var ret MenuTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetTypeOk() (*MenuTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MenuTypeType and assigns it to the Type field.
func (o *CateringMenuInfoType) SetType(v MenuTypeType) {
	o.Type = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *CateringMenuInfoType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuInfoType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *CateringMenuInfoType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *CateringMenuInfoType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o CateringMenuInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.ConsumptionBased) {
		toSerialize["consumptionBased"] = o.ConsumptionBased
	}
	if !IsNil(o.CourseCount) {
		toSerialize["courseCount"] = o.CourseCount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DietaryList) {
		toSerialize["dietaryList"] = o.DietaryList
	}
	if !IsNil(o.EventDateRange) {
		toSerialize["eventDateRange"] = o.EventDateRange
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.IncludedInMenu) {
		toSerialize["includedInMenu"] = o.IncludedInMenu
	}
	if !IsNil(o.IncludedInPrice) {
		toSerialize["includedInPrice"] = o.IncludedInPrice
	}
	if !IsNil(o.MenusSold) {
		toSerialize["menusSold"] = o.MenusSold
	}
	if !IsNil(o.MultiChoice) {
		toSerialize["multiChoice"] = o.MultiChoice
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QuickInsertCode) {
		toSerialize["quickInsertCode"] = o.QuickInsertCode
	}
	if !IsNil(o.Restriction) {
		toSerialize["restriction"] = o.Restriction
	}
	if !IsNil(o.SalesPrice) {
		toSerialize["salesPrice"] = o.SalesPrice
	}
	if !IsNil(o.SellDateRange) {
		toSerialize["sellDateRange"] = o.SellDateRange
	}
	if !IsNil(o.ServingSize) {
		toSerialize["servingSize"] = o.ServingSize
	}
	if !IsNil(o.ServingType) {
		toSerialize["servingType"] = o.ServingType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableCateringMenuInfoType struct {
	value *CateringMenuInfoType
	isSet bool
}

func (v NullableCateringMenuInfoType) Get() *CateringMenuInfoType {
	return v.value
}

func (v *NullableCateringMenuInfoType) Set(val *CateringMenuInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuInfoType(val *CateringMenuInfoType) *NullableCateringMenuInfoType {
	return &NullableCateringMenuInfoType{value: val, isSet: true}
}

func (v NullableCateringMenuInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


