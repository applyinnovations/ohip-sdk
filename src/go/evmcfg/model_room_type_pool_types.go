/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the RoomTypePoolTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypePoolTypes{}

// RoomTypePoolTypes Collection of room type pool and associated room type(s).
type RoomTypePoolTypes struct {
	Items []RoomTypePoolType
}

// NewRoomTypePoolTypes instantiates a new RoomTypePoolTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypePoolTypes() *RoomTypePoolTypes {
	this := RoomTypePoolTypes{}
	return &this
}

// NewRoomTypePoolTypesWithDefaults instantiates a new RoomTypePoolTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypePoolTypesWithDefaults() *RoomTypePoolTypes {
	this := RoomTypePoolTypes{}
	return &this
}

func (o RoomTypePoolTypes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypePoolTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *RoomTypePoolTypes) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableRoomTypePoolTypes struct {
	value RoomTypePoolTypes
	isSet bool
}

func (v NullableRoomTypePoolTypes) Get() RoomTypePoolTypes {
	return v.value
}

func (v *NullableRoomTypePoolTypes) Set(val RoomTypePoolTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypePoolTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypePoolTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypePoolTypes(val RoomTypePoolTypes) *NullableRoomTypePoolTypes {
	return &NullableRoomTypePoolTypes{value: val, isSet: true}
}

func (v NullableRoomTypePoolTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypePoolTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


