/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the RoomPoolRoomTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomPoolRoomTypeType{}

// RoomPoolRoomTypeType This extension will only use for consuming RoomType and SellSequence elements for consistency.
type RoomPoolRoomTypeType struct {
	// Indicates if room type is accessible.
	Accessible *bool `json:"accessible,omitempty"`
	// Active date of the room type.
	ActiveDate *string `json:"activeDate,omitempty"`
	// Indicates the room type is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Indicates room type is meeting room. This Can be Meeting room flag cannot be unmarked at the property level. Can only be marked for non pseudo room types.
	MeetingRoom *bool `json:"meetingRoom,omitempty"`
	// Number of rooms for this room type.
	NumberOfRooms *int32 `json:"numberOfRooms,omitempty"`
	// Indicates if room type is pseudo.
	Pseudo *bool `json:"pseudo,omitempty"`
	// Indicates that the room pool cannot be used to allocate inventory to this room type. Inventory must be allocated directly to the room type itself.
	Restricted *bool `json:"restricted,omitempty"`
	// Room class for the room type code.
	RoomClass *string `json:"roomClass,omitempty"`
	RoomType *string `json:"roomType,omitempty"`
	// Indicates room types sell sequence.
	SellSequence *float32 `json:"sellSequence,omitempty"`
	// Indicates if room type is sent to interface.
	SendToInterface *bool `json:"sendToInterface,omitempty"`
	// Short Description of room type.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// Indicates room type is a suite.
	Suite *bool `json:"suite,omitempty"`
}

// NewRoomPoolRoomTypeType instantiates a new RoomPoolRoomTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomPoolRoomTypeType() *RoomPoolRoomTypeType {
	this := RoomPoolRoomTypeType{}
	return &this
}

// NewRoomPoolRoomTypeTypeWithDefaults instantiates a new RoomPoolRoomTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomPoolRoomTypeTypeWithDefaults() *RoomPoolRoomTypeType {
	this := RoomPoolRoomTypeType{}
	return &this
}

// GetAccessible returns the Accessible field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetAccessible() bool {
	if o == nil || IsNil(o.Accessible) {
		var ret bool
		return ret
	}
	return *o.Accessible
}

// GetAccessibleOk returns a tuple with the Accessible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetAccessibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Accessible) {
		return nil, false
	}
	return o.Accessible, true
}

// HasAccessible returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasAccessible() bool {
	if o != nil && !IsNil(o.Accessible) {
		return true
	}

	return false
}

// SetAccessible gets a reference to the given bool and assigns it to the Accessible field.
func (o *RoomPoolRoomTypeType) SetAccessible(v bool) {
	o.Accessible = &v
}

// GetActiveDate returns the ActiveDate field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetActiveDate() string {
	if o == nil || IsNil(o.ActiveDate) {
		var ret string
		return ret
	}
	return *o.ActiveDate
}

// GetActiveDateOk returns a tuple with the ActiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetActiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDate) {
		return nil, false
	}
	return o.ActiveDate, true
}

// HasActiveDate returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasActiveDate() bool {
	if o != nil && !IsNil(o.ActiveDate) {
		return true
	}

	return false
}

// SetActiveDate gets a reference to the given string and assigns it to the ActiveDate field.
func (o *RoomPoolRoomTypeType) SetActiveDate(v string) {
	o.ActiveDate = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *RoomPoolRoomTypeType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMeetingRoom returns the MeetingRoom field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetMeetingRoom() bool {
	if o == nil || IsNil(o.MeetingRoom) {
		var ret bool
		return ret
	}
	return *o.MeetingRoom
}

// GetMeetingRoomOk returns a tuple with the MeetingRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetMeetingRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.MeetingRoom) {
		return nil, false
	}
	return o.MeetingRoom, true
}

// HasMeetingRoom returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasMeetingRoom() bool {
	if o != nil && !IsNil(o.MeetingRoom) {
		return true
	}

	return false
}

// SetMeetingRoom gets a reference to the given bool and assigns it to the MeetingRoom field.
func (o *RoomPoolRoomTypeType) SetMeetingRoom(v bool) {
	o.MeetingRoom = &v
}

// GetNumberOfRooms returns the NumberOfRooms field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetNumberOfRooms() int32 {
	if o == nil || IsNil(o.NumberOfRooms) {
		var ret int32
		return ret
	}
	return *o.NumberOfRooms
}

// GetNumberOfRoomsOk returns a tuple with the NumberOfRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetNumberOfRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRooms) {
		return nil, false
	}
	return o.NumberOfRooms, true
}

// HasNumberOfRooms returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasNumberOfRooms() bool {
	if o != nil && !IsNil(o.NumberOfRooms) {
		return true
	}

	return false
}

// SetNumberOfRooms gets a reference to the given int32 and assigns it to the NumberOfRooms field.
func (o *RoomPoolRoomTypeType) SetNumberOfRooms(v int32) {
	o.NumberOfRooms = &v
}

// GetPseudo returns the Pseudo field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetPseudo() bool {
	if o == nil || IsNil(o.Pseudo) {
		var ret bool
		return ret
	}
	return *o.Pseudo
}

// GetPseudoOk returns a tuple with the Pseudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetPseudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Pseudo) {
		return nil, false
	}
	return o.Pseudo, true
}

// HasPseudo returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasPseudo() bool {
	if o != nil && !IsNil(o.Pseudo) {
		return true
	}

	return false
}

// SetPseudo gets a reference to the given bool and assigns it to the Pseudo field.
func (o *RoomPoolRoomTypeType) SetPseudo(v bool) {
	o.Pseudo = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *RoomPoolRoomTypeType) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetRoomClass returns the RoomClass field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetRoomClass() string {
	if o == nil || IsNil(o.RoomClass) {
		var ret string
		return ret
	}
	return *o.RoomClass
}

// GetRoomClassOk returns a tuple with the RoomClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetRoomClassOk() (*string, bool) {
	if o == nil || IsNil(o.RoomClass) {
		return nil, false
	}
	return o.RoomClass, true
}

// HasRoomClass returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasRoomClass() bool {
	if o != nil && !IsNil(o.RoomClass) {
		return true
	}

	return false
}

// SetRoomClass gets a reference to the given string and assigns it to the RoomClass field.
func (o *RoomPoolRoomTypeType) SetRoomClass(v string) {
	o.RoomClass = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *RoomPoolRoomTypeType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetSellSequence returns the SellSequence field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetSellSequence() float32 {
	if o == nil || IsNil(o.SellSequence) {
		var ret float32
		return ret
	}
	return *o.SellSequence
}

// GetSellSequenceOk returns a tuple with the SellSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetSellSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.SellSequence) {
		return nil, false
	}
	return o.SellSequence, true
}

// HasSellSequence returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasSellSequence() bool {
	if o != nil && !IsNil(o.SellSequence) {
		return true
	}

	return false
}

// SetSellSequence gets a reference to the given float32 and assigns it to the SellSequence field.
func (o *RoomPoolRoomTypeType) SetSellSequence(v float32) {
	o.SellSequence = &v
}

// GetSendToInterface returns the SendToInterface field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetSendToInterface() bool {
	if o == nil || IsNil(o.SendToInterface) {
		var ret bool
		return ret
	}
	return *o.SendToInterface
}

// GetSendToInterfaceOk returns a tuple with the SendToInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetSendToInterfaceOk() (*bool, bool) {
	if o == nil || IsNil(o.SendToInterface) {
		return nil, false
	}
	return o.SendToInterface, true
}

// HasSendToInterface returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasSendToInterface() bool {
	if o != nil && !IsNil(o.SendToInterface) {
		return true
	}

	return false
}

// SetSendToInterface gets a reference to the given bool and assigns it to the SendToInterface field.
func (o *RoomPoolRoomTypeType) SetSendToInterface(v bool) {
	o.SendToInterface = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *RoomPoolRoomTypeType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetSuite returns the Suite field value if set, zero value otherwise.
func (o *RoomPoolRoomTypeType) GetSuite() bool {
	if o == nil || IsNil(o.Suite) {
		var ret bool
		return ret
	}
	return *o.Suite
}

// GetSuiteOk returns a tuple with the Suite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolRoomTypeType) GetSuiteOk() (*bool, bool) {
	if o == nil || IsNil(o.Suite) {
		return nil, false
	}
	return o.Suite, true
}

// HasSuite returns a boolean if a field has been set.
func (o *RoomPoolRoomTypeType) HasSuite() bool {
	if o != nil && !IsNil(o.Suite) {
		return true
	}

	return false
}

// SetSuite gets a reference to the given bool and assigns it to the Suite field.
func (o *RoomPoolRoomTypeType) SetSuite(v bool) {
	o.Suite = &v
}

func (o RoomPoolRoomTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomPoolRoomTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accessible) {
		toSerialize["accessible"] = o.Accessible
	}
	if !IsNil(o.ActiveDate) {
		toSerialize["activeDate"] = o.ActiveDate
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.MeetingRoom) {
		toSerialize["meetingRoom"] = o.MeetingRoom
	}
	if !IsNil(o.NumberOfRooms) {
		toSerialize["numberOfRooms"] = o.NumberOfRooms
	}
	if !IsNil(o.Pseudo) {
		toSerialize["pseudo"] = o.Pseudo
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.RoomClass) {
		toSerialize["roomClass"] = o.RoomClass
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.SellSequence) {
		toSerialize["sellSequence"] = o.SellSequence
	}
	if !IsNil(o.SendToInterface) {
		toSerialize["sendToInterface"] = o.SendToInterface
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.Suite) {
		toSerialize["suite"] = o.Suite
	}
	return toSerialize, nil
}

type NullableRoomPoolRoomTypeType struct {
	value *RoomPoolRoomTypeType
	isSet bool
}

func (v NullableRoomPoolRoomTypeType) Get() *RoomPoolRoomTypeType {
	return v.value
}

func (v *NullableRoomPoolRoomTypeType) Set(val *RoomPoolRoomTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomPoolRoomTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomPoolRoomTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomPoolRoomTypeType(val *RoomPoolRoomTypeType) *NullableRoomPoolRoomTypeType {
	return &NullableRoomPoolRoomTypeType{value: val, isSet: true}
}

func (v NullableRoomPoolRoomTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomPoolRoomTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


