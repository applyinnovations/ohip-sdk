/*
OPERA Cloud Room Rotation Service API

APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmr

import (
	"encoding/json"
)

// checks if the ReservationRotationPointsAdjustmentLogType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationRotationPointsAdjustmentLogType{}

// ReservationRotationPointsAdjustmentLogType Reservation rotation points adjustment log.
type ReservationRotationPointsAdjustmentLogType struct {
	// The number of points for the specific calculation rule after the change of points.
	AdjustedPointsTo *float32 `json:"adjustedPointsTo,omitempty"`
	AdjustmentReason *ReservationRotationPointsAdjustmentReasonType `json:"adjustmentReason,omitempty"`
	// The date and time that the adjustment was made to the rotation points for the room.
	LogDate *string `json:"logDate,omitempty"`
	// The points that were applicable for the specific calculation rule before the change of points.
	OriginalPoints *float32 `json:"originalPoints,omitempty"`
	Type *RotationRuleCalculationRuleType `json:"type,omitempty"`
	UserId *UniqueIDType `json:"userId,omitempty"`
	// Unique application login of the user who made the adjustment.
	UserName *string `json:"userName,omitempty"`
}

// NewReservationRotationPointsAdjustmentLogType instantiates a new ReservationRotationPointsAdjustmentLogType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationRotationPointsAdjustmentLogType() *ReservationRotationPointsAdjustmentLogType {
	this := ReservationRotationPointsAdjustmentLogType{}
	return &this
}

// NewReservationRotationPointsAdjustmentLogTypeWithDefaults instantiates a new ReservationRotationPointsAdjustmentLogType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationRotationPointsAdjustmentLogTypeWithDefaults() *ReservationRotationPointsAdjustmentLogType {
	this := ReservationRotationPointsAdjustmentLogType{}
	return &this
}

// GetAdjustedPointsTo returns the AdjustedPointsTo field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetAdjustedPointsTo() float32 {
	if o == nil || IsNil(o.AdjustedPointsTo) {
		var ret float32
		return ret
	}
	return *o.AdjustedPointsTo
}

// GetAdjustedPointsToOk returns a tuple with the AdjustedPointsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetAdjustedPointsToOk() (*float32, bool) {
	if o == nil || IsNil(o.AdjustedPointsTo) {
		return nil, false
	}
	return o.AdjustedPointsTo, true
}

// HasAdjustedPointsTo returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasAdjustedPointsTo() bool {
	if o != nil && !IsNil(o.AdjustedPointsTo) {
		return true
	}

	return false
}

// SetAdjustedPointsTo gets a reference to the given float32 and assigns it to the AdjustedPointsTo field.
func (o *ReservationRotationPointsAdjustmentLogType) SetAdjustedPointsTo(v float32) {
	o.AdjustedPointsTo = &v
}

// GetAdjustmentReason returns the AdjustmentReason field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetAdjustmentReason() ReservationRotationPointsAdjustmentReasonType {
	if o == nil || IsNil(o.AdjustmentReason) {
		var ret ReservationRotationPointsAdjustmentReasonType
		return ret
	}
	return *o.AdjustmentReason
}

// GetAdjustmentReasonOk returns a tuple with the AdjustmentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetAdjustmentReasonOk() (*ReservationRotationPointsAdjustmentReasonType, bool) {
	if o == nil || IsNil(o.AdjustmentReason) {
		return nil, false
	}
	return o.AdjustmentReason, true
}

// HasAdjustmentReason returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasAdjustmentReason() bool {
	if o != nil && !IsNil(o.AdjustmentReason) {
		return true
	}

	return false
}

// SetAdjustmentReason gets a reference to the given ReservationRotationPointsAdjustmentReasonType and assigns it to the AdjustmentReason field.
func (o *ReservationRotationPointsAdjustmentLogType) SetAdjustmentReason(v ReservationRotationPointsAdjustmentReasonType) {
	o.AdjustmentReason = &v
}

// GetLogDate returns the LogDate field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetLogDate() string {
	if o == nil || IsNil(o.LogDate) {
		var ret string
		return ret
	}
	return *o.LogDate
}

// GetLogDateOk returns a tuple with the LogDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetLogDateOk() (*string, bool) {
	if o == nil || IsNil(o.LogDate) {
		return nil, false
	}
	return o.LogDate, true
}

// HasLogDate returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasLogDate() bool {
	if o != nil && !IsNil(o.LogDate) {
		return true
	}

	return false
}

// SetLogDate gets a reference to the given string and assigns it to the LogDate field.
func (o *ReservationRotationPointsAdjustmentLogType) SetLogDate(v string) {
	o.LogDate = &v
}

// GetOriginalPoints returns the OriginalPoints field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetOriginalPoints() float32 {
	if o == nil || IsNil(o.OriginalPoints) {
		var ret float32
		return ret
	}
	return *o.OriginalPoints
}

// GetOriginalPointsOk returns a tuple with the OriginalPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetOriginalPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalPoints) {
		return nil, false
	}
	return o.OriginalPoints, true
}

// HasOriginalPoints returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasOriginalPoints() bool {
	if o != nil && !IsNil(o.OriginalPoints) {
		return true
	}

	return false
}

// SetOriginalPoints gets a reference to the given float32 and assigns it to the OriginalPoints field.
func (o *ReservationRotationPointsAdjustmentLogType) SetOriginalPoints(v float32) {
	o.OriginalPoints = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetType() RotationRuleCalculationRuleType {
	if o == nil || IsNil(o.Type) {
		var ret RotationRuleCalculationRuleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetTypeOk() (*RotationRuleCalculationRuleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RotationRuleCalculationRuleType and assigns it to the Type field.
func (o *ReservationRotationPointsAdjustmentLogType) SetType(v RotationRuleCalculationRuleType) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetUserId() UniqueIDType {
	if o == nil || IsNil(o.UserId) {
		var ret UniqueIDType
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetUserIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given UniqueIDType and assigns it to the UserId field.
func (o *ReservationRotationPointsAdjustmentLogType) SetUserId(v UniqueIDType) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ReservationRotationPointsAdjustmentLogType) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsAdjustmentLogType) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ReservationRotationPointsAdjustmentLogType) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ReservationRotationPointsAdjustmentLogType) SetUserName(v string) {
	o.UserName = &v
}

func (o ReservationRotationPointsAdjustmentLogType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationRotationPointsAdjustmentLogType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustedPointsTo) {
		toSerialize["adjustedPointsTo"] = o.AdjustedPointsTo
	}
	if !IsNil(o.AdjustmentReason) {
		toSerialize["adjustmentReason"] = o.AdjustmentReason
	}
	if !IsNil(o.LogDate) {
		toSerialize["logDate"] = o.LogDate
	}
	if !IsNil(o.OriginalPoints) {
		toSerialize["originalPoints"] = o.OriginalPoints
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableReservationRotationPointsAdjustmentLogType struct {
	value *ReservationRotationPointsAdjustmentLogType
	isSet bool
}

func (v NullableReservationRotationPointsAdjustmentLogType) Get() *ReservationRotationPointsAdjustmentLogType {
	return v.value
}

func (v *NullableReservationRotationPointsAdjustmentLogType) Set(val *ReservationRotationPointsAdjustmentLogType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationRotationPointsAdjustmentLogType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationRotationPointsAdjustmentLogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationRotationPointsAdjustmentLogType(val *ReservationRotationPointsAdjustmentLogType) *NullableReservationRotationPointsAdjustmentLogType {
	return &NullableReservationRotationPointsAdjustmentLogType{value: val, isSet: true}
}

func (v NullableReservationRotationPointsAdjustmentLogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationRotationPointsAdjustmentLogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


