/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the RelationshipProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipProfileType{}

// RelationshipProfileType struct for RelationshipProfileType
type RelationshipProfileType struct {
	ProfileIdList *UniqueIDListType `json:"profileIdList,omitempty"`
	ProfileType *ProfileTypeType `json:"profileType,omitempty"`
}

// NewRelationshipProfileType instantiates a new RelationshipProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipProfileType() *RelationshipProfileType {
	this := RelationshipProfileType{}
	return &this
}

// NewRelationshipProfileTypeWithDefaults instantiates a new RelationshipProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipProfileTypeWithDefaults() *RelationshipProfileType {
	this := RelationshipProfileType{}
	return &this
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *RelationshipProfileType) GetProfileIdList() UniqueIDListType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipProfileType) GetProfileIdListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *RelationshipProfileType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given UniqueIDListType and assigns it to the ProfileIdList field.
func (o *RelationshipProfileType) SetProfileIdList(v UniqueIDListType) {
	o.ProfileIdList = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *RelationshipProfileType) GetProfileType() ProfileTypeType {
	if o == nil || IsNil(o.ProfileType) {
		var ret ProfileTypeType
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipProfileType) GetProfileTypeOk() (*ProfileTypeType, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *RelationshipProfileType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given ProfileTypeType and assigns it to the ProfileType field.
func (o *RelationshipProfileType) SetProfileType(v ProfileTypeType) {
	o.ProfileType = &v
}

func (o RelationshipProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	return toSerialize, nil
}

type NullableRelationshipProfileType struct {
	value *RelationshipProfileType
	isSet bool
}

func (v NullableRelationshipProfileType) Get() *RelationshipProfileType {
	return v.value
}

func (v *NullableRelationshipProfileType) Set(val *RelationshipProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipProfileType(val *RelationshipProfileType) *NullableRelationshipProfileType {
	return &NullableRelationshipProfileType{value: val, isSet: true}
}

func (v NullableRelationshipProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


