/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the RelationshipInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipInfoType{}

// RelationshipInfoType Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
type RelationshipInfoType struct {
	RelationshipProfile *RelationshipProfileType `json:"relationshipProfile,omitempty"`
}

// NewRelationshipInfoType instantiates a new RelationshipInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipInfoType() *RelationshipInfoType {
	this := RelationshipInfoType{}
	return &this
}

// NewRelationshipInfoTypeWithDefaults instantiates a new RelationshipInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipInfoTypeWithDefaults() *RelationshipInfoType {
	this := RelationshipInfoType{}
	return &this
}

// GetRelationshipProfile returns the RelationshipProfile field value if set, zero value otherwise.
func (o *RelationshipInfoType) GetRelationshipProfile() RelationshipProfileType {
	if o == nil || IsNil(o.RelationshipProfile) {
		var ret RelationshipProfileType
		return ret
	}
	return *o.RelationshipProfile
}

// GetRelationshipProfileOk returns a tuple with the RelationshipProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipInfoType) GetRelationshipProfileOk() (*RelationshipProfileType, bool) {
	if o == nil || IsNil(o.RelationshipProfile) {
		return nil, false
	}
	return o.RelationshipProfile, true
}

// HasRelationshipProfile returns a boolean if a field has been set.
func (o *RelationshipInfoType) HasRelationshipProfile() bool {
	if o != nil && !IsNil(o.RelationshipProfile) {
		return true
	}

	return false
}

// SetRelationshipProfile gets a reference to the given RelationshipProfileType and assigns it to the RelationshipProfile field.
func (o *RelationshipInfoType) SetRelationshipProfile(v RelationshipProfileType) {
	o.RelationshipProfile = &v
}

func (o RelationshipInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RelationshipProfile) {
		toSerialize["relationshipProfile"] = o.RelationshipProfile
	}
	return toSerialize, nil
}

type NullableRelationshipInfoType struct {
	value *RelationshipInfoType
	isSet bool
}

func (v NullableRelationshipInfoType) Get() *RelationshipInfoType {
	return v.value
}

func (v *NullableRelationshipInfoType) Set(val *RelationshipInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipInfoType(val *RelationshipInfoType) *NullableRelationshipInfoType {
	return &NullableRelationshipInfoType{value: val, isSet: true}
}

func (v NullableRelationshipInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


