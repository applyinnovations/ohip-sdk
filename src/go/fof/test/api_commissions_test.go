/*
OPERA Cloud Front Desk Operations Service

Testing CommissionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fof

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/fof"
)

func Test_fof_CommissionsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CommissionsApiService AssociateCommissionAgentToReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionAgentId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.AssociateCommissionAgentToReservations(context.Background(), commissionAgentId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService CalculateCommissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.CalculateCommissions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService ChangeCommission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.ChangeCommission(context.Background(), commissionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService ChangeCommissionCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bankAccountId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.ChangeCommissionCheck(context.Background(), bankAccountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService ChangeCommissionPaymentActivityByRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bankAccountId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.ChangeCommissionPaymentActivityByRange(context.Background(), bankAccountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService DiscardCommissionChecks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.DiscardCommissionChecks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetBankAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.GetBankAccounts(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetCommission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.GetCommission(context.Background(), commissionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetCommissionNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.GetCommissionNotes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetCommissionPaymentDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CommissionsApi.GetCommissionPaymentDetails(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetCommissionPaymentsActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bankAccountId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.GetCommissionPaymentsActivity(context.Background(), bankAccountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetCommissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.GetCommissions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetReservationsForCommissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var bankAccountId string
		var agentId string

		resp, httpRes, err := apiClient.CommissionsApi.GetReservationsForCommissions(context.Background(), hotelId, bankAccountId, agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService GetTravelAgentsForCommissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var bankAccountId string

		resp, httpRes, err := apiClient.CommissionsApi.GetTravelAgentsForCommissions(context.Background(), hotelId, bankAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService ProcessCommissionPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.ProcessCommissionPayments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService RecalculateCommissionOnCodeChange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionCode string
		var commissionId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.RecalculateCommissionOnCodeChange(context.Background(), commissionCode, commissionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService RemoveCommission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.RemoveCommission(context.Background(), commissionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService RemoveCommissionAgentFromReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commissionAgentId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.RemoveCommissionAgentFromReservations(context.Background(), commissionAgentId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService ReprintCommissionCheckByRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bankAccountId string
		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.ReprintCommissionCheckByRange(context.Background(), bankAccountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommissionsApiService SetProcessingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CommissionsApi.SetProcessingInstructions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
