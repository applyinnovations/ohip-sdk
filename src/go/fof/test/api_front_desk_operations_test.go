/*
OPERA Cloud Front Desk Operations Service

Testing FrontDeskOperationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fof

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/fof"
)

func Test_fof_FrontDeskOperationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FrontDeskOperationsApiService AddReservationToQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.AddReservationToQueue(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService AssignRoomsAI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.AssignRoomsAI(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService AutoAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.AutoAssignRoom(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService AutoUnAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.AutoUnAssignRoom(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteAdvanceCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteAssignRoom(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteCheckin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteCheckin(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docketId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteDailyDocket(context.Background(), docketId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteReservationFromQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteReservationFromQueue(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteRoomKey(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteServiceRequests(context.Background(), serviceRequestId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeleteWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeleteWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService DeliverQueueRoomsTextMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.DeliverQueueRoomsTextMessage(context.Background(), messageType, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService FetchAiraLastRunStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.FetchAiraLastRunStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetFloorPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetFloorPlans(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetFulfillmentActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetFulfillmentActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetHotelRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetHotelRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetLinkedReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetLinkedReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetQueueRoomsTextMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetQueueRoomsTextMessage(context.Background(), messageType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetReservationSummaries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetReservationSummaries(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetReservationsForBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetReservationsForBilling(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetReservationsInQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetReservationsInQueue(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetResvForBatchCCAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetResvForBatchCCAuth(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetRoomInterfaceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetRoomInterfaceStatus(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetRoomKeyInterfaceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetRoomKeyInterfaceDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetRoomKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetRoomKeys(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetRoomMoveHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetRoomMoveHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetSuggestedRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetSuggestedRooms(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService GetWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.GetWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService MoveInHouseGuest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.MoveInHouseGuest(context.Background(), roomId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PlaceRoomsOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PlaceRoomsOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostAdvanceCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostMassAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostMassAdvanceCheckIn(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostMassCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostMassCheckIn(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostRoomAssignment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostRoomAssignment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostRoomKey(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PostWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PostWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService ProcessBatchCCAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.ProcessBatchCCAuth(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutReservationQueuePriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutReservationQueuePriority(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutRoomInterfaceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutRoomInterfaceStatus(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutRoomKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutRoomKeys(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService PutWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.PutWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService ReadRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.ReadRoomKey(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService ReleaseRoomsOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.ReleaseRoomsOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService ShiftRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var sourceReservationId string
		var targetReservationId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.ShiftRooms(context.Background(), hotelId, sourceReservationId, targetReservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService SwapRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var sourceReservationId string
		var targetReservationId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.SwapRooms(context.Background(), hotelId, sourceReservationId, targetReservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsApiService VerifyCheckinReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsApi.VerifyCheckinReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
