/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the AwardsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardsType{}

// AwardsType List of awards.
type AwardsType struct {
	Items []AwardType
}

// NewAwardsType instantiates a new AwardsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardsType() *AwardsType {
	this := AwardsType{}
	return &this
}

// NewAwardsTypeWithDefaults instantiates a new AwardsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardsTypeWithDefaults() *AwardsType {
	this := AwardsType{}
	return &this
}

func (o AwardsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *AwardsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableAwardsType struct {
	value AwardsType
	isSet bool
}

func (v NullableAwardsType) Get() AwardsType {
	return v.value
}

func (v *NullableAwardsType) Set(val AwardsType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardsType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardsType(val AwardsType) *NullableAwardsType {
	return &NullableAwardsType{value: val, isSet: true}
}

func (v NullableAwardsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


