/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// CommissionStatusType Simple type for commission status. Valid values are Unpaid and Paid.
type CommissionStatusType string

// List of commissionStatusType
const (
	COMMISSIONSTATUSTYPE_UNPAID CommissionStatusType = "Unpaid"
	COMMISSIONSTATUSTYPE_PAID CommissionStatusType = "Paid"
)

// All allowed values of CommissionStatusType enum
var AllowedCommissionStatusTypeEnumValues = []CommissionStatusType{
	"Unpaid",
	"Paid",
}

func (v *CommissionStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionStatusType(value)
	for _, existing := range AllowedCommissionStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionStatusType", value)
}

// NewCommissionStatusTypeFromValue returns a pointer to a valid CommissionStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionStatusTypeFromValue(v string) (*CommissionStatusType, error) {
	ev := CommissionStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionStatusType: valid values are %v", v, AllowedCommissionStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionStatusType) IsValid() bool {
	for _, existing := range AllowedCommissionStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionStatusType value
func (v CommissionStatusType) Ptr() *CommissionStatusType {
	return &v
}

type NullableCommissionStatusType struct {
	value *CommissionStatusType
	isSet bool
}

func (v NullableCommissionStatusType) Get() *CommissionStatusType {
	return v.value
}

func (v *NullableCommissionStatusType) Set(val *CommissionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionStatusType(val *CommissionStatusType) *NullableCommissionStatusType {
	return &NullableCommissionStatusType{value: val, isSet: true}
}

func (v NullableCommissionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

