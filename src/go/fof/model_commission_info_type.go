/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CommissionInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionInfoType{}

// CommissionInfoType Commission processing information including related bank, agents or source and funds details.
type CommissionInfoType struct {
	BankAccount *BankAccountType `json:"bankAccount,omitempty"`
	CommissionAgents *CommissionAgentsType `json:"commissionAgents,omitempty"`
	CommissionSummary *CommissionSummaryType `json:"commissionSummary,omitempty"`
}

// NewCommissionInfoType instantiates a new CommissionInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionInfoType() *CommissionInfoType {
	this := CommissionInfoType{}
	return &this
}

// NewCommissionInfoTypeWithDefaults instantiates a new CommissionInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionInfoTypeWithDefaults() *CommissionInfoType {
	this := CommissionInfoType{}
	return &this
}

// GetBankAccount returns the BankAccount field value if set, zero value otherwise.
func (o *CommissionInfoType) GetBankAccount() BankAccountType {
	if o == nil || IsNil(o.BankAccount) {
		var ret BankAccountType
		return ret
	}
	return *o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionInfoType) GetBankAccountOk() (*BankAccountType, bool) {
	if o == nil || IsNil(o.BankAccount) {
		return nil, false
	}
	return o.BankAccount, true
}

// HasBankAccount returns a boolean if a field has been set.
func (o *CommissionInfoType) HasBankAccount() bool {
	if o != nil && !IsNil(o.BankAccount) {
		return true
	}

	return false
}

// SetBankAccount gets a reference to the given BankAccountType and assigns it to the BankAccount field.
func (o *CommissionInfoType) SetBankAccount(v BankAccountType) {
	o.BankAccount = &v
}

// GetCommissionAgents returns the CommissionAgents field value if set, zero value otherwise.
func (o *CommissionInfoType) GetCommissionAgents() CommissionAgentsType {
	if o == nil || IsNil(o.CommissionAgents) {
		var ret CommissionAgentsType
		return ret
	}
	return *o.CommissionAgents
}

// GetCommissionAgentsOk returns a tuple with the CommissionAgents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionInfoType) GetCommissionAgentsOk() (*CommissionAgentsType, bool) {
	if o == nil || IsNil(o.CommissionAgents) {
		return nil, false
	}
	return o.CommissionAgents, true
}

// HasCommissionAgents returns a boolean if a field has been set.
func (o *CommissionInfoType) HasCommissionAgents() bool {
	if o != nil && !IsNil(o.CommissionAgents) {
		return true
	}

	return false
}

// SetCommissionAgents gets a reference to the given CommissionAgentsType and assigns it to the CommissionAgents field.
func (o *CommissionInfoType) SetCommissionAgents(v CommissionAgentsType) {
	o.CommissionAgents = &v
}

// GetCommissionSummary returns the CommissionSummary field value if set, zero value otherwise.
func (o *CommissionInfoType) GetCommissionSummary() CommissionSummaryType {
	if o == nil || IsNil(o.CommissionSummary) {
		var ret CommissionSummaryType
		return ret
	}
	return *o.CommissionSummary
}

// GetCommissionSummaryOk returns a tuple with the CommissionSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionInfoType) GetCommissionSummaryOk() (*CommissionSummaryType, bool) {
	if o == nil || IsNil(o.CommissionSummary) {
		return nil, false
	}
	return o.CommissionSummary, true
}

// HasCommissionSummary returns a boolean if a field has been set.
func (o *CommissionInfoType) HasCommissionSummary() bool {
	if o != nil && !IsNil(o.CommissionSummary) {
		return true
	}

	return false
}

// SetCommissionSummary gets a reference to the given CommissionSummaryType and assigns it to the CommissionSummary field.
func (o *CommissionInfoType) SetCommissionSummary(v CommissionSummaryType) {
	o.CommissionSummary = &v
}

func (o CommissionInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccount) {
		toSerialize["bankAccount"] = o.BankAccount
	}
	if !IsNil(o.CommissionAgents) {
		toSerialize["commissionAgents"] = o.CommissionAgents
	}
	if !IsNil(o.CommissionSummary) {
		toSerialize["commissionSummary"] = o.CommissionSummary
	}
	return toSerialize, nil
}

type NullableCommissionInfoType struct {
	value *CommissionInfoType
	isSet bool
}

func (v NullableCommissionInfoType) Get() *CommissionInfoType {
	return v.value
}

func (v *NullableCommissionInfoType) Set(val *CommissionInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionInfoType(val *CommissionInfoType) *NullableCommissionInfoType {
	return &NullableCommissionInfoType{value: val, isSet: true}
}

func (v NullableCommissionInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


