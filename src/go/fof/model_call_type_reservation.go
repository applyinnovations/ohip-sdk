/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CallTypeReservation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallTypeReservation{}

// CallTypeReservation Holds Reservation Id and Hotel Code.
type CallTypeReservation struct {
	// Holds Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	ReservationIdList *ReservationIdList `json:"reservationIdList,omitempty"`
}

// NewCallTypeReservation instantiates a new CallTypeReservation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallTypeReservation() *CallTypeReservation {
	this := CallTypeReservation{}
	return &this
}

// NewCallTypeReservationWithDefaults instantiates a new CallTypeReservation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallTypeReservationWithDefaults() *CallTypeReservation {
	this := CallTypeReservation{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CallTypeReservation) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTypeReservation) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CallTypeReservation) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CallTypeReservation) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *CallTypeReservation) GetReservationIdList() ReservationIdList {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret ReservationIdList
		return ret
	}
	return *o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTypeReservation) GetReservationIdListOk() (*ReservationIdList, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *CallTypeReservation) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given ReservationIdList and assigns it to the ReservationIdList field.
func (o *CallTypeReservation) SetReservationIdList(v ReservationIdList) {
	o.ReservationIdList = &v
}

func (o CallTypeReservation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallTypeReservation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	return toSerialize, nil
}

type NullableCallTypeReservation struct {
	value *CallTypeReservation
	isSet bool
}

func (v NullableCallTypeReservation) Get() *CallTypeReservation {
	return v.value
}

func (v *NullableCallTypeReservation) Set(val *CallTypeReservation) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTypeReservation) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTypeReservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTypeReservation(val *CallTypeReservation) *NullableCallTypeReservation {
	return &NullableCallTypeReservation{value: val, isSet: true}
}

func (v NullableCallTypeReservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTypeReservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


