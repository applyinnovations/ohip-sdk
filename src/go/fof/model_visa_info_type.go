/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the VisaInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisaInfoType{}

// VisaInfoType struct for VisaInfoType
type VisaInfoType struct {
	VisaExpiryDate *string `json:"visaExpiryDate,omitempty"`
	VisaIssueDate *string `json:"visaIssueDate,omitempty"`
	VisaNumber *string `json:"visaNumber,omitempty"`
}

// NewVisaInfoType instantiates a new VisaInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisaInfoType() *VisaInfoType {
	this := VisaInfoType{}
	return &this
}

// NewVisaInfoTypeWithDefaults instantiates a new VisaInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisaInfoTypeWithDefaults() *VisaInfoType {
	this := VisaInfoType{}
	return &this
}

// GetVisaExpiryDate returns the VisaExpiryDate field value if set, zero value otherwise.
func (o *VisaInfoType) GetVisaExpiryDate() string {
	if o == nil || IsNil(o.VisaExpiryDate) {
		var ret string
		return ret
	}
	return *o.VisaExpiryDate
}

// GetVisaExpiryDateOk returns a tuple with the VisaExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisaInfoType) GetVisaExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.VisaExpiryDate) {
		return nil, false
	}
	return o.VisaExpiryDate, true
}

// HasVisaExpiryDate returns a boolean if a field has been set.
func (o *VisaInfoType) HasVisaExpiryDate() bool {
	if o != nil && !IsNil(o.VisaExpiryDate) {
		return true
	}

	return false
}

// SetVisaExpiryDate gets a reference to the given string and assigns it to the VisaExpiryDate field.
func (o *VisaInfoType) SetVisaExpiryDate(v string) {
	o.VisaExpiryDate = &v
}

// GetVisaIssueDate returns the VisaIssueDate field value if set, zero value otherwise.
func (o *VisaInfoType) GetVisaIssueDate() string {
	if o == nil || IsNil(o.VisaIssueDate) {
		var ret string
		return ret
	}
	return *o.VisaIssueDate
}

// GetVisaIssueDateOk returns a tuple with the VisaIssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisaInfoType) GetVisaIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.VisaIssueDate) {
		return nil, false
	}
	return o.VisaIssueDate, true
}

// HasVisaIssueDate returns a boolean if a field has been set.
func (o *VisaInfoType) HasVisaIssueDate() bool {
	if o != nil && !IsNil(o.VisaIssueDate) {
		return true
	}

	return false
}

// SetVisaIssueDate gets a reference to the given string and assigns it to the VisaIssueDate field.
func (o *VisaInfoType) SetVisaIssueDate(v string) {
	o.VisaIssueDate = &v
}

// GetVisaNumber returns the VisaNumber field value if set, zero value otherwise.
func (o *VisaInfoType) GetVisaNumber() string {
	if o == nil || IsNil(o.VisaNumber) {
		var ret string
		return ret
	}
	return *o.VisaNumber
}

// GetVisaNumberOk returns a tuple with the VisaNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisaInfoType) GetVisaNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VisaNumber) {
		return nil, false
	}
	return o.VisaNumber, true
}

// HasVisaNumber returns a boolean if a field has been set.
func (o *VisaInfoType) HasVisaNumber() bool {
	if o != nil && !IsNil(o.VisaNumber) {
		return true
	}

	return false
}

// SetVisaNumber gets a reference to the given string and assigns it to the VisaNumber field.
func (o *VisaInfoType) SetVisaNumber(v string) {
	o.VisaNumber = &v
}

func (o VisaInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisaInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VisaExpiryDate) {
		toSerialize["visaExpiryDate"] = o.VisaExpiryDate
	}
	if !IsNil(o.VisaIssueDate) {
		toSerialize["visaIssueDate"] = o.VisaIssueDate
	}
	if !IsNil(o.VisaNumber) {
		toSerialize["visaNumber"] = o.VisaNumber
	}
	return toSerialize, nil
}

type NullableVisaInfoType struct {
	value *VisaInfoType
	isSet bool
}

func (v NullableVisaInfoType) Get() *VisaInfoType {
	return v.value
}

func (v *NullableVisaInfoType) Set(val *VisaInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableVisaInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableVisaInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisaInfoType(val *VisaInfoType) *NullableVisaInfoType {
	return &NullableVisaInfoType{value: val, isSet: true}
}

func (v NullableVisaInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisaInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


