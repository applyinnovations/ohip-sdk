/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomKeyEncoderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomKeyEncoderType{}

// RoomKeyEncoderType struct for RoomKeyEncoderType
type RoomKeyEncoderType struct {
	DeviceArea *string `json:"deviceArea,omitempty"`
	EncoderId *string `json:"encoderId,omitempty"`
	InterfaceId *string `json:"interfaceId,omitempty"`
	Location *string `json:"location,omitempty"`
	Workstation *string `json:"workstation,omitempty"`
}

// NewRoomKeyEncoderType instantiates a new RoomKeyEncoderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomKeyEncoderType() *RoomKeyEncoderType {
	this := RoomKeyEncoderType{}
	return &this
}

// NewRoomKeyEncoderTypeWithDefaults instantiates a new RoomKeyEncoderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomKeyEncoderTypeWithDefaults() *RoomKeyEncoderType {
	this := RoomKeyEncoderType{}
	return &this
}

// GetDeviceArea returns the DeviceArea field value if set, zero value otherwise.
func (o *RoomKeyEncoderType) GetDeviceArea() string {
	if o == nil || IsNil(o.DeviceArea) {
		var ret string
		return ret
	}
	return *o.DeviceArea
}

// GetDeviceAreaOk returns a tuple with the DeviceArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyEncoderType) GetDeviceAreaOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceArea) {
		return nil, false
	}
	return o.DeviceArea, true
}

// HasDeviceArea returns a boolean if a field has been set.
func (o *RoomKeyEncoderType) HasDeviceArea() bool {
	if o != nil && !IsNil(o.DeviceArea) {
		return true
	}

	return false
}

// SetDeviceArea gets a reference to the given string and assigns it to the DeviceArea field.
func (o *RoomKeyEncoderType) SetDeviceArea(v string) {
	o.DeviceArea = &v
}

// GetEncoderId returns the EncoderId field value if set, zero value otherwise.
func (o *RoomKeyEncoderType) GetEncoderId() string {
	if o == nil || IsNil(o.EncoderId) {
		var ret string
		return ret
	}
	return *o.EncoderId
}

// GetEncoderIdOk returns a tuple with the EncoderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyEncoderType) GetEncoderIdOk() (*string, bool) {
	if o == nil || IsNil(o.EncoderId) {
		return nil, false
	}
	return o.EncoderId, true
}

// HasEncoderId returns a boolean if a field has been set.
func (o *RoomKeyEncoderType) HasEncoderId() bool {
	if o != nil && !IsNil(o.EncoderId) {
		return true
	}

	return false
}

// SetEncoderId gets a reference to the given string and assigns it to the EncoderId field.
func (o *RoomKeyEncoderType) SetEncoderId(v string) {
	o.EncoderId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *RoomKeyEncoderType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyEncoderType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *RoomKeyEncoderType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *RoomKeyEncoderType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *RoomKeyEncoderType) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyEncoderType) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *RoomKeyEncoderType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *RoomKeyEncoderType) SetLocation(v string) {
	o.Location = &v
}

// GetWorkstation returns the Workstation field value if set, zero value otherwise.
func (o *RoomKeyEncoderType) GetWorkstation() string {
	if o == nil || IsNil(o.Workstation) {
		var ret string
		return ret
	}
	return *o.Workstation
}

// GetWorkstationOk returns a tuple with the Workstation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyEncoderType) GetWorkstationOk() (*string, bool) {
	if o == nil || IsNil(o.Workstation) {
		return nil, false
	}
	return o.Workstation, true
}

// HasWorkstation returns a boolean if a field has been set.
func (o *RoomKeyEncoderType) HasWorkstation() bool {
	if o != nil && !IsNil(o.Workstation) {
		return true
	}

	return false
}

// SetWorkstation gets a reference to the given string and assigns it to the Workstation field.
func (o *RoomKeyEncoderType) SetWorkstation(v string) {
	o.Workstation = &v
}

func (o RoomKeyEncoderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomKeyEncoderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceArea) {
		toSerialize["deviceArea"] = o.DeviceArea
	}
	if !IsNil(o.EncoderId) {
		toSerialize["encoderId"] = o.EncoderId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Workstation) {
		toSerialize["workstation"] = o.Workstation
	}
	return toSerialize, nil
}

type NullableRoomKeyEncoderType struct {
	value *RoomKeyEncoderType
	isSet bool
}

func (v NullableRoomKeyEncoderType) Get() *RoomKeyEncoderType {
	return v.value
}

func (v *NullableRoomKeyEncoderType) Set(val *RoomKeyEncoderType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyEncoderType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyEncoderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyEncoderType(val *RoomKeyEncoderType) *NullableRoomKeyEncoderType {
	return &NullableRoomKeyEncoderType{value: val, isSet: true}
}

func (v NullableRoomKeyEncoderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyEncoderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


