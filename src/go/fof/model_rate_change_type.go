/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RateChangeType Simple type for rate change type.
type RateChangeType string

// List of rateChangeType
const (
	RATECHANGETYPE_VERIFY RateChangeType = "Verify"
	RATECHANGETYPE_OLD_RATE RateChangeType = "OldRate"
	RATECHANGETYPE_NEW_RATE RateChangeType = "NewRate"
)

// All allowed values of RateChangeType enum
var AllowedRateChangeTypeEnumValues = []RateChangeType{
	"Verify",
	"OldRate",
	"NewRate",
}

func (v *RateChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RateChangeType(value)
	for _, existing := range AllowedRateChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RateChangeType", value)
}

// NewRateChangeTypeFromValue returns a pointer to a valid RateChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRateChangeTypeFromValue(v string) (*RateChangeType, error) {
	ev := RateChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RateChangeType: valid values are %v", v, AllowedRateChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RateChangeType) IsValid() bool {
	for _, existing := range AllowedRateChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rateChangeType value
func (v RateChangeType) Ptr() *RateChangeType {
	return &v
}

type NullableRateChangeType struct {
	value *RateChangeType
	isSet bool
}

func (v NullableRateChangeType) Get() *RateChangeType {
	return v.value
}

func (v *NullableRateChangeType) Set(val *RateChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateChangeType(val *RateChangeType) *NullableRateChangeType {
	return &NullableRateChangeType{value: val, isSet: true}
}

func (v NullableRateChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

