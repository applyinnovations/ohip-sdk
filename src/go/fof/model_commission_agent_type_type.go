/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// CommissionAgentTypeType Simple type for commission agent type. Valid values are Agent and Source.
type CommissionAgentTypeType string

// List of commissionAgentTypeType
const (
	COMMISSIONAGENTTYPETYPE_AGENT CommissionAgentTypeType = "Agent"
	COMMISSIONAGENTTYPETYPE_SOURCE CommissionAgentTypeType = "Source"
)

// All allowed values of CommissionAgentTypeType enum
var AllowedCommissionAgentTypeTypeEnumValues = []CommissionAgentTypeType{
	"Agent",
	"Source",
}

func (v *CommissionAgentTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionAgentTypeType(value)
	for _, existing := range AllowedCommissionAgentTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionAgentTypeType", value)
}

// NewCommissionAgentTypeTypeFromValue returns a pointer to a valid CommissionAgentTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionAgentTypeTypeFromValue(v string) (*CommissionAgentTypeType, error) {
	ev := CommissionAgentTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionAgentTypeType: valid values are %v", v, AllowedCommissionAgentTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionAgentTypeType) IsValid() bool {
	for _, existing := range AllowedCommissionAgentTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionAgentTypeType value
func (v CommissionAgentTypeType) Ptr() *CommissionAgentTypeType {
	return &v
}

type NullableCommissionAgentTypeType struct {
	value *CommissionAgentTypeType
	isSet bool
}

func (v NullableCommissionAgentTypeType) Get() *CommissionAgentTypeType {
	return v.value
}

func (v *NullableCommissionAgentTypeType) Set(val *CommissionAgentTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionAgentTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionAgentTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionAgentTypeType(val *CommissionAgentTypeType) *NullableCommissionAgentTypeType {
	return &NullableCommissionAgentTypeType{value: val, isSet: true}
}

func (v NullableCommissionAgentTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionAgentTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

