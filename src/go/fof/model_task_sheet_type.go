/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// TaskSheetType Task Sheet classification.
type TaskSheetType string

// List of taskSheetType
const (
	TASKSHEETTYPE_NO_SERVICE_REQUIRED TaskSheetType = "NoServiceRequired"
	TASKSHEETTYPE_DO_NOT_DISTURB TaskSheetType = "DoNotDisturb"
	TASKSHEETTYPE_MANUALLY_CREATED TaskSheetType = "ManuallyCreated"
	TASKSHEETTYPE_AUTOMATIC_GENERATION TaskSheetType = "AutomaticGeneration"
	TASKSHEETTYPE_ISOLATED TaskSheetType = "Isolated"
	TASKSHEETTYPE_EXTRA_ROOMS TaskSheetType = "ExtraRooms"
)

// All allowed values of TaskSheetType enum
var AllowedTaskSheetTypeEnumValues = []TaskSheetType{
	"NoServiceRequired",
	"DoNotDisturb",
	"ManuallyCreated",
	"AutomaticGeneration",
	"Isolated",
	"ExtraRooms",
}

func (v *TaskSheetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskSheetType(value)
	for _, existing := range AllowedTaskSheetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskSheetType", value)
}

// NewTaskSheetTypeFromValue returns a pointer to a valid TaskSheetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskSheetTypeFromValue(v string) (*TaskSheetType, error) {
	ev := TaskSheetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskSheetType: valid values are %v", v, AllowedTaskSheetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskSheetType) IsValid() bool {
	for _, existing := range AllowedTaskSheetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to taskSheetType value
func (v TaskSheetType) Ptr() *TaskSheetType {
	return &v
}

type NullableTaskSheetType struct {
	value *TaskSheetType
	isSet bool
}

func (v NullableTaskSheetType) Get() *TaskSheetType {
	return v.value
}

func (v *NullableTaskSheetType) Set(val *TaskSheetType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSheetType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSheetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSheetType(val *TaskSheetType) *NullableTaskSheetType {
	return &NullableTaskSheetType{value: val, isSet: true}
}

func (v NullableTaskSheetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSheetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

