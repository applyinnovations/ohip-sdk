/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CommissionsApiService CommissionsApi service
type CommissionsApiService service

type CommissionsApiAssociateCommissionAgentToReservationsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionAgentId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	associateCommissionAgentToReservations *AssociateCommissionAgentToReservationsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) Authorization(authorization string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) XAppKey(xAppKey string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) XHotelid(xHotelid string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for associating reservations to Travel Agent or Source Profile.
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) AssociateCommissionAgentToReservations(associateCommissionAgentToReservations AssociateCommissionAgentToReservationsRequest) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.associateCommissionAgentToReservations = &associateCommissionAgentToReservations
	return r
}

// External system code.
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) XExternalsystem(xExternalsystem string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiAssociateCommissionAgentToReservationsRequest) Execute() (*AssociateCommissionAgentToReservationsStatus, *http.Response, error) {
	return r.ApiService.AssociateCommissionAgentToReservationsExecute(r)
}

/*
AssociateCommissionAgentToReservations Operation to associate commission agent to reservations.

 <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionAgentId Unique Id of the Commission Agent.
 @param hotelId All reservation ids in the list must belong to this property.
 @return CommissionsApiAssociateCommissionAgentToReservationsRequest
*/
func (a *CommissionsApiService) AssociateCommissionAgentToReservations(ctx context.Context, commissionAgentId string, hotelId string) CommissionsApiAssociateCommissionAgentToReservationsRequest {
	return CommissionsApiAssociateCommissionAgentToReservationsRequest{
		ApiService: a,
		ctx: ctx,
		commissionAgentId: commissionAgentId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AssociateCommissionAgentToReservationsStatus
func (a *CommissionsApiService) AssociateCommissionAgentToReservationsExecute(r CommissionsApiAssociateCommissionAgentToReservationsRequest) (*AssociateCommissionAgentToReservationsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssociateCommissionAgentToReservationsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.AssociateCommissionAgentToReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionAgentId"+"}", url.PathEscape(parameterValueToString(r.commissionAgentId, "commissionAgentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionAgentId) < 1 {
		return localVarReturnValue, nil, reportError("commissionAgentId must have at least 1 elements")
	}
	if strlen(r.commissionAgentId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionAgentId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.associateCommissionAgentToReservations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiCalculateCommissionsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	calculateCommissions *CalculateCommissionsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiCalculateCommissionsRequest) Authorization(authorization string) CommissionsApiCalculateCommissionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiCalculateCommissionsRequest) XAppKey(xAppKey string) CommissionsApiCalculateCommissionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiCalculateCommissionsRequest) XHotelid(xHotelid string) CommissionsApiCalculateCommissionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for calculation of commission for all Travel Agent and/or Source.
func (r CommissionsApiCalculateCommissionsRequest) CalculateCommissions(calculateCommissions CalculateCommissionsRequest) CommissionsApiCalculateCommissionsRequest {
	r.calculateCommissions = &calculateCommissions
	return r
}

// External system code.
func (r CommissionsApiCalculateCommissionsRequest) XExternalsystem(xExternalsystem string) CommissionsApiCalculateCommissionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiCalculateCommissionsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiCalculateCommissionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiCalculateCommissionsRequest) Execute() (*CalculateCommissionsStatus, *http.Response, error) {
	return r.ApiService.CalculateCommissionsExecute(r)
}

/*
CalculateCommissions Operation to calculate commissions.

 <p><strong>OperationId:</strong>calculateCommissions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the commissions to be calculated.
 @return CommissionsApiCalculateCommissionsRequest
*/
func (a *CommissionsApiService) CalculateCommissions(ctx context.Context, hotelId string) CommissionsApiCalculateCommissionsRequest {
	return CommissionsApiCalculateCommissionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CalculateCommissionsStatus
func (a *CommissionsApiService) CalculateCommissionsExecute(r CommissionsApiCalculateCommissionsRequest) (*CalculateCommissionsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CalculateCommissionsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.CalculateCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.calculateCommissions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiChangeCommissionRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionToBeChanged *ChangeCommissionRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiChangeCommissionRequest) Authorization(authorization string) CommissionsApiChangeCommissionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiChangeCommissionRequest) XAppKey(xAppKey string) CommissionsApiChangeCommissionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiChangeCommissionRequest) XHotelid(xHotelid string) CommissionsApiChangeCommissionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for update of commission detail.
func (r CommissionsApiChangeCommissionRequest) CommissionToBeChanged(commissionToBeChanged ChangeCommissionRequest) CommissionsApiChangeCommissionRequest {
	r.commissionToBeChanged = &commissionToBeChanged
	return r
}

// External system code.
func (r CommissionsApiChangeCommissionRequest) XExternalsystem(xExternalsystem string) CommissionsApiChangeCommissionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiChangeCommissionRequest) AcceptLanguage(acceptLanguage string) CommissionsApiChangeCommissionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiChangeCommissionRequest) Execute() (*CommissionStatus, *http.Response, error) {
	return r.ApiService.ChangeCommissionExecute(r)
}

/*
ChangeCommission Operation to change commission.

 <p><strong>OperationId:</strong>changeCommission</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionId Unique id of the commission.
 @param hotelId Property of the commission record.
 @return CommissionsApiChangeCommissionRequest
*/
func (a *CommissionsApiService) ChangeCommission(ctx context.Context, commissionId string, hotelId string) CommissionsApiChangeCommissionRequest {
	return CommissionsApiChangeCommissionRequest{
		ApiService: a,
		ctx: ctx,
		commissionId: commissionId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionStatus
func (a *CommissionsApiService) ChangeCommissionExecute(r CommissionsApiChangeCommissionRequest) (*CommissionStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.ChangeCommission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions/{commissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionId"+"}", url.PathEscape(parameterValueToString(r.commissionId, "commissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionId) < 1 {
		return localVarReturnValue, nil, reportError("commissionId must have at least 1 elements")
	}
	if strlen(r.commissionId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.commissionToBeChanged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiChangeCommissionCheckRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	bankAccountId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionCheckToBeChanged *ChangeCommissionCheckRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiChangeCommissionCheckRequest) Authorization(authorization string) CommissionsApiChangeCommissionCheckRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiChangeCommissionCheckRequest) XAppKey(xAppKey string) CommissionsApiChangeCommissionCheckRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiChangeCommissionCheckRequest) XHotelid(xHotelid string) CommissionsApiChangeCommissionCheckRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for updating commission check.
func (r CommissionsApiChangeCommissionCheckRequest) CommissionCheckToBeChanged(commissionCheckToBeChanged ChangeCommissionCheckRequest) CommissionsApiChangeCommissionCheckRequest {
	r.commissionCheckToBeChanged = &commissionCheckToBeChanged
	return r
}

// External system code.
func (r CommissionsApiChangeCommissionCheckRequest) XExternalsystem(xExternalsystem string) CommissionsApiChangeCommissionCheckRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiChangeCommissionCheckRequest) AcceptLanguage(acceptLanguage string) CommissionsApiChangeCommissionCheckRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiChangeCommissionCheckRequest) Execute() (*CommissionCheckStatus, *http.Response, error) {
	return r.ApiService.ChangeCommissionCheckExecute(r)
}

/*
ChangeCommissionCheck Operation to change commission check.

 <p><strong>OperationId:</strong>changeCommissionCheck</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Unique id of bank account.
 @param hotelId Property of the commission record.
 @return CommissionsApiChangeCommissionCheckRequest
*/
func (a *CommissionsApiService) ChangeCommissionCheck(ctx context.Context, bankAccountId string, hotelId string) CommissionsApiChangeCommissionCheckRequest {
	return CommissionsApiChangeCommissionCheckRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionCheckStatus
func (a *CommissionsApiService) ChangeCommissionCheckExecute(r CommissionsApiChangeCommissionCheckRequest) (*CommissionCheckStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionCheckStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.ChangeCommissionCheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionChecks"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.commissionCheckToBeChanged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiChangeCommissionPaymentActivityByRangeRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	bankAccountId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionPaymentActivityByRangeToBeChanged *ChangeCommissionPaymentActivityByRangeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) Authorization(authorization string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) XAppKey(xAppKey string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) XHotelid(xHotelid string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for updating a range of payments activity.
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) CommissionPaymentActivityByRangeToBeChanged(commissionPaymentActivityByRangeToBeChanged ChangeCommissionPaymentActivityByRangeRequest) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.commissionPaymentActivityByRangeToBeChanged = &commissionPaymentActivityByRangeToBeChanged
	return r
}

// External system code.
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) XExternalsystem(xExternalsystem string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) AcceptLanguage(acceptLanguage string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) Execute() (*CommissionPaymentActivityByRangeStatus, *http.Response, error) {
	return r.ApiService.ChangeCommissionPaymentActivityByRangeExecute(r)
}

/*
ChangeCommissionPaymentActivityByRange Operation to change commission payment activity by range.

 <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Unique id of bank account.
 @param hotelId Property of the commission record.
 @return CommissionsApiChangeCommissionPaymentActivityByRangeRequest
*/
func (a *CommissionsApiService) ChangeCommissionPaymentActivityByRange(ctx context.Context, bankAccountId string, hotelId string) CommissionsApiChangeCommissionPaymentActivityByRangeRequest {
	return CommissionsApiChangeCommissionPaymentActivityByRangeRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionPaymentActivityByRangeStatus
func (a *CommissionsApiService) ChangeCommissionPaymentActivityByRangeExecute(r CommissionsApiChangeCommissionPaymentActivityByRangeRequest) (*CommissionPaymentActivityByRangeStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionPaymentActivityByRangeStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.ChangeCommissionPaymentActivityByRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.commissionPaymentActivityByRangeToBeChanged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiDiscardCommissionChecksRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	bankAccountId *string
	idExtension *int32
	idContext *string
	type_ *string
	batchId *string
	batchIdIdExtension *int32
	batchIdIdContext *string
	batchIdType *string
	fromCheck *float32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiDiscardCommissionChecksRequest) Authorization(authorization string) CommissionsApiDiscardCommissionChecksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiDiscardCommissionChecksRequest) XAppKey(xAppKey string) CommissionsApiDiscardCommissionChecksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiDiscardCommissionChecksRequest) XHotelid(xHotelid string) CommissionsApiDiscardCommissionChecksRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiDiscardCommissionChecksRequest) BankAccountId(bankAccountId string) CommissionsApiDiscardCommissionChecksRequest {
	r.bankAccountId = &bankAccountId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiDiscardCommissionChecksRequest) IdExtension(idExtension int32) CommissionsApiDiscardCommissionChecksRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiDiscardCommissionChecksRequest) IdContext(idContext string) CommissionsApiDiscardCommissionChecksRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiDiscardCommissionChecksRequest) Type_(type_ string) CommissionsApiDiscardCommissionChecksRequest {
	r.type_ = &type_
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiDiscardCommissionChecksRequest) BatchId(batchId string) CommissionsApiDiscardCommissionChecksRequest {
	r.batchId = &batchId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiDiscardCommissionChecksRequest) BatchIdIdExtension(batchIdIdExtension int32) CommissionsApiDiscardCommissionChecksRequest {
	r.batchIdIdExtension = &batchIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiDiscardCommissionChecksRequest) BatchIdIdContext(batchIdIdContext string) CommissionsApiDiscardCommissionChecksRequest {
	r.batchIdIdContext = &batchIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiDiscardCommissionChecksRequest) BatchIdType(batchIdType string) CommissionsApiDiscardCommissionChecksRequest {
	r.batchIdType = &batchIdType
	return r
}

// The range start value of checks to be discarded.
func (r CommissionsApiDiscardCommissionChecksRequest) FromCheck(fromCheck float32) CommissionsApiDiscardCommissionChecksRequest {
	r.fromCheck = &fromCheck
	return r
}

// External system code.
func (r CommissionsApiDiscardCommissionChecksRequest) XExternalsystem(xExternalsystem string) CommissionsApiDiscardCommissionChecksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiDiscardCommissionChecksRequest) AcceptLanguage(acceptLanguage string) CommissionsApiDiscardCommissionChecksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiDiscardCommissionChecksRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DiscardCommissionChecksExecute(r)
}

/*
DiscardCommissionChecks Operation to discard commission checks.

 <p><strong>OperationId:</strong>discardCommissionChecks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the commission record.
 @return CommissionsApiDiscardCommissionChecksRequest
*/
func (a *CommissionsApiService) DiscardCommissionChecks(ctx context.Context, hotelId string) CommissionsApiDiscardCommissionChecksRequest {
	return CommissionsApiDiscardCommissionChecksRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionsApiService) DiscardCommissionChecksExecute(r CommissionsApiDiscardCommissionChecksRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.DiscardCommissionChecks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissionChecks"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.bankAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountId", r.bankAccountId, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.batchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BatchId", r.batchId, "")
	}
	if r.batchIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdExtension", r.batchIdIdExtension, "")
	}
	if r.batchIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdContext", r.batchIdIdContext, "")
	}
	if r.batchIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdType", r.batchIdType, "")
	}
	if r.fromCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCheck", r.fromCheck, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetBankAccountsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	bankName *string
	bankAccountNo *string
	currency *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetBankAccountsRequest) Authorization(authorization string) CommissionsApiGetBankAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetBankAccountsRequest) XAppKey(xAppKey string) CommissionsApiGetBankAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetBankAccountsRequest) XHotelid(xHotelid string) CommissionsApiGetBankAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Either full or first part of the bank name.
func (r CommissionsApiGetBankAccountsRequest) BankName(bankName string) CommissionsApiGetBankAccountsRequest {
	r.bankName = &bankName
	return r
}

// Either full or first part of the bank account number.
func (r CommissionsApiGetBankAccountsRequest) BankAccountNo(bankAccountNo string) CommissionsApiGetBankAccountsRequest {
	r.bankAccountNo = &bankAccountNo
	return r
}

// Currency used by the bank account.
func (r CommissionsApiGetBankAccountsRequest) Currency(currency string) CommissionsApiGetBankAccountsRequest {
	r.currency = &currency
	return r
}

// External system code.
func (r CommissionsApiGetBankAccountsRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetBankAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetBankAccountsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetBankAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetBankAccountsRequest) Execute() (*BankAccountsDetails, *http.Response, error) {
	return r.ApiService.GetBankAccountsExecute(r)
}

/*
GetBankAccounts Operation to fetch bank accounts.

 <p><strong>OperationId:</strong>getBankAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the bank accounts.
 @return CommissionsApiGetBankAccountsRequest
*/
func (a *CommissionsApiService) GetBankAccounts(ctx context.Context, hotelId string) CommissionsApiGetBankAccountsRequest {
	return CommissionsApiGetBankAccountsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BankAccountsDetails
func (a *CommissionsApiService) GetBankAccountsExecute(r CommissionsApiGetBankAccountsRequest) (*BankAccountsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankAccountsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetBankAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.bankName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankName", r.bankName, "")
	}
	if r.bankAccountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountNo", r.bankAccountNo, "")
	}
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetCommissionRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idExtension *int32
	idContext *string
	type_ *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetCommissionRequest) Authorization(authorization string) CommissionsApiGetCommissionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetCommissionRequest) XAppKey(xAppKey string) CommissionsApiGetCommissionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetCommissionRequest) XHotelid(xHotelid string) CommissionsApiGetCommissionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionRequest) IdExtension(idExtension int32) CommissionsApiGetCommissionRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionRequest) IdContext(idContext string) CommissionsApiGetCommissionRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionRequest) Type_(type_ string) CommissionsApiGetCommissionRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r CommissionsApiGetCommissionRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetCommissionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetCommissionRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetCommissionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetCommissionRequest) Execute() (*CommissionDetails, *http.Response, error) {
	return r.ApiService.GetCommissionExecute(r)
}

/*
GetCommission Operation to fetch commission.

 <p><strong>OperationId:</strong>getCommission</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionId Unique id of the commission.
 @param hotelId Property of the commission record.
 @return CommissionsApiGetCommissionRequest
*/
func (a *CommissionsApiService) GetCommission(ctx context.Context, commissionId string, hotelId string) CommissionsApiGetCommissionRequest {
	return CommissionsApiGetCommissionRequest{
		ApiService: a,
		ctx: ctx,
		commissionId: commissionId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionDetails
func (a *CommissionsApiService) GetCommissionExecute(r CommissionsApiGetCommissionRequest) (*CommissionDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetCommission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions/{commissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionId"+"}", url.PathEscape(parameterValueToString(r.commissionId, "commissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionId) < 1 {
		return localVarReturnValue, nil, reportError("commissionId must have at least 1 elements")
	}
	if strlen(r.commissionId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetCommissionNotesRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idExtension *int32
	idContext *string
	type_ *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetCommissionNotesRequest) Authorization(authorization string) CommissionsApiGetCommissionNotesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetCommissionNotesRequest) XAppKey(xAppKey string) CommissionsApiGetCommissionNotesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetCommissionNotesRequest) XHotelid(xHotelid string) CommissionsApiGetCommissionNotesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionNotesRequest) IdExtension(idExtension int32) CommissionsApiGetCommissionNotesRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionNotesRequest) IdContext(idContext string) CommissionsApiGetCommissionNotesRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionNotesRequest) Type_(type_ string) CommissionsApiGetCommissionNotesRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r CommissionsApiGetCommissionNotesRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetCommissionNotesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetCommissionNotesRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetCommissionNotesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetCommissionNotesRequest) Execute() (*CommissionNotesDetails, *http.Response, error) {
	return r.ApiService.GetCommissionNotesExecute(r)
}

/*
GetCommissionNotes Operation to fetch commission notes.

 <p><strong>OperationId:</strong>getCommissionNotes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Reservation Id for which the commission notes are to be fetched.
 @param hotelId Property code against which commissions notes are to be fetched.
 @return CommissionsApiGetCommissionNotesRequest
*/
func (a *CommissionsApiService) GetCommissionNotes(ctx context.Context, reservationId string, hotelId string) CommissionsApiGetCommissionNotesRequest {
	return CommissionsApiGetCommissionNotesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionNotesDetails
func (a *CommissionsApiService) GetCommissionNotesExecute(r CommissionsApiGetCommissionNotesRequest) (*CommissionNotesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionNotesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetCommissionNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/commissionNotes"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetCommissionPaymentDetailsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	reservationId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetCommissionPaymentDetailsRequest) Authorization(authorization string) CommissionsApiGetCommissionPaymentDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetCommissionPaymentDetailsRequest) XAppKey(xAppKey string) CommissionsApiGetCommissionPaymentDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetCommissionPaymentDetailsRequest) XHotelid(xHotelid string) CommissionsApiGetCommissionPaymentDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionsApiGetCommissionPaymentDetailsRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetCommissionPaymentDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetCommissionPaymentDetailsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetCommissionPaymentDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetCommissionPaymentDetailsRequest) Execute() (*CommissionPaymentDetails, *http.Response, error) {
	return r.ApiService.GetCommissionPaymentDetailsExecute(r)
}

/*
GetCommissionPaymentDetails Fetch Commission Payment Details

You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel
 @param reservationId Unique ID of the reservation
 @return CommissionsApiGetCommissionPaymentDetailsRequest
*/
func (a *CommissionsApiService) GetCommissionPaymentDetails(ctx context.Context, hotelId string, reservationId string) CommissionsApiGetCommissionPaymentDetailsRequest {
	return CommissionsApiGetCommissionPaymentDetailsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		reservationId: reservationId,
	}
}

// Execute executes the request
//  @return CommissionPaymentDetails
func (a *CommissionsApiService) GetCommissionPaymentDetailsExecute(r CommissionsApiGetCommissionPaymentDetailsRequest) (*CommissionPaymentDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionPaymentDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetCommissionPaymentDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/commissionPaymentDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetCommissionPaymentsActivityRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	bankAccountId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idExtension *int32
	idContext *string
	type_ *string
	batchId *string
	batchIdIdExtension *int32
	batchIdIdContext *string
	batchIdType *string
	fileName *string
	payee *string
	checkNo *float32
	status *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetCommissionPaymentsActivityRequest) Authorization(authorization string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetCommissionPaymentsActivityRequest) XAppKey(xAppKey string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetCommissionPaymentsActivityRequest) XHotelid(xHotelid string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) IdExtension(idExtension int32) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionPaymentsActivityRequest) IdContext(idContext string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) Type_(type_ string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.type_ = &type_
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) BatchId(batchId string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.batchId = &batchId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) BatchIdIdExtension(batchIdIdExtension int32) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.batchIdIdExtension = &batchIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionPaymentsActivityRequest) BatchIdIdContext(batchIdIdContext string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.batchIdIdContext = &batchIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) BatchIdType(batchIdType string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.batchIdType = &batchIdType
	return r
}

// File name if payment method is EFT.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) FileName(fileName string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.fileName = &fileName
	return r
}

// File name if payment method is EFT.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) Payee(payee string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.payee = &payee
	return r
}

// Check no of payment.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) CheckNo(checkNo float32) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.checkNo = &checkNo
	return r
}

// Simple type for payment activity status type. Valid values are Outstanding, Reconciled, Unpresented and Void.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) Status(status []string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.status = &status
	return r
}

// External system code.
func (r CommissionsApiGetCommissionPaymentsActivityRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetCommissionPaymentsActivityRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetCommissionPaymentsActivityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetCommissionPaymentsActivityRequest) Execute() (*CommissionPaymentsActivityDetails, *http.Response, error) {
	return r.ApiService.GetCommissionPaymentsActivityExecute(r)
}

/*
GetCommissionPaymentsActivity Operation to fetch commission payments activity.

 <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Unique id of bank account.
 @param hotelId Property of the commission record.
 @return CommissionsApiGetCommissionPaymentsActivityRequest
*/
func (a *CommissionsApiService) GetCommissionPaymentsActivity(ctx context.Context, bankAccountId string, hotelId string) CommissionsApiGetCommissionPaymentsActivityRequest {
	return CommissionsApiGetCommissionPaymentsActivityRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionPaymentsActivityDetails
func (a *CommissionsApiService) GetCommissionPaymentsActivityExecute(r CommissionsApiGetCommissionPaymentsActivityRequest) (*CommissionPaymentsActivityDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionPaymentsActivityDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetCommissionPaymentsActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.batchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchId", r.batchId, "")
	}
	if r.batchIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdExtension", r.batchIdIdExtension, "")
	}
	if r.batchIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdContext", r.batchIdIdContext, "")
	}
	if r.batchIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdType", r.batchIdType, "")
	}
	if r.fileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileName", r.fileName, "")
	}
	if r.payee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "payee", r.payee, "")
	}
	if r.checkNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkNo", r.checkNo, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetCommissionsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	bankAccountId *string
	idExtension *int32
	idContext *string
	type_ *string
	agentId *string
	agentIdIdExtension *int32
	agentIdIdContext *string
	agentIdType *string
	resvNameId *string
	resvNameIdIdExtension *int32
	resvNameIdIdContext *string
	resvNameIdType *string
	commissionId *string
	commissionIdIdExtension *int32
	commissionIdIdContext *string
	commissionIdType *string
	batchId *string
	batchIdIdExtension *int32
	batchIdIdContext *string
	batchIdType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetCommissionsRequest) Authorization(authorization string) CommissionsApiGetCommissionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetCommissionsRequest) XAppKey(xAppKey string) CommissionsApiGetCommissionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetCommissionsRequest) XHotelid(xHotelid string) CommissionsApiGetCommissionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionsRequest) BankAccountId(bankAccountId string) CommissionsApiGetCommissionsRequest {
	r.bankAccountId = &bankAccountId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionsRequest) IdExtension(idExtension int32) CommissionsApiGetCommissionsRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionsRequest) IdContext(idContext string) CommissionsApiGetCommissionsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionsRequest) Type_(type_ string) CommissionsApiGetCommissionsRequest {
	r.type_ = &type_
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionsRequest) AgentId(agentId string) CommissionsApiGetCommissionsRequest {
	r.agentId = &agentId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionsRequest) AgentIdIdExtension(agentIdIdExtension int32) CommissionsApiGetCommissionsRequest {
	r.agentIdIdExtension = &agentIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionsRequest) AgentIdIdContext(agentIdIdContext string) CommissionsApiGetCommissionsRequest {
	r.agentIdIdContext = &agentIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionsRequest) AgentIdType(agentIdType string) CommissionsApiGetCommissionsRequest {
	r.agentIdType = &agentIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionsRequest) ResvNameId(resvNameId string) CommissionsApiGetCommissionsRequest {
	r.resvNameId = &resvNameId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionsRequest) ResvNameIdIdExtension(resvNameIdIdExtension int32) CommissionsApiGetCommissionsRequest {
	r.resvNameIdIdExtension = &resvNameIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionsRequest) ResvNameIdIdContext(resvNameIdIdContext string) CommissionsApiGetCommissionsRequest {
	r.resvNameIdIdContext = &resvNameIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionsRequest) ResvNameIdType(resvNameIdType string) CommissionsApiGetCommissionsRequest {
	r.resvNameIdType = &resvNameIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionsRequest) CommissionId(commissionId string) CommissionsApiGetCommissionsRequest {
	r.commissionId = &commissionId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionsRequest) CommissionIdIdExtension(commissionIdIdExtension int32) CommissionsApiGetCommissionsRequest {
	r.commissionIdIdExtension = &commissionIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionsRequest) CommissionIdIdContext(commissionIdIdContext string) CommissionsApiGetCommissionsRequest {
	r.commissionIdIdContext = &commissionIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionsRequest) CommissionIdType(commissionIdType string) CommissionsApiGetCommissionsRequest {
	r.commissionIdType = &commissionIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiGetCommissionsRequest) BatchId(batchId string) CommissionsApiGetCommissionsRequest {
	r.batchId = &batchId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiGetCommissionsRequest) BatchIdIdExtension(batchIdIdExtension int32) CommissionsApiGetCommissionsRequest {
	r.batchIdIdExtension = &batchIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiGetCommissionsRequest) BatchIdIdContext(batchIdIdContext string) CommissionsApiGetCommissionsRequest {
	r.batchIdIdContext = &batchIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiGetCommissionsRequest) BatchIdType(batchIdType string) CommissionsApiGetCommissionsRequest {
	r.batchIdType = &batchIdType
	return r
}

// External system code.
func (r CommissionsApiGetCommissionsRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetCommissionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetCommissionsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetCommissionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetCommissionsRequest) Execute() (*CommissionsDetails, *http.Response, error) {
	return r.ApiService.GetCommissionsExecute(r)
}

/*
GetCommissions Operation to fetch commissions.

 <p><strong>OperationId:</strong>getCommissions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the commission record.
 @return CommissionsApiGetCommissionsRequest
*/
func (a *CommissionsApiService) GetCommissions(ctx context.Context, hotelId string) CommissionsApiGetCommissionsRequest {
	return CommissionsApiGetCommissionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionsDetails
func (a *CommissionsApiService) GetCommissionsExecute(r CommissionsApiGetCommissionsRequest) (*CommissionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.bankAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountId", r.bankAccountId, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.agentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentId", r.agentId, "")
	}
	if r.agentIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentIdIdExtension", r.agentIdIdExtension, "")
	}
	if r.agentIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentIdIdContext", r.agentIdIdContext, "")
	}
	if r.agentIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agentIdType", r.agentIdType, "")
	}
	if r.resvNameId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resvNameId", r.resvNameId, "")
	}
	if r.resvNameIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resvNameIdIdExtension", r.resvNameIdIdExtension, "")
	}
	if r.resvNameIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resvNameIdIdContext", r.resvNameIdIdContext, "")
	}
	if r.resvNameIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resvNameIdType", r.resvNameIdType, "")
	}
	if r.commissionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionId", r.commissionId, "")
	}
	if r.commissionIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionIdIdExtension", r.commissionIdIdExtension, "")
	}
	if r.commissionIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionIdIdContext", r.commissionIdIdContext, "")
	}
	if r.commissionIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionIdType", r.commissionIdType, "")
	}
	if r.batchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchId", r.batchId, "")
	}
	if r.batchIdIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdExtension", r.batchIdIdExtension, "")
	}
	if r.batchIdIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIdContext", r.batchIdIdContext, "")
	}
	if r.batchIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdType", r.batchIdType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetReservationsForCommissionsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	bankAccountId string
	agentId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	guestName *string
	confirmationNo *string
	reservationStatus *[]string
	accountReceivableOffset *bool
	onHold *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetReservationsForCommissionsRequest) Authorization(authorization string) CommissionsApiGetReservationsForCommissionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetReservationsForCommissionsRequest) XAppKey(xAppKey string) CommissionsApiGetReservationsForCommissionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetReservationsForCommissionsRequest) XHotelid(xHotelid string) CommissionsApiGetReservationsForCommissionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r CommissionsApiGetReservationsForCommissionsRequest) Limit(limit int32) CommissionsApiGetReservationsForCommissionsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r CommissionsApiGetReservationsForCommissionsRequest) Offset(offset int32) CommissionsApiGetReservationsForCommissionsRequest {
	r.offset = &offset
	return r
}

// Indicates the guest name of the reservation that is to be returned 
func (r CommissionsApiGetReservationsForCommissionsRequest) GuestName(guestName string) CommissionsApiGetReservationsForCommissionsRequest {
	r.guestName = &guestName
	return r
}

// Indicates the confirmation number of the reservation that is to be returned 
func (r CommissionsApiGetReservationsForCommissionsRequest) ConfirmationNo(confirmationNo string) CommissionsApiGetReservationsForCommissionsRequest {
	r.confirmationNo = &confirmationNo
	return r
}

// Indicates the status of the reservations that is to be returned 
func (r CommissionsApiGetReservationsForCommissionsRequest) ReservationStatus(reservationStatus []string) CommissionsApiGetReservationsForCommissionsRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// When set to true only reservations flagged for account receivables are returned
func (r CommissionsApiGetReservationsForCommissionsRequest) AccountReceivableOffset(accountReceivableOffset bool) CommissionsApiGetReservationsForCommissionsRequest {
	r.accountReceivableOffset = &accountReceivableOffset
	return r
}

// When set to true only reservations having a commission hold code are returned
func (r CommissionsApiGetReservationsForCommissionsRequest) OnHold(onHold bool) CommissionsApiGetReservationsForCommissionsRequest {
	r.onHold = &onHold
	return r
}

// External system code.
func (r CommissionsApiGetReservationsForCommissionsRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetReservationsForCommissionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetReservationsForCommissionsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetReservationsForCommissionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetReservationsForCommissionsRequest) Execute() (*CommissionsDetails, *http.Response, error) {
	return r.ApiService.GetReservationsForCommissionsExecute(r)
}

/*
GetReservationsForCommissions Operation to fetch Reservations for Commissions associated to a Travel Agent

 <p><strong>OperationId:</strong>getReservationsForCommissions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Reservations for commissions.
 @param bankAccountId A unique identifying value(ID) to represent the Bank.
 @param agentId A unique identifying value(ID) to represent the Travel Agent associated with the commission.
 @return CommissionsApiGetReservationsForCommissionsRequest
*/
func (a *CommissionsApiService) GetReservationsForCommissions(ctx context.Context, hotelId string, bankAccountId string, agentId string) CommissionsApiGetReservationsForCommissionsRequest {
	return CommissionsApiGetReservationsForCommissionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		bankAccountId: bankAccountId,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return CommissionsDetails
func (a *CommissionsApiService) GetReservationsForCommissionsExecute(r CommissionsApiGetReservationsForCommissionsRequest) (*CommissionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetReservationsForCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/agents/{agentId}/reservationsForCommissions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}
	if strlen(r.agentId) < 1 {
		return localVarReturnValue, nil, reportError("agentId must have at least 1 elements")
	}
	if strlen(r.agentId) > 2000 {
		return localVarReturnValue, nil, reportError("agentId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.guestName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guestName", r.guestName, "")
	}
	if r.confirmationNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNo", r.confirmationNo, "")
	}
	if r.reservationStatus != nil {
		t := *r.reservationStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", t, "multi")
		}
	}
	if r.accountReceivableOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountReceivableOffset", r.accountReceivableOffset, "")
	}
	if r.onHold != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onHold", r.onHold, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiGetTravelAgentsForCommissionsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	bankAccountId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiGetTravelAgentsForCommissionsRequest) Authorization(authorization string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiGetTravelAgentsForCommissionsRequest) XAppKey(xAppKey string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiGetTravelAgentsForCommissionsRequest) XHotelid(xHotelid string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionsApiGetTravelAgentsForCommissionsRequest) XExternalsystem(xExternalsystem string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiGetTravelAgentsForCommissionsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiGetTravelAgentsForCommissionsRequest) Execute() (*CommissionsDetails, *http.Response, error) {
	return r.ApiService.GetTravelAgentsForCommissionsExecute(r)
}

/*
GetTravelAgentsForCommissions Operation to fetch Travel Agents associated with commissions for the given bank Account.

 <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the Travel Agent records.
 @param bankAccountId A unique identifying value(ID) to represent the Bank
 @return CommissionsApiGetTravelAgentsForCommissionsRequest
*/
func (a *CommissionsApiService) GetTravelAgentsForCommissions(ctx context.Context, hotelId string, bankAccountId string) CommissionsApiGetTravelAgentsForCommissionsRequest {
	return CommissionsApiGetTravelAgentsForCommissionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		bankAccountId: bankAccountId,
	}
}

// Execute executes the request
//  @return CommissionsDetails
func (a *CommissionsApiService) GetTravelAgentsForCommissionsExecute(r CommissionsApiGetTravelAgentsForCommissionsRequest) (*CommissionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.GetTravelAgentsForCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/travelAgentsForCommissions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiProcessCommissionPaymentsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	processCommissionPayments *ProcessCommissionPaymentsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiProcessCommissionPaymentsRequest) Authorization(authorization string) CommissionsApiProcessCommissionPaymentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiProcessCommissionPaymentsRequest) XAppKey(xAppKey string) CommissionsApiProcessCommissionPaymentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiProcessCommissionPaymentsRequest) XHotelid(xHotelid string) CommissionsApiProcessCommissionPaymentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for processing commission payments.
func (r CommissionsApiProcessCommissionPaymentsRequest) ProcessCommissionPayments(processCommissionPayments ProcessCommissionPaymentsRequest) CommissionsApiProcessCommissionPaymentsRequest {
	r.processCommissionPayments = &processCommissionPayments
	return r
}

// External system code.
func (r CommissionsApiProcessCommissionPaymentsRequest) XExternalsystem(xExternalsystem string) CommissionsApiProcessCommissionPaymentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiProcessCommissionPaymentsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiProcessCommissionPaymentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiProcessCommissionPaymentsRequest) Execute() (*ProcessCommissionPaymentsStatus, *http.Response, error) {
	return r.ApiService.ProcessCommissionPaymentsExecute(r)
}

/*
ProcessCommissionPayments Operation to process commission payments.

 <p><strong>OperationId:</strong>processCommissionPayments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property of the commission record.
 @return CommissionsApiProcessCommissionPaymentsRequest
*/
func (a *CommissionsApiService) ProcessCommissionPayments(ctx context.Context, hotelId string) CommissionsApiProcessCommissionPaymentsRequest {
	return CommissionsApiProcessCommissionPaymentsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ProcessCommissionPaymentsStatus
func (a *CommissionsApiService) ProcessCommissionPaymentsExecute(r CommissionsApiProcessCommissionPaymentsRequest) (*ProcessCommissionPaymentsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessCommissionPaymentsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.ProcessCommissionPayments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissionPayments"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.processCommissionPayments
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiRecalculateCommissionOnCodeChangeRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionCode string
	commissionId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	recalculateCommissionOnCodeChange *RecalculateCommissionOnCodeChangeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) Authorization(authorization string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) XAppKey(xAppKey string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) XHotelid(xHotelid string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for recalculating commission amount when commission code of unpaid commission is changed.
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) RecalculateCommissionOnCodeChange(recalculateCommissionOnCodeChange RecalculateCommissionOnCodeChangeRequest) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.recalculateCommissionOnCodeChange = &recalculateCommissionOnCodeChange
	return r
}

// External system code.
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) XExternalsystem(xExternalsystem string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) AcceptLanguage(acceptLanguage string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiRecalculateCommissionOnCodeChangeRequest) Execute() (*RecalculateCommissionOnCodeChangeStatus, *http.Response, error) {
	return r.ApiService.RecalculateCommissionOnCodeChangeExecute(r)
}

/*
RecalculateCommissionOnCodeChange Operation to recalculate commission on code change.

 <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionCode New commission code.
 @param commissionId Unique id of the commission.
 @param hotelId Property of the commission record.
 @return CommissionsApiRecalculateCommissionOnCodeChangeRequest
*/
func (a *CommissionsApiService) RecalculateCommissionOnCodeChange(ctx context.Context, commissionCode string, commissionId string, hotelId string) CommissionsApiRecalculateCommissionOnCodeChangeRequest {
	return CommissionsApiRecalculateCommissionOnCodeChangeRequest{
		ApiService: a,
		ctx: ctx,
		commissionCode: commissionCode,
		commissionId: commissionId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RecalculateCommissionOnCodeChangeStatus
func (a *CommissionsApiService) RecalculateCommissionOnCodeChangeExecute(r CommissionsApiRecalculateCommissionOnCodeChangeRequest) (*RecalculateCommissionOnCodeChangeStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecalculateCommissionOnCodeChangeStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.RecalculateCommissionOnCodeChange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions/{commissionId}/commissionCodes/{commissionCode}/recalculate"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionCode"+"}", url.PathEscape(parameterValueToString(r.commissionCode, "commissionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commissionId"+"}", url.PathEscape(parameterValueToString(r.commissionId, "commissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionCode) < 1 {
		return localVarReturnValue, nil, reportError("commissionCode must have at least 1 elements")
	}
	if strlen(r.commissionCode) > 2000 {
		return localVarReturnValue, nil, reportError("commissionCode must have less than 2000 elements")
	}
	if strlen(r.commissionId) < 1 {
		return localVarReturnValue, nil, reportError("commissionId must have at least 1 elements")
	}
	if strlen(r.commissionId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.recalculateCommissionOnCodeChange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiRemoveCommissionRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idExtension *int32
	idContext *string
	type_ *string
	detachDescription *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiRemoveCommissionRequest) Authorization(authorization string) CommissionsApiRemoveCommissionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiRemoveCommissionRequest) XAppKey(xAppKey string) CommissionsApiRemoveCommissionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiRemoveCommissionRequest) XHotelid(xHotelid string) CommissionsApiRemoveCommissionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiRemoveCommissionRequest) IdExtension(idExtension int32) CommissionsApiRemoveCommissionRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiRemoveCommissionRequest) IdContext(idContext string) CommissionsApiRemoveCommissionRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiRemoveCommissionRequest) Type_(type_ string) CommissionsApiRemoveCommissionRequest {
	r.type_ = &type_
	return r
}

// Used for Character Strings, length 0 to 2000.
func (r CommissionsApiRemoveCommissionRequest) DetachDescription(detachDescription string) CommissionsApiRemoveCommissionRequest {
	r.detachDescription = &detachDescription
	return r
}

// External system code.
func (r CommissionsApiRemoveCommissionRequest) XExternalsystem(xExternalsystem string) CommissionsApiRemoveCommissionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiRemoveCommissionRequest) AcceptLanguage(acceptLanguage string) CommissionsApiRemoveCommissionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiRemoveCommissionRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.RemoveCommissionExecute(r)
}

/*
RemoveCommission Operation to remove commission.

 <p><strong>OperationId:</strong>removeCommission</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionId Unique id of the commission.
 @param hotelId Property of the commission record.
 @return CommissionsApiRemoveCommissionRequest
*/
func (a *CommissionsApiService) RemoveCommission(ctx context.Context, commissionId string, hotelId string) CommissionsApiRemoveCommissionRequest {
	return CommissionsApiRemoveCommissionRequest{
		ApiService: a,
		ctx: ctx,
		commissionId: commissionId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionsApiService) RemoveCommissionExecute(r CommissionsApiRemoveCommissionRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.RemoveCommission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions/{commissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionId"+"}", url.PathEscape(parameterValueToString(r.commissionId, "commissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionId) < 1 {
		return localVarReturnValue, nil, reportError("commissionId must have at least 1 elements")
	}
	if strlen(r.commissionId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.detachDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detachDescription", r.detachDescription, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiRemoveCommissionAgentFromReservationsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	commissionAgentId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionAgentType *string
	idExtension *int32
	idContext *string
	type_ *string
	reservationId *[]string
	reservationIdIdExtension *[]int32
	reservationIdIdContext *[]string
	reservationIdType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) Authorization(authorization string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) XAppKey(xAppKey string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) XHotelid(xHotelid string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Simple type for commission agent type. Valid values are Agent and Source.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) CommissionAgentType(commissionAgentType string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.commissionAgentType = &commissionAgentType
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) IdExtension(idExtension int32) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) IdContext(idContext string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) Type_(type_ string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.type_ = &type_
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) ReservationId(reservationId []string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.reservationId = &reservationId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) ReservationIdIdExtension(reservationIdIdExtension []int32) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.reservationIdIdExtension = &reservationIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) ReservationIdIdContext(reservationIdIdContext []string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.reservationIdIdContext = &reservationIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) ReservationIdType(reservationIdType []string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// External system code.
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) XExternalsystem(xExternalsystem string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiRemoveCommissionAgentFromReservationsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.RemoveCommissionAgentFromReservationsExecute(r)
}

/*
RemoveCommissionAgentFromReservations Operation to remove commission agent from reservations.

 <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionAgentId Unique Id of the Commission Agent.
 @param hotelId All reservation ids in the list must belong to this property.
 @return CommissionsApiRemoveCommissionAgentFromReservationsRequest
*/
func (a *CommissionsApiService) RemoveCommissionAgentFromReservations(ctx context.Context, commissionAgentId string, hotelId string) CommissionsApiRemoveCommissionAgentFromReservationsRequest {
	return CommissionsApiRemoveCommissionAgentFromReservationsRequest{
		ApiService: a,
		ctx: ctx,
		commissionAgentId: commissionAgentId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionsApiService) RemoveCommissionAgentFromReservationsExecute(r CommissionsApiRemoveCommissionAgentFromReservationsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.RemoveCommissionAgentFromReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionAgentId"+"}", url.PathEscape(parameterValueToString(r.commissionAgentId, "commissionAgentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionAgentId) < 1 {
		return localVarReturnValue, nil, reportError("commissionAgentId must have at least 1 elements")
	}
	if strlen(r.commissionAgentId) > 2000 {
		return localVarReturnValue, nil, reportError("commissionAgentId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.commissionAgentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionAgentType", r.commissionAgentType, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.reservationId != nil {
		t := *r.reservationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", t, "multi")
		}
	}
	if r.reservationIdIdExtension != nil {
		t := *r.reservationIdIdExtension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdIdExtension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdIdExtension", t, "multi")
		}
	}
	if r.reservationIdIdContext != nil {
		t := *r.reservationIdIdContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdIdContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdIdContext", t, "multi")
		}
	}
	if r.reservationIdType != nil {
		t := *r.reservationIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiReprintCommissionCheckByRangeRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	bankAccountId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reprintCommissionCheckByRange *ReprintCommissionCheckByRangeRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiReprintCommissionCheckByRangeRequest) Authorization(authorization string) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiReprintCommissionCheckByRangeRequest) XAppKey(xAppKey string) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiReprintCommissionCheckByRangeRequest) XHotelid(xHotelid string) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type for reprinting a range of check payments.
func (r CommissionsApiReprintCommissionCheckByRangeRequest) ReprintCommissionCheckByRange(reprintCommissionCheckByRange ReprintCommissionCheckByRangeRequest) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.reprintCommissionCheckByRange = &reprintCommissionCheckByRange
	return r
}

// External system code.
func (r CommissionsApiReprintCommissionCheckByRangeRequest) XExternalsystem(xExternalsystem string) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiReprintCommissionCheckByRangeRequest) AcceptLanguage(acceptLanguage string) CommissionsApiReprintCommissionCheckByRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiReprintCommissionCheckByRangeRequest) Execute() (*ReprintCommissionCheckByRangeStatus, *http.Response, error) {
	return r.ApiService.ReprintCommissionCheckByRangeExecute(r)
}

/*
ReprintCommissionCheckByRange Operation to reprint commission check by range.

 <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Unique id of bank account
 @param hotelId Property of the commission record.
 @return CommissionsApiReprintCommissionCheckByRangeRequest
*/
func (a *CommissionsApiService) ReprintCommissionCheckByRange(ctx context.Context, bankAccountId string, hotelId string) CommissionsApiReprintCommissionCheckByRangeRequest {
	return CommissionsApiReprintCommissionCheckByRangeRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReprintCommissionCheckByRangeStatus
func (a *CommissionsApiService) ReprintCommissionCheckByRangeExecute(r CommissionsApiReprintCommissionCheckByRangeRequest) (*ReprintCommissionCheckByRangeStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReprintCommissionCheckByRangeStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.ReprintCommissionCheckByRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/bankAccounts/{bankAccountId}/reprintCommission"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.bankAccountId) < 1 {
		return localVarReturnValue, nil, reportError("bankAccountId must have at least 1 elements")
	}
	if strlen(r.bankAccountId) > 2000 {
		return localVarReturnValue, nil, reportError("bankAccountId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reprintCommissionCheckByRange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionsApiSetProcessingInstructionsRequest struct {
	ctx context.Context
	ApiService *CommissionsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	setProcessingInstructions *SetProcessingInstructionsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionsApiSetProcessingInstructionsRequest) Authorization(authorization string) CommissionsApiSetProcessingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CommissionsApiSetProcessingInstructionsRequest) XAppKey(xAppKey string) CommissionsApiSetProcessingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionsApiSetProcessingInstructionsRequest) XHotelid(xHotelid string) CommissionsApiSetProcessingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request Type for setting instructions for commission processing on Agent or Reservation level.
func (r CommissionsApiSetProcessingInstructionsRequest) SetProcessingInstructions(setProcessingInstructions SetProcessingInstructionsRequest) CommissionsApiSetProcessingInstructionsRequest {
	r.setProcessingInstructions = &setProcessingInstructions
	return r
}

// External system code.
func (r CommissionsApiSetProcessingInstructionsRequest) XExternalsystem(xExternalsystem string) CommissionsApiSetProcessingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionsApiSetProcessingInstructionsRequest) AcceptLanguage(acceptLanguage string) CommissionsApiSetProcessingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionsApiSetProcessingInstructionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetProcessingInstructionsExecute(r)
}

/*
SetProcessingInstructions Operation to set processing instructions.

 <p><strong>OperationId:</strong>setProcessingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Property from which the agent will be on hold for commission.
 @return CommissionsApiSetProcessingInstructionsRequest
*/
func (a *CommissionsApiService) SetProcessingInstructions(ctx context.Context, hotelId string) CommissionsApiSetProcessingInstructionsRequest {
	return CommissionsApiSetProcessingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionsApiService) SetProcessingInstructionsExecute(r CommissionsApiSetProcessingInstructionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsApiService.SetProcessingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissions/instructions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.setProcessingInstructions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
