/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// FOFStatsApiService FOFStatsApi service
type FOFStatsApiService service

type FOFStatsApiGetFrontOfficeStatisticsRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	statisticsCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	date *string
	metric *[]string
	parameterNames *[]string
	parameterValues *[]string
	roomClasses *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) Authorization(authorization string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) XAppKey(xAppKey string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) XHotelid(xHotelid string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Start date of the report.
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) Date(date string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.date = &date
	return r
}

// Supported housekeeping statistical codes.
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) Metric(metric []string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.metric = &metric
	return r
}

// Required when statisticsCode is ReservationsCancellationsToday
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) ParameterNames(parameterNames []string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.parameterNames = &parameterNames
	return r
}

// Required when statisticsCode is ReservationsCancellationsToday
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) ParameterValues(parameterValues []string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.parameterValues = &parameterValues
	return r
}

// Room Class of the Room.
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) RoomClasses(roomClasses []string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.roomClasses = &roomClasses
	return r
}

// External system code.
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) XExternalsystem(xExternalsystem string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r FOFStatsApiGetFrontOfficeStatisticsRequest) AcceptLanguage(acceptLanguage string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r FOFStatsApiGetFrontOfficeStatisticsRequest) Execute() (*Statistics, *http.Response, error) {
	return r.ApiService.GetFrontOfficeStatisticsExecute(r)
}

/*
GetFrontOfficeStatistics Get front office statistics

Use this API to return front office statistics for a specific hotel based on search criteria such as statisticsCode, hotelId, date, parameterNames, parameterValues, room Classes.<p><strong>OperationId:</strong>getFrontOfficeStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param statisticsCode Below are the Statistics Code mapping for valid metric code.<p><strong>AdvanceCheckIn:</strong></p>IndividualAdvanceCheckedInCurrent,BlockAdvanceCheckedInInhouse,BlockAdvanceCheckedInTotal,IndividualAdvanceCheckedInInhouse,IndividualAdvanceCheckedInTotal,BlockAdvanceCheckedInCurrent;<p><strong>AIRoomAssignment:</strong></p>MaxPercentageOccupiedTonightRooms,ArrivalResvs,ArrivalVIPResvs,ArrivalMemberResvs,ArrivalUnallocResvs,ArrivalManualAssgnResvs,ArrivalAIAssgnResvs,ArrivalAIUpgResvs,ArrivalAIAssgnVIPResvs,ArrivalAIAssgnMemberResvs,ArrivalAIAssgnOverridden;<p><strong>AvailableRooms:</strong></p>MinAvailableTonightRooms;<p><strong>CheckIns:</strong></p>ArrivalsTotal,CheckedInsTotal,ExpectedCheckInsTotal,QueueRooms;CheckOuts:DeparturesTotal,CheckedOutsTotal,AdultsDeparted,ChildrenDeparted,ExpectedCheckOutsTotal,AdultsExpectedCheckedOut,ChildrenExpectedCheckedOut,ScheduledCheckOutsTotal;<p><strong>ComplimentaryOrHouseUse:</strong></p>ComplimentaryArrivalRooms,ComplimentaryArrivalPersons,ComplimentaryArrivalVIP,ComplimentaryStayoverRooms,ComplimentaryStayoverPersons,ComplimentaryStayoverVIP,ComplimentaryDepartureRooms,ComplimentaryDeparturePersons,ComplimentaryDepartureVIP,HouseUseArrivalRooms,HouseUseArrivalPersons,HouseUseArrivalVIP,HouseUseStayoverRooms,HouseUseStayoverPersons,HouseUseStayoverVIP,HouseUseDepartureRooms,HouseUseDeparturePersons,HouseUseDepartureVIP;<p><strong>DailyProjection:</strong></p>IndividualRooms,IndividualPersons,IndividualVIP,GroupAndBlockRooms,GroupAndBlockPersons,GroupAndBlockVIP,MaxOccupiedTonightRooms,MaxOccupiedTonightPersons,MaxOccupiedTonightVIP,BlocksNotPickedUp,MaxPercentageOccupiedTonightRooms,MinAvailableTonightRooms,RoomRevenue,TotalRevenue,AverageRoomRevenue,RevPar;<p><strong>HouseSummary:</strong></p>TotalPhysicalRooms,TotalOutOfOrder,TotalOutOfService,TotalRoomsToSell,MaxOccupiedTonightRooms,PercentRoomsOccupied,RoomRevenue,TotalRevenue,RevPar,AverageRoomRevenue;<p><strong>HouseSummaryMonthToDate:</strong></p>TotalPhysicalRooms,TotalOutOfOrder,TotalOutOfService,TotalRoomsToSell,MaxOccupiedTonightRooms,PercentRoomsOccupied,RoomRevenue,RevPar,TotalRevenue,AverageRoomRevenue;<p><strong>HouseSummaryYearToDate:</strong></p>TotalPhysicalRooms,TotalOutOfOrder,TotalOutOfService,TotalRoomsToSell,MaxOccupiedTonightRooms,PercentRoomsOccupied,RoomRevenue,RevPar,TotalRevenue,AverageRoomRevenue;<p><strong>InHouse:</strong></p>AdultsInHouse,ChildrenInHouse,InHouseRooms,InHouse;<p><strong>LastHourStatus:</strong></p>ArrivalsInLastHour,DeparturesInLastHour,InspectedRooms,CleanedRooms;<p><strong>ReservationActivity:</strong></p>StayoverRooms,StayoverPersons,StayoverVIP,DeparturesExpectedRooms,DeparturesExpectedPersons,DeparturesExpectedVIP,DeparturesActualRooms,DeparturesActualPersons,DeparturesActualVIP,ArrivalsExpectedRooms,ArrivalsExpectedPersons,ArrivalsExpectedVIP,ArrivalsActualRooms,ArrivalsActualPersons,ArrivalsActualVIP,ArrivalsExpectedRoomsMadeToday,ArrivalsExpectedPersonsMadeToday,ArrivalsExpectedVIPMadeToday,ExtendedStaysRooms,ExtendedStaysPersons,ExtendedStaysVIP,EarlyDeparturesRooms,EarlyDeparturesPersons,EarlyDeparturesVIP,DayUseRooms,DayUsePersons,DayUseVIP,WalkInRooms,WalkInPersons,WalkInVIP,CanceledOnArrivalRooms,CanceledOnArrivalPersons,CanceledOnArrivalVIP,AverageCheckInTime;<p><strong>ReservationActivityDaily:</strong></p>AdultsInHouse,ChildrenInHouse,ArrivalsTotal,TurndownRequired,DeparturesTotal,MaxOccupancyPercentage,Stayover,TotalRoomsReserved;<p><strong>ReservationActivityMonthToDate:</strong></p>ArrivalsActualRooms,ArrivalsActualPersons,DeparturesActualRooms,DeparturesActualPersons,ExtendedStaysRooms,ExtendedStaysPersons,EarlyDeparturesRooms,EarlyDeparturesPersons,DayUseRooms,DayUsePersons;<p><strong>ReservationActivityYearToDate:</strong></p>ArrivalsActualRooms,ArrivalsActualPersons,DeparturesActualRooms,DeparturesActualPersons,ExtendedStaysRooms,ExtendedStaysPersons,EarlyDeparturesRooms,EarlyDeparturesPersons,DayUseRooms,DayUsePersons;<p><strong>ReservationsCancellationsToday:</strong></p>CancellationsTotal,NewReservationsTotal;<p><strong>ReservationStatistics:</strong></p>PreRegisteredTotal,VIPPreRegisteredTotal,TurndownTotal,VIPTurndownTotal,OpenFolioTotal,ExpectedCheckOutsTotal;<p><strong>RoomMaintenance:</strong></p>RoomMaintenanceResolvedTotal,RoomMaintenanceUnResolvedTotal;<p><strong>RoomStatus:</strong></p>InspectedVacant,InspectedAssigned,InspectedOccupied,CleanVacant,CleanAssigned,CleanOccupied,DirtyVacant,DirtyAssigned,DirtyOccupied,PickupVacant,PickupAssigned,PickupOccupied,OutOfOrderVacant,OutOfOrderAssigned,OutOfOrderOccupied,OutOfServiceVacant,OutOfServiceAssigned,OutOfServiceOccupied,TotalOutOfOrder,TotalOutOfService,QueueRooms,CurrentAveWaitTime,SkipRooms,SleepRooms;<p><strong>Turndown:</strong></p>TurndownRequired,TurndownNotRequired,TurndownCompletedRequired;<p><strong>VIPGuests:</strong></p>VIPGuestsArriving,VIPGuestsDeparting;
 @param hotelId
 @return FOFStatsApiGetFrontOfficeStatisticsRequest
*/
func (a *FOFStatsApiService) GetFrontOfficeStatistics(ctx context.Context, statisticsCode string, hotelId string) FOFStatsApiGetFrontOfficeStatisticsRequest {
	return FOFStatsApiGetFrontOfficeStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		statisticsCode: statisticsCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Statistics
func (a *FOFStatsApiService) GetFrontOfficeStatisticsExecute(r FOFStatsApiGetFrontOfficeStatisticsRequest) (*Statistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Statistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetFrontOfficeStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/frontOfficeStatistics/{statisticsCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"statisticsCode"+"}", url.PathEscape(parameterValueToString(r.statisticsCode, "statisticsCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.statisticsCode) < 1 {
		return localVarReturnValue, nil, reportError("statisticsCode must have at least 1 elements")
	}
	if strlen(r.statisticsCode) > 2000 {
		return localVarReturnValue, nil, reportError("statisticsCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "")
	}
	if r.metric != nil {
		t := *r.metric
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metric", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metric", t, "multi")
		}
	}
	if r.parameterNames != nil {
		t := *r.parameterNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterNames", t, "multi")
		}
	}
	if r.parameterValues != nil {
		t := *r.parameterValues
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValues", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValues", t, "multi")
		}
	}
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	statisticsCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	endDate *string
	date *string
	metric *[]string
	parameterNames *[]string
	parameterValues *[]string
	roomClasses *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) Authorization(authorization string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) XAppKey(xAppKey string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) XHotelid(xHotelid string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// End date of the report.
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) EndDate(endDate string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.endDate = &endDate
	return r
}

// Start date of the report.
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) Date(date string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.date = &date
	return r
}

// Supported housekeeping statistical codes.
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) Metric(metric []string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.metric = &metric
	return r
}

// Required when statisticsCode is ReservationsCancellationsToday
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) ParameterNames(parameterNames []string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.parameterNames = &parameterNames
	return r
}

// Required when statisticsCode is ReservationsCancellationsToday
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) ParameterValues(parameterValues []string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.parameterValues = &parameterValues
	return r
}

// Room Class of the Room.
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) RoomClasses(roomClasses []string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.roomClasses = &roomClasses
	return r
}

// External system code.
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) XExternalsystem(xExternalsystem string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) AcceptLanguage(acceptLanguage string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) Execute() (*Statistics, *http.Response, error) {
	return r.ApiService.GetFrontOfficeStatisticsWithDateRangeExecute(r)
}

/*
GetFrontOfficeStatisticsWithDateRange Get front office Statistics

This API is useful to retrieve statistics regarding front office operations <p><strong>OperationId:</strong>getFrontOfficeStatisticsWithDateRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param statisticsCode Below are the Statistics Code mapping for valid metric code.<p><strong>ReservationActivityDaily:</strong></p>AdultsInHouse,ChildrenInHouse,ArrivalsTotal,TurndownRequired,DeparturesTotal,MaxOccupancyPercentage,Stayover,TotalRoomsReserved;
 @param hotelId
 @return FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest
*/
func (a *FOFStatsApiService) GetFrontOfficeStatisticsWithDateRange(ctx context.Context, statisticsCode string, hotelId string) FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest {
	return FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest{
		ApiService: a,
		ctx: ctx,
		statisticsCode: statisticsCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Statistics
func (a *FOFStatsApiService) GetFrontOfficeStatisticsWithDateRangeExecute(r FOFStatsApiGetFrontOfficeStatisticsWithDateRangeRequest) (*Statistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Statistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetFrontOfficeStatisticsWithDateRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/frontOfficeStatisticsRange/{statisticsCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"statisticsCode"+"}", url.PathEscape(parameterValueToString(r.statisticsCode, "statisticsCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.statisticsCode) < 1 {
		return localVarReturnValue, nil, reportError("statisticsCode must have at least 1 elements")
	}
	if strlen(r.statisticsCode) > 2000 {
		return localVarReturnValue, nil, reportError("statisticsCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "")
	}
	if r.metric != nil {
		t := *r.metric
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metric", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metric", t, "multi")
		}
	}
	if r.parameterNames != nil {
		t := *r.parameterNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterNames", t, "multi")
		}
	}
	if r.parameterValues != nil {
		t := *r.parameterValues
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValues", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValues", t, "multi")
		}
	}
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FOFStatsApiGetReservationQueueStatisticsRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r FOFStatsApiGetReservationQueueStatisticsRequest) Authorization(authorization string) FOFStatsApiGetReservationQueueStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r FOFStatsApiGetReservationQueueStatisticsRequest) XAppKey(xAppKey string) FOFStatsApiGetReservationQueueStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r FOFStatsApiGetReservationQueueStatisticsRequest) XHotelid(xHotelid string) FOFStatsApiGetReservationQueueStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r FOFStatsApiGetReservationQueueStatisticsRequest) XExternalsystem(xExternalsystem string) FOFStatsApiGetReservationQueueStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r FOFStatsApiGetReservationQueueStatisticsRequest) AcceptLanguage(acceptLanguage string) FOFStatsApiGetReservationQueueStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r FOFStatsApiGetReservationQueueStatisticsRequest) Execute() (*ReservationQueueStatistics, *http.Response, error) {
	return r.ApiService.GetReservationQueueStatisticsExecute(r)
}

/*
GetReservationQueueStatistics Get hotel reservation queue statistics

Use this API to return reservation queue statistics for a specific property.<p><strong>OperationId:</strong>getReservationQueueStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return FOFStatsApiGetReservationQueueStatisticsRequest
*/
func (a *FOFStatsApiService) GetReservationQueueStatistics(ctx context.Context, hotelId string) FOFStatsApiGetReservationQueueStatisticsRequest {
	return FOFStatsApiGetReservationQueueStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationQueueStatistics
func (a *FOFStatsApiService) GetReservationQueueStatisticsExecute(r FOFStatsApiGetReservationQueueStatisticsRequest) (*ReservationQueueStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationQueueStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetReservationQueueStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/queueReservationsStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FOFStatsApiGetReservationStatusStatisticsRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	hotelId string
	reservationStatus *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Reservation statuses to fetch statistics for
func (r FOFStatsApiGetReservationStatusStatisticsRequest) ReservationStatus(reservationStatus []string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r FOFStatsApiGetReservationStatusStatisticsRequest) Authorization(authorization string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r FOFStatsApiGetReservationStatusStatisticsRequest) XAppKey(xAppKey string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r FOFStatsApiGetReservationStatusStatisticsRequest) XHotelid(xHotelid string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r FOFStatsApiGetReservationStatusStatisticsRequest) XExternalsystem(xExternalsystem string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r FOFStatsApiGetReservationStatusStatisticsRequest) AcceptLanguage(acceptLanguage string) FOFStatsApiGetReservationStatusStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r FOFStatsApiGetReservationStatusStatisticsRequest) Execute() (*ReservationStatusStatisticsResponseType, *http.Response, error) {
	return r.ApiService.GetReservationStatusStatisticsExecute(r)
}

/*
GetReservationStatusStatistics Get Reservation Status Statistics

This API will fetch reservation statistics for the given status per room type. <p><strong>OperationId:</strong>getReservationStatusStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code
 @return FOFStatsApiGetReservationStatusStatisticsRequest
*/
func (a *FOFStatsApiService) GetReservationStatusStatistics(ctx context.Context, hotelId string) FOFStatsApiGetReservationStatusStatisticsRequest {
	return FOFStatsApiGetReservationStatusStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationStatusStatisticsResponseType
func (a *FOFStatsApiService) GetReservationStatusStatisticsExecute(r FOFStatsApiGetReservationStatusStatisticsRequest) (*ReservationStatusStatisticsResponseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationStatusStatisticsResponseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetReservationStatusStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservationStatusStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.reservationStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FOFStatsApiGetRoomsByRoomStatusRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	hotelId string
	frontOfficeStatus *string
}

// Filter by frontOfficeStatus. If nothing is passed, we fetch all.
func (r FOFStatsApiGetRoomsByRoomStatusRequest) FrontOfficeStatus(frontOfficeStatus string) FOFStatsApiGetRoomsByRoomStatusRequest {
	r.frontOfficeStatus = &frontOfficeStatus
	return r
}

func (r FOFStatsApiGetRoomsByRoomStatusRequest) Execute() (*RoomStatusStatisticsListType, *http.Response, error) {
	return r.ApiService.GetRoomsByRoomStatusExecute(r)
}

/*
GetRoomsByRoomStatus Get counts of rooms by housekeeping status and front office status.

For current business date, rooms are grouped by the roomClass and roomType to display their housekeeping roomStatus.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return FOFStatsApiGetRoomsByRoomStatusRequest
*/
func (a *FOFStatsApiService) GetRoomsByRoomStatus(ctx context.Context, hotelId string) FOFStatsApiGetRoomsByRoomStatusRequest {
	return FOFStatsApiGetRoomsByRoomStatusRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoomStatusStatisticsListType
func (a *FOFStatsApiService) GetRoomsByRoomStatusExecute(r FOFStatsApiGetRoomsByRoomStatusRequest) (*RoomStatusStatisticsListType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomStatusStatisticsListType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetRoomsByRoomStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/roomStatusStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.frontOfficeStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "frontOfficeStatus", r.frontOfficeStatus, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FOFStatsApiGetTaskSheetStatisticsRequest struct {
	ctx context.Context
	ApiService *FOFStatsApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeAllAssignedTasks *bool
	includeTaskSheetsDetails *bool
	taskCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r FOFStatsApiGetTaskSheetStatisticsRequest) Authorization(authorization string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r FOFStatsApiGetTaskSheetStatisticsRequest) XAppKey(xAppKey string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r FOFStatsApiGetTaskSheetStatisticsRequest) XHotelid(xHotelid string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// This flag, if true, enables fetching statistics for all the housekeeping tasks assigned.
func (r FOFStatsApiGetTaskSheetStatisticsRequest) IncludeAllAssignedTasks(includeAllAssignedTasks bool) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.includeAllAssignedTasks = &includeAllAssignedTasks
	return r
}

func (r FOFStatsApiGetTaskSheetStatisticsRequest) IncludeTaskSheetsDetails(includeTaskSheetsDetails bool) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.includeTaskSheetsDetails = &includeTaskSheetsDetails
	return r
}

// Task code of the task sheet.
func (r FOFStatsApiGetTaskSheetStatisticsRequest) TaskCode(taskCode string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.taskCode = &taskCode
	return r
}

// External system code.
func (r FOFStatsApiGetTaskSheetStatisticsRequest) XExternalsystem(xExternalsystem string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r FOFStatsApiGetTaskSheetStatisticsRequest) AcceptLanguage(acceptLanguage string) FOFStatsApiGetTaskSheetStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r FOFStatsApiGetTaskSheetStatisticsRequest) Execute() (*TaskSheetStatistics, *http.Response, error) {
	return r.ApiService.GetTaskSheetStatisticsExecute(r)
}

/*
GetTaskSheetStatistics Get housekeeping statistics

This Api will get the housekeeping statistics for your property. <p><strong>OperationId:</strong>getTaskSheetStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return FOFStatsApiGetTaskSheetStatisticsRequest
*/
func (a *FOFStatsApiService) GetTaskSheetStatistics(ctx context.Context, hotelId string) FOFStatsApiGetTaskSheetStatisticsRequest {
	return FOFStatsApiGetTaskSheetStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TaskSheetStatistics
func (a *FOFStatsApiService) GetTaskSheetStatisticsExecute(r FOFStatsApiGetTaskSheetStatisticsRequest) (*TaskSheetStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskSheetStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FOFStatsApiService.GetTaskSheetStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/houseKeepingStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.includeAllAssignedTasks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAllAssignedTasks", r.includeAllAssignedTasks, "")
	}
	if r.includeTaskSheetsDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTaskSheetsDetails", r.includeTaskSheetsDetails, "")
	}
	if r.taskCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskCode", r.taskCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
