/*
OPERA Cloud DataValueMapping Service API

APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dvm

import (
	"encoding/json"
)

// checks if the DefaultValuesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultValuesType{}

// DefaultValuesType A collection of default values.
type DefaultValuesType struct {
	Items []DefaultValueType
}

// NewDefaultValuesType instantiates a new DefaultValuesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultValuesType() *DefaultValuesType {
	this := DefaultValuesType{}
	return &this
}

// NewDefaultValuesTypeWithDefaults instantiates a new DefaultValuesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultValuesTypeWithDefaults() *DefaultValuesType {
	this := DefaultValuesType{}
	return &this
}

func (o DefaultValuesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultValuesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *DefaultValuesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableDefaultValuesType struct {
	value DefaultValuesType
	isSet bool
}

func (v NullableDefaultValuesType) Get() DefaultValuesType {
	return v.value
}

func (v *NullableDefaultValuesType) Set(val DefaultValuesType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultValuesType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultValuesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultValuesType(val DefaultValuesType) *NullableDefaultValuesType {
	return &NullableDefaultValuesType{value: val, isSet: true}
}

func (v NullableDefaultValuesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultValuesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


