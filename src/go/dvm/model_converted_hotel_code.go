/*
OPERA Cloud DataValueMapping Service API

APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dvm

import (
	"encoding/json"
)

// checks if the ConvertedHotelCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertedHotelCode{}

// ConvertedHotelCode struct for ConvertedHotelCode
type ConvertedHotelCode struct {
	// ExternalSystem for which the conversion is needed.
	ExternalSystem *string `json:"externalSystem,omitempty"`
	HotelInfo *ConversionHotelInfoType `json:"hotelInfo,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewConvertedHotelCode instantiates a new ConvertedHotelCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertedHotelCode() *ConvertedHotelCode {
	this := ConvertedHotelCode{}
	return &this
}

// NewConvertedHotelCodeWithDefaults instantiates a new ConvertedHotelCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertedHotelCodeWithDefaults() *ConvertedHotelCode {
	this := ConvertedHotelCode{}
	return &this
}

// GetExternalSystem returns the ExternalSystem field value if set, zero value otherwise.
func (o *ConvertedHotelCode) GetExternalSystem() string {
	if o == nil || IsNil(o.ExternalSystem) {
		var ret string
		return ret
	}
	return *o.ExternalSystem
}

// GetExternalSystemOk returns a tuple with the ExternalSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertedHotelCode) GetExternalSystemOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSystem) {
		return nil, false
	}
	return o.ExternalSystem, true
}

// HasExternalSystem returns a boolean if a field has been set.
func (o *ConvertedHotelCode) HasExternalSystem() bool {
	if o != nil && !IsNil(o.ExternalSystem) {
		return true
	}

	return false
}

// SetExternalSystem gets a reference to the given string and assigns it to the ExternalSystem field.
func (o *ConvertedHotelCode) SetExternalSystem(v string) {
	o.ExternalSystem = &v
}

// GetHotelInfo returns the HotelInfo field value if set, zero value otherwise.
func (o *ConvertedHotelCode) GetHotelInfo() ConversionHotelInfoType {
	if o == nil || IsNil(o.HotelInfo) {
		var ret ConversionHotelInfoType
		return ret
	}
	return *o.HotelInfo
}

// GetHotelInfoOk returns a tuple with the HotelInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertedHotelCode) GetHotelInfoOk() (*ConversionHotelInfoType, bool) {
	if o == nil || IsNil(o.HotelInfo) {
		return nil, false
	}
	return o.HotelInfo, true
}

// HasHotelInfo returns a boolean if a field has been set.
func (o *ConvertedHotelCode) HasHotelInfo() bool {
	if o != nil && !IsNil(o.HotelInfo) {
		return true
	}

	return false
}

// SetHotelInfo gets a reference to the given ConversionHotelInfoType and assigns it to the HotelInfo field.
func (o *ConvertedHotelCode) SetHotelInfo(v ConversionHotelInfoType) {
	o.HotelInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ConvertedHotelCode) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertedHotelCode) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ConvertedHotelCode) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ConvertedHotelCode) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ConvertedHotelCode) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertedHotelCode) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ConvertedHotelCode) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ConvertedHotelCode) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ConvertedHotelCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertedHotelCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalSystem) {
		toSerialize["externalSystem"] = o.ExternalSystem
	}
	if !IsNil(o.HotelInfo) {
		toSerialize["hotelInfo"] = o.HotelInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableConvertedHotelCode struct {
	value *ConvertedHotelCode
	isSet bool
}

func (v NullableConvertedHotelCode) Get() *ConvertedHotelCode {
	return v.value
}

func (v *NullableConvertedHotelCode) Set(val *ConvertedHotelCode) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertedHotelCode) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertedHotelCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertedHotelCode(val *ConvertedHotelCode) *NullableConvertedHotelCode {
	return &NullableConvertedHotelCode{value: val, isSet: true}
}

func (v NullableConvertedHotelCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertedHotelCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


