/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventsBulkUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventsBulkUpdate{}

// CateringEventsBulkUpdate Request object that will Change a list of events.
type CateringEventsBulkUpdate struct {
	CateringEventsBulkUpdate *CateringEventsBulkUpdateType `json:"cateringEventsBulkUpdate,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewCateringEventsBulkUpdate instantiates a new CateringEventsBulkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventsBulkUpdate() *CateringEventsBulkUpdate {
	this := CateringEventsBulkUpdate{}
	return &this
}

// NewCateringEventsBulkUpdateWithDefaults instantiates a new CateringEventsBulkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventsBulkUpdateWithDefaults() *CateringEventsBulkUpdate {
	this := CateringEventsBulkUpdate{}
	return &this
}

// GetCateringEventsBulkUpdate returns the CateringEventsBulkUpdate field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdate) GetCateringEventsBulkUpdate() CateringEventsBulkUpdateType {
	if o == nil || IsNil(o.CateringEventsBulkUpdate) {
		var ret CateringEventsBulkUpdateType
		return ret
	}
	return *o.CateringEventsBulkUpdate
}

// GetCateringEventsBulkUpdateOk returns a tuple with the CateringEventsBulkUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdate) GetCateringEventsBulkUpdateOk() (*CateringEventsBulkUpdateType, bool) {
	if o == nil || IsNil(o.CateringEventsBulkUpdate) {
		return nil, false
	}
	return o.CateringEventsBulkUpdate, true
}

// HasCateringEventsBulkUpdate returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdate) HasCateringEventsBulkUpdate() bool {
	if o != nil && !IsNil(o.CateringEventsBulkUpdate) {
		return true
	}

	return false
}

// SetCateringEventsBulkUpdate gets a reference to the given CateringEventsBulkUpdateType and assigns it to the CateringEventsBulkUpdate field.
func (o *CateringEventsBulkUpdate) SetCateringEventsBulkUpdate(v CateringEventsBulkUpdateType) {
	o.CateringEventsBulkUpdate = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdate) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdate) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdate) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *CateringEventsBulkUpdate) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdate) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdate) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdate) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *CateringEventsBulkUpdate) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o CateringEventsBulkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventsBulkUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CateringEventsBulkUpdate) {
		toSerialize["cateringEventsBulkUpdate"] = o.CateringEventsBulkUpdate
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCateringEventsBulkUpdate struct {
	value *CateringEventsBulkUpdate
	isSet bool
}

func (v NullableCateringEventsBulkUpdate) Get() *CateringEventsBulkUpdate {
	return v.value
}

func (v *NullableCateringEventsBulkUpdate) Set(val *CateringEventsBulkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventsBulkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventsBulkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventsBulkUpdate(val *CateringEventsBulkUpdate) *NullableCateringEventsBulkUpdate {
	return &NullableCateringEventsBulkUpdate{value: val, isSet: true}
}

func (v NullableCateringEventsBulkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventsBulkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


