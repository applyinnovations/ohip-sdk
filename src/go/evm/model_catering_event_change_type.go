/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventChangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventChangeType{}

// CateringEventChangeType struct for CateringEventChangeType
type CateringEventChangeType struct {
	ChangeList *CateringEventChangeListType `json:"changeList,omitempty"`
	RevenueChangeList *CateringEventRevenueChangeListType `json:"revenueChangeList,omitempty"`
	StatusChangeList *CateringEventStatusChangeListType `json:"statusChangeList,omitempty"`
}

// NewCateringEventChangeType instantiates a new CateringEventChangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventChangeType() *CateringEventChangeType {
	this := CateringEventChangeType{}
	return &this
}

// NewCateringEventChangeTypeWithDefaults instantiates a new CateringEventChangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventChangeTypeWithDefaults() *CateringEventChangeType {
	this := CateringEventChangeType{}
	return &this
}

// GetChangeList returns the ChangeList field value if set, zero value otherwise.
func (o *CateringEventChangeType) GetChangeList() CateringEventChangeListType {
	if o == nil || IsNil(o.ChangeList) {
		var ret CateringEventChangeListType
		return ret
	}
	return *o.ChangeList
}

// GetChangeListOk returns a tuple with the ChangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeType) GetChangeListOk() (*CateringEventChangeListType, bool) {
	if o == nil || IsNil(o.ChangeList) {
		return nil, false
	}
	return o.ChangeList, true
}

// HasChangeList returns a boolean if a field has been set.
func (o *CateringEventChangeType) HasChangeList() bool {
	if o != nil && !IsNil(o.ChangeList) {
		return true
	}

	return false
}

// SetChangeList gets a reference to the given CateringEventChangeListType and assigns it to the ChangeList field.
func (o *CateringEventChangeType) SetChangeList(v CateringEventChangeListType) {
	o.ChangeList = &v
}

// GetRevenueChangeList returns the RevenueChangeList field value if set, zero value otherwise.
func (o *CateringEventChangeType) GetRevenueChangeList() CateringEventRevenueChangeListType {
	if o == nil || IsNil(o.RevenueChangeList) {
		var ret CateringEventRevenueChangeListType
		return ret
	}
	return *o.RevenueChangeList
}

// GetRevenueChangeListOk returns a tuple with the RevenueChangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeType) GetRevenueChangeListOk() (*CateringEventRevenueChangeListType, bool) {
	if o == nil || IsNil(o.RevenueChangeList) {
		return nil, false
	}
	return o.RevenueChangeList, true
}

// HasRevenueChangeList returns a boolean if a field has been set.
func (o *CateringEventChangeType) HasRevenueChangeList() bool {
	if o != nil && !IsNil(o.RevenueChangeList) {
		return true
	}

	return false
}

// SetRevenueChangeList gets a reference to the given CateringEventRevenueChangeListType and assigns it to the RevenueChangeList field.
func (o *CateringEventChangeType) SetRevenueChangeList(v CateringEventRevenueChangeListType) {
	o.RevenueChangeList = &v
}

// GetStatusChangeList returns the StatusChangeList field value if set, zero value otherwise.
func (o *CateringEventChangeType) GetStatusChangeList() CateringEventStatusChangeListType {
	if o == nil || IsNil(o.StatusChangeList) {
		var ret CateringEventStatusChangeListType
		return ret
	}
	return *o.StatusChangeList
}

// GetStatusChangeListOk returns a tuple with the StatusChangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeType) GetStatusChangeListOk() (*CateringEventStatusChangeListType, bool) {
	if o == nil || IsNil(o.StatusChangeList) {
		return nil, false
	}
	return o.StatusChangeList, true
}

// HasStatusChangeList returns a boolean if a field has been set.
func (o *CateringEventChangeType) HasStatusChangeList() bool {
	if o != nil && !IsNil(o.StatusChangeList) {
		return true
	}

	return false
}

// SetStatusChangeList gets a reference to the given CateringEventStatusChangeListType and assigns it to the StatusChangeList field.
func (o *CateringEventChangeType) SetStatusChangeList(v CateringEventStatusChangeListType) {
	o.StatusChangeList = &v
}

func (o CateringEventChangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventChangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeList) {
		toSerialize["changeList"] = o.ChangeList
	}
	if !IsNil(o.RevenueChangeList) {
		toSerialize["revenueChangeList"] = o.RevenueChangeList
	}
	if !IsNil(o.StatusChangeList) {
		toSerialize["statusChangeList"] = o.StatusChangeList
	}
	return toSerialize, nil
}

type NullableCateringEventChangeType struct {
	value *CateringEventChangeType
	isSet bool
}

func (v NullableCateringEventChangeType) Get() *CateringEventChangeType {
	return v.value
}

func (v *NullableCateringEventChangeType) Set(val *CateringEventChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventChangeType(val *CateringEventChangeType) *NullableCateringEventChangeType {
	return &NullableCateringEventChangeType{value: val, isSet: true}
}

func (v NullableCateringEventChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


