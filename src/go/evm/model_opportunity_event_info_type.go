/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the OpportunityEventInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityEventInfoType{}

// OpportunityEventInfoType Catering Event information.
type OpportunityEventInfoType struct {
	EventNotes *EventNotesType `json:"eventNotes,omitempty"`
	OpportunityEventDetail *OpportunityEventDetailType `json:"opportunityEventDetail,omitempty"`
}

// NewOpportunityEventInfoType instantiates a new OpportunityEventInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityEventInfoType() *OpportunityEventInfoType {
	this := OpportunityEventInfoType{}
	return &this
}

// NewOpportunityEventInfoTypeWithDefaults instantiates a new OpportunityEventInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityEventInfoTypeWithDefaults() *OpportunityEventInfoType {
	this := OpportunityEventInfoType{}
	return &this
}

// GetEventNotes returns the EventNotes field value if set, zero value otherwise.
func (o *OpportunityEventInfoType) GetEventNotes() EventNotesType {
	if o == nil || IsNil(o.EventNotes) {
		var ret EventNotesType
		return ret
	}
	return *o.EventNotes
}

// GetEventNotesOk returns a tuple with the EventNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventInfoType) GetEventNotesOk() (*EventNotesType, bool) {
	if o == nil || IsNil(o.EventNotes) {
		return nil, false
	}
	return o.EventNotes, true
}

// HasEventNotes returns a boolean if a field has been set.
func (o *OpportunityEventInfoType) HasEventNotes() bool {
	if o != nil && !IsNil(o.EventNotes) {
		return true
	}

	return false
}

// SetEventNotes gets a reference to the given EventNotesType and assigns it to the EventNotes field.
func (o *OpportunityEventInfoType) SetEventNotes(v EventNotesType) {
	o.EventNotes = &v
}

// GetOpportunityEventDetail returns the OpportunityEventDetail field value if set, zero value otherwise.
func (o *OpportunityEventInfoType) GetOpportunityEventDetail() OpportunityEventDetailType {
	if o == nil || IsNil(o.OpportunityEventDetail) {
		var ret OpportunityEventDetailType
		return ret
	}
	return *o.OpportunityEventDetail
}

// GetOpportunityEventDetailOk returns a tuple with the OpportunityEventDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventInfoType) GetOpportunityEventDetailOk() (*OpportunityEventDetailType, bool) {
	if o == nil || IsNil(o.OpportunityEventDetail) {
		return nil, false
	}
	return o.OpportunityEventDetail, true
}

// HasOpportunityEventDetail returns a boolean if a field has been set.
func (o *OpportunityEventInfoType) HasOpportunityEventDetail() bool {
	if o != nil && !IsNil(o.OpportunityEventDetail) {
		return true
	}

	return false
}

// SetOpportunityEventDetail gets a reference to the given OpportunityEventDetailType and assigns it to the OpportunityEventDetail field.
func (o *OpportunityEventInfoType) SetOpportunityEventDetail(v OpportunityEventDetailType) {
	o.OpportunityEventDetail = &v
}

func (o OpportunityEventInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityEventInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventNotes) {
		toSerialize["eventNotes"] = o.EventNotes
	}
	if !IsNil(o.OpportunityEventDetail) {
		toSerialize["opportunityEventDetail"] = o.OpportunityEventDetail
	}
	return toSerialize, nil
}

type NullableOpportunityEventInfoType struct {
	value *OpportunityEventInfoType
	isSet bool
}

func (v NullableOpportunityEventInfoType) Get() *OpportunityEventInfoType {
	return v.value
}

func (v *NullableOpportunityEventInfoType) Set(val *OpportunityEventInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityEventInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityEventInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityEventInfoType(val *OpportunityEventInfoType) *NullableOpportunityEventInfoType {
	return &NullableOpportunityEventInfoType{value: val, isSet: true}
}

func (v NullableOpportunityEventInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityEventInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


