/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the OpportunityEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityEvents{}

// OpportunityEvents Object containing details of the catering events which will be added to the Opportunity Block.
type OpportunityEvents struct {
	Links *Links `json:"links,omitempty"`
	OpportunityBlockInfo *OpportunityBlockInfoType `json:"opportunityBlockInfo,omitempty"`
	// Catering Event information getting added for Opportunity Block.
	OpportunityEventDetails []OpportunityEventInfoType `json:"opportunityEventDetails,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewOpportunityEvents instantiates a new OpportunityEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityEvents() *OpportunityEvents {
	this := OpportunityEvents{}
	return &this
}

// NewOpportunityEventsWithDefaults instantiates a new OpportunityEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityEventsWithDefaults() *OpportunityEvents {
	this := OpportunityEvents{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *OpportunityEvents) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEvents) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *OpportunityEvents) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *OpportunityEvents) SetLinks(v Links) {
	o.Links = &v
}

// GetOpportunityBlockInfo returns the OpportunityBlockInfo field value if set, zero value otherwise.
func (o *OpportunityEvents) GetOpportunityBlockInfo() OpportunityBlockInfoType {
	if o == nil || IsNil(o.OpportunityBlockInfo) {
		var ret OpportunityBlockInfoType
		return ret
	}
	return *o.OpportunityBlockInfo
}

// GetOpportunityBlockInfoOk returns a tuple with the OpportunityBlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEvents) GetOpportunityBlockInfoOk() (*OpportunityBlockInfoType, bool) {
	if o == nil || IsNil(o.OpportunityBlockInfo) {
		return nil, false
	}
	return o.OpportunityBlockInfo, true
}

// HasOpportunityBlockInfo returns a boolean if a field has been set.
func (o *OpportunityEvents) HasOpportunityBlockInfo() bool {
	if o != nil && !IsNil(o.OpportunityBlockInfo) {
		return true
	}

	return false
}

// SetOpportunityBlockInfo gets a reference to the given OpportunityBlockInfoType and assigns it to the OpportunityBlockInfo field.
func (o *OpportunityEvents) SetOpportunityBlockInfo(v OpportunityBlockInfoType) {
	o.OpportunityBlockInfo = &v
}

// GetOpportunityEventDetails returns the OpportunityEventDetails field value if set, zero value otherwise.
func (o *OpportunityEvents) GetOpportunityEventDetails() []OpportunityEventInfoType {
	if o == nil || IsNil(o.OpportunityEventDetails) {
		var ret []OpportunityEventInfoType
		return ret
	}
	return o.OpportunityEventDetails
}

// GetOpportunityEventDetailsOk returns a tuple with the OpportunityEventDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEvents) GetOpportunityEventDetailsOk() ([]OpportunityEventInfoType, bool) {
	if o == nil || IsNil(o.OpportunityEventDetails) {
		return nil, false
	}
	return o.OpportunityEventDetails, true
}

// HasOpportunityEventDetails returns a boolean if a field has been set.
func (o *OpportunityEvents) HasOpportunityEventDetails() bool {
	if o != nil && !IsNil(o.OpportunityEventDetails) {
		return true
	}

	return false
}

// SetOpportunityEventDetails gets a reference to the given []OpportunityEventInfoType and assigns it to the OpportunityEventDetails field.
func (o *OpportunityEvents) SetOpportunityEventDetails(v []OpportunityEventInfoType) {
	o.OpportunityEventDetails = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *OpportunityEvents) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEvents) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *OpportunityEvents) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *OpportunityEvents) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o OpportunityEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.OpportunityBlockInfo) {
		toSerialize["opportunityBlockInfo"] = o.OpportunityBlockInfo
	}
	if !IsNil(o.OpportunityEventDetails) {
		toSerialize["opportunityEventDetails"] = o.OpportunityEventDetails
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableOpportunityEvents struct {
	value *OpportunityEvents
	isSet bool
}

func (v NullableOpportunityEvents) Get() *OpportunityEvents {
	return v.value
}

func (v *NullableOpportunityEvents) Set(val *OpportunityEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityEvents(val *OpportunityEvents) *NullableOpportunityEvents {
	return &NullableOpportunityEvents{value: val, isSet: true}
}

func (v NullableOpportunityEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


