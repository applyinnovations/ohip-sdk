/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the BlockDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDetailsType{}

// BlockDetailsType Information about the Block Details
type BlockDetailsType struct {
	BlockClassification *BlockClassificationType `json:"blockClassification,omitempty"`
	// Block code for the block.
	BlockCode *string `json:"blockCode,omitempty"`
	BlockDates *TimeSpanType `json:"blockDates,omitempty"`
	// Name of the block.
	BlockName *string `json:"blockName,omitempty"`
	BlockStatus *BookingStatusDetailType `json:"blockStatus,omitempty"`
	// Internal type of the block.
	BlockType *string `json:"blockType,omitempty"`
	BookingType *CodeDescriptionType `json:"bookingType,omitempty"`
	// Indicates if this is a catering only block.
	CateringOnlyBlock *bool `json:"cateringOnlyBlock,omitempty"`
	// Indicates the likelihood description of the block moving to the next active block status.
	ConversionCode *string `json:"conversionCode,omitempty"`
	// Indicates the likelihood of the block moving to the next active block status.
	ConversionCodeDescription *string `json:"conversionCodeDescription,omitempty"`
	// Currency Code attached to the business block.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Indicates if the block is locked by an external system.
	ExternalLocked *bool `json:"externalLocked,omitempty"`
	// Indicates if alternate dates are allowed for the booking.
	FlexibleDates *bool `json:"flexibleDates,omitempty"`
	// A text field used to communicate the proper name of the hotel.
	HotelName *string `json:"hotelName,omitempty"`
	MarketCode *MarketCodeInfoType `json:"marketCode,omitempty"`
	NonCompeteDetails *BlockNonCompeteType `json:"nonCompeteDetails,omitempty"`
	PrimaryOwners *BlockDetailsTypePrimaryOwners `json:"primaryOwners,omitempty"`
	PrimaryProfiles *BlockDetailsTypePrimaryProfiles `json:"primaryProfiles,omitempty"`
	// Indicates the ranking of the block.
	RankingCode *string `json:"rankingCode,omitempty"`
	// Indicates the ranking description of the block.
	RankingCodeDescription *string `json:"rankingCodeDescription,omitempty"`
	RateProtectionDetails *BlockRateProtectionType `json:"rateProtectionDetails,omitempty"`
	ReservationType *ReservationTypeInfoType `json:"reservationType,omitempty"`
	ShoulderDates *TimeSpanType `json:"shoulderDates,omitempty"`
	SourceOfSale *BlockSourceOfSaleType `json:"sourceOfSale,omitempty"`
	// Internal status for the block.
	Status *string `json:"status,omitempty"`
}

// NewBlockDetailsType instantiates a new BlockDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDetailsType() *BlockDetailsType {
	this := BlockDetailsType{}
	return &this
}

// NewBlockDetailsTypeWithDefaults instantiates a new BlockDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDetailsTypeWithDefaults() *BlockDetailsType {
	this := BlockDetailsType{}
	return &this
}

// GetBlockClassification returns the BlockClassification field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockClassification() BlockClassificationType {
	if o == nil || IsNil(o.BlockClassification) {
		var ret BlockClassificationType
		return ret
	}
	return *o.BlockClassification
}

// GetBlockClassificationOk returns a tuple with the BlockClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockClassificationOk() (*BlockClassificationType, bool) {
	if o == nil || IsNil(o.BlockClassification) {
		return nil, false
	}
	return o.BlockClassification, true
}

// HasBlockClassification returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockClassification() bool {
	if o != nil && !IsNil(o.BlockClassification) {
		return true
	}

	return false
}

// SetBlockClassification gets a reference to the given BlockClassificationType and assigns it to the BlockClassification field.
func (o *BlockDetailsType) SetBlockClassification(v BlockClassificationType) {
	o.BlockClassification = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *BlockDetailsType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockDates returns the BlockDates field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockDates() TimeSpanType {
	if o == nil || IsNil(o.BlockDates) {
		var ret TimeSpanType
		return ret
	}
	return *o.BlockDates
}

// GetBlockDatesOk returns a tuple with the BlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockDatesOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.BlockDates) {
		return nil, false
	}
	return o.BlockDates, true
}

// HasBlockDates returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockDates() bool {
	if o != nil && !IsNil(o.BlockDates) {
		return true
	}

	return false
}

// SetBlockDates gets a reference to the given TimeSpanType and assigns it to the BlockDates field.
func (o *BlockDetailsType) SetBlockDates(v TimeSpanType) {
	o.BlockDates = &v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *BlockDetailsType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetBlockStatus returns the BlockStatus field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockStatus() BookingStatusDetailType {
	if o == nil || IsNil(o.BlockStatus) {
		var ret BookingStatusDetailType
		return ret
	}
	return *o.BlockStatus
}

// GetBlockStatusOk returns a tuple with the BlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockStatusOk() (*BookingStatusDetailType, bool) {
	if o == nil || IsNil(o.BlockStatus) {
		return nil, false
	}
	return o.BlockStatus, true
}

// HasBlockStatus returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockStatus() bool {
	if o != nil && !IsNil(o.BlockStatus) {
		return true
	}

	return false
}

// SetBlockStatus gets a reference to the given BookingStatusDetailType and assigns it to the BlockStatus field.
func (o *BlockDetailsType) SetBlockStatus(v BookingStatusDetailType) {
	o.BlockStatus = &v
}

// GetBlockType returns the BlockType field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBlockType() string {
	if o == nil || IsNil(o.BlockType) {
		var ret string
		return ret
	}
	return *o.BlockType
}

// GetBlockTypeOk returns a tuple with the BlockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBlockTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockType) {
		return nil, false
	}
	return o.BlockType, true
}

// HasBlockType returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBlockType() bool {
	if o != nil && !IsNil(o.BlockType) {
		return true
	}

	return false
}

// SetBlockType gets a reference to the given string and assigns it to the BlockType field.
func (o *BlockDetailsType) SetBlockType(v string) {
	o.BlockType = &v
}

// GetBookingType returns the BookingType field value if set, zero value otherwise.
func (o *BlockDetailsType) GetBookingType() CodeDescriptionType {
	if o == nil || IsNil(o.BookingType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.BookingType
}

// GetBookingTypeOk returns a tuple with the BookingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetBookingTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.BookingType) {
		return nil, false
	}
	return o.BookingType, true
}

// HasBookingType returns a boolean if a field has been set.
func (o *BlockDetailsType) HasBookingType() bool {
	if o != nil && !IsNil(o.BookingType) {
		return true
	}

	return false
}

// SetBookingType gets a reference to the given CodeDescriptionType and assigns it to the BookingType field.
func (o *BlockDetailsType) SetBookingType(v CodeDescriptionType) {
	o.BookingType = &v
}

// GetCateringOnlyBlock returns the CateringOnlyBlock field value if set, zero value otherwise.
func (o *BlockDetailsType) GetCateringOnlyBlock() bool {
	if o == nil || IsNil(o.CateringOnlyBlock) {
		var ret bool
		return ret
	}
	return *o.CateringOnlyBlock
}

// GetCateringOnlyBlockOk returns a tuple with the CateringOnlyBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetCateringOnlyBlockOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringOnlyBlock) {
		return nil, false
	}
	return o.CateringOnlyBlock, true
}

// HasCateringOnlyBlock returns a boolean if a field has been set.
func (o *BlockDetailsType) HasCateringOnlyBlock() bool {
	if o != nil && !IsNil(o.CateringOnlyBlock) {
		return true
	}

	return false
}

// SetCateringOnlyBlock gets a reference to the given bool and assigns it to the CateringOnlyBlock field.
func (o *BlockDetailsType) SetCateringOnlyBlock(v bool) {
	o.CateringOnlyBlock = &v
}

// GetConversionCode returns the ConversionCode field value if set, zero value otherwise.
func (o *BlockDetailsType) GetConversionCode() string {
	if o == nil || IsNil(o.ConversionCode) {
		var ret string
		return ret
	}
	return *o.ConversionCode
}

// GetConversionCodeOk returns a tuple with the ConversionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetConversionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ConversionCode) {
		return nil, false
	}
	return o.ConversionCode, true
}

// HasConversionCode returns a boolean if a field has been set.
func (o *BlockDetailsType) HasConversionCode() bool {
	if o != nil && !IsNil(o.ConversionCode) {
		return true
	}

	return false
}

// SetConversionCode gets a reference to the given string and assigns it to the ConversionCode field.
func (o *BlockDetailsType) SetConversionCode(v string) {
	o.ConversionCode = &v
}

// GetConversionCodeDescription returns the ConversionCodeDescription field value if set, zero value otherwise.
func (o *BlockDetailsType) GetConversionCodeDescription() string {
	if o == nil || IsNil(o.ConversionCodeDescription) {
		var ret string
		return ret
	}
	return *o.ConversionCodeDescription
}

// GetConversionCodeDescriptionOk returns a tuple with the ConversionCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetConversionCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ConversionCodeDescription) {
		return nil, false
	}
	return o.ConversionCodeDescription, true
}

// HasConversionCodeDescription returns a boolean if a field has been set.
func (o *BlockDetailsType) HasConversionCodeDescription() bool {
	if o != nil && !IsNil(o.ConversionCodeDescription) {
		return true
	}

	return false
}

// SetConversionCodeDescription gets a reference to the given string and assigns it to the ConversionCodeDescription field.
func (o *BlockDetailsType) SetConversionCodeDescription(v string) {
	o.ConversionCodeDescription = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *BlockDetailsType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *BlockDetailsType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *BlockDetailsType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetExternalLocked returns the ExternalLocked field value if set, zero value otherwise.
func (o *BlockDetailsType) GetExternalLocked() bool {
	if o == nil || IsNil(o.ExternalLocked) {
		var ret bool
		return ret
	}
	return *o.ExternalLocked
}

// GetExternalLockedOk returns a tuple with the ExternalLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetExternalLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalLocked) {
		return nil, false
	}
	return o.ExternalLocked, true
}

// HasExternalLocked returns a boolean if a field has been set.
func (o *BlockDetailsType) HasExternalLocked() bool {
	if o != nil && !IsNil(o.ExternalLocked) {
		return true
	}

	return false
}

// SetExternalLocked gets a reference to the given bool and assigns it to the ExternalLocked field.
func (o *BlockDetailsType) SetExternalLocked(v bool) {
	o.ExternalLocked = &v
}

// GetFlexibleDates returns the FlexibleDates field value if set, zero value otherwise.
func (o *BlockDetailsType) GetFlexibleDates() bool {
	if o == nil || IsNil(o.FlexibleDates) {
		var ret bool
		return ret
	}
	return *o.FlexibleDates
}

// GetFlexibleDatesOk returns a tuple with the FlexibleDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetFlexibleDatesOk() (*bool, bool) {
	if o == nil || IsNil(o.FlexibleDates) {
		return nil, false
	}
	return o.FlexibleDates, true
}

// HasFlexibleDates returns a boolean if a field has been set.
func (o *BlockDetailsType) HasFlexibleDates() bool {
	if o != nil && !IsNil(o.FlexibleDates) {
		return true
	}

	return false
}

// SetFlexibleDates gets a reference to the given bool and assigns it to the FlexibleDates field.
func (o *BlockDetailsType) SetFlexibleDates(v bool) {
	o.FlexibleDates = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *BlockDetailsType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *BlockDetailsType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *BlockDetailsType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *BlockDetailsType) GetMarketCode() MarketCodeInfoType {
	if o == nil || IsNil(o.MarketCode) {
		var ret MarketCodeInfoType
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetMarketCodeOk() (*MarketCodeInfoType, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *BlockDetailsType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given MarketCodeInfoType and assigns it to the MarketCode field.
func (o *BlockDetailsType) SetMarketCode(v MarketCodeInfoType) {
	o.MarketCode = &v
}

// GetNonCompeteDetails returns the NonCompeteDetails field value if set, zero value otherwise.
func (o *BlockDetailsType) GetNonCompeteDetails() BlockNonCompeteType {
	if o == nil || IsNil(o.NonCompeteDetails) {
		var ret BlockNonCompeteType
		return ret
	}
	return *o.NonCompeteDetails
}

// GetNonCompeteDetailsOk returns a tuple with the NonCompeteDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetNonCompeteDetailsOk() (*BlockNonCompeteType, bool) {
	if o == nil || IsNil(o.NonCompeteDetails) {
		return nil, false
	}
	return o.NonCompeteDetails, true
}

// HasNonCompeteDetails returns a boolean if a field has been set.
func (o *BlockDetailsType) HasNonCompeteDetails() bool {
	if o != nil && !IsNil(o.NonCompeteDetails) {
		return true
	}

	return false
}

// SetNonCompeteDetails gets a reference to the given BlockNonCompeteType and assigns it to the NonCompeteDetails field.
func (o *BlockDetailsType) SetNonCompeteDetails(v BlockNonCompeteType) {
	o.NonCompeteDetails = &v
}

// GetPrimaryOwners returns the PrimaryOwners field value if set, zero value otherwise.
func (o *BlockDetailsType) GetPrimaryOwners() BlockDetailsTypePrimaryOwners {
	if o == nil || IsNil(o.PrimaryOwners) {
		var ret BlockDetailsTypePrimaryOwners
		return ret
	}
	return *o.PrimaryOwners
}

// GetPrimaryOwnersOk returns a tuple with the PrimaryOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetPrimaryOwnersOk() (*BlockDetailsTypePrimaryOwners, bool) {
	if o == nil || IsNil(o.PrimaryOwners) {
		return nil, false
	}
	return o.PrimaryOwners, true
}

// HasPrimaryOwners returns a boolean if a field has been set.
func (o *BlockDetailsType) HasPrimaryOwners() bool {
	if o != nil && !IsNil(o.PrimaryOwners) {
		return true
	}

	return false
}

// SetPrimaryOwners gets a reference to the given BlockDetailsTypePrimaryOwners and assigns it to the PrimaryOwners field.
func (o *BlockDetailsType) SetPrimaryOwners(v BlockDetailsTypePrimaryOwners) {
	o.PrimaryOwners = &v
}

// GetPrimaryProfiles returns the PrimaryProfiles field value if set, zero value otherwise.
func (o *BlockDetailsType) GetPrimaryProfiles() BlockDetailsTypePrimaryProfiles {
	if o == nil || IsNil(o.PrimaryProfiles) {
		var ret BlockDetailsTypePrimaryProfiles
		return ret
	}
	return *o.PrimaryProfiles
}

// GetPrimaryProfilesOk returns a tuple with the PrimaryProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetPrimaryProfilesOk() (*BlockDetailsTypePrimaryProfiles, bool) {
	if o == nil || IsNil(o.PrimaryProfiles) {
		return nil, false
	}
	return o.PrimaryProfiles, true
}

// HasPrimaryProfiles returns a boolean if a field has been set.
func (o *BlockDetailsType) HasPrimaryProfiles() bool {
	if o != nil && !IsNil(o.PrimaryProfiles) {
		return true
	}

	return false
}

// SetPrimaryProfiles gets a reference to the given BlockDetailsTypePrimaryProfiles and assigns it to the PrimaryProfiles field.
func (o *BlockDetailsType) SetPrimaryProfiles(v BlockDetailsTypePrimaryProfiles) {
	o.PrimaryProfiles = &v
}

// GetRankingCode returns the RankingCode field value if set, zero value otherwise.
func (o *BlockDetailsType) GetRankingCode() string {
	if o == nil || IsNil(o.RankingCode) {
		var ret string
		return ret
	}
	return *o.RankingCode
}

// GetRankingCodeOk returns a tuple with the RankingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetRankingCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RankingCode) {
		return nil, false
	}
	return o.RankingCode, true
}

// HasRankingCode returns a boolean if a field has been set.
func (o *BlockDetailsType) HasRankingCode() bool {
	if o != nil && !IsNil(o.RankingCode) {
		return true
	}

	return false
}

// SetRankingCode gets a reference to the given string and assigns it to the RankingCode field.
func (o *BlockDetailsType) SetRankingCode(v string) {
	o.RankingCode = &v
}

// GetRankingCodeDescription returns the RankingCodeDescription field value if set, zero value otherwise.
func (o *BlockDetailsType) GetRankingCodeDescription() string {
	if o == nil || IsNil(o.RankingCodeDescription) {
		var ret string
		return ret
	}
	return *o.RankingCodeDescription
}

// GetRankingCodeDescriptionOk returns a tuple with the RankingCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetRankingCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RankingCodeDescription) {
		return nil, false
	}
	return o.RankingCodeDescription, true
}

// HasRankingCodeDescription returns a boolean if a field has been set.
func (o *BlockDetailsType) HasRankingCodeDescription() bool {
	if o != nil && !IsNil(o.RankingCodeDescription) {
		return true
	}

	return false
}

// SetRankingCodeDescription gets a reference to the given string and assigns it to the RankingCodeDescription field.
func (o *BlockDetailsType) SetRankingCodeDescription(v string) {
	o.RankingCodeDescription = &v
}

// GetRateProtectionDetails returns the RateProtectionDetails field value if set, zero value otherwise.
func (o *BlockDetailsType) GetRateProtectionDetails() BlockRateProtectionType {
	if o == nil || IsNil(o.RateProtectionDetails) {
		var ret BlockRateProtectionType
		return ret
	}
	return *o.RateProtectionDetails
}

// GetRateProtectionDetailsOk returns a tuple with the RateProtectionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetRateProtectionDetailsOk() (*BlockRateProtectionType, bool) {
	if o == nil || IsNil(o.RateProtectionDetails) {
		return nil, false
	}
	return o.RateProtectionDetails, true
}

// HasRateProtectionDetails returns a boolean if a field has been set.
func (o *BlockDetailsType) HasRateProtectionDetails() bool {
	if o != nil && !IsNil(o.RateProtectionDetails) {
		return true
	}

	return false
}

// SetRateProtectionDetails gets a reference to the given BlockRateProtectionType and assigns it to the RateProtectionDetails field.
func (o *BlockDetailsType) SetRateProtectionDetails(v BlockRateProtectionType) {
	o.RateProtectionDetails = &v
}

// GetReservationType returns the ReservationType field value if set, zero value otherwise.
func (o *BlockDetailsType) GetReservationType() ReservationTypeInfoType {
	if o == nil || IsNil(o.ReservationType) {
		var ret ReservationTypeInfoType
		return ret
	}
	return *o.ReservationType
}

// GetReservationTypeOk returns a tuple with the ReservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetReservationTypeOk() (*ReservationTypeInfoType, bool) {
	if o == nil || IsNil(o.ReservationType) {
		return nil, false
	}
	return o.ReservationType, true
}

// HasReservationType returns a boolean if a field has been set.
func (o *BlockDetailsType) HasReservationType() bool {
	if o != nil && !IsNil(o.ReservationType) {
		return true
	}

	return false
}

// SetReservationType gets a reference to the given ReservationTypeInfoType and assigns it to the ReservationType field.
func (o *BlockDetailsType) SetReservationType(v ReservationTypeInfoType) {
	o.ReservationType = &v
}

// GetShoulderDates returns the ShoulderDates field value if set, zero value otherwise.
func (o *BlockDetailsType) GetShoulderDates() TimeSpanType {
	if o == nil || IsNil(o.ShoulderDates) {
		var ret TimeSpanType
		return ret
	}
	return *o.ShoulderDates
}

// GetShoulderDatesOk returns a tuple with the ShoulderDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetShoulderDatesOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ShoulderDates) {
		return nil, false
	}
	return o.ShoulderDates, true
}

// HasShoulderDates returns a boolean if a field has been set.
func (o *BlockDetailsType) HasShoulderDates() bool {
	if o != nil && !IsNil(o.ShoulderDates) {
		return true
	}

	return false
}

// SetShoulderDates gets a reference to the given TimeSpanType and assigns it to the ShoulderDates field.
func (o *BlockDetailsType) SetShoulderDates(v TimeSpanType) {
	o.ShoulderDates = &v
}

// GetSourceOfSale returns the SourceOfSale field value if set, zero value otherwise.
func (o *BlockDetailsType) GetSourceOfSale() BlockSourceOfSaleType {
	if o == nil || IsNil(o.SourceOfSale) {
		var ret BlockSourceOfSaleType
		return ret
	}
	return *o.SourceOfSale
}

// GetSourceOfSaleOk returns a tuple with the SourceOfSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetSourceOfSaleOk() (*BlockSourceOfSaleType, bool) {
	if o == nil || IsNil(o.SourceOfSale) {
		return nil, false
	}
	return o.SourceOfSale, true
}

// HasSourceOfSale returns a boolean if a field has been set.
func (o *BlockDetailsType) HasSourceOfSale() bool {
	if o != nil && !IsNil(o.SourceOfSale) {
		return true
	}

	return false
}

// SetSourceOfSale gets a reference to the given BlockSourceOfSaleType and assigns it to the SourceOfSale field.
func (o *BlockDetailsType) SetSourceOfSale(v BlockSourceOfSaleType) {
	o.SourceOfSale = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BlockDetailsType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BlockDetailsType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BlockDetailsType) SetStatus(v string) {
	o.Status = &v
}

func (o BlockDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockClassification) {
		toSerialize["blockClassification"] = o.BlockClassification
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockDates) {
		toSerialize["blockDates"] = o.BlockDates
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.BlockStatus) {
		toSerialize["blockStatus"] = o.BlockStatus
	}
	if !IsNil(o.BlockType) {
		toSerialize["blockType"] = o.BlockType
	}
	if !IsNil(o.BookingType) {
		toSerialize["bookingType"] = o.BookingType
	}
	if !IsNil(o.CateringOnlyBlock) {
		toSerialize["cateringOnlyBlock"] = o.CateringOnlyBlock
	}
	if !IsNil(o.ConversionCode) {
		toSerialize["conversionCode"] = o.ConversionCode
	}
	if !IsNil(o.ConversionCodeDescription) {
		toSerialize["conversionCodeDescription"] = o.ConversionCodeDescription
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.ExternalLocked) {
		toSerialize["externalLocked"] = o.ExternalLocked
	}
	if !IsNil(o.FlexibleDates) {
		toSerialize["flexibleDates"] = o.FlexibleDates
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.NonCompeteDetails) {
		toSerialize["nonCompeteDetails"] = o.NonCompeteDetails
	}
	if !IsNil(o.PrimaryOwners) {
		toSerialize["primaryOwners"] = o.PrimaryOwners
	}
	if !IsNil(o.PrimaryProfiles) {
		toSerialize["primaryProfiles"] = o.PrimaryProfiles
	}
	if !IsNil(o.RankingCode) {
		toSerialize["rankingCode"] = o.RankingCode
	}
	if !IsNil(o.RankingCodeDescription) {
		toSerialize["rankingCodeDescription"] = o.RankingCodeDescription
	}
	if !IsNil(o.RateProtectionDetails) {
		toSerialize["rateProtectionDetails"] = o.RateProtectionDetails
	}
	if !IsNil(o.ReservationType) {
		toSerialize["reservationType"] = o.ReservationType
	}
	if !IsNil(o.ShoulderDates) {
		toSerialize["shoulderDates"] = o.ShoulderDates
	}
	if !IsNil(o.SourceOfSale) {
		toSerialize["sourceOfSale"] = o.SourceOfSale
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableBlockDetailsType struct {
	value *BlockDetailsType
	isSet bool
}

func (v NullableBlockDetailsType) Get() *BlockDetailsType {
	return v.value
}

func (v *NullableBlockDetailsType) Set(val *BlockDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDetailsType(val *BlockDetailsType) *NullableBlockDetailsType {
	return &NullableBlockDetailsType{value: val, isSet: true}
}

func (v NullableBlockDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


