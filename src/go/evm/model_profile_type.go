/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileType{}

// ProfileType Type provides the detailed information about the profile and its children.
type ProfileType struct {
	Addresses *ProfileTypeAddresses `json:"addresses,omitempty"`
	Comments *ProfileTypeComments `json:"comments,omitempty"`
	Company *CompanyType `json:"company,omitempty"`
	Customer *CustomerType `json:"customer,omitempty"`
	Emails *ProfileTypeEmails `json:"emails,omitempty"`
	// Owner Code associated to the profile.
	OwnerCode *string `json:"ownerCode,omitempty"`
	ProfileImage *ImageSetType `json:"profileImage,omitempty"`
	ProfileType *ProfileTypeType `json:"profileType,omitempty"`
	// Hotel which this profile is registered with. This attribute is not used for configuration.
	RegisteredProperty *string `json:"registeredProperty,omitempty"`
	Relationships *ProfileTypeRelationships `json:"relationships,omitempty"`
	RelationshipsSummary *ProfileTypeRelationshipsSummary `json:"relationshipsSummary,omitempty"`
	// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
	RequestForHotel *string `json:"requestForHotel,omitempty"`
	RoomOwnershipsList *ProfileTypeRoomOwnershipsList `json:"roomOwnershipsList,omitempty"`
	// Flag to show inactive Room Owners.
	ShowInactiveRoomOwners *bool `json:"showInactiveRoomOwners,omitempty"`
	StatusCode *ProfileStatusType `json:"statusCode,omitempty"`
	StayReservationInfoList *ReservationStayHistoryFutureInfoType `json:"stayReservationInfoList,omitempty"`
	Telephones *ProfileTypeTelephones `json:"telephones,omitempty"`
	URLs *ProfileTypeURLs `json:"uRLs,omitempty"`
}

// NewProfileType instantiates a new ProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileType() *ProfileType {
	this := ProfileType{}
	return &this
}

// NewProfileTypeWithDefaults instantiates a new ProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileTypeWithDefaults() *ProfileType {
	this := ProfileType{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ProfileType) GetAddresses() ProfileTypeAddresses {
	if o == nil || IsNil(o.Addresses) {
		var ret ProfileTypeAddresses
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetAddressesOk() (*ProfileTypeAddresses, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ProfileType) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given ProfileTypeAddresses and assigns it to the Addresses field.
func (o *ProfileType) SetAddresses(v ProfileTypeAddresses) {
	o.Addresses = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ProfileType) GetComments() ProfileTypeComments {
	if o == nil || IsNil(o.Comments) {
		var ret ProfileTypeComments
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetCommentsOk() (*ProfileTypeComments, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ProfileType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given ProfileTypeComments and assigns it to the Comments field.
func (o *ProfileType) SetComments(v ProfileTypeComments) {
	o.Comments = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ProfileType) GetCompany() CompanyType {
	if o == nil || IsNil(o.Company) {
		var ret CompanyType
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetCompanyOk() (*CompanyType, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ProfileType) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyType and assigns it to the Company field.
func (o *ProfileType) SetCompany(v CompanyType) {
	o.Company = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *ProfileType) GetCustomer() CustomerType {
	if o == nil || IsNil(o.Customer) {
		var ret CustomerType
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetCustomerOk() (*CustomerType, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *ProfileType) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given CustomerType and assigns it to the Customer field.
func (o *ProfileType) SetCustomer(v CustomerType) {
	o.Customer = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *ProfileType) GetEmails() ProfileTypeEmails {
	if o == nil || IsNil(o.Emails) {
		var ret ProfileTypeEmails
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetEmailsOk() (*ProfileTypeEmails, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *ProfileType) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given ProfileTypeEmails and assigns it to the Emails field.
func (o *ProfileType) SetEmails(v ProfileTypeEmails) {
	o.Emails = &v
}

// GetOwnerCode returns the OwnerCode field value if set, zero value otherwise.
func (o *ProfileType) GetOwnerCode() string {
	if o == nil || IsNil(o.OwnerCode) {
		var ret string
		return ret
	}
	return *o.OwnerCode
}

// GetOwnerCodeOk returns a tuple with the OwnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetOwnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerCode) {
		return nil, false
	}
	return o.OwnerCode, true
}

// HasOwnerCode returns a boolean if a field has been set.
func (o *ProfileType) HasOwnerCode() bool {
	if o != nil && !IsNil(o.OwnerCode) {
		return true
	}

	return false
}

// SetOwnerCode gets a reference to the given string and assigns it to the OwnerCode field.
func (o *ProfileType) SetOwnerCode(v string) {
	o.OwnerCode = &v
}

// GetProfileImage returns the ProfileImage field value if set, zero value otherwise.
func (o *ProfileType) GetProfileImage() ImageSetType {
	if o == nil || IsNil(o.ProfileImage) {
		var ret ImageSetType
		return ret
	}
	return *o.ProfileImage
}

// GetProfileImageOk returns a tuple with the ProfileImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetProfileImageOk() (*ImageSetType, bool) {
	if o == nil || IsNil(o.ProfileImage) {
		return nil, false
	}
	return o.ProfileImage, true
}

// HasProfileImage returns a boolean if a field has been set.
func (o *ProfileType) HasProfileImage() bool {
	if o != nil && !IsNil(o.ProfileImage) {
		return true
	}

	return false
}

// SetProfileImage gets a reference to the given ImageSetType and assigns it to the ProfileImage field.
func (o *ProfileType) SetProfileImage(v ImageSetType) {
	o.ProfileImage = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *ProfileType) GetProfileType() ProfileTypeType {
	if o == nil || IsNil(o.ProfileType) {
		var ret ProfileTypeType
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetProfileTypeOk() (*ProfileTypeType, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *ProfileType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given ProfileTypeType and assigns it to the ProfileType field.
func (o *ProfileType) SetProfileType(v ProfileTypeType) {
	o.ProfileType = &v
}

// GetRegisteredProperty returns the RegisteredProperty field value if set, zero value otherwise.
func (o *ProfileType) GetRegisteredProperty() string {
	if o == nil || IsNil(o.RegisteredProperty) {
		var ret string
		return ret
	}
	return *o.RegisteredProperty
}

// GetRegisteredPropertyOk returns a tuple with the RegisteredProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetRegisteredPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.RegisteredProperty) {
		return nil, false
	}
	return o.RegisteredProperty, true
}

// HasRegisteredProperty returns a boolean if a field has been set.
func (o *ProfileType) HasRegisteredProperty() bool {
	if o != nil && !IsNil(o.RegisteredProperty) {
		return true
	}

	return false
}

// SetRegisteredProperty gets a reference to the given string and assigns it to the RegisteredProperty field.
func (o *ProfileType) SetRegisteredProperty(v string) {
	o.RegisteredProperty = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *ProfileType) GetRelationships() ProfileTypeRelationships {
	if o == nil || IsNil(o.Relationships) {
		var ret ProfileTypeRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetRelationshipsOk() (*ProfileTypeRelationships, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *ProfileType) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given ProfileTypeRelationships and assigns it to the Relationships field.
func (o *ProfileType) SetRelationships(v ProfileTypeRelationships) {
	o.Relationships = &v
}

// GetRelationshipsSummary returns the RelationshipsSummary field value if set, zero value otherwise.
func (o *ProfileType) GetRelationshipsSummary() ProfileTypeRelationshipsSummary {
	if o == nil || IsNil(o.RelationshipsSummary) {
		var ret ProfileTypeRelationshipsSummary
		return ret
	}
	return *o.RelationshipsSummary
}

// GetRelationshipsSummaryOk returns a tuple with the RelationshipsSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetRelationshipsSummaryOk() (*ProfileTypeRelationshipsSummary, bool) {
	if o == nil || IsNil(o.RelationshipsSummary) {
		return nil, false
	}
	return o.RelationshipsSummary, true
}

// HasRelationshipsSummary returns a boolean if a field has been set.
func (o *ProfileType) HasRelationshipsSummary() bool {
	if o != nil && !IsNil(o.RelationshipsSummary) {
		return true
	}

	return false
}

// SetRelationshipsSummary gets a reference to the given ProfileTypeRelationshipsSummary and assigns it to the RelationshipsSummary field.
func (o *ProfileType) SetRelationshipsSummary(v ProfileTypeRelationshipsSummary) {
	o.RelationshipsSummary = &v
}

// GetRequestForHotel returns the RequestForHotel field value if set, zero value otherwise.
func (o *ProfileType) GetRequestForHotel() string {
	if o == nil || IsNil(o.RequestForHotel) {
		var ret string
		return ret
	}
	return *o.RequestForHotel
}

// GetRequestForHotelOk returns a tuple with the RequestForHotel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetRequestForHotelOk() (*string, bool) {
	if o == nil || IsNil(o.RequestForHotel) {
		return nil, false
	}
	return o.RequestForHotel, true
}

// HasRequestForHotel returns a boolean if a field has been set.
func (o *ProfileType) HasRequestForHotel() bool {
	if o != nil && !IsNil(o.RequestForHotel) {
		return true
	}

	return false
}

// SetRequestForHotel gets a reference to the given string and assigns it to the RequestForHotel field.
func (o *ProfileType) SetRequestForHotel(v string) {
	o.RequestForHotel = &v
}

// GetRoomOwnershipsList returns the RoomOwnershipsList field value if set, zero value otherwise.
func (o *ProfileType) GetRoomOwnershipsList() ProfileTypeRoomOwnershipsList {
	if o == nil || IsNil(o.RoomOwnershipsList) {
		var ret ProfileTypeRoomOwnershipsList
		return ret
	}
	return *o.RoomOwnershipsList
}

// GetRoomOwnershipsListOk returns a tuple with the RoomOwnershipsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetRoomOwnershipsListOk() (*ProfileTypeRoomOwnershipsList, bool) {
	if o == nil || IsNil(o.RoomOwnershipsList) {
		return nil, false
	}
	return o.RoomOwnershipsList, true
}

// HasRoomOwnershipsList returns a boolean if a field has been set.
func (o *ProfileType) HasRoomOwnershipsList() bool {
	if o != nil && !IsNil(o.RoomOwnershipsList) {
		return true
	}

	return false
}

// SetRoomOwnershipsList gets a reference to the given ProfileTypeRoomOwnershipsList and assigns it to the RoomOwnershipsList field.
func (o *ProfileType) SetRoomOwnershipsList(v ProfileTypeRoomOwnershipsList) {
	o.RoomOwnershipsList = &v
}

// GetShowInactiveRoomOwners returns the ShowInactiveRoomOwners field value if set, zero value otherwise.
func (o *ProfileType) GetShowInactiveRoomOwners() bool {
	if o == nil || IsNil(o.ShowInactiveRoomOwners) {
		var ret bool
		return ret
	}
	return *o.ShowInactiveRoomOwners
}

// GetShowInactiveRoomOwnersOk returns a tuple with the ShowInactiveRoomOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetShowInactiveRoomOwnersOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInactiveRoomOwners) {
		return nil, false
	}
	return o.ShowInactiveRoomOwners, true
}

// HasShowInactiveRoomOwners returns a boolean if a field has been set.
func (o *ProfileType) HasShowInactiveRoomOwners() bool {
	if o != nil && !IsNil(o.ShowInactiveRoomOwners) {
		return true
	}

	return false
}

// SetShowInactiveRoomOwners gets a reference to the given bool and assigns it to the ShowInactiveRoomOwners field.
func (o *ProfileType) SetShowInactiveRoomOwners(v bool) {
	o.ShowInactiveRoomOwners = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ProfileType) GetStatusCode() ProfileStatusType {
	if o == nil || IsNil(o.StatusCode) {
		var ret ProfileStatusType
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetStatusCodeOk() (*ProfileStatusType, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ProfileType) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given ProfileStatusType and assigns it to the StatusCode field.
func (o *ProfileType) SetStatusCode(v ProfileStatusType) {
	o.StatusCode = &v
}

// GetStayReservationInfoList returns the StayReservationInfoList field value if set, zero value otherwise.
func (o *ProfileType) GetStayReservationInfoList() ReservationStayHistoryFutureInfoType {
	if o == nil || IsNil(o.StayReservationInfoList) {
		var ret ReservationStayHistoryFutureInfoType
		return ret
	}
	return *o.StayReservationInfoList
}

// GetStayReservationInfoListOk returns a tuple with the StayReservationInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetStayReservationInfoListOk() (*ReservationStayHistoryFutureInfoType, bool) {
	if o == nil || IsNil(o.StayReservationInfoList) {
		return nil, false
	}
	return o.StayReservationInfoList, true
}

// HasStayReservationInfoList returns a boolean if a field has been set.
func (o *ProfileType) HasStayReservationInfoList() bool {
	if o != nil && !IsNil(o.StayReservationInfoList) {
		return true
	}

	return false
}

// SetStayReservationInfoList gets a reference to the given ReservationStayHistoryFutureInfoType and assigns it to the StayReservationInfoList field.
func (o *ProfileType) SetStayReservationInfoList(v ReservationStayHistoryFutureInfoType) {
	o.StayReservationInfoList = &v
}

// GetTelephones returns the Telephones field value if set, zero value otherwise.
func (o *ProfileType) GetTelephones() ProfileTypeTelephones {
	if o == nil || IsNil(o.Telephones) {
		var ret ProfileTypeTelephones
		return ret
	}
	return *o.Telephones
}

// GetTelephonesOk returns a tuple with the Telephones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetTelephonesOk() (*ProfileTypeTelephones, bool) {
	if o == nil || IsNil(o.Telephones) {
		return nil, false
	}
	return o.Telephones, true
}

// HasTelephones returns a boolean if a field has been set.
func (o *ProfileType) HasTelephones() bool {
	if o != nil && !IsNil(o.Telephones) {
		return true
	}

	return false
}

// SetTelephones gets a reference to the given ProfileTypeTelephones and assigns it to the Telephones field.
func (o *ProfileType) SetTelephones(v ProfileTypeTelephones) {
	o.Telephones = &v
}

// GetURLs returns the URLs field value if set, zero value otherwise.
func (o *ProfileType) GetURLs() ProfileTypeURLs {
	if o == nil || IsNil(o.URLs) {
		var ret ProfileTypeURLs
		return ret
	}
	return *o.URLs
}

// GetURLsOk returns a tuple with the URLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileType) GetURLsOk() (*ProfileTypeURLs, bool) {
	if o == nil || IsNil(o.URLs) {
		return nil, false
	}
	return o.URLs, true
}

// HasURLs returns a boolean if a field has been set.
func (o *ProfileType) HasURLs() bool {
	if o != nil && !IsNil(o.URLs) {
		return true
	}

	return false
}

// SetURLs gets a reference to the given ProfileTypeURLs and assigns it to the URLs field.
func (o *ProfileType) SetURLs(v ProfileTypeURLs) {
	o.URLs = &v
}

func (o ProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.OwnerCode) {
		toSerialize["ownerCode"] = o.OwnerCode
	}
	if !IsNil(o.ProfileImage) {
		toSerialize["profileImage"] = o.ProfileImage
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	if !IsNil(o.RegisteredProperty) {
		toSerialize["registeredProperty"] = o.RegisteredProperty
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.RelationshipsSummary) {
		toSerialize["relationshipsSummary"] = o.RelationshipsSummary
	}
	if !IsNil(o.RequestForHotel) {
		toSerialize["requestForHotel"] = o.RequestForHotel
	}
	if !IsNil(o.RoomOwnershipsList) {
		toSerialize["roomOwnershipsList"] = o.RoomOwnershipsList
	}
	if !IsNil(o.ShowInactiveRoomOwners) {
		toSerialize["showInactiveRoomOwners"] = o.ShowInactiveRoomOwners
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.StayReservationInfoList) {
		toSerialize["stayReservationInfoList"] = o.StayReservationInfoList
	}
	if !IsNil(o.Telephones) {
		toSerialize["telephones"] = o.Telephones
	}
	if !IsNil(o.URLs) {
		toSerialize["uRLs"] = o.URLs
	}
	return toSerialize, nil
}

type NullableProfileType struct {
	value *ProfileType
	isSet bool
}

func (v NullableProfileType) Get() *ProfileType {
	return v.value
}

func (v *NullableProfileType) Set(val *ProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileType(val *ProfileType) *NullableProfileType {
	return &NullableProfileType{value: val, isSet: true}
}

func (v NullableProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


