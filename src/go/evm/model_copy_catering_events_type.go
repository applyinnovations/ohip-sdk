/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CopyCateringEventsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyCateringEventsType{}

// CopyCateringEventsType Criteria to copy events
type CopyCateringEventsType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// Indicates wether to perform pre-cahnge or post-change snapshot of the copied events. By default, it is always considered as false and will provide post-change snapshot.
	CopyAsSnapshot *bool `json:"copyAsSnapshot,omitempty"`
	// Indicate weather to include Catering Event Copy Options. e.g. sub events, notes.
	CopyInstructions []CateringEventCopyInstructionType `json:"copyInstructions,omitempty"`
	CopyStatusMode *CopyStatusModeType `json:"copyStatusMode,omitempty"`
	CopyToDates *DatesType `json:"copyToDates,omitempty"`
	CopyToPackageId *UniqueIDType `json:"copyToPackageId,omitempty"`
	EventIdList *UniqueIDListType `json:"eventIdList,omitempty"`
	// Hotel code where event will be copied.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewCopyCateringEventsType instantiates a new CopyCateringEventsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyCateringEventsType() *CopyCateringEventsType {
	this := CopyCateringEventsType{}
	return &this
}

// NewCopyCateringEventsTypeWithDefaults instantiates a new CopyCateringEventsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyCateringEventsTypeWithDefaults() *CopyCateringEventsType {
	this := CopyCateringEventsType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *CopyCateringEventsType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetCopyAsSnapshot returns the CopyAsSnapshot field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetCopyAsSnapshot() bool {
	if o == nil || IsNil(o.CopyAsSnapshot) {
		var ret bool
		return ret
	}
	return *o.CopyAsSnapshot
}

// GetCopyAsSnapshotOk returns a tuple with the CopyAsSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetCopyAsSnapshotOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyAsSnapshot) {
		return nil, false
	}
	return o.CopyAsSnapshot, true
}

// HasCopyAsSnapshot returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasCopyAsSnapshot() bool {
	if o != nil && !IsNil(o.CopyAsSnapshot) {
		return true
	}

	return false
}

// SetCopyAsSnapshot gets a reference to the given bool and assigns it to the CopyAsSnapshot field.
func (o *CopyCateringEventsType) SetCopyAsSnapshot(v bool) {
	o.CopyAsSnapshot = &v
}

// GetCopyInstructions returns the CopyInstructions field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetCopyInstructions() []CateringEventCopyInstructionType {
	if o == nil || IsNil(o.CopyInstructions) {
		var ret []CateringEventCopyInstructionType
		return ret
	}
	return o.CopyInstructions
}

// GetCopyInstructionsOk returns a tuple with the CopyInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetCopyInstructionsOk() ([]CateringEventCopyInstructionType, bool) {
	if o == nil || IsNil(o.CopyInstructions) {
		return nil, false
	}
	return o.CopyInstructions, true
}

// HasCopyInstructions returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasCopyInstructions() bool {
	if o != nil && !IsNil(o.CopyInstructions) {
		return true
	}

	return false
}

// SetCopyInstructions gets a reference to the given []CateringEventCopyInstructionType and assigns it to the CopyInstructions field.
func (o *CopyCateringEventsType) SetCopyInstructions(v []CateringEventCopyInstructionType) {
	o.CopyInstructions = v
}

// GetCopyStatusMode returns the CopyStatusMode field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetCopyStatusMode() CopyStatusModeType {
	if o == nil || IsNil(o.CopyStatusMode) {
		var ret CopyStatusModeType
		return ret
	}
	return *o.CopyStatusMode
}

// GetCopyStatusModeOk returns a tuple with the CopyStatusMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetCopyStatusModeOk() (*CopyStatusModeType, bool) {
	if o == nil || IsNil(o.CopyStatusMode) {
		return nil, false
	}
	return o.CopyStatusMode, true
}

// HasCopyStatusMode returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasCopyStatusMode() bool {
	if o != nil && !IsNil(o.CopyStatusMode) {
		return true
	}

	return false
}

// SetCopyStatusMode gets a reference to the given CopyStatusModeType and assigns it to the CopyStatusMode field.
func (o *CopyCateringEventsType) SetCopyStatusMode(v CopyStatusModeType) {
	o.CopyStatusMode = &v
}

// GetCopyToDates returns the CopyToDates field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetCopyToDates() DatesType {
	if o == nil || IsNil(o.CopyToDates) {
		var ret DatesType
		return ret
	}
	return *o.CopyToDates
}

// GetCopyToDatesOk returns a tuple with the CopyToDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetCopyToDatesOk() (*DatesType, bool) {
	if o == nil || IsNil(o.CopyToDates) {
		return nil, false
	}
	return o.CopyToDates, true
}

// HasCopyToDates returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasCopyToDates() bool {
	if o != nil && !IsNil(o.CopyToDates) {
		return true
	}

	return false
}

// SetCopyToDates gets a reference to the given DatesType and assigns it to the CopyToDates field.
func (o *CopyCateringEventsType) SetCopyToDates(v DatesType) {
	o.CopyToDates = &v
}

// GetCopyToPackageId returns the CopyToPackageId field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetCopyToPackageId() UniqueIDType {
	if o == nil || IsNil(o.CopyToPackageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.CopyToPackageId
}

// GetCopyToPackageIdOk returns a tuple with the CopyToPackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetCopyToPackageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.CopyToPackageId) {
		return nil, false
	}
	return o.CopyToPackageId, true
}

// HasCopyToPackageId returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasCopyToPackageId() bool {
	if o != nil && !IsNil(o.CopyToPackageId) {
		return true
	}

	return false
}

// SetCopyToPackageId gets a reference to the given UniqueIDType and assigns it to the CopyToPackageId field.
func (o *CopyCateringEventsType) SetCopyToPackageId(v UniqueIDType) {
	o.CopyToPackageId = &v
}

// GetEventIdList returns the EventIdList field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetEventIdList() UniqueIDListType {
	if o == nil || IsNil(o.EventIdList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.EventIdList
}

// GetEventIdListOk returns a tuple with the EventIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetEventIdListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.EventIdList) {
		return nil, false
	}
	return o.EventIdList, true
}

// HasEventIdList returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasEventIdList() bool {
	if o != nil && !IsNil(o.EventIdList) {
		return true
	}

	return false
}

// SetEventIdList gets a reference to the given UniqueIDListType and assigns it to the EventIdList field.
func (o *CopyCateringEventsType) SetEventIdList(v UniqueIDListType) {
	o.EventIdList = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyCateringEventsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyCateringEventsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyCateringEventsType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o CopyCateringEventsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyCateringEventsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.CopyAsSnapshot) {
		toSerialize["copyAsSnapshot"] = o.CopyAsSnapshot
	}
	if !IsNil(o.CopyInstructions) {
		toSerialize["copyInstructions"] = o.CopyInstructions
	}
	if !IsNil(o.CopyStatusMode) {
		toSerialize["copyStatusMode"] = o.CopyStatusMode
	}
	if !IsNil(o.CopyToDates) {
		toSerialize["copyToDates"] = o.CopyToDates
	}
	if !IsNil(o.CopyToPackageId) {
		toSerialize["copyToPackageId"] = o.CopyToPackageId
	}
	if !IsNil(o.EventIdList) {
		toSerialize["eventIdList"] = o.EventIdList
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableCopyCateringEventsType struct {
	value *CopyCateringEventsType
	isSet bool
}

func (v NullableCopyCateringEventsType) Get() *CopyCateringEventsType {
	return v.value
}

func (v *NullableCopyCateringEventsType) Set(val *CopyCateringEventsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyCateringEventsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyCateringEventsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyCateringEventsType(val *CopyCateringEventsType) *NullableCopyCateringEventsType {
	return &NullableCopyCateringEventsType{value: val, isSet: true}
}

func (v NullableCopyCateringEventsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyCateringEventsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


