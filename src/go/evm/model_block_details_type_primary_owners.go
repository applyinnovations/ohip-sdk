/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the BlockDetailsTypePrimaryOwners type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDetailsTypePrimaryOwners{}

// BlockDetailsTypePrimaryOwners Primary owners for the block.
type BlockDetailsTypePrimaryOwners struct {
	BlockOwner *BlockOwnerType `json:"blockOwner,omitempty"`
	// Total number of Block Owners.
	BlockOwnerCount *float32 `json:"blockOwnerCount,omitempty"`
	CateringOwner *BlockOwnerType `json:"cateringOwner,omitempty"`
	// Total number of Catering Owners.
	CateringOwnerCount *float32 `json:"cateringOwnerCount,omitempty"`
	RoomsOwner *BlockOwnerType `json:"roomsOwner,omitempty"`
	// Total number of Rooms Owners.
	RoomsOwnerCount *float32 `json:"roomsOwnerCount,omitempty"`
}

// NewBlockDetailsTypePrimaryOwners instantiates a new BlockDetailsTypePrimaryOwners object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDetailsTypePrimaryOwners() *BlockDetailsTypePrimaryOwners {
	this := BlockDetailsTypePrimaryOwners{}
	return &this
}

// NewBlockDetailsTypePrimaryOwnersWithDefaults instantiates a new BlockDetailsTypePrimaryOwners object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDetailsTypePrimaryOwnersWithDefaults() *BlockDetailsTypePrimaryOwners {
	this := BlockDetailsTypePrimaryOwners{}
	return &this
}

// GetBlockOwner returns the BlockOwner field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetBlockOwner() BlockOwnerType {
	if o == nil || IsNil(o.BlockOwner) {
		var ret BlockOwnerType
		return ret
	}
	return *o.BlockOwner
}

// GetBlockOwnerOk returns a tuple with the BlockOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetBlockOwnerOk() (*BlockOwnerType, bool) {
	if o == nil || IsNil(o.BlockOwner) {
		return nil, false
	}
	return o.BlockOwner, true
}

// HasBlockOwner returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasBlockOwner() bool {
	if o != nil && !IsNil(o.BlockOwner) {
		return true
	}

	return false
}

// SetBlockOwner gets a reference to the given BlockOwnerType and assigns it to the BlockOwner field.
func (o *BlockDetailsTypePrimaryOwners) SetBlockOwner(v BlockOwnerType) {
	o.BlockOwner = &v
}

// GetBlockOwnerCount returns the BlockOwnerCount field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetBlockOwnerCount() float32 {
	if o == nil || IsNil(o.BlockOwnerCount) {
		var ret float32
		return ret
	}
	return *o.BlockOwnerCount
}

// GetBlockOwnerCountOk returns a tuple with the BlockOwnerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetBlockOwnerCountOk() (*float32, bool) {
	if o == nil || IsNil(o.BlockOwnerCount) {
		return nil, false
	}
	return o.BlockOwnerCount, true
}

// HasBlockOwnerCount returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasBlockOwnerCount() bool {
	if o != nil && !IsNil(o.BlockOwnerCount) {
		return true
	}

	return false
}

// SetBlockOwnerCount gets a reference to the given float32 and assigns it to the BlockOwnerCount field.
func (o *BlockDetailsTypePrimaryOwners) SetBlockOwnerCount(v float32) {
	o.BlockOwnerCount = &v
}

// GetCateringOwner returns the CateringOwner field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetCateringOwner() BlockOwnerType {
	if o == nil || IsNil(o.CateringOwner) {
		var ret BlockOwnerType
		return ret
	}
	return *o.CateringOwner
}

// GetCateringOwnerOk returns a tuple with the CateringOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetCateringOwnerOk() (*BlockOwnerType, bool) {
	if o == nil || IsNil(o.CateringOwner) {
		return nil, false
	}
	return o.CateringOwner, true
}

// HasCateringOwner returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasCateringOwner() bool {
	if o != nil && !IsNil(o.CateringOwner) {
		return true
	}

	return false
}

// SetCateringOwner gets a reference to the given BlockOwnerType and assigns it to the CateringOwner field.
func (o *BlockDetailsTypePrimaryOwners) SetCateringOwner(v BlockOwnerType) {
	o.CateringOwner = &v
}

// GetCateringOwnerCount returns the CateringOwnerCount field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetCateringOwnerCount() float32 {
	if o == nil || IsNil(o.CateringOwnerCount) {
		var ret float32
		return ret
	}
	return *o.CateringOwnerCount
}

// GetCateringOwnerCountOk returns a tuple with the CateringOwnerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetCateringOwnerCountOk() (*float32, bool) {
	if o == nil || IsNil(o.CateringOwnerCount) {
		return nil, false
	}
	return o.CateringOwnerCount, true
}

// HasCateringOwnerCount returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasCateringOwnerCount() bool {
	if o != nil && !IsNil(o.CateringOwnerCount) {
		return true
	}

	return false
}

// SetCateringOwnerCount gets a reference to the given float32 and assigns it to the CateringOwnerCount field.
func (o *BlockDetailsTypePrimaryOwners) SetCateringOwnerCount(v float32) {
	o.CateringOwnerCount = &v
}

// GetRoomsOwner returns the RoomsOwner field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetRoomsOwner() BlockOwnerType {
	if o == nil || IsNil(o.RoomsOwner) {
		var ret BlockOwnerType
		return ret
	}
	return *o.RoomsOwner
}

// GetRoomsOwnerOk returns a tuple with the RoomsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetRoomsOwnerOk() (*BlockOwnerType, bool) {
	if o == nil || IsNil(o.RoomsOwner) {
		return nil, false
	}
	return o.RoomsOwner, true
}

// HasRoomsOwner returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasRoomsOwner() bool {
	if o != nil && !IsNil(o.RoomsOwner) {
		return true
	}

	return false
}

// SetRoomsOwner gets a reference to the given BlockOwnerType and assigns it to the RoomsOwner field.
func (o *BlockDetailsTypePrimaryOwners) SetRoomsOwner(v BlockOwnerType) {
	o.RoomsOwner = &v
}

// GetRoomsOwnerCount returns the RoomsOwnerCount field value if set, zero value otherwise.
func (o *BlockDetailsTypePrimaryOwners) GetRoomsOwnerCount() float32 {
	if o == nil || IsNil(o.RoomsOwnerCount) {
		var ret float32
		return ret
	}
	return *o.RoomsOwnerCount
}

// GetRoomsOwnerCountOk returns a tuple with the RoomsOwnerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypePrimaryOwners) GetRoomsOwnerCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RoomsOwnerCount) {
		return nil, false
	}
	return o.RoomsOwnerCount, true
}

// HasRoomsOwnerCount returns a boolean if a field has been set.
func (o *BlockDetailsTypePrimaryOwners) HasRoomsOwnerCount() bool {
	if o != nil && !IsNil(o.RoomsOwnerCount) {
		return true
	}

	return false
}

// SetRoomsOwnerCount gets a reference to the given float32 and assigns it to the RoomsOwnerCount field.
func (o *BlockDetailsTypePrimaryOwners) SetRoomsOwnerCount(v float32) {
	o.RoomsOwnerCount = &v
}

func (o BlockDetailsTypePrimaryOwners) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDetailsTypePrimaryOwners) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockOwner) {
		toSerialize["blockOwner"] = o.BlockOwner
	}
	if !IsNil(o.BlockOwnerCount) {
		toSerialize["blockOwnerCount"] = o.BlockOwnerCount
	}
	if !IsNil(o.CateringOwner) {
		toSerialize["cateringOwner"] = o.CateringOwner
	}
	if !IsNil(o.CateringOwnerCount) {
		toSerialize["cateringOwnerCount"] = o.CateringOwnerCount
	}
	if !IsNil(o.RoomsOwner) {
		toSerialize["roomsOwner"] = o.RoomsOwner
	}
	if !IsNil(o.RoomsOwnerCount) {
		toSerialize["roomsOwnerCount"] = o.RoomsOwnerCount
	}
	return toSerialize, nil
}

type NullableBlockDetailsTypePrimaryOwners struct {
	value *BlockDetailsTypePrimaryOwners
	isSet bool
}

func (v NullableBlockDetailsTypePrimaryOwners) Get() *BlockDetailsTypePrimaryOwners {
	return v.value
}

func (v *NullableBlockDetailsTypePrimaryOwners) Set(val *BlockDetailsTypePrimaryOwners) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDetailsTypePrimaryOwners) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDetailsTypePrimaryOwners) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDetailsTypePrimaryOwners(val *BlockDetailsTypePrimaryOwners) *NullableBlockDetailsTypePrimaryOwners {
	return &NullableBlockDetailsTypePrimaryOwners{value: val, isSet: true}
}

func (v NullableBlockDetailsTypePrimaryOwners) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDetailsTypePrimaryOwners) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


