/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the OpportunityEventDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityEventDetailType{}

// OpportunityEventDetailType Information about the Catering Event which will be added to the Opportunity Block
type OpportunityEventDetailType struct {
	Attendees *CateringEventsAttendeesType `json:"attendees,omitempty"`
	// Identifies the days for which catering events will be added to the Opportunity Block.
	Day *string `json:"day,omitempty"`
	// It is the group details to display on the outside of a meeting functionSpace Details.
	Doorcard *string `json:"doorcard,omitempty"`
	EventName *TranslationTextType60 `json:"eventName,omitempty"`
	EventStatus *BookingStatusType `json:"eventStatus,omitempty"`
	EventTimeSpan *DateTimeSpanType `json:"eventTimeSpan,omitempty"`
	// Type of event.
	EventType *string `json:"eventType,omitempty"`
	// Identifies the quantity of the event type needed for the particular day, time and space time.
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewOpportunityEventDetailType instantiates a new OpportunityEventDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityEventDetailType() *OpportunityEventDetailType {
	this := OpportunityEventDetailType{}
	return &this
}

// NewOpportunityEventDetailTypeWithDefaults instantiates a new OpportunityEventDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityEventDetailTypeWithDefaults() *OpportunityEventDetailType {
	this := OpportunityEventDetailType{}
	return &this
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetAttendees() CateringEventsAttendeesType {
	if o == nil || IsNil(o.Attendees) {
		var ret CateringEventsAttendeesType
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetAttendeesOk() (*CateringEventsAttendeesType, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given CateringEventsAttendeesType and assigns it to the Attendees field.
func (o *OpportunityEventDetailType) SetAttendees(v CateringEventsAttendeesType) {
	o.Attendees = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetDay() string {
	if o == nil || IsNil(o.Day) {
		var ret string
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetDayOk() (*string, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given string and assigns it to the Day field.
func (o *OpportunityEventDetailType) SetDay(v string) {
	o.Day = &v
}

// GetDoorcard returns the Doorcard field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetDoorcard() string {
	if o == nil || IsNil(o.Doorcard) {
		var ret string
		return ret
	}
	return *o.Doorcard
}

// GetDoorcardOk returns a tuple with the Doorcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetDoorcardOk() (*string, bool) {
	if o == nil || IsNil(o.Doorcard) {
		return nil, false
	}
	return o.Doorcard, true
}

// HasDoorcard returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasDoorcard() bool {
	if o != nil && !IsNil(o.Doorcard) {
		return true
	}

	return false
}

// SetDoorcard gets a reference to the given string and assigns it to the Doorcard field.
func (o *OpportunityEventDetailType) SetDoorcard(v string) {
	o.Doorcard = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetEventName() TranslationTextType60 {
	if o == nil || IsNil(o.EventName) {
		var ret TranslationTextType60
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetEventNameOk() (*TranslationTextType60, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given TranslationTextType60 and assigns it to the EventName field.
func (o *OpportunityEventDetailType) SetEventName(v TranslationTextType60) {
	o.EventName = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetEventStatus() BookingStatusType {
	if o == nil || IsNil(o.EventStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetEventStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given BookingStatusType and assigns it to the EventStatus field.
func (o *OpportunityEventDetailType) SetEventStatus(v BookingStatusType) {
	o.EventStatus = &v
}

// GetEventTimeSpan returns the EventTimeSpan field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetEventTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.EventTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.EventTimeSpan
}

// GetEventTimeSpanOk returns a tuple with the EventTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetEventTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.EventTimeSpan) {
		return nil, false
	}
	return o.EventTimeSpan, true
}

// HasEventTimeSpan returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasEventTimeSpan() bool {
	if o != nil && !IsNil(o.EventTimeSpan) {
		return true
	}

	return false
}

// SetEventTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the EventTimeSpan field.
func (o *OpportunityEventDetailType) SetEventTimeSpan(v DateTimeSpanType) {
	o.EventTimeSpan = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *OpportunityEventDetailType) SetEventType(v string) {
	o.EventType = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OpportunityEventDetailType) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityEventDetailType) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OpportunityEventDetailType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *OpportunityEventDetailType) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o OpportunityEventDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityEventDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !IsNil(o.Doorcard) {
		toSerialize["doorcard"] = o.Doorcard
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.EventTimeSpan) {
		toSerialize["eventTimeSpan"] = o.EventTimeSpan
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableOpportunityEventDetailType struct {
	value *OpportunityEventDetailType
	isSet bool
}

func (v NullableOpportunityEventDetailType) Get() *OpportunityEventDetailType {
	return v.value
}

func (v *NullableOpportunityEventDetailType) Set(val *OpportunityEventDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityEventDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityEventDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityEventDetailType(val *OpportunityEventDetailType) *NullableOpportunityEventDetailType {
	return &NullableOpportunityEventDetailType{value: val, isSet: true}
}

func (v NullableOpportunityEventDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityEventDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


