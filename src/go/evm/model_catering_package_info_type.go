/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringPackageInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringPackageInfoType{}

// CateringPackageInfoType Catering Package details.
type CateringPackageInfoType struct {
	Description *TranslationTextType200 `json:"description,omitempty"`
	// Duration (in days) of the Catering Package.
	Duration *int32 `json:"duration,omitempty"`
	// Defines if Catering Package is a Template or not.
	IsTemplate *bool `json:"isTemplate,omitempty"`
	// Package Code associated with the Catering Package.
	PkgCode *string `json:"pkgCode,omitempty"`
	// Defines if web booking is allowed.
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewCateringPackageInfoType instantiates a new CateringPackageInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringPackageInfoType() *CateringPackageInfoType {
	this := CateringPackageInfoType{}
	return &this
}

// NewCateringPackageInfoTypeWithDefaults instantiates a new CateringPackageInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringPackageInfoTypeWithDefaults() *CateringPackageInfoType {
	this := CateringPackageInfoType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CateringPackageInfoType) GetDescription() TranslationTextType200 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType200
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageInfoType) GetDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CateringPackageInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType200 and assigns it to the Description field.
func (o *CateringPackageInfoType) SetDescription(v TranslationTextType200) {
	o.Description = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CateringPackageInfoType) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageInfoType) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CateringPackageInfoType) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *CateringPackageInfoType) SetDuration(v int32) {
	o.Duration = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *CateringPackageInfoType) GetIsTemplate() bool {
	if o == nil || IsNil(o.IsTemplate) {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageInfoType) GetIsTemplateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemplate) {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *CateringPackageInfoType) HasIsTemplate() bool {
	if o != nil && !IsNil(o.IsTemplate) {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *CateringPackageInfoType) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetPkgCode returns the PkgCode field value if set, zero value otherwise.
func (o *CateringPackageInfoType) GetPkgCode() string {
	if o == nil || IsNil(o.PkgCode) {
		var ret string
		return ret
	}
	return *o.PkgCode
}

// GetPkgCodeOk returns a tuple with the PkgCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageInfoType) GetPkgCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PkgCode) {
		return nil, false
	}
	return o.PkgCode, true
}

// HasPkgCode returns a boolean if a field has been set.
func (o *CateringPackageInfoType) HasPkgCode() bool {
	if o != nil && !IsNil(o.PkgCode) {
		return true
	}

	return false
}

// SetPkgCode gets a reference to the given string and assigns it to the PkgCode field.
func (o *CateringPackageInfoType) SetPkgCode(v string) {
	o.PkgCode = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *CateringPackageInfoType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageInfoType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *CateringPackageInfoType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *CateringPackageInfoType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o CateringPackageInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringPackageInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.IsTemplate) {
		toSerialize["isTemplate"] = o.IsTemplate
	}
	if !IsNil(o.PkgCode) {
		toSerialize["pkgCode"] = o.PkgCode
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableCateringPackageInfoType struct {
	value *CateringPackageInfoType
	isSet bool
}

func (v NullableCateringPackageInfoType) Get() *CateringPackageInfoType {
	return v.value
}

func (v *NullableCateringPackageInfoType) Set(val *CateringPackageInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageInfoType(val *CateringPackageInfoType) *NullableCateringPackageInfoType {
	return &NullableCateringPackageInfoType{value: val, isSet: true}
}

func (v NullableCateringPackageInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


