/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the PostCateringPackageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCateringPackageRequest{}

// PostCateringPackageRequest struct for PostCateringPackageRequest
type PostCateringPackageRequest struct {
	Criteria *BlockCateringPackageType `json:"criteria,omitempty"`
	Links *Links `json:"links,omitempty"`
	// Indicates what number of retry attempt this request represents. If this is the original request, RetryCount should be set to 0.
	RequestCount *int32 `json:"requestCount,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostCateringPackageRequest instantiates a new PostCateringPackageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCateringPackageRequest() *PostCateringPackageRequest {
	this := PostCateringPackageRequest{}
	return &this
}

// NewPostCateringPackageRequestWithDefaults instantiates a new PostCateringPackageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCateringPackageRequestWithDefaults() *PostCateringPackageRequest {
	this := PostCateringPackageRequest{}
	return &this
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *PostCateringPackageRequest) GetCriteria() BlockCateringPackageType {
	if o == nil || IsNil(o.Criteria) {
		var ret BlockCateringPackageType
		return ret
	}
	return *o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCateringPackageRequest) GetCriteriaOk() (*BlockCateringPackageType, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *PostCateringPackageRequest) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given BlockCateringPackageType and assigns it to the Criteria field.
func (o *PostCateringPackageRequest) SetCriteria(v BlockCateringPackageType) {
	o.Criteria = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostCateringPackageRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCateringPackageRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostCateringPackageRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostCateringPackageRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetRequestCount returns the RequestCount field value if set, zero value otherwise.
func (o *PostCateringPackageRequest) GetRequestCount() int32 {
	if o == nil || IsNil(o.RequestCount) {
		var ret int32
		return ret
	}
	return *o.RequestCount
}

// GetRequestCountOk returns a tuple with the RequestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCateringPackageRequest) GetRequestCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestCount) {
		return nil, false
	}
	return o.RequestCount, true
}

// HasRequestCount returns a boolean if a field has been set.
func (o *PostCateringPackageRequest) HasRequestCount() bool {
	if o != nil && !IsNil(o.RequestCount) {
		return true
	}

	return false
}

// SetRequestCount gets a reference to the given int32 and assigns it to the RequestCount field.
func (o *PostCateringPackageRequest) SetRequestCount(v int32) {
	o.RequestCount = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostCateringPackageRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCateringPackageRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostCateringPackageRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostCateringPackageRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostCateringPackageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCateringPackageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RequestCount) {
		toSerialize["requestCount"] = o.RequestCount
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostCateringPackageRequest struct {
	value *PostCateringPackageRequest
	isSet bool
}

func (v NullablePostCateringPackageRequest) Get() *PostCateringPackageRequest {
	return v.value
}

func (v *NullablePostCateringPackageRequest) Set(val *PostCateringPackageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCateringPackageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCateringPackageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCateringPackageRequest(val *PostCateringPackageRequest) *NullablePostCateringPackageRequest {
	return &NullablePostCateringPackageRequest{value: val, isSet: true}
}

func (v NullablePostCateringPackageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCateringPackageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


