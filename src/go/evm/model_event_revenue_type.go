/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventRevenueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRevenueType{}

// EventRevenueType struct for EventRevenueType
type EventRevenueType struct {
	Revenue *CurrencyAmountType `json:"revenue,omitempty"`
	// Type of Revenue
	RevenueType *string `json:"revenueType,omitempty"`
}

// NewEventRevenueType instantiates a new EventRevenueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRevenueType() *EventRevenueType {
	this := EventRevenueType{}
	return &this
}

// NewEventRevenueTypeWithDefaults instantiates a new EventRevenueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRevenueTypeWithDefaults() *EventRevenueType {
	this := EventRevenueType{}
	return &this
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *EventRevenueType) GetRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.Revenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRevenueType) GetRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *EventRevenueType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given CurrencyAmountType and assigns it to the Revenue field.
func (o *EventRevenueType) SetRevenue(v CurrencyAmountType) {
	o.Revenue = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *EventRevenueType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRevenueType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *EventRevenueType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *EventRevenueType) SetRevenueType(v string) {
	o.RevenueType = &v
}

func (o EventRevenueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRevenueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	return toSerialize, nil
}

type NullableEventRevenueType struct {
	value *EventRevenueType
	isSet bool
}

func (v NullableEventRevenueType) Get() *EventRevenueType {
	return v.value
}

func (v *NullableEventRevenueType) Set(val *EventRevenueType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRevenueType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRevenueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRevenueType(val *EventRevenueType) *NullableEventRevenueType {
	return &NullableEventRevenueType{value: val, isSet: true}
}

func (v NullableEventRevenueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRevenueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


