/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the RoutingInfoListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingInfoListType{}

// RoutingInfoListType A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
type RoutingInfoListType struct {
	Items []RoutingInfoType
}

// NewRoutingInfoListType instantiates a new RoutingInfoListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingInfoListType() *RoutingInfoListType {
	this := RoutingInfoListType{}
	return &this
}

// NewRoutingInfoListTypeWithDefaults instantiates a new RoutingInfoListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingInfoListTypeWithDefaults() *RoutingInfoListType {
	this := RoutingInfoListType{}
	return &this
}

func (o RoutingInfoListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingInfoListType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *RoutingInfoListType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableRoutingInfoListType struct {
	value RoutingInfoListType
	isSet bool
}

func (v NullableRoutingInfoListType) Get() RoutingInfoListType {
	return v.value
}

func (v *NullableRoutingInfoListType) Set(val RoutingInfoListType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingInfoListType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingInfoListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingInfoListType(val RoutingInfoListType) *NullableRoutingInfoListType {
	return &NullableRoutingInfoListType{value: val, isSet: true}
}

func (v NullableRoutingInfoListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingInfoListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


