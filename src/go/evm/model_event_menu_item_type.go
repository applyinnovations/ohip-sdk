/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventMenuItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMenuItemType{}

// EventMenuItemType Detailed attributes of Menu Item.
type EventMenuItemType struct {
	Attendees *CateringEventsAttendeesType `json:"attendees,omitempty"`
	ClassInfo *CodeDescriptionType `json:"classInfo,omitempty"`
	Container *CodeDescriptionType `json:"container,omitempty"`
	Cost *CurrencyAmountType `json:"cost,omitempty"`
	// Determines the order of menu course.
	Course *float32 `json:"course,omitempty"`
	// Determines the order of menu item within the course.
	CourseOrder *float32 `json:"courseOrder,omitempty"`
	// Indicates whether this menu item is custom
	Custom *bool `json:"custom,omitempty"`
	// Demand Factor of the Menu item.
	DemandFactor *float32 `json:"demandFactor,omitempty"`
	Description *TranslationTextType2000 `json:"description,omitempty"`
	DietaryPreferenceList *DietaryPrefListType `json:"dietaryPreferenceList,omitempty"`
	// Discount Percentage applied to Rent Amount.
	DiscountPercentage *float32 `json:"discountPercentage,omitempty"`
	// Defines the Display Order of the menu item class, to which the menu item is attached
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	EventMenuDetailID *UniqueIDType `json:"eventMenuDetailID,omitempty"`
	EventTypes *CodeListType `json:"eventTypes,omitempty"`
	// The Hotel code which the menu item class belongs to
	HotelId *string `json:"hotelId,omitempty"`
	Id *UniqueIDType `json:"id,omitempty"`
	// Check for the status of menu item
	Inactive *bool `json:"inactive,omitempty"`
	// Included flag
	IncludedYN *bool `json:"includedYN,omitempty"`
	// Selection of this notes that the price defined is charged 'as-consumed' basis
	ItemConsumption *bool `json:"itemConsumption,omitempty"`
	// Determines if the Menu Item is mandatory or not
	MandatoryYN *bool `json:"mandatoryYN,omitempty"`
	MenuType *MenuTypeType `json:"menuType,omitempty"`
	Name1 *TranslationTextType2000 `json:"name1,omitempty"`
	Name2 *TranslationTextType2000 `json:"name2,omitempty"`
	Name3 *TranslationTextType2000 `json:"name3,omitempty"`
	Origin1 *TranslationTextType2000 `json:"origin1,omitempty"`
	Origin2 *TranslationTextType2000 `json:"origin2,omitempty"`
	Portion *TranslationTextType2000 `json:"portion,omitempty"`
	// check if Print action is required for menu item
	Print *bool `json:"print,omitempty"`
	// Article number in Caps of menu item
	QuickInsertCode *string `json:"quickInsertCode,omitempty"`
	ResponsibleDepartments *CodeListType `json:"responsibleDepartments,omitempty"`
	// Any particular restriction description in 100 charactera
	Restriction *string `json:"restriction,omitempty"`
	// RevenueType of Menu Item
	RevenueType *string `json:"revenueType,omitempty"`
	SalesPrice *CurrencyAmountType `json:"salesPrice,omitempty"`
	// Numeric value of servings of Menu item
	Servings *int32 `json:"servings,omitempty"`
	// Check of Menu Item if it is web bookable
	WebBookable *bool `json:"webBookable,omitempty"`
	// This value is typically the year of the Wine
	Year *int32 `json:"year,omitempty"`
}

// NewEventMenuItemType instantiates a new EventMenuItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMenuItemType() *EventMenuItemType {
	this := EventMenuItemType{}
	return &this
}

// NewEventMenuItemTypeWithDefaults instantiates a new EventMenuItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMenuItemTypeWithDefaults() *EventMenuItemType {
	this := EventMenuItemType{}
	return &this
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *EventMenuItemType) GetAttendees() CateringEventsAttendeesType {
	if o == nil || IsNil(o.Attendees) {
		var ret CateringEventsAttendeesType
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetAttendeesOk() (*CateringEventsAttendeesType, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *EventMenuItemType) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given CateringEventsAttendeesType and assigns it to the Attendees field.
func (o *EventMenuItemType) SetAttendees(v CateringEventsAttendeesType) {
	o.Attendees = &v
}

// GetClassInfo returns the ClassInfo field value if set, zero value otherwise.
func (o *EventMenuItemType) GetClassInfo() CodeDescriptionType {
	if o == nil || IsNil(o.ClassInfo) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.ClassInfo
}

// GetClassInfoOk returns a tuple with the ClassInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetClassInfoOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.ClassInfo) {
		return nil, false
	}
	return o.ClassInfo, true
}

// HasClassInfo returns a boolean if a field has been set.
func (o *EventMenuItemType) HasClassInfo() bool {
	if o != nil && !IsNil(o.ClassInfo) {
		return true
	}

	return false
}

// SetClassInfo gets a reference to the given CodeDescriptionType and assigns it to the ClassInfo field.
func (o *EventMenuItemType) SetClassInfo(v CodeDescriptionType) {
	o.ClassInfo = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *EventMenuItemType) GetContainer() CodeDescriptionType {
	if o == nil || IsNil(o.Container) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetContainerOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *EventMenuItemType) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given CodeDescriptionType and assigns it to the Container field.
func (o *EventMenuItemType) SetContainer(v CodeDescriptionType) {
	o.Container = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *EventMenuItemType) GetCost() CurrencyAmountType {
	if o == nil || IsNil(o.Cost) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetCostOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *EventMenuItemType) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given CurrencyAmountType and assigns it to the Cost field.
func (o *EventMenuItemType) SetCost(v CurrencyAmountType) {
	o.Cost = &v
}

// GetCourse returns the Course field value if set, zero value otherwise.
func (o *EventMenuItemType) GetCourse() float32 {
	if o == nil || IsNil(o.Course) {
		var ret float32
		return ret
	}
	return *o.Course
}

// GetCourseOk returns a tuple with the Course field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetCourseOk() (*float32, bool) {
	if o == nil || IsNil(o.Course) {
		return nil, false
	}
	return o.Course, true
}

// HasCourse returns a boolean if a field has been set.
func (o *EventMenuItemType) HasCourse() bool {
	if o != nil && !IsNil(o.Course) {
		return true
	}

	return false
}

// SetCourse gets a reference to the given float32 and assigns it to the Course field.
func (o *EventMenuItemType) SetCourse(v float32) {
	o.Course = &v
}

// GetCourseOrder returns the CourseOrder field value if set, zero value otherwise.
func (o *EventMenuItemType) GetCourseOrder() float32 {
	if o == nil || IsNil(o.CourseOrder) {
		var ret float32
		return ret
	}
	return *o.CourseOrder
}

// GetCourseOrderOk returns a tuple with the CourseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetCourseOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.CourseOrder) {
		return nil, false
	}
	return o.CourseOrder, true
}

// HasCourseOrder returns a boolean if a field has been set.
func (o *EventMenuItemType) HasCourseOrder() bool {
	if o != nil && !IsNil(o.CourseOrder) {
		return true
	}

	return false
}

// SetCourseOrder gets a reference to the given float32 and assigns it to the CourseOrder field.
func (o *EventMenuItemType) SetCourseOrder(v float32) {
	o.CourseOrder = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *EventMenuItemType) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *EventMenuItemType) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *EventMenuItemType) SetCustom(v bool) {
	o.Custom = &v
}

// GetDemandFactor returns the DemandFactor field value if set, zero value otherwise.
func (o *EventMenuItemType) GetDemandFactor() float32 {
	if o == nil || IsNil(o.DemandFactor) {
		var ret float32
		return ret
	}
	return *o.DemandFactor
}

// GetDemandFactorOk returns a tuple with the DemandFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetDemandFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.DemandFactor) {
		return nil, false
	}
	return o.DemandFactor, true
}

// HasDemandFactor returns a boolean if a field has been set.
func (o *EventMenuItemType) HasDemandFactor() bool {
	if o != nil && !IsNil(o.DemandFactor) {
		return true
	}

	return false
}

// SetDemandFactor gets a reference to the given float32 and assigns it to the DemandFactor field.
func (o *EventMenuItemType) SetDemandFactor(v float32) {
	o.DemandFactor = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventMenuItemType) GetDescription() TranslationTextType2000 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetDescriptionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventMenuItemType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType2000 and assigns it to the Description field.
func (o *EventMenuItemType) SetDescription(v TranslationTextType2000) {
	o.Description = &v
}

// GetDietaryPreferenceList returns the DietaryPreferenceList field value if set, zero value otherwise.
func (o *EventMenuItemType) GetDietaryPreferenceList() DietaryPrefListType {
	if o == nil || IsNil(o.DietaryPreferenceList) {
		var ret DietaryPrefListType
		return ret
	}
	return *o.DietaryPreferenceList
}

// GetDietaryPreferenceListOk returns a tuple with the DietaryPreferenceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetDietaryPreferenceListOk() (*DietaryPrefListType, bool) {
	if o == nil || IsNil(o.DietaryPreferenceList) {
		return nil, false
	}
	return o.DietaryPreferenceList, true
}

// HasDietaryPreferenceList returns a boolean if a field has been set.
func (o *EventMenuItemType) HasDietaryPreferenceList() bool {
	if o != nil && !IsNil(o.DietaryPreferenceList) {
		return true
	}

	return false
}

// SetDietaryPreferenceList gets a reference to the given DietaryPrefListType and assigns it to the DietaryPreferenceList field.
func (o *EventMenuItemType) SetDietaryPreferenceList(v DietaryPrefListType) {
	o.DietaryPreferenceList = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *EventMenuItemType) GetDiscountPercentage() float32 {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret float32
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetDiscountPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *EventMenuItemType) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given float32 and assigns it to the DiscountPercentage field.
func (o *EventMenuItemType) SetDiscountPercentage(v float32) {
	o.DiscountPercentage = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *EventMenuItemType) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *EventMenuItemType) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *EventMenuItemType) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetEventMenuDetailID returns the EventMenuDetailID field value if set, zero value otherwise.
func (o *EventMenuItemType) GetEventMenuDetailID() UniqueIDType {
	if o == nil || IsNil(o.EventMenuDetailID) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventMenuDetailID
}

// GetEventMenuDetailIDOk returns a tuple with the EventMenuDetailID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetEventMenuDetailIDOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventMenuDetailID) {
		return nil, false
	}
	return o.EventMenuDetailID, true
}

// HasEventMenuDetailID returns a boolean if a field has been set.
func (o *EventMenuItemType) HasEventMenuDetailID() bool {
	if o != nil && !IsNil(o.EventMenuDetailID) {
		return true
	}

	return false
}

// SetEventMenuDetailID gets a reference to the given UniqueIDType and assigns it to the EventMenuDetailID field.
func (o *EventMenuItemType) SetEventMenuDetailID(v UniqueIDType) {
	o.EventMenuDetailID = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *EventMenuItemType) GetEventTypes() CodeListType {
	if o == nil || IsNil(o.EventTypes) {
		var ret CodeListType
		return ret
	}
	return *o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetEventTypesOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *EventMenuItemType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given CodeListType and assigns it to the EventTypes field.
func (o *EventMenuItemType) SetEventTypes(v CodeListType) {
	o.EventTypes = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventMenuItemType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventMenuItemType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventMenuItemType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventMenuItemType) GetId() UniqueIDType {
	if o == nil || IsNil(o.Id) {
		var ret UniqueIDType
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventMenuItemType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UniqueIDType and assigns it to the Id field.
func (o *EventMenuItemType) SetId(v UniqueIDType) {
	o.Id = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *EventMenuItemType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *EventMenuItemType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *EventMenuItemType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetIncludedYN returns the IncludedYN field value if set, zero value otherwise.
func (o *EventMenuItemType) GetIncludedYN() bool {
	if o == nil || IsNil(o.IncludedYN) {
		var ret bool
		return ret
	}
	return *o.IncludedYN
}

// GetIncludedYNOk returns a tuple with the IncludedYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetIncludedYNOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedYN) {
		return nil, false
	}
	return o.IncludedYN, true
}

// HasIncludedYN returns a boolean if a field has been set.
func (o *EventMenuItemType) HasIncludedYN() bool {
	if o != nil && !IsNil(o.IncludedYN) {
		return true
	}

	return false
}

// SetIncludedYN gets a reference to the given bool and assigns it to the IncludedYN field.
func (o *EventMenuItemType) SetIncludedYN(v bool) {
	o.IncludedYN = &v
}

// GetItemConsumption returns the ItemConsumption field value if set, zero value otherwise.
func (o *EventMenuItemType) GetItemConsumption() bool {
	if o == nil || IsNil(o.ItemConsumption) {
		var ret bool
		return ret
	}
	return *o.ItemConsumption
}

// GetItemConsumptionOk returns a tuple with the ItemConsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetItemConsumptionOk() (*bool, bool) {
	if o == nil || IsNil(o.ItemConsumption) {
		return nil, false
	}
	return o.ItemConsumption, true
}

// HasItemConsumption returns a boolean if a field has been set.
func (o *EventMenuItemType) HasItemConsumption() bool {
	if o != nil && !IsNil(o.ItemConsumption) {
		return true
	}

	return false
}

// SetItemConsumption gets a reference to the given bool and assigns it to the ItemConsumption field.
func (o *EventMenuItemType) SetItemConsumption(v bool) {
	o.ItemConsumption = &v
}

// GetMandatoryYN returns the MandatoryYN field value if set, zero value otherwise.
func (o *EventMenuItemType) GetMandatoryYN() bool {
	if o == nil || IsNil(o.MandatoryYN) {
		var ret bool
		return ret
	}
	return *o.MandatoryYN
}

// GetMandatoryYNOk returns a tuple with the MandatoryYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetMandatoryYNOk() (*bool, bool) {
	if o == nil || IsNil(o.MandatoryYN) {
		return nil, false
	}
	return o.MandatoryYN, true
}

// HasMandatoryYN returns a boolean if a field has been set.
func (o *EventMenuItemType) HasMandatoryYN() bool {
	if o != nil && !IsNil(o.MandatoryYN) {
		return true
	}

	return false
}

// SetMandatoryYN gets a reference to the given bool and assigns it to the MandatoryYN field.
func (o *EventMenuItemType) SetMandatoryYN(v bool) {
	o.MandatoryYN = &v
}

// GetMenuType returns the MenuType field value if set, zero value otherwise.
func (o *EventMenuItemType) GetMenuType() MenuTypeType {
	if o == nil || IsNil(o.MenuType) {
		var ret MenuTypeType
		return ret
	}
	return *o.MenuType
}

// GetMenuTypeOk returns a tuple with the MenuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetMenuTypeOk() (*MenuTypeType, bool) {
	if o == nil || IsNil(o.MenuType) {
		return nil, false
	}
	return o.MenuType, true
}

// HasMenuType returns a boolean if a field has been set.
func (o *EventMenuItemType) HasMenuType() bool {
	if o != nil && !IsNil(o.MenuType) {
		return true
	}

	return false
}

// SetMenuType gets a reference to the given MenuTypeType and assigns it to the MenuType field.
func (o *EventMenuItemType) SetMenuType(v MenuTypeType) {
	o.MenuType = &v
}

// GetName1 returns the Name1 field value if set, zero value otherwise.
func (o *EventMenuItemType) GetName1() TranslationTextType2000 {
	if o == nil || IsNil(o.Name1) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Name1
}

// GetName1Ok returns a tuple with the Name1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetName1Ok() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Name1) {
		return nil, false
	}
	return o.Name1, true
}

// HasName1 returns a boolean if a field has been set.
func (o *EventMenuItemType) HasName1() bool {
	if o != nil && !IsNil(o.Name1) {
		return true
	}

	return false
}

// SetName1 gets a reference to the given TranslationTextType2000 and assigns it to the Name1 field.
func (o *EventMenuItemType) SetName1(v TranslationTextType2000) {
	o.Name1 = &v
}

// GetName2 returns the Name2 field value if set, zero value otherwise.
func (o *EventMenuItemType) GetName2() TranslationTextType2000 {
	if o == nil || IsNil(o.Name2) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Name2
}

// GetName2Ok returns a tuple with the Name2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetName2Ok() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Name2) {
		return nil, false
	}
	return o.Name2, true
}

// HasName2 returns a boolean if a field has been set.
func (o *EventMenuItemType) HasName2() bool {
	if o != nil && !IsNil(o.Name2) {
		return true
	}

	return false
}

// SetName2 gets a reference to the given TranslationTextType2000 and assigns it to the Name2 field.
func (o *EventMenuItemType) SetName2(v TranslationTextType2000) {
	o.Name2 = &v
}

// GetName3 returns the Name3 field value if set, zero value otherwise.
func (o *EventMenuItemType) GetName3() TranslationTextType2000 {
	if o == nil || IsNil(o.Name3) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Name3
}

// GetName3Ok returns a tuple with the Name3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetName3Ok() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Name3) {
		return nil, false
	}
	return o.Name3, true
}

// HasName3 returns a boolean if a field has been set.
func (o *EventMenuItemType) HasName3() bool {
	if o != nil && !IsNil(o.Name3) {
		return true
	}

	return false
}

// SetName3 gets a reference to the given TranslationTextType2000 and assigns it to the Name3 field.
func (o *EventMenuItemType) SetName3(v TranslationTextType2000) {
	o.Name3 = &v
}

// GetOrigin1 returns the Origin1 field value if set, zero value otherwise.
func (o *EventMenuItemType) GetOrigin1() TranslationTextType2000 {
	if o == nil || IsNil(o.Origin1) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Origin1
}

// GetOrigin1Ok returns a tuple with the Origin1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetOrigin1Ok() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Origin1) {
		return nil, false
	}
	return o.Origin1, true
}

// HasOrigin1 returns a boolean if a field has been set.
func (o *EventMenuItemType) HasOrigin1() bool {
	if o != nil && !IsNil(o.Origin1) {
		return true
	}

	return false
}

// SetOrigin1 gets a reference to the given TranslationTextType2000 and assigns it to the Origin1 field.
func (o *EventMenuItemType) SetOrigin1(v TranslationTextType2000) {
	o.Origin1 = &v
}

// GetOrigin2 returns the Origin2 field value if set, zero value otherwise.
func (o *EventMenuItemType) GetOrigin2() TranslationTextType2000 {
	if o == nil || IsNil(o.Origin2) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Origin2
}

// GetOrigin2Ok returns a tuple with the Origin2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetOrigin2Ok() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Origin2) {
		return nil, false
	}
	return o.Origin2, true
}

// HasOrigin2 returns a boolean if a field has been set.
func (o *EventMenuItemType) HasOrigin2() bool {
	if o != nil && !IsNil(o.Origin2) {
		return true
	}

	return false
}

// SetOrigin2 gets a reference to the given TranslationTextType2000 and assigns it to the Origin2 field.
func (o *EventMenuItemType) SetOrigin2(v TranslationTextType2000) {
	o.Origin2 = &v
}

// GetPortion returns the Portion field value if set, zero value otherwise.
func (o *EventMenuItemType) GetPortion() TranslationTextType2000 {
	if o == nil || IsNil(o.Portion) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Portion
}

// GetPortionOk returns a tuple with the Portion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetPortionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Portion) {
		return nil, false
	}
	return o.Portion, true
}

// HasPortion returns a boolean if a field has been set.
func (o *EventMenuItemType) HasPortion() bool {
	if o != nil && !IsNil(o.Portion) {
		return true
	}

	return false
}

// SetPortion gets a reference to the given TranslationTextType2000 and assigns it to the Portion field.
func (o *EventMenuItemType) SetPortion(v TranslationTextType2000) {
	o.Portion = &v
}

// GetPrint returns the Print field value if set, zero value otherwise.
func (o *EventMenuItemType) GetPrint() bool {
	if o == nil || IsNil(o.Print) {
		var ret bool
		return ret
	}
	return *o.Print
}

// GetPrintOk returns a tuple with the Print field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.Print) {
		return nil, false
	}
	return o.Print, true
}

// HasPrint returns a boolean if a field has been set.
func (o *EventMenuItemType) HasPrint() bool {
	if o != nil && !IsNil(o.Print) {
		return true
	}

	return false
}

// SetPrint gets a reference to the given bool and assigns it to the Print field.
func (o *EventMenuItemType) SetPrint(v bool) {
	o.Print = &v
}

// GetQuickInsertCode returns the QuickInsertCode field value if set, zero value otherwise.
func (o *EventMenuItemType) GetQuickInsertCode() string {
	if o == nil || IsNil(o.QuickInsertCode) {
		var ret string
		return ret
	}
	return *o.QuickInsertCode
}

// GetQuickInsertCodeOk returns a tuple with the QuickInsertCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetQuickInsertCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QuickInsertCode) {
		return nil, false
	}
	return o.QuickInsertCode, true
}

// HasQuickInsertCode returns a boolean if a field has been set.
func (o *EventMenuItemType) HasQuickInsertCode() bool {
	if o != nil && !IsNil(o.QuickInsertCode) {
		return true
	}

	return false
}

// SetQuickInsertCode gets a reference to the given string and assigns it to the QuickInsertCode field.
func (o *EventMenuItemType) SetQuickInsertCode(v string) {
	o.QuickInsertCode = &v
}

// GetResponsibleDepartments returns the ResponsibleDepartments field value if set, zero value otherwise.
func (o *EventMenuItemType) GetResponsibleDepartments() CodeListType {
	if o == nil || IsNil(o.ResponsibleDepartments) {
		var ret CodeListType
		return ret
	}
	return *o.ResponsibleDepartments
}

// GetResponsibleDepartmentsOk returns a tuple with the ResponsibleDepartments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetResponsibleDepartmentsOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.ResponsibleDepartments) {
		return nil, false
	}
	return o.ResponsibleDepartments, true
}

// HasResponsibleDepartments returns a boolean if a field has been set.
func (o *EventMenuItemType) HasResponsibleDepartments() bool {
	if o != nil && !IsNil(o.ResponsibleDepartments) {
		return true
	}

	return false
}

// SetResponsibleDepartments gets a reference to the given CodeListType and assigns it to the ResponsibleDepartments field.
func (o *EventMenuItemType) SetResponsibleDepartments(v CodeListType) {
	o.ResponsibleDepartments = &v
}

// GetRestriction returns the Restriction field value if set, zero value otherwise.
func (o *EventMenuItemType) GetRestriction() string {
	if o == nil || IsNil(o.Restriction) {
		var ret string
		return ret
	}
	return *o.Restriction
}

// GetRestrictionOk returns a tuple with the Restriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetRestrictionOk() (*string, bool) {
	if o == nil || IsNil(o.Restriction) {
		return nil, false
	}
	return o.Restriction, true
}

// HasRestriction returns a boolean if a field has been set.
func (o *EventMenuItemType) HasRestriction() bool {
	if o != nil && !IsNil(o.Restriction) {
		return true
	}

	return false
}

// SetRestriction gets a reference to the given string and assigns it to the Restriction field.
func (o *EventMenuItemType) SetRestriction(v string) {
	o.Restriction = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *EventMenuItemType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *EventMenuItemType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *EventMenuItemType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetSalesPrice returns the SalesPrice field value if set, zero value otherwise.
func (o *EventMenuItemType) GetSalesPrice() CurrencyAmountType {
	if o == nil || IsNil(o.SalesPrice) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetSalesPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.SalesPrice) {
		return nil, false
	}
	return o.SalesPrice, true
}

// HasSalesPrice returns a boolean if a field has been set.
func (o *EventMenuItemType) HasSalesPrice() bool {
	if o != nil && !IsNil(o.SalesPrice) {
		return true
	}

	return false
}

// SetSalesPrice gets a reference to the given CurrencyAmountType and assigns it to the SalesPrice field.
func (o *EventMenuItemType) SetSalesPrice(v CurrencyAmountType) {
	o.SalesPrice = &v
}

// GetServings returns the Servings field value if set, zero value otherwise.
func (o *EventMenuItemType) GetServings() int32 {
	if o == nil || IsNil(o.Servings) {
		var ret int32
		return ret
	}
	return *o.Servings
}

// GetServingsOk returns a tuple with the Servings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetServingsOk() (*int32, bool) {
	if o == nil || IsNil(o.Servings) {
		return nil, false
	}
	return o.Servings, true
}

// HasServings returns a boolean if a field has been set.
func (o *EventMenuItemType) HasServings() bool {
	if o != nil && !IsNil(o.Servings) {
		return true
	}

	return false
}

// SetServings gets a reference to the given int32 and assigns it to the Servings field.
func (o *EventMenuItemType) SetServings(v int32) {
	o.Servings = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *EventMenuItemType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *EventMenuItemType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *EventMenuItemType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *EventMenuItemType) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuItemType) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *EventMenuItemType) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *EventMenuItemType) SetYear(v int32) {
	o.Year = &v
}

func (o EventMenuItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMenuItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.ClassInfo) {
		toSerialize["classInfo"] = o.ClassInfo
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Course) {
		toSerialize["course"] = o.Course
	}
	if !IsNil(o.CourseOrder) {
		toSerialize["courseOrder"] = o.CourseOrder
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.DemandFactor) {
		toSerialize["demandFactor"] = o.DemandFactor
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DietaryPreferenceList) {
		toSerialize["dietaryPreferenceList"] = o.DietaryPreferenceList
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discountPercentage"] = o.DiscountPercentage
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.EventMenuDetailID) {
		toSerialize["eventMenuDetailID"] = o.EventMenuDetailID
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.IncludedYN) {
		toSerialize["includedYN"] = o.IncludedYN
	}
	if !IsNil(o.ItemConsumption) {
		toSerialize["itemConsumption"] = o.ItemConsumption
	}
	if !IsNil(o.MandatoryYN) {
		toSerialize["mandatoryYN"] = o.MandatoryYN
	}
	if !IsNil(o.MenuType) {
		toSerialize["menuType"] = o.MenuType
	}
	if !IsNil(o.Name1) {
		toSerialize["name1"] = o.Name1
	}
	if !IsNil(o.Name2) {
		toSerialize["name2"] = o.Name2
	}
	if !IsNil(o.Name3) {
		toSerialize["name3"] = o.Name3
	}
	if !IsNil(o.Origin1) {
		toSerialize["origin1"] = o.Origin1
	}
	if !IsNil(o.Origin2) {
		toSerialize["origin2"] = o.Origin2
	}
	if !IsNil(o.Portion) {
		toSerialize["portion"] = o.Portion
	}
	if !IsNil(o.Print) {
		toSerialize["print"] = o.Print
	}
	if !IsNil(o.QuickInsertCode) {
		toSerialize["quickInsertCode"] = o.QuickInsertCode
	}
	if !IsNil(o.ResponsibleDepartments) {
		toSerialize["responsibleDepartments"] = o.ResponsibleDepartments
	}
	if !IsNil(o.Restriction) {
		toSerialize["restriction"] = o.Restriction
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.SalesPrice) {
		toSerialize["salesPrice"] = o.SalesPrice
	}
	if !IsNil(o.Servings) {
		toSerialize["servings"] = o.Servings
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

type NullableEventMenuItemType struct {
	value *EventMenuItemType
	isSet bool
}

func (v NullableEventMenuItemType) Get() *EventMenuItemType {
	return v.value
}

func (v *NullableEventMenuItemType) Set(val *EventMenuItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMenuItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMenuItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMenuItemType(val *EventMenuItemType) *NullableEventMenuItemType {
	return &NullableEventMenuItemType{value: val, isSet: true}
}

func (v NullableEventMenuItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMenuItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


