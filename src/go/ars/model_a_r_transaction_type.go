/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARTransactionType{}

// ARTransactionType Transaction Information.
type ARTransactionType struct {
	Invoices *AccountInvoicesInfoType `json:"invoices,omitempty"`
	Payments *AccountPaymentsInfoType `json:"payments,omitempty"`
}

// NewARTransactionType instantiates a new ARTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARTransactionType() *ARTransactionType {
	this := ARTransactionType{}
	return &this
}

// NewARTransactionTypeWithDefaults instantiates a new ARTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARTransactionTypeWithDefaults() *ARTransactionType {
	this := ARTransactionType{}
	return &this
}

// GetInvoices returns the Invoices field value if set, zero value otherwise.
func (o *ARTransactionType) GetInvoices() AccountInvoicesInfoType {
	if o == nil || IsNil(o.Invoices) {
		var ret AccountInvoicesInfoType
		return ret
	}
	return *o.Invoices
}

// GetInvoicesOk returns a tuple with the Invoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARTransactionType) GetInvoicesOk() (*AccountInvoicesInfoType, bool) {
	if o == nil || IsNil(o.Invoices) {
		return nil, false
	}
	return o.Invoices, true
}

// HasInvoices returns a boolean if a field has been set.
func (o *ARTransactionType) HasInvoices() bool {
	if o != nil && !IsNil(o.Invoices) {
		return true
	}

	return false
}

// SetInvoices gets a reference to the given AccountInvoicesInfoType and assigns it to the Invoices field.
func (o *ARTransactionType) SetInvoices(v AccountInvoicesInfoType) {
	o.Invoices = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ARTransactionType) GetPayments() AccountPaymentsInfoType {
	if o == nil || IsNil(o.Payments) {
		var ret AccountPaymentsInfoType
		return ret
	}
	return *o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARTransactionType) GetPaymentsOk() (*AccountPaymentsInfoType, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ARTransactionType) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given AccountPaymentsInfoType and assigns it to the Payments field.
func (o *ARTransactionType) SetPayments(v AccountPaymentsInfoType) {
	o.Payments = &v
}

func (o ARTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invoices) {
		toSerialize["invoices"] = o.Invoices
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	return toSerialize, nil
}

type NullableARTransactionType struct {
	value *ARTransactionType
	isSet bool
}

func (v NullableARTransactionType) Get() *ARTransactionType {
	return v.value
}

func (v *NullableARTransactionType) Set(val *ARTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableARTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableARTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARTransactionType(val *ARTransactionType) *NullableARTransactionType {
	return &NullableARTransactionType{value: val, isSet: true}
}

func (v NullableARTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


