/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the AccountPaymentsInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPaymentsInfoType{}

// AccountPaymentsInfoType Account Payments info .
type AccountPaymentsInfoType struct {
	Items []AccountPaymentInfoType
}

// NewAccountPaymentsInfoType instantiates a new AccountPaymentsInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPaymentsInfoType() *AccountPaymentsInfoType {
	this := AccountPaymentsInfoType{}
	return &this
}

// NewAccountPaymentsInfoTypeWithDefaults instantiates a new AccountPaymentsInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPaymentsInfoTypeWithDefaults() *AccountPaymentsInfoType {
	this := AccountPaymentsInfoType{}
	return &this
}

func (o AccountPaymentsInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPaymentsInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *AccountPaymentsInfoType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableAccountPaymentsInfoType struct {
	value AccountPaymentsInfoType
	isSet bool
}

func (v NullableAccountPaymentsInfoType) Get() AccountPaymentsInfoType {
	return v.value
}

func (v *NullableAccountPaymentsInfoType) Set(val AccountPaymentsInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPaymentsInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPaymentsInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPaymentsInfoType(val AccountPaymentsInfoType) *NullableAccountPaymentsInfoType {
	return &NullableAccountPaymentsInfoType{value: val, isSet: true}
}

func (v NullableAccountPaymentsInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPaymentsInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


