/*
OPERA Cloud Accounts Receivables API

Testing AccountsReceivablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ars

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/ars"
)

func Test_ars_AccountsReceivablesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsReceivablesApiService CompressARInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.CompressARInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService CopyARAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.CopyARAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService DeleteAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.DeleteAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService DeleteAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.DeleteAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService DeleteAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fixedChargeId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.DeleteAccountFixedCharge(context.Background(), fixedChargeId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService DeleteAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.DeleteAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService DeletePaymentsFromInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.DeletePaymentsFromInvoice(context.Background(), transactionId, invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARAgingCycles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARAgingCycles(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARCreditCardPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARCreditCardPayments(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARFolioPrinters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARFolioPrinters(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARTransactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetAppliedInvoicePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetAppliedInvoicePayments(context.Background(), accountId, transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoiceAppliedPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var transactionId string
		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoiceAppliedPayments(context.Background(), accountId, transactionId, invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoicePaymentDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoicePaymentDetail(context.Background(), transactionId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoicePostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoicePostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoicesOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoicesOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoicesPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoicesPayments(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetProfileAging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetProfileAging(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetProfileYearView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetProfileYearView(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetReminders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetReminders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetRemindersHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetRemindersHistory(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetStatements(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetStatementsHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetStatementsHistory(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostARCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostARCharges(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAROldBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAROldBalances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostARPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostARPayments(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAccount(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAccountFixedCharge(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostBatchCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostBatchCharges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostChargesToAR", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostChargesToAR(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostCreditToInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostCreditToInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostInvoice(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostReminders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostReminders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostReversePayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostReversePayment(context.Background(), transactionId, accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostStatements(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutARInvoicesAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutARInvoicesAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fixedChargeId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutAccountFixedCharge(context.Background(), fixedChargeId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutInvoice(context.Background(), invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutInvoiceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutInvoiceDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService RemovePaymentsFromInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.RemovePaymentsFromInvoice(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService ReopenInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.ReopenInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService TransferARCreditCardPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.TransferARCreditCardPayments(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService TransferDirectBillsToAr", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.TransferDirectBillsToAr(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService TransferInvoicesAndPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.TransferInvoicesAndPayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService TransferPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.TransferPostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService UncompressARInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.UncompressARInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService UnlinkInvoiceFromStatement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.UnlinkInvoiceFromStatement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
