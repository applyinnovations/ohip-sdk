/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ArAgingCycles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArAgingCycles{}

// ArAgingCycles Response for Fetch AR Aging Cycles.
type ArAgingCycles struct {
	AgingCycles *ARAgingCyclesType `json:"agingCycles,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewArAgingCycles instantiates a new ArAgingCycles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArAgingCycles() *ArAgingCycles {
	this := ArAgingCycles{}
	return &this
}

// NewArAgingCyclesWithDefaults instantiates a new ArAgingCycles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArAgingCyclesWithDefaults() *ArAgingCycles {
	this := ArAgingCycles{}
	return &this
}

// GetAgingCycles returns the AgingCycles field value if set, zero value otherwise.
func (o *ArAgingCycles) GetAgingCycles() ARAgingCyclesType {
	if o == nil || IsNil(o.AgingCycles) {
		var ret ARAgingCyclesType
		return ret
	}
	return *o.AgingCycles
}

// GetAgingCyclesOk returns a tuple with the AgingCycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArAgingCycles) GetAgingCyclesOk() (*ARAgingCyclesType, bool) {
	if o == nil || IsNil(o.AgingCycles) {
		return nil, false
	}
	return o.AgingCycles, true
}

// HasAgingCycles returns a boolean if a field has been set.
func (o *ArAgingCycles) HasAgingCycles() bool {
	if o != nil && !IsNil(o.AgingCycles) {
		return true
	}

	return false
}

// SetAgingCycles gets a reference to the given ARAgingCyclesType and assigns it to the AgingCycles field.
func (o *ArAgingCycles) SetAgingCycles(v ARAgingCyclesType) {
	o.AgingCycles = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ArAgingCycles) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArAgingCycles) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ArAgingCycles) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ArAgingCycles) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ArAgingCycles) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArAgingCycles) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ArAgingCycles) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ArAgingCycles) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ArAgingCycles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArAgingCycles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgingCycles) {
		toSerialize["agingCycles"] = o.AgingCycles
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableArAgingCycles struct {
	value *ArAgingCycles
	isSet bool
}

func (v NullableArAgingCycles) Get() *ArAgingCycles {
	return v.value
}

func (v *NullableArAgingCycles) Set(val *ArAgingCycles) {
	v.value = val
	v.isSet = true
}

func (v NullableArAgingCycles) IsSet() bool {
	return v.isSet
}

func (v *NullableArAgingCycles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArAgingCycles(val *ArAgingCycles) *NullableArAgingCycles {
	return &NullableArAgingCycles{value: val, isSet: true}
}

func (v NullableArAgingCycles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArAgingCycles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


