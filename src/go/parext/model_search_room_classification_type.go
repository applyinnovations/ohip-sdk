/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the SearchRoomClassificationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRoomClassificationType{}

// SearchRoomClassificationType struct for SearchRoomClassificationType
type SearchRoomClassificationType struct {
	// List of Room Type codes
	RoomTypes []string `json:"roomTypes,omitempty"`
	// Tag code
	Tag *string `json:"tag,omitempty"`
	// Number of adults
	Adults *int32 `json:"adults,omitempty"`
	// Number of children
	Children *int32 `json:"children,omitempty"`
	// Number of units
	NumberOfUnits *int32 `json:"numberOfUnits,omitempty"`
}

// NewSearchRoomClassificationType instantiates a new SearchRoomClassificationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRoomClassificationType() *SearchRoomClassificationType {
	this := SearchRoomClassificationType{}
	return &this
}

// NewSearchRoomClassificationTypeWithDefaults instantiates a new SearchRoomClassificationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRoomClassificationTypeWithDefaults() *SearchRoomClassificationType {
	this := SearchRoomClassificationType{}
	return &this
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *SearchRoomClassificationType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRoomClassificationType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *SearchRoomClassificationType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *SearchRoomClassificationType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SearchRoomClassificationType) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRoomClassificationType) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SearchRoomClassificationType) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *SearchRoomClassificationType) SetTag(v string) {
	o.Tag = &v
}

// GetAdults returns the Adults field value if set, zero value otherwise.
func (o *SearchRoomClassificationType) GetAdults() int32 {
	if o == nil || IsNil(o.Adults) {
		var ret int32
		return ret
	}
	return *o.Adults
}

// GetAdultsOk returns a tuple with the Adults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRoomClassificationType) GetAdultsOk() (*int32, bool) {
	if o == nil || IsNil(o.Adults) {
		return nil, false
	}
	return o.Adults, true
}

// HasAdults returns a boolean if a field has been set.
func (o *SearchRoomClassificationType) HasAdults() bool {
	if o != nil && !IsNil(o.Adults) {
		return true
	}

	return false
}

// SetAdults gets a reference to the given int32 and assigns it to the Adults field.
func (o *SearchRoomClassificationType) SetAdults(v int32) {
	o.Adults = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *SearchRoomClassificationType) GetChildren() int32 {
	if o == nil || IsNil(o.Children) {
		var ret int32
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRoomClassificationType) GetChildrenOk() (*int32, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *SearchRoomClassificationType) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given int32 and assigns it to the Children field.
func (o *SearchRoomClassificationType) SetChildren(v int32) {
	o.Children = &v
}

// GetNumberOfUnits returns the NumberOfUnits field value if set, zero value otherwise.
func (o *SearchRoomClassificationType) GetNumberOfUnits() int32 {
	if o == nil || IsNil(o.NumberOfUnits) {
		var ret int32
		return ret
	}
	return *o.NumberOfUnits
}

// GetNumberOfUnitsOk returns a tuple with the NumberOfUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRoomClassificationType) GetNumberOfUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfUnits) {
		return nil, false
	}
	return o.NumberOfUnits, true
}

// HasNumberOfUnits returns a boolean if a field has been set.
func (o *SearchRoomClassificationType) HasNumberOfUnits() bool {
	if o != nil && !IsNil(o.NumberOfUnits) {
		return true
	}

	return false
}

// SetNumberOfUnits gets a reference to the given int32 and assigns it to the NumberOfUnits field.
func (o *SearchRoomClassificationType) SetNumberOfUnits(v int32) {
	o.NumberOfUnits = &v
}

func (o SearchRoomClassificationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRoomClassificationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Adults) {
		toSerialize["adults"] = o.Adults
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.NumberOfUnits) {
		toSerialize["numberOfUnits"] = o.NumberOfUnits
	}
	return toSerialize, nil
}

type NullableSearchRoomClassificationType struct {
	value *SearchRoomClassificationType
	isSet bool
}

func (v NullableSearchRoomClassificationType) Get() *SearchRoomClassificationType {
	return v.value
}

func (v *NullableSearchRoomClassificationType) Set(val *SearchRoomClassificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRoomClassificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRoomClassificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRoomClassificationType(val *SearchRoomClassificationType) *NullableSearchRoomClassificationType {
	return &NullableSearchRoomClassificationType{value: val, isSet: true}
}

func (v NullableSearchRoomClassificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRoomClassificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


