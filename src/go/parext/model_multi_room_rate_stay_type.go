/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the MultiRoomRateStayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiRoomRateStayType{}

// MultiRoomRateStayType struct for MultiRoomRateStayType
type MultiRoomRateStayType struct {
	// Room Class grouping the returned availability.
	RoomClass *string `json:"roomClass,omitempty"`
	RoomTypes []MultiRoomTypesType `json:"roomTypes,omitempty"`
}

// NewMultiRoomRateStayType instantiates a new MultiRoomRateStayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiRoomRateStayType() *MultiRoomRateStayType {
	this := MultiRoomRateStayType{}
	return &this
}

// NewMultiRoomRateStayTypeWithDefaults instantiates a new MultiRoomRateStayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiRoomRateStayTypeWithDefaults() *MultiRoomRateStayType {
	this := MultiRoomRateStayType{}
	return &this
}

// GetRoomClass returns the RoomClass field value if set, zero value otherwise.
func (o *MultiRoomRateStayType) GetRoomClass() string {
	if o == nil || IsNil(o.RoomClass) {
		var ret string
		return ret
	}
	return *o.RoomClass
}

// GetRoomClassOk returns a tuple with the RoomClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateStayType) GetRoomClassOk() (*string, bool) {
	if o == nil || IsNil(o.RoomClass) {
		return nil, false
	}
	return o.RoomClass, true
}

// HasRoomClass returns a boolean if a field has been set.
func (o *MultiRoomRateStayType) HasRoomClass() bool {
	if o != nil && !IsNil(o.RoomClass) {
		return true
	}

	return false
}

// SetRoomClass gets a reference to the given string and assigns it to the RoomClass field.
func (o *MultiRoomRateStayType) SetRoomClass(v string) {
	o.RoomClass = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *MultiRoomRateStayType) GetRoomTypes() []MultiRoomTypesType {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []MultiRoomTypesType
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateStayType) GetRoomTypesOk() ([]MultiRoomTypesType, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *MultiRoomRateStayType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []MultiRoomTypesType and assigns it to the RoomTypes field.
func (o *MultiRoomRateStayType) SetRoomTypes(v []MultiRoomTypesType) {
	o.RoomTypes = v
}

func (o MultiRoomRateStayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiRoomRateStayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomClass) {
		toSerialize["roomClass"] = o.RoomClass
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	return toSerialize, nil
}

type NullableMultiRoomRateStayType struct {
	value *MultiRoomRateStayType
	isSet bool
}

func (v NullableMultiRoomRateStayType) Get() *MultiRoomRateStayType {
	return v.value
}

func (v *NullableMultiRoomRateStayType) Set(val *MultiRoomRateStayType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiRoomRateStayType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiRoomRateStayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiRoomRateStayType(val *MultiRoomRateStayType) *NullableMultiRoomRateStayType {
	return &NullableMultiRoomRateStayType{value: val, isSet: true}
}

func (v NullableMultiRoomRateStayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiRoomRateStayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


