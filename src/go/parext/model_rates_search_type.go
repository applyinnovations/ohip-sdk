/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the RatesSearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatesSearchType{}

// RatesSearchType struct for RatesSearchType
type RatesSearchType struct {
	CorporateRates *CorporateRatesSearchType `json:"corporateRates,omitempty"`
	// Available Rate Plan codes whose availability is requested.
	RatePlanCodes []string `json:"ratePlanCodes,omitempty"`
}

// NewRatesSearchType instantiates a new RatesSearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatesSearchType() *RatesSearchType {
	this := RatesSearchType{}
	return &this
}

// NewRatesSearchTypeWithDefaults instantiates a new RatesSearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatesSearchTypeWithDefaults() *RatesSearchType {
	this := RatesSearchType{}
	return &this
}

// GetCorporateRates returns the CorporateRates field value if set, zero value otherwise.
func (o *RatesSearchType) GetCorporateRates() CorporateRatesSearchType {
	if o == nil || IsNil(o.CorporateRates) {
		var ret CorporateRatesSearchType
		return ret
	}
	return *o.CorporateRates
}

// GetCorporateRatesOk returns a tuple with the CorporateRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatesSearchType) GetCorporateRatesOk() (*CorporateRatesSearchType, bool) {
	if o == nil || IsNil(o.CorporateRates) {
		return nil, false
	}
	return o.CorporateRates, true
}

// HasCorporateRates returns a boolean if a field has been set.
func (o *RatesSearchType) HasCorporateRates() bool {
	if o != nil && !IsNil(o.CorporateRates) {
		return true
	}

	return false
}

// SetCorporateRates gets a reference to the given CorporateRatesSearchType and assigns it to the CorporateRates field.
func (o *RatesSearchType) SetCorporateRates(v CorporateRatesSearchType) {
	o.CorporateRates = &v
}

// GetRatePlanCodes returns the RatePlanCodes field value if set, zero value otherwise.
func (o *RatesSearchType) GetRatePlanCodes() []string {
	if o == nil || IsNil(o.RatePlanCodes) {
		var ret []string
		return ret
	}
	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatesSearchType) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCodes) {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// HasRatePlanCodes returns a boolean if a field has been set.
func (o *RatesSearchType) HasRatePlanCodes() bool {
	if o != nil && !IsNil(o.RatePlanCodes) {
		return true
	}

	return false
}

// SetRatePlanCodes gets a reference to the given []string and assigns it to the RatePlanCodes field.
func (o *RatesSearchType) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

func (o RatesSearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatesSearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CorporateRates) {
		toSerialize["corporateRates"] = o.CorporateRates
	}
	if !IsNil(o.RatePlanCodes) {
		toSerialize["ratePlanCodes"] = o.RatePlanCodes
	}
	return toSerialize, nil
}

type NullableRatesSearchType struct {
	value *RatesSearchType
	isSet bool
}

func (v NullableRatesSearchType) Get() *RatesSearchType {
	return v.value
}

func (v *NullableRatesSearchType) Set(val *RatesSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatesSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatesSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatesSearchType(val *RatesSearchType) *NullableRatesSearchType {
	return &NullableRatesSearchType{value: val, isSet: true}
}

func (v NullableRatesSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatesSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


