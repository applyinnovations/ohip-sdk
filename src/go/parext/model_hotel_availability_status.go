/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
	"fmt"
)

// HotelAvailabilityStatus Availability status of the hotel
type HotelAvailabilityStatus string

// List of hotelAvailabilityStatus
const (
	HOTELAVAILABILITYSTATUS_AVAILABLE_FOR_SALE HotelAvailabilityStatus = "AvailableForSale"
	HOTELAVAILABILITYSTATUS_NO_AVAILABILITY HotelAvailabilityStatus = "NoAvailability"
	HOTELAVAILABILITYSTATUS_NOT_FOUND HotelAvailabilityStatus = "NotFound"
	HOTELAVAILABILITYSTATUS_OTHER_AVAILABLE HotelAvailabilityStatus = "OtherAvailable"
)

// All allowed values of HotelAvailabilityStatus enum
var AllowedHotelAvailabilityStatusEnumValues = []HotelAvailabilityStatus{
	"AvailableForSale",
	"NoAvailability",
	"NotFound",
	"OtherAvailable",
}

func (v *HotelAvailabilityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HotelAvailabilityStatus(value)
	for _, existing := range AllowedHotelAvailabilityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HotelAvailabilityStatus", value)
}

// NewHotelAvailabilityStatusFromValue returns a pointer to a valid HotelAvailabilityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHotelAvailabilityStatusFromValue(v string) (*HotelAvailabilityStatus, error) {
	ev := HotelAvailabilityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HotelAvailabilityStatus: valid values are %v", v, AllowedHotelAvailabilityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HotelAvailabilityStatus) IsValid() bool {
	for _, existing := range AllowedHotelAvailabilityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hotelAvailabilityStatus value
func (v HotelAvailabilityStatus) Ptr() *HotelAvailabilityStatus {
	return &v
}

type NullableHotelAvailabilityStatus struct {
	value *HotelAvailabilityStatus
	isSet bool
}

func (v NullableHotelAvailabilityStatus) Get() *HotelAvailabilityStatus {
	return v.value
}

func (v *NullableHotelAvailabilityStatus) Set(val *HotelAvailabilityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelAvailabilityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelAvailabilityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelAvailabilityStatus(val *HotelAvailabilityStatus) *NullableHotelAvailabilityStatus {
	return &NullableHotelAvailabilityStatus{value: val, isSet: true}
}

func (v NullableHotelAvailabilityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelAvailabilityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

