/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the SearchPropertyRequestType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPropertyRequestType{}

// SearchPropertyRequestType struct for SearchPropertyRequestType
type SearchPropertyRequestType struct {
	// Corporate ID
	AccountId *string `json:"accountId,omitempty"`
	// Arrival/Check-in Date
	ArrivalDate string `json:"arrivalDate"`
	// Departure/Check-out Date
	DepartureDate string `json:"departureDate"`
	// List of hotelIds for search criteria.
	HotelIds []string `json:"hotelIds,omitempty"`
	IncludePublicRates *bool `json:"includePublicRates,omitempty"`
	// number of records to be fetched in one request
	Limit *int32 `json:"limit,omitempty"`
	// Minimum base rate in an offer
	MinRate *float32 `json:"minRate,omitempty"`
	// offset of record
	Offset *int32 `json:"offset,omitempty"`
	Rooms []SearchRoomClassificationType `json:"rooms,omitempty"`
	SortBy *SortByType `json:"sortBy,omitempty"`
}

// NewSearchPropertyRequestType instantiates a new SearchPropertyRequestType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPropertyRequestType(arrivalDate string, departureDate string) *SearchPropertyRequestType {
	this := SearchPropertyRequestType{}
	this.ArrivalDate = arrivalDate
	this.DepartureDate = departureDate
	var includePublicRates bool = false
	this.IncludePublicRates = &includePublicRates
	var sortBy SortByType = SORTBYTYPE_NONE
	this.SortBy = &sortBy
	return &this
}

// NewSearchPropertyRequestTypeWithDefaults instantiates a new SearchPropertyRequestType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPropertyRequestTypeWithDefaults() *SearchPropertyRequestType {
	this := SearchPropertyRequestType{}
	var includePublicRates bool = false
	this.IncludePublicRates = &includePublicRates
	var sortBy SortByType = SORTBYTYPE_NONE
	this.SortBy = &sortBy
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *SearchPropertyRequestType) SetAccountId(v string) {
	o.AccountId = &v
}

// GetArrivalDate returns the ArrivalDate field value
func (o *SearchPropertyRequestType) GetArrivalDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetArrivalDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalDate, true
}

// SetArrivalDate sets field value
func (o *SearchPropertyRequestType) SetArrivalDate(v string) {
	o.ArrivalDate = v
}

// GetDepartureDate returns the DepartureDate field value
func (o *SearchPropertyRequestType) GetDepartureDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepartureDate
}

// GetDepartureDateOk returns a tuple with the DepartureDate field value
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetDepartureDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureDate, true
}

// SetDepartureDate sets field value
func (o *SearchPropertyRequestType) SetDepartureDate(v string) {
	o.DepartureDate = v
}

// GetHotelIds returns the HotelIds field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetHotelIds() []string {
	if o == nil || IsNil(o.HotelIds) {
		var ret []string
		return ret
	}
	return o.HotelIds
}

// GetHotelIdsOk returns a tuple with the HotelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetHotelIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HotelIds) {
		return nil, false
	}
	return o.HotelIds, true
}

// HasHotelIds returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasHotelIds() bool {
	if o != nil && !IsNil(o.HotelIds) {
		return true
	}

	return false
}

// SetHotelIds gets a reference to the given []string and assigns it to the HotelIds field.
func (o *SearchPropertyRequestType) SetHotelIds(v []string) {
	o.HotelIds = v
}

// GetIncludePublicRates returns the IncludePublicRates field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetIncludePublicRates() bool {
	if o == nil || IsNil(o.IncludePublicRates) {
		var ret bool
		return ret
	}
	return *o.IncludePublicRates
}

// GetIncludePublicRatesOk returns a tuple with the IncludePublicRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetIncludePublicRatesOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePublicRates) {
		return nil, false
	}
	return o.IncludePublicRates, true
}

// HasIncludePublicRates returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasIncludePublicRates() bool {
	if o != nil && !IsNil(o.IncludePublicRates) {
		return true
	}

	return false
}

// SetIncludePublicRates gets a reference to the given bool and assigns it to the IncludePublicRates field.
func (o *SearchPropertyRequestType) SetIncludePublicRates(v bool) {
	o.IncludePublicRates = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchPropertyRequestType) SetLimit(v int32) {
	o.Limit = &v
}

// GetMinRate returns the MinRate field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetMinRate() float32 {
	if o == nil || IsNil(o.MinRate) {
		var ret float32
		return ret
	}
	return *o.MinRate
}

// GetMinRateOk returns a tuple with the MinRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetMinRateOk() (*float32, bool) {
	if o == nil || IsNil(o.MinRate) {
		return nil, false
	}
	return o.MinRate, true
}

// HasMinRate returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasMinRate() bool {
	if o != nil && !IsNil(o.MinRate) {
		return true
	}

	return false
}

// SetMinRate gets a reference to the given float32 and assigns it to the MinRate field.
func (o *SearchPropertyRequestType) SetMinRate(v float32) {
	o.MinRate = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchPropertyRequestType) SetOffset(v int32) {
	o.Offset = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetRooms() []SearchRoomClassificationType {
	if o == nil || IsNil(o.Rooms) {
		var ret []SearchRoomClassificationType
		return ret
	}
	return o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetRoomsOk() ([]SearchRoomClassificationType, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given []SearchRoomClassificationType and assigns it to the Rooms field.
func (o *SearchPropertyRequestType) SetRooms(v []SearchRoomClassificationType) {
	o.Rooms = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *SearchPropertyRequestType) GetSortBy() SortByType {
	if o == nil || IsNil(o.SortBy) {
		var ret SortByType
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRequestType) GetSortByOk() (*SortByType, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *SearchPropertyRequestType) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given SortByType and assigns it to the SortBy field.
func (o *SearchPropertyRequestType) SetSortBy(v SortByType) {
	o.SortBy = &v
}

func (o SearchPropertyRequestType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPropertyRequestType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	toSerialize["arrivalDate"] = o.ArrivalDate
	toSerialize["departureDate"] = o.DepartureDate
	if !IsNil(o.HotelIds) {
		toSerialize["hotelIds"] = o.HotelIds
	}
	if !IsNil(o.IncludePublicRates) {
		toSerialize["includePublicRates"] = o.IncludePublicRates
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.MinRate) {
		toSerialize["minRate"] = o.MinRate
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	return toSerialize, nil
}

type NullableSearchPropertyRequestType struct {
	value *SearchPropertyRequestType
	isSet bool
}

func (v NullableSearchPropertyRequestType) Get() *SearchPropertyRequestType {
	return v.value
}

func (v *NullableSearchPropertyRequestType) Set(val *SearchPropertyRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPropertyRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPropertyRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPropertyRequestType(val *SearchPropertyRequestType) *NullableSearchPropertyRequestType {
	return &NullableSearchPropertyRequestType{value: val, isSet: true}
}

func (v NullableSearchPropertyRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPropertyRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


