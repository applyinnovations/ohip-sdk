/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the RoomTagType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTagType{}

// RoomTagType The tag and respective room type for which minimum rate is returned.
type RoomTagType struct {
	// List of Room Type codes
	RoomTypes []string `json:"roomTypes,omitempty"`
	// Tag code
	Tag *string `json:"tag,omitempty"`
}

// NewRoomTagType instantiates a new RoomTagType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTagType() *RoomTagType {
	this := RoomTagType{}
	return &this
}

// NewRoomTagTypeWithDefaults instantiates a new RoomTagType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTagTypeWithDefaults() *RoomTagType {
	this := RoomTagType{}
	return &this
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *RoomTagType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTagType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *RoomTagType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *RoomTagType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *RoomTagType) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTagType) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *RoomTagType) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *RoomTagType) SetTag(v string) {
	o.Tag = &v
}

func (o RoomTagType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTagType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableRoomTagType struct {
	value *RoomTagType
	isSet bool
}

func (v NullableRoomTagType) Get() *RoomTagType {
	return v.value
}

func (v *NullableRoomTagType) Set(val *RoomTagType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTagType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTagType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTagType(val *RoomTagType) *NullableRoomTagType {
	return &NullableRoomTagType{value: val, isSet: true}
}

func (v NullableRoomTagType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTagType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


