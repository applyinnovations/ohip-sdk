/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
	"fmt"
)

// SortByType The sort order to be applied
type SortByType string

// List of sortByType
const (
	SORTBYTYPE_PRICE SortByType = "Price"
	SORTBYTYPE_NONE SortByType = "None"
	SORTBYTYPE_DISTANCE SortByType = "Distance"
)

// All allowed values of SortByType enum
var AllowedSortByTypeEnumValues = []SortByType{
	"Price",
	"None",
	"Distance",
}

func (v *SortByType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortByType(value)
	for _, existing := range AllowedSortByTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortByType", value)
}

// NewSortByTypeFromValue returns a pointer to a valid SortByType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortByTypeFromValue(v string) (*SortByType, error) {
	ev := SortByType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortByType: valid values are %v", v, AllowedSortByTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortByType) IsValid() bool {
	for _, existing := range AllowedSortByTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sortByType value
func (v SortByType) Ptr() *SortByType {
	return &v
}

type NullableSortByType struct {
	value *SortByType
	isSet bool
}

func (v NullableSortByType) Get() *SortByType {
	return v.value
}

func (v *NullableSortByType) Set(val *SortByType) {
	v.value = val
	v.isSet = true
}

func (v NullableSortByType) IsSet() bool {
	return v.isSet
}

func (v *NullableSortByType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortByType(val *SortByType) *NullableSortByType {
	return &NullableSortByType{value: val, isSet: true}
}

func (v NullableSortByType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortByType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

