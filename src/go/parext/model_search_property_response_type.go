/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the SearchPropertyResponseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPropertyResponseType{}

// SearchPropertyResponseType Property Search Response
type SearchPropertyResponseType struct {
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	// Indicates maximum number of records a Web Service should return.
	Limit *int32 `json:"limit,omitempty"`
	// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
	Offset *int32 `json:"offset,omitempty"`
	// Collection of the returned Offers
	RoomStays []SearchPropertyRoomStayType `json:"roomStays,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewSearchPropertyResponseType instantiates a new SearchPropertyResponseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPropertyResponseType() *SearchPropertyResponseType {
	this := SearchPropertyResponseType{}
	return &this
}

// NewSearchPropertyResponseTypeWithDefaults instantiates a new SearchPropertyResponseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPropertyResponseTypeWithDefaults() *SearchPropertyResponseType {
	this := SearchPropertyResponseType{}
	return &this
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *SearchPropertyResponseType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyResponseType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *SearchPropertyResponseType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *SearchPropertyResponseType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchPropertyResponseType) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyResponseType) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchPropertyResponseType) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchPropertyResponseType) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchPropertyResponseType) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyResponseType) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchPropertyResponseType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchPropertyResponseType) SetOffset(v int32) {
	o.Offset = &v
}

// GetRoomStays returns the RoomStays field value if set, zero value otherwise.
func (o *SearchPropertyResponseType) GetRoomStays() []SearchPropertyRoomStayType {
	if o == nil || IsNil(o.RoomStays) {
		var ret []SearchPropertyRoomStayType
		return ret
	}
	return o.RoomStays
}

// GetRoomStaysOk returns a tuple with the RoomStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyResponseType) GetRoomStaysOk() ([]SearchPropertyRoomStayType, bool) {
	if o == nil || IsNil(o.RoomStays) {
		return nil, false
	}
	return o.RoomStays, true
}

// HasRoomStays returns a boolean if a field has been set.
func (o *SearchPropertyResponseType) HasRoomStays() bool {
	if o != nil && !IsNil(o.RoomStays) {
		return true
	}

	return false
}

// SetRoomStays gets a reference to the given []SearchPropertyRoomStayType and assigns it to the RoomStays field.
func (o *SearchPropertyResponseType) SetRoomStays(v []SearchPropertyRoomStayType) {
	o.RoomStays = v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SearchPropertyResponseType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyResponseType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SearchPropertyResponseType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *SearchPropertyResponseType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o SearchPropertyResponseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPropertyResponseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.RoomStays) {
		toSerialize["roomStays"] = o.RoomStays
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableSearchPropertyResponseType struct {
	value *SearchPropertyResponseType
	isSet bool
}

func (v NullableSearchPropertyResponseType) Get() *SearchPropertyResponseType {
	return v.value
}

func (v *NullableSearchPropertyResponseType) Set(val *SearchPropertyResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPropertyResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPropertyResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPropertyResponseType(val *SearchPropertyResponseType) *NullableSearchPropertyResponseType {
	return &NullableSearchPropertyResponseType{value: val, isSet: true}
}

func (v NullableSearchPropertyResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPropertyResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


