/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the MultiRoomTypesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiRoomTypesType{}

// MultiRoomTypesType struct for MultiRoomTypesType
type MultiRoomTypesType struct {
	RoomRates []MultiRoomRateType `json:"roomRates,omitempty"`
	// Room Type code.
	RoomType *string `json:"roomType,omitempty"`
	// Tag code
	Tag *string `json:"tag,omitempty"`
}

// NewMultiRoomTypesType instantiates a new MultiRoomTypesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiRoomTypesType() *MultiRoomTypesType {
	this := MultiRoomTypesType{}
	return &this
}

// NewMultiRoomTypesTypeWithDefaults instantiates a new MultiRoomTypesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiRoomTypesTypeWithDefaults() *MultiRoomTypesType {
	this := MultiRoomTypesType{}
	return &this
}

// GetRoomRates returns the RoomRates field value if set, zero value otherwise.
func (o *MultiRoomTypesType) GetRoomRates() []MultiRoomRateType {
	if o == nil || IsNil(o.RoomRates) {
		var ret []MultiRoomRateType
		return ret
	}
	return o.RoomRates
}

// GetRoomRatesOk returns a tuple with the RoomRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomTypesType) GetRoomRatesOk() ([]MultiRoomRateType, bool) {
	if o == nil || IsNil(o.RoomRates) {
		return nil, false
	}
	return o.RoomRates, true
}

// HasRoomRates returns a boolean if a field has been set.
func (o *MultiRoomTypesType) HasRoomRates() bool {
	if o != nil && !IsNil(o.RoomRates) {
		return true
	}

	return false
}

// SetRoomRates gets a reference to the given []MultiRoomRateType and assigns it to the RoomRates field.
func (o *MultiRoomTypesType) SetRoomRates(v []MultiRoomRateType) {
	o.RoomRates = v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *MultiRoomTypesType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomTypesType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *MultiRoomTypesType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *MultiRoomTypesType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *MultiRoomTypesType) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomTypesType) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *MultiRoomTypesType) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *MultiRoomTypesType) SetTag(v string) {
	o.Tag = &v
}

func (o MultiRoomTypesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiRoomTypesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomRates) {
		toSerialize["roomRates"] = o.RoomRates
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableMultiRoomTypesType struct {
	value *MultiRoomTypesType
	isSet bool
}

func (v NullableMultiRoomTypesType) Get() *MultiRoomTypesType {
	return v.value
}

func (v *NullableMultiRoomTypesType) Set(val *MultiRoomTypesType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiRoomTypesType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiRoomTypesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiRoomTypesType(val *MultiRoomTypesType) *NullableMultiRoomTypesType {
	return &NullableMultiRoomTypesType{value: val, isSet: true}
}

func (v NullableMultiRoomTypesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiRoomTypesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


