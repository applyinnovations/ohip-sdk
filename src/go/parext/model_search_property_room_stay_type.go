/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the SearchPropertyRoomStayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPropertyRoomStayType{}

// SearchPropertyRoomStayType struct for SearchPropertyRoomStayType
type SearchPropertyRoomStayType struct {
	Availability *HotelAvailabilityStatus `json:"availability,omitempty"`
	MinimumRate *OfferTotalType `json:"minimumRate,omitempty"`
	PropertyInfo *PropertySearchPropertyInfo `json:"propertyInfo,omitempty"`
	RoomClass *string `json:"roomClass,omitempty"`
	// The collection of tag and respective room type for which minimum rate is returned.
	RoomTags []RoomTagType `json:"roomTags,omitempty"`
}

// NewSearchPropertyRoomStayType instantiates a new SearchPropertyRoomStayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPropertyRoomStayType() *SearchPropertyRoomStayType {
	this := SearchPropertyRoomStayType{}
	return &this
}

// NewSearchPropertyRoomStayTypeWithDefaults instantiates a new SearchPropertyRoomStayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPropertyRoomStayTypeWithDefaults() *SearchPropertyRoomStayType {
	this := SearchPropertyRoomStayType{}
	return &this
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *SearchPropertyRoomStayType) GetAvailability() HotelAvailabilityStatus {
	if o == nil || IsNil(o.Availability) {
		var ret HotelAvailabilityStatus
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRoomStayType) GetAvailabilityOk() (*HotelAvailabilityStatus, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *SearchPropertyRoomStayType) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given HotelAvailabilityStatus and assigns it to the Availability field.
func (o *SearchPropertyRoomStayType) SetAvailability(v HotelAvailabilityStatus) {
	o.Availability = &v
}

// GetMinimumRate returns the MinimumRate field value if set, zero value otherwise.
func (o *SearchPropertyRoomStayType) GetMinimumRate() OfferTotalType {
	if o == nil || IsNil(o.MinimumRate) {
		var ret OfferTotalType
		return ret
	}
	return *o.MinimumRate
}

// GetMinimumRateOk returns a tuple with the MinimumRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRoomStayType) GetMinimumRateOk() (*OfferTotalType, bool) {
	if o == nil || IsNil(o.MinimumRate) {
		return nil, false
	}
	return o.MinimumRate, true
}

// HasMinimumRate returns a boolean if a field has been set.
func (o *SearchPropertyRoomStayType) HasMinimumRate() bool {
	if o != nil && !IsNil(o.MinimumRate) {
		return true
	}

	return false
}

// SetMinimumRate gets a reference to the given OfferTotalType and assigns it to the MinimumRate field.
func (o *SearchPropertyRoomStayType) SetMinimumRate(v OfferTotalType) {
	o.MinimumRate = &v
}

// GetPropertyInfo returns the PropertyInfo field value if set, zero value otherwise.
func (o *SearchPropertyRoomStayType) GetPropertyInfo() PropertySearchPropertyInfo {
	if o == nil || IsNil(o.PropertyInfo) {
		var ret PropertySearchPropertyInfo
		return ret
	}
	return *o.PropertyInfo
}

// GetPropertyInfoOk returns a tuple with the PropertyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRoomStayType) GetPropertyInfoOk() (*PropertySearchPropertyInfo, bool) {
	if o == nil || IsNil(o.PropertyInfo) {
		return nil, false
	}
	return o.PropertyInfo, true
}

// HasPropertyInfo returns a boolean if a field has been set.
func (o *SearchPropertyRoomStayType) HasPropertyInfo() bool {
	if o != nil && !IsNil(o.PropertyInfo) {
		return true
	}

	return false
}

// SetPropertyInfo gets a reference to the given PropertySearchPropertyInfo and assigns it to the PropertyInfo field.
func (o *SearchPropertyRoomStayType) SetPropertyInfo(v PropertySearchPropertyInfo) {
	o.PropertyInfo = &v
}

// GetRoomClass returns the RoomClass field value if set, zero value otherwise.
func (o *SearchPropertyRoomStayType) GetRoomClass() string {
	if o == nil || IsNil(o.RoomClass) {
		var ret string
		return ret
	}
	return *o.RoomClass
}

// GetRoomClassOk returns a tuple with the RoomClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRoomStayType) GetRoomClassOk() (*string, bool) {
	if o == nil || IsNil(o.RoomClass) {
		return nil, false
	}
	return o.RoomClass, true
}

// HasRoomClass returns a boolean if a field has been set.
func (o *SearchPropertyRoomStayType) HasRoomClass() bool {
	if o != nil && !IsNil(o.RoomClass) {
		return true
	}

	return false
}

// SetRoomClass gets a reference to the given string and assigns it to the RoomClass field.
func (o *SearchPropertyRoomStayType) SetRoomClass(v string) {
	o.RoomClass = &v
}

// GetRoomTags returns the RoomTags field value if set, zero value otherwise.
func (o *SearchPropertyRoomStayType) GetRoomTags() []RoomTagType {
	if o == nil || IsNil(o.RoomTags) {
		var ret []RoomTagType
		return ret
	}
	return o.RoomTags
}

// GetRoomTagsOk returns a tuple with the RoomTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPropertyRoomStayType) GetRoomTagsOk() ([]RoomTagType, bool) {
	if o == nil || IsNil(o.RoomTags) {
		return nil, false
	}
	return o.RoomTags, true
}

// HasRoomTags returns a boolean if a field has been set.
func (o *SearchPropertyRoomStayType) HasRoomTags() bool {
	if o != nil && !IsNil(o.RoomTags) {
		return true
	}

	return false
}

// SetRoomTags gets a reference to the given []RoomTagType and assigns it to the RoomTags field.
func (o *SearchPropertyRoomStayType) SetRoomTags(v []RoomTagType) {
	o.RoomTags = v
}

func (o SearchPropertyRoomStayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPropertyRoomStayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.MinimumRate) {
		toSerialize["minimumRate"] = o.MinimumRate
	}
	if !IsNil(o.PropertyInfo) {
		toSerialize["propertyInfo"] = o.PropertyInfo
	}
	if !IsNil(o.RoomClass) {
		toSerialize["roomClass"] = o.RoomClass
	}
	if !IsNil(o.RoomTags) {
		toSerialize["roomTags"] = o.RoomTags
	}
	return toSerialize, nil
}

type NullableSearchPropertyRoomStayType struct {
	value *SearchPropertyRoomStayType
	isSet bool
}

func (v NullableSearchPropertyRoomStayType) Get() *SearchPropertyRoomStayType {
	return v.value
}

func (v *NullableSearchPropertyRoomStayType) Set(val *SearchPropertyRoomStayType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPropertyRoomStayType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPropertyRoomStayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPropertyRoomStayType(val *SearchPropertyRoomStayType) *NullableSearchPropertyRoomStayType {
	return &NullableSearchPropertyRoomStayType{value: val, isSet: true}
}

func (v NullableSearchPropertyRoomStayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPropertyRoomStayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


