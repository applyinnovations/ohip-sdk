/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
	"fmt"
)

// ClaimRecordType Record Type associated with a claim.
type ClaimRecordType string

// List of claimRecordType
const (
	CLAIMRECORDTYPE_STAY ClaimRecordType = "Stay"
	CLAIMRECORDTYPE_OTHER ClaimRecordType = "Other"
	CLAIMRECORDTYPE_LIMITED_ADJUSTMENT ClaimRecordType = "LimitedAdjustment"
)

// All allowed values of ClaimRecordType enum
var AllowedClaimRecordTypeEnumValues = []ClaimRecordType{
	"Stay",
	"Other",
	"LimitedAdjustment",
}

func (v *ClaimRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClaimRecordType(value)
	for _, existing := range AllowedClaimRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClaimRecordType", value)
}

// NewClaimRecordTypeFromValue returns a pointer to a valid ClaimRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClaimRecordTypeFromValue(v string) (*ClaimRecordType, error) {
	ev := ClaimRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClaimRecordType: valid values are %v", v, AllowedClaimRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClaimRecordType) IsValid() bool {
	for _, existing := range AllowedClaimRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to claimRecordType value
func (v ClaimRecordType) Ptr() *ClaimRecordType {
	return &v
}

type NullableClaimRecordType struct {
	value *ClaimRecordType
	isSet bool
}

func (v NullableClaimRecordType) Get() *ClaimRecordType {
	return v.value
}

func (v *NullableClaimRecordType) Set(val *ClaimRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimRecordType(val *ClaimRecordType) *NullableClaimRecordType {
	return &NullableClaimRecordType{value: val, isSet: true}
}

func (v NullableClaimRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

