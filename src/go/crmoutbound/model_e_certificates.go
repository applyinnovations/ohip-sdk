/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the ECertificates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECertificates{}

// ECertificates Response object for fetch ECertificates. This object contains collection of ECertificates,Success,Warnings and Errors related to this operation.
type ECertificates struct {
	ECertificatesDetail *ECertificatesType `json:"eCertificatesDetail,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// NewECertificates instantiates a new ECertificates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECertificates() *ECertificates {
	this := ECertificates{}
	return &this
}

// NewECertificatesWithDefaults instantiates a new ECertificates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECertificatesWithDefaults() *ECertificates {
	this := ECertificates{}
	return &this
}

// GetECertificatesDetail returns the ECertificatesDetail field value if set, zero value otherwise.
func (o *ECertificates) GetECertificatesDetail() ECertificatesType {
	if o == nil || IsNil(o.ECertificatesDetail) {
		var ret ECertificatesType
		return ret
	}
	return *o.ECertificatesDetail
}

// GetECertificatesDetailOk returns a tuple with the ECertificatesDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificates) GetECertificatesDetailOk() (*ECertificatesType, bool) {
	if o == nil || IsNil(o.ECertificatesDetail) {
		return nil, false
	}
	return o.ECertificatesDetail, true
}

// HasECertificatesDetail returns a boolean if a field has been set.
func (o *ECertificates) HasECertificatesDetail() bool {
	if o != nil && !IsNil(o.ECertificatesDetail) {
		return true
	}

	return false
}

// SetECertificatesDetail gets a reference to the given ECertificatesType and assigns it to the ECertificatesDetail field.
func (o *ECertificates) SetECertificatesDetail(v ECertificatesType) {
	o.ECertificatesDetail = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ECertificates) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECertificates) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ECertificates) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ECertificates) SetLinks(v Links) {
	o.Links = &v
}

func (o ECertificates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECertificates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ECertificatesDetail) {
		toSerialize["eCertificatesDetail"] = o.ECertificatesDetail
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableECertificates struct {
	value *ECertificates
	isSet bool
}

func (v NullableECertificates) Get() *ECertificates {
	return v.value
}

func (v *NullableECertificates) Set(val *ECertificates) {
	v.value = val
	v.isSet = true
}

func (v NullableECertificates) IsSet() bool {
	return v.isSet
}

func (v *NullableECertificates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECertificates(val *ECertificates) *NullableECertificates {
	return &NullableECertificates{value: val, isSet: true}
}

func (v NullableECertificates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECertificates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


