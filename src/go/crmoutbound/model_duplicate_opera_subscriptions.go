/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the DuplicateOPERASubscriptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DuplicateOPERASubscriptions{}

// DuplicateOPERASubscriptions Response object for fetching subscriptions where an external profile within a particular external system is linked to multiple OPERA profiles.
type DuplicateOPERASubscriptions struct {
	DuplicateOPERASubscriptionsList *DuplicateOPERASubscriptionsListType `json:"duplicateOPERASubscriptionsList,omitempty"`
	// Evaluated total page count based on the requested max fetch count.
	TotalPages *int32 `json:"totalPages,omitempty"`
	// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
	PageNumber *int32 `json:"pageNumber,omitempty"`
	// Indicates maximum number of records a Web Service should return.
	MaxFetchCount *int32 `json:"maxFetchCount,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	AllRowsFetched *bool `json:"allRowsFetched,omitempty"`
	// Total number of rows queried
	TotalRows *int32 `json:"totalRows,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// NewDuplicateOPERASubscriptions instantiates a new DuplicateOPERASubscriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDuplicateOPERASubscriptions() *DuplicateOPERASubscriptions {
	this := DuplicateOPERASubscriptions{}
	return &this
}

// NewDuplicateOPERASubscriptionsWithDefaults instantiates a new DuplicateOPERASubscriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDuplicateOPERASubscriptionsWithDefaults() *DuplicateOPERASubscriptions {
	this := DuplicateOPERASubscriptions{}
	return &this
}

// GetDuplicateOPERASubscriptionsList returns the DuplicateOPERASubscriptionsList field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetDuplicateOPERASubscriptionsList() DuplicateOPERASubscriptionsListType {
	if o == nil || IsNil(o.DuplicateOPERASubscriptionsList) {
		var ret DuplicateOPERASubscriptionsListType
		return ret
	}
	return *o.DuplicateOPERASubscriptionsList
}

// GetDuplicateOPERASubscriptionsListOk returns a tuple with the DuplicateOPERASubscriptionsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetDuplicateOPERASubscriptionsListOk() (*DuplicateOPERASubscriptionsListType, bool) {
	if o == nil || IsNil(o.DuplicateOPERASubscriptionsList) {
		return nil, false
	}
	return o.DuplicateOPERASubscriptionsList, true
}

// HasDuplicateOPERASubscriptionsList returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasDuplicateOPERASubscriptionsList() bool {
	if o != nil && !IsNil(o.DuplicateOPERASubscriptionsList) {
		return true
	}

	return false
}

// SetDuplicateOPERASubscriptionsList gets a reference to the given DuplicateOPERASubscriptionsListType and assigns it to the DuplicateOPERASubscriptionsList field.
func (o *DuplicateOPERASubscriptions) SetDuplicateOPERASubscriptionsList(v DuplicateOPERASubscriptionsListType) {
	o.DuplicateOPERASubscriptionsList = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *DuplicateOPERASubscriptions) SetTotalPages(v int32) {
	o.TotalPages = &v
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetPageNumber() int32 {
	if o == nil || IsNil(o.PageNumber) {
		var ret int32
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetPageNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasPageNumber() bool {
	if o != nil && !IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int32 and assigns it to the PageNumber field.
func (o *DuplicateOPERASubscriptions) SetPageNumber(v int32) {
	o.PageNumber = &v
}

// GetMaxFetchCount returns the MaxFetchCount field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetMaxFetchCount() int32 {
	if o == nil || IsNil(o.MaxFetchCount) {
		var ret int32
		return ret
	}
	return *o.MaxFetchCount
}

// GetMaxFetchCountOk returns a tuple with the MaxFetchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetMaxFetchCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxFetchCount) {
		return nil, false
	}
	return o.MaxFetchCount, true
}

// HasMaxFetchCount returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasMaxFetchCount() bool {
	if o != nil && !IsNil(o.MaxFetchCount) {
		return true
	}

	return false
}

// SetMaxFetchCount gets a reference to the given int32 and assigns it to the MaxFetchCount field.
func (o *DuplicateOPERASubscriptions) SetMaxFetchCount(v int32) {
	o.MaxFetchCount = &v
}

// GetAllRowsFetched returns the AllRowsFetched field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetAllRowsFetched() bool {
	if o == nil || IsNil(o.AllRowsFetched) {
		var ret bool
		return ret
	}
	return *o.AllRowsFetched
}

// GetAllRowsFetchedOk returns a tuple with the AllRowsFetched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetAllRowsFetchedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllRowsFetched) {
		return nil, false
	}
	return o.AllRowsFetched, true
}

// HasAllRowsFetched returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasAllRowsFetched() bool {
	if o != nil && !IsNil(o.AllRowsFetched) {
		return true
	}

	return false
}

// SetAllRowsFetched gets a reference to the given bool and assigns it to the AllRowsFetched field.
func (o *DuplicateOPERASubscriptions) SetAllRowsFetched(v bool) {
	o.AllRowsFetched = &v
}

// GetTotalRows returns the TotalRows field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetTotalRows() int32 {
	if o == nil || IsNil(o.TotalRows) {
		var ret int32
		return ret
	}
	return *o.TotalRows
}

// GetTotalRowsOk returns a tuple with the TotalRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetTotalRowsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRows) {
		return nil, false
	}
	return o.TotalRows, true
}

// HasTotalRows returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasTotalRows() bool {
	if o != nil && !IsNil(o.TotalRows) {
		return true
	}

	return false
}

// SetTotalRows gets a reference to the given int32 and assigns it to the TotalRows field.
func (o *DuplicateOPERASubscriptions) SetTotalRows(v int32) {
	o.TotalRows = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DuplicateOPERASubscriptions) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateOPERASubscriptions) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DuplicateOPERASubscriptions) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *DuplicateOPERASubscriptions) SetLinks(v Links) {
	o.Links = &v
}

func (o DuplicateOPERASubscriptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DuplicateOPERASubscriptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DuplicateOPERASubscriptionsList) {
		toSerialize["duplicateOPERASubscriptionsList"] = o.DuplicateOPERASubscriptionsList
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	if !IsNil(o.PageNumber) {
		toSerialize["pageNumber"] = o.PageNumber
	}
	if !IsNil(o.MaxFetchCount) {
		toSerialize["maxFetchCount"] = o.MaxFetchCount
	}
	if !IsNil(o.AllRowsFetched) {
		toSerialize["allRowsFetched"] = o.AllRowsFetched
	}
	if !IsNil(o.TotalRows) {
		toSerialize["totalRows"] = o.TotalRows
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableDuplicateOPERASubscriptions struct {
	value *DuplicateOPERASubscriptions
	isSet bool
}

func (v NullableDuplicateOPERASubscriptions) Get() *DuplicateOPERASubscriptions {
	return v.value
}

func (v *NullableDuplicateOPERASubscriptions) Set(val *DuplicateOPERASubscriptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDuplicateOPERASubscriptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDuplicateOPERASubscriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDuplicateOPERASubscriptions(val *DuplicateOPERASubscriptions) *NullableDuplicateOPERASubscriptions {
	return &NullableDuplicateOPERASubscriptions{value: val, isSet: true}
}

func (v NullableDuplicateOPERASubscriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDuplicateOPERASubscriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


