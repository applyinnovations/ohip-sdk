/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
	"fmt"
)

// GuestProfileTypeType The types of Profile handled by the web service.
type GuestProfileTypeType string

// List of guestProfileTypeType
const (
	GUESTPROFILETYPETYPE_GUEST GuestProfileTypeType = "Guest"
	GUESTPROFILETYPETYPE_EMPLOYEE GuestProfileTypeType = "Employee"
	GUESTPROFILETYPETYPE_CONTACT GuestProfileTypeType = "Contact"
)

// All allowed values of GuestProfileTypeType enum
var AllowedGuestProfileTypeTypeEnumValues = []GuestProfileTypeType{
	"Guest",
	"Employee",
	"Contact",
}

func (v *GuestProfileTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GuestProfileTypeType(value)
	for _, existing := range AllowedGuestProfileTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GuestProfileTypeType", value)
}

// NewGuestProfileTypeTypeFromValue returns a pointer to a valid GuestProfileTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGuestProfileTypeTypeFromValue(v string) (*GuestProfileTypeType, error) {
	ev := GuestProfileTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GuestProfileTypeType: valid values are %v", v, AllowedGuestProfileTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GuestProfileTypeType) IsValid() bool {
	for _, existing := range AllowedGuestProfileTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to guestProfileTypeType value
func (v GuestProfileTypeType) Ptr() *GuestProfileTypeType {
	return &v
}

type NullableGuestProfileTypeType struct {
	value *GuestProfileTypeType
	isSet bool
}

func (v NullableGuestProfileTypeType) Get() *GuestProfileTypeType {
	return v.value
}

func (v *NullableGuestProfileTypeType) Set(val *GuestProfileTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableGuestProfileTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableGuestProfileTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuestProfileTypeType(val *GuestProfileTypeType) *NullableGuestProfileTypeType {
	return &NullableGuestProfileTypeType{value: val, isSet: true}
}

func (v NullableGuestProfileTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuestProfileTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

