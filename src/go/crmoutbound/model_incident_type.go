/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the IncidentType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentType{}

// IncidentType Guest Incident details for the profile.
type IncidentType struct {
	// If specified Incident belongs to the Hotel listed, otherwise it is a global Incident.
	HotelId *string `json:"hotelId,omitempty"`
	// Code for the Incident.
	IncidentCode *string `json:"incidentCode,omitempty"`
	// Incident Description for display purposes.
	Description *string `json:"description,omitempty"`
	// Date and Time the Incident was raised.
	IncidentOn *string `json:"incidentOn,omitempty"`
	// Status of the Incident.
	Status *string `json:"status,omitempty"`
	// Incident Priority.
	Priority *string `json:"priority,omitempty"`
	// Source of the incident.
	Source *string `json:"source,omitempty"`
	// Holds Note for the Incident.
	Note *string `json:"note,omitempty"`
}

// NewIncidentType instantiates a new IncidentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentType() *IncidentType {
	this := IncidentType{}
	return &this
}

// NewIncidentTypeWithDefaults instantiates a new IncidentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTypeWithDefaults() *IncidentType {
	this := IncidentType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *IncidentType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *IncidentType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *IncidentType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIncidentCode returns the IncidentCode field value if set, zero value otherwise.
func (o *IncidentType) GetIncidentCode() string {
	if o == nil || IsNil(o.IncidentCode) {
		var ret string
		return ret
	}
	return *o.IncidentCode
}

// GetIncidentCodeOk returns a tuple with the IncidentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetIncidentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentCode) {
		return nil, false
	}
	return o.IncidentCode, true
}

// HasIncidentCode returns a boolean if a field has been set.
func (o *IncidentType) HasIncidentCode() bool {
	if o != nil && !IsNil(o.IncidentCode) {
		return true
	}

	return false
}

// SetIncidentCode gets a reference to the given string and assigns it to the IncidentCode field.
func (o *IncidentType) SetIncidentCode(v string) {
	o.IncidentCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IncidentType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IncidentType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IncidentType) SetDescription(v string) {
	o.Description = &v
}

// GetIncidentOn returns the IncidentOn field value if set, zero value otherwise.
func (o *IncidentType) GetIncidentOn() string {
	if o == nil || IsNil(o.IncidentOn) {
		var ret string
		return ret
	}
	return *o.IncidentOn
}

// GetIncidentOnOk returns a tuple with the IncidentOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetIncidentOnOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentOn) {
		return nil, false
	}
	return o.IncidentOn, true
}

// HasIncidentOn returns a boolean if a field has been set.
func (o *IncidentType) HasIncidentOn() bool {
	if o != nil && !IsNil(o.IncidentOn) {
		return true
	}

	return false
}

// SetIncidentOn gets a reference to the given string and assigns it to the IncidentOn field.
func (o *IncidentType) SetIncidentOn(v string) {
	o.IncidentOn = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IncidentType) SetStatus(v string) {
	o.Status = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IncidentType) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IncidentType) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *IncidentType) SetPriority(v string) {
	o.Priority = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IncidentType) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IncidentType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IncidentType) SetSource(v string) {
	o.Source = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *IncidentType) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *IncidentType) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *IncidentType) SetNote(v string) {
	o.Note = &v
}

func (o IncidentType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IncidentCode) {
		toSerialize["incidentCode"] = o.IncidentCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IncidentOn) {
		toSerialize["incidentOn"] = o.IncidentOn
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableIncidentType struct {
	value *IncidentType
	isSet bool
}

func (v NullableIncidentType) Get() *IncidentType {
	return v.value
}

func (v *NullableIncidentType) Set(val *IncidentType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentType(val *IncidentType) *NullableIncidentType {
	return &NullableIncidentType{value: val, isSet: true}
}

func (v NullableIncidentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


