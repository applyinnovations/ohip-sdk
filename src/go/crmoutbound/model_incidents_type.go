/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the IncidentsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentsType{}

// IncidentsType Collection of Incidents for the profile.
type IncidentsType struct {
	Items []IncidentType
}

// NewIncidentsType instantiates a new IncidentsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentsType() *IncidentsType {
	this := IncidentsType{}
	return &this
}

// NewIncidentsTypeWithDefaults instantiates a new IncidentsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentsTypeWithDefaults() *IncidentsType {
	this := IncidentsType{}
	return &this
}

func (o IncidentsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *IncidentsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableIncidentsType struct {
	value IncidentsType
	isSet bool
}

func (v NullableIncidentsType) Get() IncidentsType {
	return v.value
}

func (v *NullableIncidentsType) Set(val IncidentsType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentsType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentsType(val IncidentsType) *NullableIncidentsType {
	return &NullableIncidentsType{value: val, isSet: true}
}

func (v NullableIncidentsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


