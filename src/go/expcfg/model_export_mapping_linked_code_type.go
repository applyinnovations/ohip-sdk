/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingLinkedCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingLinkedCodeType{}

// ExportMappingLinkedCodeType Details of linked code.
type ExportMappingLinkedCodeType struct {
	// Default value.
	DefaultMappedValue *string `json:"defaultMappedValue,omitempty"`
	// Mapping code attached to linked code.
	ExportMappingCode *string `json:"exportMappingCode,omitempty"`
	ExportMappingId *UniqueIDType `json:"exportMappingId,omitempty"`
	// Linked code.
	LinkedCode *string `json:"linkedCode,omitempty"`
	// Name of the LOV group to be used.
	LovName *string `json:"lovName,omitempty"`
	// Linked code.
	MappedValue *string `json:"mappedValue,omitempty"`
	// Description of the export mapping code.
	MappingCodeDescription *string `json:"mappingCodeDescription,omitempty"`
	// Description of the export mapping type.
	MappingTypeDescription *string `json:"mappingTypeDescription,omitempty"`
}

// NewExportMappingLinkedCodeType instantiates a new ExportMappingLinkedCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingLinkedCodeType() *ExportMappingLinkedCodeType {
	this := ExportMappingLinkedCodeType{}
	return &this
}

// NewExportMappingLinkedCodeTypeWithDefaults instantiates a new ExportMappingLinkedCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingLinkedCodeTypeWithDefaults() *ExportMappingLinkedCodeType {
	this := ExportMappingLinkedCodeType{}
	return &this
}

// GetDefaultMappedValue returns the DefaultMappedValue field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetDefaultMappedValue() string {
	if o == nil || IsNil(o.DefaultMappedValue) {
		var ret string
		return ret
	}
	return *o.DefaultMappedValue
}

// GetDefaultMappedValueOk returns a tuple with the DefaultMappedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetDefaultMappedValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMappedValue) {
		return nil, false
	}
	return o.DefaultMappedValue, true
}

// HasDefaultMappedValue returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasDefaultMappedValue() bool {
	if o != nil && !IsNil(o.DefaultMappedValue) {
		return true
	}

	return false
}

// SetDefaultMappedValue gets a reference to the given string and assigns it to the DefaultMappedValue field.
func (o *ExportMappingLinkedCodeType) SetDefaultMappedValue(v string) {
	o.DefaultMappedValue = &v
}

// GetExportMappingCode returns the ExportMappingCode field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetExportMappingCode() string {
	if o == nil || IsNil(o.ExportMappingCode) {
		var ret string
		return ret
	}
	return *o.ExportMappingCode
}

// GetExportMappingCodeOk returns a tuple with the ExportMappingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetExportMappingCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExportMappingCode) {
		return nil, false
	}
	return o.ExportMappingCode, true
}

// HasExportMappingCode returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasExportMappingCode() bool {
	if o != nil && !IsNil(o.ExportMappingCode) {
		return true
	}

	return false
}

// SetExportMappingCode gets a reference to the given string and assigns it to the ExportMappingCode field.
func (o *ExportMappingLinkedCodeType) SetExportMappingCode(v string) {
	o.ExportMappingCode = &v
}

// GetExportMappingId returns the ExportMappingId field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetExportMappingId() UniqueIDType {
	if o == nil || IsNil(o.ExportMappingId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportMappingId
}

// GetExportMappingIdOk returns a tuple with the ExportMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetExportMappingIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportMappingId) {
		return nil, false
	}
	return o.ExportMappingId, true
}

// HasExportMappingId returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasExportMappingId() bool {
	if o != nil && !IsNil(o.ExportMappingId) {
		return true
	}

	return false
}

// SetExportMappingId gets a reference to the given UniqueIDType and assigns it to the ExportMappingId field.
func (o *ExportMappingLinkedCodeType) SetExportMappingId(v UniqueIDType) {
	o.ExportMappingId = &v
}

// GetLinkedCode returns the LinkedCode field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetLinkedCode() string {
	if o == nil || IsNil(o.LinkedCode) {
		var ret string
		return ret
	}
	return *o.LinkedCode
}

// GetLinkedCodeOk returns a tuple with the LinkedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetLinkedCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkedCode) {
		return nil, false
	}
	return o.LinkedCode, true
}

// HasLinkedCode returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasLinkedCode() bool {
	if o != nil && !IsNil(o.LinkedCode) {
		return true
	}

	return false
}

// SetLinkedCode gets a reference to the given string and assigns it to the LinkedCode field.
func (o *ExportMappingLinkedCodeType) SetLinkedCode(v string) {
	o.LinkedCode = &v
}

// GetLovName returns the LovName field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetLovName() string {
	if o == nil || IsNil(o.LovName) {
		var ret string
		return ret
	}
	return *o.LovName
}

// GetLovNameOk returns a tuple with the LovName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetLovNameOk() (*string, bool) {
	if o == nil || IsNil(o.LovName) {
		return nil, false
	}
	return o.LovName, true
}

// HasLovName returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasLovName() bool {
	if o != nil && !IsNil(o.LovName) {
		return true
	}

	return false
}

// SetLovName gets a reference to the given string and assigns it to the LovName field.
func (o *ExportMappingLinkedCodeType) SetLovName(v string) {
	o.LovName = &v
}

// GetMappedValue returns the MappedValue field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetMappedValue() string {
	if o == nil || IsNil(o.MappedValue) {
		var ret string
		return ret
	}
	return *o.MappedValue
}

// GetMappedValueOk returns a tuple with the MappedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetMappedValueOk() (*string, bool) {
	if o == nil || IsNil(o.MappedValue) {
		return nil, false
	}
	return o.MappedValue, true
}

// HasMappedValue returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasMappedValue() bool {
	if o != nil && !IsNil(o.MappedValue) {
		return true
	}

	return false
}

// SetMappedValue gets a reference to the given string and assigns it to the MappedValue field.
func (o *ExportMappingLinkedCodeType) SetMappedValue(v string) {
	o.MappedValue = &v
}

// GetMappingCodeDescription returns the MappingCodeDescription field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetMappingCodeDescription() string {
	if o == nil || IsNil(o.MappingCodeDescription) {
		var ret string
		return ret
	}
	return *o.MappingCodeDescription
}

// GetMappingCodeDescriptionOk returns a tuple with the MappingCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetMappingCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MappingCodeDescription) {
		return nil, false
	}
	return o.MappingCodeDescription, true
}

// HasMappingCodeDescription returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasMappingCodeDescription() bool {
	if o != nil && !IsNil(o.MappingCodeDescription) {
		return true
	}

	return false
}

// SetMappingCodeDescription gets a reference to the given string and assigns it to the MappingCodeDescription field.
func (o *ExportMappingLinkedCodeType) SetMappingCodeDescription(v string) {
	o.MappingCodeDescription = &v
}

// GetMappingTypeDescription returns the MappingTypeDescription field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodeType) GetMappingTypeDescription() string {
	if o == nil || IsNil(o.MappingTypeDescription) {
		var ret string
		return ret
	}
	return *o.MappingTypeDescription
}

// GetMappingTypeDescriptionOk returns a tuple with the MappingTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodeType) GetMappingTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MappingTypeDescription) {
		return nil, false
	}
	return o.MappingTypeDescription, true
}

// HasMappingTypeDescription returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodeType) HasMappingTypeDescription() bool {
	if o != nil && !IsNil(o.MappingTypeDescription) {
		return true
	}

	return false
}

// SetMappingTypeDescription gets a reference to the given string and assigns it to the MappingTypeDescription field.
func (o *ExportMappingLinkedCodeType) SetMappingTypeDescription(v string) {
	o.MappingTypeDescription = &v
}

func (o ExportMappingLinkedCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingLinkedCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultMappedValue) {
		toSerialize["defaultMappedValue"] = o.DefaultMappedValue
	}
	if !IsNil(o.ExportMappingCode) {
		toSerialize["exportMappingCode"] = o.ExportMappingCode
	}
	if !IsNil(o.ExportMappingId) {
		toSerialize["exportMappingId"] = o.ExportMappingId
	}
	if !IsNil(o.LinkedCode) {
		toSerialize["linkedCode"] = o.LinkedCode
	}
	if !IsNil(o.LovName) {
		toSerialize["lovName"] = o.LovName
	}
	if !IsNil(o.MappedValue) {
		toSerialize["mappedValue"] = o.MappedValue
	}
	if !IsNil(o.MappingCodeDescription) {
		toSerialize["mappingCodeDescription"] = o.MappingCodeDescription
	}
	if !IsNil(o.MappingTypeDescription) {
		toSerialize["mappingTypeDescription"] = o.MappingTypeDescription
	}
	return toSerialize, nil
}

type NullableExportMappingLinkedCodeType struct {
	value *ExportMappingLinkedCodeType
	isSet bool
}

func (v NullableExportMappingLinkedCodeType) Get() *ExportMappingLinkedCodeType {
	return v.value
}

func (v *NullableExportMappingLinkedCodeType) Set(val *ExportMappingLinkedCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingLinkedCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingLinkedCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingLinkedCodeType(val *ExportMappingLinkedCodeType) *NullableExportMappingLinkedCodeType {
	return &NullableExportMappingLinkedCodeType{value: val, isSet: true}
}

func (v NullableExportMappingLinkedCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingLinkedCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


