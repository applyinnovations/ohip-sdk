/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportsAvailable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportsAvailable{}

// ExportsAvailable Response object including a list of available exports.
type ExportsAvailable struct {
	Exports *ExportListType `json:"exports,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewExportsAvailable instantiates a new ExportsAvailable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportsAvailable() *ExportsAvailable {
	this := ExportsAvailable{}
	return &this
}

// NewExportsAvailableWithDefaults instantiates a new ExportsAvailable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportsAvailableWithDefaults() *ExportsAvailable {
	this := ExportsAvailable{}
	return &this
}

// GetExports returns the Exports field value if set, zero value otherwise.
func (o *ExportsAvailable) GetExports() ExportListType {
	if o == nil || IsNil(o.Exports) {
		var ret ExportListType
		return ret
	}
	return *o.Exports
}

// GetExportsOk returns a tuple with the Exports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportsAvailable) GetExportsOk() (*ExportListType, bool) {
	if o == nil || IsNil(o.Exports) {
		return nil, false
	}
	return o.Exports, true
}

// HasExports returns a boolean if a field has been set.
func (o *ExportsAvailable) HasExports() bool {
	if o != nil && !IsNil(o.Exports) {
		return true
	}

	return false
}

// SetExports gets a reference to the given ExportListType and assigns it to the Exports field.
func (o *ExportsAvailable) SetExports(v ExportListType) {
	o.Exports = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExportsAvailable) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportsAvailable) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExportsAvailable) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ExportsAvailable) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ExportsAvailable) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportsAvailable) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ExportsAvailable) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ExportsAvailable) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ExportsAvailable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportsAvailable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exports) {
		toSerialize["exports"] = o.Exports
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableExportsAvailable struct {
	value *ExportsAvailable
	isSet bool
}

func (v NullableExportsAvailable) Get() *ExportsAvailable {
	return v.value
}

func (v *NullableExportsAvailable) Set(val *ExportsAvailable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportsAvailable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportsAvailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportsAvailable(val *ExportsAvailable) *NullableExportsAvailable {
	return &NullableExportsAvailable{value: val, isSet: true}
}

func (v NullableExportsAvailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportsAvailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


