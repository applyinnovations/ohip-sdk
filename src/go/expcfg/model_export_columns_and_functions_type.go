/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportColumnsAndFunctionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportColumnsAndFunctionsType{}

// ExportColumnsAndFunctionsType Contains columns, pre post functions and export functions
type ExportColumnsAndFunctionsType struct {
	DbColumns *ExpDataSourceColumnsType `json:"dbColumns,omitempty"`
	Functions *ExpFunctionsType `json:"functions,omitempty"`
	PrePostFunctions *ExpFunctionsType `json:"prePostFunctions,omitempty"`
}

// NewExportColumnsAndFunctionsType instantiates a new ExportColumnsAndFunctionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportColumnsAndFunctionsType() *ExportColumnsAndFunctionsType {
	this := ExportColumnsAndFunctionsType{}
	return &this
}

// NewExportColumnsAndFunctionsTypeWithDefaults instantiates a new ExportColumnsAndFunctionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportColumnsAndFunctionsTypeWithDefaults() *ExportColumnsAndFunctionsType {
	this := ExportColumnsAndFunctionsType{}
	return &this
}

// GetDbColumns returns the DbColumns field value if set, zero value otherwise.
func (o *ExportColumnsAndFunctionsType) GetDbColumns() ExpDataSourceColumnsType {
	if o == nil || IsNil(o.DbColumns) {
		var ret ExpDataSourceColumnsType
		return ret
	}
	return *o.DbColumns
}

// GetDbColumnsOk returns a tuple with the DbColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnsAndFunctionsType) GetDbColumnsOk() (*ExpDataSourceColumnsType, bool) {
	if o == nil || IsNil(o.DbColumns) {
		return nil, false
	}
	return o.DbColumns, true
}

// HasDbColumns returns a boolean if a field has been set.
func (o *ExportColumnsAndFunctionsType) HasDbColumns() bool {
	if o != nil && !IsNil(o.DbColumns) {
		return true
	}

	return false
}

// SetDbColumns gets a reference to the given ExpDataSourceColumnsType and assigns it to the DbColumns field.
func (o *ExportColumnsAndFunctionsType) SetDbColumns(v ExpDataSourceColumnsType) {
	o.DbColumns = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *ExportColumnsAndFunctionsType) GetFunctions() ExpFunctionsType {
	if o == nil || IsNil(o.Functions) {
		var ret ExpFunctionsType
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnsAndFunctionsType) GetFunctionsOk() (*ExpFunctionsType, bool) {
	if o == nil || IsNil(o.Functions) {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *ExportColumnsAndFunctionsType) HasFunctions() bool {
	if o != nil && !IsNil(o.Functions) {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given ExpFunctionsType and assigns it to the Functions field.
func (o *ExportColumnsAndFunctionsType) SetFunctions(v ExpFunctionsType) {
	o.Functions = &v
}

// GetPrePostFunctions returns the PrePostFunctions field value if set, zero value otherwise.
func (o *ExportColumnsAndFunctionsType) GetPrePostFunctions() ExpFunctionsType {
	if o == nil || IsNil(o.PrePostFunctions) {
		var ret ExpFunctionsType
		return ret
	}
	return *o.PrePostFunctions
}

// GetPrePostFunctionsOk returns a tuple with the PrePostFunctions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnsAndFunctionsType) GetPrePostFunctionsOk() (*ExpFunctionsType, bool) {
	if o == nil || IsNil(o.PrePostFunctions) {
		return nil, false
	}
	return o.PrePostFunctions, true
}

// HasPrePostFunctions returns a boolean if a field has been set.
func (o *ExportColumnsAndFunctionsType) HasPrePostFunctions() bool {
	if o != nil && !IsNil(o.PrePostFunctions) {
		return true
	}

	return false
}

// SetPrePostFunctions gets a reference to the given ExpFunctionsType and assigns it to the PrePostFunctions field.
func (o *ExportColumnsAndFunctionsType) SetPrePostFunctions(v ExpFunctionsType) {
	o.PrePostFunctions = &v
}

func (o ExportColumnsAndFunctionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportColumnsAndFunctionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbColumns) {
		toSerialize["dbColumns"] = o.DbColumns
	}
	if !IsNil(o.Functions) {
		toSerialize["functions"] = o.Functions
	}
	if !IsNil(o.PrePostFunctions) {
		toSerialize["prePostFunctions"] = o.PrePostFunctions
	}
	return toSerialize, nil
}

type NullableExportColumnsAndFunctionsType struct {
	value *ExportColumnsAndFunctionsType
	isSet bool
}

func (v NullableExportColumnsAndFunctionsType) Get() *ExportColumnsAndFunctionsType {
	return v.value
}

func (v *NullableExportColumnsAndFunctionsType) Set(val *ExportColumnsAndFunctionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportColumnsAndFunctionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportColumnsAndFunctionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportColumnsAndFunctionsType(val *ExportColumnsAndFunctionsType) *NullableExportColumnsAndFunctionsType {
	return &NullableExportColumnsAndFunctionsType{value: val, isSet: true}
}

func (v NullableExportColumnsAndFunctionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportColumnsAndFunctionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


