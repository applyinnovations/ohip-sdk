/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportSchedulesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportSchedulesType{}

// ExportSchedulesType Export Schedule
type ExportSchedulesType struct {
	Items []ExportScheduleType
}

// NewExportSchedulesType instantiates a new ExportSchedulesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportSchedulesType() *ExportSchedulesType {
	this := ExportSchedulesType{}
	return &this
}

// NewExportSchedulesTypeWithDefaults instantiates a new ExportSchedulesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportSchedulesTypeWithDefaults() *ExportSchedulesType {
	this := ExportSchedulesType{}
	return &this
}

func (o ExportSchedulesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportSchedulesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *ExportSchedulesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableExportSchedulesType struct {
	value ExportSchedulesType
	isSet bool
}

func (v NullableExportSchedulesType) Get() ExportSchedulesType {
	return v.value
}

func (v *NullableExportSchedulesType) Set(val ExportSchedulesType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportSchedulesType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportSchedulesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportSchedulesType(val ExportSchedulesType) *NullableExportSchedulesType {
	return &NullableExportSchedulesType{value: val, isSet: true}
}

func (v NullableExportSchedulesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportSchedulesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


