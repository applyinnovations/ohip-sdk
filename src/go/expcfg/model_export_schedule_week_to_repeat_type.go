/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// ExportScheduleWeekToRepeatType Frequency for which export schedules needs to be returned
type ExportScheduleWeekToRepeatType string

// List of exportScheduleWeekToRepeatType
const (
	EXPORTSCHEDULEWEEKTOREPEATTYPE_FIRST ExportScheduleWeekToRepeatType = "First"
	EXPORTSCHEDULEWEEKTOREPEATTYPE_SECOND ExportScheduleWeekToRepeatType = "Second"
	EXPORTSCHEDULEWEEKTOREPEATTYPE_THIRD ExportScheduleWeekToRepeatType = "Third"
	EXPORTSCHEDULEWEEKTOREPEATTYPE_FOURTH ExportScheduleWeekToRepeatType = "Fourth"
	EXPORTSCHEDULEWEEKTOREPEATTYPE_FIFTH ExportScheduleWeekToRepeatType = "Fifth"
	EXPORTSCHEDULEWEEKTOREPEATTYPE_LAST ExportScheduleWeekToRepeatType = "Last"
)

// All allowed values of ExportScheduleWeekToRepeatType enum
var AllowedExportScheduleWeekToRepeatTypeEnumValues = []ExportScheduleWeekToRepeatType{
	"First",
	"Second",
	"Third",
	"Fourth",
	"Fifth",
	"Last",
}

func (v *ExportScheduleWeekToRepeatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportScheduleWeekToRepeatType(value)
	for _, existing := range AllowedExportScheduleWeekToRepeatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportScheduleWeekToRepeatType", value)
}

// NewExportScheduleWeekToRepeatTypeFromValue returns a pointer to a valid ExportScheduleWeekToRepeatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportScheduleWeekToRepeatTypeFromValue(v string) (*ExportScheduleWeekToRepeatType, error) {
	ev := ExportScheduleWeekToRepeatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportScheduleWeekToRepeatType: valid values are %v", v, AllowedExportScheduleWeekToRepeatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportScheduleWeekToRepeatType) IsValid() bool {
	for _, existing := range AllowedExportScheduleWeekToRepeatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to exportScheduleWeekToRepeatType value
func (v ExportScheduleWeekToRepeatType) Ptr() *ExportScheduleWeekToRepeatType {
	return &v
}

type NullableExportScheduleWeekToRepeatType struct {
	value *ExportScheduleWeekToRepeatType
	isSet bool
}

func (v NullableExportScheduleWeekToRepeatType) Get() *ExportScheduleWeekToRepeatType {
	return v.value
}

func (v *NullableExportScheduleWeekToRepeatType) Set(val *ExportScheduleWeekToRepeatType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportScheduleWeekToRepeatType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportScheduleWeekToRepeatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportScheduleWeekToRepeatType(val *ExportScheduleWeekToRepeatType) *NullableExportScheduleWeekToRepeatType {
	return &NullableExportScheduleWeekToRepeatType{value: val, isSet: true}
}

func (v NullableExportScheduleWeekToRepeatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportScheduleWeekToRepeatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

