/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportColumnDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportColumnDetailType{}

// ExportColumnDetailType struct for ExportColumnDetailType
type ExportColumnDetailType struct {
	// Column Alignment.
	ColumnAlignment *string `json:"columnAlignment,omitempty"`
	ColumnDataType *ExportColumnInfoType `json:"columnDataType,omitempty"`
	// Column format.
	ColumnFormat *string `json:"columnFormat,omitempty"`
	// Length of the column.
	ColumnLength *int32 `json:"columnLength,omitempty"`
	// Name of the column to Export.
	ColumnName *string `json:"columnName,omitempty"`
	// Order by column.
	ColumnOrderBy *int32 `json:"columnOrderBy,omitempty"`
	// Type of the column.
	ColumnType *string `json:"columnType,omitempty"`
	DatabaseColumn *bool `json:"databaseColumn,omitempty"`
	// Default value of the column.
	DefaultValue *string `json:"defaultValue,omitempty"`
	ExportDataId *UniqueIDType `json:"exportDataId,omitempty"`
	// Filter on the Additional Source View for XML Complex Elements.
	Filter *string `json:"filter,omitempty"`
	// Formula for the Formula Column.
	Formula *string `json:"formula,omitempty"`
	IgnoreLength *bool `json:"ignoreLength,omitempty"`
	ParentColumnId *UniqueIDType `json:"parentColumnId,omitempty"`
	// Name of an additional database view that the column, and its descendants, may be derived from. This column, and its descendants, may also be derived from the export header's source view, as well as any ancestor's source view.
	SourceViewName *string `json:"sourceViewName,omitempty"`
	TagRequired *bool `json:"tagRequired,omitempty"`
	XMLAttribute *bool `json:"xMLAttribute,omitempty"`
	XMLColumnType *ExportColumnXMLType `json:"xMLColumnType,omitempty"`
}

// NewExportColumnDetailType instantiates a new ExportColumnDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportColumnDetailType() *ExportColumnDetailType {
	this := ExportColumnDetailType{}
	return &this
}

// NewExportColumnDetailTypeWithDefaults instantiates a new ExportColumnDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportColumnDetailTypeWithDefaults() *ExportColumnDetailType {
	this := ExportColumnDetailType{}
	return &this
}

// GetColumnAlignment returns the ColumnAlignment field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnAlignment() string {
	if o == nil || IsNil(o.ColumnAlignment) {
		var ret string
		return ret
	}
	return *o.ColumnAlignment
}

// GetColumnAlignmentOk returns a tuple with the ColumnAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnAlignmentOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnAlignment) {
		return nil, false
	}
	return o.ColumnAlignment, true
}

// HasColumnAlignment returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnAlignment() bool {
	if o != nil && !IsNil(o.ColumnAlignment) {
		return true
	}

	return false
}

// SetColumnAlignment gets a reference to the given string and assigns it to the ColumnAlignment field.
func (o *ExportColumnDetailType) SetColumnAlignment(v string) {
	o.ColumnAlignment = &v
}

// GetColumnDataType returns the ColumnDataType field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnDataType() ExportColumnInfoType {
	if o == nil || IsNil(o.ColumnDataType) {
		var ret ExportColumnInfoType
		return ret
	}
	return *o.ColumnDataType
}

// GetColumnDataTypeOk returns a tuple with the ColumnDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnDataTypeOk() (*ExportColumnInfoType, bool) {
	if o == nil || IsNil(o.ColumnDataType) {
		return nil, false
	}
	return o.ColumnDataType, true
}

// HasColumnDataType returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnDataType() bool {
	if o != nil && !IsNil(o.ColumnDataType) {
		return true
	}

	return false
}

// SetColumnDataType gets a reference to the given ExportColumnInfoType and assigns it to the ColumnDataType field.
func (o *ExportColumnDetailType) SetColumnDataType(v ExportColumnInfoType) {
	o.ColumnDataType = &v
}

// GetColumnFormat returns the ColumnFormat field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnFormat() string {
	if o == nil || IsNil(o.ColumnFormat) {
		var ret string
		return ret
	}
	return *o.ColumnFormat
}

// GetColumnFormatOk returns a tuple with the ColumnFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnFormat) {
		return nil, false
	}
	return o.ColumnFormat, true
}

// HasColumnFormat returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnFormat() bool {
	if o != nil && !IsNil(o.ColumnFormat) {
		return true
	}

	return false
}

// SetColumnFormat gets a reference to the given string and assigns it to the ColumnFormat field.
func (o *ExportColumnDetailType) SetColumnFormat(v string) {
	o.ColumnFormat = &v
}

// GetColumnLength returns the ColumnLength field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnLength() int32 {
	if o == nil || IsNil(o.ColumnLength) {
		var ret int32
		return ret
	}
	return *o.ColumnLength
}

// GetColumnLengthOk returns a tuple with the ColumnLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.ColumnLength) {
		return nil, false
	}
	return o.ColumnLength, true
}

// HasColumnLength returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnLength() bool {
	if o != nil && !IsNil(o.ColumnLength) {
		return true
	}

	return false
}

// SetColumnLength gets a reference to the given int32 and assigns it to the ColumnLength field.
func (o *ExportColumnDetailType) SetColumnLength(v int32) {
	o.ColumnLength = &v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *ExportColumnDetailType) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetColumnOrderBy returns the ColumnOrderBy field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnOrderBy() int32 {
	if o == nil || IsNil(o.ColumnOrderBy) {
		var ret int32
		return ret
	}
	return *o.ColumnOrderBy
}

// GetColumnOrderByOk returns a tuple with the ColumnOrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.ColumnOrderBy) {
		return nil, false
	}
	return o.ColumnOrderBy, true
}

// HasColumnOrderBy returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnOrderBy() bool {
	if o != nil && !IsNil(o.ColumnOrderBy) {
		return true
	}

	return false
}

// SetColumnOrderBy gets a reference to the given int32 and assigns it to the ColumnOrderBy field.
func (o *ExportColumnDetailType) SetColumnOrderBy(v int32) {
	o.ColumnOrderBy = &v
}

// GetColumnType returns the ColumnType field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetColumnType() string {
	if o == nil || IsNil(o.ColumnType) {
		var ret string
		return ret
	}
	return *o.ColumnType
}

// GetColumnTypeOk returns a tuple with the ColumnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetColumnTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnType) {
		return nil, false
	}
	return o.ColumnType, true
}

// HasColumnType returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasColumnType() bool {
	if o != nil && !IsNil(o.ColumnType) {
		return true
	}

	return false
}

// SetColumnType gets a reference to the given string and assigns it to the ColumnType field.
func (o *ExportColumnDetailType) SetColumnType(v string) {
	o.ColumnType = &v
}

// GetDatabaseColumn returns the DatabaseColumn field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetDatabaseColumn() bool {
	if o == nil || IsNil(o.DatabaseColumn) {
		var ret bool
		return ret
	}
	return *o.DatabaseColumn
}

// GetDatabaseColumnOk returns a tuple with the DatabaseColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetDatabaseColumnOk() (*bool, bool) {
	if o == nil || IsNil(o.DatabaseColumn) {
		return nil, false
	}
	return o.DatabaseColumn, true
}

// HasDatabaseColumn returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasDatabaseColumn() bool {
	if o != nil && !IsNil(o.DatabaseColumn) {
		return true
	}

	return false
}

// SetDatabaseColumn gets a reference to the given bool and assigns it to the DatabaseColumn field.
func (o *ExportColumnDetailType) SetDatabaseColumn(v bool) {
	o.DatabaseColumn = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ExportColumnDetailType) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetExportDataId returns the ExportDataId field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetExportDataId() UniqueIDType {
	if o == nil || IsNil(o.ExportDataId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportDataId
}

// GetExportDataIdOk returns a tuple with the ExportDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetExportDataIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportDataId) {
		return nil, false
	}
	return o.ExportDataId, true
}

// HasExportDataId returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasExportDataId() bool {
	if o != nil && !IsNil(o.ExportDataId) {
		return true
	}

	return false
}

// SetExportDataId gets a reference to the given UniqueIDType and assigns it to the ExportDataId field.
func (o *ExportColumnDetailType) SetExportDataId(v UniqueIDType) {
	o.ExportDataId = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *ExportColumnDetailType) SetFilter(v string) {
	o.Filter = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetFormula() string {
	if o == nil || IsNil(o.Formula) {
		var ret string
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given string and assigns it to the Formula field.
func (o *ExportColumnDetailType) SetFormula(v string) {
	o.Formula = &v
}

// GetIgnoreLength returns the IgnoreLength field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetIgnoreLength() bool {
	if o == nil || IsNil(o.IgnoreLength) {
		var ret bool
		return ret
	}
	return *o.IgnoreLength
}

// GetIgnoreLengthOk returns a tuple with the IgnoreLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetIgnoreLengthOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreLength) {
		return nil, false
	}
	return o.IgnoreLength, true
}

// HasIgnoreLength returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasIgnoreLength() bool {
	if o != nil && !IsNil(o.IgnoreLength) {
		return true
	}

	return false
}

// SetIgnoreLength gets a reference to the given bool and assigns it to the IgnoreLength field.
func (o *ExportColumnDetailType) SetIgnoreLength(v bool) {
	o.IgnoreLength = &v
}

// GetParentColumnId returns the ParentColumnId field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetParentColumnId() UniqueIDType {
	if o == nil || IsNil(o.ParentColumnId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ParentColumnId
}

// GetParentColumnIdOk returns a tuple with the ParentColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetParentColumnIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ParentColumnId) {
		return nil, false
	}
	return o.ParentColumnId, true
}

// HasParentColumnId returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasParentColumnId() bool {
	if o != nil && !IsNil(o.ParentColumnId) {
		return true
	}

	return false
}

// SetParentColumnId gets a reference to the given UniqueIDType and assigns it to the ParentColumnId field.
func (o *ExportColumnDetailType) SetParentColumnId(v UniqueIDType) {
	o.ParentColumnId = &v
}

// GetSourceViewName returns the SourceViewName field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetSourceViewName() string {
	if o == nil || IsNil(o.SourceViewName) {
		var ret string
		return ret
	}
	return *o.SourceViewName
}

// GetSourceViewNameOk returns a tuple with the SourceViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetSourceViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceViewName) {
		return nil, false
	}
	return o.SourceViewName, true
}

// HasSourceViewName returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasSourceViewName() bool {
	if o != nil && !IsNil(o.SourceViewName) {
		return true
	}

	return false
}

// SetSourceViewName gets a reference to the given string and assigns it to the SourceViewName field.
func (o *ExportColumnDetailType) SetSourceViewName(v string) {
	o.SourceViewName = &v
}

// GetTagRequired returns the TagRequired field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetTagRequired() bool {
	if o == nil || IsNil(o.TagRequired) {
		var ret bool
		return ret
	}
	return *o.TagRequired
}

// GetTagRequiredOk returns a tuple with the TagRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetTagRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TagRequired) {
		return nil, false
	}
	return o.TagRequired, true
}

// HasTagRequired returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasTagRequired() bool {
	if o != nil && !IsNil(o.TagRequired) {
		return true
	}

	return false
}

// SetTagRequired gets a reference to the given bool and assigns it to the TagRequired field.
func (o *ExportColumnDetailType) SetTagRequired(v bool) {
	o.TagRequired = &v
}

// GetXMLAttribute returns the XMLAttribute field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetXMLAttribute() bool {
	if o == nil || IsNil(o.XMLAttribute) {
		var ret bool
		return ret
	}
	return *o.XMLAttribute
}

// GetXMLAttributeOk returns a tuple with the XMLAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetXMLAttributeOk() (*bool, bool) {
	if o == nil || IsNil(o.XMLAttribute) {
		return nil, false
	}
	return o.XMLAttribute, true
}

// HasXMLAttribute returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasXMLAttribute() bool {
	if o != nil && !IsNil(o.XMLAttribute) {
		return true
	}

	return false
}

// SetXMLAttribute gets a reference to the given bool and assigns it to the XMLAttribute field.
func (o *ExportColumnDetailType) SetXMLAttribute(v bool) {
	o.XMLAttribute = &v
}

// GetXMLColumnType returns the XMLColumnType field value if set, zero value otherwise.
func (o *ExportColumnDetailType) GetXMLColumnType() ExportColumnXMLType {
	if o == nil || IsNil(o.XMLColumnType) {
		var ret ExportColumnXMLType
		return ret
	}
	return *o.XMLColumnType
}

// GetXMLColumnTypeOk returns a tuple with the XMLColumnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportColumnDetailType) GetXMLColumnTypeOk() (*ExportColumnXMLType, bool) {
	if o == nil || IsNil(o.XMLColumnType) {
		return nil, false
	}
	return o.XMLColumnType, true
}

// HasXMLColumnType returns a boolean if a field has been set.
func (o *ExportColumnDetailType) HasXMLColumnType() bool {
	if o != nil && !IsNil(o.XMLColumnType) {
		return true
	}

	return false
}

// SetXMLColumnType gets a reference to the given ExportColumnXMLType and assigns it to the XMLColumnType field.
func (o *ExportColumnDetailType) SetXMLColumnType(v ExportColumnXMLType) {
	o.XMLColumnType = &v
}

func (o ExportColumnDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportColumnDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColumnAlignment) {
		toSerialize["columnAlignment"] = o.ColumnAlignment
	}
	if !IsNil(o.ColumnDataType) {
		toSerialize["columnDataType"] = o.ColumnDataType
	}
	if !IsNil(o.ColumnFormat) {
		toSerialize["columnFormat"] = o.ColumnFormat
	}
	if !IsNil(o.ColumnLength) {
		toSerialize["columnLength"] = o.ColumnLength
	}
	if !IsNil(o.ColumnName) {
		toSerialize["columnName"] = o.ColumnName
	}
	if !IsNil(o.ColumnOrderBy) {
		toSerialize["columnOrderBy"] = o.ColumnOrderBy
	}
	if !IsNil(o.ColumnType) {
		toSerialize["columnType"] = o.ColumnType
	}
	if !IsNil(o.DatabaseColumn) {
		toSerialize["databaseColumn"] = o.DatabaseColumn
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.ExportDataId) {
		toSerialize["exportDataId"] = o.ExportDataId
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if !IsNil(o.IgnoreLength) {
		toSerialize["ignoreLength"] = o.IgnoreLength
	}
	if !IsNil(o.ParentColumnId) {
		toSerialize["parentColumnId"] = o.ParentColumnId
	}
	if !IsNil(o.SourceViewName) {
		toSerialize["sourceViewName"] = o.SourceViewName
	}
	if !IsNil(o.TagRequired) {
		toSerialize["tagRequired"] = o.TagRequired
	}
	if !IsNil(o.XMLAttribute) {
		toSerialize["xMLAttribute"] = o.XMLAttribute
	}
	if !IsNil(o.XMLColumnType) {
		toSerialize["xMLColumnType"] = o.XMLColumnType
	}
	return toSerialize, nil
}

type NullableExportColumnDetailType struct {
	value *ExportColumnDetailType
	isSet bool
}

func (v NullableExportColumnDetailType) Get() *ExportColumnDetailType {
	return v.value
}

func (v *NullableExportColumnDetailType) Set(val *ExportColumnDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportColumnDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportColumnDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportColumnDetailType(val *ExportColumnDetailType) *NullableExportColumnDetailType {
	return &NullableExportColumnDetailType{value: val, isSet: true}
}

func (v NullableExportColumnDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportColumnDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


