/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportScheduleFrequencyDailyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportScheduleFrequencyDailyType{}

// ExportScheduleFrequencyDailyType If specified then export is scheduled to run daily
type ExportScheduleFrequencyDailyType struct {
	// Specifies the hour on which the job is to run. Valid values are 0 to 23.
	Hour *int32 `json:"hour,omitempty"`
	// Interval at which export needs to be scheduled
	Interval *int32 `json:"interval,omitempty"`
}

// NewExportScheduleFrequencyDailyType instantiates a new ExportScheduleFrequencyDailyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportScheduleFrequencyDailyType() *ExportScheduleFrequencyDailyType {
	this := ExportScheduleFrequencyDailyType{}
	return &this
}

// NewExportScheduleFrequencyDailyTypeWithDefaults instantiates a new ExportScheduleFrequencyDailyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportScheduleFrequencyDailyTypeWithDefaults() *ExportScheduleFrequencyDailyType {
	this := ExportScheduleFrequencyDailyType{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *ExportScheduleFrequencyDailyType) GetHour() int32 {
	if o == nil || IsNil(o.Hour) {
		var ret int32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleFrequencyDailyType) GetHourOk() (*int32, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *ExportScheduleFrequencyDailyType) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given int32 and assigns it to the Hour field.
func (o *ExportScheduleFrequencyDailyType) SetHour(v int32) {
	o.Hour = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ExportScheduleFrequencyDailyType) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleFrequencyDailyType) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *ExportScheduleFrequencyDailyType) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *ExportScheduleFrequencyDailyType) SetInterval(v int32) {
	o.Interval = &v
}

func (o ExportScheduleFrequencyDailyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportScheduleFrequencyDailyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	return toSerialize, nil
}

type NullableExportScheduleFrequencyDailyType struct {
	value *ExportScheduleFrequencyDailyType
	isSet bool
}

func (v NullableExportScheduleFrequencyDailyType) Get() *ExportScheduleFrequencyDailyType {
	return v.value
}

func (v *NullableExportScheduleFrequencyDailyType) Set(val *ExportScheduleFrequencyDailyType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportScheduleFrequencyDailyType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportScheduleFrequencyDailyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportScheduleFrequencyDailyType(val *ExportScheduleFrequencyDailyType) *NullableExportScheduleFrequencyDailyType {
	return &NullableExportScheduleFrequencyDailyType{value: val, isSet: true}
}

func (v NullableExportScheduleFrequencyDailyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportScheduleFrequencyDailyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


