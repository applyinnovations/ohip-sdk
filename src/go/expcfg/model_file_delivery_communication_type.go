/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// FileDeliveryCommunicationType Enumeration of export file groups.
type FileDeliveryCommunicationType string

// List of fileDeliveryCommunicationType
const (
	FILEDELIVERYCOMMUNICATIONTYPE_FTP FileDeliveryCommunicationType = "Ftp"
	FILEDELIVERYCOMMUNICATIONTYPE_SFTP_PUBLIC_KEY FileDeliveryCommunicationType = "SftpPublicKey"
	FILEDELIVERYCOMMUNICATIONTYPE_SFTP_PASSWORD FileDeliveryCommunicationType = "SftpPassword"
	FILEDELIVERYCOMMUNICATIONTYPE_SFTP_CN FileDeliveryCommunicationType = "SftpCn"
	FILEDELIVERYCOMMUNICATIONTYPE_HTTP FileDeliveryCommunicationType = "Http"
	FILEDELIVERYCOMMUNICATIONTYPE_FILE_SYSTEM FileDeliveryCommunicationType = "FileSystem"
)

// All allowed values of FileDeliveryCommunicationType enum
var AllowedFileDeliveryCommunicationTypeEnumValues = []FileDeliveryCommunicationType{
	"Ftp",
	"SftpPublicKey",
	"SftpPassword",
	"SftpCn",
	"Http",
	"FileSystem",
}

func (v *FileDeliveryCommunicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileDeliveryCommunicationType(value)
	for _, existing := range AllowedFileDeliveryCommunicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileDeliveryCommunicationType", value)
}

// NewFileDeliveryCommunicationTypeFromValue returns a pointer to a valid FileDeliveryCommunicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileDeliveryCommunicationTypeFromValue(v string) (*FileDeliveryCommunicationType, error) {
	ev := FileDeliveryCommunicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileDeliveryCommunicationType: valid values are %v", v, AllowedFileDeliveryCommunicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileDeliveryCommunicationType) IsValid() bool {
	for _, existing := range AllowedFileDeliveryCommunicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to fileDeliveryCommunicationType value
func (v FileDeliveryCommunicationType) Ptr() *FileDeliveryCommunicationType {
	return &v
}

type NullableFileDeliveryCommunicationType struct {
	value *FileDeliveryCommunicationType
	isSet bool
}

func (v NullableFileDeliveryCommunicationType) Get() *FileDeliveryCommunicationType {
	return v.value
}

func (v *NullableFileDeliveryCommunicationType) Set(val *FileDeliveryCommunicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFileDeliveryCommunicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFileDeliveryCommunicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileDeliveryCommunicationType(val *FileDeliveryCommunicationType) *NullableFileDeliveryCommunicationType {
	return &NullableFileDeliveryCommunicationType{value: val, isSet: true}
}

func (v NullableFileDeliveryCommunicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileDeliveryCommunicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

