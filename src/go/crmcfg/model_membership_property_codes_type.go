/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipPropertyCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipPropertyCodesType{}

// MembershipPropertyCodesType Membership Property code and Description.
type MembershipPropertyCodesType struct {
	Items []CodeDescriptionType
}

// NewMembershipPropertyCodesType instantiates a new MembershipPropertyCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipPropertyCodesType() *MembershipPropertyCodesType {
	this := MembershipPropertyCodesType{}
	return &this
}

// NewMembershipPropertyCodesTypeWithDefaults instantiates a new MembershipPropertyCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipPropertyCodesTypeWithDefaults() *MembershipPropertyCodesType {
	this := MembershipPropertyCodesType{}
	return &this
}

func (o MembershipPropertyCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipPropertyCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *MembershipPropertyCodesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableMembershipPropertyCodesType struct {
	value MembershipPropertyCodesType
	isSet bool
}

func (v NullableMembershipPropertyCodesType) Get() MembershipPropertyCodesType {
	return v.value
}

func (v *NullableMembershipPropertyCodesType) Set(val MembershipPropertyCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipPropertyCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipPropertyCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipPropertyCodesType(val MembershipPropertyCodesType) *NullableMembershipPropertyCodesType {
	return &NullableMembershipPropertyCodesType{value: val, isSet: true}
}

func (v NullableMembershipPropertyCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipPropertyCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


