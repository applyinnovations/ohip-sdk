/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeChangeInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeChangeInstructionType{}

// MembershipTypeChangeInstructionType Represents the membership type under change .
type MembershipTypeChangeInstructionType struct {
	MembershipType *MembershipTypeType `json:"membershipType,omitempty"`
	ResponseInstructions *MembershipTypeChangeInstructionTypeResponseInstructions `json:"responseInstructions,omitempty"`
}

// NewMembershipTypeChangeInstructionType instantiates a new MembershipTypeChangeInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeChangeInstructionType() *MembershipTypeChangeInstructionType {
	this := MembershipTypeChangeInstructionType{}
	return &this
}

// NewMembershipTypeChangeInstructionTypeWithDefaults instantiates a new MembershipTypeChangeInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeChangeInstructionTypeWithDefaults() *MembershipTypeChangeInstructionType {
	this := MembershipTypeChangeInstructionType{}
	return &this
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipTypeChangeInstructionType) GetMembershipType() MembershipTypeType {
	if o == nil || IsNil(o.MembershipType) {
		var ret MembershipTypeType
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeChangeInstructionType) GetMembershipTypeOk() (*MembershipTypeType, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipTypeChangeInstructionType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given MembershipTypeType and assigns it to the MembershipType field.
func (o *MembershipTypeChangeInstructionType) SetMembershipType(v MembershipTypeType) {
	o.MembershipType = &v
}

// GetResponseInstructions returns the ResponseInstructions field value if set, zero value otherwise.
func (o *MembershipTypeChangeInstructionType) GetResponseInstructions() MembershipTypeChangeInstructionTypeResponseInstructions {
	if o == nil || IsNil(o.ResponseInstructions) {
		var ret MembershipTypeChangeInstructionTypeResponseInstructions
		return ret
	}
	return *o.ResponseInstructions
}

// GetResponseInstructionsOk returns a tuple with the ResponseInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeChangeInstructionType) GetResponseInstructionsOk() (*MembershipTypeChangeInstructionTypeResponseInstructions, bool) {
	if o == nil || IsNil(o.ResponseInstructions) {
		return nil, false
	}
	return o.ResponseInstructions, true
}

// HasResponseInstructions returns a boolean if a field has been set.
func (o *MembershipTypeChangeInstructionType) HasResponseInstructions() bool {
	if o != nil && !IsNil(o.ResponseInstructions) {
		return true
	}

	return false
}

// SetResponseInstructions gets a reference to the given MembershipTypeChangeInstructionTypeResponseInstructions and assigns it to the ResponseInstructions field.
func (o *MembershipTypeChangeInstructionType) SetResponseInstructions(v MembershipTypeChangeInstructionTypeResponseInstructions) {
	o.ResponseInstructions = &v
}

func (o MembershipTypeChangeInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeChangeInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.ResponseInstructions) {
		toSerialize["responseInstructions"] = o.ResponseInstructions
	}
	return toSerialize, nil
}

type NullableMembershipTypeChangeInstructionType struct {
	value *MembershipTypeChangeInstructionType
	isSet bool
}

func (v NullableMembershipTypeChangeInstructionType) Get() *MembershipTypeChangeInstructionType {
	return v.value
}

func (v *NullableMembershipTypeChangeInstructionType) Set(val *MembershipTypeChangeInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeChangeInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeChangeInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeChangeInstructionType(val *MembershipTypeChangeInstructionType) *NullableMembershipTypeChangeInstructionType {
	return &NullableMembershipTypeChangeInstructionType{value: val, isSet: true}
}

func (v NullableMembershipTypeChangeInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeChangeInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


