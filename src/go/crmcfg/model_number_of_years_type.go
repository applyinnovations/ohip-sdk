/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// NumberOfYearsType Five Year period
type NumberOfYearsType string

// List of numberOfYearsType
const (
	NUMBEROFYEARSTYPE_ONE NumberOfYearsType = "One"
	NUMBEROFYEARSTYPE_TWO NumberOfYearsType = "Two"
	NUMBEROFYEARSTYPE_THREE NumberOfYearsType = "Three"
	NUMBEROFYEARSTYPE_FOUR NumberOfYearsType = "Four"
	NUMBEROFYEARSTYPE_FIVE NumberOfYearsType = "Five"
)

// All allowed values of NumberOfYearsType enum
var AllowedNumberOfYearsTypeEnumValues = []NumberOfYearsType{
	"One",
	"Two",
	"Three",
	"Four",
	"Five",
}

func (v *NumberOfYearsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberOfYearsType(value)
	for _, existing := range AllowedNumberOfYearsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberOfYearsType", value)
}

// NewNumberOfYearsTypeFromValue returns a pointer to a valid NumberOfYearsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberOfYearsTypeFromValue(v string) (*NumberOfYearsType, error) {
	ev := NumberOfYearsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberOfYearsType: valid values are %v", v, AllowedNumberOfYearsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberOfYearsType) IsValid() bool {
	for _, existing := range AllowedNumberOfYearsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to numberOfYearsType value
func (v NumberOfYearsType) Ptr() *NumberOfYearsType {
	return &v
}

type NullableNumberOfYearsType struct {
	value *NumberOfYearsType
	isSet bool
}

func (v NullableNumberOfYearsType) Get() *NumberOfYearsType {
	return v.value
}

func (v *NullableNumberOfYearsType) Set(val *NumberOfYearsType) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberOfYearsType) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberOfYearsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberOfYearsType(val *NumberOfYearsType) *NullableNumberOfYearsType {
	return &NullableNumberOfYearsType{value: val, isSet: true}
}

func (v NullableNumberOfYearsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberOfYearsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

