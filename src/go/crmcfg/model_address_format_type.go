/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the AddressFormatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressFormatType{}

// AddressFormatType A representation of the information contained by an address format.
type AddressFormatType struct {
	// Determines whether this address format can be deleted.
	CanDelete *bool `json:"canDelete,omitempty"`
	// Description of the address format.
	Description *string `json:"description,omitempty"`
	// sequence number of the address format.
	DisplayOrder *float32 `json:"displayOrder,omitempty"`
	// Address format code.
	FormatCode *string `json:"formatCode,omitempty"`
	// Address format definition with the elements of the address.
	FormatDefinition *string `json:"formatDefinition,omitempty"`
	// An example address formatted with the current format definition.
	FormattedExample *string `json:"formattedExample,omitempty"`
	// Determines if the format is a sales format or not.
	SalesFormat *bool `json:"salesFormat,omitempty"`
}

// NewAddressFormatType instantiates a new AddressFormatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressFormatType() *AddressFormatType {
	this := AddressFormatType{}
	return &this
}

// NewAddressFormatTypeWithDefaults instantiates a new AddressFormatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressFormatTypeWithDefaults() *AddressFormatType {
	this := AddressFormatType{}
	return &this
}

// GetCanDelete returns the CanDelete field value if set, zero value otherwise.
func (o *AddressFormatType) GetCanDelete() bool {
	if o == nil || IsNil(o.CanDelete) {
		var ret bool
		return ret
	}
	return *o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetCanDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDelete) {
		return nil, false
	}
	return o.CanDelete, true
}

// HasCanDelete returns a boolean if a field has been set.
func (o *AddressFormatType) HasCanDelete() bool {
	if o != nil && !IsNil(o.CanDelete) {
		return true
	}

	return false
}

// SetCanDelete gets a reference to the given bool and assigns it to the CanDelete field.
func (o *AddressFormatType) SetCanDelete(v bool) {
	o.CanDelete = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddressFormatType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddressFormatType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddressFormatType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *AddressFormatType) GetDisplayOrder() float32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret float32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetDisplayOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *AddressFormatType) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given float32 and assigns it to the DisplayOrder field.
func (o *AddressFormatType) SetDisplayOrder(v float32) {
	o.DisplayOrder = &v
}

// GetFormatCode returns the FormatCode field value if set, zero value otherwise.
func (o *AddressFormatType) GetFormatCode() string {
	if o == nil || IsNil(o.FormatCode) {
		var ret string
		return ret
	}
	return *o.FormatCode
}

// GetFormatCodeOk returns a tuple with the FormatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetFormatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FormatCode) {
		return nil, false
	}
	return o.FormatCode, true
}

// HasFormatCode returns a boolean if a field has been set.
func (o *AddressFormatType) HasFormatCode() bool {
	if o != nil && !IsNil(o.FormatCode) {
		return true
	}

	return false
}

// SetFormatCode gets a reference to the given string and assigns it to the FormatCode field.
func (o *AddressFormatType) SetFormatCode(v string) {
	o.FormatCode = &v
}

// GetFormatDefinition returns the FormatDefinition field value if set, zero value otherwise.
func (o *AddressFormatType) GetFormatDefinition() string {
	if o == nil || IsNil(o.FormatDefinition) {
		var ret string
		return ret
	}
	return *o.FormatDefinition
}

// GetFormatDefinitionOk returns a tuple with the FormatDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetFormatDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.FormatDefinition) {
		return nil, false
	}
	return o.FormatDefinition, true
}

// HasFormatDefinition returns a boolean if a field has been set.
func (o *AddressFormatType) HasFormatDefinition() bool {
	if o != nil && !IsNil(o.FormatDefinition) {
		return true
	}

	return false
}

// SetFormatDefinition gets a reference to the given string and assigns it to the FormatDefinition field.
func (o *AddressFormatType) SetFormatDefinition(v string) {
	o.FormatDefinition = &v
}

// GetFormattedExample returns the FormattedExample field value if set, zero value otherwise.
func (o *AddressFormatType) GetFormattedExample() string {
	if o == nil || IsNil(o.FormattedExample) {
		var ret string
		return ret
	}
	return *o.FormattedExample
}

// GetFormattedExampleOk returns a tuple with the FormattedExample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetFormattedExampleOk() (*string, bool) {
	if o == nil || IsNil(o.FormattedExample) {
		return nil, false
	}
	return o.FormattedExample, true
}

// HasFormattedExample returns a boolean if a field has been set.
func (o *AddressFormatType) HasFormattedExample() bool {
	if o != nil && !IsNil(o.FormattedExample) {
		return true
	}

	return false
}

// SetFormattedExample gets a reference to the given string and assigns it to the FormattedExample field.
func (o *AddressFormatType) SetFormattedExample(v string) {
	o.FormattedExample = &v
}

// GetSalesFormat returns the SalesFormat field value if set, zero value otherwise.
func (o *AddressFormatType) GetSalesFormat() bool {
	if o == nil || IsNil(o.SalesFormat) {
		var ret bool
		return ret
	}
	return *o.SalesFormat
}

// GetSalesFormatOk returns a tuple with the SalesFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormatType) GetSalesFormatOk() (*bool, bool) {
	if o == nil || IsNil(o.SalesFormat) {
		return nil, false
	}
	return o.SalesFormat, true
}

// HasSalesFormat returns a boolean if a field has been set.
func (o *AddressFormatType) HasSalesFormat() bool {
	if o != nil && !IsNil(o.SalesFormat) {
		return true
	}

	return false
}

// SetSalesFormat gets a reference to the given bool and assigns it to the SalesFormat field.
func (o *AddressFormatType) SetSalesFormat(v bool) {
	o.SalesFormat = &v
}

func (o AddressFormatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressFormatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanDelete) {
		toSerialize["canDelete"] = o.CanDelete
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.FormatCode) {
		toSerialize["formatCode"] = o.FormatCode
	}
	if !IsNil(o.FormatDefinition) {
		toSerialize["formatDefinition"] = o.FormatDefinition
	}
	if !IsNil(o.FormattedExample) {
		toSerialize["formattedExample"] = o.FormattedExample
	}
	if !IsNil(o.SalesFormat) {
		toSerialize["salesFormat"] = o.SalesFormat
	}
	return toSerialize, nil
}

type NullableAddressFormatType struct {
	value *AddressFormatType
	isSet bool
}

func (v NullableAddressFormatType) Get() *AddressFormatType {
	return v.value
}

func (v *NullableAddressFormatType) Set(val *AddressFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressFormatType(val *AddressFormatType) *NullableAddressFormatType {
	return &NullableAddressFormatType{value: val, isSet: true}
}

func (v NullableAddressFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


