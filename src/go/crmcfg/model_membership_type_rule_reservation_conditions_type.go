/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeRuleReservationConditionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeRuleReservationConditionsType{}

// MembershipTypeRuleReservationConditionsType Membership Type Rules reservation conditions.
type MembershipTypeRuleReservationConditionsType struct {
	// Number of days from enrolment.
	DaysFromEnrollment *int32 `json:"daysFromEnrollment,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	// Maximum length of stay required to receive points if membership type is based on NIGHTS.
	MaximumNights *int32 `json:"maximumNights,omitempty"`
	// Minimum length of stay required to receive points if membership type is based on STAY.
	MinimumNights *int32 `json:"minimumNights,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	// Reservations with end date for which the rule is applied.
	ReservationEndDate *string `json:"reservationEndDate,omitempty"`
	// Reservations with start date for which the rule is applied.
	ReservationStartDate *string `json:"reservationStartDate,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
}

// NewMembershipTypeRuleReservationConditionsType instantiates a new MembershipTypeRuleReservationConditionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeRuleReservationConditionsType() *MembershipTypeRuleReservationConditionsType {
	this := MembershipTypeRuleReservationConditionsType{}
	return &this
}

// NewMembershipTypeRuleReservationConditionsTypeWithDefaults instantiates a new MembershipTypeRuleReservationConditionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeRuleReservationConditionsTypeWithDefaults() *MembershipTypeRuleReservationConditionsType {
	this := MembershipTypeRuleReservationConditionsType{}
	return &this
}

// GetDaysFromEnrollment returns the DaysFromEnrollment field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetDaysFromEnrollment() int32 {
	if o == nil || IsNil(o.DaysFromEnrollment) {
		var ret int32
		return ret
	}
	return *o.DaysFromEnrollment
}

// GetDaysFromEnrollmentOk returns a tuple with the DaysFromEnrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetDaysFromEnrollmentOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysFromEnrollment) {
		return nil, false
	}
	return o.DaysFromEnrollment, true
}

// HasDaysFromEnrollment returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasDaysFromEnrollment() bool {
	if o != nil && !IsNil(o.DaysFromEnrollment) {
		return true
	}

	return false
}

// SetDaysFromEnrollment gets a reference to the given int32 and assigns it to the DaysFromEnrollment field.
func (o *MembershipTypeRuleReservationConditionsType) SetDaysFromEnrollment(v int32) {
	o.DaysFromEnrollment = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *MembershipTypeRuleReservationConditionsType) SetFriday(v bool) {
	o.Friday = &v
}

// GetMaximumNights returns the MaximumNights field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetMaximumNights() int32 {
	if o == nil || IsNil(o.MaximumNights) {
		var ret int32
		return ret
	}
	return *o.MaximumNights
}

// GetMaximumNightsOk returns a tuple with the MaximumNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetMaximumNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumNights) {
		return nil, false
	}
	return o.MaximumNights, true
}

// HasMaximumNights returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasMaximumNights() bool {
	if o != nil && !IsNil(o.MaximumNights) {
		return true
	}

	return false
}

// SetMaximumNights gets a reference to the given int32 and assigns it to the MaximumNights field.
func (o *MembershipTypeRuleReservationConditionsType) SetMaximumNights(v int32) {
	o.MaximumNights = &v
}

// GetMinimumNights returns the MinimumNights field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetMinimumNights() int32 {
	if o == nil || IsNil(o.MinimumNights) {
		var ret int32
		return ret
	}
	return *o.MinimumNights
}

// GetMinimumNightsOk returns a tuple with the MinimumNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetMinimumNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumNights) {
		return nil, false
	}
	return o.MinimumNights, true
}

// HasMinimumNights returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasMinimumNights() bool {
	if o != nil && !IsNil(o.MinimumNights) {
		return true
	}

	return false
}

// SetMinimumNights gets a reference to the given int32 and assigns it to the MinimumNights field.
func (o *MembershipTypeRuleReservationConditionsType) SetMinimumNights(v int32) {
	o.MinimumNights = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *MembershipTypeRuleReservationConditionsType) SetMonday(v bool) {
	o.Monday = &v
}

// GetReservationEndDate returns the ReservationEndDate field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetReservationEndDate() string {
	if o == nil || IsNil(o.ReservationEndDate) {
		var ret string
		return ret
	}
	return *o.ReservationEndDate
}

// GetReservationEndDateOk returns a tuple with the ReservationEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetReservationEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationEndDate) {
		return nil, false
	}
	return o.ReservationEndDate, true
}

// HasReservationEndDate returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasReservationEndDate() bool {
	if o != nil && !IsNil(o.ReservationEndDate) {
		return true
	}

	return false
}

// SetReservationEndDate gets a reference to the given string and assigns it to the ReservationEndDate field.
func (o *MembershipTypeRuleReservationConditionsType) SetReservationEndDate(v string) {
	o.ReservationEndDate = &v
}

// GetReservationStartDate returns the ReservationStartDate field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetReservationStartDate() string {
	if o == nil || IsNil(o.ReservationStartDate) {
		var ret string
		return ret
	}
	return *o.ReservationStartDate
}

// GetReservationStartDateOk returns a tuple with the ReservationStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetReservationStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationStartDate) {
		return nil, false
	}
	return o.ReservationStartDate, true
}

// HasReservationStartDate returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasReservationStartDate() bool {
	if o != nil && !IsNil(o.ReservationStartDate) {
		return true
	}

	return false
}

// SetReservationStartDate gets a reference to the given string and assigns it to the ReservationStartDate field.
func (o *MembershipTypeRuleReservationConditionsType) SetReservationStartDate(v string) {
	o.ReservationStartDate = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *MembershipTypeRuleReservationConditionsType) SetSaturday(v bool) {
	o.Saturday = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *MembershipTypeRuleReservationConditionsType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *MembershipTypeRuleReservationConditionsType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *MembershipTypeRuleReservationConditionsType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *MembershipTypeRuleReservationConditionsType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleReservationConditionsType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *MembershipTypeRuleReservationConditionsType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *MembershipTypeRuleReservationConditionsType) SetWednesday(v bool) {
	o.Wednesday = &v
}

func (o MembershipTypeRuleReservationConditionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeRuleReservationConditionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaysFromEnrollment) {
		toSerialize["daysFromEnrollment"] = o.DaysFromEnrollment
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.MaximumNights) {
		toSerialize["maximumNights"] = o.MaximumNights
	}
	if !IsNil(o.MinimumNights) {
		toSerialize["minimumNights"] = o.MinimumNights
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.ReservationEndDate) {
		toSerialize["reservationEndDate"] = o.ReservationEndDate
	}
	if !IsNil(o.ReservationStartDate) {
		toSerialize["reservationStartDate"] = o.ReservationStartDate
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	return toSerialize, nil
}

type NullableMembershipTypeRuleReservationConditionsType struct {
	value *MembershipTypeRuleReservationConditionsType
	isSet bool
}

func (v NullableMembershipTypeRuleReservationConditionsType) Get() *MembershipTypeRuleReservationConditionsType {
	return v.value
}

func (v *NullableMembershipTypeRuleReservationConditionsType) Set(val *MembershipTypeRuleReservationConditionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeRuleReservationConditionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeRuleReservationConditionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeRuleReservationConditionsType(val *MembershipTypeRuleReservationConditionsType) *NullableMembershipTypeRuleReservationConditionsType {
	return &NullableMembershipTypeRuleReservationConditionsType{value: val, isSet: true}
}

func (v NullableMembershipTypeRuleReservationConditionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeRuleReservationConditionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


