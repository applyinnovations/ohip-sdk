/*
OPERA Cloud CRM Configuration API

Testing MembershipConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crmcfg"
)

func Test_crmcfg_MembershipConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MembershipConfigApiService DeleteMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipAwardsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipAwards(context.Background(), membershipAwardsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipBenefitProgramsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipBenefitPrograms(context.Background(), membershipBenefitProgramsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClassId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipClasses(context.Background(), membershipClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipEnrollmentGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipEnrollmentGroups(context.Background(), membershipEnrollmentGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevelsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipLevels(context.Background(), membershipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipMarketGroupId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipMarketGroups(context.Background(), membershipMarketGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipPropertyGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipPropertyGroups(context.Background(), membershipPropertyGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRateGroupId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipRateGroups(context.Background(), membershipRateGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipTypeRules(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService DeleteMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigApi.DeleteMembershipTypes(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipBenefitPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipEnrollmentGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipPropertyGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipRateGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipType(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipTypeRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipTypeRule(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipTypeRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService GetMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.GetMembershipTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipBenefitPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipEnrollmentGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipFolioTexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipFolioTexts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipPropertyGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipRateGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipTypeRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PostMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigApi.PostMembershipTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipAwardsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipAwards(context.Background(), membershipAwardsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipBenefitProgramsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipBenefitPrograms(context.Background(), membershipBenefitProgramsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClassId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipClasses(context.Background(), membershipClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipEnrollmentGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipEnrollmentGroups(context.Background(), membershipEnrollmentGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevelsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipLevels(context.Background(), membershipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipMarketGroupId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipMarketGroups(context.Background(), membershipMarketGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipPropertyGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipPropertyGroups(context.Background(), membershipPropertyGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRateGroupId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipRateGroups(context.Background(), membershipRateGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipType(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigApiService PutMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigApi.PutMembershipTypeRules(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
