/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the ConfigCopyPreferencesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigCopyPreferencesType{}

// ConfigCopyPreferencesType Copy instructions for copying template preferences to hotel(s)
type ConfigCopyPreferencesType struct {
	HotelCodes *CodeListType `json:"hotelCodes,omitempty"`
	// Template preference to be copied to the hotel(s).
	TemplatePreferences []ConfigTemplatePreferenceIDType `json:"templatePreferences,omitempty"`
}

// NewConfigCopyPreferencesType instantiates a new ConfigCopyPreferencesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigCopyPreferencesType() *ConfigCopyPreferencesType {
	this := ConfigCopyPreferencesType{}
	return &this
}

// NewConfigCopyPreferencesTypeWithDefaults instantiates a new ConfigCopyPreferencesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigCopyPreferencesTypeWithDefaults() *ConfigCopyPreferencesType {
	this := ConfigCopyPreferencesType{}
	return &this
}

// GetHotelCodes returns the HotelCodes field value if set, zero value otherwise.
func (o *ConfigCopyPreferencesType) GetHotelCodes() CodeListType {
	if o == nil || IsNil(o.HotelCodes) {
		var ret CodeListType
		return ret
	}
	return *o.HotelCodes
}

// GetHotelCodesOk returns a tuple with the HotelCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyPreferencesType) GetHotelCodesOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.HotelCodes) {
		return nil, false
	}
	return o.HotelCodes, true
}

// HasHotelCodes returns a boolean if a field has been set.
func (o *ConfigCopyPreferencesType) HasHotelCodes() bool {
	if o != nil && !IsNil(o.HotelCodes) {
		return true
	}

	return false
}

// SetHotelCodes gets a reference to the given CodeListType and assigns it to the HotelCodes field.
func (o *ConfigCopyPreferencesType) SetHotelCodes(v CodeListType) {
	o.HotelCodes = &v
}

// GetTemplatePreferences returns the TemplatePreferences field value if set, zero value otherwise.
func (o *ConfigCopyPreferencesType) GetTemplatePreferences() []ConfigTemplatePreferenceIDType {
	if o == nil || IsNil(o.TemplatePreferences) {
		var ret []ConfigTemplatePreferenceIDType
		return ret
	}
	return o.TemplatePreferences
}

// GetTemplatePreferencesOk returns a tuple with the TemplatePreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyPreferencesType) GetTemplatePreferencesOk() ([]ConfigTemplatePreferenceIDType, bool) {
	if o == nil || IsNil(o.TemplatePreferences) {
		return nil, false
	}
	return o.TemplatePreferences, true
}

// HasTemplatePreferences returns a boolean if a field has been set.
func (o *ConfigCopyPreferencesType) HasTemplatePreferences() bool {
	if o != nil && !IsNil(o.TemplatePreferences) {
		return true
	}

	return false
}

// SetTemplatePreferences gets a reference to the given []ConfigTemplatePreferenceIDType and assigns it to the TemplatePreferences field.
func (o *ConfigCopyPreferencesType) SetTemplatePreferences(v []ConfigTemplatePreferenceIDType) {
	o.TemplatePreferences = v
}

func (o ConfigCopyPreferencesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigCopyPreferencesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelCodes) {
		toSerialize["hotelCodes"] = o.HotelCodes
	}
	if !IsNil(o.TemplatePreferences) {
		toSerialize["templatePreferences"] = o.TemplatePreferences
	}
	return toSerialize, nil
}

type NullableConfigCopyPreferencesType struct {
	value *ConfigCopyPreferencesType
	isSet bool
}

func (v NullableConfigCopyPreferencesType) Get() *ConfigCopyPreferencesType {
	return v.value
}

func (v *NullableConfigCopyPreferencesType) Set(val *ConfigCopyPreferencesType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigCopyPreferencesType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigCopyPreferencesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigCopyPreferencesType(val *ConfigCopyPreferencesType) *NullableConfigCopyPreferencesType {
	return &NullableConfigCopyPreferencesType{value: val, isSet: true}
}

func (v NullableConfigCopyPreferencesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigCopyPreferencesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


