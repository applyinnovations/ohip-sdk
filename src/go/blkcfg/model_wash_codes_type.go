/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the WashCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WashCodesType{}

// WashCodesType Wash Code, which will allow the user to define standard schedules that can be attached to blocks prior to the block's cutoff date to automate this process.
type WashCodesType struct {
	Items []WashCodeType
}

// NewWashCodesType instantiates a new WashCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWashCodesType() *WashCodesType {
	this := WashCodesType{}
	return &this
}

// NewWashCodesTypeWithDefaults instantiates a new WashCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWashCodesTypeWithDefaults() *WashCodesType {
	this := WashCodesType{}
	return &this
}

func (o WashCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WashCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *WashCodesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableWashCodesType struct {
	value WashCodesType
	isSet bool
}

func (v NullableWashCodesType) Get() WashCodesType {
	return v.value
}

func (v *NullableWashCodesType) Set(val WashCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableWashCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableWashCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWashCodesType(val WashCodesType) *NullableWashCodesType {
	return &NullableWashCodesType{value: val, isSet: true}
}

func (v NullableWashCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWashCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


