/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the PostBlockCancellationReasonsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostBlockCancellationReasonsRequest{}

// PostBlockCancellationReasonsRequest struct for PostBlockCancellationReasonsRequest
type PostBlockCancellationReasonsRequest struct {
	BlockCancellationReasons *BlockCancellationReasonsType `json:"blockCancellationReasons,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostBlockCancellationReasonsRequest instantiates a new PostBlockCancellationReasonsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostBlockCancellationReasonsRequest() *PostBlockCancellationReasonsRequest {
	this := PostBlockCancellationReasonsRequest{}
	return &this
}

// NewPostBlockCancellationReasonsRequestWithDefaults instantiates a new PostBlockCancellationReasonsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostBlockCancellationReasonsRequestWithDefaults() *PostBlockCancellationReasonsRequest {
	this := PostBlockCancellationReasonsRequest{}
	return &this
}

// GetBlockCancellationReasons returns the BlockCancellationReasons field value if set, zero value otherwise.
func (o *PostBlockCancellationReasonsRequest) GetBlockCancellationReasons() BlockCancellationReasonsType {
	if o == nil || IsNil(o.BlockCancellationReasons) {
		var ret BlockCancellationReasonsType
		return ret
	}
	return *o.BlockCancellationReasons
}

// GetBlockCancellationReasonsOk returns a tuple with the BlockCancellationReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostBlockCancellationReasonsRequest) GetBlockCancellationReasonsOk() (*BlockCancellationReasonsType, bool) {
	if o == nil || IsNil(o.BlockCancellationReasons) {
		return nil, false
	}
	return o.BlockCancellationReasons, true
}

// HasBlockCancellationReasons returns a boolean if a field has been set.
func (o *PostBlockCancellationReasonsRequest) HasBlockCancellationReasons() bool {
	if o != nil && !IsNil(o.BlockCancellationReasons) {
		return true
	}

	return false
}

// SetBlockCancellationReasons gets a reference to the given BlockCancellationReasonsType and assigns it to the BlockCancellationReasons field.
func (o *PostBlockCancellationReasonsRequest) SetBlockCancellationReasons(v BlockCancellationReasonsType) {
	o.BlockCancellationReasons = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostBlockCancellationReasonsRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostBlockCancellationReasonsRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostBlockCancellationReasonsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostBlockCancellationReasonsRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostBlockCancellationReasonsRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostBlockCancellationReasonsRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostBlockCancellationReasonsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostBlockCancellationReasonsRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostBlockCancellationReasonsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostBlockCancellationReasonsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockCancellationReasons) {
		toSerialize["blockCancellationReasons"] = o.BlockCancellationReasons
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostBlockCancellationReasonsRequest struct {
	value *PostBlockCancellationReasonsRequest
	isSet bool
}

func (v NullablePostBlockCancellationReasonsRequest) Get() *PostBlockCancellationReasonsRequest {
	return v.value
}

func (v *NullablePostBlockCancellationReasonsRequest) Set(val *PostBlockCancellationReasonsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostBlockCancellationReasonsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostBlockCancellationReasonsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostBlockCancellationReasonsRequest(val *PostBlockCancellationReasonsRequest) *NullablePostBlockCancellationReasonsRequest {
	return &NullablePostBlockCancellationReasonsRequest{value: val, isSet: true}
}

func (v NullablePostBlockCancellationReasonsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostBlockCancellationReasonsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


