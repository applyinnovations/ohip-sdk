/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the SalesManagerGoalType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesManagerGoalType{}

// SalesManagerGoalType Detail Information about Sales Manager's goal.
type SalesManagerGoalType struct {
	// Specifies the number of activities of Activity Type being set as a goal
	ActivitiesCount *int32 `json:"activitiesCount,omitempty"`
	// Indicates if the Sales manager has Activity Goal
	Activity *bool `json:"activity,omitempty"`
	// Specifies the type of activity being set as a goal
	ActivityType *string `json:"activityType,omitempty"`
	// Specifies the Arrival End Date
	ArrivalEndDate *string `json:"arrivalEndDate,omitempty"`
	// Specifies if this is a Arrival or a Production Goal
	ArrivalGoal *bool `json:"arrivalGoal,omitempty"`
	// Specifies the Arrival Period Code
	ArrivalPeriodCode *string `json:"arrivalPeriodCode,omitempty"`
	// Specifies the Arrival Start Date
	ArrivalStartDate *string `json:"arrivalStartDate,omitempty"`
	AverageFBCheck *CurrencyAmountType `json:"averageFBCheck,omitempty"`
	AverageRate *CurrencyAmountType `json:"averageRate,omitempty"`
	// Number of meals or covers assigned for the Goal
	CateringCovers *int32 `json:"cateringCovers,omitempty"`
	FBRevenue *CurrencyAmountType `json:"fBRevenue,omitempty"`
	// Use this indicator to fetch goal's having Production From or Arrival From dates later than the current business date or quarter
	Future *bool `json:"future,omitempty"`
	GoalID *UniqueIDType `json:"goalID,omitempty"`
	// Specifies the Goal Type
	GoalType *string `json:"goalType,omitempty"`
	// Goal type used to fetch goals related to Group Rooms and Catering business
	GroupRoomsWithCatering *bool `json:"groupRoomsWithCatering,omitempty"`
	// Hotel Code of the Sales Manager
	HotelId *string `json:"hotelId,omitempty"`
	// Market Code assigned for the goal
	MarketCode *string `json:"marketCode,omitempty"`
	NameId *UniqueIDType `json:"nameId,omitempty"`
	OtherRevenue *CurrencyAmountType `json:"otherRevenue,omitempty"`
	// Specifies the Production End Date
	ProductionEndDate *string `json:"productionEndDate,omitempty"`
	// Specifies the Production Period Code
	ProductionPeriodCode *string `json:"productionPeriodCode,omitempty"`
	// Specifies the Production Start Date
	ProductionStartDate *string `json:"productionStartDate,omitempty"`
	// Room Nights assigned for the goal
	RoomNights *int32 `json:"roomNights,omitempty"`
	RoomRevenue *CurrencyAmountType `json:"roomRevenue,omitempty"`
	// Goal type used to fetch non group goals related to Rooms business
	TransientRoom *bool `json:"transientRoom,omitempty"`
}

// NewSalesManagerGoalType instantiates a new SalesManagerGoalType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesManagerGoalType() *SalesManagerGoalType {
	this := SalesManagerGoalType{}
	return &this
}

// NewSalesManagerGoalTypeWithDefaults instantiates a new SalesManagerGoalType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesManagerGoalTypeWithDefaults() *SalesManagerGoalType {
	this := SalesManagerGoalType{}
	return &this
}

// GetActivitiesCount returns the ActivitiesCount field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetActivitiesCount() int32 {
	if o == nil || IsNil(o.ActivitiesCount) {
		var ret int32
		return ret
	}
	return *o.ActivitiesCount
}

// GetActivitiesCountOk returns a tuple with the ActivitiesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetActivitiesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ActivitiesCount) {
		return nil, false
	}
	return o.ActivitiesCount, true
}

// HasActivitiesCount returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasActivitiesCount() bool {
	if o != nil && !IsNil(o.ActivitiesCount) {
		return true
	}

	return false
}

// SetActivitiesCount gets a reference to the given int32 and assigns it to the ActivitiesCount field.
func (o *SalesManagerGoalType) SetActivitiesCount(v int32) {
	o.ActivitiesCount = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetActivity() bool {
	if o == nil || IsNil(o.Activity) {
		var ret bool
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given bool and assigns it to the Activity field.
func (o *SalesManagerGoalType) SetActivity(v bool) {
	o.Activity = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType) {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetActivityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *SalesManagerGoalType) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetArrivalEndDate returns the ArrivalEndDate field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetArrivalEndDate() string {
	if o == nil || IsNil(o.ArrivalEndDate) {
		var ret string
		return ret
	}
	return *o.ArrivalEndDate
}

// GetArrivalEndDateOk returns a tuple with the ArrivalEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetArrivalEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalEndDate) {
		return nil, false
	}
	return o.ArrivalEndDate, true
}

// HasArrivalEndDate returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasArrivalEndDate() bool {
	if o != nil && !IsNil(o.ArrivalEndDate) {
		return true
	}

	return false
}

// SetArrivalEndDate gets a reference to the given string and assigns it to the ArrivalEndDate field.
func (o *SalesManagerGoalType) SetArrivalEndDate(v string) {
	o.ArrivalEndDate = &v
}

// GetArrivalGoal returns the ArrivalGoal field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetArrivalGoal() bool {
	if o == nil || IsNil(o.ArrivalGoal) {
		var ret bool
		return ret
	}
	return *o.ArrivalGoal
}

// GetArrivalGoalOk returns a tuple with the ArrivalGoal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetArrivalGoalOk() (*bool, bool) {
	if o == nil || IsNil(o.ArrivalGoal) {
		return nil, false
	}
	return o.ArrivalGoal, true
}

// HasArrivalGoal returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasArrivalGoal() bool {
	if o != nil && !IsNil(o.ArrivalGoal) {
		return true
	}

	return false
}

// SetArrivalGoal gets a reference to the given bool and assigns it to the ArrivalGoal field.
func (o *SalesManagerGoalType) SetArrivalGoal(v bool) {
	o.ArrivalGoal = &v
}

// GetArrivalPeriodCode returns the ArrivalPeriodCode field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetArrivalPeriodCode() string {
	if o == nil || IsNil(o.ArrivalPeriodCode) {
		var ret string
		return ret
	}
	return *o.ArrivalPeriodCode
}

// GetArrivalPeriodCodeOk returns a tuple with the ArrivalPeriodCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetArrivalPeriodCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalPeriodCode) {
		return nil, false
	}
	return o.ArrivalPeriodCode, true
}

// HasArrivalPeriodCode returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasArrivalPeriodCode() bool {
	if o != nil && !IsNil(o.ArrivalPeriodCode) {
		return true
	}

	return false
}

// SetArrivalPeriodCode gets a reference to the given string and assigns it to the ArrivalPeriodCode field.
func (o *SalesManagerGoalType) SetArrivalPeriodCode(v string) {
	o.ArrivalPeriodCode = &v
}

// GetArrivalStartDate returns the ArrivalStartDate field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetArrivalStartDate() string {
	if o == nil || IsNil(o.ArrivalStartDate) {
		var ret string
		return ret
	}
	return *o.ArrivalStartDate
}

// GetArrivalStartDateOk returns a tuple with the ArrivalStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetArrivalStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalStartDate) {
		return nil, false
	}
	return o.ArrivalStartDate, true
}

// HasArrivalStartDate returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasArrivalStartDate() bool {
	if o != nil && !IsNil(o.ArrivalStartDate) {
		return true
	}

	return false
}

// SetArrivalStartDate gets a reference to the given string and assigns it to the ArrivalStartDate field.
func (o *SalesManagerGoalType) SetArrivalStartDate(v string) {
	o.ArrivalStartDate = &v
}

// GetAverageFBCheck returns the AverageFBCheck field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetAverageFBCheck() CurrencyAmountType {
	if o == nil || IsNil(o.AverageFBCheck) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AverageFBCheck
}

// GetAverageFBCheckOk returns a tuple with the AverageFBCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetAverageFBCheckOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AverageFBCheck) {
		return nil, false
	}
	return o.AverageFBCheck, true
}

// HasAverageFBCheck returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasAverageFBCheck() bool {
	if o != nil && !IsNil(o.AverageFBCheck) {
		return true
	}

	return false
}

// SetAverageFBCheck gets a reference to the given CurrencyAmountType and assigns it to the AverageFBCheck field.
func (o *SalesManagerGoalType) SetAverageFBCheck(v CurrencyAmountType) {
	o.AverageFBCheck = &v
}

// GetAverageRate returns the AverageRate field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetAverageRate() CurrencyAmountType {
	if o == nil || IsNil(o.AverageRate) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AverageRate
}

// GetAverageRateOk returns a tuple with the AverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetAverageRateOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AverageRate) {
		return nil, false
	}
	return o.AverageRate, true
}

// HasAverageRate returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasAverageRate() bool {
	if o != nil && !IsNil(o.AverageRate) {
		return true
	}

	return false
}

// SetAverageRate gets a reference to the given CurrencyAmountType and assigns it to the AverageRate field.
func (o *SalesManagerGoalType) SetAverageRate(v CurrencyAmountType) {
	o.AverageRate = &v
}

// GetCateringCovers returns the CateringCovers field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetCateringCovers() int32 {
	if o == nil || IsNil(o.CateringCovers) {
		var ret int32
		return ret
	}
	return *o.CateringCovers
}

// GetCateringCoversOk returns a tuple with the CateringCovers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetCateringCoversOk() (*int32, bool) {
	if o == nil || IsNil(o.CateringCovers) {
		return nil, false
	}
	return o.CateringCovers, true
}

// HasCateringCovers returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasCateringCovers() bool {
	if o != nil && !IsNil(o.CateringCovers) {
		return true
	}

	return false
}

// SetCateringCovers gets a reference to the given int32 and assigns it to the CateringCovers field.
func (o *SalesManagerGoalType) SetCateringCovers(v int32) {
	o.CateringCovers = &v
}

// GetFBRevenue returns the FBRevenue field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetFBRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.FBRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.FBRevenue
}

// GetFBRevenueOk returns a tuple with the FBRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetFBRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.FBRevenue) {
		return nil, false
	}
	return o.FBRevenue, true
}

// HasFBRevenue returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasFBRevenue() bool {
	if o != nil && !IsNil(o.FBRevenue) {
		return true
	}

	return false
}

// SetFBRevenue gets a reference to the given CurrencyAmountType and assigns it to the FBRevenue field.
func (o *SalesManagerGoalType) SetFBRevenue(v CurrencyAmountType) {
	o.FBRevenue = &v
}

// GetFuture returns the Future field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetFuture() bool {
	if o == nil || IsNil(o.Future) {
		var ret bool
		return ret
	}
	return *o.Future
}

// GetFutureOk returns a tuple with the Future field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetFutureOk() (*bool, bool) {
	if o == nil || IsNil(o.Future) {
		return nil, false
	}
	return o.Future, true
}

// HasFuture returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasFuture() bool {
	if o != nil && !IsNil(o.Future) {
		return true
	}

	return false
}

// SetFuture gets a reference to the given bool and assigns it to the Future field.
func (o *SalesManagerGoalType) SetFuture(v bool) {
	o.Future = &v
}

// GetGoalID returns the GoalID field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetGoalID() UniqueIDType {
	if o == nil || IsNil(o.GoalID) {
		var ret UniqueIDType
		return ret
	}
	return *o.GoalID
}

// GetGoalIDOk returns a tuple with the GoalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetGoalIDOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.GoalID) {
		return nil, false
	}
	return o.GoalID, true
}

// HasGoalID returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasGoalID() bool {
	if o != nil && !IsNil(o.GoalID) {
		return true
	}

	return false
}

// SetGoalID gets a reference to the given UniqueIDType and assigns it to the GoalID field.
func (o *SalesManagerGoalType) SetGoalID(v UniqueIDType) {
	o.GoalID = &v
}

// GetGoalType returns the GoalType field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetGoalType() string {
	if o == nil || IsNil(o.GoalType) {
		var ret string
		return ret
	}
	return *o.GoalType
}

// GetGoalTypeOk returns a tuple with the GoalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetGoalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GoalType) {
		return nil, false
	}
	return o.GoalType, true
}

// HasGoalType returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasGoalType() bool {
	if o != nil && !IsNil(o.GoalType) {
		return true
	}

	return false
}

// SetGoalType gets a reference to the given string and assigns it to the GoalType field.
func (o *SalesManagerGoalType) SetGoalType(v string) {
	o.GoalType = &v
}

// GetGroupRoomsWithCatering returns the GroupRoomsWithCatering field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetGroupRoomsWithCatering() bool {
	if o == nil || IsNil(o.GroupRoomsWithCatering) {
		var ret bool
		return ret
	}
	return *o.GroupRoomsWithCatering
}

// GetGroupRoomsWithCateringOk returns a tuple with the GroupRoomsWithCatering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetGroupRoomsWithCateringOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupRoomsWithCatering) {
		return nil, false
	}
	return o.GroupRoomsWithCatering, true
}

// HasGroupRoomsWithCatering returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasGroupRoomsWithCatering() bool {
	if o != nil && !IsNil(o.GroupRoomsWithCatering) {
		return true
	}

	return false
}

// SetGroupRoomsWithCatering gets a reference to the given bool and assigns it to the GroupRoomsWithCatering field.
func (o *SalesManagerGoalType) SetGroupRoomsWithCatering(v bool) {
	o.GroupRoomsWithCatering = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SalesManagerGoalType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *SalesManagerGoalType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetNameId() UniqueIDType {
	if o == nil || IsNil(o.NameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasNameId() bool {
	if o != nil && !IsNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given UniqueIDType and assigns it to the NameId field.
func (o *SalesManagerGoalType) SetNameId(v UniqueIDType) {
	o.NameId = &v
}

// GetOtherRevenue returns the OtherRevenue field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetOtherRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.OtherRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.OtherRevenue
}

// GetOtherRevenueOk returns a tuple with the OtherRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetOtherRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.OtherRevenue) {
		return nil, false
	}
	return o.OtherRevenue, true
}

// HasOtherRevenue returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasOtherRevenue() bool {
	if o != nil && !IsNil(o.OtherRevenue) {
		return true
	}

	return false
}

// SetOtherRevenue gets a reference to the given CurrencyAmountType and assigns it to the OtherRevenue field.
func (o *SalesManagerGoalType) SetOtherRevenue(v CurrencyAmountType) {
	o.OtherRevenue = &v
}

// GetProductionEndDate returns the ProductionEndDate field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetProductionEndDate() string {
	if o == nil || IsNil(o.ProductionEndDate) {
		var ret string
		return ret
	}
	return *o.ProductionEndDate
}

// GetProductionEndDateOk returns a tuple with the ProductionEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetProductionEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ProductionEndDate) {
		return nil, false
	}
	return o.ProductionEndDate, true
}

// HasProductionEndDate returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasProductionEndDate() bool {
	if o != nil && !IsNil(o.ProductionEndDate) {
		return true
	}

	return false
}

// SetProductionEndDate gets a reference to the given string and assigns it to the ProductionEndDate field.
func (o *SalesManagerGoalType) SetProductionEndDate(v string) {
	o.ProductionEndDate = &v
}

// GetProductionPeriodCode returns the ProductionPeriodCode field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetProductionPeriodCode() string {
	if o == nil || IsNil(o.ProductionPeriodCode) {
		var ret string
		return ret
	}
	return *o.ProductionPeriodCode
}

// GetProductionPeriodCodeOk returns a tuple with the ProductionPeriodCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetProductionPeriodCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductionPeriodCode) {
		return nil, false
	}
	return o.ProductionPeriodCode, true
}

// HasProductionPeriodCode returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasProductionPeriodCode() bool {
	if o != nil && !IsNil(o.ProductionPeriodCode) {
		return true
	}

	return false
}

// SetProductionPeriodCode gets a reference to the given string and assigns it to the ProductionPeriodCode field.
func (o *SalesManagerGoalType) SetProductionPeriodCode(v string) {
	o.ProductionPeriodCode = &v
}

// GetProductionStartDate returns the ProductionStartDate field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetProductionStartDate() string {
	if o == nil || IsNil(o.ProductionStartDate) {
		var ret string
		return ret
	}
	return *o.ProductionStartDate
}

// GetProductionStartDateOk returns a tuple with the ProductionStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetProductionStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ProductionStartDate) {
		return nil, false
	}
	return o.ProductionStartDate, true
}

// HasProductionStartDate returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasProductionStartDate() bool {
	if o != nil && !IsNil(o.ProductionStartDate) {
		return true
	}

	return false
}

// SetProductionStartDate gets a reference to the given string and assigns it to the ProductionStartDate field.
func (o *SalesManagerGoalType) SetProductionStartDate(v string) {
	o.ProductionStartDate = &v
}

// GetRoomNights returns the RoomNights field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetRoomNights() int32 {
	if o == nil || IsNil(o.RoomNights) {
		var ret int32
		return ret
	}
	return *o.RoomNights
}

// GetRoomNightsOk returns a tuple with the RoomNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetRoomNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomNights) {
		return nil, false
	}
	return o.RoomNights, true
}

// HasRoomNights returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasRoomNights() bool {
	if o != nil && !IsNil(o.RoomNights) {
		return true
	}

	return false
}

// SetRoomNights gets a reference to the given int32 and assigns it to the RoomNights field.
func (o *SalesManagerGoalType) SetRoomNights(v int32) {
	o.RoomNights = &v
}

// GetRoomRevenue returns the RoomRevenue field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetRoomRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.RoomRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RoomRevenue
}

// GetRoomRevenueOk returns a tuple with the RoomRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetRoomRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RoomRevenue) {
		return nil, false
	}
	return o.RoomRevenue, true
}

// HasRoomRevenue returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasRoomRevenue() bool {
	if o != nil && !IsNil(o.RoomRevenue) {
		return true
	}

	return false
}

// SetRoomRevenue gets a reference to the given CurrencyAmountType and assigns it to the RoomRevenue field.
func (o *SalesManagerGoalType) SetRoomRevenue(v CurrencyAmountType) {
	o.RoomRevenue = &v
}

// GetTransientRoom returns the TransientRoom field value if set, zero value otherwise.
func (o *SalesManagerGoalType) GetTransientRoom() bool {
	if o == nil || IsNil(o.TransientRoom) {
		var ret bool
		return ret
	}
	return *o.TransientRoom
}

// GetTransientRoomOk returns a tuple with the TransientRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerGoalType) GetTransientRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.TransientRoom) {
		return nil, false
	}
	return o.TransientRoom, true
}

// HasTransientRoom returns a boolean if a field has been set.
func (o *SalesManagerGoalType) HasTransientRoom() bool {
	if o != nil && !IsNil(o.TransientRoom) {
		return true
	}

	return false
}

// SetTransientRoom gets a reference to the given bool and assigns it to the TransientRoom field.
func (o *SalesManagerGoalType) SetTransientRoom(v bool) {
	o.TransientRoom = &v
}

func (o SalesManagerGoalType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesManagerGoalType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivitiesCount) {
		toSerialize["activitiesCount"] = o.ActivitiesCount
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.ArrivalEndDate) {
		toSerialize["arrivalEndDate"] = o.ArrivalEndDate
	}
	if !IsNil(o.ArrivalGoal) {
		toSerialize["arrivalGoal"] = o.ArrivalGoal
	}
	if !IsNil(o.ArrivalPeriodCode) {
		toSerialize["arrivalPeriodCode"] = o.ArrivalPeriodCode
	}
	if !IsNil(o.ArrivalStartDate) {
		toSerialize["arrivalStartDate"] = o.ArrivalStartDate
	}
	if !IsNil(o.AverageFBCheck) {
		toSerialize["averageFBCheck"] = o.AverageFBCheck
	}
	if !IsNil(o.AverageRate) {
		toSerialize["averageRate"] = o.AverageRate
	}
	if !IsNil(o.CateringCovers) {
		toSerialize["cateringCovers"] = o.CateringCovers
	}
	if !IsNil(o.FBRevenue) {
		toSerialize["fBRevenue"] = o.FBRevenue
	}
	if !IsNil(o.Future) {
		toSerialize["future"] = o.Future
	}
	if !IsNil(o.GoalID) {
		toSerialize["goalID"] = o.GoalID
	}
	if !IsNil(o.GoalType) {
		toSerialize["goalType"] = o.GoalType
	}
	if !IsNil(o.GroupRoomsWithCatering) {
		toSerialize["groupRoomsWithCatering"] = o.GroupRoomsWithCatering
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !IsNil(o.OtherRevenue) {
		toSerialize["otherRevenue"] = o.OtherRevenue
	}
	if !IsNil(o.ProductionEndDate) {
		toSerialize["productionEndDate"] = o.ProductionEndDate
	}
	if !IsNil(o.ProductionPeriodCode) {
		toSerialize["productionPeriodCode"] = o.ProductionPeriodCode
	}
	if !IsNil(o.ProductionStartDate) {
		toSerialize["productionStartDate"] = o.ProductionStartDate
	}
	if !IsNil(o.RoomNights) {
		toSerialize["roomNights"] = o.RoomNights
	}
	if !IsNil(o.RoomRevenue) {
		toSerialize["roomRevenue"] = o.RoomRevenue
	}
	if !IsNil(o.TransientRoom) {
		toSerialize["transientRoom"] = o.TransientRoom
	}
	return toSerialize, nil
}

type NullableSalesManagerGoalType struct {
	value *SalesManagerGoalType
	isSet bool
}

func (v NullableSalesManagerGoalType) Get() *SalesManagerGoalType {
	return v.value
}

func (v *NullableSalesManagerGoalType) Set(val *SalesManagerGoalType) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesManagerGoalType) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesManagerGoalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesManagerGoalType(val *SalesManagerGoalType) *NullableSalesManagerGoalType {
	return &NullableSalesManagerGoalType{value: val, isSet: true}
}

func (v NullableSalesManagerGoalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesManagerGoalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


