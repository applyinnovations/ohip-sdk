/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the BlockRefusedReasonsToBeChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRefusedReasonsToBeChanged{}

// BlockRefusedReasonsToBeChanged Request object for changing Block Refused Reasons.
type BlockRefusedReasonsToBeChanged struct {
	BlockRefusedReasons *BlockRefusedReasonsType `json:"blockRefusedReasons,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewBlockRefusedReasonsToBeChanged instantiates a new BlockRefusedReasonsToBeChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRefusedReasonsToBeChanged() *BlockRefusedReasonsToBeChanged {
	this := BlockRefusedReasonsToBeChanged{}
	return &this
}

// NewBlockRefusedReasonsToBeChangedWithDefaults instantiates a new BlockRefusedReasonsToBeChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRefusedReasonsToBeChangedWithDefaults() *BlockRefusedReasonsToBeChanged {
	this := BlockRefusedReasonsToBeChanged{}
	return &this
}

// GetBlockRefusedReasons returns the BlockRefusedReasons field value if set, zero value otherwise.
func (o *BlockRefusedReasonsToBeChanged) GetBlockRefusedReasons() BlockRefusedReasonsType {
	if o == nil || IsNil(o.BlockRefusedReasons) {
		var ret BlockRefusedReasonsType
		return ret
	}
	return *o.BlockRefusedReasons
}

// GetBlockRefusedReasonsOk returns a tuple with the BlockRefusedReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRefusedReasonsToBeChanged) GetBlockRefusedReasonsOk() (*BlockRefusedReasonsType, bool) {
	if o == nil || IsNil(o.BlockRefusedReasons) {
		return nil, false
	}
	return o.BlockRefusedReasons, true
}

// HasBlockRefusedReasons returns a boolean if a field has been set.
func (o *BlockRefusedReasonsToBeChanged) HasBlockRefusedReasons() bool {
	if o != nil && !IsNil(o.BlockRefusedReasons) {
		return true
	}

	return false
}

// SetBlockRefusedReasons gets a reference to the given BlockRefusedReasonsType and assigns it to the BlockRefusedReasons field.
func (o *BlockRefusedReasonsToBeChanged) SetBlockRefusedReasons(v BlockRefusedReasonsType) {
	o.BlockRefusedReasons = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlockRefusedReasonsToBeChanged) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRefusedReasonsToBeChanged) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlockRefusedReasonsToBeChanged) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *BlockRefusedReasonsToBeChanged) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BlockRefusedReasonsToBeChanged) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRefusedReasonsToBeChanged) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BlockRefusedReasonsToBeChanged) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *BlockRefusedReasonsToBeChanged) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o BlockRefusedReasonsToBeChanged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRefusedReasonsToBeChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockRefusedReasons) {
		toSerialize["blockRefusedReasons"] = o.BlockRefusedReasons
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBlockRefusedReasonsToBeChanged struct {
	value *BlockRefusedReasonsToBeChanged
	isSet bool
}

func (v NullableBlockRefusedReasonsToBeChanged) Get() *BlockRefusedReasonsToBeChanged {
	return v.value
}

func (v *NullableBlockRefusedReasonsToBeChanged) Set(val *BlockRefusedReasonsToBeChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRefusedReasonsToBeChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRefusedReasonsToBeChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRefusedReasonsToBeChanged(val *BlockRefusedReasonsToBeChanged) *NullableBlockRefusedReasonsToBeChanged {
	return &NullableBlockRefusedReasonsToBeChanged{value: val, isSet: true}
}

func (v NullableBlockRefusedReasonsToBeChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRefusedReasonsToBeChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


