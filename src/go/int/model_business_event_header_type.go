/*
OPERA Cloud Integration Processor API

APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package int

import (
	"encoding/json"
)

// checks if the BusinessEventHeaderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessEventHeaderType{}

// BusinessEventHeaderType struct for BusinessEventHeaderType
type BusinessEventHeaderType struct {
	// Unique action instance id of the business event, uniqueness is guaranteed intra-module only.
	ActionId *float32 `json:"actionId,omitempty"`
	// Business event action type, such as new reservation, update profile, etc.
	ActionType *string `json:"actionType,omitempty"`
	// Timestamp of the business event.
	CreatedDateTime *string `json:"createdDateTime,omitempty"`
	// The property this business event is associated with.
	HotelId *string `json:"hotelId,omitempty"`
	ModuleName *BusinessEventModuleType `json:"moduleName,omitempty"`
	// Action instance id of the parent business event, if the action triggered this event was a side effect of another action.
	ParentActionId *float32 `json:"parentActionId,omitempty"`
	// Primary key value of the business event, such as resv name id, allotment header id, name id etc.
	PrimaryKey *string `json:"primaryKey,omitempty"`
	// Internal id of the application or system user that triggered this event.
	PublisherId *float32 `json:"publisherId,omitempty"`
}

// NewBusinessEventHeaderType instantiates a new BusinessEventHeaderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessEventHeaderType() *BusinessEventHeaderType {
	this := BusinessEventHeaderType{}
	return &this
}

// NewBusinessEventHeaderTypeWithDefaults instantiates a new BusinessEventHeaderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessEventHeaderTypeWithDefaults() *BusinessEventHeaderType {
	this := BusinessEventHeaderType{}
	return &this
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetActionId() float32 {
	if o == nil || IsNil(o.ActionId) {
		var ret float32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetActionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given float32 and assigns it to the ActionId field.
func (o *BusinessEventHeaderType) SetActionId(v float32) {
	o.ActionId = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *BusinessEventHeaderType) SetActionType(v string) {
	o.ActionType = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetCreatedDateTime() string {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret string
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetCreatedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given string and assigns it to the CreatedDateTime field.
func (o *BusinessEventHeaderType) SetCreatedDateTime(v string) {
	o.CreatedDateTime = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BusinessEventHeaderType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetModuleName returns the ModuleName field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetModuleName() BusinessEventModuleType {
	if o == nil || IsNil(o.ModuleName) {
		var ret BusinessEventModuleType
		return ret
	}
	return *o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetModuleNameOk() (*BusinessEventModuleType, bool) {
	if o == nil || IsNil(o.ModuleName) {
		return nil, false
	}
	return o.ModuleName, true
}

// HasModuleName returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasModuleName() bool {
	if o != nil && !IsNil(o.ModuleName) {
		return true
	}

	return false
}

// SetModuleName gets a reference to the given BusinessEventModuleType and assigns it to the ModuleName field.
func (o *BusinessEventHeaderType) SetModuleName(v BusinessEventModuleType) {
	o.ModuleName = &v
}

// GetParentActionId returns the ParentActionId field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetParentActionId() float32 {
	if o == nil || IsNil(o.ParentActionId) {
		var ret float32
		return ret
	}
	return *o.ParentActionId
}

// GetParentActionIdOk returns a tuple with the ParentActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetParentActionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ParentActionId) {
		return nil, false
	}
	return o.ParentActionId, true
}

// HasParentActionId returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasParentActionId() bool {
	if o != nil && !IsNil(o.ParentActionId) {
		return true
	}

	return false
}

// SetParentActionId gets a reference to the given float32 and assigns it to the ParentActionId field.
func (o *BusinessEventHeaderType) SetParentActionId(v float32) {
	o.ParentActionId = &v
}

// GetPrimaryKey returns the PrimaryKey field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetPrimaryKey() string {
	if o == nil || IsNil(o.PrimaryKey) {
		var ret string
		return ret
	}
	return *o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetPrimaryKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryKey) {
		return nil, false
	}
	return o.PrimaryKey, true
}

// HasPrimaryKey returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasPrimaryKey() bool {
	if o != nil && !IsNil(o.PrimaryKey) {
		return true
	}

	return false
}

// SetPrimaryKey gets a reference to the given string and assigns it to the PrimaryKey field.
func (o *BusinessEventHeaderType) SetPrimaryKey(v string) {
	o.PrimaryKey = &v
}

// GetPublisherId returns the PublisherId field value if set, zero value otherwise.
func (o *BusinessEventHeaderType) GetPublisherId() float32 {
	if o == nil || IsNil(o.PublisherId) {
		var ret float32
		return ret
	}
	return *o.PublisherId
}

// GetPublisherIdOk returns a tuple with the PublisherId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventHeaderType) GetPublisherIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PublisherId) {
		return nil, false
	}
	return o.PublisherId, true
}

// HasPublisherId returns a boolean if a field has been set.
func (o *BusinessEventHeaderType) HasPublisherId() bool {
	if o != nil && !IsNil(o.PublisherId) {
		return true
	}

	return false
}

// SetPublisherId gets a reference to the given float32 and assigns it to the PublisherId field.
func (o *BusinessEventHeaderType) SetPublisherId(v float32) {
	o.PublisherId = &v
}

func (o BusinessEventHeaderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessEventHeaderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ModuleName) {
		toSerialize["moduleName"] = o.ModuleName
	}
	if !IsNil(o.ParentActionId) {
		toSerialize["parentActionId"] = o.ParentActionId
	}
	if !IsNil(o.PrimaryKey) {
		toSerialize["primaryKey"] = o.PrimaryKey
	}
	if !IsNil(o.PublisherId) {
		toSerialize["publisherId"] = o.PublisherId
	}
	return toSerialize, nil
}

type NullableBusinessEventHeaderType struct {
	value *BusinessEventHeaderType
	isSet bool
}

func (v NullableBusinessEventHeaderType) Get() *BusinessEventHeaderType {
	return v.value
}

func (v *NullableBusinessEventHeaderType) Set(val *BusinessEventHeaderType) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessEventHeaderType) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessEventHeaderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessEventHeaderType(val *BusinessEventHeaderType) *NullableBusinessEventHeaderType {
	return &NullableBusinessEventHeaderType{value: val, isSet: true}
}

func (v NullableBusinessEventHeaderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessEventHeaderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


