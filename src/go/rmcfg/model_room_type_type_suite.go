/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomTypeTypeSuite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypeTypeSuite{}

// RoomTypeTypeSuite Indicates room type is a suite.
type RoomTypeTypeSuite struct {
	// Indicates if room type Room Components may be changed.
	Editable *bool `json:"editable,omitempty"`
	// Property Value
	Value *bool `json:"value,omitempty"`
}

// NewRoomTypeTypeSuite instantiates a new RoomTypeTypeSuite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypeTypeSuite() *RoomTypeTypeSuite {
	this := RoomTypeTypeSuite{}
	return &this
}

// NewRoomTypeTypeSuiteWithDefaults instantiates a new RoomTypeTypeSuite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypeTypeSuiteWithDefaults() *RoomTypeTypeSuite {
	this := RoomTypeTypeSuite{}
	return &this
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *RoomTypeTypeSuite) GetEditable() bool {
	if o == nil || IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeTypeSuite) GetEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *RoomTypeTypeSuite) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *RoomTypeTypeSuite) SetEditable(v bool) {
	o.Editable = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RoomTypeTypeSuite) GetValue() bool {
	if o == nil || IsNil(o.Value) {
		var ret bool
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeTypeSuite) GetValueOk() (*bool, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RoomTypeTypeSuite) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given bool and assigns it to the Value field.
func (o *RoomTypeTypeSuite) SetValue(v bool) {
	o.Value = &v
}

func (o RoomTypeTypeSuite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypeTypeSuite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRoomTypeTypeSuite struct {
	value *RoomTypeTypeSuite
	isSet bool
}

func (v NullableRoomTypeTypeSuite) Get() *RoomTypeTypeSuite {
	return v.value
}

func (v *NullableRoomTypeTypeSuite) Set(val *RoomTypeTypeSuite) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypeTypeSuite) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypeTypeSuite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypeTypeSuite(val *RoomTypeTypeSuite) *NullableRoomTypeTypeSuite {
	return &NullableRoomTypeTypeSuite{value: val, isSet: true}
}

func (v NullableRoomTypeTypeSuite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypeTypeSuite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


