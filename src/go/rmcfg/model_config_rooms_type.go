/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the ConfigRoomsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigRoomsType{}

// ConfigRoomsType This type holds collection of rooms with complete information.
type ConfigRoomsType struct {
	// Hotel Code of the rooms.
	HotelId *string `json:"hotelId,omitempty"`
	Room []ConfigRoomType `json:"room,omitempty"`
}

// NewConfigRoomsType instantiates a new ConfigRoomsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigRoomsType() *ConfigRoomsType {
	this := ConfigRoomsType{}
	return &this
}

// NewConfigRoomsTypeWithDefaults instantiates a new ConfigRoomsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigRoomsTypeWithDefaults() *ConfigRoomsType {
	this := ConfigRoomsType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ConfigRoomsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigRoomsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ConfigRoomsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ConfigRoomsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *ConfigRoomsType) GetRoom() []ConfigRoomType {
	if o == nil || IsNil(o.Room) {
		var ret []ConfigRoomType
		return ret
	}
	return o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigRoomsType) GetRoomOk() ([]ConfigRoomType, bool) {
	if o == nil || IsNil(o.Room) {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *ConfigRoomsType) HasRoom() bool {
	if o != nil && !IsNil(o.Room) {
		return true
	}

	return false
}

// SetRoom gets a reference to the given []ConfigRoomType and assigns it to the Room field.
func (o *ConfigRoomsType) SetRoom(v []ConfigRoomType) {
	o.Room = v
}

func (o ConfigRoomsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigRoomsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Room) {
		toSerialize["room"] = o.Room
	}
	return toSerialize, nil
}

type NullableConfigRoomsType struct {
	value *ConfigRoomsType
	isSet bool
}

func (v NullableConfigRoomsType) Get() *ConfigRoomsType {
	return v.value
}

func (v *NullableConfigRoomsType) Set(val *ConfigRoomsType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigRoomsType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigRoomsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigRoomsType(val *ConfigRoomsType) *NullableConfigRoomsType {
	return &NullableConfigRoomsType{value: val, isSet: true}
}

func (v NullableConfigRoomsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigRoomsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


