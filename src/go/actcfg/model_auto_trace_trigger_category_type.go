/*
OPERA Cloud Activity Management API

APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actcfg

import (
	"encoding/json"
	"fmt"
)

// AutoTraceTriggerCategoryType Contains information on when auto trace would be created.
type AutoTraceTriggerCategoryType string

// List of autoTraceTriggerCategoryType
const (
	AUTOTRACETRIGGERCATEGORYTYPE_CREATE AutoTraceTriggerCategoryType = "Create"
	AUTOTRACETRIGGERCATEGORYTYPE_UPDATE AutoTraceTriggerCategoryType = "Update"
	AUTOTRACETRIGGERCATEGORYTYPE_DELETE AutoTraceTriggerCategoryType = "Delete"
)

// All allowed values of AutoTraceTriggerCategoryType enum
var AllowedAutoTraceTriggerCategoryTypeEnumValues = []AutoTraceTriggerCategoryType{
	"Create",
	"Update",
	"Delete",
}

func (v *AutoTraceTriggerCategoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoTraceTriggerCategoryType(value)
	for _, existing := range AllowedAutoTraceTriggerCategoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoTraceTriggerCategoryType", value)
}

// NewAutoTraceTriggerCategoryTypeFromValue returns a pointer to a valid AutoTraceTriggerCategoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoTraceTriggerCategoryTypeFromValue(v string) (*AutoTraceTriggerCategoryType, error) {
	ev := AutoTraceTriggerCategoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoTraceTriggerCategoryType: valid values are %v", v, AllowedAutoTraceTriggerCategoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoTraceTriggerCategoryType) IsValid() bool {
	for _, existing := range AllowedAutoTraceTriggerCategoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to autoTraceTriggerCategoryType value
func (v AutoTraceTriggerCategoryType) Ptr() *AutoTraceTriggerCategoryType {
	return &v
}

type NullableAutoTraceTriggerCategoryType struct {
	value *AutoTraceTriggerCategoryType
	isSet bool
}

func (v NullableAutoTraceTriggerCategoryType) Get() *AutoTraceTriggerCategoryType {
	return v.value
}

func (v *NullableAutoTraceTriggerCategoryType) Set(val *AutoTraceTriggerCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTraceTriggerCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTraceTriggerCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTraceTriggerCategoryType(val *AutoTraceTriggerCategoryType) *NullableAutoTraceTriggerCategoryType {
	return &NullableAutoTraceTriggerCategoryType{value: val, isSet: true}
}

func (v NullableAutoTraceTriggerCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTraceTriggerCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

