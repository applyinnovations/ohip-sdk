/*
OPERA Cloud Activity Management API

Testing ActivityManagementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package actcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/actcfg"
)

func Test_actcfg_ActivityManagementApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActivityManagementApiService CopyActivityTypesConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.CopyActivityTypesConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService CopyAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.CopyAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService DeleteActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityResultCode string

		resp, httpRes, err := apiClient.ActivityManagementApi.DeleteActivityResultsConfig(context.Background(), activityResultCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService DeleteActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.DeleteActivityTypes(context.Background(), activityTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService DeleteAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceCode string

		resp, httpRes, err := apiClient.ActivityManagementApi.DeleteAutoTraceCodes(context.Background(), autoTraceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService DeleteAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceDefinitionId string

		resp, httpRes, err := apiClient.ActivityManagementApi.DeleteAutoTraceDefinitions(context.Background(), autoTraceDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService DeleteAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceOwnerAssignmentID string

		resp, httpRes, err := apiClient.ActivityManagementApi.DeleteAutoTraceOwnerAssignments(context.Background(), autoTraceOwnerAssignmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService GetActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementApi.GetActivityResultsConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService GetActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.GetActivityTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService GetAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementApi.GetAutoTraceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService GetAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.GetAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService GetAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.GetAutoTraceOwnerAssignments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PostActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementApi.PostActivityResultsConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PostActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PostActivityTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PostAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementApi.PostAutoTraceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PostAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PostAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PostAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PostAutoTraceOwnerAssignments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PutActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityResultCode string

		resp, httpRes, err := apiClient.ActivityManagementApi.PutActivityResultsConfig(context.Background(), activityResultCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PutActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PutActivityTypes(context.Background(), activityTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PutAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceCode string

		resp, httpRes, err := apiClient.ActivityManagementApi.PutAutoTraceCodes(context.Background(), autoTraceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PutAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceDefinitionId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PutAutoTraceDefinitions(context.Background(), autoTraceDefinitionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementApiService PutAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceOwnerAssignmentID string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementApi.PutAutoTraceOwnerAssignments(context.Background(), autoTraceOwnerAssignmentID, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
