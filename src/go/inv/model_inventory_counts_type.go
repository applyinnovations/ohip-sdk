/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the InventoryCountsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryCountsType{}

// InventoryCountsType Inventory counts for the given date range.
type InventoryCountsType struct {
	// Indicates whether enough inventory is available or not.
	Available *bool `json:"available,omitempty"`
	// Available Inventory count.
	AvailableCount *int32 `json:"availableCount,omitempty"`
	// Available Tentative Inventory count.
	AvailableTentativeCount *int32 `json:"availableTentativeCount,omitempty"`
	// The ending value of the date range.
	EndDate *string `json:"endDate,omitempty"`
	// The starting value of the date range.
	StartDate *string `json:"startDate,omitempty"`
}

// NewInventoryCountsType instantiates a new InventoryCountsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryCountsType() *InventoryCountsType {
	this := InventoryCountsType{}
	return &this
}

// NewInventoryCountsTypeWithDefaults instantiates a new InventoryCountsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryCountsTypeWithDefaults() *InventoryCountsType {
	this := InventoryCountsType{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *InventoryCountsType) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCountsType) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *InventoryCountsType) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *InventoryCountsType) SetAvailable(v bool) {
	o.Available = &v
}

// GetAvailableCount returns the AvailableCount field value if set, zero value otherwise.
func (o *InventoryCountsType) GetAvailableCount() int32 {
	if o == nil || IsNil(o.AvailableCount) {
		var ret int32
		return ret
	}
	return *o.AvailableCount
}

// GetAvailableCountOk returns a tuple with the AvailableCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCountsType) GetAvailableCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableCount) {
		return nil, false
	}
	return o.AvailableCount, true
}

// HasAvailableCount returns a boolean if a field has been set.
func (o *InventoryCountsType) HasAvailableCount() bool {
	if o != nil && !IsNil(o.AvailableCount) {
		return true
	}

	return false
}

// SetAvailableCount gets a reference to the given int32 and assigns it to the AvailableCount field.
func (o *InventoryCountsType) SetAvailableCount(v int32) {
	o.AvailableCount = &v
}

// GetAvailableTentativeCount returns the AvailableTentativeCount field value if set, zero value otherwise.
func (o *InventoryCountsType) GetAvailableTentativeCount() int32 {
	if o == nil || IsNil(o.AvailableTentativeCount) {
		var ret int32
		return ret
	}
	return *o.AvailableTentativeCount
}

// GetAvailableTentativeCountOk returns a tuple with the AvailableTentativeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCountsType) GetAvailableTentativeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableTentativeCount) {
		return nil, false
	}
	return o.AvailableTentativeCount, true
}

// HasAvailableTentativeCount returns a boolean if a field has been set.
func (o *InventoryCountsType) HasAvailableTentativeCount() bool {
	if o != nil && !IsNil(o.AvailableTentativeCount) {
		return true
	}

	return false
}

// SetAvailableTentativeCount gets a reference to the given int32 and assigns it to the AvailableTentativeCount field.
func (o *InventoryCountsType) SetAvailableTentativeCount(v int32) {
	o.AvailableTentativeCount = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *InventoryCountsType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCountsType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *InventoryCountsType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *InventoryCountsType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InventoryCountsType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCountsType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InventoryCountsType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *InventoryCountsType) SetStartDate(v string) {
	o.StartDate = &v
}

func (o InventoryCountsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryCountsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.AvailableCount) {
		toSerialize["availableCount"] = o.AvailableCount
	}
	if !IsNil(o.AvailableTentativeCount) {
		toSerialize["availableTentativeCount"] = o.AvailableTentativeCount
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableInventoryCountsType struct {
	value *InventoryCountsType
	isSet bool
}

func (v NullableInventoryCountsType) Get() *InventoryCountsType {
	return v.value
}

func (v *NullableInventoryCountsType) Set(val *InventoryCountsType) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryCountsType) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryCountsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryCountsType(val *InventoryCountsType) *NullableInventoryCountsType {
	return &NullableInventoryCountsType{value: val, isSet: true}
}

func (v NullableInventoryCountsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryCountsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


