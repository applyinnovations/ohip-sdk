/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the SellLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SellLimit{}

// SellLimit A Request message that sets sell limit for a particular date for all the levels House, room type and room class. The request can contain the number type in which the sell limits is to be fetched for the different levels.
type SellLimit struct {
	SellLimitsByDate *SellLimitByDateType `json:"sellLimitsByDate,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewSellLimit instantiates a new SellLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellLimit() *SellLimit {
	this := SellLimit{}
	return &this
}

// NewSellLimitWithDefaults instantiates a new SellLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellLimitWithDefaults() *SellLimit {
	this := SellLimit{}
	return &this
}

// GetSellLimitsByDate returns the SellLimitsByDate field value if set, zero value otherwise.
func (o *SellLimit) GetSellLimitsByDate() SellLimitByDateType {
	if o == nil || IsNil(o.SellLimitsByDate) {
		var ret SellLimitByDateType
		return ret
	}
	return *o.SellLimitsByDate
}

// GetSellLimitsByDateOk returns a tuple with the SellLimitsByDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellLimit) GetSellLimitsByDateOk() (*SellLimitByDateType, bool) {
	if o == nil || IsNil(o.SellLimitsByDate) {
		return nil, false
	}
	return o.SellLimitsByDate, true
}

// HasSellLimitsByDate returns a boolean if a field has been set.
func (o *SellLimit) HasSellLimitsByDate() bool {
	if o != nil && !IsNil(o.SellLimitsByDate) {
		return true
	}

	return false
}

// SetSellLimitsByDate gets a reference to the given SellLimitByDateType and assigns it to the SellLimitsByDate field.
func (o *SellLimit) SetSellLimitsByDate(v SellLimitByDateType) {
	o.SellLimitsByDate = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SellLimit) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellLimit) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SellLimit) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *SellLimit) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o SellLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SellLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SellLimitsByDate) {
		toSerialize["sellLimitsByDate"] = o.SellLimitsByDate
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSellLimit struct {
	value *SellLimit
	isSet bool
}

func (v NullableSellLimit) Get() *SellLimit {
	return v.value
}

func (v *NullableSellLimit) Set(val *SellLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSellLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSellLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellLimit(val *SellLimit) *NullableSellLimit {
	return &NullableSellLimit{value: val, isSet: true}
}

func (v NullableSellLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


