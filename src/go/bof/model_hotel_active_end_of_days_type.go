/*
OPERA Cloud Back Office Operations API

APIs to cater for Back Office Operations functionality in OPERA Cloud. <br /><br /> A common BackOffice industry term is End of Day.  This closes and balances each day's business activities. It reconciles guest folios and processes credit card transactions. The End of Day routine rolls the business date forward and prints final reports.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bof

import (
	"encoding/json"
)

// checks if the HotelActiveEndOfDaysType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelActiveEndOfDaysType{}

// HotelActiveEndOfDaysType Collection of hotels and its active end of days.
type HotelActiveEndOfDaysType struct {
	Items []HotelActiveEndOfDayType
}

// NewHotelActiveEndOfDaysType instantiates a new HotelActiveEndOfDaysType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelActiveEndOfDaysType() *HotelActiveEndOfDaysType {
	this := HotelActiveEndOfDaysType{}
	return &this
}

// NewHotelActiveEndOfDaysTypeWithDefaults instantiates a new HotelActiveEndOfDaysType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelActiveEndOfDaysTypeWithDefaults() *HotelActiveEndOfDaysType {
	this := HotelActiveEndOfDaysType{}
	return &this
}

func (o HotelActiveEndOfDaysType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelActiveEndOfDaysType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *HotelActiveEndOfDaysType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableHotelActiveEndOfDaysType struct {
	value HotelActiveEndOfDaysType
	isSet bool
}

func (v NullableHotelActiveEndOfDaysType) Get() HotelActiveEndOfDaysType {
	return v.value
}

func (v *NullableHotelActiveEndOfDaysType) Set(val HotelActiveEndOfDaysType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelActiveEndOfDaysType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelActiveEndOfDaysType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelActiveEndOfDaysType(val HotelActiveEndOfDaysType) *NullableHotelActiveEndOfDaysType {
	return &NullableHotelActiveEndOfDaysType{value: val, isSet: true}
}

func (v NullableHotelActiveEndOfDaysType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelActiveEndOfDaysType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


