/*
OPERA Cloud Back Office Operations API

APIs to cater for Back Office Operations functionality in OPERA Cloud. <br /><br /> A common BackOffice industry term is End of Day.  This closes and balances each day's business activities. It reconciles guest folios and processes credit card transactions. The End of Day routine rolls the business date forward and prints final reports.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bof

import (
	"encoding/json"
)

// checks if the BusinessDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessDate{}

// BusinessDate Response for fetching active end of day status for multiple hotels.
type BusinessDate struct {
	Hotels *HotelActiveEndOfDaysType `json:"hotels,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewBusinessDate instantiates a new BusinessDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessDate() *BusinessDate {
	this := BusinessDate{}
	return &this
}

// NewBusinessDateWithDefaults instantiates a new BusinessDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessDateWithDefaults() *BusinessDate {
	this := BusinessDate{}
	return &this
}

// GetHotels returns the Hotels field value if set, zero value otherwise.
func (o *BusinessDate) GetHotels() HotelActiveEndOfDaysType {
	if o == nil || IsNil(o.Hotels) {
		var ret HotelActiveEndOfDaysType
		return ret
	}
	return *o.Hotels
}

// GetHotelsOk returns a tuple with the Hotels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDate) GetHotelsOk() (*HotelActiveEndOfDaysType, bool) {
	if o == nil || IsNil(o.Hotels) {
		return nil, false
	}
	return o.Hotels, true
}

// HasHotels returns a boolean if a field has been set.
func (o *BusinessDate) HasHotels() bool {
	if o != nil && !IsNil(o.Hotels) {
		return true
	}

	return false
}

// SetHotels gets a reference to the given HotelActiveEndOfDaysType and assigns it to the Hotels field.
func (o *BusinessDate) SetHotels(v HotelActiveEndOfDaysType) {
	o.Hotels = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BusinessDate) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDate) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BusinessDate) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *BusinessDate) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BusinessDate) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDate) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BusinessDate) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *BusinessDate) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o BusinessDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hotels) {
		toSerialize["hotels"] = o.Hotels
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBusinessDate struct {
	value *BusinessDate
	isSet bool
}

func (v NullableBusinessDate) Get() *BusinessDate {
	return v.value
}

func (v *NullableBusinessDate) Set(val *BusinessDate) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessDate) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessDate(val *BusinessDate) *NullableBusinessDate {
	return &NullableBusinessDate{value: val, isSet: true}
}

func (v NullableBusinessDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


