/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
)

// checks if the HurdleRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HurdleRates{}

// HurdleRates Hurdle rates to be configured.
type HurdleRates struct {
	Items []HurdleRateType
}

// NewHurdleRates instantiates a new HurdleRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHurdleRates() *HurdleRates {
	this := HurdleRates{}
	return &this
}

// NewHurdleRatesWithDefaults instantiates a new HurdleRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHurdleRatesWithDefaults() *HurdleRates {
	this := HurdleRates{}
	return &this
}

func (o HurdleRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HurdleRates) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *HurdleRates) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableHurdleRates struct {
	value HurdleRates
	isSet bool
}

func (v NullableHurdleRates) Get() HurdleRates {
	return v.value
}

func (v *NullableHurdleRates) Set(val HurdleRates) {
	v.value = val
	v.isSet = true
}

func (v NullableHurdleRates) IsSet() bool {
	return v.isSet
}

func (v *NullableHurdleRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHurdleRates(val HurdleRates) *NullableHurdleRates {
	return &NullableHurdleRates{value: val, isSet: true}
}

func (v NullableHurdleRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHurdleRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


