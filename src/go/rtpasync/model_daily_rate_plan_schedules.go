/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
)

// checks if the DailyRatePlanSchedules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyRatePlanSchedules{}

// DailyRatePlanSchedules Daily rate plan schedules.
type DailyRatePlanSchedules struct {
	// Collection of daily rate plan schedules.
	DailyRatePlanSchedule []DailyRatePlanScheduleType `json:"dailyRatePlanSchedule,omitempty"`
}

// NewDailyRatePlanSchedules instantiates a new DailyRatePlanSchedules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyRatePlanSchedules() *DailyRatePlanSchedules {
	this := DailyRatePlanSchedules{}
	return &this
}

// NewDailyRatePlanSchedulesWithDefaults instantiates a new DailyRatePlanSchedules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyRatePlanSchedulesWithDefaults() *DailyRatePlanSchedules {
	this := DailyRatePlanSchedules{}
	return &this
}

// GetDailyRatePlanSchedule returns the DailyRatePlanSchedule field value if set, zero value otherwise.
func (o *DailyRatePlanSchedules) GetDailyRatePlanSchedule() []DailyRatePlanScheduleType {
	if o == nil || IsNil(o.DailyRatePlanSchedule) {
		var ret []DailyRatePlanScheduleType
		return ret
	}
	return o.DailyRatePlanSchedule
}

// GetDailyRatePlanScheduleOk returns a tuple with the DailyRatePlanSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyRatePlanSchedules) GetDailyRatePlanScheduleOk() ([]DailyRatePlanScheduleType, bool) {
	if o == nil || IsNil(o.DailyRatePlanSchedule) {
		return nil, false
	}
	return o.DailyRatePlanSchedule, true
}

// HasDailyRatePlanSchedule returns a boolean if a field has been set.
func (o *DailyRatePlanSchedules) HasDailyRatePlanSchedule() bool {
	if o != nil && !IsNil(o.DailyRatePlanSchedule) {
		return true
	}

	return false
}

// SetDailyRatePlanSchedule gets a reference to the given []DailyRatePlanScheduleType and assigns it to the DailyRatePlanSchedule field.
func (o *DailyRatePlanSchedules) SetDailyRatePlanSchedule(v []DailyRatePlanScheduleType) {
	o.DailyRatePlanSchedule = v
}

func (o DailyRatePlanSchedules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyRatePlanSchedules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyRatePlanSchedule) {
		toSerialize["dailyRatePlanSchedule"] = o.DailyRatePlanSchedule
	}
	return toSerialize, nil
}

type NullableDailyRatePlanSchedules struct {
	value *DailyRatePlanSchedules
	isSet bool
}

func (v NullableDailyRatePlanSchedules) Get() *DailyRatePlanSchedules {
	return v.value
}

func (v *NullableDailyRatePlanSchedules) Set(val *DailyRatePlanSchedules) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyRatePlanSchedules) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyRatePlanSchedules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyRatePlanSchedules(val *DailyRatePlanSchedules) *NullableDailyRatePlanSchedules {
	return &NullableDailyRatePlanSchedules{value: val, isSet: true}
}

func (v NullableDailyRatePlanSchedules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyRatePlanSchedules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


