/*
OPERA Cloud API for Customer Management Service

This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cms

import (
	"encoding/json"
)

// checks if the CalendarTaskCountListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarTaskCountListType{}

// CalendarTaskCountListType Defines summary count of calendar tasks that belongs to specific classification.
type CalendarTaskCountListType struct {
	Items []CalendarTaskCountType
}

// NewCalendarTaskCountListType instantiates a new CalendarTaskCountListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarTaskCountListType() *CalendarTaskCountListType {
	this := CalendarTaskCountListType{}
	return &this
}

// NewCalendarTaskCountListTypeWithDefaults instantiates a new CalendarTaskCountListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarTaskCountListTypeWithDefaults() *CalendarTaskCountListType {
	this := CalendarTaskCountListType{}
	return &this
}

func (o CalendarTaskCountListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarTaskCountListType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *CalendarTaskCountListType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableCalendarTaskCountListType struct {
	value CalendarTaskCountListType
	isSet bool
}

func (v NullableCalendarTaskCountListType) Get() CalendarTaskCountListType {
	return v.value
}

func (v *NullableCalendarTaskCountListType) Set(val CalendarTaskCountListType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarTaskCountListType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarTaskCountListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarTaskCountListType(val CalendarTaskCountListType) *NullableCalendarTaskCountListType {
	return &NullableCalendarTaskCountListType{value: val, isSet: true}
}

func (v NullableCalendarTaskCountListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarTaskCountListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


