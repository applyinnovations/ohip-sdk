/*
OPERA Cloud API for Customer Management Service

This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cms

import (
	"encoding/json"
)

// checks if the CalendarTaskType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarTaskType{}

// CalendarTaskType Detailed information regarding calendar task.
type CalendarTaskType struct {
	AccountIdList *UniqueNameIDListType `json:"accountIdList,omitempty"`
	// Count of the attachments that are attached to the task.
	AttachmentsCount *int32 `json:"attachmentsCount,omitempty"`
	// Author of the calendar task.
	Author *string `json:"author,omitempty"`
	BlockIdList *UniqueNameIDListType `json:"blockIdList,omitempty"`
	ClassCode *CalendarTaskClassType `json:"classCode,omitempty"`
	ContactIdList *UniqueNameIDListType `json:"contactIdList,omitempty"`
	// Hotel code of calendar task.
	HotelId *string `json:"hotelId,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Additional notes and information regarding calendar task.
	Notes *string `json:"notes,omitempty"`
	PriorityInfo *CalendarTaskPriorityType `json:"priorityInfo,omitempty"`
	// Brief description and purpose of calendar task.
	Purpose *string `json:"purpose,omitempty"`
	Status *CalendarTaskTypeStatus `json:"status,omitempty"`
	// Owner code of the person to whom the calendar task is assigned.
	TaskOwner *string `json:"taskOwner,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
	TypeCode *CodeDescriptionType `json:"typeCode,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
}

// NewCalendarTaskType instantiates a new CalendarTaskType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarTaskType() *CalendarTaskType {
	this := CalendarTaskType{}
	return &this
}

// NewCalendarTaskTypeWithDefaults instantiates a new CalendarTaskType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarTaskTypeWithDefaults() *CalendarTaskType {
	this := CalendarTaskType{}
	return &this
}

// GetAccountIdList returns the AccountIdList field value if set, zero value otherwise.
func (o *CalendarTaskType) GetAccountIdList() UniqueNameIDListType {
	if o == nil || IsNil(o.AccountIdList) {
		var ret UniqueNameIDListType
		return ret
	}
	return *o.AccountIdList
}

// GetAccountIdListOk returns a tuple with the AccountIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetAccountIdListOk() (*UniqueNameIDListType, bool) {
	if o == nil || IsNil(o.AccountIdList) {
		return nil, false
	}
	return o.AccountIdList, true
}

// HasAccountIdList returns a boolean if a field has been set.
func (o *CalendarTaskType) HasAccountIdList() bool {
	if o != nil && !IsNil(o.AccountIdList) {
		return true
	}

	return false
}

// SetAccountIdList gets a reference to the given UniqueNameIDListType and assigns it to the AccountIdList field.
func (o *CalendarTaskType) SetAccountIdList(v UniqueNameIDListType) {
	o.AccountIdList = &v
}

// GetAttachmentsCount returns the AttachmentsCount field value if set, zero value otherwise.
func (o *CalendarTaskType) GetAttachmentsCount() int32 {
	if o == nil || IsNil(o.AttachmentsCount) {
		var ret int32
		return ret
	}
	return *o.AttachmentsCount
}

// GetAttachmentsCountOk returns a tuple with the AttachmentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetAttachmentsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AttachmentsCount) {
		return nil, false
	}
	return o.AttachmentsCount, true
}

// HasAttachmentsCount returns a boolean if a field has been set.
func (o *CalendarTaskType) HasAttachmentsCount() bool {
	if o != nil && !IsNil(o.AttachmentsCount) {
		return true
	}

	return false
}

// SetAttachmentsCount gets a reference to the given int32 and assigns it to the AttachmentsCount field.
func (o *CalendarTaskType) SetAttachmentsCount(v int32) {
	o.AttachmentsCount = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CalendarTaskType) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CalendarTaskType) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *CalendarTaskType) SetAuthor(v string) {
	o.Author = &v
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *CalendarTaskType) GetBlockIdList() UniqueNameIDListType {
	if o == nil || IsNil(o.BlockIdList) {
		var ret UniqueNameIDListType
		return ret
	}
	return *o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetBlockIdListOk() (*UniqueNameIDListType, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *CalendarTaskType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given UniqueNameIDListType and assigns it to the BlockIdList field.
func (o *CalendarTaskType) SetBlockIdList(v UniqueNameIDListType) {
	o.BlockIdList = &v
}

// GetClassCode returns the ClassCode field value if set, zero value otherwise.
func (o *CalendarTaskType) GetClassCode() CalendarTaskClassType {
	if o == nil || IsNil(o.ClassCode) {
		var ret CalendarTaskClassType
		return ret
	}
	return *o.ClassCode
}

// GetClassCodeOk returns a tuple with the ClassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetClassCodeOk() (*CalendarTaskClassType, bool) {
	if o == nil || IsNil(o.ClassCode) {
		return nil, false
	}
	return o.ClassCode, true
}

// HasClassCode returns a boolean if a field has been set.
func (o *CalendarTaskType) HasClassCode() bool {
	if o != nil && !IsNil(o.ClassCode) {
		return true
	}

	return false
}

// SetClassCode gets a reference to the given CalendarTaskClassType and assigns it to the ClassCode field.
func (o *CalendarTaskType) SetClassCode(v CalendarTaskClassType) {
	o.ClassCode = &v
}

// GetContactIdList returns the ContactIdList field value if set, zero value otherwise.
func (o *CalendarTaskType) GetContactIdList() UniqueNameIDListType {
	if o == nil || IsNil(o.ContactIdList) {
		var ret UniqueNameIDListType
		return ret
	}
	return *o.ContactIdList
}

// GetContactIdListOk returns a tuple with the ContactIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetContactIdListOk() (*UniqueNameIDListType, bool) {
	if o == nil || IsNil(o.ContactIdList) {
		return nil, false
	}
	return o.ContactIdList, true
}

// HasContactIdList returns a boolean if a field has been set.
func (o *CalendarTaskType) HasContactIdList() bool {
	if o != nil && !IsNil(o.ContactIdList) {
		return true
	}

	return false
}

// SetContactIdList gets a reference to the given UniqueNameIDListType and assigns it to the ContactIdList field.
func (o *CalendarTaskType) SetContactIdList(v UniqueNameIDListType) {
	o.ContactIdList = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CalendarTaskType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CalendarTaskType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CalendarTaskType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CalendarTaskType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CalendarTaskType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CalendarTaskType) SetId(v string) {
	o.Id = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *CalendarTaskType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *CalendarTaskType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *CalendarTaskType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *CalendarTaskType) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *CalendarTaskType) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *CalendarTaskType) SetIdExtension(v int32) {
	o.IdExtension = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *CalendarTaskType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *CalendarTaskType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *CalendarTaskType) SetInstance(v string) {
	o.Instance = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CalendarTaskType) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CalendarTaskType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *CalendarTaskType) SetNotes(v string) {
	o.Notes = &v
}

// GetPriorityInfo returns the PriorityInfo field value if set, zero value otherwise.
func (o *CalendarTaskType) GetPriorityInfo() CalendarTaskPriorityType {
	if o == nil || IsNil(o.PriorityInfo) {
		var ret CalendarTaskPriorityType
		return ret
	}
	return *o.PriorityInfo
}

// GetPriorityInfoOk returns a tuple with the PriorityInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetPriorityInfoOk() (*CalendarTaskPriorityType, bool) {
	if o == nil || IsNil(o.PriorityInfo) {
		return nil, false
	}
	return o.PriorityInfo, true
}

// HasPriorityInfo returns a boolean if a field has been set.
func (o *CalendarTaskType) HasPriorityInfo() bool {
	if o != nil && !IsNil(o.PriorityInfo) {
		return true
	}

	return false
}

// SetPriorityInfo gets a reference to the given CalendarTaskPriorityType and assigns it to the PriorityInfo field.
func (o *CalendarTaskType) SetPriorityInfo(v CalendarTaskPriorityType) {
	o.PriorityInfo = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *CalendarTaskType) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *CalendarTaskType) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *CalendarTaskType) SetPurpose(v string) {
	o.Purpose = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CalendarTaskType) GetStatus() CalendarTaskTypeStatus {
	if o == nil || IsNil(o.Status) {
		var ret CalendarTaskTypeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetStatusOk() (*CalendarTaskTypeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CalendarTaskType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CalendarTaskTypeStatus and assigns it to the Status field.
func (o *CalendarTaskType) SetStatus(v CalendarTaskTypeStatus) {
	o.Status = &v
}

// GetTaskOwner returns the TaskOwner field value if set, zero value otherwise.
func (o *CalendarTaskType) GetTaskOwner() string {
	if o == nil || IsNil(o.TaskOwner) {
		var ret string
		return ret
	}
	return *o.TaskOwner
}

// GetTaskOwnerOk returns a tuple with the TaskOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetTaskOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.TaskOwner) {
		return nil, false
	}
	return o.TaskOwner, true
}

// HasTaskOwner returns a boolean if a field has been set.
func (o *CalendarTaskType) HasTaskOwner() bool {
	if o != nil && !IsNil(o.TaskOwner) {
		return true
	}

	return false
}

// SetTaskOwner gets a reference to the given string and assigns it to the TaskOwner field.
func (o *CalendarTaskType) SetTaskOwner(v string) {
	o.TaskOwner = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *CalendarTaskType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *CalendarTaskType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *CalendarTaskType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CalendarTaskType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CalendarTaskType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CalendarTaskType) SetType(v string) {
	o.Type = &v
}

// GetTypeCode returns the TypeCode field value if set, zero value otherwise.
func (o *CalendarTaskType) GetTypeCode() CodeDescriptionType {
	if o == nil || IsNil(o.TypeCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.TypeCode
}

// GetTypeCodeOk returns a tuple with the TypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetTypeCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.TypeCode) {
		return nil, false
	}
	return o.TypeCode, true
}

// HasTypeCode returns a boolean if a field has been set.
func (o *CalendarTaskType) HasTypeCode() bool {
	if o != nil && !IsNil(o.TypeCode) {
		return true
	}

	return false
}

// SetTypeCode gets a reference to the given CodeDescriptionType and assigns it to the TypeCode field.
func (o *CalendarTaskType) SetTypeCode(v CodeDescriptionType) {
	o.TypeCode = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CalendarTaskType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CalendarTaskType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CalendarTaskType) SetUrl(v string) {
	o.Url = &v
}

func (o CalendarTaskType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarTaskType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountIdList) {
		toSerialize["accountIdList"] = o.AccountIdList
	}
	if !IsNil(o.AttachmentsCount) {
		toSerialize["attachmentsCount"] = o.AttachmentsCount
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.ClassCode) {
		toSerialize["classCode"] = o.ClassCode
	}
	if !IsNil(o.ContactIdList) {
		toSerialize["contactIdList"] = o.ContactIdList
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.PriorityInfo) {
		toSerialize["priorityInfo"] = o.PriorityInfo
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TaskOwner) {
		toSerialize["taskOwner"] = o.TaskOwner
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeCode) {
		toSerialize["typeCode"] = o.TypeCode
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableCalendarTaskType struct {
	value *CalendarTaskType
	isSet bool
}

func (v NullableCalendarTaskType) Get() *CalendarTaskType {
	return v.value
}

func (v *NullableCalendarTaskType) Set(val *CalendarTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarTaskType(val *CalendarTaskType) *NullableCalendarTaskType {
	return &NullableCalendarTaskType{value: val, isSet: true}
}

func (v NullableCalendarTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


