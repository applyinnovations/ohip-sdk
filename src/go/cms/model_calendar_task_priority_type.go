/*
OPERA Cloud API for Customer Management Service

This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cms

import (
	"encoding/json"
)

// checks if the CalendarTaskPriorityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarTaskPriorityType{}

// CalendarTaskPriorityType Calendar Task code, description and color This will be used for calendar task priorities.
type CalendarTaskPriorityType struct {
	Code *CodeDescriptionType `json:"code,omitempty"`
	PriorityColor *PriorityColorType `json:"priorityColor,omitempty"`
}

// NewCalendarTaskPriorityType instantiates a new CalendarTaskPriorityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarTaskPriorityType() *CalendarTaskPriorityType {
	this := CalendarTaskPriorityType{}
	return &this
}

// NewCalendarTaskPriorityTypeWithDefaults instantiates a new CalendarTaskPriorityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarTaskPriorityTypeWithDefaults() *CalendarTaskPriorityType {
	this := CalendarTaskPriorityType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CalendarTaskPriorityType) GetCode() CodeDescriptionType {
	if o == nil || IsNil(o.Code) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskPriorityType) GetCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CalendarTaskPriorityType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeDescriptionType and assigns it to the Code field.
func (o *CalendarTaskPriorityType) SetCode(v CodeDescriptionType) {
	o.Code = &v
}

// GetPriorityColor returns the PriorityColor field value if set, zero value otherwise.
func (o *CalendarTaskPriorityType) GetPriorityColor() PriorityColorType {
	if o == nil || IsNil(o.PriorityColor) {
		var ret PriorityColorType
		return ret
	}
	return *o.PriorityColor
}

// GetPriorityColorOk returns a tuple with the PriorityColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarTaskPriorityType) GetPriorityColorOk() (*PriorityColorType, bool) {
	if o == nil || IsNil(o.PriorityColor) {
		return nil, false
	}
	return o.PriorityColor, true
}

// HasPriorityColor returns a boolean if a field has been set.
func (o *CalendarTaskPriorityType) HasPriorityColor() bool {
	if o != nil && !IsNil(o.PriorityColor) {
		return true
	}

	return false
}

// SetPriorityColor gets a reference to the given PriorityColorType and assigns it to the PriorityColor field.
func (o *CalendarTaskPriorityType) SetPriorityColor(v PriorityColorType) {
	o.PriorityColor = &v
}

func (o CalendarTaskPriorityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarTaskPriorityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.PriorityColor) {
		toSerialize["priorityColor"] = o.PriorityColor
	}
	return toSerialize, nil
}

type NullableCalendarTaskPriorityType struct {
	value *CalendarTaskPriorityType
	isSet bool
}

func (v NullableCalendarTaskPriorityType) Get() *CalendarTaskPriorityType {
	return v.value
}

func (v *NullableCalendarTaskPriorityType) Set(val *CalendarTaskPriorityType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarTaskPriorityType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarTaskPriorityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarTaskPriorityType(val *CalendarTaskPriorityType) *NullableCalendarTaskPriorityType {
	return &NullableCalendarTaskPriorityType{value: val, isSet: true}
}

func (v NullableCalendarTaskPriorityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarTaskPriorityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


