/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the SuspendedAddressesInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuspendedAddressesInfoType{}

// SuspendedAddressesInfoType struct for SuspendedAddressesInfoType
type SuspendedAddressesInfoType struct {
	// Corporate id of the profile.
	AddressId *int32 `json:"addressId,omitempty"`
	ClientID *UniqueIDType `json:"clientID,omitempty"`
	Country *CountryNameType `json:"country,omitempty"`
	// First Name of the Profile against which the Suspended Addresses are fetched.
	FirstName *string `json:"firstName,omitempty"`
	// Resort of the Profile
	HotelId *string `json:"hotelId,omitempty"`
	// Match Code of the Address Validation Performed from the batch processing
	MatchCode *string `json:"matchCode,omitempty"`
	// Last Name of the Profile against which the Suspended Addresses are fetched.
	Name *string `json:"name,omitempty"`
	ProfileId *UniqueIDType `json:"profileId,omitempty"`
	// Profile Type of the Profile against which the Suspended Addresses are fetched..
	ProfileType *string `json:"profileType,omitempty"`
	// Validate Date.
	ValidateDate *string `json:"validateDate,omitempty"`
}

// NewSuspendedAddressesInfoType instantiates a new SuspendedAddressesInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuspendedAddressesInfoType() *SuspendedAddressesInfoType {
	this := SuspendedAddressesInfoType{}
	return &this
}

// NewSuspendedAddressesInfoTypeWithDefaults instantiates a new SuspendedAddressesInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuspendedAddressesInfoTypeWithDefaults() *SuspendedAddressesInfoType {
	this := SuspendedAddressesInfoType{}
	return &this
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetAddressId() int32 {
	if o == nil || IsNil(o.AddressId) {
		var ret int32
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetAddressIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AddressId) {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasAddressId() bool {
	if o != nil && !IsNil(o.AddressId) {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given int32 and assigns it to the AddressId field.
func (o *SuspendedAddressesInfoType) SetAddressId(v int32) {
	o.AddressId = &v
}

// GetClientID returns the ClientID field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetClientID() UniqueIDType {
	if o == nil || IsNil(o.ClientID) {
		var ret UniqueIDType
		return ret
	}
	return *o.ClientID
}

// GetClientIDOk returns a tuple with the ClientID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetClientIDOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ClientID) {
		return nil, false
	}
	return o.ClientID, true
}

// HasClientID returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasClientID() bool {
	if o != nil && !IsNil(o.ClientID) {
		return true
	}

	return false
}

// SetClientID gets a reference to the given UniqueIDType and assigns it to the ClientID field.
func (o *SuspendedAddressesInfoType) SetClientID(v UniqueIDType) {
	o.ClientID = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetCountry() CountryNameType {
	if o == nil || IsNil(o.Country) {
		var ret CountryNameType
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetCountryOk() (*CountryNameType, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryNameType and assigns it to the Country field.
func (o *SuspendedAddressesInfoType) SetCountry(v CountryNameType) {
	o.Country = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *SuspendedAddressesInfoType) SetFirstName(v string) {
	o.FirstName = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SuspendedAddressesInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMatchCode returns the MatchCode field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetMatchCode() string {
	if o == nil || IsNil(o.MatchCode) {
		var ret string
		return ret
	}
	return *o.MatchCode
}

// GetMatchCodeOk returns a tuple with the MatchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetMatchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchCode) {
		return nil, false
	}
	return o.MatchCode, true
}

// HasMatchCode returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasMatchCode() bool {
	if o != nil && !IsNil(o.MatchCode) {
		return true
	}

	return false
}

// SetMatchCode gets a reference to the given string and assigns it to the MatchCode field.
func (o *SuspendedAddressesInfoType) SetMatchCode(v string) {
	o.MatchCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuspendedAddressesInfoType) SetName(v string) {
	o.Name = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetProfileId() UniqueIDType {
	if o == nil || IsNil(o.ProfileId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetProfileIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given UniqueIDType and assigns it to the ProfileId field.
func (o *SuspendedAddressesInfoType) SetProfileId(v UniqueIDType) {
	o.ProfileId = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetProfileType() string {
	if o == nil || IsNil(o.ProfileType) {
		var ret string
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetProfileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given string and assigns it to the ProfileType field.
func (o *SuspendedAddressesInfoType) SetProfileType(v string) {
	o.ProfileType = &v
}

// GetValidateDate returns the ValidateDate field value if set, zero value otherwise.
func (o *SuspendedAddressesInfoType) GetValidateDate() string {
	if o == nil || IsNil(o.ValidateDate) {
		var ret string
		return ret
	}
	return *o.ValidateDate
}

// GetValidateDateOk returns a tuple with the ValidateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedAddressesInfoType) GetValidateDateOk() (*string, bool) {
	if o == nil || IsNil(o.ValidateDate) {
		return nil, false
	}
	return o.ValidateDate, true
}

// HasValidateDate returns a boolean if a field has been set.
func (o *SuspendedAddressesInfoType) HasValidateDate() bool {
	if o != nil && !IsNil(o.ValidateDate) {
		return true
	}

	return false
}

// SetValidateDate gets a reference to the given string and assigns it to the ValidateDate field.
func (o *SuspendedAddressesInfoType) SetValidateDate(v string) {
	o.ValidateDate = &v
}

func (o SuspendedAddressesInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuspendedAddressesInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressId) {
		toSerialize["addressId"] = o.AddressId
	}
	if !IsNil(o.ClientID) {
		toSerialize["clientID"] = o.ClientID
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MatchCode) {
		toSerialize["matchCode"] = o.MatchCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	if !IsNil(o.ValidateDate) {
		toSerialize["validateDate"] = o.ValidateDate
	}
	return toSerialize, nil
}

type NullableSuspendedAddressesInfoType struct {
	value *SuspendedAddressesInfoType
	isSet bool
}

func (v NullableSuspendedAddressesInfoType) Get() *SuspendedAddressesInfoType {
	return v.value
}

func (v *NullableSuspendedAddressesInfoType) Set(val *SuspendedAddressesInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendedAddressesInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendedAddressesInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendedAddressesInfoType(val *SuspendedAddressesInfoType) *NullableSuspendedAddressesInfoType {
	return &NullableSuspendedAddressesInfoType{value: val, isSet: true}
}

func (v NullableSuspendedAddressesInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendedAddressesInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


