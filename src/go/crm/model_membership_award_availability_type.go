/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipAwardAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipAwardAvailabilityType{}

// MembershipAwardAvailabilityType Details of Member Award Type. Awards will be available for redemption of award points associated with a particular member.
type MembershipAwardAvailabilityType struct {
	OtherInfo *OtherAvailabilityType `json:"otherInfo,omitempty"`
	ProductInfo *ProductAvailabilityType `json:"productInfo,omitempty"`
	RateInfo *RateAvailabilityType `json:"rateInfo,omitempty"`
	UpgradeInfo *UpgradeAvailabilityType `json:"upgradeInfo,omitempty"`
}

// NewMembershipAwardAvailabilityType instantiates a new MembershipAwardAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipAwardAvailabilityType() *MembershipAwardAvailabilityType {
	this := MembershipAwardAvailabilityType{}
	return &this
}

// NewMembershipAwardAvailabilityTypeWithDefaults instantiates a new MembershipAwardAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipAwardAvailabilityTypeWithDefaults() *MembershipAwardAvailabilityType {
	this := MembershipAwardAvailabilityType{}
	return &this
}

// GetOtherInfo returns the OtherInfo field value if set, zero value otherwise.
func (o *MembershipAwardAvailabilityType) GetOtherInfo() OtherAvailabilityType {
	if o == nil || IsNil(o.OtherInfo) {
		var ret OtherAvailabilityType
		return ret
	}
	return *o.OtherInfo
}

// GetOtherInfoOk returns a tuple with the OtherInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardAvailabilityType) GetOtherInfoOk() (*OtherAvailabilityType, bool) {
	if o == nil || IsNil(o.OtherInfo) {
		return nil, false
	}
	return o.OtherInfo, true
}

// HasOtherInfo returns a boolean if a field has been set.
func (o *MembershipAwardAvailabilityType) HasOtherInfo() bool {
	if o != nil && !IsNil(o.OtherInfo) {
		return true
	}

	return false
}

// SetOtherInfo gets a reference to the given OtherAvailabilityType and assigns it to the OtherInfo field.
func (o *MembershipAwardAvailabilityType) SetOtherInfo(v OtherAvailabilityType) {
	o.OtherInfo = &v
}

// GetProductInfo returns the ProductInfo field value if set, zero value otherwise.
func (o *MembershipAwardAvailabilityType) GetProductInfo() ProductAvailabilityType {
	if o == nil || IsNil(o.ProductInfo) {
		var ret ProductAvailabilityType
		return ret
	}
	return *o.ProductInfo
}

// GetProductInfoOk returns a tuple with the ProductInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardAvailabilityType) GetProductInfoOk() (*ProductAvailabilityType, bool) {
	if o == nil || IsNil(o.ProductInfo) {
		return nil, false
	}
	return o.ProductInfo, true
}

// HasProductInfo returns a boolean if a field has been set.
func (o *MembershipAwardAvailabilityType) HasProductInfo() bool {
	if o != nil && !IsNil(o.ProductInfo) {
		return true
	}

	return false
}

// SetProductInfo gets a reference to the given ProductAvailabilityType and assigns it to the ProductInfo field.
func (o *MembershipAwardAvailabilityType) SetProductInfo(v ProductAvailabilityType) {
	o.ProductInfo = &v
}

// GetRateInfo returns the RateInfo field value if set, zero value otherwise.
func (o *MembershipAwardAvailabilityType) GetRateInfo() RateAvailabilityType {
	if o == nil || IsNil(o.RateInfo) {
		var ret RateAvailabilityType
		return ret
	}
	return *o.RateInfo
}

// GetRateInfoOk returns a tuple with the RateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardAvailabilityType) GetRateInfoOk() (*RateAvailabilityType, bool) {
	if o == nil || IsNil(o.RateInfo) {
		return nil, false
	}
	return o.RateInfo, true
}

// HasRateInfo returns a boolean if a field has been set.
func (o *MembershipAwardAvailabilityType) HasRateInfo() bool {
	if o != nil && !IsNil(o.RateInfo) {
		return true
	}

	return false
}

// SetRateInfo gets a reference to the given RateAvailabilityType and assigns it to the RateInfo field.
func (o *MembershipAwardAvailabilityType) SetRateInfo(v RateAvailabilityType) {
	o.RateInfo = &v
}

// GetUpgradeInfo returns the UpgradeInfo field value if set, zero value otherwise.
func (o *MembershipAwardAvailabilityType) GetUpgradeInfo() UpgradeAvailabilityType {
	if o == nil || IsNil(o.UpgradeInfo) {
		var ret UpgradeAvailabilityType
		return ret
	}
	return *o.UpgradeInfo
}

// GetUpgradeInfoOk returns a tuple with the UpgradeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardAvailabilityType) GetUpgradeInfoOk() (*UpgradeAvailabilityType, bool) {
	if o == nil || IsNil(o.UpgradeInfo) {
		return nil, false
	}
	return o.UpgradeInfo, true
}

// HasUpgradeInfo returns a boolean if a field has been set.
func (o *MembershipAwardAvailabilityType) HasUpgradeInfo() bool {
	if o != nil && !IsNil(o.UpgradeInfo) {
		return true
	}

	return false
}

// SetUpgradeInfo gets a reference to the given UpgradeAvailabilityType and assigns it to the UpgradeInfo field.
func (o *MembershipAwardAvailabilityType) SetUpgradeInfo(v UpgradeAvailabilityType) {
	o.UpgradeInfo = &v
}

func (o MembershipAwardAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipAwardAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OtherInfo) {
		toSerialize["otherInfo"] = o.OtherInfo
	}
	if !IsNil(o.ProductInfo) {
		toSerialize["productInfo"] = o.ProductInfo
	}
	if !IsNil(o.RateInfo) {
		toSerialize["rateInfo"] = o.RateInfo
	}
	if !IsNil(o.UpgradeInfo) {
		toSerialize["upgradeInfo"] = o.UpgradeInfo
	}
	return toSerialize, nil
}

type NullableMembershipAwardAvailabilityType struct {
	value *MembershipAwardAvailabilityType
	isSet bool
}

func (v NullableMembershipAwardAvailabilityType) Get() *MembershipAwardAvailabilityType {
	return v.value
}

func (v *NullableMembershipAwardAvailabilityType) Set(val *MembershipAwardAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipAwardAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipAwardAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipAwardAvailabilityType(val *MembershipAwardAvailabilityType) *NullableMembershipAwardAvailabilityType {
	return &NullableMembershipAwardAvailabilityType{value: val, isSet: true}
}

func (v NullableMembershipAwardAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipAwardAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


