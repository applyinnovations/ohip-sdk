/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ClaimMembershipType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimMembershipType{}

// ClaimMembershipType Summary of claim activity log information.
type ClaimMembershipType struct {
	// Indicates the starting date.
	EffectiveDate *string `json:"effectiveDate,omitempty"`
	// Indicates the ending date.
	ExpireDate *string `json:"expireDate,omitempty"`
	// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
	ExpireDateExclusiveIndicator *bool `json:"expireDateExclusiveIndicator,omitempty"`
	// Indicates the membership class.
	MembershipClass *string `json:"membershipClass,omitempty"`
	// Card Number of the membership.
	MembershipId *string `json:"membershipId,omitempty"`
	// Membership ID Number.
	MembershipIdNo *float32 `json:"membershipIdNo,omitempty"`
	// The current level of the membership.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Membership Type code.
	MembershipType *string `json:"membershipType,omitempty"`
	// Name to be displayed on the membership card.
	NameOnCard *string `json:"nameOnCard,omitempty"`
}

// NewClaimMembershipType instantiates a new ClaimMembershipType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimMembershipType() *ClaimMembershipType {
	this := ClaimMembershipType{}
	return &this
}

// NewClaimMembershipTypeWithDefaults instantiates a new ClaimMembershipType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimMembershipTypeWithDefaults() *ClaimMembershipType {
	this := ClaimMembershipType{}
	return &this
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *ClaimMembershipType) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetExpireDate() string {
	if o == nil || IsNil(o.ExpireDate) {
		var ret string
		return ret
	}
	return *o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetExpireDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireDate) {
		return nil, false
	}
	return o.ExpireDate, true
}

// HasExpireDate returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasExpireDate() bool {
	if o != nil && !IsNil(o.ExpireDate) {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given string and assigns it to the ExpireDate field.
func (o *ClaimMembershipType) SetExpireDate(v string) {
	o.ExpireDate = &v
}

// GetExpireDateExclusiveIndicator returns the ExpireDateExclusiveIndicator field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetExpireDateExclusiveIndicator() bool {
	if o == nil || IsNil(o.ExpireDateExclusiveIndicator) {
		var ret bool
		return ret
	}
	return *o.ExpireDateExclusiveIndicator
}

// GetExpireDateExclusiveIndicatorOk returns a tuple with the ExpireDateExclusiveIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetExpireDateExclusiveIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpireDateExclusiveIndicator) {
		return nil, false
	}
	return o.ExpireDateExclusiveIndicator, true
}

// HasExpireDateExclusiveIndicator returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasExpireDateExclusiveIndicator() bool {
	if o != nil && !IsNil(o.ExpireDateExclusiveIndicator) {
		return true
	}

	return false
}

// SetExpireDateExclusiveIndicator gets a reference to the given bool and assigns it to the ExpireDateExclusiveIndicator field.
func (o *ClaimMembershipType) SetExpireDateExclusiveIndicator(v bool) {
	o.ExpireDateExclusiveIndicator = &v
}

// GetMembershipClass returns the MembershipClass field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetMembershipClass() string {
	if o == nil || IsNil(o.MembershipClass) {
		var ret string
		return ret
	}
	return *o.MembershipClass
}

// GetMembershipClassOk returns a tuple with the MembershipClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetMembershipClassOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipClass) {
		return nil, false
	}
	return o.MembershipClass, true
}

// HasMembershipClass returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasMembershipClass() bool {
	if o != nil && !IsNil(o.MembershipClass) {
		return true
	}

	return false
}

// SetMembershipClass gets a reference to the given string and assigns it to the MembershipClass field.
func (o *ClaimMembershipType) SetMembershipClass(v string) {
	o.MembershipClass = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetMembershipId() string {
	if o == nil || IsNil(o.MembershipId) {
		var ret string
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetMembershipIdOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given string and assigns it to the MembershipId field.
func (o *ClaimMembershipType) SetMembershipId(v string) {
	o.MembershipId = &v
}

// GetMembershipIdNo returns the MembershipIdNo field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetMembershipIdNo() float32 {
	if o == nil || IsNil(o.MembershipIdNo) {
		var ret float32
		return ret
	}
	return *o.MembershipIdNo
}

// GetMembershipIdNoOk returns a tuple with the MembershipIdNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetMembershipIdNoOk() (*float32, bool) {
	if o == nil || IsNil(o.MembershipIdNo) {
		return nil, false
	}
	return o.MembershipIdNo, true
}

// HasMembershipIdNo returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasMembershipIdNo() bool {
	if o != nil && !IsNil(o.MembershipIdNo) {
		return true
	}

	return false
}

// SetMembershipIdNo gets a reference to the given float32 and assigns it to the MembershipIdNo field.
func (o *ClaimMembershipType) SetMembershipIdNo(v float32) {
	o.MembershipIdNo = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *ClaimMembershipType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *ClaimMembershipType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetNameOnCard returns the NameOnCard field value if set, zero value otherwise.
func (o *ClaimMembershipType) GetNameOnCard() string {
	if o == nil || IsNil(o.NameOnCard) {
		var ret string
		return ret
	}
	return *o.NameOnCard
}

// GetNameOnCardOk returns a tuple with the NameOnCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimMembershipType) GetNameOnCardOk() (*string, bool) {
	if o == nil || IsNil(o.NameOnCard) {
		return nil, false
	}
	return o.NameOnCard, true
}

// HasNameOnCard returns a boolean if a field has been set.
func (o *ClaimMembershipType) HasNameOnCard() bool {
	if o != nil && !IsNil(o.NameOnCard) {
		return true
	}

	return false
}

// SetNameOnCard gets a reference to the given string and assigns it to the NameOnCard field.
func (o *ClaimMembershipType) SetNameOnCard(v string) {
	o.NameOnCard = &v
}

func (o ClaimMembershipType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimMembershipType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.ExpireDate) {
		toSerialize["expireDate"] = o.ExpireDate
	}
	if !IsNil(o.ExpireDateExclusiveIndicator) {
		toSerialize["expireDateExclusiveIndicator"] = o.ExpireDateExclusiveIndicator
	}
	if !IsNil(o.MembershipClass) {
		toSerialize["membershipClass"] = o.MembershipClass
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipIdNo) {
		toSerialize["membershipIdNo"] = o.MembershipIdNo
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.NameOnCard) {
		toSerialize["nameOnCard"] = o.NameOnCard
	}
	return toSerialize, nil
}

type NullableClaimMembershipType struct {
	value *ClaimMembershipType
	isSet bool
}

func (v NullableClaimMembershipType) Get() *ClaimMembershipType {
	return v.value
}

func (v *NullableClaimMembershipType) Set(val *ClaimMembershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimMembershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimMembershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimMembershipType(val *ClaimMembershipType) *NullableClaimMembershipType {
	return &NullableClaimMembershipType{value: val, isSet: true}
}

func (v NullableClaimMembershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimMembershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


