/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ProfileApiService ProfileApi service
type ProfileApiService service

type ProfileApiChangeMembershipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	membershipId string
	membershipType string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membership *ChangeMembershipRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiChangeMembershipRequest) Authorization(authorization string) ProfileApiChangeMembershipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiChangeMembershipRequest) XAppKey(xAppKey string) ProfileApiChangeMembershipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiChangeMembershipRequest) XHotelid(xHotelid string) ProfileApiChangeMembershipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for change/update membership. This object contains unique identifiers for each profile and list of membership details to be updated/changed. The standard optional Opera Context element is also included.
func (r ProfileApiChangeMembershipRequest) Membership(membership ChangeMembershipRequest) ProfileApiChangeMembershipRequest {
	r.membership = &membership
	return r
}

// External system code.
func (r ProfileApiChangeMembershipRequest) XExternalsystem(xExternalsystem string) ProfileApiChangeMembershipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiChangeMembershipRequest) AcceptLanguage(acceptLanguage string) ProfileApiChangeMembershipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiChangeMembershipRequest) Execute() (*ChangedMembership, *http.Response, error) {
	return r.ApiService.ChangeMembershipExecute(r)
}

/*
ChangeMembership Change membership information on a profile

Use this API to update membership details on a profile. <p><strong>OperationId:</strong>changeMembership</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @param membershipType
 @param profileId
 @return ProfileApiChangeMembershipRequest
*/
func (a *ProfileApiService) ChangeMembership(ctx context.Context, membershipId string, membershipType string, profileId string) ProfileApiChangeMembershipRequest {
	return ProfileApiChangeMembershipRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
		membershipType: membershipType,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ChangedMembership
func (a *ProfileApiService) ChangeMembershipExecute(r ProfileApiChangeMembershipRequest) (*ChangedMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ChangeMembership")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/membershipType/{membershipType}/membershipId/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipType"+"}", url.PathEscape(parameterValueToString(r.membershipType, "membershipType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}
	if strlen(r.membershipType) < 1 {
		return localVarReturnValue, nil, reportError("membershipType must have at least 1 elements")
	}
	if strlen(r.membershipType) > 2000 {
		return localVarReturnValue, nil, reportError("membershipType must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membership
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiChangeProfileCashieringDetailsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileCashieringDetails *ChangeProfileCashieringDetailsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiChangeProfileCashieringDetailsRequest) Authorization(authorization string) ProfileApiChangeProfileCashieringDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiChangeProfileCashieringDetailsRequest) XAppKey(xAppKey string) ProfileApiChangeProfileCashieringDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiChangeProfileCashieringDetailsRequest) XHotelid(xHotelid string) ProfileApiChangeProfileCashieringDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing the profile cashiering details.
func (r ProfileApiChangeProfileCashieringDetailsRequest) ProfileCashieringDetails(profileCashieringDetails ChangeProfileCashieringDetailsRequest) ProfileApiChangeProfileCashieringDetailsRequest {
	r.profileCashieringDetails = &profileCashieringDetails
	return r
}

// External system code.
func (r ProfileApiChangeProfileCashieringDetailsRequest) XExternalsystem(xExternalsystem string) ProfileApiChangeProfileCashieringDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiChangeProfileCashieringDetailsRequest) AcceptLanguage(acceptLanguage string) ProfileApiChangeProfileCashieringDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiChangeProfileCashieringDetailsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ChangeProfileCashieringDetailsExecute(r)
}

/*
ChangeProfileCashieringDetails Change cashiering details for a profile

Update a profiles Financial details, such as billing, routing instructions. <p><strong>OperationId:</strong>changeProfileCashieringDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiChangeProfileCashieringDetailsRequest
*/
func (a *ProfileApiService) ChangeProfileCashieringDetails(ctx context.Context, profileId string) ProfileApiChangeProfileCashieringDetailsRequest {
	return ProfileApiChangeProfileCashieringDetailsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) ChangeProfileCashieringDetailsExecute(r ProfileApiChangeProfileCashieringDetailsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ChangeProfileCashieringDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/cashieringDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileCashieringDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiChangeProfileOwnersRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileOwners *ChangeProfileOwnersRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiChangeProfileOwnersRequest) Authorization(authorization string) ProfileApiChangeProfileOwnersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiChangeProfileOwnersRequest) XAppKey(xAppKey string) ProfileApiChangeProfileOwnersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiChangeProfileOwnersRequest) XHotelid(xHotelid string) ProfileApiChangeProfileOwnersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change profile owners.
func (r ProfileApiChangeProfileOwnersRequest) ProfileOwners(profileOwners ChangeProfileOwnersRequest) ProfileApiChangeProfileOwnersRequest {
	r.profileOwners = &profileOwners
	return r
}

// External system code.
func (r ProfileApiChangeProfileOwnersRequest) XExternalsystem(xExternalsystem string) ProfileApiChangeProfileOwnersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiChangeProfileOwnersRequest) AcceptLanguage(acceptLanguage string) ProfileApiChangeProfileOwnersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiChangeProfileOwnersRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ChangeProfileOwnersExecute(r)
}

/*
ChangeProfileOwners Change profile owners

Update an Owner on a profile  <p><strong>OperationId:</strong>changeProfileOwners</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiChangeProfileOwnersRequest
*/
func (a *ProfileApiService) ChangeProfileOwners(ctx context.Context, profileId string) ProfileApiChangeProfileOwnersRequest {
	return ProfileApiChangeProfileOwnersRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) ChangeProfileOwnersExecute(r ProfileApiChangeProfileOwnersRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ChangeProfileOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/owners"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileOwners
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiChangeStagedProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	id string
	authorization *string
	xAppKey *string
	xHotelid *string
	stagedProfile *ChangeStagedProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiChangeStagedProfileRequest) Authorization(authorization string) ProfileApiChangeStagedProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiChangeStagedProfileRequest) XAppKey(xAppKey string) ProfileApiChangeStagedProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiChangeStagedProfileRequest) XHotelid(xHotelid string) ProfileApiChangeStagedProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing the staged profile.
func (r ProfileApiChangeStagedProfileRequest) StagedProfile(stagedProfile ChangeStagedProfileRequest) ProfileApiChangeStagedProfileRequest {
	r.stagedProfile = &stagedProfile
	return r
}

// External system code.
func (r ProfileApiChangeStagedProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiChangeStagedProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiChangeStagedProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiChangeStagedProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiChangeStagedProfileRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ChangeStagedProfileExecute(r)
}

/*
ChangeStagedProfile Change a staged profile

This API can be used to update the staged Profile. <p><strong>OperationId:</strong>changeStagedProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ProfileApiChangeStagedProfileRequest
*/
func (a *ProfileApiService) ChangeStagedProfile(ctx context.Context, id string) ProfileApiChangeStagedProfileRequest {
	return ProfileApiChangeStagedProfileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) ChangeStagedProfileExecute(r ProfileApiChangeStagedProfileRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ChangeStagedProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stagedProfile/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 1 {
		return localVarReturnValue, nil, reportError("id must have at least 1 elements")
	}
	if strlen(r.id) > 2000 {
		return localVarReturnValue, nil, reportError("id must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.stagedProfile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiCheckProfileTypeRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	id *string
	idContext *string
	idType *string
	checkProfileInstruction *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiCheckProfileTypeRequest) Authorization(authorization string) ProfileApiCheckProfileTypeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiCheckProfileTypeRequest) XAppKey(xAppKey string) ProfileApiCheckProfileTypeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiCheckProfileTypeRequest) XHotelid(xHotelid string) ProfileApiCheckProfileTypeRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiCheckProfileTypeRequest) Id(id string) ProfileApiCheckProfileTypeRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiCheckProfileTypeRequest) IdContext(idContext string) ProfileApiCheckProfileTypeRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiCheckProfileTypeRequest) IdType(idType string) ProfileApiCheckProfileTypeRequest {
	r.idType = &idType
	return r
}

// Simple type that corresponds to check profile instructions.
func (r ProfileApiCheckProfileTypeRequest) CheckProfileInstruction(checkProfileInstruction string) ProfileApiCheckProfileTypeRequest {
	r.checkProfileInstruction = &checkProfileInstruction
	return r
}

// External system code.
func (r ProfileApiCheckProfileTypeRequest) XExternalsystem(xExternalsystem string) ProfileApiCheckProfileTypeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiCheckProfileTypeRequest) AcceptLanguage(acceptLanguage string) ProfileApiCheckProfileTypeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiCheckProfileTypeRequest) Execute() (*CheckedProfiles, *http.Response, error) {
	return r.ApiService.CheckProfileTypeExecute(r)
}

/*
CheckProfileType Validate and check profiles

This API validates/checks allowed actions, the existence of attached records and/or indicators of a profile. <p><strong>OperationId:</strong>checkProfileType</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiCheckProfileTypeRequest
*/
func (a *ProfileApiService) CheckProfileType(ctx context.Context) ProfileApiCheckProfileTypeRequest {
	return ProfileApiCheckProfileTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckedProfiles
func (a *ProfileApiService) CheckProfileTypeExecute(r ProfileApiCheckProfileTypeRequest) (*CheckedProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckedProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.CheckProfileType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/action/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
	}
	if r.checkProfileInstruction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkProfileInstruction", r.checkProfileInstruction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiConsumeECertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	certificateId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCertificateToConsume *ConsumeECertificateRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiConsumeECertificateRequest) Authorization(authorization string) ProfileApiConsumeECertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiConsumeECertificateRequest) XAppKey(xAppKey string) ProfileApiConsumeECertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiConsumeECertificateRequest) XHotelid(xHotelid string) ProfileApiConsumeECertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to Consume an E-Certificate.
func (r ProfileApiConsumeECertificateRequest) ECertificateToConsume(eCertificateToConsume ConsumeECertificateRequest) ProfileApiConsumeECertificateRequest {
	r.eCertificateToConsume = &eCertificateToConsume
	return r
}

// External system code.
func (r ProfileApiConsumeECertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiConsumeECertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiConsumeECertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiConsumeECertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiConsumeECertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ConsumeECertificateExecute(r)
}

/*
ConsumeECertificate Consume an E-Certificate

Use this API to consume (use) an E-Certificate.  <p><strong>OperationId:</strong>consumeECertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param certificateId
 @return ProfileApiConsumeECertificateRequest
*/
func (a *ProfileApiService) ConsumeECertificate(ctx context.Context, certificateId string) ProfileApiConsumeECertificateRequest {
	return ProfileApiConsumeECertificateRequest{
		ApiService: a,
		ctx: ctx,
		certificateId: certificateId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) ConsumeECertificateExecute(r ProfileApiConsumeECertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ConsumeECertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates/{certificateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"certificateId"+"}", url.PathEscape(parameterValueToString(r.certificateId, "certificateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.certificateId) < 1 {
		return localVarReturnValue, nil, reportError("certificateId must have at least 1 elements")
	}
	if strlen(r.certificateId) > 2000 {
		return localVarReturnValue, nil, reportError("certificateId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCertificateToConsume
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiCopyProfileCommissionAccountRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileCommissionAccountCopy *CopyProfileCommissionAccountRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiCopyProfileCommissionAccountRequest) Authorization(authorization string) ProfileApiCopyProfileCommissionAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiCopyProfileCommissionAccountRequest) XAppKey(xAppKey string) ProfileApiCopyProfileCommissionAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiCopyProfileCommissionAccountRequest) XHotelid(xHotelid string) ProfileApiCopyProfileCommissionAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for copying transaction groups configuration.
func (r ProfileApiCopyProfileCommissionAccountRequest) ProfileCommissionAccountCopy(profileCommissionAccountCopy CopyProfileCommissionAccountRequest) ProfileApiCopyProfileCommissionAccountRequest {
	r.profileCommissionAccountCopy = &profileCommissionAccountCopy
	return r
}

// External system code.
func (r ProfileApiCopyProfileCommissionAccountRequest) XExternalsystem(xExternalsystem string) ProfileApiCopyProfileCommissionAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiCopyProfileCommissionAccountRequest) AcceptLanguage(acceptLanguage string) ProfileApiCopyProfileCommissionAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiCopyProfileCommissionAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyProfileCommissionAccountExecute(r)
}

/*
CopyProfileCommissionAccount Copy profile commission account

You can use this API to copy the commission account on a profile <p><strong>OperationId:</strong>copyProfileCommissionAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @param hotelId
 @return ProfileApiCopyProfileCommissionAccountRequest
*/
func (a *ProfileApiService) CopyProfileCommissionAccount(ctx context.Context, profileId string, hotelId string) ProfileApiCopyProfileCommissionAccountRequest {
	return ProfileApiCopyProfileCommissionAccountRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) CopyProfileCommissionAccountExecute(r ProfileApiCopyProfileCommissionAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.CopyProfileCommissionAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/profiles/{profileId}/commissionAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileCommissionAccountCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteAccountForecastRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	periodCode string
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	periodCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteAccountForecastRequest) Authorization(authorization string) ProfileApiDeleteAccountForecastRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteAccountForecastRequest) XAppKey(xAppKey string) ProfileApiDeleteAccountForecastRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteAccountForecastRequest) XHotelid(xHotelid string) ProfileApiDeleteAccountForecastRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ProfileApiDeleteAccountForecastRequest) PeriodCodes(periodCodes []string) ProfileApiDeleteAccountForecastRequest {
	r.periodCodes = &periodCodes
	return r
}

// External system code.
func (r ProfileApiDeleteAccountForecastRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteAccountForecastRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteAccountForecastRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteAccountForecastRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteAccountForecastRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAccountForecastExecute(r)
}

/*
DeleteAccountForecast Delete account forecast in a hotel by period code

Use this to delete an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>deleteAccountForecast</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param periodCode Period Code.
 @param hotelId Unique ID of the hotel.
 @param profileId Unique Account Profile ID.
 @return ProfileApiDeleteAccountForecastRequest
*/
func (a *ProfileApiService) DeleteAccountForecast(ctx context.Context, periodCode string, hotelId string, profileId string) ProfileApiDeleteAccountForecastRequest {
	return ProfileApiDeleteAccountForecastRequest{
		ApiService: a,
		ctx: ctx,
		periodCode: periodCode,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteAccountForecastExecute(r ProfileApiDeleteAccountForecastRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteAccountForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/forecasts/periodCodes/{periodCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"periodCode"+"}", url.PathEscape(parameterValueToString(r.periodCode, "periodCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.periodCode) < 1 {
		return localVarReturnValue, nil, reportError("periodCode must have at least 1 elements")
	}
	if strlen(r.periodCode) > 2000 {
		return localVarReturnValue, nil, reportError("periodCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.periodCodes != nil {
		t := *r.periodCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "periodCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "periodCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteCertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteCertificateRequest) Authorization(authorization string) ProfileApiDeleteCertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteCertificateRequest) XAppKey(xAppKey string) ProfileApiDeleteCertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteCertificateRequest) XHotelid(xHotelid string) ProfileApiDeleteCertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiDeleteCertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteCertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteCertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteCertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteCertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteCertificateExecute(r)
}

/*
DeleteCertificate Delete certificate

This API will allow you to delete a certificate. <p><strong>OperationId:</strong>deleteCertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiDeleteCertificateRequest
*/
func (a *ProfileApiService) DeleteCertificate(ctx context.Context) ProfileApiDeleteCertificateRequest {
	return ProfileApiDeleteCertificateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteCertificateExecute(r ProfileApiDeleteCertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/certificates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteECertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	certificateId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteECertificateRequest) Authorization(authorization string) ProfileApiDeleteECertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteECertificateRequest) XAppKey(xAppKey string) ProfileApiDeleteECertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteECertificateRequest) XHotelid(xHotelid string) ProfileApiDeleteECertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiDeleteECertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteECertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteECertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteECertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteECertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteECertificateExecute(r)
}

/*
DeleteECertificate Delete e-certificate

This API allows you to delete an eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteECertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param certificateId
 @return ProfileApiDeleteECertificateRequest
*/
func (a *ProfileApiService) DeleteECertificate(ctx context.Context, certificateId string) ProfileApiDeleteECertificateRequest {
	return ProfileApiDeleteECertificateRequest{
		ApiService: a,
		ctx: ctx,
		certificateId: certificateId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteECertificateExecute(r ProfileApiDeleteECertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteECertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates/{certificateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"certificateId"+"}", url.PathEscape(parameterValueToString(r.certificateId, "certificateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.certificateId) < 1 {
		return localVarReturnValue, nil, reportError("certificateId must have at least 1 elements")
	}
	if strlen(r.certificateId) > 2000 {
		return localVarReturnValue, nil, reportError("certificateId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteGlobalPreferenceRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	preferenceCode string
	preferenceType string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	registeredProperty *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteGlobalPreferenceRequest) Authorization(authorization string) ProfileApiDeleteGlobalPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteGlobalPreferenceRequest) XAppKey(xAppKey string) ProfileApiDeleteGlobalPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteGlobalPreferenceRequest) XHotelid(xHotelid string) ProfileApiDeleteGlobalPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Profiles Registered Property
func (r ProfileApiDeleteGlobalPreferenceRequest) RegisteredProperty(registeredProperty string) ProfileApiDeleteGlobalPreferenceRequest {
	r.registeredProperty = &registeredProperty
	return r
}

// External system code.
func (r ProfileApiDeleteGlobalPreferenceRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteGlobalPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteGlobalPreferenceRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteGlobalPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteGlobalPreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteGlobalPreferenceExecute(r)
}

/*
DeleteGlobalPreference Delete a global preference from a profile

This will allow you to delete a global preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deleteGlobalPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param preferenceCode
 @param preferenceType
 @param profileId
 @return ProfileApiDeleteGlobalPreferenceRequest
*/
func (a *ProfileApiService) DeleteGlobalPreference(ctx context.Context, preferenceCode string, preferenceType string, profileId string) ProfileApiDeleteGlobalPreferenceRequest {
	return ProfileApiDeleteGlobalPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		preferenceCode: preferenceCode,
		preferenceType: preferenceType,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteGlobalPreferenceExecute(r ProfileApiDeleteGlobalPreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteGlobalPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/preferenceType/{preferenceType}/preferences/{preferenceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceCode"+"}", url.PathEscape(parameterValueToString(r.preferenceCode, "preferenceCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceType"+"}", url.PathEscape(parameterValueToString(r.preferenceType, "preferenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.preferenceCode) < 1 {
		return localVarReturnValue, nil, reportError("preferenceCode must have at least 1 elements")
	}
	if strlen(r.preferenceCode) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceCode must have less than 2000 elements")
	}
	if strlen(r.preferenceType) < 1 {
		return localVarReturnValue, nil, reportError("preferenceType must have at least 1 elements")
	}
	if strlen(r.preferenceType) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceType must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.registeredProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registeredProperty", r.registeredProperty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteMembershipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	membershipId string
	membershipType string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteMembershipRequest) Authorization(authorization string) ProfileApiDeleteMembershipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteMembershipRequest) XAppKey(xAppKey string) ProfileApiDeleteMembershipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteMembershipRequest) XHotelid(xHotelid string) ProfileApiDeleteMembershipRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiDeleteMembershipRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteMembershipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteMembershipRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteMembershipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteMembershipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteMembershipExecute(r)
}

/*
DeleteMembership Delete membership information from a profile

Use this API to delete membership details on a profile. <p><strong>OperationId:</strong>deleteMembership</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @param membershipType
 @param profileId
 @return ProfileApiDeleteMembershipRequest
*/
func (a *ProfileApiService) DeleteMembership(ctx context.Context, membershipId string, membershipType string, profileId string) ProfileApiDeleteMembershipRequest {
	return ProfileApiDeleteMembershipRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
		membershipType: membershipType,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteMembershipExecute(r ProfileApiDeleteMembershipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteMembership")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/membershipType/{membershipType}/membershipId/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipType"+"}", url.PathEscape(parameterValueToString(r.membershipType, "membershipType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}
	if strlen(r.membershipType) < 1 {
		return localVarReturnValue, nil, reportError("membershipType must have at least 1 elements")
	}
	if strlen(r.membershipType) > 2000 {
		return localVarReturnValue, nil, reportError("membershipType must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteMultipleAccountForecastsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	periodCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteMultipleAccountForecastsRequest) Authorization(authorization string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteMultipleAccountForecastsRequest) XAppKey(xAppKey string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteMultipleAccountForecastsRequest) XHotelid(xHotelid string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ProfileApiDeleteMultipleAccountForecastsRequest) PeriodCodes(periodCodes []string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.periodCodes = &periodCodes
	return r
}

// External system code.
func (r ProfileApiDeleteMultipleAccountForecastsRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteMultipleAccountForecastsRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteMultipleAccountForecastsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteMultipleAccountForecastsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteMultipleAccountForecastsExecute(r)
}

/*
DeleteMultipleAccountForecasts Delete multiple account forecasts

Use this API to delete multiple account forecasts. <p><strong>OperationId:</strong>deleteMultipleAccountForecasts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @param profileId Unique OPERA internal account profile ID
 @return ProfileApiDeleteMultipleAccountForecastsRequest
*/
func (a *ProfileApiService) DeleteMultipleAccountForecasts(ctx context.Context, hotelId string, profileId string) ProfileApiDeleteMultipleAccountForecastsRequest {
	return ProfileApiDeleteMultipleAccountForecastsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteMultipleAccountForecastsExecute(r ProfileApiDeleteMultipleAccountForecastsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteMultipleAccountForecasts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/forecasts"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.periodCodes != nil {
		t := *r.periodCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "periodCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "periodCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeletePreferenceRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	preferenceCode string
	preferenceType string
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	registeredProperty *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeletePreferenceRequest) Authorization(authorization string) ProfileApiDeletePreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeletePreferenceRequest) XAppKey(xAppKey string) ProfileApiDeletePreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeletePreferenceRequest) XHotelid(xHotelid string) ProfileApiDeletePreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Profiles Registered Property
func (r ProfileApiDeletePreferenceRequest) RegisteredProperty(registeredProperty string) ProfileApiDeletePreferenceRequest {
	r.registeredProperty = &registeredProperty
	return r
}

// External system code.
func (r ProfileApiDeletePreferenceRequest) XExternalsystem(xExternalsystem string) ProfileApiDeletePreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeletePreferenceRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeletePreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeletePreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePreferenceExecute(r)
}

/*
DeletePreference Delete a preference from a profile

This will allow you to delete a preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deletePreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param preferenceCode
 @param preferenceType
 @param hotelId
 @param profileId
 @return ProfileApiDeletePreferenceRequest
*/
func (a *ProfileApiService) DeletePreference(ctx context.Context, preferenceCode string, preferenceType string, hotelId string, profileId string) ProfileApiDeletePreferenceRequest {
	return ProfileApiDeletePreferenceRequest{
		ApiService: a,
		ctx: ctx,
		preferenceCode: preferenceCode,
		preferenceType: preferenceType,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeletePreferenceExecute(r ProfileApiDeletePreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeletePreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/preferenceType/{preferenceType}/preferences/{preferenceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceCode"+"}", url.PathEscape(parameterValueToString(r.preferenceCode, "preferenceCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceType"+"}", url.PathEscape(parameterValueToString(r.preferenceType, "preferenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.preferenceCode) < 1 {
		return localVarReturnValue, nil, reportError("preferenceCode must have at least 1 elements")
	}
	if strlen(r.preferenceCode) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceCode must have less than 2000 elements")
	}
	if strlen(r.preferenceType) < 1 {
		return localVarReturnValue, nil, reportError("preferenceType must have at least 1 elements")
	}
	if strlen(r.preferenceType) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceType must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.registeredProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registeredProperty", r.registeredProperty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteProfileRequest) Authorization(authorization string) ProfileApiDeleteProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteProfileRequest) XAppKey(xAppKey string) ProfileApiDeleteProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteProfileRequest) XHotelid(xHotelid string) ProfileApiDeleteProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiDeleteProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteProfileRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteProfileExecute(r)
}

/*
DeleteProfile Forget or delete a profile by ID

Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.
 @return ProfileApiDeleteProfileRequest
*/
func (a *ProfileApiService) DeleteProfile(ctx context.Context, profileId string) ProfileApiDeleteProfileRequest {
	return ProfileApiDeleteProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteProfileExecute(r ProfileApiDeleteProfileRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteProfileAttachmentRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	attachmentId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idExtension *[]int32
	idContext *[]string
	type_ *[]string
	uniqueIdIdExtension *[]int32
	uniqueIdIdContext *[]string
	uniqueIdType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteProfileAttachmentRequest) Authorization(authorization string) ProfileApiDeleteProfileAttachmentRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteProfileAttachmentRequest) XAppKey(xAppKey string) ProfileApiDeleteProfileAttachmentRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteProfileAttachmentRequest) XHotelid(xHotelid string) ProfileApiDeleteProfileAttachmentRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r ProfileApiDeleteProfileAttachmentRequest) IdExtension(idExtension []int32) ProfileApiDeleteProfileAttachmentRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiDeleteProfileAttachmentRequest) IdContext(idContext []string) ProfileApiDeleteProfileAttachmentRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiDeleteProfileAttachmentRequest) Type_(type_ []string) ProfileApiDeleteProfileAttachmentRequest {
	r.type_ = &type_
	return r
}

// Additional identifying value assigned by the creating system.
func (r ProfileApiDeleteProfileAttachmentRequest) UniqueIdIdExtension(uniqueIdIdExtension []int32) ProfileApiDeleteProfileAttachmentRequest {
	r.uniqueIdIdExtension = &uniqueIdIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiDeleteProfileAttachmentRequest) UniqueIdIdContext(uniqueIdIdContext []string) ProfileApiDeleteProfileAttachmentRequest {
	r.uniqueIdIdContext = &uniqueIdIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiDeleteProfileAttachmentRequest) UniqueIdType(uniqueIdType []string) ProfileApiDeleteProfileAttachmentRequest {
	r.uniqueIdType = &uniqueIdType
	return r
}

// External system code.
func (r ProfileApiDeleteProfileAttachmentRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteProfileAttachmentRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteProfileAttachmentRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteProfileAttachmentRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteProfileAttachmentRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteProfileAttachmentExecute(r)
}

/*
DeleteProfileAttachment Delete profile attachment

This API will delete an attachment on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteProfileAttachment</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attachmentId
 @param profileId
 @return ProfileApiDeleteProfileAttachmentRequest
*/
func (a *ProfileApiService) DeleteProfileAttachment(ctx context.Context, attachmentId string, profileId string) ProfileApiDeleteProfileAttachmentRequest {
	return ProfileApiDeleteProfileAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		attachmentId: attachmentId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteProfileAttachmentExecute(r ProfileApiDeleteProfileAttachmentRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteProfileAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/attachments/{attachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"attachmentId"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.attachmentId) < 1 {
		return localVarReturnValue, nil, reportError("attachmentId must have at least 1 elements")
	}
	if strlen(r.attachmentId) > 2000 {
		return localVarReturnValue, nil, reportError("attachmentId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.idExtension != nil {
		t := *r.idExtension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", t, "multi")
		}
	}
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.uniqueIdIdExtension != nil {
		t := *r.uniqueIdIdExtension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdIdExtension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdIdExtension", t, "multi")
		}
	}
	if r.uniqueIdIdContext != nil {
		t := *r.uniqueIdIdContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdIdContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdIdContext", t, "multi")
		}
	}
	if r.uniqueIdType != nil {
		t := *r.uniqueIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uniqueIdType", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteProfileCommissionAccountRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	validatePending *bool
	hotelId *string
	profileIdExtension *int32
	profileContext *string
	profileType *string
	bankAccountId *string
	bankAccountIdExtension *int32
	bankAccountIdContext *string
	bankAccountIdType *string
	commissionCode *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteProfileCommissionAccountRequest) Authorization(authorization string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteProfileCommissionAccountRequest) XAppKey(xAppKey string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteProfileCommissionAccountRequest) XHotelid(xHotelid string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used in CRUD operations. When set to true, proceed validating pending commissions
func (r ProfileApiDeleteProfileCommissionAccountRequest) ValidatePending(validatePending bool) ProfileApiDeleteProfileCommissionAccountRequest {
	r.validatePending = &validatePending
	return r
}

// Hotel code from which the profile bank account and code belongs to
func (r ProfileApiDeleteProfileCommissionAccountRequest) HotelId(hotelId string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.hotelId = &hotelId
	return r
}

// Additional identifying value assigned by the creating system.
func (r ProfileApiDeleteProfileCommissionAccountRequest) ProfileIdExtension(profileIdExtension int32) ProfileApiDeleteProfileCommissionAccountRequest {
	r.profileIdExtension = &profileIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiDeleteProfileCommissionAccountRequest) ProfileContext(profileContext string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiDeleteProfileCommissionAccountRequest) ProfileType(profileType string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.profileType = &profileType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiDeleteProfileCommissionAccountRequest) BankAccountId(bankAccountId string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.bankAccountId = &bankAccountId
	return r
}

// Additional identifying value assigned by the creating system.
func (r ProfileApiDeleteProfileCommissionAccountRequest) BankAccountIdExtension(bankAccountIdExtension int32) ProfileApiDeleteProfileCommissionAccountRequest {
	r.bankAccountIdExtension = &bankAccountIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiDeleteProfileCommissionAccountRequest) BankAccountIdContext(bankAccountIdContext string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.bankAccountIdContext = &bankAccountIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiDeleteProfileCommissionAccountRequest) BankAccountIdType(bankAccountIdType string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.bankAccountIdType = &bankAccountIdType
	return r
}

// Code.
func (r ProfileApiDeleteProfileCommissionAccountRequest) CommissionCode(commissionCode string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.commissionCode = &commissionCode
	return r
}

// description.
func (r ProfileApiDeleteProfileCommissionAccountRequest) Description(description string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.description = &description
	return r
}

// External system code.
func (r ProfileApiDeleteProfileCommissionAccountRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteProfileCommissionAccountRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteProfileCommissionAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteProfileCommissionAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteProfileCommissionAccountExecute(r)
}

/*
DeleteProfileCommissionAccount Delete a commission account from a profile

Delete a Commission Account from a specified profile. <p><strong>OperationId:</strong>deleteProfileCommissionAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiDeleteProfileCommissionAccountRequest
*/
func (a *ProfileApiService) DeleteProfileCommissionAccount(ctx context.Context, profileId string) ProfileApiDeleteProfileCommissionAccountRequest {
	return ProfileApiDeleteProfileCommissionAccountRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteProfileCommissionAccountExecute(r ProfileApiDeleteProfileCommissionAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteProfileCommissionAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/commissionAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.validatePending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validatePending", r.validatePending, "")
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.profileIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdExtension", r.profileIdExtension, "")
	}
	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	if r.bankAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountId", r.bankAccountId, "")
	}
	if r.bankAccountIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountIdExtension", r.bankAccountIdExtension, "")
	}
	if r.bankAccountIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountIdContext", r.bankAccountIdContext, "")
	}
	if r.bankAccountIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountIdType", r.bankAccountIdType, "")
	}
	if r.commissionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionCode", r.commissionCode, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDeleteProfilePermanentlyRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDeleteProfilePermanentlyRequest) Authorization(authorization string) ProfileApiDeleteProfilePermanentlyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDeleteProfilePermanentlyRequest) XAppKey(xAppKey string) ProfileApiDeleteProfilePermanentlyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDeleteProfilePermanentlyRequest) XHotelid(xHotelid string) ProfileApiDeleteProfilePermanentlyRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiDeleteProfilePermanentlyRequest) XExternalsystem(xExternalsystem string) ProfileApiDeleteProfilePermanentlyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDeleteProfilePermanentlyRequest) AcceptLanguage(acceptLanguage string) ProfileApiDeleteProfilePermanentlyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDeleteProfilePermanentlyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteProfilePermanentlyExecute(r)
}

/*
DeleteProfilePermanently Delete the profile permanently.

 <p><strong>OperationId:</strong>deleteProfilePermanently</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiDeleteProfilePermanentlyRequest
*/
func (a *ProfileApiService) DeleteProfilePermanently(ctx context.Context, profileId string) ProfileApiDeleteProfilePermanentlyRequest {
	return ProfileApiDeleteProfilePermanentlyRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DeleteProfilePermanentlyExecute(r ProfileApiDeleteProfilePermanentlyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DeleteProfilePermanently")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/action/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiDistributePreferenceRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	preference *DistributePreferenceRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiDistributePreferenceRequest) Authorization(authorization string) ProfileApiDistributePreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiDistributePreferenceRequest) XAppKey(xAppKey string) ProfileApiDistributePreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiDistributePreferenceRequest) XHotelid(xHotelid string) ProfileApiDistributePreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for distribute Preference. This object contains unique identifiers for each profile and list of preferences to be associated with the profile. The standard optional Opera Context element is also included.
func (r ProfileApiDistributePreferenceRequest) Preference(preference DistributePreferenceRequest) ProfileApiDistributePreferenceRequest {
	r.preference = &preference
	return r
}

// External system code.
func (r ProfileApiDistributePreferenceRequest) XExternalsystem(xExternalsystem string) ProfileApiDistributePreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiDistributePreferenceRequest) AcceptLanguage(acceptLanguage string) ProfileApiDistributePreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiDistributePreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DistributePreferenceExecute(r)
}

/*
DistributePreference Distribute preferences on a profile

With this API you can distribute preferences on a profile. <p><strong>OperationId:</strong>distributePreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiDistributePreferenceRequest
*/
func (a *ProfileApiService) DistributePreference(ctx context.Context, profileId string) ProfileApiDistributePreferenceRequest {
	return ProfileApiDistributePreferenceRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) DistributePreferenceExecute(r ProfileApiDistributePreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.DistributePreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.preference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiExtendECertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	certificateId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCertificateToExtend *ExtendECertificateRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiExtendECertificateRequest) Authorization(authorization string) ProfileApiExtendECertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiExtendECertificateRequest) XAppKey(xAppKey string) ProfileApiExtendECertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiExtendECertificateRequest) XHotelid(xHotelid string) ProfileApiExtendECertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to Consume an E-Certificate.
func (r ProfileApiExtendECertificateRequest) ECertificateToExtend(eCertificateToExtend ExtendECertificateRequest) ProfileApiExtendECertificateRequest {
	r.eCertificateToExtend = &eCertificateToExtend
	return r
}

// External system code.
func (r ProfileApiExtendECertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiExtendECertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiExtendECertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiExtendECertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiExtendECertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtendECertificateExecute(r)
}

/*
ExtendECertificate Extend E-Certificate Expiry date

Use this API to extend the date of an existing E-Certificate. <p><strong>OperationId:</strong>extendECertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param certificateId
 @return ProfileApiExtendECertificateRequest
*/
func (a *ProfileApiService) ExtendECertificate(ctx context.Context, certificateId string) ProfileApiExtendECertificateRequest {
	return ProfileApiExtendECertificateRequest{
		ApiService: a,
		ctx: ctx,
		certificateId: certificateId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) ExtendECertificateExecute(r ProfileApiExtendECertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ExtendECertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates/{certificateId}/extensions"
	localVarPath = strings.Replace(localVarPath, "{"+"certificateId"+"}", url.PathEscape(parameterValueToString(r.certificateId, "certificateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.certificateId) < 1 {
		return localVarReturnValue, nil, reportError("certificateId must have at least 1 elements")
	}
	if strlen(r.certificateId) > 2000 {
		return localVarReturnValue, nil, reportError("certificateId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCertificateToExtend
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetAccountForecastsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fromPeriodCode *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetAccountForecastsRequest) Authorization(authorization string) ProfileApiGetAccountForecastsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetAccountForecastsRequest) XAppKey(xAppKey string) ProfileApiGetAccountForecastsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetAccountForecastsRequest) XHotelid(xHotelid string) ProfileApiGetAccountForecastsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Specifies the From Fiscal or Calendar Period Code
func (r ProfileApiGetAccountForecastsRequest) FromPeriodCode(fromPeriodCode string) ProfileApiGetAccountForecastsRequest {
	r.fromPeriodCode = &fromPeriodCode
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetAccountForecastsRequest) Limit(limit int32) ProfileApiGetAccountForecastsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetAccountForecastsRequest) Offset(offset int32) ProfileApiGetAccountForecastsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileApiGetAccountForecastsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetAccountForecastsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetAccountForecastsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetAccountForecastsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetAccountForecastsRequest) Execute() (*AccountForecasts, *http.Response, error) {
	return r.ApiService.GetAccountForecastsExecute(r)
}

/*
GetAccountForecasts Fetch Account Forecasts by hotel

You can use this API to retrieve account forecasts for a hotel <p><strong>OperationId:</strong>getAccountForecasts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code
 @param profileId Unique OPERA internal account profile ID
 @return ProfileApiGetAccountForecastsRequest
*/
func (a *ProfileApiService) GetAccountForecasts(ctx context.Context, hotelId string, profileId string) ProfileApiGetAccountForecastsRequest {
	return ProfileApiGetAccountForecastsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return AccountForecasts
func (a *ProfileApiService) GetAccountForecastsExecute(r ProfileApiGetAccountForecastsRequest) (*AccountForecasts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountForecasts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetAccountForecasts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/forecasts"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.fromPeriodCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromPeriodCode", r.fromPeriodCode, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetAddressRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	excludeNoCity *bool
	cityName *string
	postalCode *string
	state *string
	code *string
	streetAddress *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetAddressRequest) Authorization(authorization string) ProfileApiGetAddressRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetAddressRequest) XAppKey(xAppKey string) ProfileApiGetAddressRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetAddressRequest) XHotelid(xHotelid string) ProfileApiGetAddressRequest {
	r.xHotelid = &xHotelid
	return r
}

// When true indicates that only profiles with city will be fetched.
func (r ProfileApiGetAddressRequest) ExcludeNoCity(excludeNoCity bool) ProfileApiGetAddressRequest {
	r.excludeNoCity = &excludeNoCity
	return r
}

// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
func (r ProfileApiGetAddressRequest) CityName(cityName string) ProfileApiGetAddressRequest {
	r.cityName = &cityName
	return r
}

// Post Office Code number.
func (r ProfileApiGetAddressRequest) PostalCode(postalCode string) ProfileApiGetAddressRequest {
	r.postalCode = &postalCode
	return r
}

// State or Province name (e.g., Texas).
func (r ProfileApiGetAddressRequest) State(state string) ProfileApiGetAddressRequest {
	r.state = &state
	return r
}

// Code for a country or a nationality.
func (r ProfileApiGetAddressRequest) Code(code string) ProfileApiGetAddressRequest {
	r.code = &code
	return r
}

// First Line of Street Address. For profile search it matches the first Address line.
func (r ProfileApiGetAddressRequest) StreetAddress(streetAddress string) ProfileApiGetAddressRequest {
	r.streetAddress = &streetAddress
	return r
}

// External system code.
func (r ProfileApiGetAddressRequest) XExternalsystem(xExternalsystem string) ProfileApiGetAddressRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetAddressRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetAddressRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetAddressRequest) Execute() (*CityState, *http.Response, error) {
	return r.ApiService.GetAddressExecute(r)
}

/*
GetAddress Get city states

This API will get city and states. <p><strong>OperationId:</strong>getAddress</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetAddressRequest
*/
func (a *ProfileApiService) GetAddress(ctx context.Context) ProfileApiGetAddressRequest {
	return ProfileApiGetAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CityState
func (a *ProfileApiService) GetAddressExecute(r ProfileApiGetAddressRequest) (*CityState, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CityState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.excludeNoCity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeNoCity", r.excludeNoCity, "")
	}
	if r.cityName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cityName", r.cityName, "")
	}
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	}
	if r.streetAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streetAddress", r.streetAddress, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetAwardsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileContext *string
	profileType *string
	hotelId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetAwardsRequest) Authorization(authorization string) ProfileApiGetAwardsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetAwardsRequest) XAppKey(xAppKey string) ProfileApiGetAwardsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetAwardsRequest) XHotelid(xHotelid string) ProfileApiGetAwardsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetAwardsRequest) ProfileContext(profileContext string) ProfileApiGetAwardsRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetAwardsRequest) ProfileType(profileType string) ProfileApiGetAwardsRequest {
	r.profileType = &profileType
	return r
}

// Hotel Code for which the routing instructions are provided for a profile.
func (r ProfileApiGetAwardsRequest) HotelId(hotelId string) ProfileApiGetAwardsRequest {
	r.hotelId = &hotelId
	return r
}

// External system code.
func (r ProfileApiGetAwardsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetAwardsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetAwardsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetAwardsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetAwardsRequest) Execute() (*AwardDetails, *http.Response, error) {
	return r.ApiService.GetAwardsExecute(r)
}

/*
GetAwards Get Profile awards and certificates

Get Profile awards and certificates that exist on a profile. <p><strong>OperationId:</strong>getAwards</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetAwardsRequest
*/
func (a *ProfileApiService) GetAwards(ctx context.Context, profileId string) ProfileApiGetAwardsRequest {
	return ProfileApiGetAwardsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return AwardDetails
func (a *ProfileApiService) GetAwardsExecute(r ProfileApiGetAwardsRequest) (*AwardDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwardDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetAwards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/awardsAndCertificates"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetCashieringDetailsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchPaymentMethod *bool
	fetchRoutingInstruction *bool
	idContext *string
	idType *string
	hotelIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetCashieringDetailsRequest) Authorization(authorization string) ProfileApiGetCashieringDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetCashieringDetailsRequest) XAppKey(xAppKey string) ProfileApiGetCashieringDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetCashieringDetailsRequest) XHotelid(xHotelid string) ProfileApiGetCashieringDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Boolean flag that indicates whether the payment method has to be fetched or not.
func (r ProfileApiGetCashieringDetailsRequest) FetchPaymentMethod(fetchPaymentMethod bool) ProfileApiGetCashieringDetailsRequest {
	r.fetchPaymentMethod = &fetchPaymentMethod
	return r
}

// Boolean flag that indicates whether the routing instruction has to be fetched or not.
func (r ProfileApiGetCashieringDetailsRequest) FetchRoutingInstruction(fetchRoutingInstruction bool) ProfileApiGetCashieringDetailsRequest {
	r.fetchRoutingInstruction = &fetchRoutingInstruction
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetCashieringDetailsRequest) IdContext(idContext string) ProfileApiGetCashieringDetailsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetCashieringDetailsRequest) IdType(idType string) ProfileApiGetCashieringDetailsRequest {
	r.idType = &idType
	return r
}

// List of Hotel Codes.
func (r ProfileApiGetCashieringDetailsRequest) HotelIds(hotelIds []string) ProfileApiGetCashieringDetailsRequest {
	r.hotelIds = &hotelIds
	return r
}

// External system code.
func (r ProfileApiGetCashieringDetailsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetCashieringDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetCashieringDetailsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetCashieringDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetCashieringDetailsRequest) Execute() (*ProfileCashieringDetailsInfo, *http.Response, error) {
	return r.ApiService.GetCashieringDetailsExecute(r)
}

/*
GetCashieringDetails Get cashiering details for a profile

Retrieve any profile Financial details that exists on a profile (typically Company or Travel Agent profiles).  This includes Routing Instructions on the profile. <p><strong>OperationId:</strong>getCashieringDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetCashieringDetailsRequest
*/
func (a *ProfileApiService) GetCashieringDetails(ctx context.Context, profileId string) ProfileApiGetCashieringDetailsRequest {
	return ProfileApiGetCashieringDetailsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileCashieringDetailsInfo
func (a *ProfileApiService) GetCashieringDetailsExecute(r ProfileApiGetCashieringDetailsRequest) (*ProfileCashieringDetailsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileCashieringDetailsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetCashieringDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/cashieringDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.fetchPaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchPaymentMethod", r.fetchPaymentMethod, "")
	}
	if r.fetchRoutingInstruction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchRoutingInstruction", r.fetchRoutingInstruction, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
	}
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetCompanyProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	corporateID string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetCompanyProfileRequest) Authorization(authorization string) ProfileApiGetCompanyProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetCompanyProfileRequest) XAppKey(xAppKey string) ProfileApiGetCompanyProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetCompanyProfileRequest) XHotelid(xHotelid string) ProfileApiGetCompanyProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetCompanyProfileRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetCompanyProfileRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ProfileApiGetCompanyProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiGetCompanyProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetCompanyProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetCompanyProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetCompanyProfileRequest) Execute() (*Company, *http.Response, error) {
	return r.ApiService.GetCompanyProfileExecute(r)
}

/*
GetCompanyProfile Get company profile by corporate ID

Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporateID Unique OPERA Corporate ID used to find company/agent/group/source profile in OPERA.
 @return ProfileApiGetCompanyProfileRequest
*/
func (a *ProfileApiService) GetCompanyProfile(ctx context.Context, corporateID string) ProfileApiGetCompanyProfileRequest {
	return ProfileApiGetCompanyProfileRequest{
		ApiService: a,
		ctx: ctx,
		corporateID: corporateID,
	}
}

// Execute executes the request
//  @return Company
func (a *ProfileApiService) GetCompanyProfileExecute(r ProfileApiGetCompanyProfileRequest) (*Company, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Company
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetCompanyProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{corporateID}"
	localVarPath = strings.Replace(localVarPath, "{"+"corporateID"+"}", url.PathEscape(parameterValueToString(r.corporateID, "corporateID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.corporateID) < 1 {
		return localVarReturnValue, nil, reportError("corporateID must have at least 1 elements")
	}
	if strlen(r.corporateID) > 2000 {
		return localVarReturnValue, nil, reportError("corporateID must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetDuplicateExternalSubscriptionsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	databaseId *string
	profileId *string
	profileContext *string
	profileType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) Authorization(authorization string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) XAppKey(xAppKey string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) XHotelid(xHotelid string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) Limit(limit int32) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) Offset(offset int32) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.offset = &offset
	return r
}

// Code identifying the external database record which is linked to external systems.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) DatabaseId(databaseId string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.databaseId = &databaseId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) ProfileId(profileId string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) ProfileContext(profileContext string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) ProfileType(profileType string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.profileType = &profileType
	return r
}

// External system code.
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetDuplicateExternalSubscriptionsRequest) Execute() (*DuplicateExternalSubscriptions, *http.Response, error) {
	return r.ApiService.GetDuplicateExternalSubscriptionsExecute(r)
}

/*
GetDuplicateExternalSubscriptions Get profiles with duplicate external subscriptions 

Fetch profile subscriptions where the same OPERA Cloud profile is linked to multiple external profiles, within the same external system. <p><strong>OperationId:</strong>getDuplicateExternalSubscriptions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetDuplicateExternalSubscriptionsRequest
*/
func (a *ProfileApiService) GetDuplicateExternalSubscriptions(ctx context.Context) ProfileApiGetDuplicateExternalSubscriptionsRequest {
	return ProfileApiGetDuplicateExternalSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DuplicateExternalSubscriptions
func (a *ProfileApiService) GetDuplicateExternalSubscriptionsExecute(r ProfileApiGetDuplicateExternalSubscriptionsRequest) (*DuplicateExternalSubscriptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DuplicateExternalSubscriptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetDuplicateExternalSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/duplicateExternalSubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.databaseId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "databaseId", r.databaseId, "")
	}
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
	}
	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetDuplicateOPERASubscriptionsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	databaseId *string
	profileId *string
	profileContext *string
	profileType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) Authorization(authorization string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) XAppKey(xAppKey string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) XHotelid(xHotelid string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) Limit(limit int32) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) Offset(offset int32) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.offset = &offset
	return r
}

// Code identifying the external database record which is linked to external systems.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) DatabaseId(databaseId string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.databaseId = &databaseId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) ProfileId(profileId string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) ProfileContext(profileContext string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) ProfileType(profileType string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.profileType = &profileType
	return r
}

// External system code.
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetDuplicateOPERASubscriptionsRequest) Execute() (*DuplicateOPERASubscriptions, *http.Response, error) {
	return r.ApiService.GetDuplicateOPERASubscriptionsExecute(r)
}

/*
GetDuplicateOPERASubscriptions Get profiles with duplicate OPERA Cloud subscriptions

Fetch subscriptions where an external profile within a particular external system is linked to multiple OPERA Cloud profiles. <p><strong>OperationId:</strong>getDuplicateOPERASubscriptions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetDuplicateOPERASubscriptionsRequest
*/
func (a *ProfileApiService) GetDuplicateOPERASubscriptions(ctx context.Context) ProfileApiGetDuplicateOPERASubscriptionsRequest {
	return ProfileApiGetDuplicateOPERASubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DuplicateOPERASubscriptions
func (a *ProfileApiService) GetDuplicateOPERASubscriptionsExecute(r ProfileApiGetDuplicateOPERASubscriptionsRequest) (*DuplicateOPERASubscriptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DuplicateOPERASubscriptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetDuplicateOPERASubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/duplicateOPERASubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.databaseId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "databaseId", r.databaseId, "")
	}
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
	}
	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetECertificatesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	profileId *string
	profileContext *string
	profileType *string
	hotelId *string
	code *string
	groupCode *string
	status *[]string
	includeInactive *bool
	voucherNo *string
	excludeVoucherNumbers *[]string
	availableECertificates *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetECertificatesRequest) Authorization(authorization string) ProfileApiGetECertificatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetECertificatesRequest) XAppKey(xAppKey string) ProfileApiGetECertificatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetECertificatesRequest) XHotelid(xHotelid string) ProfileApiGetECertificatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetECertificatesRequest) ProfileId(profileId string) ProfileApiGetECertificatesRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetECertificatesRequest) ProfileContext(profileContext string) ProfileApiGetECertificatesRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetECertificatesRequest) ProfileType(profileType string) ProfileApiGetECertificatesRequest {
	r.profileType = &profileType
	return r
}

// Property for which preferences are to be fetched.
func (r ProfileApiGetECertificatesRequest) HotelId(hotelId string) ProfileApiGetECertificatesRequest {
	r.hotelId = &hotelId
	return r
}

// Ecertificates search criteria
func (r ProfileApiGetECertificatesRequest) Code(code string) ProfileApiGetECertificatesRequest {
	r.code = &code
	return r
}

// Ecertificates search criteria
func (r ProfileApiGetECertificatesRequest) GroupCode(groupCode string) ProfileApiGetECertificatesRequest {
	r.groupCode = &groupCode
	return r
}

// Indicates that OPERA E-Certificate is reserved.
func (r ProfileApiGetECertificatesRequest) Status(status []string) ProfileApiGetECertificatesRequest {
	r.status = &status
	return r
}

// Include or not include inactive E-certificate.
func (r ProfileApiGetECertificatesRequest) IncludeInactive(includeInactive bool) ProfileApiGetECertificatesRequest {
	r.includeInactive = &includeInactive
	return r
}

// System generated unique voucher number.
func (r ProfileApiGetECertificatesRequest) VoucherNo(voucherNo string) ProfileApiGetECertificatesRequest {
	r.voucherNo = &voucherNo
	return r
}

// List of System generated unique voucher numbers to be excluded.
func (r ProfileApiGetECertificatesRequest) ExcludeVoucherNumbers(excludeVoucherNumbers []string) ProfileApiGetECertificatesRequest {
	r.excludeVoucherNumbers = &excludeVoucherNumbers
	return r
}

// Search criteria to limit Ecertificates that are available for reservation consumption.
func (r ProfileApiGetECertificatesRequest) AvailableECertificates(availableECertificates bool) ProfileApiGetECertificatesRequest {
	r.availableECertificates = &availableECertificates
	return r
}

// External system code.
func (r ProfileApiGetECertificatesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetECertificatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetECertificatesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetECertificatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetECertificatesRequest) Execute() (*ECertificates, *http.Response, error) {
	return r.ApiService.GetECertificatesExecute(r)
}

/*
GetECertificates Get e-certificate

This API allows you to retrieve eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getECertificates</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetECertificatesRequest
*/
func (a *ProfileApiService) GetECertificates(ctx context.Context) ProfileApiGetECertificatesRequest {
	return ProfileApiGetECertificatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ECertificates
func (a *ProfileApiService) GetECertificatesExecute(r ProfileApiGetECertificatesRequest) (*ECertificates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ECertificates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetECertificates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
	}
	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	}
	if r.groupCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupCode", r.groupCode, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	if r.voucherNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voucherNo", r.voucherNo, "")
	}
	if r.excludeVoucherNumbers != nil {
		t := *r.excludeVoucherNumbers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVoucherNumbers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVoucherNumbers", t, "multi")
		}
	}
	if r.availableECertificates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "availableECertificates", r.availableECertificates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetFulfillmentExportLogsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *string
	idContext *string
	idType *string
	membershipType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetFulfillmentExportLogsRequest) Authorization(authorization string) ProfileApiGetFulfillmentExportLogsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetFulfillmentExportLogsRequest) XAppKey(xAppKey string) ProfileApiGetFulfillmentExportLogsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetFulfillmentExportLogsRequest) XHotelid(xHotelid string) ProfileApiGetFulfillmentExportLogsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetFulfillmentExportLogsRequest) Id(id string) ProfileApiGetFulfillmentExportLogsRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetFulfillmentExportLogsRequest) IdContext(idContext string) ProfileApiGetFulfillmentExportLogsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetFulfillmentExportLogsRequest) IdType(idType string) ProfileApiGetFulfillmentExportLogsRequest {
	r.idType = &idType
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ProfileApiGetFulfillmentExportLogsRequest) MembershipType(membershipType string) ProfileApiGetFulfillmentExportLogsRequest {
	r.membershipType = &membershipType
	return r
}

// External system code.
func (r ProfileApiGetFulfillmentExportLogsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetFulfillmentExportLogsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetFulfillmentExportLogsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetFulfillmentExportLogsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetFulfillmentExportLogsRequest) Execute() (*FulfillmentExportedLogs, *http.Response, error) {
	return r.ApiService.GetFulfillmentExportLogsExecute(r)
}

/*
GetFulfillmentExportLogs Get Fulfillment Export Logs

Use this API to Get Fulfillment Export Logs. <p><strong>OperationId:</strong>getFulfillmentExportLogs</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileApiGetFulfillmentExportLogsRequest
*/
func (a *ProfileApiService) GetFulfillmentExportLogs(ctx context.Context, membershipId string) ProfileApiGetFulfillmentExportLogsRequest {
	return ProfileApiGetFulfillmentExportLogsRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return FulfillmentExportedLogs
func (a *ProfileApiService) GetFulfillmentExportLogsExecute(r ProfileApiGetFulfillmentExportLogsRequest) (*FulfillmentExportedLogs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FulfillmentExportedLogs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetFulfillmentExportLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/fullfillmentExportLogs"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
	}
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetGuestProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	guestId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetGuestProfileRequest) Authorization(authorization string) ProfileApiGetGuestProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetGuestProfileRequest) XAppKey(xAppKey string) ProfileApiGetGuestProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetGuestProfileRequest) XHotelid(xHotelid string) ProfileApiGetGuestProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code used to filter hotel specific information regarding the profile.
func (r ProfileApiGetGuestProfileRequest) HotelId(hotelId string) ProfileApiGetGuestProfileRequest {
	r.hotelId = &hotelId
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetGuestProfileRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetGuestProfileRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ProfileApiGetGuestProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiGetGuestProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetGuestProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetGuestProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetGuestProfileRequest) Execute() (*Guest, *http.Response, error) {
	return r.ApiService.GetGuestProfileExecute(r)
}

/*
GetGuestProfile Get guest profile by guest ID

Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don't know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guestId Unique OPERA internal ID used to find guest/contact/employee profile in OPERA.
 @return ProfileApiGetGuestProfileRequest
*/
func (a *ProfileApiService) GetGuestProfile(ctx context.Context, guestId string) ProfileApiGetGuestProfileRequest {
	return ProfileApiGetGuestProfileRequest{
		ApiService: a,
		ctx: ctx,
		guestId: guestId,
	}
}

// Execute executes the request
//  @return Guest
func (a *ProfileApiService) GetGuestProfileExecute(r ProfileApiGetGuestProfileRequest) (*Guest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Guest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetGuestProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guests/{guestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"guestId"+"}", url.PathEscape(parameterValueToString(r.guestId, "guestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.guestId) < 1 {
		return localVarReturnValue, nil, reportError("guestId must have at least 1 elements")
	}
	if strlen(r.guestId) > 2000 {
		return localVarReturnValue, nil, reportError("guestId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetLinkedProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idContext *string
	idType *string
	profileTypes *[]string
	accountsReceivables *bool
	corporateProfiles *bool
	excludeInactive *bool
	excludeIncompleteProfiles *bool
	includeHasHierarchyOnly *bool
	negotiatedRates *bool
	linkedProfileAdditionalCriteriaProfileType *string
	linkedProfileid *string
	linkedProfileIdContext *string
	linkedProfileIdType *string
	name *string
	givenName *string
	excludeNoCity *bool
	cityName *string
	postalCode *string
	state *string
	countryCode *string
	streetAddress *string
	ownerCode *[]string
	aRNumber *string
	prioritiesCode *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetLinkedProfilesRequest) Authorization(authorization string) ProfileApiGetLinkedProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetLinkedProfilesRequest) XAppKey(xAppKey string) ProfileApiGetLinkedProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetLinkedProfilesRequest) XHotelid(xHotelid string) ProfileApiGetLinkedProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetLinkedProfilesRequest) IdContext(idContext string) ProfileApiGetLinkedProfilesRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetLinkedProfilesRequest) IdType(idType string) ProfileApiGetLinkedProfilesRequest {
	r.idType = &idType
	return r
}

// The types of Profile handled by the web service.
func (r ProfileApiGetLinkedProfilesRequest) ProfileTypes(profileTypes []string) ProfileApiGetLinkedProfilesRequest {
	r.profileTypes = &profileTypes
	return r
}

// When true indicates that only profiles with AR account fetched.
func (r ProfileApiGetLinkedProfilesRequest) AccountsReceivables(accountsReceivables bool) ProfileApiGetLinkedProfilesRequest {
	r.accountsReceivables = &accountsReceivables
	return r
}

// When true indicates that only profiles with client id are searched for.
func (r ProfileApiGetLinkedProfilesRequest) CorporateProfiles(corporateProfiles bool) ProfileApiGetLinkedProfilesRequest {
	r.corporateProfiles = &corporateProfiles
	return r
}

// Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.
func (r ProfileApiGetLinkedProfilesRequest) ExcludeInactive(excludeInactive bool) ProfileApiGetLinkedProfilesRequest {
	r.excludeInactive = &excludeInactive
	return r
}

// When true indicates that only profiles with an Address Line 1 and Country or at least one Communications Type will be displayed.
func (r ProfileApiGetLinkedProfilesRequest) ExcludeIncompleteProfiles(excludeIncompleteProfiles bool) ProfileApiGetLinkedProfilesRequest {
	r.excludeIncompleteProfiles = &excludeIncompleteProfiles
	return r
}

// Include profiles that have one or more relationships in the search.
func (r ProfileApiGetLinkedProfilesRequest) IncludeHasHierarchyOnly(includeHasHierarchyOnly bool) ProfileApiGetLinkedProfilesRequest {
	r.includeHasHierarchyOnly = &includeHasHierarchyOnly
	return r
}

// When true indicates that this option has to be included in advanced search.
func (r ProfileApiGetLinkedProfilesRequest) NegotiatedRates(negotiatedRates bool) ProfileApiGetLinkedProfilesRequest {
	r.negotiatedRates = &negotiatedRates
	return r
}

// The types of Profile handled by the web service.
func (r ProfileApiGetLinkedProfilesRequest) LinkedProfileAdditionalCriteriaProfileType(linkedProfileAdditionalCriteriaProfileType string) ProfileApiGetLinkedProfilesRequest {
	r.linkedProfileAdditionalCriteriaProfileType = &linkedProfileAdditionalCriteriaProfileType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetLinkedProfilesRequest) LinkedProfileid(linkedProfileid string) ProfileApiGetLinkedProfilesRequest {
	r.linkedProfileid = &linkedProfileid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetLinkedProfilesRequest) LinkedProfileIdContext(linkedProfileIdContext string) ProfileApiGetLinkedProfilesRequest {
	r.linkedProfileIdContext = &linkedProfileIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetLinkedProfilesRequest) LinkedProfileIdType(linkedProfileIdType string) ProfileApiGetLinkedProfilesRequest {
	r.linkedProfileIdType = &linkedProfileIdType
	return r
}

// Family name, last name or Company Name.
func (r ProfileApiGetLinkedProfilesRequest) Name(name string) ProfileApiGetLinkedProfilesRequest {
	r.name = &name
	return r
}

// Given name, first name or names.
func (r ProfileApiGetLinkedProfilesRequest) GivenName(givenName string) ProfileApiGetLinkedProfilesRequest {
	r.givenName = &givenName
	return r
}

// When true indicates that only profiles with city will be fetched.
func (r ProfileApiGetLinkedProfilesRequest) ExcludeNoCity(excludeNoCity bool) ProfileApiGetLinkedProfilesRequest {
	r.excludeNoCity = &excludeNoCity
	return r
}

// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
func (r ProfileApiGetLinkedProfilesRequest) CityName(cityName string) ProfileApiGetLinkedProfilesRequest {
	r.cityName = &cityName
	return r
}

// Post Office Code number.
func (r ProfileApiGetLinkedProfilesRequest) PostalCode(postalCode string) ProfileApiGetLinkedProfilesRequest {
	r.postalCode = &postalCode
	return r
}

// State or Province name (e.g., Texas).
func (r ProfileApiGetLinkedProfilesRequest) State(state string) ProfileApiGetLinkedProfilesRequest {
	r.state = &state
	return r
}

// Code for a country or a nationality.
func (r ProfileApiGetLinkedProfilesRequest) CountryCode(countryCode string) ProfileApiGetLinkedProfilesRequest {
	r.countryCode = &countryCode
	return r
}

// First Line of Street Address. For profile search it matches the first Address line.
func (r ProfileApiGetLinkedProfilesRequest) StreetAddress(streetAddress string) ProfileApiGetLinkedProfilesRequest {
	r.streetAddress = &streetAddress
	return r
}

func (r ProfileApiGetLinkedProfilesRequest) OwnerCode(ownerCode []string) ProfileApiGetLinkedProfilesRequest {
	r.ownerCode = &ownerCode
	return r
}

// Account Receivable associated to the profile.
func (r ProfileApiGetLinkedProfilesRequest) ARNumber(aRNumber string) ProfileApiGetLinkedProfilesRequest {
	r.aRNumber = &aRNumber
	return r
}

func (r ProfileApiGetLinkedProfilesRequest) PrioritiesCode(prioritiesCode []string) ProfileApiGetLinkedProfilesRequest {
	r.prioritiesCode = &prioritiesCode
	return r
}

// External system code.
func (r ProfileApiGetLinkedProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetLinkedProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetLinkedProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetLinkedProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetLinkedProfilesRequest) Execute() (*LinkedProfiles, *http.Response, error) {
	return r.ApiService.GetLinkedProfilesExecute(r)
}

/*
GetLinkedProfiles Get linked profiles

Retrieve profiles that are linked to an existing profile in OPERA Cloud. <p><strong>OperationId:</strong>getLinkedProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetLinkedProfilesRequest
*/
func (a *ProfileApiService) GetLinkedProfiles(ctx context.Context, profileId string) ProfileApiGetLinkedProfilesRequest {
	return ProfileApiGetLinkedProfilesRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return LinkedProfiles
func (a *ProfileApiService) GetLinkedProfilesExecute(r ProfileApiGetLinkedProfilesRequest) (*LinkedProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkedProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetLinkedProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/links"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
	}
	if r.profileTypes != nil {
		t := *r.profileTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileTypes", t, "multi")
		}
	}
	if r.accountsReceivables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountsReceivables", r.accountsReceivables, "")
	}
	if r.corporateProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "corporateProfiles", r.corporateProfiles, "")
	}
	if r.excludeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeInactive", r.excludeInactive, "")
	}
	if r.excludeIncompleteProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeIncompleteProfiles", r.excludeIncompleteProfiles, "")
	}
	if r.includeHasHierarchyOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHasHierarchyOnly", r.includeHasHierarchyOnly, "")
	}
	if r.negotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "negotiatedRates", r.negotiatedRates, "")
	}
	if r.linkedProfileAdditionalCriteriaProfileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedProfileAdditionalCriteriaProfileType", r.linkedProfileAdditionalCriteriaProfileType, "")
	}
	if r.linkedProfileid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedProfileid", r.linkedProfileid, "")
	}
	if r.linkedProfileIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedProfileIdContext", r.linkedProfileIdContext, "")
	}
	if r.linkedProfileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedProfileIdType", r.linkedProfileIdType, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
	}
	if r.excludeNoCity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeNoCity", r.excludeNoCity, "")
	}
	if r.cityName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cityName", r.cityName, "")
	}
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "countryCode", r.countryCode, "")
	}
	if r.streetAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streetAddress", r.streetAddress, "")
	}
	if r.ownerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCode", r.ownerCode, "csv")
	}
	if r.aRNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aRNumber", r.aRNumber, "")
	}
	if r.prioritiesCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prioritiesCode", r.prioritiesCode, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetMatchProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	idContext *string
	idType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetMatchProfilesRequest) Authorization(authorization string) ProfileApiGetMatchProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetMatchProfilesRequest) XAppKey(xAppKey string) ProfileApiGetMatchProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetMatchProfilesRequest) XHotelid(xHotelid string) ProfileApiGetMatchProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code for the profile.
func (r ProfileApiGetMatchProfilesRequest) HotelId(hotelId string) ProfileApiGetMatchProfilesRequest {
	r.hotelId = &hotelId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMatchProfilesRequest) IdContext(idContext string) ProfileApiGetMatchProfilesRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMatchProfilesRequest) IdType(idType string) ProfileApiGetMatchProfilesRequest {
	r.idType = &idType
	return r
}

// External system code.
func (r ProfileApiGetMatchProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetMatchProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetMatchProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetMatchProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetMatchProfilesRequest) Execute() (*MatchedProfiles, *http.Response, error) {
	return r.ApiService.GetMatchProfilesExecute(r)
}

/*
GetMatchProfiles Get profile matches

Retrieve profiles that match another profile. <p><strong>OperationId:</strong>getMatchProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetMatchProfilesRequest
*/
func (a *ProfileApiService) GetMatchProfiles(ctx context.Context, profileId string) ProfileApiGetMatchProfilesRequest {
	return ProfileApiGetMatchProfilesRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return MatchedProfiles
func (a *ProfileApiService) GetMatchProfilesExecute(r ProfileApiGetMatchProfilesRequest) (*MatchedProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MatchedProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetMatchProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/matches"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetMembershipTierProjectionsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipId *string
	membershipType *string
	id *string
	idContext *string
	type_ *string
	projectionDate *string
	projectionType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetMembershipTierProjectionsRequest) Authorization(authorization string) ProfileApiGetMembershipTierProjectionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetMembershipTierProjectionsRequest) XAppKey(xAppKey string) ProfileApiGetMembershipTierProjectionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetMembershipTierProjectionsRequest) XHotelid(xHotelid string) ProfileApiGetMembershipTierProjectionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Membership Card Number.
func (r ProfileApiGetMembershipTierProjectionsRequest) MembershipId(membershipId string) ProfileApiGetMembershipTierProjectionsRequest {
	r.membershipId = &membershipId
	return r
}

// Type of the Membership.
func (r ProfileApiGetMembershipTierProjectionsRequest) MembershipType(membershipType string) ProfileApiGetMembershipTierProjectionsRequest {
	r.membershipType = &membershipType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetMembershipTierProjectionsRequest) Id(id string) ProfileApiGetMembershipTierProjectionsRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMembershipTierProjectionsRequest) IdContext(idContext string) ProfileApiGetMembershipTierProjectionsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMembershipTierProjectionsRequest) Type_(type_ string) ProfileApiGetMembershipTierProjectionsRequest {
	r.type_ = &type_
	return r
}

// Date for which Tier projections is fetched.
func (r ProfileApiGetMembershipTierProjectionsRequest) ProjectionDate(projectionDate string) ProfileApiGetMembershipTierProjectionsRequest {
	r.projectionDate = &projectionDate
	return r
}

// Upgrade And Downgrade
func (r ProfileApiGetMembershipTierProjectionsRequest) ProjectionType(projectionType string) ProfileApiGetMembershipTierProjectionsRequest {
	r.projectionType = &projectionType
	return r
}

// External system code.
func (r ProfileApiGetMembershipTierProjectionsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetMembershipTierProjectionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetMembershipTierProjectionsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetMembershipTierProjectionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetMembershipTierProjectionsRequest) Execute() (*MembershipTierProjections, *http.Response, error) {
	return r.ApiService.GetMembershipTierProjectionsExecute(r)
}

/*
GetMembershipTierProjections Get Membership Tier Projection

Retrieve a list of membership Tier Projection such as upgrades and downgrades. <p><strong>OperationId:</strong>getMembershipTierProjections</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetMembershipTierProjectionsRequest
*/
func (a *ProfileApiService) GetMembershipTierProjections(ctx context.Context) ProfileApiGetMembershipTierProjectionsRequest {
	return ProfileApiGetMembershipTierProjectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MembershipTierProjections
func (a *ProfileApiService) GetMembershipTierProjectionsExecute(r ProfileApiGetMembershipTierProjectionsRequest) (*MembershipTierProjections, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipTierProjections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetMembershipTierProjections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTierProjections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
	}
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.projectionDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectionDate", r.projectionDate, "")
	}
	if r.projectionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectionType", r.projectionType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetMergeProfilesSnapshotRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	survivorProfileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	originalId *string
	originalIdContext *string
	originalIdType *string
	toBeMergedId *[]string
	toBeMergedIdContext *[]string
	toBeMergedIdType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetMergeProfilesSnapshotRequest) Authorization(authorization string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetMergeProfilesSnapshotRequest) XAppKey(xAppKey string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetMergeProfilesSnapshotRequest) XHotelid(xHotelid string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetMergeProfilesSnapshotRequest) OriginalId(originalId string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.originalId = &originalId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMergeProfilesSnapshotRequest) OriginalIdContext(originalIdContext string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.originalIdContext = &originalIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMergeProfilesSnapshotRequest) OriginalIdType(originalIdType string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.originalIdType = &originalIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetMergeProfilesSnapshotRequest) ToBeMergedId(toBeMergedId []string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.toBeMergedId = &toBeMergedId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMergeProfilesSnapshotRequest) ToBeMergedIdContext(toBeMergedIdContext []string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.toBeMergedIdContext = &toBeMergedIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMergeProfilesSnapshotRequest) ToBeMergedIdType(toBeMergedIdType []string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.toBeMergedIdType = &toBeMergedIdType
	return r
}

// External system code.
func (r ProfileApiGetMergeProfilesSnapshotRequest) XExternalsystem(xExternalsystem string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetMergeProfilesSnapshotRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetMergeProfilesSnapshotRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetMergeProfilesSnapshotRequest) Execute() (*MergedProfilesSnapshotDetails, *http.Response, error) {
	return r.ApiService.GetMergeProfilesSnapshotExecute(r)
}

/*
GetMergeProfilesSnapshot Get merge profiles snapshot

This API will provide you with a snapshot of the to be merged profile. In the request you will pass the survivor profile, along with the profile ID of the profile which it to be merged into the survivor profile.  The response will provide you with the combined profile data of both profiles which are being merged. <p><strong>OperationId:</strong>getMergeProfilesSnapshot</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param survivorProfileId
 @return ProfileApiGetMergeProfilesSnapshotRequest
*/
func (a *ProfileApiService) GetMergeProfilesSnapshot(ctx context.Context, survivorProfileId string) ProfileApiGetMergeProfilesSnapshotRequest {
	return ProfileApiGetMergeProfilesSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		survivorProfileId: survivorProfileId,
	}
}

// Execute executes the request
//  @return MergedProfilesSnapshotDetails
func (a *ProfileApiService) GetMergeProfilesSnapshotExecute(r ProfileApiGetMergeProfilesSnapshotRequest) (*MergedProfilesSnapshotDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MergedProfilesSnapshotDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetMergeProfilesSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{survivorProfileId}/merges/snapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"survivorProfileId"+"}", url.PathEscape(parameterValueToString(r.survivorProfileId, "survivorProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.survivorProfileId) < 1 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have at least 1 elements")
	}
	if strlen(r.survivorProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have less than 2000 elements")
	}

	if r.originalId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originalId", r.originalId, "")
	}
	if r.originalIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originalIdContext", r.originalIdContext, "")
	}
	if r.originalIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originalIdType", r.originalIdType, "")
	}
	if r.toBeMergedId != nil {
		t := *r.toBeMergedId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedId", t, "multi")
		}
	}
	if r.toBeMergedIdContext != nil {
		t := *r.toBeMergedIdContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedIdContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedIdContext", t, "multi")
		}
	}
	if r.toBeMergedIdType != nil {
		t := *r.toBeMergedIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "toBeMergedIdType", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetMergeStageProfileSnapshotRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	survivorProfileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	resortProfileId *string
	resortProfileIdContext *string
	resortProfileIdType *string
	profileIdContext *string
	profileIdType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetMergeStageProfileSnapshotRequest) Authorization(authorization string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetMergeStageProfileSnapshotRequest) XAppKey(xAppKey string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetMergeStageProfileSnapshotRequest) XHotelid(xHotelid string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code for the profile.
func (r ProfileApiGetMergeStageProfileSnapshotRequest) HotelId(hotelId string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.hotelId = &hotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetMergeStageProfileSnapshotRequest) ResortProfileId(resortProfileId string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.resortProfileId = &resortProfileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMergeStageProfileSnapshotRequest) ResortProfileIdContext(resortProfileIdContext string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.resortProfileIdContext = &resortProfileIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMergeStageProfileSnapshotRequest) ResortProfileIdType(resortProfileIdType string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.resortProfileIdType = &resortProfileIdType
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetMergeStageProfileSnapshotRequest) ProfileIdContext(profileIdContext string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.profileIdContext = &profileIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetMergeStageProfileSnapshotRequest) ProfileIdType(profileIdType string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.profileIdType = &profileIdType
	return r
}

// External system code.
func (r ProfileApiGetMergeStageProfileSnapshotRequest) XExternalsystem(xExternalsystem string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetMergeStageProfileSnapshotRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetMergeStageProfileSnapshotRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetMergeStageProfileSnapshotRequest) Execute() (*MergedStageProfileSnapshot, *http.Response, error) {
	return r.ApiService.GetMergeStageProfileSnapshotExecute(r)
}

/*
GetMergeStageProfileSnapshot Get merge stage profile snapshot

This API will provide you with a snapshot of the to be merged profile in staging. <p><strong>OperationId:</strong>getMergeStageProfileSnapshot</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param survivorProfileId
 @return ProfileApiGetMergeStageProfileSnapshotRequest
*/
func (a *ProfileApiService) GetMergeStageProfileSnapshot(ctx context.Context, survivorProfileId string) ProfileApiGetMergeStageProfileSnapshotRequest {
	return ProfileApiGetMergeStageProfileSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		survivorProfileId: survivorProfileId,
	}
}

// Execute executes the request
//  @return MergedStageProfileSnapshot
func (a *ProfileApiService) GetMergeStageProfileSnapshotExecute(r ProfileApiGetMergeStageProfileSnapshotRequest) (*MergedStageProfileSnapshot, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MergedStageProfileSnapshot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetMergeStageProfileSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{survivorProfileId}/stageProfiles/snapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"survivorProfileId"+"}", url.PathEscape(parameterValueToString(r.survivorProfileId, "survivorProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.survivorProfileId) < 1 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have at least 1 elements")
	}
	if strlen(r.survivorProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.resortProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resortProfileId", r.resortProfileId, "")
	}
	if r.resortProfileIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resortProfileIdContext", r.resortProfileIdContext, "")
	}
	if r.resortProfileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resortProfileIdType", r.resortProfileIdType, "")
	}
	if r.profileIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdContext", r.profileIdContext, "")
	}
	if r.profileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdType", r.profileIdType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetPreferenceForProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *[]string
	idContext *[]string
	type_ *[]string
	hotelId *string
	codes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetPreferenceForProfileRequest) Authorization(authorization string) ProfileApiGetPreferenceForProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetPreferenceForProfileRequest) XAppKey(xAppKey string) ProfileApiGetPreferenceForProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetPreferenceForProfileRequest) XHotelid(xHotelid string) ProfileApiGetPreferenceForProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetPreferenceForProfileRequest) Id(id []string) ProfileApiGetPreferenceForProfileRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetPreferenceForProfileRequest) IdContext(idContext []string) ProfileApiGetPreferenceForProfileRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetPreferenceForProfileRequest) Type_(type_ []string) ProfileApiGetPreferenceForProfileRequest {
	r.type_ = &type_
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ProfileApiGetPreferenceForProfileRequest) HotelId(hotelId string) ProfileApiGetPreferenceForProfileRequest {
	r.hotelId = &hotelId
	return r
}

func (r ProfileApiGetPreferenceForProfileRequest) Codes(codes []string) ProfileApiGetPreferenceForProfileRequest {
	r.codes = &codes
	return r
}

// External system code.
func (r ProfileApiGetPreferenceForProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiGetPreferenceForProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetPreferenceForProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetPreferenceForProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetPreferenceForProfileRequest) Execute() (*Preference, *http.Response, error) {
	return r.ApiService.GetPreferenceForProfileExecute(r)
}

/*
GetPreferenceForProfile Get preferences on a profile

Use this API to retrieve all preferences that a profile has stored on it.  Preferences are configured codes by a property, examples are usually High Floor, Non smoking room, Room with a View, soft pillow etc.  <p><strong>OperationId:</strong>getPreferenceForProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetPreferenceForProfileRequest
*/
func (a *ProfileApiService) GetPreferenceForProfile(ctx context.Context, profileId string) ProfileApiGetPreferenceForProfileRequest {
	return ProfileApiGetPreferenceForProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Preference
func (a *ProfileApiService) GetPreferenceForProfileExecute(r ProfileApiGetPreferenceForProfileRequest) (*Preference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Preference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetPreferenceForProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	logViewProfile *bool
	showInactiveRoomOwners *bool
	markAsRecentlyAccessed *bool
	fetchInstructions *[]string
	instructionParameterType *[]string
	value *[]string
	allowedAction *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileRequest) Authorization(authorization string) ProfileApiGetProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileRequest) XAppKey(xAppKey string) ProfileApiGetProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileRequest) XHotelid(xHotelid string) ProfileApiGetProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code used to filter hotel specific information regarding the profile.
func (r ProfileApiGetProfileRequest) HotelId(hotelId string) ProfileApiGetProfileRequest {
	r.hotelId = &hotelId
	return r
}

// This element tells when the view profile should be logged.
func (r ProfileApiGetProfileRequest) LogViewProfile(logViewProfile bool) ProfileApiGetProfileRequest {
	r.logViewProfile = &logViewProfile
	return r
}

// Flag to show inactive Room Owners.
func (r ProfileApiGetProfileRequest) ShowInactiveRoomOwners(showInactiveRoomOwners bool) ProfileApiGetProfileRequest {
	r.showInactiveRoomOwners = &showInactiveRoomOwners
	return r
}

// Providing this flag marks the profile as recently accessed.
func (r ProfileApiGetProfileRequest) MarkAsRecentlyAccessed(markAsRecentlyAccessed bool) ProfileApiGetProfileRequest {
	r.markAsRecentlyAccessed = &markAsRecentlyAccessed
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetProfileRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetProfileRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.
func (r ProfileApiGetProfileRequest) InstructionParameterType(instructionParameterType []string) ProfileApiGetProfileRequest {
	r.instructionParameterType = &instructionParameterType
	return r
}

// Value of Profile Instruction Parameter
func (r ProfileApiGetProfileRequest) Value(value []string) ProfileApiGetProfileRequest {
	r.value = &value
	return r
}

// Flag indicating whether Profile is Enrolled to Primary Membership Program.
func (r ProfileApiGetProfileRequest) AllowedAction(allowedAction []string) ProfileApiGetProfileRequest {
	r.allowedAction = &allowedAction
	return r
}

// External system code.
func (r ProfileApiGetProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileRequest) Execute() (*Profile, *http.Response, error) {
	return r.ApiService.GetProfileExecute(r)
}

/*
GetProfile Get profile by ID

Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique OPERA internal profile ID which is used to find any type of profile from OPERA. This ID is a primary identification of a profile in OPERA.
 @return ProfileApiGetProfileRequest
*/
func (a *ProfileApiService) GetProfile(ctx context.Context, profileId string) ProfileApiGetProfileRequest {
	return ProfileApiGetProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Profile
func (a *ProfileApiService) GetProfileExecute(r ProfileApiGetProfileRequest) (*Profile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Profile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.logViewProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logViewProfile", r.logViewProfile, "")
	}
	if r.showInactiveRoomOwners != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showInactiveRoomOwners", r.showInactiveRoomOwners, "")
	}
	if r.markAsRecentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "markAsRecentlyAccessed", r.markAsRecentlyAccessed, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	if r.instructionParameterType != nil {
		t := *r.instructionParameterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", t, "multi")
		}
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "multi")
		}
	}
	if r.allowedAction != nil {
		t := *r.allowedAction
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileAccountsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idContext *[]string
	type_ *[]string
	hotelIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileAccountsRequest) Authorization(authorization string) ProfileApiGetProfileAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileAccountsRequest) XAppKey(xAppKey string) ProfileApiGetProfileAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileAccountsRequest) XHotelid(xHotelid string) ProfileApiGetProfileAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfileAccountsRequest) IdContext(idContext []string) ProfileApiGetProfileAccountsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetProfileAccountsRequest) Type_(type_ []string) ProfileApiGetProfileAccountsRequest {
	r.type_ = &type_
	return r
}

func (r ProfileApiGetProfileAccountsRequest) HotelIds(hotelIds []string) ProfileApiGetProfileAccountsRequest {
	r.hotelIds = &hotelIds
	return r
}

// External system code.
func (r ProfileApiGetProfileAccountsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileAccountsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileAccountsRequest) Execute() (*ProfileAccounts, *http.Response, error) {
	return r.ApiService.GetProfileAccountsExecute(r)
}

/*
GetProfileAccounts Get profile accounts

You can find the accounts that are listed on a profile with this API. <p><strong>OperationId:</strong>getProfileAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetProfileAccountsRequest
*/
func (a *ProfileApiService) GetProfileAccounts(ctx context.Context, profileId string) ProfileApiGetProfileAccountsRequest {
	return ProfileApiGetProfileAccountsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileAccounts
func (a *ProfileApiService) GetProfileAccountsExecute(r ProfileApiGetProfileAccountsRequest) (*ProfileAccounts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileAccounts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileActivityLogRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	activityParamsHotelId *string
	module *string
	parameterName *[]string
	parameterValue *[]string
	activityGroup *string
	activityType *string
	fromDate *string
	toDate *string
	searchText *string
	userByIDs *[]int32
	userForIDs *[]int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileActivityLogRequest) Authorization(authorization string) ProfileApiGetProfileActivityLogRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileActivityLogRequest) XAppKey(xAppKey string) ProfileApiGetProfileActivityLogRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileActivityLogRequest) XHotelid(xHotelid string) ProfileApiGetProfileActivityLogRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetProfileActivityLogRequest) Limit(limit int32) ProfileApiGetProfileActivityLogRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetProfileActivityLogRequest) Offset(offset int32) ProfileApiGetProfileActivityLogRequest {
	r.offset = &offset
	return r
}

// Hotel code.
func (r ProfileApiGetProfileActivityLogRequest) ActivityParamsHotelId(activityParamsHotelId string) ProfileApiGetProfileActivityLogRequest {
	r.activityParamsHotelId = &activityParamsHotelId
	return r
}

// Activity module.
func (r ProfileApiGetProfileActivityLogRequest) Module(module string) ProfileApiGetProfileActivityLogRequest {
	r.module = &module
	return r
}

// Name of the parameter.
func (r ProfileApiGetProfileActivityLogRequest) ParameterName(parameterName []string) ProfileApiGetProfileActivityLogRequest {
	r.parameterName = &parameterName
	return r
}

// Value of the parameter.
func (r ProfileApiGetProfileActivityLogRequest) ParameterValue(parameterValue []string) ProfileApiGetProfileActivityLogRequest {
	r.parameterValue = &parameterValue
	return r
}

func (r ProfileApiGetProfileActivityLogRequest) ActivityGroup(activityGroup string) ProfileApiGetProfileActivityLogRequest {
	r.activityGroup = &activityGroup
	return r
}

func (r ProfileApiGetProfileActivityLogRequest) ActivityType(activityType string) ProfileApiGetProfileActivityLogRequest {
	r.activityType = &activityType
	return r
}

// Search from date for the user activity log.
func (r ProfileApiGetProfileActivityLogRequest) FromDate(fromDate string) ProfileApiGetProfileActivityLogRequest {
	r.fromDate = &fromDate
	return r
}

// Search to date for the user activity log.
func (r ProfileApiGetProfileActivityLogRequest) ToDate(toDate string) ProfileApiGetProfileActivityLogRequest {
	r.toDate = &toDate
	return r
}

// Search text for the user activity log.
func (r ProfileApiGetProfileActivityLogRequest) SearchText(searchText string) ProfileApiGetProfileActivityLogRequest {
	r.searchText = &searchText
	return r
}

func (r ProfileApiGetProfileActivityLogRequest) UserByIDs(userByIDs []int32) ProfileApiGetProfileActivityLogRequest {
	r.userByIDs = &userByIDs
	return r
}

func (r ProfileApiGetProfileActivityLogRequest) UserForIDs(userForIDs []int32) ProfileApiGetProfileActivityLogRequest {
	r.userForIDs = &userForIDs
	return r
}

// External system code.
func (r ProfileApiGetProfileActivityLogRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileActivityLogRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileActivityLogRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileActivityLogRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileActivityLogRequest) Execute() (*ProfileActivityLog, *http.Response, error) {
	return r.ApiService.GetProfileActivityLogExecute(r)
}

/*
GetProfileActivityLog Fetch profile activity log

Use this API to fetch the activity log for a specific profile.  This will allow you to see the changes that have occurred on this profile. <p><strong>OperationId:</strong>getProfileActivityLog</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetProfileActivityLogRequest
*/
func (a *ProfileApiService) GetProfileActivityLog(ctx context.Context) ProfileApiGetProfileActivityLogRequest {
	return ProfileApiGetProfileActivityLogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProfileActivityLog
func (a *ProfileApiService) GetProfileActivityLogExecute(r ProfileApiGetProfileActivityLogRequest) (*ProfileActivityLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileActivityLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileActivityLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/activityLog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.activityParamsHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityParamsHotelId", r.activityParamsHotelId, "")
	}
	if r.module != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module", r.module, "")
	}
	if r.parameterName != nil {
		t := *r.parameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", t, "multi")
		}
	}
	if r.parameterValue != nil {
		t := *r.parameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", t, "multi")
		}
	}
	if r.activityGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityGroup", r.activityGroup, "")
	}
	if r.activityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityType", r.activityType, "")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchText", r.searchText, "")
	}
	if r.userByIDs != nil {
		t := *r.userByIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userByIDs", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userByIDs", t, "multi")
		}
	}
	if r.userForIDs != nil {
		t := *r.userForIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userForIDs", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userForIDs", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileAttachmentsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	idContext *string
	type_ *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileAttachmentsRequest) Authorization(authorization string) ProfileApiGetProfileAttachmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileAttachmentsRequest) XAppKey(xAppKey string) ProfileApiGetProfileAttachmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileAttachmentsRequest) XHotelid(xHotelid string) ProfileApiGetProfileAttachmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfileAttachmentsRequest) IdContext(idContext string) ProfileApiGetProfileAttachmentsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetProfileAttachmentsRequest) Type_(type_ string) ProfileApiGetProfileAttachmentsRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r ProfileApiGetProfileAttachmentsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileAttachmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileAttachmentsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileAttachmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileAttachmentsRequest) Execute() (*ProfileAttachments, *http.Response, error) {
	return r.ApiService.GetProfileAttachmentsExecute(r)
}

/*
GetProfileAttachments Get profile attachments

This API will provide the attachments on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getProfileAttachments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetProfileAttachmentsRequest
*/
func (a *ProfileApiService) GetProfileAttachments(ctx context.Context, profileId string) ProfileApiGetProfileAttachmentsRequest {
	return ProfileApiGetProfileAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileAttachments
func (a *ProfileApiService) GetProfileAttachmentsExecute(r ProfileApiGetProfileAttachmentsRequest) (*ProfileAttachments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileAttachments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileByExtIdRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileExternalId string
	extSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	logViewProfile *bool
	showInactiveRoomOwners *bool
	fetchInstructions *[]string
	instructionParameterType *[]string
	value *[]string
	allowedAction *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileByExtIdRequest) Authorization(authorization string) ProfileApiGetProfileByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileByExtIdRequest) XAppKey(xAppKey string) ProfileApiGetProfileByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileByExtIdRequest) XHotelid(xHotelid string) ProfileApiGetProfileByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code used to filter hotel specific information regarding the profile.
func (r ProfileApiGetProfileByExtIdRequest) HotelId(hotelId string) ProfileApiGetProfileByExtIdRequest {
	r.hotelId = &hotelId
	return r
}

// This element tells when the view profile should be logged.
func (r ProfileApiGetProfileByExtIdRequest) LogViewProfile(logViewProfile bool) ProfileApiGetProfileByExtIdRequest {
	r.logViewProfile = &logViewProfile
	return r
}

// Flag to show inactive Room Owners.
func (r ProfileApiGetProfileByExtIdRequest) ShowInactiveRoomOwners(showInactiveRoomOwners bool) ProfileApiGetProfileByExtIdRequest {
	r.showInactiveRoomOwners = &showInactiveRoomOwners
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetProfileByExtIdRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetProfileByExtIdRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.
func (r ProfileApiGetProfileByExtIdRequest) InstructionParameterType(instructionParameterType []string) ProfileApiGetProfileByExtIdRequest {
	r.instructionParameterType = &instructionParameterType
	return r
}

// Value of Profile Instruction Parameter
func (r ProfileApiGetProfileByExtIdRequest) Value(value []string) ProfileApiGetProfileByExtIdRequest {
	r.value = &value
	return r
}

// Flag indicating whether Profile is Enrolled to Primary Membership Program.
func (r ProfileApiGetProfileByExtIdRequest) AllowedAction(allowedAction []string) ProfileApiGetProfileByExtIdRequest {
	r.allowedAction = &allowedAction
	return r
}

// External system code.
func (r ProfileApiGetProfileByExtIdRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileByExtIdRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileByExtIdRequest) Execute() (*Profile, *http.Response, error) {
	return r.ApiService.GetProfileByExtIdExecute(r)
}

/*
GetProfileByExtId Get profile by external ID

When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileExternalId External System's ID used to get the profile.
 @param extSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @return ProfileApiGetProfileByExtIdRequest
*/
func (a *ProfileApiService) GetProfileByExtId(ctx context.Context, profileExternalId string, extSystemCode string) ProfileApiGetProfileByExtIdRequest {
	return ProfileApiGetProfileByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		profileExternalId: profileExternalId,
		extSystemCode: extSystemCode,
	}
}

// Execute executes the request
//  @return Profile
func (a *ProfileApiService) GetProfileByExtIdExecute(r ProfileApiGetProfileByExtIdRequest) (*Profile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Profile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{extSystemCode}/profiles/{profileExternalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileExternalId"+"}", url.PathEscape(parameterValueToString(r.profileExternalId, "profileExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extSystemCode"+"}", url.PathEscape(parameterValueToString(r.extSystemCode, "extSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileExternalId) < 1 {
		return localVarReturnValue, nil, reportError("profileExternalId must have at least 1 elements")
	}
	if strlen(r.profileExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("profileExternalId must have less than 2000 elements")
	}
	if strlen(r.extSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("extSystemCode must have at least 1 elements")
	}
	if strlen(r.extSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("extSystemCode must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.logViewProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logViewProfile", r.logViewProfile, "")
	}
	if r.showInactiveRoomOwners != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showInactiveRoomOwners", r.showInactiveRoomOwners, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	if r.instructionParameterType != nil {
		t := *r.instructionParameterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", t, "multi")
		}
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "multi")
		}
	}
	if r.allowedAction != nil {
		t := *r.allowedAction
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileCommissionAccountRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileCommissionAccountRequest) Authorization(authorization string) ProfileApiGetProfileCommissionAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileCommissionAccountRequest) XAppKey(xAppKey string) ProfileApiGetProfileCommissionAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileCommissionAccountRequest) XHotelid(xHotelid string) ProfileApiGetProfileCommissionAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ProfileApiGetProfileCommissionAccountRequest) HotelIds(hotelIds []string) ProfileApiGetProfileCommissionAccountRequest {
	r.hotelIds = &hotelIds
	return r
}

// External system code.
func (r ProfileApiGetProfileCommissionAccountRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileCommissionAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileCommissionAccountRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileCommissionAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileCommissionAccountRequest) Execute() (*ProfileCommissionAccountInfo, *http.Response, error) {
	return r.ApiService.GetProfileCommissionAccountExecute(r)
}

/*
GetProfileCommissionAccount Get commission account on a profile

Retrieve Commission Account details from a specified profile. <p><strong>OperationId:</strong>getProfileCommissionAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetProfileCommissionAccountRequest
*/
func (a *ProfileApiService) GetProfileCommissionAccount(ctx context.Context, profileId string) ProfileApiGetProfileCommissionAccountRequest {
	return ProfileApiGetProfileCommissionAccountRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileCommissionAccountInfo
func (a *ProfileApiService) GetProfileCommissionAccountExecute(r ProfileApiGetProfileCommissionAccountRequest) (*ProfileCommissionAccountInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileCommissionAccountInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileCommissionAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/commissionAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileOwnersRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *[]string
	idContext *[]string
	type_ *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileOwnersRequest) Authorization(authorization string) ProfileApiGetProfileOwnersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileOwnersRequest) XAppKey(xAppKey string) ProfileApiGetProfileOwnersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileOwnersRequest) XHotelid(xHotelid string) ProfileApiGetProfileOwnersRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfileOwnersRequest) Id(id []string) ProfileApiGetProfileOwnersRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfileOwnersRequest) IdContext(idContext []string) ProfileApiGetProfileOwnersRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetProfileOwnersRequest) Type_(type_ []string) ProfileApiGetProfileOwnersRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r ProfileApiGetProfileOwnersRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileOwnersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileOwnersRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileOwnersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileOwnersRequest) Execute() (*ProfileOwnersDetail, *http.Response, error) {
	return r.ApiService.GetProfileOwnersExecute(r)
}

/*
GetProfileOwners Get profile owners

Retrieve the Owners listed on a profile. <p><strong>OperationId:</strong>getProfileOwners</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetProfileOwnersRequest
*/
func (a *ProfileApiService) GetProfileOwners(ctx context.Context, profileId string) ProfileApiGetProfileOwnersRequest {
	return ProfileApiGetProfileOwnersRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileOwnersDetail
func (a *ProfileApiService) GetProfileOwnersExecute(r ProfileApiGetProfileOwnersRequest) (*ProfileOwnersDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileOwnersDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/owners"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfileRelationshipsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	relationshipPrimaryProfile *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfileRelationshipsRequest) Authorization(authorization string) ProfileApiGetProfileRelationshipsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfileRelationshipsRequest) XAppKey(xAppKey string) ProfileApiGetProfileRelationshipsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfileRelationshipsRequest) XHotelid(xHotelid string) ProfileApiGetProfileRelationshipsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Type of Profile to be fetched from OPERA.
func (r ProfileApiGetProfileRelationshipsRequest) RelationshipPrimaryProfile(relationshipPrimaryProfile bool) ProfileApiGetProfileRelationshipsRequest {
	r.relationshipPrimaryProfile = &relationshipPrimaryProfile
	return r
}

// External system code.
func (r ProfileApiGetProfileRelationshipsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfileRelationshipsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfileRelationshipsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfileRelationshipsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfileRelationshipsRequest) Execute() (*ProfileRelationships, *http.Response, error) {
	return r.ApiService.GetProfileRelationshipsExecute(r)
}

/*
GetProfileRelationships FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.

 <p><strong>OperationId:</strong>getProfileRelationships</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetProfileRelationshipsRequest
*/
func (a *ProfileApiService) GetProfileRelationships(ctx context.Context, profileId string) ProfileApiGetProfileRelationshipsRequest {
	return ProfileApiGetProfileRelationshipsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileRelationships
func (a *ProfileApiService) GetProfileRelationshipsExecute(r ProfileApiGetProfileRelationshipsRequest) (*ProfileRelationships, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileRelationships
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfileRelationships")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/relationships"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.relationshipPrimaryProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relationshipPrimaryProfile", r.relationshipPrimaryProfile, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	excludeInactive *bool
	hotelId *string
	includeHasHierarchyOnly *bool
	includePrimaryOwnersOnly *bool
	includePurgeProfiles *bool
	limit *int32
	offset *int32
	searchType *string
	summaryInfo *bool
	searchString *string
	includeAnonymized *bool
	profileType *[]string
	profileIds *[]string
	externalReferenceIds *[]string
	externalSystemCodes *[]string
	corporateIds *[]string
	profileName *string
	givenName *string
	incognitoName *string
	incognitoGivenName *string
	city *string
	postalCode *string
	state *string
	countryCode *string
	streetAddress *string
	keyword *string
	communication *string
	membership *string
	membershipType *string
	ownerCodes *[]string
	membershipLevel *string
	aRNumber *string
	taxID *string
	businessSegment *[]string
	accountsReceivables *bool
	corporateProfiles *bool
	excludeIncompleteProfiles *bool
	negotiatedRates *bool
	relatedProfileExcludeInactive *bool
	realtedProfileIncludeHasHierarchyOnly *bool
	relatedProfileNegotiatedRates *bool
	relatedProfileType *string
	relatedProfileName *string
	protectedProfiles *bool
	excludedProfilesId *[]string
	idExtension *[]int32
	excludedProfilesIdContext *[]string
	excludedProfilesIdType *[]string
	identificationNo *string
	fetchInstructions *[]string
	allowedAction *[]string
	vipCodes *[]string
	predefinedFilterId *float32
	predefinedFilterCode *string
	prioritieCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfilesRequest) Authorization(authorization string) ProfileApiGetProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfilesRequest) XAppKey(xAppKey string) ProfileApiGetProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfilesRequest) XHotelid(xHotelid string) ProfileApiGetProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.
func (r ProfileApiGetProfilesRequest) ExcludeInactive(excludeInactive bool) ProfileApiGetProfilesRequest {
	r.excludeInactive = &excludeInactive
	return r
}

// Hotel Code, It is used to filter hotel specific children to this specific hotel code.
func (r ProfileApiGetProfilesRequest) HotelId(hotelId string) ProfileApiGetProfilesRequest {
	r.hotelId = &hotelId
	return r
}

// Include profiles that have one or more relationships in the search.
func (r ProfileApiGetProfilesRequest) IncludeHasHierarchyOnly(includeHasHierarchyOnly bool) ProfileApiGetProfilesRequest {
	r.includeHasHierarchyOnly = &includeHasHierarchyOnly
	return r
}

// Include primary owners in the search.
func (r ProfileApiGetProfilesRequest) IncludePrimaryOwnersOnly(includePrimaryOwnersOnly bool) ProfileApiGetProfilesRequest {
	r.includePrimaryOwnersOnly = &includePrimaryOwnersOnly
	return r
}

// Include purged profiles in the search.
func (r ProfileApiGetProfilesRequest) IncludePurgeProfiles(includePurgeProfiles bool) ProfileApiGetProfilesRequest {
	r.includePurgeProfiles = &includePurgeProfiles
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetProfilesRequest) Limit(limit int32) ProfileApiGetProfilesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetProfilesRequest) Offset(offset int32) ProfileApiGetProfilesRequest {
	r.offset = &offset
	return r
}

// When search type is PatronTrackingSystemMemberProfiles, the FetchProfiles will return the Membership Number of the searched Membership Type regardless of primary flag or sequence of the profile memberships.
func (r ProfileApiGetProfilesRequest) SearchType(searchType string) ProfileApiGetProfilesRequest {
	r.searchType = &searchType
	return r
}

// When true response will return summary information otherwise detailed information.
func (r ProfileApiGetProfilesRequest) SummaryInfo(summaryInfo bool) ProfileApiGetProfilesRequest {
	r.summaryInfo = &summaryInfo
	return r
}

// Search string to be used for super search.
func (r ProfileApiGetProfilesRequest) SearchString(searchString string) ProfileApiGetProfilesRequest {
	r.searchString = &searchString
	return r
}

// Indicates whether to include Anonymized Profiles.
func (r ProfileApiGetProfilesRequest) IncludeAnonymized(includeAnonymized bool) ProfileApiGetProfilesRequest {
	r.includeAnonymized = &includeAnonymized
	return r
}

// The types of Profile handled by the web service.
func (r ProfileApiGetProfilesRequest) ProfileType(profileType []string) ProfileApiGetProfilesRequest {
	r.profileType = &profileType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesRequest) ProfileIds(profileIds []string) ProfileApiGetProfilesRequest {
	r.profileIds = &profileIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesRequest) ExternalReferenceIds(externalReferenceIds []string) ProfileApiGetProfilesRequest {
	r.externalReferenceIds = &externalReferenceIds
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfilesRequest) ExternalSystemCodes(externalSystemCodes []string) ProfileApiGetProfilesRequest {
	r.externalSystemCodes = &externalSystemCodes
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesRequest) CorporateIds(corporateIds []string) ProfileApiGetProfilesRequest {
	r.corporateIds = &corporateIds
	return r
}

// Family name, last name or Company Name.
func (r ProfileApiGetProfilesRequest) ProfileName(profileName string) ProfileApiGetProfilesRequest {
	r.profileName = &profileName
	return r
}

// Given name, first name or names.
func (r ProfileApiGetProfilesRequest) GivenName(givenName string) ProfileApiGetProfilesRequest {
	r.givenName = &givenName
	return r
}

// Family name, last name or Company Name.
func (r ProfileApiGetProfilesRequest) IncognitoName(incognitoName string) ProfileApiGetProfilesRequest {
	r.incognitoName = &incognitoName
	return r
}

// Given name, first name or names.
func (r ProfileApiGetProfilesRequest) IncognitoGivenName(incognitoGivenName string) ProfileApiGetProfilesRequest {
	r.incognitoGivenName = &incognitoGivenName
	return r
}

// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
func (r ProfileApiGetProfilesRequest) City(city string) ProfileApiGetProfilesRequest {
	r.city = &city
	return r
}

// Post Office Code number.
func (r ProfileApiGetProfilesRequest) PostalCode(postalCode string) ProfileApiGetProfilesRequest {
	r.postalCode = &postalCode
	return r
}

// State or Province name (e.g., Texas).
func (r ProfileApiGetProfilesRequest) State(state string) ProfileApiGetProfilesRequest {
	r.state = &state
	return r
}

// Code for a country or a nationality.
func (r ProfileApiGetProfilesRequest) CountryCode(countryCode string) ProfileApiGetProfilesRequest {
	r.countryCode = &countryCode
	return r
}

// First Line of Street Address. For profile search it matches the first Address line.
func (r ProfileApiGetProfilesRequest) StreetAddress(streetAddress string) ProfileApiGetProfilesRequest {
	r.streetAddress = &streetAddress
	return r
}

// Keyword associated to the profile.
func (r ProfileApiGetProfilesRequest) Keyword(keyword string) ProfileApiGetProfilesRequest {
	r.keyword = &keyword
	return r
}

// Any communication method associated to the profile such as phone, fax, eMail id.
func (r ProfileApiGetProfilesRequest) Communication(communication string) ProfileApiGetProfilesRequest {
	r.communication = &communication
	return r
}

// Membership number associated to the profile.
func (r ProfileApiGetProfilesRequest) Membership(membership string) ProfileApiGetProfilesRequest {
	r.membership = &membership
	return r
}

// Member Type of searching profile.
func (r ProfileApiGetProfilesRequest) MembershipType(membershipType string) ProfileApiGetProfilesRequest {
	r.membershipType = &membershipType
	return r
}

func (r ProfileApiGetProfilesRequest) OwnerCodes(ownerCodes []string) ProfileApiGetProfilesRequest {
	r.ownerCodes = &ownerCodes
	return r
}

// Membership level associated to the profile.
func (r ProfileApiGetProfilesRequest) MembershipLevel(membershipLevel string) ProfileApiGetProfilesRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// Account Receivable associated to the profile.
func (r ProfileApiGetProfilesRequest) ARNumber(aRNumber string) ProfileApiGetProfilesRequest {
	r.aRNumber = &aRNumber
	return r
}

// Tax ID associated to the profile
func (r ProfileApiGetProfilesRequest) TaxID(taxID string) ProfileApiGetProfilesRequest {
	r.taxID = &taxID
	return r
}

// Business/Market Segment associated to the profile.
func (r ProfileApiGetProfilesRequest) BusinessSegment(businessSegment []string) ProfileApiGetProfilesRequest {
	r.businessSegment = &businessSegment
	return r
}

// When true indicates that only profiles with AR account fetched.
func (r ProfileApiGetProfilesRequest) AccountsReceivables(accountsReceivables bool) ProfileApiGetProfilesRequest {
	r.accountsReceivables = &accountsReceivables
	return r
}

// When true indicates that only profiles with client id are searched for.
func (r ProfileApiGetProfilesRequest) CorporateProfiles(corporateProfiles bool) ProfileApiGetProfilesRequest {
	r.corporateProfiles = &corporateProfiles
	return r
}

// When true indicates that only profiles with an Address Line 1 and Country or at least one Communications Type will be displayed.
func (r ProfileApiGetProfilesRequest) ExcludeIncompleteProfiles(excludeIncompleteProfiles bool) ProfileApiGetProfilesRequest {
	r.excludeIncompleteProfiles = &excludeIncompleteProfiles
	return r
}

// When true indicates that this option has to be included in advanced search.
func (r ProfileApiGetProfilesRequest) NegotiatedRates(negotiatedRates bool) ProfileApiGetProfilesRequest {
	r.negotiatedRates = &negotiatedRates
	return r
}

// Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.
func (r ProfileApiGetProfilesRequest) RelatedProfileExcludeInactive(relatedProfileExcludeInactive bool) ProfileApiGetProfilesRequest {
	r.relatedProfileExcludeInactive = &relatedProfileExcludeInactive
	return r
}

// Include profiles that have one or more relationships in the search.
func (r ProfileApiGetProfilesRequest) RealtedProfileIncludeHasHierarchyOnly(realtedProfileIncludeHasHierarchyOnly bool) ProfileApiGetProfilesRequest {
	r.realtedProfileIncludeHasHierarchyOnly = &realtedProfileIncludeHasHierarchyOnly
	return r
}

// When true indicates that this option has to be included in advanced search.
func (r ProfileApiGetProfilesRequest) RelatedProfileNegotiatedRates(relatedProfileNegotiatedRates bool) ProfileApiGetProfilesRequest {
	r.relatedProfileNegotiatedRates = &relatedProfileNegotiatedRates
	return r
}

// The types of Profile handled by the web service.
func (r ProfileApiGetProfilesRequest) RelatedProfileType(relatedProfileType string) ProfileApiGetProfilesRequest {
	r.relatedProfileType = &relatedProfileType
	return r
}

// Family name, last name or Company Name.
func (r ProfileApiGetProfilesRequest) RelatedProfileName(relatedProfileName string) ProfileApiGetProfilesRequest {
	r.relatedProfileName = &relatedProfileName
	return r
}

// Indicates whether to exclude Protected Profiles.
func (r ProfileApiGetProfilesRequest) ProtectedProfiles(protectedProfiles bool) ProfileApiGetProfilesRequest {
	r.protectedProfiles = &protectedProfiles
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesRequest) ExcludedProfilesId(excludedProfilesId []string) ProfileApiGetProfilesRequest {
	r.excludedProfilesId = &excludedProfilesId
	return r
}

// Additional identifying value assigned by the creating system.
func (r ProfileApiGetProfilesRequest) IdExtension(idExtension []int32) ProfileApiGetProfilesRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfilesRequest) ExcludedProfilesIdContext(excludedProfilesIdContext []string) ProfileApiGetProfilesRequest {
	r.excludedProfilesIdContext = &excludedProfilesIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetProfilesRequest) ExcludedProfilesIdType(excludedProfilesIdType []string) ProfileApiGetProfilesRequest {
	r.excludedProfilesIdType = &excludedProfilesIdType
	return r
}

// Any identification number associated with the profile such as Passport Number, StateID.
func (r ProfileApiGetProfilesRequest) IdentificationNo(identificationNo string) ProfileApiGetProfilesRequest {
	r.identificationNo = &identificationNo
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetProfilesRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetProfilesRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag indicating whether Profile is Enrolled to Primary Membership Program.
func (r ProfileApiGetProfilesRequest) AllowedAction(allowedAction []string) ProfileApiGetProfilesRequest {
	r.allowedAction = &allowedAction
	return r
}

func (r ProfileApiGetProfilesRequest) VipCodes(vipCodes []string) ProfileApiGetProfilesRequest {
	r.vipCodes = &vipCodes
	return r
}

// Unique ID of the Filter used to filter profiles.
func (r ProfileApiGetProfilesRequest) PredefinedFilterId(predefinedFilterId float32) ProfileApiGetProfilesRequest {
	r.predefinedFilterId = &predefinedFilterId
	return r
}

// Filter code.
func (r ProfileApiGetProfilesRequest) PredefinedFilterCode(predefinedFilterCode string) ProfileApiGetProfilesRequest {
	r.predefinedFilterCode = &predefinedFilterCode
	return r
}

func (r ProfileApiGetProfilesRequest) PrioritieCodes(prioritieCodes []string) ProfileApiGetProfilesRequest {
	r.prioritieCodes = &prioritieCodes
	return r
}

// External system code.
func (r ProfileApiGetProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfilesRequest) Execute() (*ProfileSummaries, *http.Response, error) {
	return r.ApiService.GetProfilesExecute(r)
}

/*
GetProfiles Search for profile(s)

Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetProfilesRequest
*/
func (a *ProfileApiService) GetProfiles(ctx context.Context) ProfileApiGetProfilesRequest {
	return ProfileApiGetProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProfileSummaries
func (a *ProfileApiService) GetProfilesExecute(r ProfileApiGetProfilesRequest) (*ProfileSummaries, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileSummaries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.excludeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeInactive", r.excludeInactive, "")
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.includeHasHierarchyOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHasHierarchyOnly", r.includeHasHierarchyOnly, "")
	}
	if r.includePrimaryOwnersOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePrimaryOwnersOnly", r.includePrimaryOwnersOnly, "")
	}
	if r.includePurgeProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePurgeProfiles", r.includePurgeProfiles, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchType", r.searchType, "")
	}
	if r.summaryInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summaryInfo", r.summaryInfo, "")
	}
	if r.searchString != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchString", r.searchString, "")
	}
	if r.includeAnonymized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAnonymized", r.includeAnonymized, "")
	}
	if r.profileType != nil {
		t := *r.profileType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", t, "multi")
		}
	}
	if r.profileIds != nil {
		t := *r.profileIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", t, "multi")
		}
	}
	if r.externalReferenceIds != nil {
		t := *r.externalReferenceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", t, "multi")
		}
	}
	if r.externalSystemCodes != nil {
		t := *r.externalSystemCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", t, "multi")
		}
	}
	if r.corporateIds != nil {
		t := *r.corporateIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "corporateIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "corporateIds", t, "multi")
		}
	}
	if r.profileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileName", r.profileName, "")
	}
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
	}
	if r.incognitoName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incognitoName", r.incognitoName, "")
	}
	if r.incognitoGivenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incognitoGivenName", r.incognitoGivenName, "")
	}
	if r.city != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "city", r.city, "")
	}
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "countryCode", r.countryCode, "")
	}
	if r.streetAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streetAddress", r.streetAddress, "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "")
	}
	if r.communication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "communication", r.communication, "")
	}
	if r.membership != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membership", r.membership, "")
	}
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
	}
	if r.ownerCodes != nil {
		t := *r.ownerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", t, "multi")
		}
	}
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
	}
	if r.aRNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aRNumber", r.aRNumber, "")
	}
	if r.taxID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taxID", r.taxID, "")
	}
	if r.businessSegment != nil {
		t := *r.businessSegment
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "businessSegment", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "businessSegment", t, "multi")
		}
	}
	if r.accountsReceivables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountsReceivables", r.accountsReceivables, "")
	}
	if r.corporateProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "corporateProfiles", r.corporateProfiles, "")
	}
	if r.excludeIncompleteProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeIncompleteProfiles", r.excludeIncompleteProfiles, "")
	}
	if r.negotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "negotiatedRates", r.negotiatedRates, "")
	}
	if r.relatedProfileExcludeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relatedProfileExcludeInactive", r.relatedProfileExcludeInactive, "")
	}
	if r.realtedProfileIncludeHasHierarchyOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "realtedProfileIncludeHasHierarchyOnly", r.realtedProfileIncludeHasHierarchyOnly, "")
	}
	if r.relatedProfileNegotiatedRates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relatedProfileNegotiatedRates", r.relatedProfileNegotiatedRates, "")
	}
	if r.relatedProfileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relatedProfileType", r.relatedProfileType, "")
	}
	if r.relatedProfileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relatedProfileName", r.relatedProfileName, "")
	}
	if r.protectedProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protectedProfiles", r.protectedProfiles, "")
	}
	if r.excludedProfilesId != nil {
		t := *r.excludedProfilesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesId", t, "multi")
		}
	}
	if r.idExtension != nil {
		t := *r.idExtension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", t, "multi")
		}
	}
	if r.excludedProfilesIdContext != nil {
		t := *r.excludedProfilesIdContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesIdContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesIdContext", t, "multi")
		}
	}
	if r.excludedProfilesIdType != nil {
		t := *r.excludedProfilesIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedProfilesIdType", t, "multi")
		}
	}
	if r.identificationNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identificationNo", r.identificationNo, "")
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	if r.allowedAction != nil {
		t := *r.allowedAction
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedAction", t, "multi")
		}
	}
	if r.vipCodes != nil {
		t := *r.vipCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", t, "multi")
		}
	}
	if r.predefinedFilterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "predefinedFilterId", r.predefinedFilterId, "")
	}
	if r.predefinedFilterCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "predefinedFilterCode", r.predefinedFilterCode, "")
	}
	if r.prioritieCodes != nil {
		t := *r.prioritieCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prioritieCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prioritieCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetProfilesByIdsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	profileIds *[]string
	corporateIds *[]string
	externalReferenceIds *[]string
	externalSystemCodes *[]string
	limit *[]int32
	fetchInstructions *[]string
	instructionParameterType *[]string
	instructionParameterValue *[]string
	hotelId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetProfilesByIdsRequest) Authorization(authorization string) ProfileApiGetProfilesByIdsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetProfilesByIdsRequest) XAppKey(xAppKey string) ProfileApiGetProfilesByIdsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetProfilesByIdsRequest) XHotelid(xHotelid string) ProfileApiGetProfilesByIdsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesByIdsRequest) ProfileIds(profileIds []string) ProfileApiGetProfilesByIdsRequest {
	r.profileIds = &profileIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesByIdsRequest) CorporateIds(corporateIds []string) ProfileApiGetProfilesByIdsRequest {
	r.corporateIds = &corporateIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetProfilesByIdsRequest) ExternalReferenceIds(externalReferenceIds []string) ProfileApiGetProfilesByIdsRequest {
	r.externalReferenceIds = &externalReferenceIds
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetProfilesByIdsRequest) ExternalSystemCodes(externalSystemCodes []string) ProfileApiGetProfilesByIdsRequest {
	r.externalSystemCodes = &externalSystemCodes
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetProfilesByIdsRequest) Limit(limit []int32) ProfileApiGetProfilesByIdsRequest {
	r.limit = &limit
	return r
}

// Room Ownership information associated with the profile.
func (r ProfileApiGetProfilesByIdsRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetProfilesByIdsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.
func (r ProfileApiGetProfilesByIdsRequest) InstructionParameterType(instructionParameterType []string) ProfileApiGetProfilesByIdsRequest {
	r.instructionParameterType = &instructionParameterType
	return r
}

// Value of Profile Instruction Parameter
func (r ProfileApiGetProfilesByIdsRequest) InstructionParameterValue(instructionParameterValue []string) ProfileApiGetProfilesByIdsRequest {
	r.instructionParameterValue = &instructionParameterValue
	return r
}

// Hotel Code, It is used to filter hotel specific.
func (r ProfileApiGetProfilesByIdsRequest) HotelId(hotelId string) ProfileApiGetProfilesByIdsRequest {
	r.hotelId = &hotelId
	return r
}

// External system code.
func (r ProfileApiGetProfilesByIdsRequest) XExternalsystem(xExternalsystem string) ProfileApiGetProfilesByIdsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetProfilesByIdsRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetProfilesByIdsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetProfilesByIdsRequest) Execute() (*ProfileDetails, *http.Response, error) {
	return r.ApiService.GetProfilesByIdsExecute(r)
}

/*
GetProfilesByIds Search for profile(s)

Use this API when you want to search for a profile. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if  a profile for Mr David Smith exists - you can search by various criteria, such as first, last name, email.  The response will include a list of any profiles that exist for Mr Davis Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileID in the request. <p><strong>OperationId:</strong>getProfilesByIds</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetProfilesByIdsRequest
*/
func (a *ProfileApiService) GetProfilesByIds(ctx context.Context) ProfileApiGetProfilesByIdsRequest {
	return ProfileApiGetProfilesByIdsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProfileDetails
func (a *ProfileApiService) GetProfilesByIdsExecute(r ProfileApiGetProfilesByIdsRequest) (*ProfileDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetProfilesByIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profilesByIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileIds != nil {
		t := *r.profileIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", t, "multi")
		}
	}
	if r.corporateIds != nil {
		t := *r.corporateIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "corporateIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "corporateIds", t, "multi")
		}
	}
	if r.externalReferenceIds != nil {
		t := *r.externalReferenceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", t, "multi")
		}
	}
	if r.externalSystemCodes != nil {
		t := *r.externalSystemCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", t, "multi")
		}
	}
	if r.limit != nil {
		t := *r.limit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "limit", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "limit", t, "multi")
		}
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	if r.instructionParameterType != nil {
		t := *r.instructionParameterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterType", t, "multi")
		}
	}
	if r.instructionParameterValue != nil {
		t := *r.instructionParameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "instructionParameterValue", t, "multi")
		}
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetRecentlyAccessedProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetRecentlyAccessedProfilesRequest) Authorization(authorization string) ProfileApiGetRecentlyAccessedProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetRecentlyAccessedProfilesRequest) XAppKey(xAppKey string) ProfileApiGetRecentlyAccessedProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetRecentlyAccessedProfilesRequest) XHotelid(xHotelid string) ProfileApiGetRecentlyAccessedProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileApiGetRecentlyAccessedProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetRecentlyAccessedProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetRecentlyAccessedProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetRecentlyAccessedProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetRecentlyAccessedProfilesRequest) Execute() (*RecentlyAccessedProfiles, *http.Response, error) {
	return r.ApiService.GetRecentlyAccessedProfilesExecute(r)
}

/*
GetRecentlyAccessedProfiles Fetch recently accessed profiles

Use this API to fetch the profiles that have recently been accessed by an application user. <p><strong>OperationId:</strong>getRecentlyAccessedProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetRecentlyAccessedProfilesRequest
*/
func (a *ProfileApiService) GetRecentlyAccessedProfiles(ctx context.Context) ProfileApiGetRecentlyAccessedProfilesRequest {
	return ProfileApiGetRecentlyAccessedProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RecentlyAccessedProfiles
func (a *ProfileApiService) GetRecentlyAccessedProfilesExecute(r ProfileApiGetRecentlyAccessedProfilesRequest) (*RecentlyAccessedProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecentlyAccessedProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetRecentlyAccessedProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recentlyAccessedProfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetStagedProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	id string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	idContext *[]string
	type_ *[]string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetStagedProfileRequest) Authorization(authorization string) ProfileApiGetStagedProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetStagedProfileRequest) XAppKey(xAppKey string) ProfileApiGetStagedProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetStagedProfileRequest) XHotelid(xHotelid string) ProfileApiGetStagedProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// The hotel code that the stage profile belongs to.
func (r ProfileApiGetStagedProfileRequest) HotelId(hotelId string) ProfileApiGetStagedProfileRequest {
	r.hotelId = &hotelId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetStagedProfileRequest) IdContext(idContext []string) ProfileApiGetStagedProfileRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetStagedProfileRequest) Type_(type_ []string) ProfileApiGetStagedProfileRequest {
	r.type_ = &type_
	return r
}

// If selected, only invalid details of the staged profile will be retrieved.
func (r ProfileApiGetStagedProfileRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetStagedProfileRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ProfileApiGetStagedProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiGetStagedProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetStagedProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetStagedProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetStagedProfileRequest) Execute() (*StagedProfileDetails, *http.Response, error) {
	return r.ApiService.GetStagedProfileExecute(r)
}

/*
GetStagedProfile Get a staged profile

The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile.  This API will get a specific profile that has been staged. <p><strong>OperationId:</strong>getStagedProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ProfileApiGetStagedProfileRequest
*/
func (a *ProfileApiService) GetStagedProfile(ctx context.Context, id string) ProfileApiGetStagedProfileRequest {
	return ProfileApiGetStagedProfileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StagedProfileDetails
func (a *ProfileApiService) GetStagedProfileExecute(r ProfileApiGetStagedProfileRequest) (*StagedProfileDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StagedProfileDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetStagedProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stagedProfile/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 1 {
		return localVarReturnValue, nil, reportError("id must have at least 1 elements")
	}
	if strlen(r.id) > 2000 {
		return localVarReturnValue, nil, reportError("id must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetStagedProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelIds *[]string
	id *[]string
	idContext *[]string
	type_ *[]string
	name *string
	givenName *string
	region *string
	countryCode *string
	profileType *string
	importDate *string
	stageStatus *string
	applyTo *string
	membershipCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetStagedProfilesRequest) Authorization(authorization string) ProfileApiGetStagedProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetStagedProfilesRequest) XAppKey(xAppKey string) ProfileApiGetStagedProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetStagedProfilesRequest) XHotelid(xHotelid string) ProfileApiGetStagedProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetStagedProfilesRequest) Limit(limit int32) ProfileApiGetStagedProfilesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileApiGetStagedProfilesRequest) Offset(offset int32) ProfileApiGetStagedProfilesRequest {
	r.offset = &offset
	return r
}

func (r ProfileApiGetStagedProfilesRequest) HotelIds(hotelIds []string) ProfileApiGetStagedProfilesRequest {
	r.hotelIds = &hotelIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileApiGetStagedProfilesRequest) Id(id []string) ProfileApiGetStagedProfilesRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileApiGetStagedProfilesRequest) IdContext(idContext []string) ProfileApiGetStagedProfilesRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileApiGetStagedProfilesRequest) Type_(type_ []string) ProfileApiGetStagedProfilesRequest {
	r.type_ = &type_
	return r
}

// Family name, last name or Company Name.
func (r ProfileApiGetStagedProfilesRequest) Name(name string) ProfileApiGetStagedProfilesRequest {
	r.name = &name
	return r
}

// Given name, first name or names.
func (r ProfileApiGetStagedProfilesRequest) GivenName(givenName string) ProfileApiGetStagedProfilesRequest {
	r.givenName = &givenName
	return r
}

// The profile region for which the staged profiles shall be fetched.
func (r ProfileApiGetStagedProfilesRequest) Region(region string) ProfileApiGetStagedProfilesRequest {
	r.region = &region
	return r
}

// Code for a country or a nationality.
func (r ProfileApiGetStagedProfilesRequest) CountryCode(countryCode string) ProfileApiGetStagedProfilesRequest {
	r.countryCode = &countryCode
	return r
}

// Profile type to be included in the search.
func (r ProfileApiGetStagedProfilesRequest) ProfileType(profileType string) ProfileApiGetStagedProfilesRequest {
	r.profileType = &profileType
	return r
}

// The date on which the staged profiles have been received.
func (r ProfileApiGetStagedProfilesRequest) ImportDate(importDate string) ProfileApiGetStagedProfilesRequest {
	r.importDate = &importDate
	return r
}

// The status of the staged profiles.
func (r ProfileApiGetStagedProfilesRequest) StageStatus(stageStatus string) ProfileApiGetStagedProfilesRequest {
	r.stageStatus = &stageStatus
	return r
}

// Membership filter of staged profiles.
func (r ProfileApiGetStagedProfilesRequest) ApplyTo(applyTo string) ProfileApiGetStagedProfilesRequest {
	r.applyTo = &applyTo
	return r
}

func (r ProfileApiGetStagedProfilesRequest) MembershipCodes(membershipCodes []string) ProfileApiGetStagedProfilesRequest {
	r.membershipCodes = &membershipCodes
	return r
}

// External system code.
func (r ProfileApiGetStagedProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetStagedProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetStagedProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetStagedProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetStagedProfilesRequest) Execute() (*StagedProfiles, *http.Response, error) {
	return r.ApiService.GetStagedProfilesExecute(r)
}

/*
GetStagedProfiles Get staged profiles

The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile. <p><strong>OperationId:</strong>getStagedProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetStagedProfilesRequest
*/
func (a *ProfileApiService) GetStagedProfiles(ctx context.Context) ProfileApiGetStagedProfilesRequest {
	return ProfileApiGetStagedProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StagedProfiles
func (a *ProfileApiService) GetStagedProfilesExecute(r ProfileApiGetStagedProfilesRequest) (*StagedProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StagedProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetStagedProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stagedProfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "")
	}
	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "countryCode", r.countryCode, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	if r.importDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importDate", r.importDate, "")
	}
	if r.stageStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stageStatus", r.stageStatus, "")
	}
	if r.applyTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "applyTo", r.applyTo, "")
	}
	if r.membershipCodes != nil {
		t := *r.membershipCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetStayHistoryRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	includePurgeProfiles *bool
	markAsRecentlyAccessed *bool
	limit *[]int32
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetStayHistoryRequest) Authorization(authorization string) ProfileApiGetStayHistoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetStayHistoryRequest) XAppKey(xAppKey string) ProfileApiGetStayHistoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetStayHistoryRequest) XHotelid(xHotelid string) ProfileApiGetStayHistoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code used to filter hotel specific information regarding the profile.
func (r ProfileApiGetStayHistoryRequest) HotelId(hotelId string) ProfileApiGetStayHistoryRequest {
	r.hotelId = &hotelId
	return r
}

// Providing this flag includes purged profiles in the result.
func (r ProfileApiGetStayHistoryRequest) IncludePurgeProfiles(includePurgeProfiles bool) ProfileApiGetStayHistoryRequest {
	r.includePurgeProfiles = &includePurgeProfiles
	return r
}

// Providing this flag marks the profile as recently accessed.
func (r ProfileApiGetStayHistoryRequest) MarkAsRecentlyAccessed(markAsRecentlyAccessed bool) ProfileApiGetStayHistoryRequest {
	r.markAsRecentlyAccessed = &markAsRecentlyAccessed
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileApiGetStayHistoryRequest) Limit(limit []int32) ProfileApiGetStayHistoryRequest {
	r.limit = &limit
	return r
}

// Simple type for instructions that can be used in requests for partial operations to fetch past and future reservation.
func (r ProfileApiGetStayHistoryRequest) FetchInstructions(fetchInstructions []string) ProfileApiGetStayHistoryRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ProfileApiGetStayHistoryRequest) XExternalsystem(xExternalsystem string) ProfileApiGetStayHistoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetStayHistoryRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetStayHistoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetStayHistoryRequest) Execute() (*ProfileStayHistory, *http.Response, error) {
	return r.ApiService.GetStayHistoryExecute(r)
}

/*
GetStayHistory FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.

 <p><strong>OperationId:</strong>getStayHistory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiGetStayHistoryRequest
*/
func (a *ProfileApiService) GetStayHistory(ctx context.Context, profileId string) ProfileApiGetStayHistoryRequest {
	return ProfileApiGetStayHistoryRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ProfileStayHistory
func (a *ProfileApiService) GetStayHistoryExecute(r ProfileApiGetStayHistoryRequest) (*ProfileStayHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileStayHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetStayHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/stayHistory"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.includePurgeProfiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePurgeProfiles", r.includePurgeProfiles, "")
	}
	if r.markAsRecentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "markAsRecentlyAccessed", r.markAsRecentlyAccessed, "")
	}
	if r.limit != nil {
		t := *r.limit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "limit", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "limit", t, "multi")
		}
	}
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetSuspendedAddressesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	name *string
	hotelId *string
	firstName *string
	profileType *string
	matchCode *string
	countryCode *string
	validateDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetSuspendedAddressesRequest) Authorization(authorization string) ProfileApiGetSuspendedAddressesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetSuspendedAddressesRequest) XAppKey(xAppKey string) ProfileApiGetSuspendedAddressesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetSuspendedAddressesRequest) XHotelid(xHotelid string) ProfileApiGetSuspendedAddressesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Last Name of the Profile against which the Suspended Addresses are fetched.
func (r ProfileApiGetSuspendedAddressesRequest) Name(name string) ProfileApiGetSuspendedAddressesRequest {
	r.name = &name
	return r
}

// Hotel Code, It is used to filter hotel specific children to this specific hotel code.
func (r ProfileApiGetSuspendedAddressesRequest) HotelId(hotelId string) ProfileApiGetSuspendedAddressesRequest {
	r.hotelId = &hotelId
	return r
}

// First Name of the Profile against which the Suspended Addresses are fetched.
func (r ProfileApiGetSuspendedAddressesRequest) FirstName(firstName string) ProfileApiGetSuspendedAddressesRequest {
	r.firstName = &firstName
	return r
}

// ProfileT ype of the Profile against which the Suspended Addresses are fetched..
func (r ProfileApiGetSuspendedAddressesRequest) ProfileType(profileType string) ProfileApiGetSuspendedAddressesRequest {
	r.profileType = &profileType
	return r
}

// Match Code of the Address Validation Performed from the batch processing
func (r ProfileApiGetSuspendedAddressesRequest) MatchCode(matchCode string) ProfileApiGetSuspendedAddressesRequest {
	r.matchCode = &matchCode
	return r
}

// Code for a country or a nationality.
func (r ProfileApiGetSuspendedAddressesRequest) CountryCode(countryCode string) ProfileApiGetSuspendedAddressesRequest {
	r.countryCode = &countryCode
	return r
}

// Validate Date.
func (r ProfileApiGetSuspendedAddressesRequest) ValidateDate(validateDate string) ProfileApiGetSuspendedAddressesRequest {
	r.validateDate = &validateDate
	return r
}

// External system code.
func (r ProfileApiGetSuspendedAddressesRequest) XExternalsystem(xExternalsystem string) ProfileApiGetSuspendedAddressesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetSuspendedAddressesRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetSuspendedAddressesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetSuspendedAddressesRequest) Execute() (*SuspendedAddresses, *http.Response, error) {
	return r.ApiService.GetSuspendedAddressesExecute(r)
}

/*
GetSuspendedAddresses Fetch Suspended Profile Addresses

Fetch Suspended Profile Addresses <p><strong>OperationId:</strong>getSuspendedAddresses</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetSuspendedAddressesRequest
*/
func (a *ProfileApiService) GetSuspendedAddresses(ctx context.Context) ProfileApiGetSuspendedAddressesRequest {
	return ProfileApiGetSuspendedAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuspendedAddresses
func (a *ProfileApiService) GetSuspendedAddressesExecute(r ProfileApiGetSuspendedAddressesRequest) (*SuspendedAddresses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendedAddresses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetSuspendedAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedAddresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.firstName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstName", r.firstName, "")
	}
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
	}
	if r.matchCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchCode", r.matchCode, "")
	}
	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "countryCode", r.countryCode, "")
	}
	if r.validateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validateDate", r.validateDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiGetSuspendedProfileErrorSummaryRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) Authorization(authorization string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) XAppKey(xAppKey string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) XHotelid(xHotelid string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) HotelIds(hotelIds []string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.hotelIds = &hotelIds
	return r
}

// External system code.
func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) XExternalsystem(xExternalsystem string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) AcceptLanguage(acceptLanguage string) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiGetSuspendedProfileErrorSummaryRequest) Execute() (*SuspendedProfileErrorSummaryInfo, *http.Response, error) {
	return r.ApiService.GetSuspendedProfileErrorSummaryExecute(r)
}

/*
GetSuspendedProfileErrorSummary Get suspended profile error summary details

Retrieve the suspended profile error summary details <p><strong>OperationId:</strong>getSuspendedProfileErrorSummary</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiGetSuspendedProfileErrorSummaryRequest
*/
func (a *ProfileApiService) GetSuspendedProfileErrorSummary(ctx context.Context) ProfileApiGetSuspendedProfileErrorSummaryRequest {
	return ProfileApiGetSuspendedProfileErrorSummaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuspendedProfileErrorSummaryInfo
func (a *ProfileApiService) GetSuspendedProfileErrorSummaryExecute(r ProfileApiGetSuspendedProfileErrorSummaryRequest) (*SuspendedProfileErrorSummaryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendedProfileErrorSummaryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.GetSuspendedProfileErrorSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedProfileErrorSummary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiMergeProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	survivorProfileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileToBeMerged *MergeProfilesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiMergeProfilesRequest) Authorization(authorization string) ProfileApiMergeProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiMergeProfilesRequest) XAppKey(xAppKey string) ProfileApiMergeProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiMergeProfilesRequest) XHotelid(xHotelid string) ProfileApiMergeProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for merging profiles.
func (r ProfileApiMergeProfilesRequest) ProfileToBeMerged(profileToBeMerged MergeProfilesRequest) ProfileApiMergeProfilesRequest {
	r.profileToBeMerged = &profileToBeMerged
	return r
}

// External system code.
func (r ProfileApiMergeProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiMergeProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiMergeProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiMergeProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiMergeProfilesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.MergeProfilesExecute(r)
}

/*
MergeProfiles Merge two profiles by ID

When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param survivorProfileId Original Profile ID to which profiles will be merged in OPERA.
 @return ProfileApiMergeProfilesRequest
*/
func (a *ProfileApiService) MergeProfiles(ctx context.Context, survivorProfileId string) ProfileApiMergeProfilesRequest {
	return ProfileApiMergeProfilesRequest{
		ApiService: a,
		ctx: ctx,
		survivorProfileId: survivorProfileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) MergeProfilesExecute(r ProfileApiMergeProfilesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.MergeProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{survivorProfileId}/merges"
	localVarPath = strings.Replace(localVarPath, "{"+"survivorProfileId"+"}", url.PathEscape(parameterValueToString(r.survivorProfileId, "survivorProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.survivorProfileId) < 1 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have at least 1 elements")
	}
	if strlen(r.survivorProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("survivorProfileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileToBeMerged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostAccountForecastRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	forecastsInformation *PostAccountForecastRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostAccountForecastRequest) Authorization(authorization string) ProfileApiPostAccountForecastRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostAccountForecastRequest) XAppKey(xAppKey string) ProfileApiPostAccountForecastRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostAccountForecastRequest) XHotelid(xHotelid string) ProfileApiPostAccountForecastRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating forecast(s) of an account profile.
func (r ProfileApiPostAccountForecastRequest) ForecastsInformation(forecastsInformation PostAccountForecastRequest) ProfileApiPostAccountForecastRequest {
	r.forecastsInformation = &forecastsInformation
	return r
}

// External system code.
func (r ProfileApiPostAccountForecastRequest) XExternalsystem(xExternalsystem string) ProfileApiPostAccountForecastRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostAccountForecastRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostAccountForecastRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostAccountForecastRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostAccountForecastExecute(r)
}

/*
PostAccountForecast Create account forecast in a hotel

Use postAccountForecast to create a new account forecast for a hotel.  <p><strong>OperationId:</strong>postAccountForecast</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel
 @param profileId Unique OPERA internal account profile ID
 @return ProfileApiPostAccountForecastRequest
*/
func (a *ProfileApiService) PostAccountForecast(ctx context.Context, hotelId string, profileId string) ProfileApiPostAccountForecastRequest {
	return ProfileApiPostAccountForecastRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostAccountForecastExecute(r ProfileApiPostAccountForecastRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostAccountForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/forecasts"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.forecastsInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostCompanyProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	company *PostCompanyProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostCompanyProfileRequest) Authorization(authorization string) ProfileApiPostCompanyProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostCompanyProfileRequest) XAppKey(xAppKey string) ProfileApiPostCompanyProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostCompanyProfileRequest) XHotelid(xHotelid string) ProfileApiPostCompanyProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creation of company profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.
func (r ProfileApiPostCompanyProfileRequest) Company(company PostCompanyProfileRequest) ProfileApiPostCompanyProfileRequest {
	r.company = &company
	return r
}

// External system code.
func (r ProfileApiPostCompanyProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiPostCompanyProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostCompanyProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostCompanyProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostCompanyProfileRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostCompanyProfileExecute(r)
}

/*
PostCompanyProfile This API facilitates creation of a company/agent/group/source profile in OPERA.

When a profile doesn't already exist for a guest, use this to create a new profile.  The response will provide the newly created profile's OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiPostCompanyProfileRequest
*/
func (a *ProfileApiService) PostCompanyProfile(ctx context.Context) ProfileApiPostCompanyProfileRequest {
	return ProfileApiPostCompanyProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostCompanyProfileExecute(r ProfileApiPostCompanyProfileRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostCompanyProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.company
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostECertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	eCertificateGeneration *PostECertificateRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostECertificateRequest) Authorization(authorization string) ProfileApiPostECertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostECertificateRequest) XAppKey(xAppKey string) ProfileApiPostECertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostECertificateRequest) XHotelid(xHotelid string) ProfileApiPostECertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to issue E-Certificate.
func (r ProfileApiPostECertificateRequest) ECertificateGeneration(eCertificateGeneration PostECertificateRequest) ProfileApiPostECertificateRequest {
	r.eCertificateGeneration = &eCertificateGeneration
	return r
}

// External system code.
func (r ProfileApiPostECertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiPostECertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostECertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostECertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostECertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostECertificateExecute(r)
}

/*
PostECertificate Create e-certificate

This API allows you to create a new eCertificates onto a profile in OPERA Cloud. <p><strong>OperationId:</strong>postECertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiPostECertificateRequest
*/
func (a *ProfileApiService) PostECertificate(ctx context.Context) ProfileApiPostECertificateRequest {
	return ProfileApiPostECertificateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostECertificateExecute(r ProfileApiPostECertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostECertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCertificateGeneration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostGuestProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	guest *PostGuestProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostGuestProfileRequest) Authorization(authorization string) ProfileApiPostGuestProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostGuestProfileRequest) XAppKey(xAppKey string) ProfileApiPostGuestProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostGuestProfileRequest) XHotelid(xHotelid string) ProfileApiPostGuestProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creation of guest profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.
func (r ProfileApiPostGuestProfileRequest) Guest(guest PostGuestProfileRequest) ProfileApiPostGuestProfileRequest {
	r.guest = &guest
	return r
}

// External system code.
func (r ProfileApiPostGuestProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiPostGuestProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostGuestProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostGuestProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostGuestProfileRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostGuestProfileExecute(r)
}

/*
PostGuestProfile Create a guest, contact or employee profile in OPERA

When a profile doesn't already exist for a guest, use this to create a new profile.  The response will provide the newly created profile's OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiPostGuestProfileRequest
*/
func (a *ProfileApiService) PostGuestProfile(ctx context.Context) ProfileApiPostGuestProfileRequest {
	return ProfileApiPostGuestProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostGuestProfileExecute(r ProfileApiPostGuestProfileRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostGuestProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.guest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostMembershipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membership *ChangeMembershipRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostMembershipRequest) Authorization(authorization string) ProfileApiPostMembershipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostMembershipRequest) XAppKey(xAppKey string) ProfileApiPostMembershipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostMembershipRequest) XHotelid(xHotelid string) ProfileApiPostMembershipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for create membership. This object contains unique identifiers for each profile and list of membership details to be created. The standard optional Opera Context element is also included.
func (r ProfileApiPostMembershipRequest) Membership(membership ChangeMembershipRequest) ProfileApiPostMembershipRequest {
	r.membership = &membership
	return r
}

// External system code.
func (r ProfileApiPostMembershipRequest) XExternalsystem(xExternalsystem string) ProfileApiPostMembershipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostMembershipRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostMembershipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostMembershipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMembershipExecute(r)
}

/*
PostMembership Create membership on a profile

A guest might be a member of your hotel loyalty program and/or a member of multiple airline frequent flier programs. Use this API to add membership details onto a guests profile. <p><strong>OperationId:</strong>postMembership</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiPostMembershipRequest
*/
func (a *ProfileApiService) PostMembership(ctx context.Context, profileId string) ProfileApiPostMembershipRequest {
	return ProfileApiPostMembershipRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostMembershipExecute(r ProfileApiPostMembershipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostMembership")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/memberships"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membership
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostMembershipNumberRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	membershipType string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipNumber *PostMembershipNumberRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostMembershipNumberRequest) Authorization(authorization string) ProfileApiPostMembershipNumberRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostMembershipNumberRequest) XAppKey(xAppKey string) ProfileApiPostMembershipNumberRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostMembershipNumberRequest) XHotelid(xHotelid string) ProfileApiPostMembershipNumberRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for generating membership number.
func (r ProfileApiPostMembershipNumberRequest) MembershipNumber(membershipNumber PostMembershipNumberRequest) ProfileApiPostMembershipNumberRequest {
	r.membershipNumber = &membershipNumber
	return r
}

// External system code.
func (r ProfileApiPostMembershipNumberRequest) XExternalsystem(xExternalsystem string) ProfileApiPostMembershipNumberRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostMembershipNumberRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostMembershipNumberRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostMembershipNumberRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMembershipNumberExecute(r)
}

/*
PostMembershipNumber Generate membership number

This API will generate a new membership number. <p><strong>OperationId:</strong>postMembershipNumber</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipType
 @return ProfileApiPostMembershipNumberRequest
*/
func (a *ProfileApiService) PostMembershipNumber(ctx context.Context, membershipType string) ProfileApiPostMembershipNumberRequest {
	return ProfileApiPostMembershipNumberRequest{
		ApiService: a,
		ctx: ctx,
		membershipType: membershipType,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostMembershipNumberExecute(r ProfileApiPostMembershipNumberRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostMembershipNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipType}/membershipNumbers"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipType"+"}", url.PathEscape(parameterValueToString(r.membershipType, "membershipType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipType) < 1 {
		return localVarReturnValue, nil, reportError("membershipType must have at least 1 elements")
	}
	if strlen(r.membershipType) > 2000 {
		return localVarReturnValue, nil, reportError("membershipType must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipNumber
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostPreferenceRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	preference *DistributePreferenceRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostPreferenceRequest) Authorization(authorization string) ProfileApiPostPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostPreferenceRequest) XAppKey(xAppKey string) ProfileApiPostPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostPreferenceRequest) XHotelid(xHotelid string) ProfileApiPostPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for Create Preference. This object contains unique identifiers for each profile and list of preferences to be associated with the profile. The standard optional Opera Context element is also included.
func (r ProfileApiPostPreferenceRequest) Preference(preference DistributePreferenceRequest) ProfileApiPostPreferenceRequest {
	r.preference = &preference
	return r
}

// External system code.
func (r ProfileApiPostPreferenceRequest) XExternalsystem(xExternalsystem string) ProfileApiPostPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostPreferenceRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostPreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPreferenceExecute(r)
}

/*
PostPreference Add preferences to a profile

You can add new preferences to a profile to personalize or enhance your guest services.  You will need to know the profile ID, and the properties pre-configured preference codes. <p><strong>OperationId:</strong>postPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiPostPreferenceRequest
*/
func (a *ProfileApiService) PostPreference(ctx context.Context, profileId string) ProfileApiPostPreferenceRequest {
	return ProfileApiPostPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostPreferenceExecute(r ProfileApiPostPreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.preference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	profile *PostProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostProfileRequest) Authorization(authorization string) ProfileApiPostProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostProfileRequest) XAppKey(xAppKey string) ProfileApiPostProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostProfileRequest) XHotelid(xHotelid string) ProfileApiPostProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creation of profiles. This object contains profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.
func (r ProfileApiPostProfileRequest) Profile(profile PostProfileRequest) ProfileApiPostProfileRequest {
	r.profile = &profile
	return r
}

// External system code.
func (r ProfileApiPostProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiPostProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostProfileRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostProfileExecute(r)
}

/*
PostProfile Create a profile

When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiPostProfileRequest
*/
func (a *ProfileApiService) PostProfile(ctx context.Context) ProfileApiPostProfileRequest {
	return ProfileApiPostProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostProfileExecute(r ProfileApiPostProfileRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostProfileCommissionAccountRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileCommissionAccount *SetProfileCommissionAccountRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostProfileCommissionAccountRequest) Authorization(authorization string) ProfileApiPostProfileCommissionAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostProfileCommissionAccountRequest) XAppKey(xAppKey string) ProfileApiPostProfileCommissionAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostProfileCommissionAccountRequest) XHotelid(xHotelid string) ProfileApiPostProfileCommissionAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating profile commission detail.
func (r ProfileApiPostProfileCommissionAccountRequest) ProfileCommissionAccount(profileCommissionAccount SetProfileCommissionAccountRequest) ProfileApiPostProfileCommissionAccountRequest {
	r.profileCommissionAccount = &profileCommissionAccount
	return r
}

// External system code.
func (r ProfileApiPostProfileCommissionAccountRequest) XExternalsystem(xExternalsystem string) ProfileApiPostProfileCommissionAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostProfileCommissionAccountRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostProfileCommissionAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostProfileCommissionAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostProfileCommissionAccountExecute(r)
}

/*
PostProfileCommissionAccount Add a commission account on a profile

Add a commission account on a profile.  You can only add commission accounts onto a Travel Agent or Source Profile type in OPERA Cloud. <p><strong>OperationId:</strong>postProfileCommissionAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiPostProfileCommissionAccountRequest
*/
func (a *ProfileApiService) PostProfileCommissionAccount(ctx context.Context, profileId string) ProfileApiPostProfileCommissionAccountRequest {
	return ProfileApiPostProfileCommissionAccountRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostProfileCommissionAccountExecute(r ProfileApiPostProfileCommissionAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostProfileCommissionAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/commissionAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileCommissionAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostProfileOwnersRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileOwners *PostProfileOwnersRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostProfileOwnersRequest) Authorization(authorization string) ProfileApiPostProfileOwnersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostProfileOwnersRequest) XAppKey(xAppKey string) ProfileApiPostProfileOwnersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostProfileOwnersRequest) XHotelid(xHotelid string) ProfileApiPostProfileOwnersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to assign profile owners.
func (r ProfileApiPostProfileOwnersRequest) ProfileOwners(profileOwners PostProfileOwnersRequest) ProfileApiPostProfileOwnersRequest {
	r.profileOwners = &profileOwners
	return r
}

// External system code.
func (r ProfileApiPostProfileOwnersRequest) XExternalsystem(xExternalsystem string) ProfileApiPostProfileOwnersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostProfileOwnersRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostProfileOwnersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostProfileOwnersRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostProfileOwnersExecute(r)
}

/*
PostProfileOwners Assign profile owners

Assign an Owner to a profile. <p><strong>OperationId:</strong>postProfileOwners</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiPostProfileOwnersRequest
*/
func (a *ProfileApiService) PostProfileOwners(ctx context.Context, profileId string) ProfileApiPostProfileOwnersRequest {
	return ProfileApiPostProfileOwnersRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostProfileOwnersExecute(r ProfileApiPostProfileOwnersRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostProfileOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/owners"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileOwners
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPostProfileRelationshipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	targetProfileId string
	sourceProfileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileRelationship *PostProfileRelationshipRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPostProfileRelationshipRequest) Authorization(authorization string) ProfileApiPostProfileRelationshipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPostProfileRelationshipRequest) XAppKey(xAppKey string) ProfileApiPostProfileRelationshipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPostProfileRelationshipRequest) XHotelid(xHotelid string) ProfileApiPostProfileRelationshipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating profile relationship.
func (r ProfileApiPostProfileRelationshipRequest) ProfileRelationship(profileRelationship PostProfileRelationshipRequest) ProfileApiPostProfileRelationshipRequest {
	r.profileRelationship = &profileRelationship
	return r
}

// External system code.
func (r ProfileApiPostProfileRelationshipRequest) XExternalsystem(xExternalsystem string) ProfileApiPostProfileRelationshipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPostProfileRelationshipRequest) AcceptLanguage(acceptLanguage string) ProfileApiPostProfileRelationshipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPostProfileRelationshipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostProfileRelationshipExecute(r)
}

/*
PostProfileRelationship CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.

 <p><strong>OperationId:</strong>postProfileRelationship</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetProfileId
 @param sourceProfileId
 @return ProfileApiPostProfileRelationshipRequest
*/
func (a *ProfileApiService) PostProfileRelationship(ctx context.Context, targetProfileId string, sourceProfileId string) ProfileApiPostProfileRelationshipRequest {
	return ProfileApiPostProfileRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		targetProfileId: targetProfileId,
		sourceProfileId: sourceProfileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PostProfileRelationshipExecute(r ProfileApiPostProfileRelationshipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PostProfileRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{sourceProfileId}/relationships/{targetProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetProfileId"+"}", url.PathEscape(parameterValueToString(r.targetProfileId, "targetProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceProfileId"+"}", url.PathEscape(parameterValueToString(r.sourceProfileId, "sourceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.targetProfileId) < 1 {
		return localVarReturnValue, nil, reportError("targetProfileId must have at least 1 elements")
	}
	if strlen(r.targetProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("targetProfileId must have less than 2000 elements")
	}
	if strlen(r.sourceProfileId) < 1 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have at least 1 elements")
	}
	if strlen(r.sourceProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileRelationship
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPutAccountForecastRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	periodCode string
	hotelId string
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	forecastsInformation *PostAccountForecastRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPutAccountForecastRequest) Authorization(authorization string) ProfileApiPutAccountForecastRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPutAccountForecastRequest) XAppKey(xAppKey string) ProfileApiPutAccountForecastRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPutAccountForecastRequest) XHotelid(xHotelid string) ProfileApiPutAccountForecastRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing forecast(s) of an account profile.
func (r ProfileApiPutAccountForecastRequest) ForecastsInformation(forecastsInformation PostAccountForecastRequest) ProfileApiPutAccountForecastRequest {
	r.forecastsInformation = &forecastsInformation
	return r
}

// External system code.
func (r ProfileApiPutAccountForecastRequest) XExternalsystem(xExternalsystem string) ProfileApiPutAccountForecastRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPutAccountForecastRequest) AcceptLanguage(acceptLanguage string) ProfileApiPutAccountForecastRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPutAccountForecastRequest) Execute() (*ChangeAccountForecastsRS, *http.Response, error) {
	return r.ApiService.PutAccountForecastExecute(r)
}

/*
PutAccountForecast Update account forecast in a hotel by period code

Use this to update an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>putAccountForecast</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param periodCode Period Code
 @param hotelId Unique ID of the hotel.
 @param profileId Unique Account Profile ID.
 @return ProfileApiPutAccountForecastRequest
*/
func (a *ProfileApiService) PutAccountForecast(ctx context.Context, periodCode string, hotelId string, profileId string) ProfileApiPutAccountForecastRequest {
	return ProfileApiPutAccountForecastRequest{
		ApiService: a,
		ctx: ctx,
		periodCode: periodCode,
		hotelId: hotelId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ChangeAccountForecastsRS
func (a *ProfileApiService) PutAccountForecastExecute(r ProfileApiPutAccountForecastRequest) (*ChangeAccountForecastsRS, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeAccountForecastsRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PutAccountForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/hotels/{hotelId}/forecasts/periodCodes/{periodCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"periodCode"+"}", url.PathEscape(parameterValueToString(r.periodCode, "periodCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.periodCode) < 1 {
		return localVarReturnValue, nil, reportError("periodCode must have at least 1 elements")
	}
	if strlen(r.periodCode) > 2000 {
		return localVarReturnValue, nil, reportError("periodCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.forecastsInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPutProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profile *PutProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPutProfileRequest) Authorization(authorization string) ProfileApiPutProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPutProfileRequest) XAppKey(xAppKey string) ProfileApiPutProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPutProfileRequest) XHotelid(xHotelid string) ProfileApiPutProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for change/modification of profile details. This object contains modified profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.
func (r ProfileApiPutProfileRequest) Profile(profile PutProfileRequest) ProfileApiPutProfileRequest {
	r.profile = &profile
	return r
}

// External system code.
func (r ProfileApiPutProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiPutProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPutProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiPutProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPutProfileRequest) Execute() (*Profile, *http.Response, error) {
	return r.ApiService.PutProfileExecute(r)
}

/*
PutProfile Update a profile by ID

Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.
 @return ProfileApiPutProfileRequest
*/
func (a *ProfileApiService) PutProfile(ctx context.Context, profileId string) ProfileApiPutProfileRequest {
	return ProfileApiPutProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Profile
func (a *ProfileApiService) PutProfileExecute(r ProfileApiPutProfileRequest) (*Profile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Profile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PutProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiPutProfileRelationshipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	targetProfileId string
	sourceProfileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileRelationshipToBeChanged *PutProfileRelationshipRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiPutProfileRelationshipRequest) Authorization(authorization string) ProfileApiPutProfileRelationshipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiPutProfileRelationshipRequest) XAppKey(xAppKey string) ProfileApiPutProfileRelationshipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiPutProfileRelationshipRequest) XHotelid(xHotelid string) ProfileApiPutProfileRelationshipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing profile relationship.
func (r ProfileApiPutProfileRelationshipRequest) ProfileRelationshipToBeChanged(profileRelationshipToBeChanged PutProfileRelationshipRequest) ProfileApiPutProfileRelationshipRequest {
	r.profileRelationshipToBeChanged = &profileRelationshipToBeChanged
	return r
}

// External system code.
func (r ProfileApiPutProfileRelationshipRequest) XExternalsystem(xExternalsystem string) ProfileApiPutProfileRelationshipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiPutProfileRelationshipRequest) AcceptLanguage(acceptLanguage string) ProfileApiPutProfileRelationshipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiPutProfileRelationshipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutProfileRelationshipExecute(r)
}

/*
PutProfileRelationship ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.

 <p><strong>OperationId:</strong>putProfileRelationship</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetProfileId
 @param sourceProfileId
 @return ProfileApiPutProfileRelationshipRequest
*/
func (a *ProfileApiService) PutProfileRelationship(ctx context.Context, targetProfileId string, sourceProfileId string) ProfileApiPutProfileRelationshipRequest {
	return ProfileApiPutProfileRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		targetProfileId: targetProfileId,
		sourceProfileId: sourceProfileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) PutProfileRelationshipExecute(r ProfileApiPutProfileRelationshipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.PutProfileRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{sourceProfileId}/relationships/{targetProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetProfileId"+"}", url.PathEscape(parameterValueToString(r.targetProfileId, "targetProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceProfileId"+"}", url.PathEscape(parameterValueToString(r.sourceProfileId, "sourceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.targetProfileId) < 1 {
		return localVarReturnValue, nil, reportError("targetProfileId must have at least 1 elements")
	}
	if strlen(r.targetProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("targetProfileId must have less than 2000 elements")
	}
	if strlen(r.sourceProfileId) < 1 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have at least 1 elements")
	}
	if strlen(r.sourceProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileRelationshipToBeChanged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiRemoveProfileRelationshipRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	targetProfileId string
	sourceProfileId string
	sourceRelation *string
	targetRelation *string
	authorization *string
	xAppKey *string
	xHotelid *string
	primary *bool
	sourceRelationDescription *string
	targetRelationDescription *string
	xExternalsystem *string
	acceptLanguage *string
}

// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
func (r ProfileApiRemoveProfileRelationshipRequest) SourceRelation(sourceRelation string) ProfileApiRemoveProfileRelationshipRequest {
	r.sourceRelation = &sourceRelation
	return r
}

// Indicates the type of relationship the related profile(Target Profile) has with the current profile(Source Profile).
func (r ProfileApiRemoveProfileRelationshipRequest) TargetRelation(targetRelation string) ProfileApiRemoveProfileRelationshipRequest {
	r.targetRelation = &targetRelation
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiRemoveProfileRelationshipRequest) Authorization(authorization string) ProfileApiRemoveProfileRelationshipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiRemoveProfileRelationshipRequest) XAppKey(xAppKey string) ProfileApiRemoveProfileRelationshipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiRemoveProfileRelationshipRequest) XHotelid(xHotelid string) ProfileApiRemoveProfileRelationshipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates if this relationship is the primary relationship.
func (r ProfileApiRemoveProfileRelationshipRequest) Primary(primary bool) ProfileApiRemoveProfileRelationshipRequest {
	r.primary = &primary
	return r
}

// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).This needs to be passed if the attribute primary is sent as true.
func (r ProfileApiRemoveProfileRelationshipRequest) SourceRelationDescription(sourceRelationDescription string) ProfileApiRemoveProfileRelationshipRequest {
	r.sourceRelationDescription = &sourceRelationDescription
	return r
}

// Displays the description of relationship the related profile(Target Profile) has with the current profile(Source Profile).
func (r ProfileApiRemoveProfileRelationshipRequest) TargetRelationDescription(targetRelationDescription string) ProfileApiRemoveProfileRelationshipRequest {
	r.targetRelationDescription = &targetRelationDescription
	return r
}

// External system code.
func (r ProfileApiRemoveProfileRelationshipRequest) XExternalsystem(xExternalsystem string) ProfileApiRemoveProfileRelationshipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiRemoveProfileRelationshipRequest) AcceptLanguage(acceptLanguage string) ProfileApiRemoveProfileRelationshipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiRemoveProfileRelationshipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.RemoveProfileRelationshipExecute(r)
}

/*
RemoveProfileRelationship DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.

 <p><strong>OperationId:</strong>removeProfileRelationship</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetProfileId
 @param sourceProfileId
 @return ProfileApiRemoveProfileRelationshipRequest
*/
func (a *ProfileApiService) RemoveProfileRelationship(ctx context.Context, targetProfileId string, sourceProfileId string) ProfileApiRemoveProfileRelationshipRequest {
	return ProfileApiRemoveProfileRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		targetProfileId: targetProfileId,
		sourceProfileId: sourceProfileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) RemoveProfileRelationshipExecute(r ProfileApiRemoveProfileRelationshipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.RemoveProfileRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{sourceProfileId}/relationships/{targetProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetProfileId"+"}", url.PathEscape(parameterValueToString(r.targetProfileId, "targetProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceProfileId"+"}", url.PathEscape(parameterValueToString(r.sourceProfileId, "sourceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.targetProfileId) < 1 {
		return localVarReturnValue, nil, reportError("targetProfileId must have at least 1 elements")
	}
	if strlen(r.targetProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("targetProfileId must have less than 2000 elements")
	}
	if strlen(r.sourceProfileId) < 1 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have at least 1 elements")
	}
	if strlen(r.sourceProfileId) > 2000 {
		return localVarReturnValue, nil, reportError("sourceProfileId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "sourceRelation", r.sourceRelation, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "targetRelation", r.targetRelation, "")
	if r.primary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "primary", r.primary, "")
	}
	if r.sourceRelationDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceRelationDescription", r.sourceRelationDescription, "")
	}
	if r.targetRelationDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetRelationDescription", r.targetRelationDescription, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiSetProfileCommissionAccountRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileCommissionAccount *SetProfileCommissionAccountRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiSetProfileCommissionAccountRequest) Authorization(authorization string) ProfileApiSetProfileCommissionAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiSetProfileCommissionAccountRequest) XAppKey(xAppKey string) ProfileApiSetProfileCommissionAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiSetProfileCommissionAccountRequest) XHotelid(xHotelid string) ProfileApiSetProfileCommissionAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating profile commission detail.
func (r ProfileApiSetProfileCommissionAccountRequest) ProfileCommissionAccount(profileCommissionAccount SetProfileCommissionAccountRequest) ProfileApiSetProfileCommissionAccountRequest {
	r.profileCommissionAccount = &profileCommissionAccount
	return r
}

// External system code.
func (r ProfileApiSetProfileCommissionAccountRequest) XExternalsystem(xExternalsystem string) ProfileApiSetProfileCommissionAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiSetProfileCommissionAccountRequest) AcceptLanguage(acceptLanguage string) ProfileApiSetProfileCommissionAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiSetProfileCommissionAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetProfileCommissionAccountExecute(r)
}

/*
SetProfileCommissionAccount Set profile commission account

Apply a commission account to an existing profile. You can add commission accounts to Travel Agent profile types. <p><strong>OperationId:</strong>setProfileCommissionAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiSetProfileCommissionAccountRequest
*/
func (a *ProfileApiService) SetProfileCommissionAccount(ctx context.Context, profileId string) ProfileApiSetProfileCommissionAccountRequest {
	return ProfileApiSetProfileCommissionAccountRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) SetProfileCommissionAccountExecute(r ProfileApiSetProfileCommissionAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.SetProfileCommissionAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/commissionAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileCommissionAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiStoreEmailRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	emailMessageType *StoreEmailRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiStoreEmailRequest) Authorization(authorization string) ProfileApiStoreEmailRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiStoreEmailRequest) XAppKey(xAppKey string) ProfileApiStoreEmailRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiStoreEmailRequest) XHotelid(xHotelid string) ProfileApiStoreEmailRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for storing an email.
func (r ProfileApiStoreEmailRequest) EmailMessageType(emailMessageType StoreEmailRequest) ProfileApiStoreEmailRequest {
	r.emailMessageType = &emailMessageType
	return r
}

// External system code.
func (r ProfileApiStoreEmailRequest) XExternalsystem(xExternalsystem string) ProfileApiStoreEmailRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiStoreEmailRequest) AcceptLanguage(acceptLanguage string) ProfileApiStoreEmailRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiStoreEmailRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.StoreEmailExecute(r)
}

/*
StoreEmail Create an Email.

Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Profile ID linked to an Email.
 @return ProfileApiStoreEmailRequest
*/
func (a *ProfileApiService) StoreEmail(ctx context.Context, profileId string) ProfileApiStoreEmailRequest {
	return ProfileApiStoreEmailRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) StoreEmailExecute(r ProfileApiStoreEmailRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.StoreEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/emails"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.emailMessageType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiSynchronizeProfileSubscriptionsRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	profileSubscriptionsToSynchronize *SynchronizeProfileSubscriptionsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) Authorization(authorization string) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) XAppKey(xAppKey string) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) XHotelid(xHotelid string) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for re-subscribing profile subscriptions.
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) ProfileSubscriptionsToSynchronize(profileSubscriptionsToSynchronize SynchronizeProfileSubscriptionsRequest) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.profileSubscriptionsToSynchronize = &profileSubscriptionsToSynchronize
	return r
}

// External system code.
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) XExternalsystem(xExternalsystem string) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiSynchronizeProfileSubscriptionsRequest) AcceptLanguage(acceptLanguage string) ProfileApiSynchronizeProfileSubscriptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiSynchronizeProfileSubscriptionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SynchronizeProfileSubscriptionsExecute(r)
}

/*
SynchronizeProfileSubscriptions Synchronize profile subscriptions

Synchronize profile subscriptions <p><strong>OperationId:</strong>synchronizeProfileSubscriptions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiSynchronizeProfileSubscriptionsRequest
*/
func (a *ProfileApiService) SynchronizeProfileSubscriptions(ctx context.Context) ProfileApiSynchronizeProfileSubscriptionsRequest {
	return ProfileApiSynchronizeProfileSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileApiService) SynchronizeProfileSubscriptionsExecute(r ProfileApiSynchronizeProfileSubscriptionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.SynchronizeProfileSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synchronizeProfileSubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.profileSubscriptionsToSynchronize
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiValidateForgetProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	forgetProfilesCriteria *ValidateForgetProfilesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiValidateForgetProfilesRequest) Authorization(authorization string) ProfileApiValidateForgetProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiValidateForgetProfilesRequest) XAppKey(xAppKey string) ProfileApiValidateForgetProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiValidateForgetProfilesRequest) XHotelid(xHotelid string) ProfileApiValidateForgetProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to validate profiles for forgetting.
func (r ProfileApiValidateForgetProfilesRequest) ForgetProfilesCriteria(forgetProfilesCriteria ValidateForgetProfilesRequest) ProfileApiValidateForgetProfilesRequest {
	r.forgetProfilesCriteria = &forgetProfilesCriteria
	return r
}

// External system code.
func (r ProfileApiValidateForgetProfilesRequest) XExternalsystem(xExternalsystem string) ProfileApiValidateForgetProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiValidateForgetProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileApiValidateForgetProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiValidateForgetProfilesRequest) Execute() (*ValidatedForgetProfiles, *http.Response, error) {
	return r.ApiService.ValidateForgetProfilesExecute(r)
}

/*
ValidateForgetProfiles Validate forget profiles

Validate forget profiles. <p><strong>OperationId:</strong>validateForgetProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileApiValidateForgetProfilesRequest
*/
func (a *ProfileApiService) ValidateForgetProfiles(ctx context.Context) ProfileApiValidateForgetProfilesRequest {
	return ProfileApiValidateForgetProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ValidatedForgetProfiles
func (a *ProfileApiService) ValidateForgetProfilesExecute(r ProfileApiValidateForgetProfilesRequest) (*ValidatedForgetProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ValidatedForgetProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ValidateForgetProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/validateForgetProfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.forgetProfilesCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiValidateReservationsForProfileRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	futurePastBookingsCriteria *ValidateReservationsForProfileRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiValidateReservationsForProfileRequest) Authorization(authorization string) ProfileApiValidateReservationsForProfileRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiValidateReservationsForProfileRequest) XAppKey(xAppKey string) ProfileApiValidateReservationsForProfileRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiValidateReservationsForProfileRequest) XHotelid(xHotelid string) ProfileApiValidateReservationsForProfileRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for information regarding existence of profile in future and/or past business blocks and/or reservations.
func (r ProfileApiValidateReservationsForProfileRequest) FuturePastBookingsCriteria(futurePastBookingsCriteria ValidateReservationsForProfileRequest) ProfileApiValidateReservationsForProfileRequest {
	r.futurePastBookingsCriteria = &futurePastBookingsCriteria
	return r
}

// External system code.
func (r ProfileApiValidateReservationsForProfileRequest) XExternalsystem(xExternalsystem string) ProfileApiValidateReservationsForProfileRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiValidateReservationsForProfileRequest) AcceptLanguage(acceptLanguage string) ProfileApiValidateReservationsForProfileRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiValidateReservationsForProfileRequest) Execute() (*FuturePastBookings, *http.Response, error) {
	return r.ApiService.ValidateReservationsForProfileExecute(r)
}

/*
ValidateReservationsForProfile Check future past bookings

Validate if a profile has future and past bookings on a specific profile. <p><strong>OperationId:</strong>validateReservationsForProfile</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileApiValidateReservationsForProfileRequest
*/
func (a *ProfileApiService) ValidateReservationsForProfile(ctx context.Context, profileId string) ProfileApiValidateReservationsForProfileRequest {
	return ProfileApiValidateReservationsForProfileRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return FuturePastBookings
func (a *ProfileApiService) ValidateReservationsForProfileExecute(r ProfileApiValidateReservationsForProfileRequest) (*FuturePastBookings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FuturePastBookings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.ValidateReservationsForProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/reservations/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.futurePastBookingsCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileApiVerifyECertificateRequest struct {
	ctx context.Context
	ApiService *ProfileApiService
	certificateId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCertificateToVerify *VerifyECertificateRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileApiVerifyECertificateRequest) Authorization(authorization string) ProfileApiVerifyECertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileApiVerifyECertificateRequest) XAppKey(xAppKey string) ProfileApiVerifyECertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileApiVerifyECertificateRequest) XHotelid(xHotelid string) ProfileApiVerifyECertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to Verify an E-Certificate Number.
func (r ProfileApiVerifyECertificateRequest) ECertificateToVerify(eCertificateToVerify VerifyECertificateRequest) ProfileApiVerifyECertificateRequest {
	r.eCertificateToVerify = &eCertificateToVerify
	return r
}

// External system code.
func (r ProfileApiVerifyECertificateRequest) XExternalsystem(xExternalsystem string) ProfileApiVerifyECertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileApiVerifyECertificateRequest) AcceptLanguage(acceptLanguage string) ProfileApiVerifyECertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileApiVerifyECertificateRequest) Execute() (*VerifiedECertificate, *http.Response, error) {
	return r.ApiService.VerifyECertificateExecute(r)
}

/*
VerifyECertificate Verify E-Certificate Number

Use this API to verify an ng E-Certificate Number. <p><strong>OperationId:</strong>verifyECertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param certificateId
 @return ProfileApiVerifyECertificateRequest
*/
func (a *ProfileApiService) VerifyECertificate(ctx context.Context, certificateId string) ProfileApiVerifyECertificateRequest {
	return ProfileApiVerifyECertificateRequest{
		ApiService: a,
		ctx: ctx,
		certificateId: certificateId,
	}
}

// Execute executes the request
//  @return VerifiedECertificate
func (a *ProfileApiService) VerifyECertificateExecute(r ProfileApiVerifyECertificateRequest) (*VerifiedECertificate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerifiedECertificate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileApiService.VerifyECertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ecertificates/{certificateId}/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"certificateId"+"}", url.PathEscape(parameterValueToString(r.certificateId, "certificateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.certificateId) < 1 {
		return localVarReturnValue, nil, reportError("certificateId must have at least 1 elements")
	}
	if strlen(r.certificateId) > 2000 {
		return localVarReturnValue, nil, reportError("certificateId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCertificateToVerify
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
