/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the AccountForecastType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountForecastType{}

// AccountForecastType Detail Information about Account Forecast.
type AccountForecastType struct {
	AccountId *UniqueIDType `json:"accountId,omitempty"`
	AverageRate *CurrencyAmountType `json:"averageRate,omitempty"`
	FoodAndBeverageRevenue *CurrencyAmountType `json:"foodAndBeverageRevenue,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	OtherRevenue *CurrencyAmountType `json:"otherRevenue,omitempty"`
	OverrideForecast *OverrideForecastTypeType `json:"overrideForecast,omitempty"`
	// Specifies the Fiscal or Calendar Period Code for the forecast
	PeriodCode *string `json:"periodCode,omitempty"`
	// Specifies the Fiscal or Calendar Period Description for the forecast.
	PeriodDescription *string `json:"periodDescription,omitempty"`
	// Specifies the Period End Date
	PeriodEndDate *string `json:"periodEndDate,omitempty"`
	// Specifies the Period Start Date
	PeriodStartDate *string `json:"periodStartDate,omitempty"`
	// Room Nights for the forecast
	RoomNights *int32 `json:"roomNights,omitempty"`
	RoomRevenue *CurrencyAmountType `json:"roomRevenue,omitempty"`
	TotalRevenue *CurrencyAmountType `json:"totalRevenue,omitempty"`
}

// NewAccountForecastType instantiates a new AccountForecastType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountForecastType() *AccountForecastType {
	this := AccountForecastType{}
	return &this
}

// NewAccountForecastTypeWithDefaults instantiates a new AccountForecastType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountForecastTypeWithDefaults() *AccountForecastType {
	this := AccountForecastType{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AccountForecastType) GetAccountId() UniqueIDType {
	if o == nil || IsNil(o.AccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AccountForecastType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given UniqueIDType and assigns it to the AccountId field.
func (o *AccountForecastType) SetAccountId(v UniqueIDType) {
	o.AccountId = &v
}

// GetAverageRate returns the AverageRate field value if set, zero value otherwise.
func (o *AccountForecastType) GetAverageRate() CurrencyAmountType {
	if o == nil || IsNil(o.AverageRate) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AverageRate
}

// GetAverageRateOk returns a tuple with the AverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetAverageRateOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AverageRate) {
		return nil, false
	}
	return o.AverageRate, true
}

// HasAverageRate returns a boolean if a field has been set.
func (o *AccountForecastType) HasAverageRate() bool {
	if o != nil && !IsNil(o.AverageRate) {
		return true
	}

	return false
}

// SetAverageRate gets a reference to the given CurrencyAmountType and assigns it to the AverageRate field.
func (o *AccountForecastType) SetAverageRate(v CurrencyAmountType) {
	o.AverageRate = &v
}

// GetFoodAndBeverageRevenue returns the FoodAndBeverageRevenue field value if set, zero value otherwise.
func (o *AccountForecastType) GetFoodAndBeverageRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.FoodAndBeverageRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.FoodAndBeverageRevenue
}

// GetFoodAndBeverageRevenueOk returns a tuple with the FoodAndBeverageRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetFoodAndBeverageRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.FoodAndBeverageRevenue) {
		return nil, false
	}
	return o.FoodAndBeverageRevenue, true
}

// HasFoodAndBeverageRevenue returns a boolean if a field has been set.
func (o *AccountForecastType) HasFoodAndBeverageRevenue() bool {
	if o != nil && !IsNil(o.FoodAndBeverageRevenue) {
		return true
	}

	return false
}

// SetFoodAndBeverageRevenue gets a reference to the given CurrencyAmountType and assigns it to the FoodAndBeverageRevenue field.
func (o *AccountForecastType) SetFoodAndBeverageRevenue(v CurrencyAmountType) {
	o.FoodAndBeverageRevenue = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AccountForecastType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AccountForecastType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AccountForecastType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetOtherRevenue returns the OtherRevenue field value if set, zero value otherwise.
func (o *AccountForecastType) GetOtherRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.OtherRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.OtherRevenue
}

// GetOtherRevenueOk returns a tuple with the OtherRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetOtherRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.OtherRevenue) {
		return nil, false
	}
	return o.OtherRevenue, true
}

// HasOtherRevenue returns a boolean if a field has been set.
func (o *AccountForecastType) HasOtherRevenue() bool {
	if o != nil && !IsNil(o.OtherRevenue) {
		return true
	}

	return false
}

// SetOtherRevenue gets a reference to the given CurrencyAmountType and assigns it to the OtherRevenue field.
func (o *AccountForecastType) SetOtherRevenue(v CurrencyAmountType) {
	o.OtherRevenue = &v
}

// GetOverrideForecast returns the OverrideForecast field value if set, zero value otherwise.
func (o *AccountForecastType) GetOverrideForecast() OverrideForecastTypeType {
	if o == nil || IsNil(o.OverrideForecast) {
		var ret OverrideForecastTypeType
		return ret
	}
	return *o.OverrideForecast
}

// GetOverrideForecastOk returns a tuple with the OverrideForecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetOverrideForecastOk() (*OverrideForecastTypeType, bool) {
	if o == nil || IsNil(o.OverrideForecast) {
		return nil, false
	}
	return o.OverrideForecast, true
}

// HasOverrideForecast returns a boolean if a field has been set.
func (o *AccountForecastType) HasOverrideForecast() bool {
	if o != nil && !IsNil(o.OverrideForecast) {
		return true
	}

	return false
}

// SetOverrideForecast gets a reference to the given OverrideForecastTypeType and assigns it to the OverrideForecast field.
func (o *AccountForecastType) SetOverrideForecast(v OverrideForecastTypeType) {
	o.OverrideForecast = &v
}

// GetPeriodCode returns the PeriodCode field value if set, zero value otherwise.
func (o *AccountForecastType) GetPeriodCode() string {
	if o == nil || IsNil(o.PeriodCode) {
		var ret string
		return ret
	}
	return *o.PeriodCode
}

// GetPeriodCodeOk returns a tuple with the PeriodCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetPeriodCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodCode) {
		return nil, false
	}
	return o.PeriodCode, true
}

// HasPeriodCode returns a boolean if a field has been set.
func (o *AccountForecastType) HasPeriodCode() bool {
	if o != nil && !IsNil(o.PeriodCode) {
		return true
	}

	return false
}

// SetPeriodCode gets a reference to the given string and assigns it to the PeriodCode field.
func (o *AccountForecastType) SetPeriodCode(v string) {
	o.PeriodCode = &v
}

// GetPeriodDescription returns the PeriodDescription field value if set, zero value otherwise.
func (o *AccountForecastType) GetPeriodDescription() string {
	if o == nil || IsNil(o.PeriodDescription) {
		var ret string
		return ret
	}
	return *o.PeriodDescription
}

// GetPeriodDescriptionOk returns a tuple with the PeriodDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetPeriodDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodDescription) {
		return nil, false
	}
	return o.PeriodDescription, true
}

// HasPeriodDescription returns a boolean if a field has been set.
func (o *AccountForecastType) HasPeriodDescription() bool {
	if o != nil && !IsNil(o.PeriodDescription) {
		return true
	}

	return false
}

// SetPeriodDescription gets a reference to the given string and assigns it to the PeriodDescription field.
func (o *AccountForecastType) SetPeriodDescription(v string) {
	o.PeriodDescription = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *AccountForecastType) GetPeriodEndDate() string {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret string
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetPeriodEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *AccountForecastType) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given string and assigns it to the PeriodEndDate field.
func (o *AccountForecastType) SetPeriodEndDate(v string) {
	o.PeriodEndDate = &v
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *AccountForecastType) GetPeriodStartDate() string {
	if o == nil || IsNil(o.PeriodStartDate) {
		var ret string
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetPeriodStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStartDate) {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *AccountForecastType) HasPeriodStartDate() bool {
	if o != nil && !IsNil(o.PeriodStartDate) {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given string and assigns it to the PeriodStartDate field.
func (o *AccountForecastType) SetPeriodStartDate(v string) {
	o.PeriodStartDate = &v
}

// GetRoomNights returns the RoomNights field value if set, zero value otherwise.
func (o *AccountForecastType) GetRoomNights() int32 {
	if o == nil || IsNil(o.RoomNights) {
		var ret int32
		return ret
	}
	return *o.RoomNights
}

// GetRoomNightsOk returns a tuple with the RoomNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetRoomNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomNights) {
		return nil, false
	}
	return o.RoomNights, true
}

// HasRoomNights returns a boolean if a field has been set.
func (o *AccountForecastType) HasRoomNights() bool {
	if o != nil && !IsNil(o.RoomNights) {
		return true
	}

	return false
}

// SetRoomNights gets a reference to the given int32 and assigns it to the RoomNights field.
func (o *AccountForecastType) SetRoomNights(v int32) {
	o.RoomNights = &v
}

// GetRoomRevenue returns the RoomRevenue field value if set, zero value otherwise.
func (o *AccountForecastType) GetRoomRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.RoomRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RoomRevenue
}

// GetRoomRevenueOk returns a tuple with the RoomRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetRoomRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RoomRevenue) {
		return nil, false
	}
	return o.RoomRevenue, true
}

// HasRoomRevenue returns a boolean if a field has been set.
func (o *AccountForecastType) HasRoomRevenue() bool {
	if o != nil && !IsNil(o.RoomRevenue) {
		return true
	}

	return false
}

// SetRoomRevenue gets a reference to the given CurrencyAmountType and assigns it to the RoomRevenue field.
func (o *AccountForecastType) SetRoomRevenue(v CurrencyAmountType) {
	o.RoomRevenue = &v
}

// GetTotalRevenue returns the TotalRevenue field value if set, zero value otherwise.
func (o *AccountForecastType) GetTotalRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.TotalRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalRevenue
}

// GetTotalRevenueOk returns a tuple with the TotalRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountForecastType) GetTotalRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalRevenue) {
		return nil, false
	}
	return o.TotalRevenue, true
}

// HasTotalRevenue returns a boolean if a field has been set.
func (o *AccountForecastType) HasTotalRevenue() bool {
	if o != nil && !IsNil(o.TotalRevenue) {
		return true
	}

	return false
}

// SetTotalRevenue gets a reference to the given CurrencyAmountType and assigns it to the TotalRevenue field.
func (o *AccountForecastType) SetTotalRevenue(v CurrencyAmountType) {
	o.TotalRevenue = &v
}

func (o AccountForecastType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountForecastType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AverageRate) {
		toSerialize["averageRate"] = o.AverageRate
	}
	if !IsNil(o.FoodAndBeverageRevenue) {
		toSerialize["foodAndBeverageRevenue"] = o.FoodAndBeverageRevenue
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.OtherRevenue) {
		toSerialize["otherRevenue"] = o.OtherRevenue
	}
	if !IsNil(o.OverrideForecast) {
		toSerialize["overrideForecast"] = o.OverrideForecast
	}
	if !IsNil(o.PeriodCode) {
		toSerialize["periodCode"] = o.PeriodCode
	}
	if !IsNil(o.PeriodDescription) {
		toSerialize["periodDescription"] = o.PeriodDescription
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	if !IsNil(o.PeriodStartDate) {
		toSerialize["periodStartDate"] = o.PeriodStartDate
	}
	if !IsNil(o.RoomNights) {
		toSerialize["roomNights"] = o.RoomNights
	}
	if !IsNil(o.RoomRevenue) {
		toSerialize["roomRevenue"] = o.RoomRevenue
	}
	if !IsNil(o.TotalRevenue) {
		toSerialize["totalRevenue"] = o.TotalRevenue
	}
	return toSerialize, nil
}

type NullableAccountForecastType struct {
	value *AccountForecastType
	isSet bool
}

func (v NullableAccountForecastType) Get() *AccountForecastType {
	return v.value
}

func (v *NullableAccountForecastType) Set(val *AccountForecastType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountForecastType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountForecastType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountForecastType(val *AccountForecastType) *NullableAccountForecastType {
	return &NullableAccountForecastType{value: val, isSet: true}
}

func (v NullableAccountForecastType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountForecastType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


