/*
OPERA Cloud Customer Relationship Management API

Testing ProfileMembershipApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crm"
)

func Test_crm_ProfileMembershipApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfileMembershipApiService CalculateMembershipPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.CalculateMembershipPoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService ChangeMembershipClaim", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var claimId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.ChangeMembershipClaim(context.Background(), claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService DeleteAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.DeleteAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService ExportMembershipAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.ExportMembershipAward(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService ExtendMemberPointsToExpire", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.ExtendMemberPointsToExpire(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetAirlineTransactionsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetAirlineTransactionsStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetAllMembershipClaims", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetAllMembershipClaims(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetAvailableAwardsBasedOnType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetAvailableAwardsBasedOnType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetAwardsToGrant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetAwardsToGrant(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetEnrollmentMatchProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetEnrollmentMatchProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMemberPointsToExpire", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMemberPointsToExpire(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipAwardExportInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipAwardExportInfo(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipAwardPointsByHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string
		var hotelId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipAwardPointsByHotel(context.Background(), membershipId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipClaim", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var claimId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipClaim(context.Background(), claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipClaims", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipClaims(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipDetails(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipIssueAwardsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipIssueAwardsList(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransaction(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionAwardPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionAwardPoints(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionExceptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionExceptions(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionPointsRejectionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionPointsRejectionReasons(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionRates(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionRevenue(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionTierPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTransactionId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionTierPoints(context.Background(), membershipTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService GetMembershipTransactionsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.GetMembershipTransactionsSummary(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService PostEnrollment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.PostEnrollment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService PostMembershipClaim", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileMembershipApi.PostMembershipClaim(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService PostMembershipTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.PostMembershipTransaction(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileMembershipApiService RedeemAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileMembershipApi.RedeemAward(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
