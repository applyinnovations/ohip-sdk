/*
OPERA Cloud Customer Relationship Management API

Testing ProfileApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crm"
)

func Test_crm_ProfileApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfileApiService ChangeMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string
		var membershipType string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.ChangeMembership(context.Background(), membershipId, membershipType, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ChangeProfileCashieringDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.ChangeProfileCashieringDetails(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ChangeProfileOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.ChangeProfileOwners(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ChangeStagedProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProfileApi.ChangeStagedProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService CheckProfileType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.CheckProfileType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ConsumeECertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId string

		resp, httpRes, err := apiClient.ProfileApi.ConsumeECertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService CopyProfileCommissionAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.ProfileApi.CopyProfileCommissionAccount(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteAccountForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var periodCode string
		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteAccountForecast(context.Background(), periodCode, hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.DeleteCertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteECertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteECertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteGlobalPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceCode string
		var preferenceType string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteGlobalPreference(context.Background(), preferenceCode, preferenceType, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string
		var membershipType string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteMembership(context.Background(), membershipId, membershipType, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteMultipleAccountForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteMultipleAccountForecasts(context.Background(), hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeletePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceCode string
		var preferenceType string
		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeletePreference(context.Background(), preferenceCode, preferenceType, hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteProfileAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachmentId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteProfileAttachment(context.Background(), attachmentId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteProfileCommissionAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteProfileCommissionAccount(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DeleteProfilePermanently", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteProfilePermanently(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService DistributePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DistributePreference(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ExtendECertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId string

		resp, httpRes, err := apiClient.ProfileApi.ExtendECertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetAccountForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetAccountForecasts(context.Background(), hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetAddress(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetAwards(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetCashieringDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetCashieringDetails(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetCompanyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var corporateID string

		resp, httpRes, err := apiClient.ProfileApi.GetCompanyProfile(context.Background(), corporateID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetDuplicateExternalSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetDuplicateExternalSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetDuplicateOPERASubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetDuplicateOPERASubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetECertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetECertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetFulfillmentExportLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ProfileApi.GetFulfillmentExportLogs(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetGuestProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestId string

		resp, httpRes, err := apiClient.ProfileApi.GetGuestProfile(context.Background(), guestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetLinkedProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetLinkedProfiles(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetMatchProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetMatchProfiles(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetMembershipTierProjections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetMembershipTierProjections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetMergeProfilesSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var survivorProfileId string

		resp, httpRes, err := apiClient.ProfileApi.GetMergeProfilesSnapshot(context.Background(), survivorProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetMergeStageProfileSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var survivorProfileId string

		resp, httpRes, err := apiClient.ProfileApi.GetMergeStageProfileSnapshot(context.Background(), survivorProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetPreferenceForProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetPreferenceForProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileAccounts(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetProfileActivityLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileAttachments(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileExternalId string
		var extSystemCode string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileByExtId(context.Background(), profileExternalId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileCommissionAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileCommissionAccount(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileOwners(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileRelationships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileRelationships(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfilesByIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetProfilesByIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetRecentlyAccessedProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetRecentlyAccessedProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetStagedProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProfileApi.GetStagedProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetStagedProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetStagedProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetStayHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetStayHistory(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetSuspendedAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetSuspendedAddresses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetSuspendedProfileErrorSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetSuspendedProfileErrorSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService MergeProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var survivorProfileId string

		resp, httpRes, err := apiClient.ProfileApi.MergeProfiles(context.Background(), survivorProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostAccountForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PostAccountForecast(context.Background(), hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostCompanyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostCompanyProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostECertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostECertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostGuestProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostGuestProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PostMembership(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostMembershipNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.ProfileApi.PostMembershipNumber(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PostPreference(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfileCommissionAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PostProfileCommissionAccount(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfileOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PostProfileOwners(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.PostProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PutAccountForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var periodCode string
		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PutAccountForecast(context.Background(), periodCode, hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PutProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PutProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PutProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.PutProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService RemoveProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.RemoveProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService SetProfileCommissionAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.SetProfileCommissionAccount(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService StoreEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.StoreEmail(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService SynchronizeProfileSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.SynchronizeProfileSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ValidateForgetProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.ValidateForgetProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService ValidateReservationsForProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.ValidateReservationsForProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService VerifyECertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId string

		resp, httpRes, err := apiClient.ProfileApi.VerifyECertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
