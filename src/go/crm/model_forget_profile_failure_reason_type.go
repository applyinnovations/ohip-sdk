/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ForgetProfileFailureReasonType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForgetProfileFailureReasonType{}

// ForgetProfileFailureReasonType Provides information about the reason why the profile is not eligible to be forgotten.
type ForgetProfileFailureReasonType struct {
	// Expected resolution date for this reason.
	ExpectedResolutionDate *string `json:"expectedResolutionDate,omitempty"`
	// Code representing the reason why the profile is not eligible to be forgotten.
	ReasonCode *string `json:"reasonCode,omitempty"`
	// Reason describing why the profile is not eligible to be forgotten.
	ReasonDescription *string `json:"reasonDescription,omitempty"`
}

// NewForgetProfileFailureReasonType instantiates a new ForgetProfileFailureReasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForgetProfileFailureReasonType() *ForgetProfileFailureReasonType {
	this := ForgetProfileFailureReasonType{}
	return &this
}

// NewForgetProfileFailureReasonTypeWithDefaults instantiates a new ForgetProfileFailureReasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForgetProfileFailureReasonTypeWithDefaults() *ForgetProfileFailureReasonType {
	this := ForgetProfileFailureReasonType{}
	return &this
}

// GetExpectedResolutionDate returns the ExpectedResolutionDate field value if set, zero value otherwise.
func (o *ForgetProfileFailureReasonType) GetExpectedResolutionDate() string {
	if o == nil || IsNil(o.ExpectedResolutionDate) {
		var ret string
		return ret
	}
	return *o.ExpectedResolutionDate
}

// GetExpectedResolutionDateOk returns a tuple with the ExpectedResolutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileFailureReasonType) GetExpectedResolutionDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedResolutionDate) {
		return nil, false
	}
	return o.ExpectedResolutionDate, true
}

// HasExpectedResolutionDate returns a boolean if a field has been set.
func (o *ForgetProfileFailureReasonType) HasExpectedResolutionDate() bool {
	if o != nil && !IsNil(o.ExpectedResolutionDate) {
		return true
	}

	return false
}

// SetExpectedResolutionDate gets a reference to the given string and assigns it to the ExpectedResolutionDate field.
func (o *ForgetProfileFailureReasonType) SetExpectedResolutionDate(v string) {
	o.ExpectedResolutionDate = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ForgetProfileFailureReasonType) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileFailureReasonType) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ForgetProfileFailureReasonType) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *ForgetProfileFailureReasonType) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReasonDescription returns the ReasonDescription field value if set, zero value otherwise.
func (o *ForgetProfileFailureReasonType) GetReasonDescription() string {
	if o == nil || IsNil(o.ReasonDescription) {
		var ret string
		return ret
	}
	return *o.ReasonDescription
}

// GetReasonDescriptionOk returns a tuple with the ReasonDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileFailureReasonType) GetReasonDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonDescription) {
		return nil, false
	}
	return o.ReasonDescription, true
}

// HasReasonDescription returns a boolean if a field has been set.
func (o *ForgetProfileFailureReasonType) HasReasonDescription() bool {
	if o != nil && !IsNil(o.ReasonDescription) {
		return true
	}

	return false
}

// SetReasonDescription gets a reference to the given string and assigns it to the ReasonDescription field.
func (o *ForgetProfileFailureReasonType) SetReasonDescription(v string) {
	o.ReasonDescription = &v
}

func (o ForgetProfileFailureReasonType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForgetProfileFailureReasonType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpectedResolutionDate) {
		toSerialize["expectedResolutionDate"] = o.ExpectedResolutionDate
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonDescription) {
		toSerialize["reasonDescription"] = o.ReasonDescription
	}
	return toSerialize, nil
}

type NullableForgetProfileFailureReasonType struct {
	value *ForgetProfileFailureReasonType
	isSet bool
}

func (v NullableForgetProfileFailureReasonType) Get() *ForgetProfileFailureReasonType {
	return v.value
}

func (v *NullableForgetProfileFailureReasonType) Set(val *ForgetProfileFailureReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableForgetProfileFailureReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableForgetProfileFailureReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForgetProfileFailureReasonType(val *ForgetProfileFailureReasonType) *NullableForgetProfileFailureReasonType {
	return &NullableForgetProfileFailureReasonType{value: val, isSet: true}
}

func (v NullableForgetProfileFailureReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForgetProfileFailureReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


