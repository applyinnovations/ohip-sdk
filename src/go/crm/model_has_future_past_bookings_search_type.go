/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the HasFuturePastBookingsSearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HasFuturePastBookingsSearchType{}

// HasFuturePastBookingsSearchType Search type for verifying whether there are future and/or past business blocks and/or reservations exist for a Profile.
type HasFuturePastBookingsSearchType struct {
	Exclusions *HasFuturePastBookingsExclusionsType `json:"exclusions,omitempty"`
	ProfileIdList *ProfileIdList `json:"profileIdList,omitempty"`
	// Unique identifier of the rate code of business block or reservation.
	RateCode *string `json:"rateCode,omitempty"`
	// Search for active or past.
	SearchFor *string `json:"searchFor,omitempty"`
	// Search in business blocks or reservations.
	SearchIn *string `json:"searchIn,omitempty"`
}

// NewHasFuturePastBookingsSearchType instantiates a new HasFuturePastBookingsSearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHasFuturePastBookingsSearchType() *HasFuturePastBookingsSearchType {
	this := HasFuturePastBookingsSearchType{}
	return &this
}

// NewHasFuturePastBookingsSearchTypeWithDefaults instantiates a new HasFuturePastBookingsSearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHasFuturePastBookingsSearchTypeWithDefaults() *HasFuturePastBookingsSearchType {
	this := HasFuturePastBookingsSearchType{}
	return &this
}

// GetExclusions returns the Exclusions field value if set, zero value otherwise.
func (o *HasFuturePastBookingsSearchType) GetExclusions() HasFuturePastBookingsExclusionsType {
	if o == nil || IsNil(o.Exclusions) {
		var ret HasFuturePastBookingsExclusionsType
		return ret
	}
	return *o.Exclusions
}

// GetExclusionsOk returns a tuple with the Exclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsSearchType) GetExclusionsOk() (*HasFuturePastBookingsExclusionsType, bool) {
	if o == nil || IsNil(o.Exclusions) {
		return nil, false
	}
	return o.Exclusions, true
}

// HasExclusions returns a boolean if a field has been set.
func (o *HasFuturePastBookingsSearchType) HasExclusions() bool {
	if o != nil && !IsNil(o.Exclusions) {
		return true
	}

	return false
}

// SetExclusions gets a reference to the given HasFuturePastBookingsExclusionsType and assigns it to the Exclusions field.
func (o *HasFuturePastBookingsSearchType) SetExclusions(v HasFuturePastBookingsExclusionsType) {
	o.Exclusions = &v
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *HasFuturePastBookingsSearchType) GetProfileIdList() ProfileIdList {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret ProfileIdList
		return ret
	}
	return *o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsSearchType) GetProfileIdListOk() (*ProfileIdList, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *HasFuturePastBookingsSearchType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given ProfileIdList and assigns it to the ProfileIdList field.
func (o *HasFuturePastBookingsSearchType) SetProfileIdList(v ProfileIdList) {
	o.ProfileIdList = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *HasFuturePastBookingsSearchType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsSearchType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *HasFuturePastBookingsSearchType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *HasFuturePastBookingsSearchType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetSearchFor returns the SearchFor field value if set, zero value otherwise.
func (o *HasFuturePastBookingsSearchType) GetSearchFor() string {
	if o == nil || IsNil(o.SearchFor) {
		var ret string
		return ret
	}
	return *o.SearchFor
}

// GetSearchForOk returns a tuple with the SearchFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsSearchType) GetSearchForOk() (*string, bool) {
	if o == nil || IsNil(o.SearchFor) {
		return nil, false
	}
	return o.SearchFor, true
}

// HasSearchFor returns a boolean if a field has been set.
func (o *HasFuturePastBookingsSearchType) HasSearchFor() bool {
	if o != nil && !IsNil(o.SearchFor) {
		return true
	}

	return false
}

// SetSearchFor gets a reference to the given string and assigns it to the SearchFor field.
func (o *HasFuturePastBookingsSearchType) SetSearchFor(v string) {
	o.SearchFor = &v
}

// GetSearchIn returns the SearchIn field value if set, zero value otherwise.
func (o *HasFuturePastBookingsSearchType) GetSearchIn() string {
	if o == nil || IsNil(o.SearchIn) {
		var ret string
		return ret
	}
	return *o.SearchIn
}

// GetSearchInOk returns a tuple with the SearchIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsSearchType) GetSearchInOk() (*string, bool) {
	if o == nil || IsNil(o.SearchIn) {
		return nil, false
	}
	return o.SearchIn, true
}

// HasSearchIn returns a boolean if a field has been set.
func (o *HasFuturePastBookingsSearchType) HasSearchIn() bool {
	if o != nil && !IsNil(o.SearchIn) {
		return true
	}

	return false
}

// SetSearchIn gets a reference to the given string and assigns it to the SearchIn field.
func (o *HasFuturePastBookingsSearchType) SetSearchIn(v string) {
	o.SearchIn = &v
}

func (o HasFuturePastBookingsSearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HasFuturePastBookingsSearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exclusions) {
		toSerialize["exclusions"] = o.Exclusions
	}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.SearchFor) {
		toSerialize["searchFor"] = o.SearchFor
	}
	if !IsNil(o.SearchIn) {
		toSerialize["searchIn"] = o.SearchIn
	}
	return toSerialize, nil
}

type NullableHasFuturePastBookingsSearchType struct {
	value *HasFuturePastBookingsSearchType
	isSet bool
}

func (v NullableHasFuturePastBookingsSearchType) Get() *HasFuturePastBookingsSearchType {
	return v.value
}

func (v *NullableHasFuturePastBookingsSearchType) Set(val *HasFuturePastBookingsSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableHasFuturePastBookingsSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableHasFuturePastBookingsSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHasFuturePastBookingsSearchType(val *HasFuturePastBookingsSearchType) *NullableHasFuturePastBookingsSearchType {
	return &NullableHasFuturePastBookingsSearchType{value: val, isSet: true}
}

func (v NullableHasFuturePastBookingsSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHasFuturePastBookingsSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


