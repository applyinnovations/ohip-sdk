/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the VerifiedECertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifiedECertificate{}

// VerifiedECertificate Response object to Verify E-Certificate and will return the profile information.
type VerifiedECertificate struct {
	Links *Links `json:"links,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	ProfileName *ProfileNameType `json:"profileName,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewVerifiedECertificate instantiates a new VerifiedECertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifiedECertificate() *VerifiedECertificate {
	this := VerifiedECertificate{}
	return &this
}

// NewVerifiedECertificateWithDefaults instantiates a new VerifiedECertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifiedECertificateWithDefaults() *VerifiedECertificate {
	this := VerifiedECertificate{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *VerifiedECertificate) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifiedECertificate) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *VerifiedECertificate) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *VerifiedECertificate) SetLinks(v Links) {
	o.Links = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *VerifiedECertificate) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifiedECertificate) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *VerifiedECertificate) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *VerifiedECertificate) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *VerifiedECertificate) GetProfileName() ProfileNameType {
	if o == nil || IsNil(o.ProfileName) {
		var ret ProfileNameType
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifiedECertificate) GetProfileNameOk() (*ProfileNameType, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *VerifiedECertificate) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given ProfileNameType and assigns it to the ProfileName field.
func (o *VerifiedECertificate) SetProfileName(v ProfileNameType) {
	o.ProfileName = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *VerifiedECertificate) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifiedECertificate) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *VerifiedECertificate) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *VerifiedECertificate) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o VerifiedECertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifiedECertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableVerifiedECertificate struct {
	value *VerifiedECertificate
	isSet bool
}

func (v NullableVerifiedECertificate) Get() *VerifiedECertificate {
	return v.value
}

func (v *NullableVerifiedECertificate) Set(val *VerifiedECertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifiedECertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifiedECertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifiedECertificate(val *VerifiedECertificate) *NullableVerifiedECertificate {
	return &NullableVerifiedECertificate{value: val, isSet: true}
}

func (v NullableVerifiedECertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifiedECertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


