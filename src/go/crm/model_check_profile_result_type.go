/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the CheckProfileResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckProfileResultType{}

// CheckProfileResultType Status of allowed actions, attached records, and indicators of the profile.
type CheckProfileResultType struct {
	CheckProfileInstruction *CheckProfileInstructionType `json:"checkProfileInstruction,omitempty"`
	// Indicates status of allowed actions, total number of attached records, or number of occurrences of indicator of a profile.
	Exists *bool `json:"exists,omitempty"`
}

// NewCheckProfileResultType instantiates a new CheckProfileResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckProfileResultType() *CheckProfileResultType {
	this := CheckProfileResultType{}
	return &this
}

// NewCheckProfileResultTypeWithDefaults instantiates a new CheckProfileResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckProfileResultTypeWithDefaults() *CheckProfileResultType {
	this := CheckProfileResultType{}
	return &this
}

// GetCheckProfileInstruction returns the CheckProfileInstruction field value if set, zero value otherwise.
func (o *CheckProfileResultType) GetCheckProfileInstruction() CheckProfileInstructionType {
	if o == nil || IsNil(o.CheckProfileInstruction) {
		var ret CheckProfileInstructionType
		return ret
	}
	return *o.CheckProfileInstruction
}

// GetCheckProfileInstructionOk returns a tuple with the CheckProfileInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckProfileResultType) GetCheckProfileInstructionOk() (*CheckProfileInstructionType, bool) {
	if o == nil || IsNil(o.CheckProfileInstruction) {
		return nil, false
	}
	return o.CheckProfileInstruction, true
}

// HasCheckProfileInstruction returns a boolean if a field has been set.
func (o *CheckProfileResultType) HasCheckProfileInstruction() bool {
	if o != nil && !IsNil(o.CheckProfileInstruction) {
		return true
	}

	return false
}

// SetCheckProfileInstruction gets a reference to the given CheckProfileInstructionType and assigns it to the CheckProfileInstruction field.
func (o *CheckProfileResultType) SetCheckProfileInstruction(v CheckProfileInstructionType) {
	o.CheckProfileInstruction = &v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *CheckProfileResultType) GetExists() bool {
	if o == nil || IsNil(o.Exists) {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckProfileResultType) GetExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *CheckProfileResultType) HasExists() bool {
	if o != nil && !IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *CheckProfileResultType) SetExists(v bool) {
	o.Exists = &v
}

func (o CheckProfileResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckProfileResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckProfileInstruction) {
		toSerialize["checkProfileInstruction"] = o.CheckProfileInstruction
	}
	if !IsNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	return toSerialize, nil
}

type NullableCheckProfileResultType struct {
	value *CheckProfileResultType
	isSet bool
}

func (v NullableCheckProfileResultType) Get() *CheckProfileResultType {
	return v.value
}

func (v *NullableCheckProfileResultType) Set(val *CheckProfileResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckProfileResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckProfileResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckProfileResultType(val *CheckProfileResultType) *NullableCheckProfileResultType {
	return &NullableCheckProfileResultType{value: val, isSet: true}
}

func (v NullableCheckProfileResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckProfileResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


