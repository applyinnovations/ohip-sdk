/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ProfileStatisticsApiService ProfileStatisticsApi service
type ProfileStatisticsApiService service

type ProfileStatisticsApiGetProfileMembershipStatisticsRequest struct {
	ctx context.Context
	ApiService *ProfileStatisticsApiService
	profileId *[]string
	membershipCardNo *string
	membershipType *string
	authorization *string
	xAppKey *string
	xHotelid *string
	startDate *string
	endDate *string
	duration *string
	transactionDetail *bool
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) ProfileId(profileId []string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.profileId = &profileId
	return r
}

// Number of the membership card.
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) MembershipCardNo(membershipCardNo string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.membershipCardNo = &membershipCardNo
	return r
}

// Type of membership.
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) MembershipType(membershipType string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.membershipType = &membershipType
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) Authorization(authorization string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) XAppKey(xAppKey string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) XHotelid(xHotelid string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) StartDate(startDate string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.startDate = &startDate
	return r
}

func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) EndDate(endDate string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.endDate = &endDate
	return r
}

func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) Duration(duration string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.duration = &duration
	return r
}

// Flag indicating whether to fetch detailed membership points information or just a summary of the total of the points.
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) TransactionDetail(transactionDetail bool) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.transactionDetail = &transactionDetail
	return r
}

// External system code.
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) XExternalsystem(xExternalsystem string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) AcceptLanguage(acceptLanguage string) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) Execute() (*ProfileMembershipStatistics, *http.Response, error) {
	return r.ApiService.GetProfileMembershipStatisticsExecute(r)
}

/*
GetProfileMembershipStatistics Get Membership statistics 

Retrieve the summary statistics and/or the details of each of the membership transactions and its points.  You can filter by membership Type, or Membership Number. <p><strong>OperationId:</strong>getProfileMembershipStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileStatisticsApiGetProfileMembershipStatisticsRequest
*/
func (a *ProfileStatisticsApiService) GetProfileMembershipStatistics(ctx context.Context) ProfileStatisticsApiGetProfileMembershipStatisticsRequest {
	return ProfileStatisticsApiGetProfileMembershipStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProfileMembershipStatistics
func (a *ProfileStatisticsApiService) GetProfileMembershipStatisticsExecute(r ProfileStatisticsApiGetProfileMembershipStatisticsRequest) (*ProfileMembershipStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileMembershipStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileStatisticsApiService.GetProfileMembershipStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profileMembershipStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.profileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNo", r.membershipCardNo, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.transactionDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionDetail", r.transactionDetail, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileStatisticsApiGetProfileStatisticsRequest struct {
	ctx context.Context
	ApiService *ProfileStatisticsApiService
	profileId *[]string
	hotelIds *[]string
	reportType *string
	authorization *string
	xAppKey *string
	xHotelid *string
	stayFrom *string
	stayTo *string
	summary *bool
	passerBy *bool
	contactProfileRoleType *string
	stayRecordId *string
	stayRecordIdContext *string
	stayRecordIdType *string
	reservationId *string
	reservationIdContext *string
	reservationIdType *string
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ProfileId(profileId []string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.profileId = &profileId
	return r
}

// Hotel code.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) HotelIds(hotelIds []string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Indicate to get revenue of Stay Records.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ReportType(reportType string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.reportType = &reportType
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileStatisticsApiGetProfileStatisticsRequest) Authorization(authorization string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileStatisticsApiGetProfileStatisticsRequest) XAppKey(xAppKey string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileStatisticsApiGetProfileStatisticsRequest) XHotelid(xHotelid string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Stay from date for report
func (r ProfileStatisticsApiGetProfileStatisticsRequest) StayFrom(stayFrom string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.stayFrom = &stayFrom
	return r
}

// Stay to date for report
func (r ProfileStatisticsApiGetProfileStatisticsRequest) StayTo(stayTo string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.stayTo = &stayTo
	return r
}

// Flag to indicate whether summary/detail report is requested.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) Summary(summary bool) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.summary = &summary
	return r
}

// Flag to include passerBy records.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) PasserBy(passerBy bool) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.passerBy = &passerBy
	return r
}

// Profile Role Type All.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ContactProfileRoleType(contactProfileRoleType string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.contactProfileRoleType = &contactProfileRoleType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) StayRecordId(stayRecordId string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.stayRecordId = &stayRecordId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileStatisticsApiGetProfileStatisticsRequest) StayRecordIdContext(stayRecordIdContext string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.stayRecordIdContext = &stayRecordIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) StayRecordIdType(stayRecordIdType string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.stayRecordIdType = &stayRecordIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ReservationId(reservationId string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.reservationId = &reservationId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ReservationIdContext(reservationIdContext string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.reservationIdContext = &reservationIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) ReservationIdType(reservationIdType string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// External system code.
func (r ProfileStatisticsApiGetProfileStatisticsRequest) XExternalsystem(xExternalsystem string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileStatisticsApiGetProfileStatisticsRequest) AcceptLanguage(acceptLanguage string) ProfileStatisticsApiGetProfileStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileStatisticsApiGetProfileStatisticsRequest) Execute() (*ProfileStatistics, *http.Response, error) {
	return r.ApiService.GetProfileStatisticsExecute(r)
}

/*
GetProfileStatistics Get Profile Statistics

This API provides summary/detail/revenue statistics information <p><strong>OperationId:</strong>getProfileStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileStatisticsApiGetProfileStatisticsRequest
*/
func (a *ProfileStatisticsApiService) GetProfileStatistics(ctx context.Context) ProfileStatisticsApiGetProfileStatisticsRequest {
	return ProfileStatisticsApiGetProfileStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProfileStatistics
func (a *ProfileStatisticsApiService) GetProfileStatisticsExecute(r ProfileStatisticsApiGetProfileStatisticsRequest) (*ProfileStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProfileStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileStatisticsApiService.GetProfileStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profileStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.profileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", t, "multi")
		}
	}
	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "reportType", r.reportType, "")
	if r.stayFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayFrom", r.stayFrom, "")
	}
	if r.stayTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayTo", r.stayTo, "")
	}
	if r.summary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summary", r.summary, "")
	}
	if r.passerBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "passerBy", r.passerBy, "")
	}
	if r.contactProfileRoleType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contactProfileRoleType", r.contactProfileRoleType, "")
	}
	if r.stayRecordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayRecordId", r.stayRecordId, "")
	}
	if r.stayRecordIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayRecordIdContext", r.stayRecordIdContext, "")
	}
	if r.stayRecordIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayRecordIdType", r.stayRecordIdType, "")
	}
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.reservationIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdContext", r.reservationIdContext, "")
	}
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
