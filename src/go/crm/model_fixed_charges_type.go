/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the FixedChargesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedChargesType{}

// FixedChargesType Holds fixed charge detail.
type FixedChargesType struct {
	Items []FixedChargeType
}

// NewFixedChargesType instantiates a new FixedChargesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedChargesType() *FixedChargesType {
	this := FixedChargesType{}
	return &this
}

// NewFixedChargesTypeWithDefaults instantiates a new FixedChargesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedChargesTypeWithDefaults() *FixedChargesType {
	this := FixedChargesType{}
	return &this
}

func (o FixedChargesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedChargesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *FixedChargesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableFixedChargesType struct {
	value FixedChargesType
	isSet bool
}

func (v NullableFixedChargesType) Get() FixedChargesType {
	return v.value
}

func (v *NullableFixedChargesType) Set(val FixedChargesType) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedChargesType) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedChargesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedChargesType(val FixedChargesType) *NullableFixedChargesType {
	return &NullableFixedChargesType{value: val, isSet: true}
}

func (v NullableFixedChargesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedChargesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


