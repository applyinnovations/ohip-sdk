/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the HasFuturePastBookingsExclusionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HasFuturePastBookingsExclusionsType{}

// HasFuturePastBookingsExclusionsType Search type for excluding list of business blocks and/or reservations.
type HasFuturePastBookingsExclusionsType struct {
	BlockIdList *UniqueIDListType `json:"blockIdList,omitempty"`
	ReservationIdList *UniqueIDListType `json:"reservationIdList,omitempty"`
}

// NewHasFuturePastBookingsExclusionsType instantiates a new HasFuturePastBookingsExclusionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHasFuturePastBookingsExclusionsType() *HasFuturePastBookingsExclusionsType {
	this := HasFuturePastBookingsExclusionsType{}
	return &this
}

// NewHasFuturePastBookingsExclusionsTypeWithDefaults instantiates a new HasFuturePastBookingsExclusionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHasFuturePastBookingsExclusionsTypeWithDefaults() *HasFuturePastBookingsExclusionsType {
	this := HasFuturePastBookingsExclusionsType{}
	return &this
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *HasFuturePastBookingsExclusionsType) GetBlockIdList() UniqueIDListType {
	if o == nil || IsNil(o.BlockIdList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsExclusionsType) GetBlockIdListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *HasFuturePastBookingsExclusionsType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given UniqueIDListType and assigns it to the BlockIdList field.
func (o *HasFuturePastBookingsExclusionsType) SetBlockIdList(v UniqueIDListType) {
	o.BlockIdList = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *HasFuturePastBookingsExclusionsType) GetReservationIdList() UniqueIDListType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret UniqueIDListType
		return ret
	}
	return *o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasFuturePastBookingsExclusionsType) GetReservationIdListOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *HasFuturePastBookingsExclusionsType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given UniqueIDListType and assigns it to the ReservationIdList field.
func (o *HasFuturePastBookingsExclusionsType) SetReservationIdList(v UniqueIDListType) {
	o.ReservationIdList = &v
}

func (o HasFuturePastBookingsExclusionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HasFuturePastBookingsExclusionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	return toSerialize, nil
}

type NullableHasFuturePastBookingsExclusionsType struct {
	value *HasFuturePastBookingsExclusionsType
	isSet bool
}

func (v NullableHasFuturePastBookingsExclusionsType) Get() *HasFuturePastBookingsExclusionsType {
	return v.value
}

func (v *NullableHasFuturePastBookingsExclusionsType) Set(val *HasFuturePastBookingsExclusionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableHasFuturePastBookingsExclusionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableHasFuturePastBookingsExclusionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHasFuturePastBookingsExclusionsType(val *HasFuturePastBookingsExclusionsType) *NullableHasFuturePastBookingsExclusionsType {
	return &NullableHasFuturePastBookingsExclusionsType{value: val, isSet: true}
}

func (v NullableHasFuturePastBookingsExclusionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHasFuturePastBookingsExclusionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


