/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceRightType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceRightType{}

// InterfaceRightType struct for InterfaceRightType
type InterfaceRightType struct {
	// User defined code for an Interface Right.
	Code *string `json:"code,omitempty"`
	// User defined description for an Interface Right.
	Description *string `json:"description,omitempty"`
	// Hotel Code to which the Interface Right belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	InterfaceId *UniqueIDType `json:"interfaceId,omitempty"`
	// System Description of an allowed Interface Right.
	InterfaceRightDescription *string `json:"interfaceRightDescription,omitempty"`
	// Internal code for each allowed right of a Hotel Interface record.
	Right *int32 `json:"right,omitempty"`
}

// NewInterfaceRightType instantiates a new InterfaceRightType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceRightType() *InterfaceRightType {
	this := InterfaceRightType{}
	return &this
}

// NewInterfaceRightTypeWithDefaults instantiates a new InterfaceRightType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceRightTypeWithDefaults() *InterfaceRightType {
	this := InterfaceRightType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InterfaceRightType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InterfaceRightType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InterfaceRightType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterfaceRightType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterfaceRightType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterfaceRightType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceRightType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceRightType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceRightType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *InterfaceRightType) GetInterfaceId() UniqueIDType {
	if o == nil || IsNil(o.InterfaceId) {
		var ret UniqueIDType
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetInterfaceIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *InterfaceRightType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given UniqueIDType and assigns it to the InterfaceId field.
func (o *InterfaceRightType) SetInterfaceId(v UniqueIDType) {
	o.InterfaceId = &v
}

// GetInterfaceRightDescription returns the InterfaceRightDescription field value if set, zero value otherwise.
func (o *InterfaceRightType) GetInterfaceRightDescription() string {
	if o == nil || IsNil(o.InterfaceRightDescription) {
		var ret string
		return ret
	}
	return *o.InterfaceRightDescription
}

// GetInterfaceRightDescriptionOk returns a tuple with the InterfaceRightDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetInterfaceRightDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceRightDescription) {
		return nil, false
	}
	return o.InterfaceRightDescription, true
}

// HasInterfaceRightDescription returns a boolean if a field has been set.
func (o *InterfaceRightType) HasInterfaceRightDescription() bool {
	if o != nil && !IsNil(o.InterfaceRightDescription) {
		return true
	}

	return false
}

// SetInterfaceRightDescription gets a reference to the given string and assigns it to the InterfaceRightDescription field.
func (o *InterfaceRightType) SetInterfaceRightDescription(v string) {
	o.InterfaceRightDescription = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *InterfaceRightType) GetRight() int32 {
	if o == nil || IsNil(o.Right) {
		var ret int32
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRightType) GetRightOk() (*int32, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *InterfaceRightType) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given int32 and assigns it to the Right field.
func (o *InterfaceRightType) SetRight(v int32) {
	o.Right = &v
}

func (o InterfaceRightType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceRightType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.InterfaceRightDescription) {
		toSerialize["interfaceRightDescription"] = o.InterfaceRightDescription
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	return toSerialize, nil
}

type NullableInterfaceRightType struct {
	value *InterfaceRightType
	isSet bool
}

func (v NullableInterfaceRightType) Get() *InterfaceRightType {
	return v.value
}

func (v *NullableInterfaceRightType) Set(val *InterfaceRightType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRightType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRightType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRightType(val *InterfaceRightType) *NullableInterfaceRightType {
	return &NullableInterfaceRightType{value: val, isSet: true}
}

func (v NullableInterfaceRightType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRightType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


