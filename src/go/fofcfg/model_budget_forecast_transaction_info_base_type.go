/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BudgetForecastTransactionInfoBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetForecastTransactionInfoBaseType{}

// BudgetForecastTransactionInfoBaseType Budget Forecast information for budget Transaction codes.
type BudgetForecastTransactionInfoBaseType struct {
	// Flag to indicate if revenue information has to be included.
	Revenue *bool `json:"revenue,omitempty"`
	// Budget Forecast information for Transaction segment code .
	TransactionCodeInformation []TransactionCodeInformationBaseType `json:"transactionCodeInformation,omitempty"`
}

// NewBudgetForecastTransactionInfoBaseType instantiates a new BudgetForecastTransactionInfoBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetForecastTransactionInfoBaseType() *BudgetForecastTransactionInfoBaseType {
	this := BudgetForecastTransactionInfoBaseType{}
	return &this
}

// NewBudgetForecastTransactionInfoBaseTypeWithDefaults instantiates a new BudgetForecastTransactionInfoBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetForecastTransactionInfoBaseTypeWithDefaults() *BudgetForecastTransactionInfoBaseType {
	this := BudgetForecastTransactionInfoBaseType{}
	return &this
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *BudgetForecastTransactionInfoBaseType) GetRevenue() bool {
	if o == nil || IsNil(o.Revenue) {
		var ret bool
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastTransactionInfoBaseType) GetRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *BudgetForecastTransactionInfoBaseType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given bool and assigns it to the Revenue field.
func (o *BudgetForecastTransactionInfoBaseType) SetRevenue(v bool) {
	o.Revenue = &v
}

// GetTransactionCodeInformation returns the TransactionCodeInformation field value if set, zero value otherwise.
func (o *BudgetForecastTransactionInfoBaseType) GetTransactionCodeInformation() []TransactionCodeInformationBaseType {
	if o == nil || IsNil(o.TransactionCodeInformation) {
		var ret []TransactionCodeInformationBaseType
		return ret
	}
	return o.TransactionCodeInformation
}

// GetTransactionCodeInformationOk returns a tuple with the TransactionCodeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastTransactionInfoBaseType) GetTransactionCodeInformationOk() ([]TransactionCodeInformationBaseType, bool) {
	if o == nil || IsNil(o.TransactionCodeInformation) {
		return nil, false
	}
	return o.TransactionCodeInformation, true
}

// HasTransactionCodeInformation returns a boolean if a field has been set.
func (o *BudgetForecastTransactionInfoBaseType) HasTransactionCodeInformation() bool {
	if o != nil && !IsNil(o.TransactionCodeInformation) {
		return true
	}

	return false
}

// SetTransactionCodeInformation gets a reference to the given []TransactionCodeInformationBaseType and assigns it to the TransactionCodeInformation field.
func (o *BudgetForecastTransactionInfoBaseType) SetTransactionCodeInformation(v []TransactionCodeInformationBaseType) {
	o.TransactionCodeInformation = v
}

func (o BudgetForecastTransactionInfoBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetForecastTransactionInfoBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.TransactionCodeInformation) {
		toSerialize["transactionCodeInformation"] = o.TransactionCodeInformation
	}
	return toSerialize, nil
}

type NullableBudgetForecastTransactionInfoBaseType struct {
	value *BudgetForecastTransactionInfoBaseType
	isSet bool
}

func (v NullableBudgetForecastTransactionInfoBaseType) Get() *BudgetForecastTransactionInfoBaseType {
	return v.value
}

func (v *NullableBudgetForecastTransactionInfoBaseType) Set(val *BudgetForecastTransactionInfoBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetForecastTransactionInfoBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetForecastTransactionInfoBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetForecastTransactionInfoBaseType(val *BudgetForecastTransactionInfoBaseType) *NullableBudgetForecastTransactionInfoBaseType {
	return &NullableBudgetForecastTransactionInfoBaseType{value: val, isSet: true}
}

func (v NullableBudgetForecastTransactionInfoBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetForecastTransactionInfoBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


