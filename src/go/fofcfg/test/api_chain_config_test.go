/*
OPERA Cloud Front Desk Configuration API

Testing ChainConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fofcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/fofcfg"
)

func Test_fofcfg_ChainConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigApiService ChangeCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dropLocationId string
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCashierShiftDropLocations(context.Background(), dropLocationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCustomTaxTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCustomTaxTypes(context.Background(), taxTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeFiscalGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalGuestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeFiscalGuestTypes(context.Background(), fiscalGuestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeFiscalRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeFiscalRegions(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeTaxOffices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxOfficeId string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeTaxOffices(context.Background(), taxOfficeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeTemplateCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dropLocationId string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeTemplateCashierShiftDropLocations(context.Background(), dropLocationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteAutoFolioSettlementTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteAutoFolioSettlementTypes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteContractBillingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractBillingInstructionsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteContractBillingInstructions(context.Background(), contractBillingInstructionsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteTaxCategoryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxCategoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteTaxCategoryCodes(context.Background(), taxCategoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAutoFolioSettlementTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAutoFolioSettlementTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.GetCashierShiftDropLocations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetContractBillingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetContractBillingInstructions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCustomTaxTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCustomTaxTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetFetchTaxCategoryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetFetchTaxCategoryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetFiscalGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetFiscalGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetFiscalRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetFiscalRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTaxOffices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTaxOffices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTemplateCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTemplateCashierShiftDropLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAutoFolioSettlementTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAutoFolioSettlementTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.PostCashierShiftDropLocations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostContractBillingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostContractBillingInstructions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCustomTaxTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCustomTaxTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostFiscalGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostFiscalGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostFiscalRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostFiscalRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTaxCategoryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTaxCategoryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTaxOffices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTaxOffices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTemplateCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTemplateCashierShiftDropLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutAutoFolioSettlementTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigApi.PutAutoFolioSettlementTypes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutContractBillingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractBillingInstructionsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutContractBillingInstructions(context.Background(), contractBillingInstructionsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutTaxCategoryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxCategoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutTaxCategoryCodes(context.Background(), taxCategoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dropLocationId string
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCashierShiftDropLocations(context.Background(), dropLocationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCustomTaxTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCustomTaxTypes(context.Background(), taxTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveFiscalGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalGuestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveFiscalGuestTypes(context.Background(), fiscalGuestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveFiscalRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveFiscalRegions(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveTaxOffices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxOfficeId string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveTaxOffices(context.Background(), taxOfficeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveTemplateCashierShiftDropLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dropLocationId string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveTemplateCashierShiftDropLocations(context.Background(), dropLocationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
