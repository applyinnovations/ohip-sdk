/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ARAccountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARAccountType{}

// ARAccountType Accounts Receivabales Account details type.
type ARAccountType struct {
	AccountId *UniqueIDType `json:"accountId,omitempty"`
	AccountIndicators *IndicatorsType `json:"accountIndicators,omitempty"`
	// Name of the AR Account.
	AccountName *string `json:"accountName,omitempty"`
	// The Account Number for the Account.
	AccountNo *string `json:"accountNo,omitempty"`
	// The description of the Account Type.
	AccountTypeDescription *string `json:"accountTypeDescription,omitempty"`
	Address *AddressInfoType `json:"address,omitempty"`
	AgingInfo *ARAgingInfoType `json:"agingInfo,omitempty"`
	Balance *CurrencyAmountType `json:"balance,omitempty"`
	// Include In Batch Statement
	BatchStatement *bool `json:"batchStatement,omitempty"`
	// The person to contact for this Account.
	ContactName *string `json:"contactName,omitempty"`
	CreditLimit *CurrencyAmountType `json:"creditLimit,omitempty"`
	Email *EmailInfoType `json:"email,omitempty"`
	// Indicates if the Account has opted to send the statements and reminders to the Account email address by default.
	EmailStatementsReminders *bool `json:"emailStatementsReminders,omitempty"`
	FixedCharges *FixedChargesType `json:"fixedCharges,omitempty"`
	// Property where the AR Account exists.
	HotelId *string `json:"hotelId,omitempty"`
	Invoices *ARInvoicesType `json:"invoices,omitempty"`
	LastReminderInfo *ARAccountTypeLastReminderInfo `json:"lastReminderInfo,omitempty"`
	LastStatementInfo *ARAccountTypeLastStatementInfo `json:"lastStatementInfo,omitempty"`
	// Month End Calculation.
	MonthEndCalcYN *bool `json:"monthEndCalcYN,omitempty"`
	// The Note details attached to the Account.
	Notes []CommentInfoType `json:"notes,omitempty"`
	// Number of days on which person can make payment.
	PaymentDueDays *string `json:"paymentDueDays,omitempty"`
	Payments *ARPaymentsType `json:"payments,omitempty"`
	// Indicates if this is a Permanent Account. Permanent Accounts cannot be deleted.
	Permanent *bool `json:"permanent,omitempty"`
	// Indicates if this Account is the Primary Account for this Guest/Company.
	Primary *bool `json:"primary,omitempty"`
	// Indicates if associated folios should be printed by default with the statement.
	PrintFoliosWithStatement *bool `json:"printFoliosWithStatement,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	SearchMatches *SearchMatchesType `json:"searchMatches,omitempty"`
	Status *ARAccountStatusType `json:"status,omitempty"`
	Summary *ARBalanceType `json:"summary,omitempty"`
	// The Telephone and Fax details attached to the Account.
	Telephones []TelephoneInfoType `json:"telephones,omitempty"`
	// The Trace details attached to the Account.
	Traces []TraceType `json:"traces,omitempty"`
	// The type of Account.
	Type *string `json:"type,omitempty"`
	YearViewInfo *ARYearViewInfoType `json:"yearViewInfo,omitempty"`
}

// NewARAccountType instantiates a new ARAccountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARAccountType() *ARAccountType {
	this := ARAccountType{}
	return &this
}

// NewARAccountTypeWithDefaults instantiates a new ARAccountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARAccountTypeWithDefaults() *ARAccountType {
	this := ARAccountType{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ARAccountType) GetAccountId() UniqueIDType {
	if o == nil || IsNil(o.AccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ARAccountType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given UniqueIDType and assigns it to the AccountId field.
func (o *ARAccountType) SetAccountId(v UniqueIDType) {
	o.AccountId = &v
}

// GetAccountIndicators returns the AccountIndicators field value if set, zero value otherwise.
func (o *ARAccountType) GetAccountIndicators() IndicatorsType {
	if o == nil || IsNil(o.AccountIndicators) {
		var ret IndicatorsType
		return ret
	}
	return *o.AccountIndicators
}

// GetAccountIndicatorsOk returns a tuple with the AccountIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAccountIndicatorsOk() (*IndicatorsType, bool) {
	if o == nil || IsNil(o.AccountIndicators) {
		return nil, false
	}
	return o.AccountIndicators, true
}

// HasAccountIndicators returns a boolean if a field has been set.
func (o *ARAccountType) HasAccountIndicators() bool {
	if o != nil && !IsNil(o.AccountIndicators) {
		return true
	}

	return false
}

// SetAccountIndicators gets a reference to the given IndicatorsType and assigns it to the AccountIndicators field.
func (o *ARAccountType) SetAccountIndicators(v IndicatorsType) {
	o.AccountIndicators = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ARAccountType) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ARAccountType) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ARAccountType) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *ARAccountType) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *ARAccountType) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *ARAccountType) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetAccountTypeDescription returns the AccountTypeDescription field value if set, zero value otherwise.
func (o *ARAccountType) GetAccountTypeDescription() string {
	if o == nil || IsNil(o.AccountTypeDescription) {
		var ret string
		return ret
	}
	return *o.AccountTypeDescription
}

// GetAccountTypeDescriptionOk returns a tuple with the AccountTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAccountTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AccountTypeDescription) {
		return nil, false
	}
	return o.AccountTypeDescription, true
}

// HasAccountTypeDescription returns a boolean if a field has been set.
func (o *ARAccountType) HasAccountTypeDescription() bool {
	if o != nil && !IsNil(o.AccountTypeDescription) {
		return true
	}

	return false
}

// SetAccountTypeDescription gets a reference to the given string and assigns it to the AccountTypeDescription field.
func (o *ARAccountType) SetAccountTypeDescription(v string) {
	o.AccountTypeDescription = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ARAccountType) GetAddress() AddressInfoType {
	if o == nil || IsNil(o.Address) {
		var ret AddressInfoType
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAddressOk() (*AddressInfoType, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ARAccountType) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AddressInfoType and assigns it to the Address field.
func (o *ARAccountType) SetAddress(v AddressInfoType) {
	o.Address = &v
}

// GetAgingInfo returns the AgingInfo field value if set, zero value otherwise.
func (o *ARAccountType) GetAgingInfo() ARAgingInfoType {
	if o == nil || IsNil(o.AgingInfo) {
		var ret ARAgingInfoType
		return ret
	}
	return *o.AgingInfo
}

// GetAgingInfoOk returns a tuple with the AgingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetAgingInfoOk() (*ARAgingInfoType, bool) {
	if o == nil || IsNil(o.AgingInfo) {
		return nil, false
	}
	return o.AgingInfo, true
}

// HasAgingInfo returns a boolean if a field has been set.
func (o *ARAccountType) HasAgingInfo() bool {
	if o != nil && !IsNil(o.AgingInfo) {
		return true
	}

	return false
}

// SetAgingInfo gets a reference to the given ARAgingInfoType and assigns it to the AgingInfo field.
func (o *ARAccountType) SetAgingInfo(v ARAgingInfoType) {
	o.AgingInfo = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *ARAccountType) GetBalance() CurrencyAmountType {
	if o == nil || IsNil(o.Balance) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetBalanceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *ARAccountType) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given CurrencyAmountType and assigns it to the Balance field.
func (o *ARAccountType) SetBalance(v CurrencyAmountType) {
	o.Balance = &v
}

// GetBatchStatement returns the BatchStatement field value if set, zero value otherwise.
func (o *ARAccountType) GetBatchStatement() bool {
	if o == nil || IsNil(o.BatchStatement) {
		var ret bool
		return ret
	}
	return *o.BatchStatement
}

// GetBatchStatementOk returns a tuple with the BatchStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetBatchStatementOk() (*bool, bool) {
	if o == nil || IsNil(o.BatchStatement) {
		return nil, false
	}
	return o.BatchStatement, true
}

// HasBatchStatement returns a boolean if a field has been set.
func (o *ARAccountType) HasBatchStatement() bool {
	if o != nil && !IsNil(o.BatchStatement) {
		return true
	}

	return false
}

// SetBatchStatement gets a reference to the given bool and assigns it to the BatchStatement field.
func (o *ARAccountType) SetBatchStatement(v bool) {
	o.BatchStatement = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *ARAccountType) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *ARAccountType) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *ARAccountType) SetContactName(v string) {
	o.ContactName = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *ARAccountType) GetCreditLimit() CurrencyAmountType {
	if o == nil || IsNil(o.CreditLimit) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetCreditLimitOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *ARAccountType) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given CurrencyAmountType and assigns it to the CreditLimit field.
func (o *ARAccountType) SetCreditLimit(v CurrencyAmountType) {
	o.CreditLimit = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ARAccountType) GetEmail() EmailInfoType {
	if o == nil || IsNil(o.Email) {
		var ret EmailInfoType
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetEmailOk() (*EmailInfoType, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ARAccountType) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailInfoType and assigns it to the Email field.
func (o *ARAccountType) SetEmail(v EmailInfoType) {
	o.Email = &v
}

// GetEmailStatementsReminders returns the EmailStatementsReminders field value if set, zero value otherwise.
func (o *ARAccountType) GetEmailStatementsReminders() bool {
	if o == nil || IsNil(o.EmailStatementsReminders) {
		var ret bool
		return ret
	}
	return *o.EmailStatementsReminders
}

// GetEmailStatementsRemindersOk returns a tuple with the EmailStatementsReminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetEmailStatementsRemindersOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailStatementsReminders) {
		return nil, false
	}
	return o.EmailStatementsReminders, true
}

// HasEmailStatementsReminders returns a boolean if a field has been set.
func (o *ARAccountType) HasEmailStatementsReminders() bool {
	if o != nil && !IsNil(o.EmailStatementsReminders) {
		return true
	}

	return false
}

// SetEmailStatementsReminders gets a reference to the given bool and assigns it to the EmailStatementsReminders field.
func (o *ARAccountType) SetEmailStatementsReminders(v bool) {
	o.EmailStatementsReminders = &v
}

// GetFixedCharges returns the FixedCharges field value if set, zero value otherwise.
func (o *ARAccountType) GetFixedCharges() FixedChargesType {
	if o == nil || IsNil(o.FixedCharges) {
		var ret FixedChargesType
		return ret
	}
	return *o.FixedCharges
}

// GetFixedChargesOk returns a tuple with the FixedCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetFixedChargesOk() (*FixedChargesType, bool) {
	if o == nil || IsNil(o.FixedCharges) {
		return nil, false
	}
	return o.FixedCharges, true
}

// HasFixedCharges returns a boolean if a field has been set.
func (o *ARAccountType) HasFixedCharges() bool {
	if o != nil && !IsNil(o.FixedCharges) {
		return true
	}

	return false
}

// SetFixedCharges gets a reference to the given FixedChargesType and assigns it to the FixedCharges field.
func (o *ARAccountType) SetFixedCharges(v FixedChargesType) {
	o.FixedCharges = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARAccountType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARAccountType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARAccountType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInvoices returns the Invoices field value if set, zero value otherwise.
func (o *ARAccountType) GetInvoices() ARInvoicesType {
	if o == nil || IsNil(o.Invoices) {
		var ret ARInvoicesType
		return ret
	}
	return *o.Invoices
}

// GetInvoicesOk returns a tuple with the Invoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetInvoicesOk() (*ARInvoicesType, bool) {
	if o == nil || IsNil(o.Invoices) {
		return nil, false
	}
	return o.Invoices, true
}

// HasInvoices returns a boolean if a field has been set.
func (o *ARAccountType) HasInvoices() bool {
	if o != nil && !IsNil(o.Invoices) {
		return true
	}

	return false
}

// SetInvoices gets a reference to the given ARInvoicesType and assigns it to the Invoices field.
func (o *ARAccountType) SetInvoices(v ARInvoicesType) {
	o.Invoices = &v
}

// GetLastReminderInfo returns the LastReminderInfo field value if set, zero value otherwise.
func (o *ARAccountType) GetLastReminderInfo() ARAccountTypeLastReminderInfo {
	if o == nil || IsNil(o.LastReminderInfo) {
		var ret ARAccountTypeLastReminderInfo
		return ret
	}
	return *o.LastReminderInfo
}

// GetLastReminderInfoOk returns a tuple with the LastReminderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetLastReminderInfoOk() (*ARAccountTypeLastReminderInfo, bool) {
	if o == nil || IsNil(o.LastReminderInfo) {
		return nil, false
	}
	return o.LastReminderInfo, true
}

// HasLastReminderInfo returns a boolean if a field has been set.
func (o *ARAccountType) HasLastReminderInfo() bool {
	if o != nil && !IsNil(o.LastReminderInfo) {
		return true
	}

	return false
}

// SetLastReminderInfo gets a reference to the given ARAccountTypeLastReminderInfo and assigns it to the LastReminderInfo field.
func (o *ARAccountType) SetLastReminderInfo(v ARAccountTypeLastReminderInfo) {
	o.LastReminderInfo = &v
}

// GetLastStatementInfo returns the LastStatementInfo field value if set, zero value otherwise.
func (o *ARAccountType) GetLastStatementInfo() ARAccountTypeLastStatementInfo {
	if o == nil || IsNil(o.LastStatementInfo) {
		var ret ARAccountTypeLastStatementInfo
		return ret
	}
	return *o.LastStatementInfo
}

// GetLastStatementInfoOk returns a tuple with the LastStatementInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetLastStatementInfoOk() (*ARAccountTypeLastStatementInfo, bool) {
	if o == nil || IsNil(o.LastStatementInfo) {
		return nil, false
	}
	return o.LastStatementInfo, true
}

// HasLastStatementInfo returns a boolean if a field has been set.
func (o *ARAccountType) HasLastStatementInfo() bool {
	if o != nil && !IsNil(o.LastStatementInfo) {
		return true
	}

	return false
}

// SetLastStatementInfo gets a reference to the given ARAccountTypeLastStatementInfo and assigns it to the LastStatementInfo field.
func (o *ARAccountType) SetLastStatementInfo(v ARAccountTypeLastStatementInfo) {
	o.LastStatementInfo = &v
}

// GetMonthEndCalcYN returns the MonthEndCalcYN field value if set, zero value otherwise.
func (o *ARAccountType) GetMonthEndCalcYN() bool {
	if o == nil || IsNil(o.MonthEndCalcYN) {
		var ret bool
		return ret
	}
	return *o.MonthEndCalcYN
}

// GetMonthEndCalcYNOk returns a tuple with the MonthEndCalcYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetMonthEndCalcYNOk() (*bool, bool) {
	if o == nil || IsNil(o.MonthEndCalcYN) {
		return nil, false
	}
	return o.MonthEndCalcYN, true
}

// HasMonthEndCalcYN returns a boolean if a field has been set.
func (o *ARAccountType) HasMonthEndCalcYN() bool {
	if o != nil && !IsNil(o.MonthEndCalcYN) {
		return true
	}

	return false
}

// SetMonthEndCalcYN gets a reference to the given bool and assigns it to the MonthEndCalcYN field.
func (o *ARAccountType) SetMonthEndCalcYN(v bool) {
	o.MonthEndCalcYN = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ARAccountType) GetNotes() []CommentInfoType {
	if o == nil || IsNil(o.Notes) {
		var ret []CommentInfoType
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetNotesOk() ([]CommentInfoType, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ARAccountType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []CommentInfoType and assigns it to the Notes field.
func (o *ARAccountType) SetNotes(v []CommentInfoType) {
	o.Notes = v
}

// GetPaymentDueDays returns the PaymentDueDays field value if set, zero value otherwise.
func (o *ARAccountType) GetPaymentDueDays() string {
	if o == nil || IsNil(o.PaymentDueDays) {
		var ret string
		return ret
	}
	return *o.PaymentDueDays
}

// GetPaymentDueDaysOk returns a tuple with the PaymentDueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetPaymentDueDaysOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDueDays) {
		return nil, false
	}
	return o.PaymentDueDays, true
}

// HasPaymentDueDays returns a boolean if a field has been set.
func (o *ARAccountType) HasPaymentDueDays() bool {
	if o != nil && !IsNil(o.PaymentDueDays) {
		return true
	}

	return false
}

// SetPaymentDueDays gets a reference to the given string and assigns it to the PaymentDueDays field.
func (o *ARAccountType) SetPaymentDueDays(v string) {
	o.PaymentDueDays = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ARAccountType) GetPayments() ARPaymentsType {
	if o == nil || IsNil(o.Payments) {
		var ret ARPaymentsType
		return ret
	}
	return *o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetPaymentsOk() (*ARPaymentsType, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ARAccountType) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given ARPaymentsType and assigns it to the Payments field.
func (o *ARAccountType) SetPayments(v ARPaymentsType) {
	o.Payments = &v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *ARAccountType) GetPermanent() bool {
	if o == nil || IsNil(o.Permanent) {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.Permanent) {
		return nil, false
	}
	return o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *ARAccountType) HasPermanent() bool {
	if o != nil && !IsNil(o.Permanent) {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *ARAccountType) SetPermanent(v bool) {
	o.Permanent = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *ARAccountType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *ARAccountType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *ARAccountType) SetPrimary(v bool) {
	o.Primary = &v
}

// GetPrintFoliosWithStatement returns the PrintFoliosWithStatement field value if set, zero value otherwise.
func (o *ARAccountType) GetPrintFoliosWithStatement() bool {
	if o == nil || IsNil(o.PrintFoliosWithStatement) {
		var ret bool
		return ret
	}
	return *o.PrintFoliosWithStatement
}

// GetPrintFoliosWithStatementOk returns a tuple with the PrintFoliosWithStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetPrintFoliosWithStatementOk() (*bool, bool) {
	if o == nil || IsNil(o.PrintFoliosWithStatement) {
		return nil, false
	}
	return o.PrintFoliosWithStatement, true
}

// HasPrintFoliosWithStatement returns a boolean if a field has been set.
func (o *ARAccountType) HasPrintFoliosWithStatement() bool {
	if o != nil && !IsNil(o.PrintFoliosWithStatement) {
		return true
	}

	return false
}

// SetPrintFoliosWithStatement gets a reference to the given bool and assigns it to the PrintFoliosWithStatement field.
func (o *ARAccountType) SetPrintFoliosWithStatement(v bool) {
	o.PrintFoliosWithStatement = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ARAccountType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ARAccountType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *ARAccountType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetSearchMatches returns the SearchMatches field value if set, zero value otherwise.
func (o *ARAccountType) GetSearchMatches() SearchMatchesType {
	if o == nil || IsNil(o.SearchMatches) {
		var ret SearchMatchesType
		return ret
	}
	return *o.SearchMatches
}

// GetSearchMatchesOk returns a tuple with the SearchMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetSearchMatchesOk() (*SearchMatchesType, bool) {
	if o == nil || IsNil(o.SearchMatches) {
		return nil, false
	}
	return o.SearchMatches, true
}

// HasSearchMatches returns a boolean if a field has been set.
func (o *ARAccountType) HasSearchMatches() bool {
	if o != nil && !IsNil(o.SearchMatches) {
		return true
	}

	return false
}

// SetSearchMatches gets a reference to the given SearchMatchesType and assigns it to the SearchMatches field.
func (o *ARAccountType) SetSearchMatches(v SearchMatchesType) {
	o.SearchMatches = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ARAccountType) GetStatus() ARAccountStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ARAccountStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetStatusOk() (*ARAccountStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ARAccountType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ARAccountStatusType and assigns it to the Status field.
func (o *ARAccountType) SetStatus(v ARAccountStatusType) {
	o.Status = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ARAccountType) GetSummary() ARBalanceType {
	if o == nil || IsNil(o.Summary) {
		var ret ARBalanceType
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetSummaryOk() (*ARBalanceType, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ARAccountType) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given ARBalanceType and assigns it to the Summary field.
func (o *ARAccountType) SetSummary(v ARBalanceType) {
	o.Summary = &v
}

// GetTelephones returns the Telephones field value if set, zero value otherwise.
func (o *ARAccountType) GetTelephones() []TelephoneInfoType {
	if o == nil || IsNil(o.Telephones) {
		var ret []TelephoneInfoType
		return ret
	}
	return o.Telephones
}

// GetTelephonesOk returns a tuple with the Telephones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetTelephonesOk() ([]TelephoneInfoType, bool) {
	if o == nil || IsNil(o.Telephones) {
		return nil, false
	}
	return o.Telephones, true
}

// HasTelephones returns a boolean if a field has been set.
func (o *ARAccountType) HasTelephones() bool {
	if o != nil && !IsNil(o.Telephones) {
		return true
	}

	return false
}

// SetTelephones gets a reference to the given []TelephoneInfoType and assigns it to the Telephones field.
func (o *ARAccountType) SetTelephones(v []TelephoneInfoType) {
	o.Telephones = v
}

// GetTraces returns the Traces field value if set, zero value otherwise.
func (o *ARAccountType) GetTraces() []TraceType {
	if o == nil || IsNil(o.Traces) {
		var ret []TraceType
		return ret
	}
	return o.Traces
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetTracesOk() ([]TraceType, bool) {
	if o == nil || IsNil(o.Traces) {
		return nil, false
	}
	return o.Traces, true
}

// HasTraces returns a boolean if a field has been set.
func (o *ARAccountType) HasTraces() bool {
	if o != nil && !IsNil(o.Traces) {
		return true
	}

	return false
}

// SetTraces gets a reference to the given []TraceType and assigns it to the Traces field.
func (o *ARAccountType) SetTraces(v []TraceType) {
	o.Traces = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ARAccountType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ARAccountType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ARAccountType) SetType(v string) {
	o.Type = &v
}

// GetYearViewInfo returns the YearViewInfo field value if set, zero value otherwise.
func (o *ARAccountType) GetYearViewInfo() ARYearViewInfoType {
	if o == nil || IsNil(o.YearViewInfo) {
		var ret ARYearViewInfoType
		return ret
	}
	return *o.YearViewInfo
}

// GetYearViewInfoOk returns a tuple with the YearViewInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountType) GetYearViewInfoOk() (*ARYearViewInfoType, bool) {
	if o == nil || IsNil(o.YearViewInfo) {
		return nil, false
	}
	return o.YearViewInfo, true
}

// HasYearViewInfo returns a boolean if a field has been set.
func (o *ARAccountType) HasYearViewInfo() bool {
	if o != nil && !IsNil(o.YearViewInfo) {
		return true
	}

	return false
}

// SetYearViewInfo gets a reference to the given ARYearViewInfoType and assigns it to the YearViewInfo field.
func (o *ARAccountType) SetYearViewInfo(v ARYearViewInfoType) {
	o.YearViewInfo = &v
}

func (o ARAccountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARAccountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountIndicators) {
		toSerialize["accountIndicators"] = o.AccountIndicators
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.AccountTypeDescription) {
		toSerialize["accountTypeDescription"] = o.AccountTypeDescription
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AgingInfo) {
		toSerialize["agingInfo"] = o.AgingInfo
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.BatchStatement) {
		toSerialize["batchStatement"] = o.BatchStatement
	}
	if !IsNil(o.ContactName) {
		toSerialize["contactName"] = o.ContactName
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailStatementsReminders) {
		toSerialize["emailStatementsReminders"] = o.EmailStatementsReminders
	}
	if !IsNil(o.FixedCharges) {
		toSerialize["fixedCharges"] = o.FixedCharges
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Invoices) {
		toSerialize["invoices"] = o.Invoices
	}
	if !IsNil(o.LastReminderInfo) {
		toSerialize["lastReminderInfo"] = o.LastReminderInfo
	}
	if !IsNil(o.LastStatementInfo) {
		toSerialize["lastStatementInfo"] = o.LastStatementInfo
	}
	if !IsNil(o.MonthEndCalcYN) {
		toSerialize["monthEndCalcYN"] = o.MonthEndCalcYN
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.PaymentDueDays) {
		toSerialize["paymentDueDays"] = o.PaymentDueDays
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Permanent) {
		toSerialize["permanent"] = o.Permanent
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.PrintFoliosWithStatement) {
		toSerialize["printFoliosWithStatement"] = o.PrintFoliosWithStatement
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.SearchMatches) {
		toSerialize["searchMatches"] = o.SearchMatches
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Telephones) {
		toSerialize["telephones"] = o.Telephones
	}
	if !IsNil(o.Traces) {
		toSerialize["traces"] = o.Traces
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.YearViewInfo) {
		toSerialize["yearViewInfo"] = o.YearViewInfo
	}
	return toSerialize, nil
}

type NullableARAccountType struct {
	value *ARAccountType
	isSet bool
}

func (v NullableARAccountType) Get() *ARAccountType {
	return v.value
}

func (v *NullableARAccountType) Set(val *ARAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableARAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableARAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARAccountType(val *ARAccountType) *NullableARAccountType {
	return &NullableARAccountType{value: val, isSet: true}
}

func (v NullableARAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


