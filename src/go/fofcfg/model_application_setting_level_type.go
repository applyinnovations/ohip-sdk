/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// ApplicationSettingLevelType the model 'ApplicationSettingLevelType'
type ApplicationSettingLevelType string

// List of applicationSettingLevelType
const (
	APPLICATIONSETTINGLEVELTYPE_GLOBAL ApplicationSettingLevelType = "Global"
	APPLICATIONSETTINGLEVELTYPE_HOTEL ApplicationSettingLevelType = "Hotel"
	APPLICATIONSETTINGLEVELTYPE_CRO ApplicationSettingLevelType = "Cro"
)

// All allowed values of ApplicationSettingLevelType enum
var AllowedApplicationSettingLevelTypeEnumValues = []ApplicationSettingLevelType{
	"Global",
	"Hotel",
	"Cro",
}

func (v *ApplicationSettingLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationSettingLevelType(value)
	for _, existing := range AllowedApplicationSettingLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationSettingLevelType", value)
}

// NewApplicationSettingLevelTypeFromValue returns a pointer to a valid ApplicationSettingLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationSettingLevelTypeFromValue(v string) (*ApplicationSettingLevelType, error) {
	ev := ApplicationSettingLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationSettingLevelType: valid values are %v", v, AllowedApplicationSettingLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationSettingLevelType) IsValid() bool {
	for _, existing := range AllowedApplicationSettingLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to applicationSettingLevelType value
func (v ApplicationSettingLevelType) Ptr() *ApplicationSettingLevelType {
	return &v
}

type NullableApplicationSettingLevelType struct {
	value *ApplicationSettingLevelType
	isSet bool
}

func (v NullableApplicationSettingLevelType) Get() *ApplicationSettingLevelType {
	return v.value
}

func (v *NullableApplicationSettingLevelType) Set(val *ApplicationSettingLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSettingLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSettingLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSettingLevelType(val *ApplicationSettingLevelType) *NullableApplicationSettingLevelType {
	return &NullableApplicationSettingLevelType{value: val, isSet: true}
}

func (v NullableApplicationSettingLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSettingLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

