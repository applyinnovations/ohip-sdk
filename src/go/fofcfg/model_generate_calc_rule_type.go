/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the GenerateCalcRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateCalcRuleType{}

// GenerateCalcRuleType Defines the Calculation Rule for the generate.
type GenerateCalcRuleType struct {
	FlatAmount *FlatAmtGenerateType `json:"flatAmount,omitempty"`
	Percentage *PercentageGenerateType `json:"percentage,omitempty"`
	Posting *GeneratePostingRuleType `json:"posting,omitempty"`
	RoundingMethod *GenerateRoundingMethodType `json:"roundingMethod,omitempty"`
	TaxTypeBased *TaxTypesGenerateType `json:"taxTypeBased,omitempty"`
	// Defines User Defined Function to calculate generates.
	UDF *string `json:"uDF,omitempty"`
	UDFFunctionArguments *FunctionArgumentsType `json:"uDFFunctionArguments,omitempty"`
	// The function name of the User Defined Function used to calculate generates.
	UDFFunctionName *string `json:"uDFFunctionName,omitempty"`
}

// NewGenerateCalcRuleType instantiates a new GenerateCalcRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateCalcRuleType() *GenerateCalcRuleType {
	this := GenerateCalcRuleType{}
	return &this
}

// NewGenerateCalcRuleTypeWithDefaults instantiates a new GenerateCalcRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateCalcRuleTypeWithDefaults() *GenerateCalcRuleType {
	this := GenerateCalcRuleType{}
	return &this
}

// GetFlatAmount returns the FlatAmount field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetFlatAmount() FlatAmtGenerateType {
	if o == nil || IsNil(o.FlatAmount) {
		var ret FlatAmtGenerateType
		return ret
	}
	return *o.FlatAmount
}

// GetFlatAmountOk returns a tuple with the FlatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetFlatAmountOk() (*FlatAmtGenerateType, bool) {
	if o == nil || IsNil(o.FlatAmount) {
		return nil, false
	}
	return o.FlatAmount, true
}

// HasFlatAmount returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasFlatAmount() bool {
	if o != nil && !IsNil(o.FlatAmount) {
		return true
	}

	return false
}

// SetFlatAmount gets a reference to the given FlatAmtGenerateType and assigns it to the FlatAmount field.
func (o *GenerateCalcRuleType) SetFlatAmount(v FlatAmtGenerateType) {
	o.FlatAmount = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetPercentage() PercentageGenerateType {
	if o == nil || IsNil(o.Percentage) {
		var ret PercentageGenerateType
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetPercentageOk() (*PercentageGenerateType, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given PercentageGenerateType and assigns it to the Percentage field.
func (o *GenerateCalcRuleType) SetPercentage(v PercentageGenerateType) {
	o.Percentage = &v
}

// GetPosting returns the Posting field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetPosting() GeneratePostingRuleType {
	if o == nil || IsNil(o.Posting) {
		var ret GeneratePostingRuleType
		return ret
	}
	return *o.Posting
}

// GetPostingOk returns a tuple with the Posting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetPostingOk() (*GeneratePostingRuleType, bool) {
	if o == nil || IsNil(o.Posting) {
		return nil, false
	}
	return o.Posting, true
}

// HasPosting returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasPosting() bool {
	if o != nil && !IsNil(o.Posting) {
		return true
	}

	return false
}

// SetPosting gets a reference to the given GeneratePostingRuleType and assigns it to the Posting field.
func (o *GenerateCalcRuleType) SetPosting(v GeneratePostingRuleType) {
	o.Posting = &v
}

// GetRoundingMethod returns the RoundingMethod field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetRoundingMethod() GenerateRoundingMethodType {
	if o == nil || IsNil(o.RoundingMethod) {
		var ret GenerateRoundingMethodType
		return ret
	}
	return *o.RoundingMethod
}

// GetRoundingMethodOk returns a tuple with the RoundingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetRoundingMethodOk() (*GenerateRoundingMethodType, bool) {
	if o == nil || IsNil(o.RoundingMethod) {
		return nil, false
	}
	return o.RoundingMethod, true
}

// HasRoundingMethod returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasRoundingMethod() bool {
	if o != nil && !IsNil(o.RoundingMethod) {
		return true
	}

	return false
}

// SetRoundingMethod gets a reference to the given GenerateRoundingMethodType and assigns it to the RoundingMethod field.
func (o *GenerateCalcRuleType) SetRoundingMethod(v GenerateRoundingMethodType) {
	o.RoundingMethod = &v
}

// GetTaxTypeBased returns the TaxTypeBased field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetTaxTypeBased() TaxTypesGenerateType {
	if o == nil || IsNil(o.TaxTypeBased) {
		var ret TaxTypesGenerateType
		return ret
	}
	return *o.TaxTypeBased
}

// GetTaxTypeBasedOk returns a tuple with the TaxTypeBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetTaxTypeBasedOk() (*TaxTypesGenerateType, bool) {
	if o == nil || IsNil(o.TaxTypeBased) {
		return nil, false
	}
	return o.TaxTypeBased, true
}

// HasTaxTypeBased returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasTaxTypeBased() bool {
	if o != nil && !IsNil(o.TaxTypeBased) {
		return true
	}

	return false
}

// SetTaxTypeBased gets a reference to the given TaxTypesGenerateType and assigns it to the TaxTypeBased field.
func (o *GenerateCalcRuleType) SetTaxTypeBased(v TaxTypesGenerateType) {
	o.TaxTypeBased = &v
}

// GetUDF returns the UDF field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetUDF() string {
	if o == nil || IsNil(o.UDF) {
		var ret string
		return ret
	}
	return *o.UDF
}

// GetUDFOk returns a tuple with the UDF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetUDFOk() (*string, bool) {
	if o == nil || IsNil(o.UDF) {
		return nil, false
	}
	return o.UDF, true
}

// HasUDF returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasUDF() bool {
	if o != nil && !IsNil(o.UDF) {
		return true
	}

	return false
}

// SetUDF gets a reference to the given string and assigns it to the UDF field.
func (o *GenerateCalcRuleType) SetUDF(v string) {
	o.UDF = &v
}

// GetUDFFunctionArguments returns the UDFFunctionArguments field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetUDFFunctionArguments() FunctionArgumentsType {
	if o == nil || IsNil(o.UDFFunctionArguments) {
		var ret FunctionArgumentsType
		return ret
	}
	return *o.UDFFunctionArguments
}

// GetUDFFunctionArgumentsOk returns a tuple with the UDFFunctionArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetUDFFunctionArgumentsOk() (*FunctionArgumentsType, bool) {
	if o == nil || IsNil(o.UDFFunctionArguments) {
		return nil, false
	}
	return o.UDFFunctionArguments, true
}

// HasUDFFunctionArguments returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasUDFFunctionArguments() bool {
	if o != nil && !IsNil(o.UDFFunctionArguments) {
		return true
	}

	return false
}

// SetUDFFunctionArguments gets a reference to the given FunctionArgumentsType and assigns it to the UDFFunctionArguments field.
func (o *GenerateCalcRuleType) SetUDFFunctionArguments(v FunctionArgumentsType) {
	o.UDFFunctionArguments = &v
}

// GetUDFFunctionName returns the UDFFunctionName field value if set, zero value otherwise.
func (o *GenerateCalcRuleType) GetUDFFunctionName() string {
	if o == nil || IsNil(o.UDFFunctionName) {
		var ret string
		return ret
	}
	return *o.UDFFunctionName
}

// GetUDFFunctionNameOk returns a tuple with the UDFFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCalcRuleType) GetUDFFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.UDFFunctionName) {
		return nil, false
	}
	return o.UDFFunctionName, true
}

// HasUDFFunctionName returns a boolean if a field has been set.
func (o *GenerateCalcRuleType) HasUDFFunctionName() bool {
	if o != nil && !IsNil(o.UDFFunctionName) {
		return true
	}

	return false
}

// SetUDFFunctionName gets a reference to the given string and assigns it to the UDFFunctionName field.
func (o *GenerateCalcRuleType) SetUDFFunctionName(v string) {
	o.UDFFunctionName = &v
}

func (o GenerateCalcRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateCalcRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlatAmount) {
		toSerialize["flatAmount"] = o.FlatAmount
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.Posting) {
		toSerialize["posting"] = o.Posting
	}
	if !IsNil(o.RoundingMethod) {
		toSerialize["roundingMethod"] = o.RoundingMethod
	}
	if !IsNil(o.TaxTypeBased) {
		toSerialize["taxTypeBased"] = o.TaxTypeBased
	}
	if !IsNil(o.UDF) {
		toSerialize["uDF"] = o.UDF
	}
	if !IsNil(o.UDFFunctionArguments) {
		toSerialize["uDFFunctionArguments"] = o.UDFFunctionArguments
	}
	if !IsNil(o.UDFFunctionName) {
		toSerialize["uDFFunctionName"] = o.UDFFunctionName
	}
	return toSerialize, nil
}

type NullableGenerateCalcRuleType struct {
	value *GenerateCalcRuleType
	isSet bool
}

func (v NullableGenerateCalcRuleType) Get() *GenerateCalcRuleType {
	return v.value
}

func (v *NullableGenerateCalcRuleType) Set(val *GenerateCalcRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateCalcRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateCalcRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateCalcRuleType(val *GenerateCalcRuleType) *NullableGenerateCalcRuleType {
	return &NullableGenerateCalcRuleType{value: val, isSet: true}
}

func (v NullableGenerateCalcRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateCalcRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


