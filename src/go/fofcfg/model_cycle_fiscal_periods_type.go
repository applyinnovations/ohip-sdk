/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CycleFiscalPeriodsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycleFiscalPeriodsType{}

// CycleFiscalPeriodsType List of Cycle Fiscal Periods.
type CycleFiscalPeriodsType struct {
	Items []CycleFiscalPeriodType
}

// NewCycleFiscalPeriodsType instantiates a new CycleFiscalPeriodsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycleFiscalPeriodsType() *CycleFiscalPeriodsType {
	this := CycleFiscalPeriodsType{}
	return &this
}

// NewCycleFiscalPeriodsTypeWithDefaults instantiates a new CycleFiscalPeriodsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycleFiscalPeriodsTypeWithDefaults() *CycleFiscalPeriodsType {
	this := CycleFiscalPeriodsType{}
	return &this
}

func (o CycleFiscalPeriodsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycleFiscalPeriodsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *CycleFiscalPeriodsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableCycleFiscalPeriodsType struct {
	value CycleFiscalPeriodsType
	isSet bool
}

func (v NullableCycleFiscalPeriodsType) Get() CycleFiscalPeriodsType {
	return v.value
}

func (v *NullableCycleFiscalPeriodsType) Set(val CycleFiscalPeriodsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCycleFiscalPeriodsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCycleFiscalPeriodsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycleFiscalPeriodsType(val CycleFiscalPeriodsType) *NullableCycleFiscalPeriodsType {
	return &NullableCycleFiscalPeriodsType{value: val, isSet: true}
}

func (v NullableCycleFiscalPeriodsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycleFiscalPeriodsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


