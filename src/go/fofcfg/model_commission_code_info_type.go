/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CommissionCodeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionCodeInfoType{}

// CommissionCodeInfoType Commission code info.
type CommissionCodeInfoType struct {
	CommissionCalculation *CommissionCalculationType `json:"commissionCalculation,omitempty"`
	// Commission code for which details are fetched.
	CommissionCode *string `json:"commissionCode,omitempty"`
	CommissionCodeHoldStatus *CommissionCodeHoldStatusType `json:"commissionCodeHoldStatus,omitempty"`
	// Commission code description for which details are fetched.
	Description *string `json:"description,omitempty"`
	// Property of the commission codes.
	HotelId *string `json:"hotelId,omitempty"`
	ReservationHistoryRecords *CommissionPaidDetailsType `json:"reservationHistoryRecords,omitempty"`
	// Commission code sequence number.
	Sequence *int32 `json:"sequence,omitempty"`
	// Commission paid Tax details.
	TaxPercentage *float32 `json:"taxPercentage,omitempty"`
}

// NewCommissionCodeInfoType instantiates a new CommissionCodeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionCodeInfoType() *CommissionCodeInfoType {
	this := CommissionCodeInfoType{}
	return &this
}

// NewCommissionCodeInfoTypeWithDefaults instantiates a new CommissionCodeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionCodeInfoTypeWithDefaults() *CommissionCodeInfoType {
	this := CommissionCodeInfoType{}
	return &this
}

// GetCommissionCalculation returns the CommissionCalculation field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetCommissionCalculation() CommissionCalculationType {
	if o == nil || IsNil(o.CommissionCalculation) {
		var ret CommissionCalculationType
		return ret
	}
	return *o.CommissionCalculation
}

// GetCommissionCalculationOk returns a tuple with the CommissionCalculation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetCommissionCalculationOk() (*CommissionCalculationType, bool) {
	if o == nil || IsNil(o.CommissionCalculation) {
		return nil, false
	}
	return o.CommissionCalculation, true
}

// HasCommissionCalculation returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasCommissionCalculation() bool {
	if o != nil && !IsNil(o.CommissionCalculation) {
		return true
	}

	return false
}

// SetCommissionCalculation gets a reference to the given CommissionCalculationType and assigns it to the CommissionCalculation field.
func (o *CommissionCodeInfoType) SetCommissionCalculation(v CommissionCalculationType) {
	o.CommissionCalculation = &v
}

// GetCommissionCode returns the CommissionCode field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetCommissionCode() string {
	if o == nil || IsNil(o.CommissionCode) {
		var ret string
		return ret
	}
	return *o.CommissionCode
}

// GetCommissionCodeOk returns a tuple with the CommissionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetCommissionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionCode) {
		return nil, false
	}
	return o.CommissionCode, true
}

// HasCommissionCode returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasCommissionCode() bool {
	if o != nil && !IsNil(o.CommissionCode) {
		return true
	}

	return false
}

// SetCommissionCode gets a reference to the given string and assigns it to the CommissionCode field.
func (o *CommissionCodeInfoType) SetCommissionCode(v string) {
	o.CommissionCode = &v
}

// GetCommissionCodeHoldStatus returns the CommissionCodeHoldStatus field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetCommissionCodeHoldStatus() CommissionCodeHoldStatusType {
	if o == nil || IsNil(o.CommissionCodeHoldStatus) {
		var ret CommissionCodeHoldStatusType
		return ret
	}
	return *o.CommissionCodeHoldStatus
}

// GetCommissionCodeHoldStatusOk returns a tuple with the CommissionCodeHoldStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetCommissionCodeHoldStatusOk() (*CommissionCodeHoldStatusType, bool) {
	if o == nil || IsNil(o.CommissionCodeHoldStatus) {
		return nil, false
	}
	return o.CommissionCodeHoldStatus, true
}

// HasCommissionCodeHoldStatus returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasCommissionCodeHoldStatus() bool {
	if o != nil && !IsNil(o.CommissionCodeHoldStatus) {
		return true
	}

	return false
}

// SetCommissionCodeHoldStatus gets a reference to the given CommissionCodeHoldStatusType and assigns it to the CommissionCodeHoldStatus field.
func (o *CommissionCodeInfoType) SetCommissionCodeHoldStatus(v CommissionCodeHoldStatusType) {
	o.CommissionCodeHoldStatus = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CommissionCodeInfoType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CommissionCodeInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationHistoryRecords returns the ReservationHistoryRecords field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetReservationHistoryRecords() CommissionPaidDetailsType {
	if o == nil || IsNil(o.ReservationHistoryRecords) {
		var ret CommissionPaidDetailsType
		return ret
	}
	return *o.ReservationHistoryRecords
}

// GetReservationHistoryRecordsOk returns a tuple with the ReservationHistoryRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetReservationHistoryRecordsOk() (*CommissionPaidDetailsType, bool) {
	if o == nil || IsNil(o.ReservationHistoryRecords) {
		return nil, false
	}
	return o.ReservationHistoryRecords, true
}

// HasReservationHistoryRecords returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasReservationHistoryRecords() bool {
	if o != nil && !IsNil(o.ReservationHistoryRecords) {
		return true
	}

	return false
}

// SetReservationHistoryRecords gets a reference to the given CommissionPaidDetailsType and assigns it to the ReservationHistoryRecords field.
func (o *CommissionCodeInfoType) SetReservationHistoryRecords(v CommissionPaidDetailsType) {
	o.ReservationHistoryRecords = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *CommissionCodeInfoType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetTaxPercentage returns the TaxPercentage field value if set, zero value otherwise.
func (o *CommissionCodeInfoType) GetTaxPercentage() float32 {
	if o == nil || IsNil(o.TaxPercentage) {
		var ret float32
		return ret
	}
	return *o.TaxPercentage
}

// GetTaxPercentageOk returns a tuple with the TaxPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeInfoType) GetTaxPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxPercentage) {
		return nil, false
	}
	return o.TaxPercentage, true
}

// HasTaxPercentage returns a boolean if a field has been set.
func (o *CommissionCodeInfoType) HasTaxPercentage() bool {
	if o != nil && !IsNil(o.TaxPercentage) {
		return true
	}

	return false
}

// SetTaxPercentage gets a reference to the given float32 and assigns it to the TaxPercentage field.
func (o *CommissionCodeInfoType) SetTaxPercentage(v float32) {
	o.TaxPercentage = &v
}

func (o CommissionCodeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionCodeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionCalculation) {
		toSerialize["commissionCalculation"] = o.CommissionCalculation
	}
	if !IsNil(o.CommissionCode) {
		toSerialize["commissionCode"] = o.CommissionCode
	}
	if !IsNil(o.CommissionCodeHoldStatus) {
		toSerialize["commissionCodeHoldStatus"] = o.CommissionCodeHoldStatus
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationHistoryRecords) {
		toSerialize["reservationHistoryRecords"] = o.ReservationHistoryRecords
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.TaxPercentage) {
		toSerialize["taxPercentage"] = o.TaxPercentage
	}
	return toSerialize, nil
}

type NullableCommissionCodeInfoType struct {
	value *CommissionCodeInfoType
	isSet bool
}

func (v NullableCommissionCodeInfoType) Get() *CommissionCodeInfoType {
	return v.value
}

func (v *NullableCommissionCodeInfoType) Set(val *CommissionCodeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionCodeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionCodeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionCodeInfoType(val *CommissionCodeInfoType) *NullableCommissionCodeInfoType {
	return &NullableCommissionCodeInfoType{value: val, isSet: true}
}

func (v NullableCommissionCodeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionCodeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


