/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the FiscalPeriodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalPeriodType{}

// FiscalPeriodType Fiscal Period Type
type FiscalPeriodType struct {
	// Code of the current Period.
	Code *string `json:"code,omitempty"`
	// Description of the Period.
	Description *string `json:"description,omitempty"`
	// End Date of the Period.
	EndDate *string `json:"endDate,omitempty"`
	// Resort for which the Period is defined.
	HotelId *string `json:"hotelId,omitempty"`
	PeriodType *YearTypeType `json:"periodType,omitempty"`
	// Start Date of the Period
	StartDate *string `json:"startDate,omitempty"`
	// Year for the current Period.
	Year *float32 `json:"year,omitempty"`
	// Id of the Year.
	YearId *float32 `json:"yearId,omitempty"`
}

// NewFiscalPeriodType instantiates a new FiscalPeriodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalPeriodType() *FiscalPeriodType {
	this := FiscalPeriodType{}
	return &this
}

// NewFiscalPeriodTypeWithDefaults instantiates a new FiscalPeriodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalPeriodTypeWithDefaults() *FiscalPeriodType {
	this := FiscalPeriodType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FiscalPeriodType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FiscalPeriodType) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *FiscalPeriodType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FiscalPeriodType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetPeriodType() YearTypeType {
	if o == nil || IsNil(o.PeriodType) {
		var ret YearTypeType
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetPeriodTypeOk() (*YearTypeType, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given YearTypeType and assigns it to the PeriodType field.
func (o *FiscalPeriodType) SetPeriodType(v YearTypeType) {
	o.PeriodType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *FiscalPeriodType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetYear() float32 {
	if o == nil || IsNil(o.Year) {
		var ret float32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetYearOk() (*float32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given float32 and assigns it to the Year field.
func (o *FiscalPeriodType) SetYear(v float32) {
	o.Year = &v
}

// GetYearId returns the YearId field value if set, zero value otherwise.
func (o *FiscalPeriodType) GetYearId() float32 {
	if o == nil || IsNil(o.YearId) {
		var ret float32
		return ret
	}
	return *o.YearId
}

// GetYearIdOk returns a tuple with the YearId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodType) GetYearIdOk() (*float32, bool) {
	if o == nil || IsNil(o.YearId) {
		return nil, false
	}
	return o.YearId, true
}

// HasYearId returns a boolean if a field has been set.
func (o *FiscalPeriodType) HasYearId() bool {
	if o != nil && !IsNil(o.YearId) {
		return true
	}

	return false
}

// SetYearId gets a reference to the given float32 and assigns it to the YearId field.
func (o *FiscalPeriodType) SetYearId(v float32) {
	o.YearId = &v
}

func (o FiscalPeriodType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalPeriodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PeriodType) {
		toSerialize["periodType"] = o.PeriodType
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.YearId) {
		toSerialize["yearId"] = o.YearId
	}
	return toSerialize, nil
}

type NullableFiscalPeriodType struct {
	value *FiscalPeriodType
	isSet bool
}

func (v NullableFiscalPeriodType) Get() *FiscalPeriodType {
	return v.value
}

func (v *NullableFiscalPeriodType) Set(val *FiscalPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalPeriodType(val *FiscalPeriodType) *NullableFiscalPeriodType {
	return &NullableFiscalPeriodType{value: val, isSet: true}
}

func (v NullableFiscalPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


