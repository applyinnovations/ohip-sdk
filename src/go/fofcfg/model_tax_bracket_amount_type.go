/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TaxBracketAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxBracketAmountType{}

// TaxBracketAmountType Details used for storing information about a tax bracket amount.
type TaxBracketAmountType struct {
	EndAmount *CurrencyAmountType `json:"endAmount,omitempty"`
	StartAmount *CurrencyAmountType `json:"startAmount,omitempty"`
	TaxAmount *CurrencyAmountType `json:"taxAmount,omitempty"`
}

// NewTaxBracketAmountType instantiates a new TaxBracketAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxBracketAmountType() *TaxBracketAmountType {
	this := TaxBracketAmountType{}
	return &this
}

// NewTaxBracketAmountTypeWithDefaults instantiates a new TaxBracketAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxBracketAmountTypeWithDefaults() *TaxBracketAmountType {
	this := TaxBracketAmountType{}
	return &this
}

// GetEndAmount returns the EndAmount field value if set, zero value otherwise.
func (o *TaxBracketAmountType) GetEndAmount() CurrencyAmountType {
	if o == nil || IsNil(o.EndAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.EndAmount
}

// GetEndAmountOk returns a tuple with the EndAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketAmountType) GetEndAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.EndAmount) {
		return nil, false
	}
	return o.EndAmount, true
}

// HasEndAmount returns a boolean if a field has been set.
func (o *TaxBracketAmountType) HasEndAmount() bool {
	if o != nil && !IsNil(o.EndAmount) {
		return true
	}

	return false
}

// SetEndAmount gets a reference to the given CurrencyAmountType and assigns it to the EndAmount field.
func (o *TaxBracketAmountType) SetEndAmount(v CurrencyAmountType) {
	o.EndAmount = &v
}

// GetStartAmount returns the StartAmount field value if set, zero value otherwise.
func (o *TaxBracketAmountType) GetStartAmount() CurrencyAmountType {
	if o == nil || IsNil(o.StartAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.StartAmount
}

// GetStartAmountOk returns a tuple with the StartAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketAmountType) GetStartAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.StartAmount) {
		return nil, false
	}
	return o.StartAmount, true
}

// HasStartAmount returns a boolean if a field has been set.
func (o *TaxBracketAmountType) HasStartAmount() bool {
	if o != nil && !IsNil(o.StartAmount) {
		return true
	}

	return false
}

// SetStartAmount gets a reference to the given CurrencyAmountType and assigns it to the StartAmount field.
func (o *TaxBracketAmountType) SetStartAmount(v CurrencyAmountType) {
	o.StartAmount = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *TaxBracketAmountType) GetTaxAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TaxAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketAmountType) GetTaxAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *TaxBracketAmountType) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given CurrencyAmountType and assigns it to the TaxAmount field.
func (o *TaxBracketAmountType) SetTaxAmount(v CurrencyAmountType) {
	o.TaxAmount = &v
}

func (o TaxBracketAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxBracketAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndAmount) {
		toSerialize["endAmount"] = o.EndAmount
	}
	if !IsNil(o.StartAmount) {
		toSerialize["startAmount"] = o.StartAmount
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	return toSerialize, nil
}

type NullableTaxBracketAmountType struct {
	value *TaxBracketAmountType
	isSet bool
}

func (v NullableTaxBracketAmountType) Get() *TaxBracketAmountType {
	return v.value
}

func (v *NullableTaxBracketAmountType) Set(val *TaxBracketAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxBracketAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxBracketAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxBracketAmountType(val *TaxBracketAmountType) *NullableTaxBracketAmountType {
	return &NullableTaxBracketAmountType{value: val, isSet: true}
}

func (v NullableTaxBracketAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxBracketAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


