/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the FolioReportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolioReportType{}

// FolioReportType Folio Report associated with the Folio Type Name. Includes Name Of the folio report,the Group for Folio Type Name belongs to and the Language Code for which the folio is effective.
type FolioReportType struct {
	// Language identification.
	Language *string `json:"language,omitempty"`
	ReportGroup *FolioReportGroupType `json:"reportGroup,omitempty"`
	// Name of the .REP or .RDF file. .REP or .RDF extension is not needed.
	ReportName *string `json:"reportName,omitempty"`
}

// NewFolioReportType instantiates a new FolioReportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolioReportType() *FolioReportType {
	this := FolioReportType{}
	return &this
}

// NewFolioReportTypeWithDefaults instantiates a new FolioReportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolioReportTypeWithDefaults() *FolioReportType {
	this := FolioReportType{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *FolioReportType) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioReportType) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *FolioReportType) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *FolioReportType) SetLanguage(v string) {
	o.Language = &v
}

// GetReportGroup returns the ReportGroup field value if set, zero value otherwise.
func (o *FolioReportType) GetReportGroup() FolioReportGroupType {
	if o == nil || IsNil(o.ReportGroup) {
		var ret FolioReportGroupType
		return ret
	}
	return *o.ReportGroup
}

// GetReportGroupOk returns a tuple with the ReportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioReportType) GetReportGroupOk() (*FolioReportGroupType, bool) {
	if o == nil || IsNil(o.ReportGroup) {
		return nil, false
	}
	return o.ReportGroup, true
}

// HasReportGroup returns a boolean if a field has been set.
func (o *FolioReportType) HasReportGroup() bool {
	if o != nil && !IsNil(o.ReportGroup) {
		return true
	}

	return false
}

// SetReportGroup gets a reference to the given FolioReportGroupType and assigns it to the ReportGroup field.
func (o *FolioReportType) SetReportGroup(v FolioReportGroupType) {
	o.ReportGroup = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *FolioReportType) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioReportType) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *FolioReportType) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *FolioReportType) SetReportName(v string) {
	o.ReportName = &v
}

func (o FolioReportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolioReportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.ReportGroup) {
		toSerialize["reportGroup"] = o.ReportGroup
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	return toSerialize, nil
}

type NullableFolioReportType struct {
	value *FolioReportType
	isSet bool
}

func (v NullableFolioReportType) Get() *FolioReportType {
	return v.value
}

func (v *NullableFolioReportType) Set(val *FolioReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioReportType(val *FolioReportType) *NullableFolioReportType {
	return &NullableFolioReportType{value: val, isSet: true}
}

func (v NullableFolioReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


