/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TrackItGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackItGroupType{}

// TrackItGroupType struct for TrackItGroupType
type TrackItGroupType struct {
	// Indicates if the Track It belongs to the Baggage Group.
	Baggage *bool `json:"baggage,omitempty"`
	// Indicates if the Track It belongs to the Lost Group.
	Lost *bool `json:"lost,omitempty"`
	// Indicates if the Track It belongs to the Parcel Group.
	Parcel *bool `json:"parcel,omitempty"`
	// Indicates if the Track It belongs to the Valet Group.
	Valet *bool `json:"valet,omitempty"`
}

// NewTrackItGroupType instantiates a new TrackItGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackItGroupType() *TrackItGroupType {
	this := TrackItGroupType{}
	return &this
}

// NewTrackItGroupTypeWithDefaults instantiates a new TrackItGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackItGroupTypeWithDefaults() *TrackItGroupType {
	this := TrackItGroupType{}
	return &this
}

// GetBaggage returns the Baggage field value if set, zero value otherwise.
func (o *TrackItGroupType) GetBaggage() bool {
	if o == nil || IsNil(o.Baggage) {
		var ret bool
		return ret
	}
	return *o.Baggage
}

// GetBaggageOk returns a tuple with the Baggage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItGroupType) GetBaggageOk() (*bool, bool) {
	if o == nil || IsNil(o.Baggage) {
		return nil, false
	}
	return o.Baggage, true
}

// HasBaggage returns a boolean if a field has been set.
func (o *TrackItGroupType) HasBaggage() bool {
	if o != nil && !IsNil(o.Baggage) {
		return true
	}

	return false
}

// SetBaggage gets a reference to the given bool and assigns it to the Baggage field.
func (o *TrackItGroupType) SetBaggage(v bool) {
	o.Baggage = &v
}

// GetLost returns the Lost field value if set, zero value otherwise.
func (o *TrackItGroupType) GetLost() bool {
	if o == nil || IsNil(o.Lost) {
		var ret bool
		return ret
	}
	return *o.Lost
}

// GetLostOk returns a tuple with the Lost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItGroupType) GetLostOk() (*bool, bool) {
	if o == nil || IsNil(o.Lost) {
		return nil, false
	}
	return o.Lost, true
}

// HasLost returns a boolean if a field has been set.
func (o *TrackItGroupType) HasLost() bool {
	if o != nil && !IsNil(o.Lost) {
		return true
	}

	return false
}

// SetLost gets a reference to the given bool and assigns it to the Lost field.
func (o *TrackItGroupType) SetLost(v bool) {
	o.Lost = &v
}

// GetParcel returns the Parcel field value if set, zero value otherwise.
func (o *TrackItGroupType) GetParcel() bool {
	if o == nil || IsNil(o.Parcel) {
		var ret bool
		return ret
	}
	return *o.Parcel
}

// GetParcelOk returns a tuple with the Parcel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItGroupType) GetParcelOk() (*bool, bool) {
	if o == nil || IsNil(o.Parcel) {
		return nil, false
	}
	return o.Parcel, true
}

// HasParcel returns a boolean if a field has been set.
func (o *TrackItGroupType) HasParcel() bool {
	if o != nil && !IsNil(o.Parcel) {
		return true
	}

	return false
}

// SetParcel gets a reference to the given bool and assigns it to the Parcel field.
func (o *TrackItGroupType) SetParcel(v bool) {
	o.Parcel = &v
}

// GetValet returns the Valet field value if set, zero value otherwise.
func (o *TrackItGroupType) GetValet() bool {
	if o == nil || IsNil(o.Valet) {
		var ret bool
		return ret
	}
	return *o.Valet
}

// GetValetOk returns a tuple with the Valet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItGroupType) GetValetOk() (*bool, bool) {
	if o == nil || IsNil(o.Valet) {
		return nil, false
	}
	return o.Valet, true
}

// HasValet returns a boolean if a field has been set.
func (o *TrackItGroupType) HasValet() bool {
	if o != nil && !IsNil(o.Valet) {
		return true
	}

	return false
}

// SetValet gets a reference to the given bool and assigns it to the Valet field.
func (o *TrackItGroupType) SetValet(v bool) {
	o.Valet = &v
}

func (o TrackItGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackItGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Baggage) {
		toSerialize["baggage"] = o.Baggage
	}
	if !IsNil(o.Lost) {
		toSerialize["lost"] = o.Lost
	}
	if !IsNil(o.Parcel) {
		toSerialize["parcel"] = o.Parcel
	}
	if !IsNil(o.Valet) {
		toSerialize["valet"] = o.Valet
	}
	return toSerialize, nil
}

type NullableTrackItGroupType struct {
	value *TrackItGroupType
	isSet bool
}

func (v NullableTrackItGroupType) Get() *TrackItGroupType {
	return v.value
}

func (v *NullableTrackItGroupType) Set(val *TrackItGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackItGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackItGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackItGroupType(val *TrackItGroupType) *NullableTrackItGroupType {
	return &NullableTrackItGroupType{value: val, isSet: true}
}

func (v NullableTrackItGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackItGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


