/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CopyRevenueTypeMappingListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyRevenueTypeMappingListType{}

// CopyRevenueTypeMappingListType Type used for Revenue Type mapping.
type CopyRevenueTypeMappingListType struct {
	CateringOnly *CateringOnlyType `json:"cateringOnly,omitempty"`
	EventList *CodeListType `json:"eventList,omitempty"`
	// Provides information about the Event Type.
	EventType *string `json:"eventType,omitempty"`
	// Hotel Code to which the Revenue Type Mapping belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// This flag will notify the service that transactional postings will not be returned.
	IsCateringOnly *bool `json:"isCateringOnly,omitempty"`
	// This flag will notify the service that transactional postings will not be returned.
	IsEventType *bool `json:"isEventType,omitempty"`
	// This flag will notify the service that transactional postings will not be returned.
	IsSpace *bool `json:"isSpace,omitempty"`
	// Provides information about the Revenue Type.
	RevenueType *string `json:"revenueType,omitempty"`
	RevenueTypeMappingId *UniqueIDType `json:"revenueTypeMappingId,omitempty"`
	// Service Charge for the Revenue Type.
	ServiceCharge *float32 `json:"serviceCharge,omitempty"`
	// Service Charge for the Revenue Type.
	ServiceChargeCalulationMethod *string `json:"serviceChargeCalulationMethod,omitempty"`
	// Service Charge for the Revenue Type.
	ServiceChargeTrxCode *string `json:"serviceChargeTrxCode,omitempty"`
	// Provides information about the Space/Location for the Revenue Type.
	Space *string `json:"space,omitempty"`
	SpaceList *CodeListType `json:"spaceList,omitempty"`
	// Transaction code for the Revenue Type.
	TransactionCode *string `json:"transactionCode,omitempty"`
}

// NewCopyRevenueTypeMappingListType instantiates a new CopyRevenueTypeMappingListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyRevenueTypeMappingListType() *CopyRevenueTypeMappingListType {
	this := CopyRevenueTypeMappingListType{}
	return &this
}

// NewCopyRevenueTypeMappingListTypeWithDefaults instantiates a new CopyRevenueTypeMappingListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyRevenueTypeMappingListTypeWithDefaults() *CopyRevenueTypeMappingListType {
	this := CopyRevenueTypeMappingListType{}
	return &this
}

// GetCateringOnly returns the CateringOnly field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetCateringOnly() CateringOnlyType {
	if o == nil || IsNil(o.CateringOnly) {
		var ret CateringOnlyType
		return ret
	}
	return *o.CateringOnly
}

// GetCateringOnlyOk returns a tuple with the CateringOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetCateringOnlyOk() (*CateringOnlyType, bool) {
	if o == nil || IsNil(o.CateringOnly) {
		return nil, false
	}
	return o.CateringOnly, true
}

// HasCateringOnly returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasCateringOnly() bool {
	if o != nil && !IsNil(o.CateringOnly) {
		return true
	}

	return false
}

// SetCateringOnly gets a reference to the given CateringOnlyType and assigns it to the CateringOnly field.
func (o *CopyRevenueTypeMappingListType) SetCateringOnly(v CateringOnlyType) {
	o.CateringOnly = &v
}

// GetEventList returns the EventList field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetEventList() CodeListType {
	if o == nil || IsNil(o.EventList) {
		var ret CodeListType
		return ret
	}
	return *o.EventList
}

// GetEventListOk returns a tuple with the EventList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetEventListOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.EventList) {
		return nil, false
	}
	return o.EventList, true
}

// HasEventList returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasEventList() bool {
	if o != nil && !IsNil(o.EventList) {
		return true
	}

	return false
}

// SetEventList gets a reference to the given CodeListType and assigns it to the EventList field.
func (o *CopyRevenueTypeMappingListType) SetEventList(v CodeListType) {
	o.EventList = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CopyRevenueTypeMappingListType) SetEventType(v string) {
	o.EventType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyRevenueTypeMappingListType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIsCateringOnly returns the IsCateringOnly field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetIsCateringOnly() bool {
	if o == nil || IsNil(o.IsCateringOnly) {
		var ret bool
		return ret
	}
	return *o.IsCateringOnly
}

// GetIsCateringOnlyOk returns a tuple with the IsCateringOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetIsCateringOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCateringOnly) {
		return nil, false
	}
	return o.IsCateringOnly, true
}

// HasIsCateringOnly returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasIsCateringOnly() bool {
	if o != nil && !IsNil(o.IsCateringOnly) {
		return true
	}

	return false
}

// SetIsCateringOnly gets a reference to the given bool and assigns it to the IsCateringOnly field.
func (o *CopyRevenueTypeMappingListType) SetIsCateringOnly(v bool) {
	o.IsCateringOnly = &v
}

// GetIsEventType returns the IsEventType field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetIsEventType() bool {
	if o == nil || IsNil(o.IsEventType) {
		var ret bool
		return ret
	}
	return *o.IsEventType
}

// GetIsEventTypeOk returns a tuple with the IsEventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetIsEventTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEventType) {
		return nil, false
	}
	return o.IsEventType, true
}

// HasIsEventType returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasIsEventType() bool {
	if o != nil && !IsNil(o.IsEventType) {
		return true
	}

	return false
}

// SetIsEventType gets a reference to the given bool and assigns it to the IsEventType field.
func (o *CopyRevenueTypeMappingListType) SetIsEventType(v bool) {
	o.IsEventType = &v
}

// GetIsSpace returns the IsSpace field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetIsSpace() bool {
	if o == nil || IsNil(o.IsSpace) {
		var ret bool
		return ret
	}
	return *o.IsSpace
}

// GetIsSpaceOk returns a tuple with the IsSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetIsSpaceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpace) {
		return nil, false
	}
	return o.IsSpace, true
}

// HasIsSpace returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasIsSpace() bool {
	if o != nil && !IsNil(o.IsSpace) {
		return true
	}

	return false
}

// SetIsSpace gets a reference to the given bool and assigns it to the IsSpace field.
func (o *CopyRevenueTypeMappingListType) SetIsSpace(v bool) {
	o.IsSpace = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *CopyRevenueTypeMappingListType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetRevenueTypeMappingId returns the RevenueTypeMappingId field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetRevenueTypeMappingId() UniqueIDType {
	if o == nil || IsNil(o.RevenueTypeMappingId) {
		var ret UniqueIDType
		return ret
	}
	return *o.RevenueTypeMappingId
}

// GetRevenueTypeMappingIdOk returns a tuple with the RevenueTypeMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetRevenueTypeMappingIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.RevenueTypeMappingId) {
		return nil, false
	}
	return o.RevenueTypeMappingId, true
}

// HasRevenueTypeMappingId returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasRevenueTypeMappingId() bool {
	if o != nil && !IsNil(o.RevenueTypeMappingId) {
		return true
	}

	return false
}

// SetRevenueTypeMappingId gets a reference to the given UniqueIDType and assigns it to the RevenueTypeMappingId field.
func (o *CopyRevenueTypeMappingListType) SetRevenueTypeMappingId(v UniqueIDType) {
	o.RevenueTypeMappingId = &v
}

// GetServiceCharge returns the ServiceCharge field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetServiceCharge() float32 {
	if o == nil || IsNil(o.ServiceCharge) {
		var ret float32
		return ret
	}
	return *o.ServiceCharge
}

// GetServiceChargeOk returns a tuple with the ServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetServiceChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.ServiceCharge) {
		return nil, false
	}
	return o.ServiceCharge, true
}

// HasServiceCharge returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasServiceCharge() bool {
	if o != nil && !IsNil(o.ServiceCharge) {
		return true
	}

	return false
}

// SetServiceCharge gets a reference to the given float32 and assigns it to the ServiceCharge field.
func (o *CopyRevenueTypeMappingListType) SetServiceCharge(v float32) {
	o.ServiceCharge = &v
}

// GetServiceChargeCalulationMethod returns the ServiceChargeCalulationMethod field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetServiceChargeCalulationMethod() string {
	if o == nil || IsNil(o.ServiceChargeCalulationMethod) {
		var ret string
		return ret
	}
	return *o.ServiceChargeCalulationMethod
}

// GetServiceChargeCalulationMethodOk returns a tuple with the ServiceChargeCalulationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetServiceChargeCalulationMethodOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceChargeCalulationMethod) {
		return nil, false
	}
	return o.ServiceChargeCalulationMethod, true
}

// HasServiceChargeCalulationMethod returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasServiceChargeCalulationMethod() bool {
	if o != nil && !IsNil(o.ServiceChargeCalulationMethod) {
		return true
	}

	return false
}

// SetServiceChargeCalulationMethod gets a reference to the given string and assigns it to the ServiceChargeCalulationMethod field.
func (o *CopyRevenueTypeMappingListType) SetServiceChargeCalulationMethod(v string) {
	o.ServiceChargeCalulationMethod = &v
}

// GetServiceChargeTrxCode returns the ServiceChargeTrxCode field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetServiceChargeTrxCode() string {
	if o == nil || IsNil(o.ServiceChargeTrxCode) {
		var ret string
		return ret
	}
	return *o.ServiceChargeTrxCode
}

// GetServiceChargeTrxCodeOk returns a tuple with the ServiceChargeTrxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetServiceChargeTrxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceChargeTrxCode) {
		return nil, false
	}
	return o.ServiceChargeTrxCode, true
}

// HasServiceChargeTrxCode returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasServiceChargeTrxCode() bool {
	if o != nil && !IsNil(o.ServiceChargeTrxCode) {
		return true
	}

	return false
}

// SetServiceChargeTrxCode gets a reference to the given string and assigns it to the ServiceChargeTrxCode field.
func (o *CopyRevenueTypeMappingListType) SetServiceChargeTrxCode(v string) {
	o.ServiceChargeTrxCode = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetSpace() string {
	if o == nil || IsNil(o.Space) {
		var ret string
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given string and assigns it to the Space field.
func (o *CopyRevenueTypeMappingListType) SetSpace(v string) {
	o.Space = &v
}

// GetSpaceList returns the SpaceList field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetSpaceList() CodeListType {
	if o == nil || IsNil(o.SpaceList) {
		var ret CodeListType
		return ret
	}
	return *o.SpaceList
}

// GetSpaceListOk returns a tuple with the SpaceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetSpaceListOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.SpaceList) {
		return nil, false
	}
	return o.SpaceList, true
}

// HasSpaceList returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasSpaceList() bool {
	if o != nil && !IsNil(o.SpaceList) {
		return true
	}

	return false
}

// SetSpaceList gets a reference to the given CodeListType and assigns it to the SpaceList field.
func (o *CopyRevenueTypeMappingListType) SetSpaceList(v CodeListType) {
	o.SpaceList = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CopyRevenueTypeMappingListType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRevenueTypeMappingListType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CopyRevenueTypeMappingListType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CopyRevenueTypeMappingListType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

func (o CopyRevenueTypeMappingListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyRevenueTypeMappingListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CateringOnly) {
		toSerialize["cateringOnly"] = o.CateringOnly
	}
	if !IsNil(o.EventList) {
		toSerialize["eventList"] = o.EventList
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IsCateringOnly) {
		toSerialize["isCateringOnly"] = o.IsCateringOnly
	}
	if !IsNil(o.IsEventType) {
		toSerialize["isEventType"] = o.IsEventType
	}
	if !IsNil(o.IsSpace) {
		toSerialize["isSpace"] = o.IsSpace
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.RevenueTypeMappingId) {
		toSerialize["revenueTypeMappingId"] = o.RevenueTypeMappingId
	}
	if !IsNil(o.ServiceCharge) {
		toSerialize["serviceCharge"] = o.ServiceCharge
	}
	if !IsNil(o.ServiceChargeCalulationMethod) {
		toSerialize["serviceChargeCalulationMethod"] = o.ServiceChargeCalulationMethod
	}
	if !IsNil(o.ServiceChargeTrxCode) {
		toSerialize["serviceChargeTrxCode"] = o.ServiceChargeTrxCode
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.SpaceList) {
		toSerialize["spaceList"] = o.SpaceList
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	return toSerialize, nil
}

type NullableCopyRevenueTypeMappingListType struct {
	value *CopyRevenueTypeMappingListType
	isSet bool
}

func (v NullableCopyRevenueTypeMappingListType) Get() *CopyRevenueTypeMappingListType {
	return v.value
}

func (v *NullableCopyRevenueTypeMappingListType) Set(val *CopyRevenueTypeMappingListType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyRevenueTypeMappingListType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyRevenueTypeMappingListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyRevenueTypeMappingListType(val *CopyRevenueTypeMappingListType) *NullableCopyRevenueTypeMappingListType {
	return &NullableCopyRevenueTypeMappingListType{value: val, isSet: true}
}

func (v NullableCopyRevenueTypeMappingListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyRevenueTypeMappingListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


