/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TransactionCodeInformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCodeInformationType{}

// TransactionCodeInformationType Budget Forecast information for Transaction segment code.
type TransactionCodeInformationType struct {
	ABVarianceInfo *TransactionVarianceInfoType `json:"aBVarianceInfo,omitempty"`
	AFVarianceInfo *TransactionVarianceInfoType `json:"aFVarianceInfo,omitempty"`
	ActualInfo *TransactionInfoType `json:"actualInfo,omitempty"`
	BudgetInfo *TransactionInfoType `json:"budgetInfo,omitempty"`
	FBVarianceInfo *TransactionVarianceInfoType `json:"fBVarianceInfo,omitempty"`
	ForecastInfo *TransactionInfoType `json:"forecastInfo,omitempty"`
	// Transaction code for which budget forecast information is fetched.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Transaction code description for Transaction code.
	TransactionCodeDescription *string `json:"transactionCodeDescription,omitempty"`
	// Transaction code group of segment code.
	TransactionCodeGrp *string `json:"transactionCodeGrp,omitempty"`
}

// NewTransactionCodeInformationType instantiates a new TransactionCodeInformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCodeInformationType() *TransactionCodeInformationType {
	this := TransactionCodeInformationType{}
	return &this
}

// NewTransactionCodeInformationTypeWithDefaults instantiates a new TransactionCodeInformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCodeInformationTypeWithDefaults() *TransactionCodeInformationType {
	this := TransactionCodeInformationType{}
	return &this
}

// GetABVarianceInfo returns the ABVarianceInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetABVarianceInfo() TransactionVarianceInfoType {
	if o == nil || IsNil(o.ABVarianceInfo) {
		var ret TransactionVarianceInfoType
		return ret
	}
	return *o.ABVarianceInfo
}

// GetABVarianceInfoOk returns a tuple with the ABVarianceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetABVarianceInfoOk() (*TransactionVarianceInfoType, bool) {
	if o == nil || IsNil(o.ABVarianceInfo) {
		return nil, false
	}
	return o.ABVarianceInfo, true
}

// HasABVarianceInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasABVarianceInfo() bool {
	if o != nil && !IsNil(o.ABVarianceInfo) {
		return true
	}

	return false
}

// SetABVarianceInfo gets a reference to the given TransactionVarianceInfoType and assigns it to the ABVarianceInfo field.
func (o *TransactionCodeInformationType) SetABVarianceInfo(v TransactionVarianceInfoType) {
	o.ABVarianceInfo = &v
}

// GetAFVarianceInfo returns the AFVarianceInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetAFVarianceInfo() TransactionVarianceInfoType {
	if o == nil || IsNil(o.AFVarianceInfo) {
		var ret TransactionVarianceInfoType
		return ret
	}
	return *o.AFVarianceInfo
}

// GetAFVarianceInfoOk returns a tuple with the AFVarianceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetAFVarianceInfoOk() (*TransactionVarianceInfoType, bool) {
	if o == nil || IsNil(o.AFVarianceInfo) {
		return nil, false
	}
	return o.AFVarianceInfo, true
}

// HasAFVarianceInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasAFVarianceInfo() bool {
	if o != nil && !IsNil(o.AFVarianceInfo) {
		return true
	}

	return false
}

// SetAFVarianceInfo gets a reference to the given TransactionVarianceInfoType and assigns it to the AFVarianceInfo field.
func (o *TransactionCodeInformationType) SetAFVarianceInfo(v TransactionVarianceInfoType) {
	o.AFVarianceInfo = &v
}

// GetActualInfo returns the ActualInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetActualInfo() TransactionInfoType {
	if o == nil || IsNil(o.ActualInfo) {
		var ret TransactionInfoType
		return ret
	}
	return *o.ActualInfo
}

// GetActualInfoOk returns a tuple with the ActualInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetActualInfoOk() (*TransactionInfoType, bool) {
	if o == nil || IsNil(o.ActualInfo) {
		return nil, false
	}
	return o.ActualInfo, true
}

// HasActualInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasActualInfo() bool {
	if o != nil && !IsNil(o.ActualInfo) {
		return true
	}

	return false
}

// SetActualInfo gets a reference to the given TransactionInfoType and assigns it to the ActualInfo field.
func (o *TransactionCodeInformationType) SetActualInfo(v TransactionInfoType) {
	o.ActualInfo = &v
}

// GetBudgetInfo returns the BudgetInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetBudgetInfo() TransactionInfoType {
	if o == nil || IsNil(o.BudgetInfo) {
		var ret TransactionInfoType
		return ret
	}
	return *o.BudgetInfo
}

// GetBudgetInfoOk returns a tuple with the BudgetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetBudgetInfoOk() (*TransactionInfoType, bool) {
	if o == nil || IsNil(o.BudgetInfo) {
		return nil, false
	}
	return o.BudgetInfo, true
}

// HasBudgetInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasBudgetInfo() bool {
	if o != nil && !IsNil(o.BudgetInfo) {
		return true
	}

	return false
}

// SetBudgetInfo gets a reference to the given TransactionInfoType and assigns it to the BudgetInfo field.
func (o *TransactionCodeInformationType) SetBudgetInfo(v TransactionInfoType) {
	o.BudgetInfo = &v
}

// GetFBVarianceInfo returns the FBVarianceInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetFBVarianceInfo() TransactionVarianceInfoType {
	if o == nil || IsNil(o.FBVarianceInfo) {
		var ret TransactionVarianceInfoType
		return ret
	}
	return *o.FBVarianceInfo
}

// GetFBVarianceInfoOk returns a tuple with the FBVarianceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetFBVarianceInfoOk() (*TransactionVarianceInfoType, bool) {
	if o == nil || IsNil(o.FBVarianceInfo) {
		return nil, false
	}
	return o.FBVarianceInfo, true
}

// HasFBVarianceInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasFBVarianceInfo() bool {
	if o != nil && !IsNil(o.FBVarianceInfo) {
		return true
	}

	return false
}

// SetFBVarianceInfo gets a reference to the given TransactionVarianceInfoType and assigns it to the FBVarianceInfo field.
func (o *TransactionCodeInformationType) SetFBVarianceInfo(v TransactionVarianceInfoType) {
	o.FBVarianceInfo = &v
}

// GetForecastInfo returns the ForecastInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetForecastInfo() TransactionInfoType {
	if o == nil || IsNil(o.ForecastInfo) {
		var ret TransactionInfoType
		return ret
	}
	return *o.ForecastInfo
}

// GetForecastInfoOk returns a tuple with the ForecastInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetForecastInfoOk() (*TransactionInfoType, bool) {
	if o == nil || IsNil(o.ForecastInfo) {
		return nil, false
	}
	return o.ForecastInfo, true
}

// HasForecastInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasForecastInfo() bool {
	if o != nil && !IsNil(o.ForecastInfo) {
		return true
	}

	return false
}

// SetForecastInfo gets a reference to the given TransactionInfoType and assigns it to the ForecastInfo field.
func (o *TransactionCodeInformationType) SetForecastInfo(v TransactionInfoType) {
	o.ForecastInfo = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *TransactionCodeInformationType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionCodeDescription returns the TransactionCodeDescription field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetTransactionCodeDescription() string {
	if o == nil || IsNil(o.TransactionCodeDescription) {
		var ret string
		return ret
	}
	return *o.TransactionCodeDescription
}

// GetTransactionCodeDescriptionOk returns a tuple with the TransactionCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetTransactionCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCodeDescription) {
		return nil, false
	}
	return o.TransactionCodeDescription, true
}

// HasTransactionCodeDescription returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasTransactionCodeDescription() bool {
	if o != nil && !IsNil(o.TransactionCodeDescription) {
		return true
	}

	return false
}

// SetTransactionCodeDescription gets a reference to the given string and assigns it to the TransactionCodeDescription field.
func (o *TransactionCodeInformationType) SetTransactionCodeDescription(v string) {
	o.TransactionCodeDescription = &v
}

// GetTransactionCodeGrp returns the TransactionCodeGrp field value if set, zero value otherwise.
func (o *TransactionCodeInformationType) GetTransactionCodeGrp() string {
	if o == nil || IsNil(o.TransactionCodeGrp) {
		var ret string
		return ret
	}
	return *o.TransactionCodeGrp
}

// GetTransactionCodeGrpOk returns a tuple with the TransactionCodeGrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationType) GetTransactionCodeGrpOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCodeGrp) {
		return nil, false
	}
	return o.TransactionCodeGrp, true
}

// HasTransactionCodeGrp returns a boolean if a field has been set.
func (o *TransactionCodeInformationType) HasTransactionCodeGrp() bool {
	if o != nil && !IsNil(o.TransactionCodeGrp) {
		return true
	}

	return false
}

// SetTransactionCodeGrp gets a reference to the given string and assigns it to the TransactionCodeGrp field.
func (o *TransactionCodeInformationType) SetTransactionCodeGrp(v string) {
	o.TransactionCodeGrp = &v
}

func (o TransactionCodeInformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCodeInformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ABVarianceInfo) {
		toSerialize["aBVarianceInfo"] = o.ABVarianceInfo
	}
	if !IsNil(o.AFVarianceInfo) {
		toSerialize["aFVarianceInfo"] = o.AFVarianceInfo
	}
	if !IsNil(o.ActualInfo) {
		toSerialize["actualInfo"] = o.ActualInfo
	}
	if !IsNil(o.BudgetInfo) {
		toSerialize["budgetInfo"] = o.BudgetInfo
	}
	if !IsNil(o.FBVarianceInfo) {
		toSerialize["fBVarianceInfo"] = o.FBVarianceInfo
	}
	if !IsNil(o.ForecastInfo) {
		toSerialize["forecastInfo"] = o.ForecastInfo
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionCodeDescription) {
		toSerialize["transactionCodeDescription"] = o.TransactionCodeDescription
	}
	if !IsNil(o.TransactionCodeGrp) {
		toSerialize["transactionCodeGrp"] = o.TransactionCodeGrp
	}
	return toSerialize, nil
}

type NullableTransactionCodeInformationType struct {
	value *TransactionCodeInformationType
	isSet bool
}

func (v NullableTransactionCodeInformationType) Get() *TransactionCodeInformationType {
	return v.value
}

func (v *NullableTransactionCodeInformationType) Set(val *TransactionCodeInformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCodeInformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCodeInformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCodeInformationType(val *TransactionCodeInformationType) *NullableTransactionCodeInformationType {
	return &NullableTransactionCodeInformationType{value: val, isSet: true}
}

func (v NullableTransactionCodeInformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCodeInformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


