/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ARPaymentType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARPaymentType{}

// ARPaymentType Details of an AR Payment.
type ARPaymentType struct {
	// The Aging age of the payment.
	Age *int32 `json:"age,omitempty"`
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	AmountUsed *CurrencyAmountType `json:"amountUsed,omitempty"`
	Balance *CurrencyAmountType `json:"balance,omitempty"`
	CashierInfo *CashierInfoType `json:"cashierInfo,omitempty"`
	// Property code.
	HotelId *string `json:"hotelId,omitempty"`
	PaymentCard *ResPaymentCardType `json:"paymentCard,omitempty"`
	// Posting date of the invoice.
	PostingDate *string `json:"postingDate,omitempty"`
	// User-defined posting reference.
	Reference *string `json:"reference,omitempty"`
	// User-defined posting remark.
	Remark *string `json:"remark,omitempty"`
	// Revenue date ID of the invoice.
	RevenueDate *string `json:"revenueDate,omitempty"`
	// When this PostingType is used to return the postings generated by a batch request, the sequence number is used to relate to the Request's sequence number.
	SequenceNo *int32 `json:"sequenceNo,omitempty"`
	// Transaction code of the Payment.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Date of the Payment.
	TransactionDate *string `json:"transactionDate,omitempty"`
	// Unique Transaction Identifier of the Payment.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
	// Transfer of the invoice.
	TransferDate *string `json:"transferDate,omitempty"`
	TransferredIn *bool `json:"transferredIn,omitempty"`
	TransferredOut *bool `json:"transferredOut,omitempty"`
}

// NewARPaymentType instantiates a new ARPaymentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARPaymentType() *ARPaymentType {
	this := ARPaymentType{}
	return &this
}

// NewARPaymentTypeWithDefaults instantiates a new ARPaymentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARPaymentTypeWithDefaults() *ARPaymentType {
	this := ARPaymentType{}
	return &this
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *ARPaymentType) GetAge() int32 {
	if o == nil || IsNil(o.Age) {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *ARPaymentType) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *ARPaymentType) SetAge(v int32) {
	o.Age = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ARPaymentType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ARPaymentType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *ARPaymentType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetAmountUsed returns the AmountUsed field value if set, zero value otherwise.
func (o *ARPaymentType) GetAmountUsed() CurrencyAmountType {
	if o == nil || IsNil(o.AmountUsed) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AmountUsed
}

// GetAmountUsedOk returns a tuple with the AmountUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetAmountUsedOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AmountUsed) {
		return nil, false
	}
	return o.AmountUsed, true
}

// HasAmountUsed returns a boolean if a field has been set.
func (o *ARPaymentType) HasAmountUsed() bool {
	if o != nil && !IsNil(o.AmountUsed) {
		return true
	}

	return false
}

// SetAmountUsed gets a reference to the given CurrencyAmountType and assigns it to the AmountUsed field.
func (o *ARPaymentType) SetAmountUsed(v CurrencyAmountType) {
	o.AmountUsed = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *ARPaymentType) GetBalance() CurrencyAmountType {
	if o == nil || IsNil(o.Balance) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetBalanceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *ARPaymentType) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given CurrencyAmountType and assigns it to the Balance field.
func (o *ARPaymentType) SetBalance(v CurrencyAmountType) {
	o.Balance = &v
}

// GetCashierInfo returns the CashierInfo field value if set, zero value otherwise.
func (o *ARPaymentType) GetCashierInfo() CashierInfoType {
	if o == nil || IsNil(o.CashierInfo) {
		var ret CashierInfoType
		return ret
	}
	return *o.CashierInfo
}

// GetCashierInfoOk returns a tuple with the CashierInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetCashierInfoOk() (*CashierInfoType, bool) {
	if o == nil || IsNil(o.CashierInfo) {
		return nil, false
	}
	return o.CashierInfo, true
}

// HasCashierInfo returns a boolean if a field has been set.
func (o *ARPaymentType) HasCashierInfo() bool {
	if o != nil && !IsNil(o.CashierInfo) {
		return true
	}

	return false
}

// SetCashierInfo gets a reference to the given CashierInfoType and assigns it to the CashierInfo field.
func (o *ARPaymentType) SetCashierInfo(v CashierInfoType) {
	o.CashierInfo = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARPaymentType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARPaymentType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARPaymentType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPaymentCard returns the PaymentCard field value if set, zero value otherwise.
func (o *ARPaymentType) GetPaymentCard() ResPaymentCardType {
	if o == nil || IsNil(o.PaymentCard) {
		var ret ResPaymentCardType
		return ret
	}
	return *o.PaymentCard
}

// GetPaymentCardOk returns a tuple with the PaymentCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetPaymentCardOk() (*ResPaymentCardType, bool) {
	if o == nil || IsNil(o.PaymentCard) {
		return nil, false
	}
	return o.PaymentCard, true
}

// HasPaymentCard returns a boolean if a field has been set.
func (o *ARPaymentType) HasPaymentCard() bool {
	if o != nil && !IsNil(o.PaymentCard) {
		return true
	}

	return false
}

// SetPaymentCard gets a reference to the given ResPaymentCardType and assigns it to the PaymentCard field.
func (o *ARPaymentType) SetPaymentCard(v ResPaymentCardType) {
	o.PaymentCard = &v
}

// GetPostingDate returns the PostingDate field value if set, zero value otherwise.
func (o *ARPaymentType) GetPostingDate() string {
	if o == nil || IsNil(o.PostingDate) {
		var ret string
		return ret
	}
	return *o.PostingDate
}

// GetPostingDateOk returns a tuple with the PostingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetPostingDateOk() (*string, bool) {
	if o == nil || IsNil(o.PostingDate) {
		return nil, false
	}
	return o.PostingDate, true
}

// HasPostingDate returns a boolean if a field has been set.
func (o *ARPaymentType) HasPostingDate() bool {
	if o != nil && !IsNil(o.PostingDate) {
		return true
	}

	return false
}

// SetPostingDate gets a reference to the given string and assigns it to the PostingDate field.
func (o *ARPaymentType) SetPostingDate(v string) {
	o.PostingDate = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ARPaymentType) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ARPaymentType) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ARPaymentType) SetReference(v string) {
	o.Reference = &v
}

// GetRemark returns the Remark field value if set, zero value otherwise.
func (o *ARPaymentType) GetRemark() string {
	if o == nil || IsNil(o.Remark) {
		var ret string
		return ret
	}
	return *o.Remark
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.Remark) {
		return nil, false
	}
	return o.Remark, true
}

// HasRemark returns a boolean if a field has been set.
func (o *ARPaymentType) HasRemark() bool {
	if o != nil && !IsNil(o.Remark) {
		return true
	}

	return false
}

// SetRemark gets a reference to the given string and assigns it to the Remark field.
func (o *ARPaymentType) SetRemark(v string) {
	o.Remark = &v
}

// GetRevenueDate returns the RevenueDate field value if set, zero value otherwise.
func (o *ARPaymentType) GetRevenueDate() string {
	if o == nil || IsNil(o.RevenueDate) {
		var ret string
		return ret
	}
	return *o.RevenueDate
}

// GetRevenueDateOk returns a tuple with the RevenueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetRevenueDateOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueDate) {
		return nil, false
	}
	return o.RevenueDate, true
}

// HasRevenueDate returns a boolean if a field has been set.
func (o *ARPaymentType) HasRevenueDate() bool {
	if o != nil && !IsNil(o.RevenueDate) {
		return true
	}

	return false
}

// SetRevenueDate gets a reference to the given string and assigns it to the RevenueDate field.
func (o *ARPaymentType) SetRevenueDate(v string) {
	o.RevenueDate = &v
}

// GetSequenceNo returns the SequenceNo field value if set, zero value otherwise.
func (o *ARPaymentType) GetSequenceNo() int32 {
	if o == nil || IsNil(o.SequenceNo) {
		var ret int32
		return ret
	}
	return *o.SequenceNo
}

// GetSequenceNoOk returns a tuple with the SequenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetSequenceNoOk() (*int32, bool) {
	if o == nil || IsNil(o.SequenceNo) {
		return nil, false
	}
	return o.SequenceNo, true
}

// HasSequenceNo returns a boolean if a field has been set.
func (o *ARPaymentType) HasSequenceNo() bool {
	if o != nil && !IsNil(o.SequenceNo) {
		return true
	}

	return false
}

// SetSequenceNo gets a reference to the given int32 and assigns it to the SequenceNo field.
func (o *ARPaymentType) SetSequenceNo(v int32) {
	o.SequenceNo = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *ARPaymentType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *ARPaymentType) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *ARPaymentType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

// GetTransferDate returns the TransferDate field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransferDate() string {
	if o == nil || IsNil(o.TransferDate) {
		var ret string
		return ret
	}
	return *o.TransferDate
}

// GetTransferDateOk returns a tuple with the TransferDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransferDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransferDate) {
		return nil, false
	}
	return o.TransferDate, true
}

// HasTransferDate returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransferDate() bool {
	if o != nil && !IsNil(o.TransferDate) {
		return true
	}

	return false
}

// SetTransferDate gets a reference to the given string and assigns it to the TransferDate field.
func (o *ARPaymentType) SetTransferDate(v string) {
	o.TransferDate = &v
}

// GetTransferredIn returns the TransferredIn field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransferredIn() bool {
	if o == nil || IsNil(o.TransferredIn) {
		var ret bool
		return ret
	}
	return *o.TransferredIn
}

// GetTransferredInOk returns a tuple with the TransferredIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransferredInOk() (*bool, bool) {
	if o == nil || IsNil(o.TransferredIn) {
		return nil, false
	}
	return o.TransferredIn, true
}

// HasTransferredIn returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransferredIn() bool {
	if o != nil && !IsNil(o.TransferredIn) {
		return true
	}

	return false
}

// SetTransferredIn gets a reference to the given bool and assigns it to the TransferredIn field.
func (o *ARPaymentType) SetTransferredIn(v bool) {
	o.TransferredIn = &v
}

// GetTransferredOut returns the TransferredOut field value if set, zero value otherwise.
func (o *ARPaymentType) GetTransferredOut() bool {
	if o == nil || IsNil(o.TransferredOut) {
		var ret bool
		return ret
	}
	return *o.TransferredOut
}

// GetTransferredOutOk returns a tuple with the TransferredOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARPaymentType) GetTransferredOutOk() (*bool, bool) {
	if o == nil || IsNil(o.TransferredOut) {
		return nil, false
	}
	return o.TransferredOut, true
}

// HasTransferredOut returns a boolean if a field has been set.
func (o *ARPaymentType) HasTransferredOut() bool {
	if o != nil && !IsNil(o.TransferredOut) {
		return true
	}

	return false
}

// SetTransferredOut gets a reference to the given bool and assigns it to the TransferredOut field.
func (o *ARPaymentType) SetTransferredOut(v bool) {
	o.TransferredOut = &v
}

func (o ARPaymentType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARPaymentType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountUsed) {
		toSerialize["amountUsed"] = o.AmountUsed
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.CashierInfo) {
		toSerialize["cashierInfo"] = o.CashierInfo
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PaymentCard) {
		toSerialize["paymentCard"] = o.PaymentCard
	}
	if !IsNil(o.PostingDate) {
		toSerialize["postingDate"] = o.PostingDate
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Remark) {
		toSerialize["remark"] = o.Remark
	}
	if !IsNil(o.RevenueDate) {
		toSerialize["revenueDate"] = o.RevenueDate
	}
	if !IsNil(o.SequenceNo) {
		toSerialize["sequenceNo"] = o.SequenceNo
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	if !IsNil(o.TransferDate) {
		toSerialize["transferDate"] = o.TransferDate
	}
	if !IsNil(o.TransferredIn) {
		toSerialize["transferredIn"] = o.TransferredIn
	}
	if !IsNil(o.TransferredOut) {
		toSerialize["transferredOut"] = o.TransferredOut
	}
	return toSerialize, nil
}

type NullableARPaymentType struct {
	value *ARPaymentType
	isSet bool
}

func (v NullableARPaymentType) Get() *ARPaymentType {
	return v.value
}

func (v *NullableARPaymentType) Set(val *ARPaymentType) {
	v.value = val
	v.isSet = true
}

func (v NullableARPaymentType) IsSet() bool {
	return v.isSet
}

func (v *NullableARPaymentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARPaymentType(val *ARPaymentType) *NullableARPaymentType {
	return &NullableARPaymentType{value: val, isSet: true}
}

func (v NullableARPaymentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARPaymentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


