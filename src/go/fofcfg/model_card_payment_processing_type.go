/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CardPaymentProcessingType Manual Processing.
type CardPaymentProcessingType string

// List of cardPaymentProcessingType
const (
	CARDPAYMENTPROCESSINGTYPE_EFT CardPaymentProcessingType = "Eft"
	CARDPAYMENTPROCESSINGTYPE_MANUAL CardPaymentProcessingType = "Manual"
)

// All allowed values of CardPaymentProcessingType enum
var AllowedCardPaymentProcessingTypeEnumValues = []CardPaymentProcessingType{
	"Eft",
	"Manual",
}

func (v *CardPaymentProcessingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardPaymentProcessingType(value)
	for _, existing := range AllowedCardPaymentProcessingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardPaymentProcessingType", value)
}

// NewCardPaymentProcessingTypeFromValue returns a pointer to a valid CardPaymentProcessingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardPaymentProcessingTypeFromValue(v string) (*CardPaymentProcessingType, error) {
	ev := CardPaymentProcessingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardPaymentProcessingType: valid values are %v", v, AllowedCardPaymentProcessingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardPaymentProcessingType) IsValid() bool {
	for _, existing := range AllowedCardPaymentProcessingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cardPaymentProcessingType value
func (v CardPaymentProcessingType) Ptr() *CardPaymentProcessingType {
	return &v
}

type NullableCardPaymentProcessingType struct {
	value *CardPaymentProcessingType
	isSet bool
}

func (v NullableCardPaymentProcessingType) Get() *CardPaymentProcessingType {
	return v.value
}

func (v *NullableCardPaymentProcessingType) Set(val *CardPaymentProcessingType) {
	v.value = val
	v.isSet = true
}

func (v NullableCardPaymentProcessingType) IsSet() bool {
	return v.isSet
}

func (v *NullableCardPaymentProcessingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardPaymentProcessingType(val *CardPaymentProcessingType) *NullableCardPaymentProcessingType {
	return &NullableCardPaymentProcessingType{value: val, isSet: true}
}

func (v NullableCardPaymentProcessingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardPaymentProcessingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

