/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// AmountOrPercentage Adjustment Code calculation type based on details.
type AmountOrPercentage string

// List of amountOrPercentage
const (
	AMOUNTORPERCENTAGE_AMOUNT AmountOrPercentage = "Amount"
	AMOUNTORPERCENTAGE_PERCENT AmountOrPercentage = "Percent"
)

// All allowed values of AmountOrPercentage enum
var AllowedAmountOrPercentageEnumValues = []AmountOrPercentage{
	"Amount",
	"Percent",
}

func (v *AmountOrPercentage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmountOrPercentage(value)
	for _, existing := range AllowedAmountOrPercentageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AmountOrPercentage", value)
}

// NewAmountOrPercentageFromValue returns a pointer to a valid AmountOrPercentage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmountOrPercentageFromValue(v string) (*AmountOrPercentage, error) {
	ev := AmountOrPercentage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmountOrPercentage: valid values are %v", v, AllowedAmountOrPercentageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmountOrPercentage) IsValid() bool {
	for _, existing := range AllowedAmountOrPercentageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to amountOrPercentage value
func (v AmountOrPercentage) Ptr() *AmountOrPercentage {
	return &v
}

type NullableAmountOrPercentage struct {
	value *AmountOrPercentage
	isSet bool
}

func (v NullableAmountOrPercentage) Get() *AmountOrPercentage {
	return v.value
}

func (v *NullableAmountOrPercentage) Set(val *AmountOrPercentage) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountOrPercentage) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountOrPercentage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountOrPercentage(val *AmountOrPercentage) *NullableAmountOrPercentage {
	return &NullableAmountOrPercentage{value: val, isSet: true}
}

func (v NullableAmountOrPercentage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountOrPercentage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

