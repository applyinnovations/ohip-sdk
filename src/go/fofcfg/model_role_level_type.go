/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// RoleLevelType the model 'RoleLevelType'
type RoleLevelType string

// List of roleLevelType
const (
	ROLELEVELTYPE_GLOBAL RoleLevelType = "Global"
	ROLELEVELTYPE_TEMPLATE RoleLevelType = "Template"
	ROLELEVELTYPE_CHAIN RoleLevelType = "Chain"
	ROLELEVELTYPE_BRAND RoleLevelType = "Brand"
	ROLELEVELTYPE_PROPERTY RoleLevelType = "Property"
)

// All allowed values of RoleLevelType enum
var AllowedRoleLevelTypeEnumValues = []RoleLevelType{
	"Global",
	"Template",
	"Chain",
	"Brand",
	"Property",
}

func (v *RoleLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleLevelType(value)
	for _, existing := range AllowedRoleLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleLevelType", value)
}

// NewRoleLevelTypeFromValue returns a pointer to a valid RoleLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleLevelTypeFromValue(v string) (*RoleLevelType, error) {
	ev := RoleLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleLevelType: valid values are %v", v, AllowedRoleLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleLevelType) IsValid() bool {
	for _, existing := range AllowedRoleLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roleLevelType value
func (v RoleLevelType) Ptr() *RoleLevelType {
	return &v
}

type NullableRoleLevelType struct {
	value *RoleLevelType
	isSet bool
}

func (v NullableRoleLevelType) Get() *RoleLevelType {
	return v.value
}

func (v *NullableRoleLevelType) Set(val *RoleLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleLevelType(val *RoleLevelType) *NullableRoleLevelType {
	return &NullableRoleLevelType{value: val, isSet: true}
}

func (v NullableRoleLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

