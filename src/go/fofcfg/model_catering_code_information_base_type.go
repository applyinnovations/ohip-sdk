/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CateringCodeInformationBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringCodeInformationBaseType{}

// CateringCodeInformationBaseType Budget Forecast information for Catering segment code.
type CateringCodeInformationBaseType struct {
	BudgetInfo *CateringInfoType `json:"budgetInfo,omitempty"`
	// Catering segment code for which budget forecast information is fetched.
	CateringCode *string `json:"cateringCode,omitempty"`
	// Catering code description for segment code.
	CateringCodeDescription *string `json:"cateringCodeDescription,omitempty"`
	// Catering code group of segment code.
	CateringCodeGrp *string `json:"cateringCodeGrp,omitempty"`
	ForecastInfo *CateringInfoType `json:"forecastInfo,omitempty"`
}

// NewCateringCodeInformationBaseType instantiates a new CateringCodeInformationBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringCodeInformationBaseType() *CateringCodeInformationBaseType {
	this := CateringCodeInformationBaseType{}
	return &this
}

// NewCateringCodeInformationBaseTypeWithDefaults instantiates a new CateringCodeInformationBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringCodeInformationBaseTypeWithDefaults() *CateringCodeInformationBaseType {
	this := CateringCodeInformationBaseType{}
	return &this
}

// GetBudgetInfo returns the BudgetInfo field value if set, zero value otherwise.
func (o *CateringCodeInformationBaseType) GetBudgetInfo() CateringInfoType {
	if o == nil || IsNil(o.BudgetInfo) {
		var ret CateringInfoType
		return ret
	}
	return *o.BudgetInfo
}

// GetBudgetInfoOk returns a tuple with the BudgetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeInformationBaseType) GetBudgetInfoOk() (*CateringInfoType, bool) {
	if o == nil || IsNil(o.BudgetInfo) {
		return nil, false
	}
	return o.BudgetInfo, true
}

// HasBudgetInfo returns a boolean if a field has been set.
func (o *CateringCodeInformationBaseType) HasBudgetInfo() bool {
	if o != nil && !IsNil(o.BudgetInfo) {
		return true
	}

	return false
}

// SetBudgetInfo gets a reference to the given CateringInfoType and assigns it to the BudgetInfo field.
func (o *CateringCodeInformationBaseType) SetBudgetInfo(v CateringInfoType) {
	o.BudgetInfo = &v
}

// GetCateringCode returns the CateringCode field value if set, zero value otherwise.
func (o *CateringCodeInformationBaseType) GetCateringCode() string {
	if o == nil || IsNil(o.CateringCode) {
		var ret string
		return ret
	}
	return *o.CateringCode
}

// GetCateringCodeOk returns a tuple with the CateringCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeInformationBaseType) GetCateringCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CateringCode) {
		return nil, false
	}
	return o.CateringCode, true
}

// HasCateringCode returns a boolean if a field has been set.
func (o *CateringCodeInformationBaseType) HasCateringCode() bool {
	if o != nil && !IsNil(o.CateringCode) {
		return true
	}

	return false
}

// SetCateringCode gets a reference to the given string and assigns it to the CateringCode field.
func (o *CateringCodeInformationBaseType) SetCateringCode(v string) {
	o.CateringCode = &v
}

// GetCateringCodeDescription returns the CateringCodeDescription field value if set, zero value otherwise.
func (o *CateringCodeInformationBaseType) GetCateringCodeDescription() string {
	if o == nil || IsNil(o.CateringCodeDescription) {
		var ret string
		return ret
	}
	return *o.CateringCodeDescription
}

// GetCateringCodeDescriptionOk returns a tuple with the CateringCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeInformationBaseType) GetCateringCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CateringCodeDescription) {
		return nil, false
	}
	return o.CateringCodeDescription, true
}

// HasCateringCodeDescription returns a boolean if a field has been set.
func (o *CateringCodeInformationBaseType) HasCateringCodeDescription() bool {
	if o != nil && !IsNil(o.CateringCodeDescription) {
		return true
	}

	return false
}

// SetCateringCodeDescription gets a reference to the given string and assigns it to the CateringCodeDescription field.
func (o *CateringCodeInformationBaseType) SetCateringCodeDescription(v string) {
	o.CateringCodeDescription = &v
}

// GetCateringCodeGrp returns the CateringCodeGrp field value if set, zero value otherwise.
func (o *CateringCodeInformationBaseType) GetCateringCodeGrp() string {
	if o == nil || IsNil(o.CateringCodeGrp) {
		var ret string
		return ret
	}
	return *o.CateringCodeGrp
}

// GetCateringCodeGrpOk returns a tuple with the CateringCodeGrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeInformationBaseType) GetCateringCodeGrpOk() (*string, bool) {
	if o == nil || IsNil(o.CateringCodeGrp) {
		return nil, false
	}
	return o.CateringCodeGrp, true
}

// HasCateringCodeGrp returns a boolean if a field has been set.
func (o *CateringCodeInformationBaseType) HasCateringCodeGrp() bool {
	if o != nil && !IsNil(o.CateringCodeGrp) {
		return true
	}

	return false
}

// SetCateringCodeGrp gets a reference to the given string and assigns it to the CateringCodeGrp field.
func (o *CateringCodeInformationBaseType) SetCateringCodeGrp(v string) {
	o.CateringCodeGrp = &v
}

// GetForecastInfo returns the ForecastInfo field value if set, zero value otherwise.
func (o *CateringCodeInformationBaseType) GetForecastInfo() CateringInfoType {
	if o == nil || IsNil(o.ForecastInfo) {
		var ret CateringInfoType
		return ret
	}
	return *o.ForecastInfo
}

// GetForecastInfoOk returns a tuple with the ForecastInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeInformationBaseType) GetForecastInfoOk() (*CateringInfoType, bool) {
	if o == nil || IsNil(o.ForecastInfo) {
		return nil, false
	}
	return o.ForecastInfo, true
}

// HasForecastInfo returns a boolean if a field has been set.
func (o *CateringCodeInformationBaseType) HasForecastInfo() bool {
	if o != nil && !IsNil(o.ForecastInfo) {
		return true
	}

	return false
}

// SetForecastInfo gets a reference to the given CateringInfoType and assigns it to the ForecastInfo field.
func (o *CateringCodeInformationBaseType) SetForecastInfo(v CateringInfoType) {
	o.ForecastInfo = &v
}

func (o CateringCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringCodeInformationBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BudgetInfo) {
		toSerialize["budgetInfo"] = o.BudgetInfo
	}
	if !IsNil(o.CateringCode) {
		toSerialize["cateringCode"] = o.CateringCode
	}
	if !IsNil(o.CateringCodeDescription) {
		toSerialize["cateringCodeDescription"] = o.CateringCodeDescription
	}
	if !IsNil(o.CateringCodeGrp) {
		toSerialize["cateringCodeGrp"] = o.CateringCodeGrp
	}
	if !IsNil(o.ForecastInfo) {
		toSerialize["forecastInfo"] = o.ForecastInfo
	}
	return toSerialize, nil
}

type NullableCateringCodeInformationBaseType struct {
	value *CateringCodeInformationBaseType
	isSet bool
}

func (v NullableCateringCodeInformationBaseType) Get() *CateringCodeInformationBaseType {
	return v.value
}

func (v *NullableCateringCodeInformationBaseType) Set(val *CateringCodeInformationBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringCodeInformationBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringCodeInformationBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringCodeInformationBaseType(val *CateringCodeInformationBaseType) *NullableCateringCodeInformationBaseType {
	return &NullableCateringCodeInformationBaseType{value: val, isSet: true}
}

func (v NullableCateringCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringCodeInformationBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


