/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CycleFiscalPeriodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycleFiscalPeriodType{}

// CycleFiscalPeriodType Fiscal Year Cycle Period creation type.
type CycleFiscalPeriodType struct {
	Cycle *CyclePeriodType `json:"cycle,omitempty"`
	// Resort for which the Period is defined.
	HotelId *string `json:"hotelId,omitempty"`
	// Prefix added to all period to be created
	PeriodPrefix *string `json:"periodPrefix,omitempty"`
	// Id of the Year.
	YearId *float32 `json:"yearId,omitempty"`
}

// NewCycleFiscalPeriodType instantiates a new CycleFiscalPeriodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycleFiscalPeriodType() *CycleFiscalPeriodType {
	this := CycleFiscalPeriodType{}
	return &this
}

// NewCycleFiscalPeriodTypeWithDefaults instantiates a new CycleFiscalPeriodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycleFiscalPeriodTypeWithDefaults() *CycleFiscalPeriodType {
	this := CycleFiscalPeriodType{}
	return &this
}

// GetCycle returns the Cycle field value if set, zero value otherwise.
func (o *CycleFiscalPeriodType) GetCycle() CyclePeriodType {
	if o == nil || IsNil(o.Cycle) {
		var ret CyclePeriodType
		return ret
	}
	return *o.Cycle
}

// GetCycleOk returns a tuple with the Cycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycleFiscalPeriodType) GetCycleOk() (*CyclePeriodType, bool) {
	if o == nil || IsNil(o.Cycle) {
		return nil, false
	}
	return o.Cycle, true
}

// HasCycle returns a boolean if a field has been set.
func (o *CycleFiscalPeriodType) HasCycle() bool {
	if o != nil && !IsNil(o.Cycle) {
		return true
	}

	return false
}

// SetCycle gets a reference to the given CyclePeriodType and assigns it to the Cycle field.
func (o *CycleFiscalPeriodType) SetCycle(v CyclePeriodType) {
	o.Cycle = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CycleFiscalPeriodType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycleFiscalPeriodType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CycleFiscalPeriodType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CycleFiscalPeriodType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPeriodPrefix returns the PeriodPrefix field value if set, zero value otherwise.
func (o *CycleFiscalPeriodType) GetPeriodPrefix() string {
	if o == nil || IsNil(o.PeriodPrefix) {
		var ret string
		return ret
	}
	return *o.PeriodPrefix
}

// GetPeriodPrefixOk returns a tuple with the PeriodPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycleFiscalPeriodType) GetPeriodPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodPrefix) {
		return nil, false
	}
	return o.PeriodPrefix, true
}

// HasPeriodPrefix returns a boolean if a field has been set.
func (o *CycleFiscalPeriodType) HasPeriodPrefix() bool {
	if o != nil && !IsNil(o.PeriodPrefix) {
		return true
	}

	return false
}

// SetPeriodPrefix gets a reference to the given string and assigns it to the PeriodPrefix field.
func (o *CycleFiscalPeriodType) SetPeriodPrefix(v string) {
	o.PeriodPrefix = &v
}

// GetYearId returns the YearId field value if set, zero value otherwise.
func (o *CycleFiscalPeriodType) GetYearId() float32 {
	if o == nil || IsNil(o.YearId) {
		var ret float32
		return ret
	}
	return *o.YearId
}

// GetYearIdOk returns a tuple with the YearId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycleFiscalPeriodType) GetYearIdOk() (*float32, bool) {
	if o == nil || IsNil(o.YearId) {
		return nil, false
	}
	return o.YearId, true
}

// HasYearId returns a boolean if a field has been set.
func (o *CycleFiscalPeriodType) HasYearId() bool {
	if o != nil && !IsNil(o.YearId) {
		return true
	}

	return false
}

// SetYearId gets a reference to the given float32 and assigns it to the YearId field.
func (o *CycleFiscalPeriodType) SetYearId(v float32) {
	o.YearId = &v
}

func (o CycleFiscalPeriodType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycleFiscalPeriodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cycle) {
		toSerialize["cycle"] = o.Cycle
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PeriodPrefix) {
		toSerialize["periodPrefix"] = o.PeriodPrefix
	}
	if !IsNil(o.YearId) {
		toSerialize["yearId"] = o.YearId
	}
	return toSerialize, nil
}

type NullableCycleFiscalPeriodType struct {
	value *CycleFiscalPeriodType
	isSet bool
}

func (v NullableCycleFiscalPeriodType) Get() *CycleFiscalPeriodType {
	return v.value
}

func (v *NullableCycleFiscalPeriodType) Set(val *CycleFiscalPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableCycleFiscalPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableCycleFiscalPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycleFiscalPeriodType(val *CycleFiscalPeriodType) *NullableCycleFiscalPeriodType {
	return &NullableCycleFiscalPeriodType{value: val, isSet: true}
}

func (v NullableCycleFiscalPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycleFiscalPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


