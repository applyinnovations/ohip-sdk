/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// GenerateLevelType Defines the level from which the generates was created.
type GenerateLevelType string

// List of generateLevelType
const (
	GENERATELEVELTYPE_GROUP GenerateLevelType = "Group"
	GENERATELEVELTYPE_SUB_GROUP GenerateLevelType = "SubGroup"
	GENERATELEVELTYPE_TRANSACTION_CODE GenerateLevelType = "TransactionCode"
)

// All allowed values of GenerateLevelType enum
var AllowedGenerateLevelTypeEnumValues = []GenerateLevelType{
	"Group",
	"SubGroup",
	"TransactionCode",
}

func (v *GenerateLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenerateLevelType(value)
	for _, existing := range AllowedGenerateLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenerateLevelType", value)
}

// NewGenerateLevelTypeFromValue returns a pointer to a valid GenerateLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenerateLevelTypeFromValue(v string) (*GenerateLevelType, error) {
	ev := GenerateLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenerateLevelType: valid values are %v", v, AllowedGenerateLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenerateLevelType) IsValid() bool {
	for _, existing := range AllowedGenerateLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to generateLevelType value
func (v GenerateLevelType) Ptr() *GenerateLevelType {
	return &v
}

type NullableGenerateLevelType struct {
	value *GenerateLevelType
	isSet bool
}

func (v NullableGenerateLevelType) Get() *GenerateLevelType {
	return v.value
}

func (v *NullableGenerateLevelType) Set(val *GenerateLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateLevelType(val *GenerateLevelType) *NullableGenerateLevelType {
	return &NullableGenerateLevelType{value: val, isSet: true}
}

func (v NullableGenerateLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

