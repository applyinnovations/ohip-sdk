/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AccountsReceivablesConfigApiService AccountsReceivablesConfigApi service
type AccountsReceivablesConfigApiService service

type AccountsReceivablesConfigApiDeleteARAccountTypesRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	hotelId *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	accountTypes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Property associated with account type
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) HotelId(hotelId []string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) Authorization(authorization string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Account receivable account type
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) AccountTypes(accountTypes []string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.accountTypes = &accountTypes
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteARAccountTypesExecute(r)
}

/*
DeleteARAccountTypes Operation to remove AR Account types.

Operation to remove account types. <p><strong>OperationId:</strong>deleteARAccountTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiDeleteARAccountTypesRequest
*/
func (a *AccountsReceivablesConfigApiService) DeleteARAccountTypes(ctx context.Context) AccountsReceivablesConfigApiDeleteARAccountTypesRequest {
	return AccountsReceivablesConfigApiDeleteARAccountTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) DeleteARAccountTypesExecute(r AccountsReceivablesConfigApiDeleteARAccountTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.DeleteARAccountTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
	}
	if r.accountTypes != nil {
		t := *r.accountTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "accountTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "accountTypes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	codes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel where the code is configured.
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) HotelIds(hotelIds []string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) Authorization(authorization string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Configuration code.
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) Codes(codes []string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.codes = &codes
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteARFlaggedReasonsExecute(r)
}

/*
DeleteARFlaggedReasons Operation to remove AR flagged reasons.

 <p><strong>OperationId:</strong>deleteARFlaggedReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest
*/
func (a *AccountsReceivablesConfigApiService) DeleteARFlaggedReasons(ctx context.Context) AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest {
	return AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) DeleteARFlaggedReasonsExecute(r AccountsReceivablesConfigApiDeleteARFlaggedReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.DeleteARFlaggedReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flaggedReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiGetARAccountTypesRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	accountType *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) Authorization(authorization string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Account receivable account type
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) AccountType(accountType string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.accountType = &accountType
	return r
}

// Full description of account type
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) Description(description string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.description = &description
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiGetARAccountTypesRequest) Execute() (*ArAccountTypes, *http.Response, error) {
	return r.ApiService.GetARAccountTypesExecute(r)
}

/*
GetARAccountTypes Operation to fetch AR account types.

Operation to fetch account types. <p><strong>OperationId:</strong>getARAccountTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel in OPERA
 @return AccountsReceivablesConfigApiGetARAccountTypesRequest
*/
func (a *AccountsReceivablesConfigApiService) GetARAccountTypes(ctx context.Context, hotelId string) AccountsReceivablesConfigApiGetARAccountTypesRequest {
	return AccountsReceivablesConfigApiGetARAccountTypesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ArAccountTypes
func (a *AccountsReceivablesConfigApiService) GetARAccountTypesExecute(r AccountsReceivablesConfigApiGetARAccountTypesRequest) (*ArAccountTypes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArAccountTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.GetARAccountTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/ARAccountTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiGetARFlaggedReasonsRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	reasonCodes *[]string
	reasonWildCard *string
	description *string
	propertyCodes *[]string
	propertyWildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) Authorization(authorization string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Codes to be searched.
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) ReasonCodes(reasonCodes []string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.reasonCodes = &reasonCodes
	return r
}

// Wildcard search on the code.
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) ReasonWildCard(reasonWildCard string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.reasonWildCard = &reasonWildCard
	return r
}

// Description text set to the search criteria
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) Description(description string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.description = &description
	return r
}

// Codes to be searched.
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) PropertyCodes(propertyCodes []string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.propertyCodes = &propertyCodes
	return r
}

// Wildcard search on the code.
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) PropertyWildCard(propertyWildCard string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.propertyWildCard = &propertyWildCard
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) Execute() (*ArFlaggedReasons, *http.Response, error) {
	return r.ApiService.GetARFlaggedReasonsExecute(r)
}

/*
GetARFlaggedReasons Operation to fetch AR flagged reasons.

 <p><strong>OperationId:</strong>getARFlaggedReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiGetARFlaggedReasonsRequest
*/
func (a *AccountsReceivablesConfigApiService) GetARFlaggedReasons(ctx context.Context) AccountsReceivablesConfigApiGetARFlaggedReasonsRequest {
	return AccountsReceivablesConfigApiGetARFlaggedReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ArFlaggedReasons
func (a *AccountsReceivablesConfigApiService) GetARFlaggedReasonsExecute(r AccountsReceivablesConfigApiGetARFlaggedReasonsRequest) (*ArFlaggedReasons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArFlaggedReasons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.GetARFlaggedReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flaggedReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.reasonCodes != nil {
		t := *r.reasonCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasonCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasonCodes", t, "multi")
		}
	}
	if r.reasonWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reasonWildCard", r.reasonWildCard, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	if r.propertyCodes != nil {
		t := *r.propertyCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "propertyCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "propertyCodes", t, "multi")
		}
	}
	if r.propertyWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propertyWildCard", r.propertyWildCard, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiPostARAccountTypesRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	arAccountTypes *PutARAccountTypesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) Authorization(authorization string) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create account receivables account types
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) ArAccountTypes(arAccountTypes PutARAccountTypesRequest) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.arAccountTypes = &arAccountTypes
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiPostARAccountTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostARAccountTypesExecute(r)
}

/*
PostARAccountTypes Operation to create AR Account Types.

Operation to create account types. <p><strong>OperationId:</strong>postARAccountTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiPostARAccountTypesRequest
*/
func (a *AccountsReceivablesConfigApiService) PostARAccountTypes(ctx context.Context) AccountsReceivablesConfigApiPostARAccountTypesRequest {
	return AccountsReceivablesConfigApiPostARAccountTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) PostARAccountTypesExecute(r AccountsReceivablesConfigApiPostARAccountTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.PostARAccountTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.arAccountTypes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiPostARFlaggedReasonsRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	arFlaggedReasons *PutARFlaggedReasonsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) Authorization(authorization string) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create Flagged Reason
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) ArFlaggedReasons(arFlaggedReasons PutARFlaggedReasonsRequest) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.arFlaggedReasons = &arFlaggedReasons
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostARFlaggedReasonsExecute(r)
}

/*
PostARFlaggedReasons Operation to create AR flagged reasons.

 <p><strong>OperationId:</strong>postARFlaggedReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiPostARFlaggedReasonsRequest
*/
func (a *AccountsReceivablesConfigApiService) PostARFlaggedReasons(ctx context.Context) AccountsReceivablesConfigApiPostARFlaggedReasonsRequest {
	return AccountsReceivablesConfigApiPostARFlaggedReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) PostARFlaggedReasonsExecute(r AccountsReceivablesConfigApiPostARFlaggedReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.PostARFlaggedReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flaggedReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.arFlaggedReasons
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiPutARAccountTypesRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	arAccountTypes *PutARAccountTypesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) Authorization(authorization string) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing account types.
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) ArAccountTypes(arAccountTypes PutARAccountTypesRequest) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.arAccountTypes = &arAccountTypes
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiPutARAccountTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutARAccountTypesExecute(r)
}

/*
PutARAccountTypes Operation to modify AR Account Types.

Operation to change account types. <p><strong>OperationId:</strong>putARAccountTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiPutARAccountTypesRequest
*/
func (a *AccountsReceivablesConfigApiService) PutARAccountTypes(ctx context.Context) AccountsReceivablesConfigApiPutARAccountTypesRequest {
	return AccountsReceivablesConfigApiPutARAccountTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) PutARAccountTypesExecute(r AccountsReceivablesConfigApiPutARAccountTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.PutARAccountTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.arAccountTypes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsReceivablesConfigApiPutARFlaggedReasonsRequest struct {
	ctx context.Context
	ApiService *AccountsReceivablesConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	arFlaggedReasons *PutARFlaggedReasonsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) Authorization(authorization string) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) XAppKey(xAppKey string) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) XHotelid(xHotelid string) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to edit Flagged Reasons.
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) ArFlaggedReasons(arFlaggedReasons PutARFlaggedReasonsRequest) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.arFlaggedReasons = &arFlaggedReasons
	return r
}

// External system code.
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) XExternalsystem(xExternalsystem string) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) AcceptLanguage(acceptLanguage string) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutARFlaggedReasonsExecute(r)
}

/*
PutARFlaggedReasons Operation to change AR flagged reasons.

 <p><strong>OperationId:</strong>putARFlaggedReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AccountsReceivablesConfigApiPutARFlaggedReasonsRequest
*/
func (a *AccountsReceivablesConfigApiService) PutARFlaggedReasons(ctx context.Context) AccountsReceivablesConfigApiPutARFlaggedReasonsRequest {
	return AccountsReceivablesConfigApiPutARFlaggedReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *AccountsReceivablesConfigApiService) PutARFlaggedReasonsExecute(r AccountsReceivablesConfigApiPutARFlaggedReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsReceivablesConfigApiService.PutARFlaggedReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flaggedReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.arFlaggedReasons
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
