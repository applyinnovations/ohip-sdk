/*
OPERA Cloud Enterprise Configuration API

Testing ChainConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package entcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/entcfg"
)

func Test_entcfg_ChainConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigApiService ChangeBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeBrandCodes(context.Background(), brandCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessUnitCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCorporateBusinessUnits(context.Background(), businessUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCorporateDepartmentCodes(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divisionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCorporateDivisions(context.Background(), divisionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingUnitCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCorporateOperatingUnits(context.Background(), operatingUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCountryGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCountryMainGroups(context.Background(), groupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeHotelCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeNoteTypes(context.Background(), noteTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangePropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangePropertyDetailCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeRegionsCode(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeTemplateCodes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfGroupCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeUserDefinedFieldGroups(context.Background(), udfGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfValue string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeUserDefinedFieldValues(context.Background(), udfValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionClassCode string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteAttractionClasses(context.Background(), attractionClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationMethodsEntDetailsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteCommunicationMethodsEntDetails(context.Background(), communicationMethodsEntDetailsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingRegionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteMarketingRegions(context.Background(), marketingRegionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeletePropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.DeletePropertyTypes(context.Background(), propertyTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomAmenitiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteRoomAmenities(context.Background(), roomAmenitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAttractionClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetBrandCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCommunicationMethodsEntDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCorporateBusinessUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCorporateDepartmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCorporateDivisions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCorporateOperatingUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCountryGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCountryMainGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetDefaultNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetDefaultNote(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetHotelCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMarketingCitiesByRegion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMarketingCitiesByRegion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMarketingRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetNoteTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetPropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetPropertyDetailCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetPropertyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetRegionsCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetRoomAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTemplateCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetUserDefinedFieldGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetUserDefinedFieldValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAttractionClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostBrandCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCommunicationMethodsEntDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCorporateBusinessUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCorporateDepartmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCorporateDivisions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCorporateOperatingUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCountryGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCountryMainGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostHotelCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMarketingRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostNoteTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostPropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostPropertyDetailCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostPropertyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostRegionsCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostRoomAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTemplateCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostUserDefinedFieldGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostUserDefinedFieldValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionClassCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutAttractionClasses(context.Background(), attractionClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutChain(context.Background(), chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationMethodsEntDetailsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutCommunicationMethodsEntDetails(context.Background(), communicationMethodsEntDetailsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingRegionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutMarketingRegions(context.Background(), marketingRegionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutPropertyTypes(context.Background(), propertyTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomAmenitiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutRoomAmenities(context.Background(), roomAmenitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveBrandCodes(context.Background(), brandCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessUnitCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCorporateBusinessUnits(context.Background(), businessUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCorporateDepartmentCodes(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divisionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCorporateDivisions(context.Background(), divisionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingUnitCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCorporateOperatingUnits(context.Background(), operatingUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCountryGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCountryMainGroups(context.Background(), groupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveHotelCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveNoteTypes(context.Background(), noteTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemovePropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemovePropertyDetailCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveRegionsCode(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveTemplateCodes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfGroupCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveUserDefinedFieldGroups(context.Background(), udfGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfValue string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveUserDefinedFieldValues(context.Background(), udfValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
