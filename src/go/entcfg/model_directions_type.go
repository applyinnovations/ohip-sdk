/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the DirectionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectionsType{}

// DirectionsType Collection of direction details to get into Hotel.
type DirectionsType struct {
	Items []DirectionType
}

// NewDirectionsType instantiates a new DirectionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectionsType() *DirectionsType {
	this := DirectionsType{}
	return &this
}

// NewDirectionsTypeWithDefaults instantiates a new DirectionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectionsTypeWithDefaults() *DirectionsType {
	this := DirectionsType{}
	return &this
}

func (o DirectionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *DirectionsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableDirectionsType struct {
	value DirectionsType
	isSet bool
}

func (v NullableDirectionsType) Get() DirectionsType {
	return v.value
}

func (v *NullableDirectionsType) Set(val DirectionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectionsType(val DirectionsType) *NullableDirectionsType {
	return &NullableDirectionsType{value: val, isSet: true}
}

func (v NullableDirectionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


