/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelBrochureTypePropertyControlsCateringCurrencyFormatting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelBrochureTypePropertyControlsCateringCurrencyFormatting{}

// HotelBrochureTypePropertyControlsCateringCurrencyFormatting Catering Currency Formatting information configuration of the hotel.
type HotelBrochureTypePropertyControlsCateringCurrencyFormatting struct {
	// The base currency code for this hotel..
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Format for the local currency.
	CurrencyFormat *string `json:"currencyFormat,omitempty"`
}

// NewHotelBrochureTypePropertyControlsCateringCurrencyFormatting instantiates a new HotelBrochureTypePropertyControlsCateringCurrencyFormatting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelBrochureTypePropertyControlsCateringCurrencyFormatting() *HotelBrochureTypePropertyControlsCateringCurrencyFormatting {
	this := HotelBrochureTypePropertyControlsCateringCurrencyFormatting{}
	return &this
}

// NewHotelBrochureTypePropertyControlsCateringCurrencyFormattingWithDefaults instantiates a new HotelBrochureTypePropertyControlsCateringCurrencyFormatting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelBrochureTypePropertyControlsCateringCurrencyFormattingWithDefaults() *HotelBrochureTypePropertyControlsCateringCurrencyFormatting {
	this := HotelBrochureTypePropertyControlsCateringCurrencyFormatting{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencyFormat returns the CurrencyFormat field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) GetCurrencyFormat() string {
	if o == nil || IsNil(o.CurrencyFormat) {
		var ret string
		return ret
	}
	return *o.CurrencyFormat
}

// GetCurrencyFormatOk returns a tuple with the CurrencyFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) GetCurrencyFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyFormat) {
		return nil, false
	}
	return o.CurrencyFormat, true
}

// HasCurrencyFormat returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) HasCurrencyFormat() bool {
	if o != nil && !IsNil(o.CurrencyFormat) {
		return true
	}

	return false
}

// SetCurrencyFormat gets a reference to the given string and assigns it to the CurrencyFormat field.
func (o *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) SetCurrencyFormat(v string) {
	o.CurrencyFormat = &v
}

func (o HotelBrochureTypePropertyControlsCateringCurrencyFormatting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelBrochureTypePropertyControlsCateringCurrencyFormatting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyFormat) {
		toSerialize["currencyFormat"] = o.CurrencyFormat
	}
	return toSerialize, nil
}

type NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting struct {
	value *HotelBrochureTypePropertyControlsCateringCurrencyFormatting
	isSet bool
}

func (v NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) Get() *HotelBrochureTypePropertyControlsCateringCurrencyFormatting {
	return v.value
}

func (v *NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) Set(val *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting(val *HotelBrochureTypePropertyControlsCateringCurrencyFormatting) *NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting {
	return &NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting{value: val, isSet: true}
}

func (v NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelBrochureTypePropertyControlsCateringCurrencyFormatting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


