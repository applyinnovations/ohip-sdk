/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the TransportationCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransportationCodeType{}

// TransportationCodeType Transportation Code available from Airport to the Hotel.
type TransportationCodeType struct {
	Code *string `json:"code,omitempty"`
}

// NewTransportationCodeType instantiates a new TransportationCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportationCodeType() *TransportationCodeType {
	this := TransportationCodeType{}
	return &this
}

// NewTransportationCodeTypeWithDefaults instantiates a new TransportationCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportationCodeTypeWithDefaults() *TransportationCodeType {
	this := TransportationCodeType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TransportationCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TransportationCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TransportationCodeType) SetCode(v string) {
	o.Code = &v
}

func (o TransportationCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransportationCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableTransportationCodeType struct {
	value *TransportationCodeType
	isSet bool
}

func (v NullableTransportationCodeType) Get() *TransportationCodeType {
	return v.value
}

func (v *NullableTransportationCodeType) Set(val *TransportationCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportationCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportationCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportationCodeType(val *TransportationCodeType) *NullableTransportationCodeType {
	return &NullableTransportationCodeType{value: val, isSet: true}
}

func (v NullableTransportationCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportationCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


