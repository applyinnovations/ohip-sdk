/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelBrochureTypePropertyControlsApplicationMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelBrochureTypePropertyControlsApplicationMode{}

// HotelBrochureTypePropertyControlsApplicationMode Application Mode information configuration of the hotel.
type HotelBrochureTypePropertyControlsApplicationMode struct {
	// The hotel's configuration mode if applicable.
	ConfigurationMode *string `json:"configurationMode,omitempty"`
	// The hotel's country code.
	CountryMode *string `json:"countryMode,omitempty"`
	// Hotel Code used for third party exports.
	ExpHotelCode *string `json:"expHotelCode,omitempty"`
	// Indicates if the hotel uses MBS (Marriott Business Services).
	MbsSupported *bool `json:"mbsSupported,omitempty"`
	// The Tourist Number of the hotel.
	TouristNumber *string `json:"touristNumber,omitempty"`
}

// NewHotelBrochureTypePropertyControlsApplicationMode instantiates a new HotelBrochureTypePropertyControlsApplicationMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelBrochureTypePropertyControlsApplicationMode() *HotelBrochureTypePropertyControlsApplicationMode {
	this := HotelBrochureTypePropertyControlsApplicationMode{}
	return &this
}

// NewHotelBrochureTypePropertyControlsApplicationModeWithDefaults instantiates a new HotelBrochureTypePropertyControlsApplicationMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelBrochureTypePropertyControlsApplicationModeWithDefaults() *HotelBrochureTypePropertyControlsApplicationMode {
	this := HotelBrochureTypePropertyControlsApplicationMode{}
	return &this
}

// GetConfigurationMode returns the ConfigurationMode field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetConfigurationMode() string {
	if o == nil || IsNil(o.ConfigurationMode) {
		var ret string
		return ret
	}
	return *o.ConfigurationMode
}

// GetConfigurationModeOk returns a tuple with the ConfigurationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetConfigurationModeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationMode) {
		return nil, false
	}
	return o.ConfigurationMode, true
}

// HasConfigurationMode returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) HasConfigurationMode() bool {
	if o != nil && !IsNil(o.ConfigurationMode) {
		return true
	}

	return false
}

// SetConfigurationMode gets a reference to the given string and assigns it to the ConfigurationMode field.
func (o *HotelBrochureTypePropertyControlsApplicationMode) SetConfigurationMode(v string) {
	o.ConfigurationMode = &v
}

// GetCountryMode returns the CountryMode field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetCountryMode() string {
	if o == nil || IsNil(o.CountryMode) {
		var ret string
		return ret
	}
	return *o.CountryMode
}

// GetCountryModeOk returns a tuple with the CountryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetCountryModeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryMode) {
		return nil, false
	}
	return o.CountryMode, true
}

// HasCountryMode returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) HasCountryMode() bool {
	if o != nil && !IsNil(o.CountryMode) {
		return true
	}

	return false
}

// SetCountryMode gets a reference to the given string and assigns it to the CountryMode field.
func (o *HotelBrochureTypePropertyControlsApplicationMode) SetCountryMode(v string) {
	o.CountryMode = &v
}

// GetExpHotelCode returns the ExpHotelCode field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetExpHotelCode() string {
	if o == nil || IsNil(o.ExpHotelCode) {
		var ret string
		return ret
	}
	return *o.ExpHotelCode
}

// GetExpHotelCodeOk returns a tuple with the ExpHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetExpHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpHotelCode) {
		return nil, false
	}
	return o.ExpHotelCode, true
}

// HasExpHotelCode returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) HasExpHotelCode() bool {
	if o != nil && !IsNil(o.ExpHotelCode) {
		return true
	}

	return false
}

// SetExpHotelCode gets a reference to the given string and assigns it to the ExpHotelCode field.
func (o *HotelBrochureTypePropertyControlsApplicationMode) SetExpHotelCode(v string) {
	o.ExpHotelCode = &v
}

// GetMbsSupported returns the MbsSupported field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetMbsSupported() bool {
	if o == nil || IsNil(o.MbsSupported) {
		var ret bool
		return ret
	}
	return *o.MbsSupported
}

// GetMbsSupportedOk returns a tuple with the MbsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetMbsSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MbsSupported) {
		return nil, false
	}
	return o.MbsSupported, true
}

// HasMbsSupported returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) HasMbsSupported() bool {
	if o != nil && !IsNil(o.MbsSupported) {
		return true
	}

	return false
}

// SetMbsSupported gets a reference to the given bool and assigns it to the MbsSupported field.
func (o *HotelBrochureTypePropertyControlsApplicationMode) SetMbsSupported(v bool) {
	o.MbsSupported = &v
}

// GetTouristNumber returns the TouristNumber field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetTouristNumber() string {
	if o == nil || IsNil(o.TouristNumber) {
		var ret string
		return ret
	}
	return *o.TouristNumber
}

// GetTouristNumberOk returns a tuple with the TouristNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) GetTouristNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TouristNumber) {
		return nil, false
	}
	return o.TouristNumber, true
}

// HasTouristNumber returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControlsApplicationMode) HasTouristNumber() bool {
	if o != nil && !IsNil(o.TouristNumber) {
		return true
	}

	return false
}

// SetTouristNumber gets a reference to the given string and assigns it to the TouristNumber field.
func (o *HotelBrochureTypePropertyControlsApplicationMode) SetTouristNumber(v string) {
	o.TouristNumber = &v
}

func (o HotelBrochureTypePropertyControlsApplicationMode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelBrochureTypePropertyControlsApplicationMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationMode) {
		toSerialize["configurationMode"] = o.ConfigurationMode
	}
	if !IsNil(o.CountryMode) {
		toSerialize["countryMode"] = o.CountryMode
	}
	if !IsNil(o.ExpHotelCode) {
		toSerialize["expHotelCode"] = o.ExpHotelCode
	}
	if !IsNil(o.MbsSupported) {
		toSerialize["mbsSupported"] = o.MbsSupported
	}
	if !IsNil(o.TouristNumber) {
		toSerialize["touristNumber"] = o.TouristNumber
	}
	return toSerialize, nil
}

type NullableHotelBrochureTypePropertyControlsApplicationMode struct {
	value *HotelBrochureTypePropertyControlsApplicationMode
	isSet bool
}

func (v NullableHotelBrochureTypePropertyControlsApplicationMode) Get() *HotelBrochureTypePropertyControlsApplicationMode {
	return v.value
}

func (v *NullableHotelBrochureTypePropertyControlsApplicationMode) Set(val *HotelBrochureTypePropertyControlsApplicationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelBrochureTypePropertyControlsApplicationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelBrochureTypePropertyControlsApplicationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelBrochureTypePropertyControlsApplicationMode(val *HotelBrochureTypePropertyControlsApplicationMode) *NullableHotelBrochureTypePropertyControlsApplicationMode {
	return &NullableHotelBrochureTypePropertyControlsApplicationMode{value: val, isSet: true}
}

func (v NullableHotelBrochureTypePropertyControlsApplicationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelBrochureTypePropertyControlsApplicationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


