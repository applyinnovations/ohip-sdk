/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the RegionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionType{}

// RegionType struct for RegionType
type RegionType struct {
	// Description of the Region
	Description *string `json:"description,omitempty"`
	// Marketing Cities under this Region.
	MarketingCities []MarketingCityType `json:"marketingCities,omitempty"`
	// Code of this Region.
	RegionCode *string `json:"regionCode,omitempty"`
}

// NewRegionType instantiates a new RegionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionType() *RegionType {
	this := RegionType{}
	return &this
}

// NewRegionTypeWithDefaults instantiates a new RegionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionTypeWithDefaults() *RegionType {
	this := RegionType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegionType) SetDescription(v string) {
	o.Description = &v
}

// GetMarketingCities returns the MarketingCities field value if set, zero value otherwise.
func (o *RegionType) GetMarketingCities() []MarketingCityType {
	if o == nil || IsNil(o.MarketingCities) {
		var ret []MarketingCityType
		return ret
	}
	return o.MarketingCities
}

// GetMarketingCitiesOk returns a tuple with the MarketingCities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionType) GetMarketingCitiesOk() ([]MarketingCityType, bool) {
	if o == nil || IsNil(o.MarketingCities) {
		return nil, false
	}
	return o.MarketingCities, true
}

// HasMarketingCities returns a boolean if a field has been set.
func (o *RegionType) HasMarketingCities() bool {
	if o != nil && !IsNil(o.MarketingCities) {
		return true
	}

	return false
}

// SetMarketingCities gets a reference to the given []MarketingCityType and assigns it to the MarketingCities field.
func (o *RegionType) SetMarketingCities(v []MarketingCityType) {
	o.MarketingCities = v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *RegionType) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionType) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *RegionType) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *RegionType) SetRegionCode(v string) {
	o.RegionCode = &v
}

func (o RegionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MarketingCities) {
		toSerialize["marketingCities"] = o.MarketingCities
	}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	return toSerialize, nil
}

type NullableRegionType struct {
	value *RegionType
	isSet bool
}

func (v NullableRegionType) Get() *RegionType {
	return v.value
}

func (v *NullableRegionType) Set(val *RegionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionType(val *RegionType) *NullableRegionType {
	return &NullableRegionType{value: val, isSet: true}
}

func (v NullableRegionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


