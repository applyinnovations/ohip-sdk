/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelBrochureTypePropertyControls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelBrochureTypePropertyControls{}

// HotelBrochureTypePropertyControls Property controls information configuration of the hotel.
type HotelBrochureTypePropertyControls struct {
	ApplicationMode *HotelBrochureTypePropertyControlsApplicationMode `json:"applicationMode,omitempty"`
	CateringCurrencyFormatting *HotelBrochureTypePropertyControlsCateringCurrencyFormatting `json:"cateringCurrencyFormatting,omitempty"`
	CurrencyFormatting *HotelBrochureTypePropertyControlsCurrencyFormatting `json:"currencyFormatting,omitempty"`
	DateTimeFormatting *HotelBrochureTypePropertyControlsDateTimeFormatting `json:"dateTimeFormatting,omitempty"`
	SellControls *HotelBrochureTypePropertyControlsSellControls `json:"sellControls,omitempty"`
}

// NewHotelBrochureTypePropertyControls instantiates a new HotelBrochureTypePropertyControls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelBrochureTypePropertyControls() *HotelBrochureTypePropertyControls {
	this := HotelBrochureTypePropertyControls{}
	return &this
}

// NewHotelBrochureTypePropertyControlsWithDefaults instantiates a new HotelBrochureTypePropertyControls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelBrochureTypePropertyControlsWithDefaults() *HotelBrochureTypePropertyControls {
	this := HotelBrochureTypePropertyControls{}
	return &this
}

// GetApplicationMode returns the ApplicationMode field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControls) GetApplicationMode() HotelBrochureTypePropertyControlsApplicationMode {
	if o == nil || IsNil(o.ApplicationMode) {
		var ret HotelBrochureTypePropertyControlsApplicationMode
		return ret
	}
	return *o.ApplicationMode
}

// GetApplicationModeOk returns a tuple with the ApplicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControls) GetApplicationModeOk() (*HotelBrochureTypePropertyControlsApplicationMode, bool) {
	if o == nil || IsNil(o.ApplicationMode) {
		return nil, false
	}
	return o.ApplicationMode, true
}

// HasApplicationMode returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControls) HasApplicationMode() bool {
	if o != nil && !IsNil(o.ApplicationMode) {
		return true
	}

	return false
}

// SetApplicationMode gets a reference to the given HotelBrochureTypePropertyControlsApplicationMode and assigns it to the ApplicationMode field.
func (o *HotelBrochureTypePropertyControls) SetApplicationMode(v HotelBrochureTypePropertyControlsApplicationMode) {
	o.ApplicationMode = &v
}

// GetCateringCurrencyFormatting returns the CateringCurrencyFormatting field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControls) GetCateringCurrencyFormatting() HotelBrochureTypePropertyControlsCateringCurrencyFormatting {
	if o == nil || IsNil(o.CateringCurrencyFormatting) {
		var ret HotelBrochureTypePropertyControlsCateringCurrencyFormatting
		return ret
	}
	return *o.CateringCurrencyFormatting
}

// GetCateringCurrencyFormattingOk returns a tuple with the CateringCurrencyFormatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControls) GetCateringCurrencyFormattingOk() (*HotelBrochureTypePropertyControlsCateringCurrencyFormatting, bool) {
	if o == nil || IsNil(o.CateringCurrencyFormatting) {
		return nil, false
	}
	return o.CateringCurrencyFormatting, true
}

// HasCateringCurrencyFormatting returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControls) HasCateringCurrencyFormatting() bool {
	if o != nil && !IsNil(o.CateringCurrencyFormatting) {
		return true
	}

	return false
}

// SetCateringCurrencyFormatting gets a reference to the given HotelBrochureTypePropertyControlsCateringCurrencyFormatting and assigns it to the CateringCurrencyFormatting field.
func (o *HotelBrochureTypePropertyControls) SetCateringCurrencyFormatting(v HotelBrochureTypePropertyControlsCateringCurrencyFormatting) {
	o.CateringCurrencyFormatting = &v
}

// GetCurrencyFormatting returns the CurrencyFormatting field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControls) GetCurrencyFormatting() HotelBrochureTypePropertyControlsCurrencyFormatting {
	if o == nil || IsNil(o.CurrencyFormatting) {
		var ret HotelBrochureTypePropertyControlsCurrencyFormatting
		return ret
	}
	return *o.CurrencyFormatting
}

// GetCurrencyFormattingOk returns a tuple with the CurrencyFormatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControls) GetCurrencyFormattingOk() (*HotelBrochureTypePropertyControlsCurrencyFormatting, bool) {
	if o == nil || IsNil(o.CurrencyFormatting) {
		return nil, false
	}
	return o.CurrencyFormatting, true
}

// HasCurrencyFormatting returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControls) HasCurrencyFormatting() bool {
	if o != nil && !IsNil(o.CurrencyFormatting) {
		return true
	}

	return false
}

// SetCurrencyFormatting gets a reference to the given HotelBrochureTypePropertyControlsCurrencyFormatting and assigns it to the CurrencyFormatting field.
func (o *HotelBrochureTypePropertyControls) SetCurrencyFormatting(v HotelBrochureTypePropertyControlsCurrencyFormatting) {
	o.CurrencyFormatting = &v
}

// GetDateTimeFormatting returns the DateTimeFormatting field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControls) GetDateTimeFormatting() HotelBrochureTypePropertyControlsDateTimeFormatting {
	if o == nil || IsNil(o.DateTimeFormatting) {
		var ret HotelBrochureTypePropertyControlsDateTimeFormatting
		return ret
	}
	return *o.DateTimeFormatting
}

// GetDateTimeFormattingOk returns a tuple with the DateTimeFormatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControls) GetDateTimeFormattingOk() (*HotelBrochureTypePropertyControlsDateTimeFormatting, bool) {
	if o == nil || IsNil(o.DateTimeFormatting) {
		return nil, false
	}
	return o.DateTimeFormatting, true
}

// HasDateTimeFormatting returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControls) HasDateTimeFormatting() bool {
	if o != nil && !IsNil(o.DateTimeFormatting) {
		return true
	}

	return false
}

// SetDateTimeFormatting gets a reference to the given HotelBrochureTypePropertyControlsDateTimeFormatting and assigns it to the DateTimeFormatting field.
func (o *HotelBrochureTypePropertyControls) SetDateTimeFormatting(v HotelBrochureTypePropertyControlsDateTimeFormatting) {
	o.DateTimeFormatting = &v
}

// GetSellControls returns the SellControls field value if set, zero value otherwise.
func (o *HotelBrochureTypePropertyControls) GetSellControls() HotelBrochureTypePropertyControlsSellControls {
	if o == nil || IsNil(o.SellControls) {
		var ret HotelBrochureTypePropertyControlsSellControls
		return ret
	}
	return *o.SellControls
}

// GetSellControlsOk returns a tuple with the SellControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBrochureTypePropertyControls) GetSellControlsOk() (*HotelBrochureTypePropertyControlsSellControls, bool) {
	if o == nil || IsNil(o.SellControls) {
		return nil, false
	}
	return o.SellControls, true
}

// HasSellControls returns a boolean if a field has been set.
func (o *HotelBrochureTypePropertyControls) HasSellControls() bool {
	if o != nil && !IsNil(o.SellControls) {
		return true
	}

	return false
}

// SetSellControls gets a reference to the given HotelBrochureTypePropertyControlsSellControls and assigns it to the SellControls field.
func (o *HotelBrochureTypePropertyControls) SetSellControls(v HotelBrochureTypePropertyControlsSellControls) {
	o.SellControls = &v
}

func (o HotelBrochureTypePropertyControls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelBrochureTypePropertyControls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationMode) {
		toSerialize["applicationMode"] = o.ApplicationMode
	}
	if !IsNil(o.CateringCurrencyFormatting) {
		toSerialize["cateringCurrencyFormatting"] = o.CateringCurrencyFormatting
	}
	if !IsNil(o.CurrencyFormatting) {
		toSerialize["currencyFormatting"] = o.CurrencyFormatting
	}
	if !IsNil(o.DateTimeFormatting) {
		toSerialize["dateTimeFormatting"] = o.DateTimeFormatting
	}
	if !IsNil(o.SellControls) {
		toSerialize["sellControls"] = o.SellControls
	}
	return toSerialize, nil
}

type NullableHotelBrochureTypePropertyControls struct {
	value *HotelBrochureTypePropertyControls
	isSet bool
}

func (v NullableHotelBrochureTypePropertyControls) Get() *HotelBrochureTypePropertyControls {
	return v.value
}

func (v *NullableHotelBrochureTypePropertyControls) Set(val *HotelBrochureTypePropertyControls) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelBrochureTypePropertyControls) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelBrochureTypePropertyControls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelBrochureTypePropertyControls(val *HotelBrochureTypePropertyControls) *NullableHotelBrochureTypePropertyControls {
	return &NullableHotelBrochureTypePropertyControls{value: val, isSet: true}
}

func (v NullableHotelBrochureTypePropertyControls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelBrochureTypePropertyControls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


