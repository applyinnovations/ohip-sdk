/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the AttractionCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttractionCodesType{}

// AttractionCodesType Collection of hotel level alert codes with attached alert types.
type AttractionCodesType struct {
	Items []AttractionCodeType
}

// NewAttractionCodesType instantiates a new AttractionCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttractionCodesType() *AttractionCodesType {
	this := AttractionCodesType{}
	return &this
}

// NewAttractionCodesTypeWithDefaults instantiates a new AttractionCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttractionCodesTypeWithDefaults() *AttractionCodesType {
	this := AttractionCodesType{}
	return &this
}

func (o AttractionCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttractionCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *AttractionCodesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableAttractionCodesType struct {
	value AttractionCodesType
	isSet bool
}

func (v NullableAttractionCodesType) Get() AttractionCodesType {
	return v.value
}

func (v *NullableAttractionCodesType) Set(val AttractionCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttractionCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttractionCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttractionCodesType(val AttractionCodesType) *NullableAttractionCodesType {
	return &NullableAttractionCodesType{value: val, isSet: true}
}

func (v NullableAttractionCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttractionCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


