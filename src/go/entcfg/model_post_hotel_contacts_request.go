/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the PostHotelContactsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostHotelContactsRequest{}

// PostHotelContactsRequest struct for PostHotelContactsRequest
type PostHotelContactsRequest struct {
	HotelContacts *HotelContactsType `json:"hotelContacts,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostHotelContactsRequest instantiates a new PostHotelContactsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostHotelContactsRequest() *PostHotelContactsRequest {
	this := PostHotelContactsRequest{}
	return &this
}

// NewPostHotelContactsRequestWithDefaults instantiates a new PostHotelContactsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostHotelContactsRequestWithDefaults() *PostHotelContactsRequest {
	this := PostHotelContactsRequest{}
	return &this
}

// GetHotelContacts returns the HotelContacts field value if set, zero value otherwise.
func (o *PostHotelContactsRequest) GetHotelContacts() HotelContactsType {
	if o == nil || IsNil(o.HotelContacts) {
		var ret HotelContactsType
		return ret
	}
	return *o.HotelContacts
}

// GetHotelContactsOk returns a tuple with the HotelContacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostHotelContactsRequest) GetHotelContactsOk() (*HotelContactsType, bool) {
	if o == nil || IsNil(o.HotelContacts) {
		return nil, false
	}
	return o.HotelContacts, true
}

// HasHotelContacts returns a boolean if a field has been set.
func (o *PostHotelContactsRequest) HasHotelContacts() bool {
	if o != nil && !IsNil(o.HotelContacts) {
		return true
	}

	return false
}

// SetHotelContacts gets a reference to the given HotelContactsType and assigns it to the HotelContacts field.
func (o *PostHotelContactsRequest) SetHotelContacts(v HotelContactsType) {
	o.HotelContacts = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostHotelContactsRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostHotelContactsRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostHotelContactsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostHotelContactsRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostHotelContactsRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostHotelContactsRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostHotelContactsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostHotelContactsRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostHotelContactsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostHotelContactsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelContacts) {
		toSerialize["hotelContacts"] = o.HotelContacts
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostHotelContactsRequest struct {
	value *PostHotelContactsRequest
	isSet bool
}

func (v NullablePostHotelContactsRequest) Get() *PostHotelContactsRequest {
	return v.value
}

func (v *NullablePostHotelContactsRequest) Set(val *PostHotelContactsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostHotelContactsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostHotelContactsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostHotelContactsRequest(val *PostHotelContactsRequest) *NullablePostHotelContactsRequest {
	return &NullablePostHotelContactsRequest{value: val, isSet: true}
}

func (v NullablePostHotelContactsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostHotelContactsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


