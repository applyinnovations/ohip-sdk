/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the OperaHotelContextDetailsHotelContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperaHotelContextDetailsHotelContext{}

// OperaHotelContextDetailsHotelContext A record containing hotel contextual information, stored as attributes.
type OperaHotelContextDetailsHotelContext struct {
	// The hotel's business date.
	BusinessDate *string `json:"businessDate,omitempty"`
	// Catering Currency Code, used when Catering Currency differs from base currency.
	CateringCurrencyCode *string `json:"cateringCurrencyCode,omitempty"`
	// The hotel's chain code.
	ChainCode *string `json:"chainCode,omitempty"`
	// The hotel's check-in time.
	CheckInTime *string `json:"checkInTime,omitempty"`
	// The hotel's check-out time.
	CheckOutTime *string `json:"checkOutTime,omitempty"`
	// The hotel's configuration mode if applicable.
	ConfigurationMode *string `json:"configurationMode,omitempty"`
	// The hotel's country code.
	CountryMode *string `json:"countryMode,omitempty"`
	// Provides the hotel's currency code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The hotel code.
	HotelId *string `json:"hotelId,omitempty"`
	// The hotel name.
	HotelName *string `json:"hotelName,omitempty"`
	// The hotel's language code.
	LanguageCode *string `json:"languageCode,omitempty"`
	// The login user.
	LoginUserId *string `json:"loginUserId,omitempty"`
	// The hotel's timezone.
	Timezone *string `json:"timezone,omitempty"`
}

// NewOperaHotelContextDetailsHotelContext instantiates a new OperaHotelContextDetailsHotelContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperaHotelContextDetailsHotelContext() *OperaHotelContextDetailsHotelContext {
	this := OperaHotelContextDetailsHotelContext{}
	return &this
}

// NewOperaHotelContextDetailsHotelContextWithDefaults instantiates a new OperaHotelContextDetailsHotelContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperaHotelContextDetailsHotelContextWithDefaults() *OperaHotelContextDetailsHotelContext {
	this := OperaHotelContextDetailsHotelContext{}
	return &this
}

// GetBusinessDate returns the BusinessDate field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetBusinessDate() string {
	if o == nil || IsNil(o.BusinessDate) {
		var ret string
		return ret
	}
	return *o.BusinessDate
}

// GetBusinessDateOk returns a tuple with the BusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessDate) {
		return nil, false
	}
	return o.BusinessDate, true
}

// HasBusinessDate returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasBusinessDate() bool {
	if o != nil && !IsNil(o.BusinessDate) {
		return true
	}

	return false
}

// SetBusinessDate gets a reference to the given string and assigns it to the BusinessDate field.
func (o *OperaHotelContextDetailsHotelContext) SetBusinessDate(v string) {
	o.BusinessDate = &v
}

// GetCateringCurrencyCode returns the CateringCurrencyCode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetCateringCurrencyCode() string {
	if o == nil || IsNil(o.CateringCurrencyCode) {
		var ret string
		return ret
	}
	return *o.CateringCurrencyCode
}

// GetCateringCurrencyCodeOk returns a tuple with the CateringCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetCateringCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CateringCurrencyCode) {
		return nil, false
	}
	return o.CateringCurrencyCode, true
}

// HasCateringCurrencyCode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasCateringCurrencyCode() bool {
	if o != nil && !IsNil(o.CateringCurrencyCode) {
		return true
	}

	return false
}

// SetCateringCurrencyCode gets a reference to the given string and assigns it to the CateringCurrencyCode field.
func (o *OperaHotelContextDetailsHotelContext) SetCateringCurrencyCode(v string) {
	o.CateringCurrencyCode = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *OperaHotelContextDetailsHotelContext) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetCheckInTime returns the CheckInTime field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetCheckInTime() string {
	if o == nil || IsNil(o.CheckInTime) {
		var ret string
		return ret
	}
	return *o.CheckInTime
}

// GetCheckInTimeOk returns a tuple with the CheckInTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetCheckInTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CheckInTime) {
		return nil, false
	}
	return o.CheckInTime, true
}

// HasCheckInTime returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasCheckInTime() bool {
	if o != nil && !IsNil(o.CheckInTime) {
		return true
	}

	return false
}

// SetCheckInTime gets a reference to the given string and assigns it to the CheckInTime field.
func (o *OperaHotelContextDetailsHotelContext) SetCheckInTime(v string) {
	o.CheckInTime = &v
}

// GetCheckOutTime returns the CheckOutTime field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetCheckOutTime() string {
	if o == nil || IsNil(o.CheckOutTime) {
		var ret string
		return ret
	}
	return *o.CheckOutTime
}

// GetCheckOutTimeOk returns a tuple with the CheckOutTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetCheckOutTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CheckOutTime) {
		return nil, false
	}
	return o.CheckOutTime, true
}

// HasCheckOutTime returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasCheckOutTime() bool {
	if o != nil && !IsNil(o.CheckOutTime) {
		return true
	}

	return false
}

// SetCheckOutTime gets a reference to the given string and assigns it to the CheckOutTime field.
func (o *OperaHotelContextDetailsHotelContext) SetCheckOutTime(v string) {
	o.CheckOutTime = &v
}

// GetConfigurationMode returns the ConfigurationMode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetConfigurationMode() string {
	if o == nil || IsNil(o.ConfigurationMode) {
		var ret string
		return ret
	}
	return *o.ConfigurationMode
}

// GetConfigurationModeOk returns a tuple with the ConfigurationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetConfigurationModeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationMode) {
		return nil, false
	}
	return o.ConfigurationMode, true
}

// HasConfigurationMode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasConfigurationMode() bool {
	if o != nil && !IsNil(o.ConfigurationMode) {
		return true
	}

	return false
}

// SetConfigurationMode gets a reference to the given string and assigns it to the ConfigurationMode field.
func (o *OperaHotelContextDetailsHotelContext) SetConfigurationMode(v string) {
	o.ConfigurationMode = &v
}

// GetCountryMode returns the CountryMode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetCountryMode() string {
	if o == nil || IsNil(o.CountryMode) {
		var ret string
		return ret
	}
	return *o.CountryMode
}

// GetCountryModeOk returns a tuple with the CountryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetCountryModeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryMode) {
		return nil, false
	}
	return o.CountryMode, true
}

// HasCountryMode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasCountryMode() bool {
	if o != nil && !IsNil(o.CountryMode) {
		return true
	}

	return false
}

// SetCountryMode gets a reference to the given string and assigns it to the CountryMode field.
func (o *OperaHotelContextDetailsHotelContext) SetCountryMode(v string) {
	o.CountryMode = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *OperaHotelContextDetailsHotelContext) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *OperaHotelContextDetailsHotelContext) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *OperaHotelContextDetailsHotelContext) SetHotelName(v string) {
	o.HotelName = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *OperaHotelContextDetailsHotelContext) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetLoginUserId returns the LoginUserId field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetLoginUserId() string {
	if o == nil || IsNil(o.LoginUserId) {
		var ret string
		return ret
	}
	return *o.LoginUserId
}

// GetLoginUserIdOk returns a tuple with the LoginUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetLoginUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.LoginUserId) {
		return nil, false
	}
	return o.LoginUserId, true
}

// HasLoginUserId returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasLoginUserId() bool {
	if o != nil && !IsNil(o.LoginUserId) {
		return true
	}

	return false
}

// SetLoginUserId gets a reference to the given string and assigns it to the LoginUserId field.
func (o *OperaHotelContextDetailsHotelContext) SetLoginUserId(v string) {
	o.LoginUserId = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *OperaHotelContextDetailsHotelContext) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaHotelContextDetailsHotelContext) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *OperaHotelContextDetailsHotelContext) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *OperaHotelContextDetailsHotelContext) SetTimezone(v string) {
	o.Timezone = &v
}

func (o OperaHotelContextDetailsHotelContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperaHotelContextDetailsHotelContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessDate) {
		toSerialize["businessDate"] = o.BusinessDate
	}
	if !IsNil(o.CateringCurrencyCode) {
		toSerialize["cateringCurrencyCode"] = o.CateringCurrencyCode
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.CheckInTime) {
		toSerialize["checkInTime"] = o.CheckInTime
	}
	if !IsNil(o.CheckOutTime) {
		toSerialize["checkOutTime"] = o.CheckOutTime
	}
	if !IsNil(o.ConfigurationMode) {
		toSerialize["configurationMode"] = o.ConfigurationMode
	}
	if !IsNil(o.CountryMode) {
		toSerialize["countryMode"] = o.CountryMode
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.LoginUserId) {
		toSerialize["loginUserId"] = o.LoginUserId
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableOperaHotelContextDetailsHotelContext struct {
	value *OperaHotelContextDetailsHotelContext
	isSet bool
}

func (v NullableOperaHotelContextDetailsHotelContext) Get() *OperaHotelContextDetailsHotelContext {
	return v.value
}

func (v *NullableOperaHotelContextDetailsHotelContext) Set(val *OperaHotelContextDetailsHotelContext) {
	v.value = val
	v.isSet = true
}

func (v NullableOperaHotelContextDetailsHotelContext) IsSet() bool {
	return v.isSet
}

func (v *NullableOperaHotelContextDetailsHotelContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperaHotelContextDetailsHotelContext(val *OperaHotelContextDetailsHotelContext) *NullableOperaHotelContextDetailsHotelContext {
	return &NullableOperaHotelContextDetailsHotelContext{value: val, isSet: true}
}

func (v NullableOperaHotelContextDetailsHotelContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperaHotelContextDetailsHotelContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


