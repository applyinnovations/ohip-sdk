/*
OPERA Cloud Content Service

Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medcfg

import (
	"encoding/json"
)

// checks if the EmailFileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailFileType{}

// EmailFileType ID that uniquely defines an email object
type EmailFileType struct {
	// File attachment in base64 binary format
	EmailFile *string `json:"emailFile,omitempty"`
	// Name of the attachment
	EmailFileName *string `json:"emailFileName,omitempty"`
	EmailID *UniqueIDType `json:"emailID,omitempty"`
}

// NewEmailFileType instantiates a new EmailFileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailFileType() *EmailFileType {
	this := EmailFileType{}
	return &this
}

// NewEmailFileTypeWithDefaults instantiates a new EmailFileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailFileTypeWithDefaults() *EmailFileType {
	this := EmailFileType{}
	return &this
}

// GetEmailFile returns the EmailFile field value if set, zero value otherwise.
func (o *EmailFileType) GetEmailFile() string {
	if o == nil || IsNil(o.EmailFile) {
		var ret string
		return ret
	}
	return *o.EmailFile
}

// GetEmailFileOk returns a tuple with the EmailFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailFileType) GetEmailFileOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFile) {
		return nil, false
	}
	return o.EmailFile, true
}

// HasEmailFile returns a boolean if a field has been set.
func (o *EmailFileType) HasEmailFile() bool {
	if o != nil && !IsNil(o.EmailFile) {
		return true
	}

	return false
}

// SetEmailFile gets a reference to the given string and assigns it to the EmailFile field.
func (o *EmailFileType) SetEmailFile(v string) {
	o.EmailFile = &v
}

// GetEmailFileName returns the EmailFileName field value if set, zero value otherwise.
func (o *EmailFileType) GetEmailFileName() string {
	if o == nil || IsNil(o.EmailFileName) {
		var ret string
		return ret
	}
	return *o.EmailFileName
}

// GetEmailFileNameOk returns a tuple with the EmailFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailFileType) GetEmailFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFileName) {
		return nil, false
	}
	return o.EmailFileName, true
}

// HasEmailFileName returns a boolean if a field has been set.
func (o *EmailFileType) HasEmailFileName() bool {
	if o != nil && !IsNil(o.EmailFileName) {
		return true
	}

	return false
}

// SetEmailFileName gets a reference to the given string and assigns it to the EmailFileName field.
func (o *EmailFileType) SetEmailFileName(v string) {
	o.EmailFileName = &v
}

// GetEmailID returns the EmailID field value if set, zero value otherwise.
func (o *EmailFileType) GetEmailID() UniqueIDType {
	if o == nil || IsNil(o.EmailID) {
		var ret UniqueIDType
		return ret
	}
	return *o.EmailID
}

// GetEmailIDOk returns a tuple with the EmailID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailFileType) GetEmailIDOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EmailID) {
		return nil, false
	}
	return o.EmailID, true
}

// HasEmailID returns a boolean if a field has been set.
func (o *EmailFileType) HasEmailID() bool {
	if o != nil && !IsNil(o.EmailID) {
		return true
	}

	return false
}

// SetEmailID gets a reference to the given UniqueIDType and assigns it to the EmailID field.
func (o *EmailFileType) SetEmailID(v UniqueIDType) {
	o.EmailID = &v
}

func (o EmailFileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailFileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailFile) {
		toSerialize["emailFile"] = o.EmailFile
	}
	if !IsNil(o.EmailFileName) {
		toSerialize["emailFileName"] = o.EmailFileName
	}
	if !IsNil(o.EmailID) {
		toSerialize["emailID"] = o.EmailID
	}
	return toSerialize, nil
}

type NullableEmailFileType struct {
	value *EmailFileType
	isSet bool
}

func (v NullableEmailFileType) Get() *EmailFileType {
	return v.value
}

func (v *NullableEmailFileType) Set(val *EmailFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailFileType(val *EmailFileType) *NullableEmailFileType {
	return &NullableEmailFileType{value: val, isSet: true}
}

func (v NullableEmailFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


