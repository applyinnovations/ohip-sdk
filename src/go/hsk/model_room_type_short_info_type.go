/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomTypeShortInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypeShortInfoType{}

// RoomTypeShortInfoType Basic information of room type.
type RoomTypeShortInfoType struct {
	// Indicates if room type of the room is flagged as housekeeping. This is read-only.
	HouseKeeping *bool `json:"houseKeeping,omitempty"`
	// Indicates if room type is isAccessible.
	IsAccessible *bool `json:"isAccessible,omitempty"`
	// Indicates if room is a isSuiteRoom. This is read-only.
	IsSuiteRoom *bool `json:"isSuiteRoom,omitempty"`
	// Maximum occupancy for the room type.
	MaximumOccupancy *int32 `json:"maximumOccupancy,omitempty"`
	// Indicates whether function space can be meeting room.
	MeetingRoom *bool `json:"meetingRoom,omitempty"`
	// Minimum occupancy for the room type.
	MinimumOccupancy *int32 `json:"minimumOccupancy,omitempty"`
	// Indicates if room is a pseudoRoom. This is read-only.
	PseudoRoom *bool `json:"pseudoRoom,omitempty"`
	// Room Class of the room. This is read-only.
	RoomClass *string `json:"roomClass,omitempty"`
	RoomFeatures *RoomFeaturesType `json:"roomFeatures,omitempty"`
	// Room type of the room.
	RoomType *string `json:"roomType,omitempty"`
	// Short Description of room type.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// Specifies the smoking preference for room type of the room.
	SmokingPreference *string `json:"smokingPreference,omitempty"`
}

// NewRoomTypeShortInfoType instantiates a new RoomTypeShortInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypeShortInfoType() *RoomTypeShortInfoType {
	this := RoomTypeShortInfoType{}
	return &this
}

// NewRoomTypeShortInfoTypeWithDefaults instantiates a new RoomTypeShortInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypeShortInfoTypeWithDefaults() *RoomTypeShortInfoType {
	this := RoomTypeShortInfoType{}
	return &this
}

// GetHouseKeeping returns the HouseKeeping field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetHouseKeeping() bool {
	if o == nil || IsNil(o.HouseKeeping) {
		var ret bool
		return ret
	}
	return *o.HouseKeeping
}

// GetHouseKeepingOk returns a tuple with the HouseKeeping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetHouseKeepingOk() (*bool, bool) {
	if o == nil || IsNil(o.HouseKeeping) {
		return nil, false
	}
	return o.HouseKeeping, true
}

// HasHouseKeeping returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasHouseKeeping() bool {
	if o != nil && !IsNil(o.HouseKeeping) {
		return true
	}

	return false
}

// SetHouseKeeping gets a reference to the given bool and assigns it to the HouseKeeping field.
func (o *RoomTypeShortInfoType) SetHouseKeeping(v bool) {
	o.HouseKeeping = &v
}

// GetIsAccessible returns the IsAccessible field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetIsAccessible() bool {
	if o == nil || IsNil(o.IsAccessible) {
		var ret bool
		return ret
	}
	return *o.IsAccessible
}

// GetIsAccessibleOk returns a tuple with the IsAccessible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetIsAccessibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAccessible) {
		return nil, false
	}
	return o.IsAccessible, true
}

// HasIsAccessible returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasIsAccessible() bool {
	if o != nil && !IsNil(o.IsAccessible) {
		return true
	}

	return false
}

// SetIsAccessible gets a reference to the given bool and assigns it to the IsAccessible field.
func (o *RoomTypeShortInfoType) SetIsAccessible(v bool) {
	o.IsAccessible = &v
}

// GetIsSuiteRoom returns the IsSuiteRoom field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetIsSuiteRoom() bool {
	if o == nil || IsNil(o.IsSuiteRoom) {
		var ret bool
		return ret
	}
	return *o.IsSuiteRoom
}

// GetIsSuiteRoomOk returns a tuple with the IsSuiteRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetIsSuiteRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuiteRoom) {
		return nil, false
	}
	return o.IsSuiteRoom, true
}

// HasIsSuiteRoom returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasIsSuiteRoom() bool {
	if o != nil && !IsNil(o.IsSuiteRoom) {
		return true
	}

	return false
}

// SetIsSuiteRoom gets a reference to the given bool and assigns it to the IsSuiteRoom field.
func (o *RoomTypeShortInfoType) SetIsSuiteRoom(v bool) {
	o.IsSuiteRoom = &v
}

// GetMaximumOccupancy returns the MaximumOccupancy field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetMaximumOccupancy() int32 {
	if o == nil || IsNil(o.MaximumOccupancy) {
		var ret int32
		return ret
	}
	return *o.MaximumOccupancy
}

// GetMaximumOccupancyOk returns a tuple with the MaximumOccupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetMaximumOccupancyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumOccupancy) {
		return nil, false
	}
	return o.MaximumOccupancy, true
}

// HasMaximumOccupancy returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasMaximumOccupancy() bool {
	if o != nil && !IsNil(o.MaximumOccupancy) {
		return true
	}

	return false
}

// SetMaximumOccupancy gets a reference to the given int32 and assigns it to the MaximumOccupancy field.
func (o *RoomTypeShortInfoType) SetMaximumOccupancy(v int32) {
	o.MaximumOccupancy = &v
}

// GetMeetingRoom returns the MeetingRoom field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetMeetingRoom() bool {
	if o == nil || IsNil(o.MeetingRoom) {
		var ret bool
		return ret
	}
	return *o.MeetingRoom
}

// GetMeetingRoomOk returns a tuple with the MeetingRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetMeetingRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.MeetingRoom) {
		return nil, false
	}
	return o.MeetingRoom, true
}

// HasMeetingRoom returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasMeetingRoom() bool {
	if o != nil && !IsNil(o.MeetingRoom) {
		return true
	}

	return false
}

// SetMeetingRoom gets a reference to the given bool and assigns it to the MeetingRoom field.
func (o *RoomTypeShortInfoType) SetMeetingRoom(v bool) {
	o.MeetingRoom = &v
}

// GetMinimumOccupancy returns the MinimumOccupancy field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetMinimumOccupancy() int32 {
	if o == nil || IsNil(o.MinimumOccupancy) {
		var ret int32
		return ret
	}
	return *o.MinimumOccupancy
}

// GetMinimumOccupancyOk returns a tuple with the MinimumOccupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetMinimumOccupancyOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumOccupancy) {
		return nil, false
	}
	return o.MinimumOccupancy, true
}

// HasMinimumOccupancy returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasMinimumOccupancy() bool {
	if o != nil && !IsNil(o.MinimumOccupancy) {
		return true
	}

	return false
}

// SetMinimumOccupancy gets a reference to the given int32 and assigns it to the MinimumOccupancy field.
func (o *RoomTypeShortInfoType) SetMinimumOccupancy(v int32) {
	o.MinimumOccupancy = &v
}

// GetPseudoRoom returns the PseudoRoom field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetPseudoRoom() bool {
	if o == nil || IsNil(o.PseudoRoom) {
		var ret bool
		return ret
	}
	return *o.PseudoRoom
}

// GetPseudoRoomOk returns a tuple with the PseudoRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetPseudoRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.PseudoRoom) {
		return nil, false
	}
	return o.PseudoRoom, true
}

// HasPseudoRoom returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasPseudoRoom() bool {
	if o != nil && !IsNil(o.PseudoRoom) {
		return true
	}

	return false
}

// SetPseudoRoom gets a reference to the given bool and assigns it to the PseudoRoom field.
func (o *RoomTypeShortInfoType) SetPseudoRoom(v bool) {
	o.PseudoRoom = &v
}

// GetRoomClass returns the RoomClass field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetRoomClass() string {
	if o == nil || IsNil(o.RoomClass) {
		var ret string
		return ret
	}
	return *o.RoomClass
}

// GetRoomClassOk returns a tuple with the RoomClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetRoomClassOk() (*string, bool) {
	if o == nil || IsNil(o.RoomClass) {
		return nil, false
	}
	return o.RoomClass, true
}

// HasRoomClass returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasRoomClass() bool {
	if o != nil && !IsNil(o.RoomClass) {
		return true
	}

	return false
}

// SetRoomClass gets a reference to the given string and assigns it to the RoomClass field.
func (o *RoomTypeShortInfoType) SetRoomClass(v string) {
	o.RoomClass = &v
}

// GetRoomFeatures returns the RoomFeatures field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetRoomFeatures() RoomFeaturesType {
	if o == nil || IsNil(o.RoomFeatures) {
		var ret RoomFeaturesType
		return ret
	}
	return *o.RoomFeatures
}

// GetRoomFeaturesOk returns a tuple with the RoomFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetRoomFeaturesOk() (*RoomFeaturesType, bool) {
	if o == nil || IsNil(o.RoomFeatures) {
		return nil, false
	}
	return o.RoomFeatures, true
}

// HasRoomFeatures returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasRoomFeatures() bool {
	if o != nil && !IsNil(o.RoomFeatures) {
		return true
	}

	return false
}

// SetRoomFeatures gets a reference to the given RoomFeaturesType and assigns it to the RoomFeatures field.
func (o *RoomTypeShortInfoType) SetRoomFeatures(v RoomFeaturesType) {
	o.RoomFeatures = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *RoomTypeShortInfoType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *RoomTypeShortInfoType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetSmokingPreference returns the SmokingPreference field value if set, zero value otherwise.
func (o *RoomTypeShortInfoType) GetSmokingPreference() string {
	if o == nil || IsNil(o.SmokingPreference) {
		var ret string
		return ret
	}
	return *o.SmokingPreference
}

// GetSmokingPreferenceOk returns a tuple with the SmokingPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeShortInfoType) GetSmokingPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.SmokingPreference) {
		return nil, false
	}
	return o.SmokingPreference, true
}

// HasSmokingPreference returns a boolean if a field has been set.
func (o *RoomTypeShortInfoType) HasSmokingPreference() bool {
	if o != nil && !IsNil(o.SmokingPreference) {
		return true
	}

	return false
}

// SetSmokingPreference gets a reference to the given string and assigns it to the SmokingPreference field.
func (o *RoomTypeShortInfoType) SetSmokingPreference(v string) {
	o.SmokingPreference = &v
}

func (o RoomTypeShortInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypeShortInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HouseKeeping) {
		toSerialize["houseKeeping"] = o.HouseKeeping
	}
	if !IsNil(o.IsAccessible) {
		toSerialize["isAccessible"] = o.IsAccessible
	}
	if !IsNil(o.IsSuiteRoom) {
		toSerialize["isSuiteRoom"] = o.IsSuiteRoom
	}
	if !IsNil(o.MaximumOccupancy) {
		toSerialize["maximumOccupancy"] = o.MaximumOccupancy
	}
	if !IsNil(o.MeetingRoom) {
		toSerialize["meetingRoom"] = o.MeetingRoom
	}
	if !IsNil(o.MinimumOccupancy) {
		toSerialize["minimumOccupancy"] = o.MinimumOccupancy
	}
	if !IsNil(o.PseudoRoom) {
		toSerialize["pseudoRoom"] = o.PseudoRoom
	}
	if !IsNil(o.RoomClass) {
		toSerialize["roomClass"] = o.RoomClass
	}
	if !IsNil(o.RoomFeatures) {
		toSerialize["roomFeatures"] = o.RoomFeatures
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.SmokingPreference) {
		toSerialize["smokingPreference"] = o.SmokingPreference
	}
	return toSerialize, nil
}

type NullableRoomTypeShortInfoType struct {
	value *RoomTypeShortInfoType
	isSet bool
}

func (v NullableRoomTypeShortInfoType) Get() *RoomTypeShortInfoType {
	return v.value
}

func (v *NullableRoomTypeShortInfoType) Set(val *RoomTypeShortInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypeShortInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypeShortInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypeShortInfoType(val *RoomTypeShortInfoType) *NullableRoomTypeShortInfoType {
	return &NullableRoomTypeShortInfoType{value: val, isSet: true}
}

func (v NullableRoomTypeShortInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypeShortInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


