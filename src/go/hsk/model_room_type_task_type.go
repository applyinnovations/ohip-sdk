/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomTypeTaskType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypeTaskType{}

// RoomTypeTaskType This is a room type and its tasks count.
type RoomTypeTaskType struct {
	RoomType *CodeDescriptionType `json:"roomType,omitempty"`
	// This is a room type and its tasks count.
	TasksQuantity *int32 `json:"tasksQuantity,omitempty"`
}

// NewRoomTypeTaskType instantiates a new RoomTypeTaskType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypeTaskType() *RoomTypeTaskType {
	this := RoomTypeTaskType{}
	return &this
}

// NewRoomTypeTaskTypeWithDefaults instantiates a new RoomTypeTaskType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypeTaskTypeWithDefaults() *RoomTypeTaskType {
	this := RoomTypeTaskType{}
	return &this
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomTypeTaskType) GetRoomType() CodeDescriptionType {
	if o == nil || IsNil(o.RoomType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeTaskType) GetRoomTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomTypeTaskType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given CodeDescriptionType and assigns it to the RoomType field.
func (o *RoomTypeTaskType) SetRoomType(v CodeDescriptionType) {
	o.RoomType = &v
}

// GetTasksQuantity returns the TasksQuantity field value if set, zero value otherwise.
func (o *RoomTypeTaskType) GetTasksQuantity() int32 {
	if o == nil || IsNil(o.TasksQuantity) {
		var ret int32
		return ret
	}
	return *o.TasksQuantity
}

// GetTasksQuantityOk returns a tuple with the TasksQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeTaskType) GetTasksQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.TasksQuantity) {
		return nil, false
	}
	return o.TasksQuantity, true
}

// HasTasksQuantity returns a boolean if a field has been set.
func (o *RoomTypeTaskType) HasTasksQuantity() bool {
	if o != nil && !IsNil(o.TasksQuantity) {
		return true
	}

	return false
}

// SetTasksQuantity gets a reference to the given int32 and assigns it to the TasksQuantity field.
func (o *RoomTypeTaskType) SetTasksQuantity(v int32) {
	o.TasksQuantity = &v
}

func (o RoomTypeTaskType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypeTaskType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.TasksQuantity) {
		toSerialize["tasksQuantity"] = o.TasksQuantity
	}
	return toSerialize, nil
}

type NullableRoomTypeTaskType struct {
	value *RoomTypeTaskType
	isSet bool
}

func (v NullableRoomTypeTaskType) Get() *RoomTypeTaskType {
	return v.value
}

func (v *NullableRoomTypeTaskType) Set(val *RoomTypeTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypeTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypeTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypeTaskType(val *RoomTypeTaskType) *NullableRoomTypeTaskType {
	return &NullableRoomTypeTaskType{value: val, isSet: true}
}

func (v NullableRoomTypeTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypeTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


