/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the SetRoomConditionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetRoomConditionType{}

// SetRoomConditionType struct for SetRoomConditionType
type SetRoomConditionType struct {
	// The hotel code of the room on where the condition is applied.
	HotelId *string `json:"hotelId,omitempty"`
	// If set to true, condition is applied even if the room is occupied.
	IncludeOccupiedRooms *bool `json:"includeOccupiedRooms,omitempty"`
	// If set to true and the room is help by another user, then this lets the user override the room status.
	OverrideHoldRooms *bool `json:"overrideHoldRooms,omitempty"`
	RoomCondition *RoomConditionType `json:"roomCondition,omitempty"`
	RoomNumberList *CodeListType `json:"roomNumberList,omitempty"`
}

// NewSetRoomConditionType instantiates a new SetRoomConditionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetRoomConditionType() *SetRoomConditionType {
	this := SetRoomConditionType{}
	return &this
}

// NewSetRoomConditionTypeWithDefaults instantiates a new SetRoomConditionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetRoomConditionTypeWithDefaults() *SetRoomConditionType {
	this := SetRoomConditionType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SetRoomConditionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRoomConditionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SetRoomConditionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SetRoomConditionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIncludeOccupiedRooms returns the IncludeOccupiedRooms field value if set, zero value otherwise.
func (o *SetRoomConditionType) GetIncludeOccupiedRooms() bool {
	if o == nil || IsNil(o.IncludeOccupiedRooms) {
		var ret bool
		return ret
	}
	return *o.IncludeOccupiedRooms
}

// GetIncludeOccupiedRoomsOk returns a tuple with the IncludeOccupiedRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRoomConditionType) GetIncludeOccupiedRoomsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeOccupiedRooms) {
		return nil, false
	}
	return o.IncludeOccupiedRooms, true
}

// HasIncludeOccupiedRooms returns a boolean if a field has been set.
func (o *SetRoomConditionType) HasIncludeOccupiedRooms() bool {
	if o != nil && !IsNil(o.IncludeOccupiedRooms) {
		return true
	}

	return false
}

// SetIncludeOccupiedRooms gets a reference to the given bool and assigns it to the IncludeOccupiedRooms field.
func (o *SetRoomConditionType) SetIncludeOccupiedRooms(v bool) {
	o.IncludeOccupiedRooms = &v
}

// GetOverrideHoldRooms returns the OverrideHoldRooms field value if set, zero value otherwise.
func (o *SetRoomConditionType) GetOverrideHoldRooms() bool {
	if o == nil || IsNil(o.OverrideHoldRooms) {
		var ret bool
		return ret
	}
	return *o.OverrideHoldRooms
}

// GetOverrideHoldRoomsOk returns a tuple with the OverrideHoldRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRoomConditionType) GetOverrideHoldRoomsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideHoldRooms) {
		return nil, false
	}
	return o.OverrideHoldRooms, true
}

// HasOverrideHoldRooms returns a boolean if a field has been set.
func (o *SetRoomConditionType) HasOverrideHoldRooms() bool {
	if o != nil && !IsNil(o.OverrideHoldRooms) {
		return true
	}

	return false
}

// SetOverrideHoldRooms gets a reference to the given bool and assigns it to the OverrideHoldRooms field.
func (o *SetRoomConditionType) SetOverrideHoldRooms(v bool) {
	o.OverrideHoldRooms = &v
}

// GetRoomCondition returns the RoomCondition field value if set, zero value otherwise.
func (o *SetRoomConditionType) GetRoomCondition() RoomConditionType {
	if o == nil || IsNil(o.RoomCondition) {
		var ret RoomConditionType
		return ret
	}
	return *o.RoomCondition
}

// GetRoomConditionOk returns a tuple with the RoomCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRoomConditionType) GetRoomConditionOk() (*RoomConditionType, bool) {
	if o == nil || IsNil(o.RoomCondition) {
		return nil, false
	}
	return o.RoomCondition, true
}

// HasRoomCondition returns a boolean if a field has been set.
func (o *SetRoomConditionType) HasRoomCondition() bool {
	if o != nil && !IsNil(o.RoomCondition) {
		return true
	}

	return false
}

// SetRoomCondition gets a reference to the given RoomConditionType and assigns it to the RoomCondition field.
func (o *SetRoomConditionType) SetRoomCondition(v RoomConditionType) {
	o.RoomCondition = &v
}

// GetRoomNumberList returns the RoomNumberList field value if set, zero value otherwise.
func (o *SetRoomConditionType) GetRoomNumberList() CodeListType {
	if o == nil || IsNil(o.RoomNumberList) {
		var ret CodeListType
		return ret
	}
	return *o.RoomNumberList
}

// GetRoomNumberListOk returns a tuple with the RoomNumberList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRoomConditionType) GetRoomNumberListOk() (*CodeListType, bool) {
	if o == nil || IsNil(o.RoomNumberList) {
		return nil, false
	}
	return o.RoomNumberList, true
}

// HasRoomNumberList returns a boolean if a field has been set.
func (o *SetRoomConditionType) HasRoomNumberList() bool {
	if o != nil && !IsNil(o.RoomNumberList) {
		return true
	}

	return false
}

// SetRoomNumberList gets a reference to the given CodeListType and assigns it to the RoomNumberList field.
func (o *SetRoomConditionType) SetRoomNumberList(v CodeListType) {
	o.RoomNumberList = &v
}

func (o SetRoomConditionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetRoomConditionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IncludeOccupiedRooms) {
		toSerialize["includeOccupiedRooms"] = o.IncludeOccupiedRooms
	}
	if !IsNil(o.OverrideHoldRooms) {
		toSerialize["overrideHoldRooms"] = o.OverrideHoldRooms
	}
	if !IsNil(o.RoomCondition) {
		toSerialize["roomCondition"] = o.RoomCondition
	}
	if !IsNil(o.RoomNumberList) {
		toSerialize["roomNumberList"] = o.RoomNumberList
	}
	return toSerialize, nil
}

type NullableSetRoomConditionType struct {
	value *SetRoomConditionType
	isSet bool
}

func (v NullableSetRoomConditionType) Get() *SetRoomConditionType {
	return v.value
}

func (v *NullableSetRoomConditionType) Set(val *SetRoomConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSetRoomConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSetRoomConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetRoomConditionType(val *SetRoomConditionType) *NullableSetRoomConditionType {
	return &NullableSetRoomConditionType{value: val, isSet: true}
}

func (v NullableSetRoomConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetRoomConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


