/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the FacilityForecastFacilityForecastDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacilityForecastFacilityForecastDetails{}

// FacilityForecastFacilityForecastDetails Facility Forecase type
type FacilityForecastFacilityForecastDetails struct {
	// The facility forecast information.
	Tasks []FacilityTaskForecastType `json:"tasks,omitempty"`
	Totals *FacilityTotalForecastType `json:"totals,omitempty"`
}

// NewFacilityForecastFacilityForecastDetails instantiates a new FacilityForecastFacilityForecastDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacilityForecastFacilityForecastDetails() *FacilityForecastFacilityForecastDetails {
	this := FacilityForecastFacilityForecastDetails{}
	return &this
}

// NewFacilityForecastFacilityForecastDetailsWithDefaults instantiates a new FacilityForecastFacilityForecastDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacilityForecastFacilityForecastDetailsWithDefaults() *FacilityForecastFacilityForecastDetails {
	this := FacilityForecastFacilityForecastDetails{}
	return &this
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *FacilityForecastFacilityForecastDetails) GetTasks() []FacilityTaskForecastType {
	if o == nil || IsNil(o.Tasks) {
		var ret []FacilityTaskForecastType
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacilityForecastFacilityForecastDetails) GetTasksOk() ([]FacilityTaskForecastType, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *FacilityForecastFacilityForecastDetails) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []FacilityTaskForecastType and assigns it to the Tasks field.
func (o *FacilityForecastFacilityForecastDetails) SetTasks(v []FacilityTaskForecastType) {
	o.Tasks = v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *FacilityForecastFacilityForecastDetails) GetTotals() FacilityTotalForecastType {
	if o == nil || IsNil(o.Totals) {
		var ret FacilityTotalForecastType
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacilityForecastFacilityForecastDetails) GetTotalsOk() (*FacilityTotalForecastType, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *FacilityForecastFacilityForecastDetails) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given FacilityTotalForecastType and assigns it to the Totals field.
func (o *FacilityForecastFacilityForecastDetails) SetTotals(v FacilityTotalForecastType) {
	o.Totals = &v
}

func (o FacilityForecastFacilityForecastDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacilityForecastFacilityForecastDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Totals) {
		toSerialize["totals"] = o.Totals
	}
	return toSerialize, nil
}

type NullableFacilityForecastFacilityForecastDetails struct {
	value *FacilityForecastFacilityForecastDetails
	isSet bool
}

func (v NullableFacilityForecastFacilityForecastDetails) Get() *FacilityForecastFacilityForecastDetails {
	return v.value
}

func (v *NullableFacilityForecastFacilityForecastDetails) Set(val *FacilityForecastFacilityForecastDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityForecastFacilityForecastDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityForecastFacilityForecastDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityForecastFacilityForecastDetails(val *FacilityForecastFacilityForecastDetails) *NullableFacilityForecastFacilityForecastDetails {
	return &NullableFacilityForecastFacilityForecastDetails{value: val, isSet: true}
}

func (v NullableFacilityForecastFacilityForecastDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityForecastFacilityForecastDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


