/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomTypeTasksType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypeTasksType{}

// RoomTypeTasksType This is a break-down of the different room types and their tasks count on a date.
type RoomTypeTasksType struct {
	Items []RoomTypeTaskType
}

// NewRoomTypeTasksType instantiates a new RoomTypeTasksType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypeTasksType() *RoomTypeTasksType {
	this := RoomTypeTasksType{}
	return &this
}

// NewRoomTypeTasksTypeWithDefaults instantiates a new RoomTypeTasksType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypeTasksTypeWithDefaults() *RoomTypeTasksType {
	this := RoomTypeTasksType{}
	return &this
}

func (o RoomTypeTasksType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypeTasksType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *RoomTypeTasksType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableRoomTypeTasksType struct {
	value RoomTypeTasksType
	isSet bool
}

func (v NullableRoomTypeTasksType) Get() RoomTypeTasksType {
	return v.value
}

func (v *NullableRoomTypeTasksType) Set(val RoomTypeTasksType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypeTasksType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypeTasksType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypeTasksType(val RoomTypeTasksType) *NullableRoomTypeTasksType {
	return &NullableRoomTypeTasksType{value: val, isSet: true}
}

func (v NullableRoomTypeTasksType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypeTasksType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


