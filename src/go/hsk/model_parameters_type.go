/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the ParametersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParametersType{}

// ParametersType Collection of generic Name-Value-Pair parameters.
type ParametersType struct {
	Items []ParameterType
}

// NewParametersType instantiates a new ParametersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParametersType() *ParametersType {
	this := ParametersType{}
	return &this
}

// NewParametersTypeWithDefaults instantiates a new ParametersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersTypeWithDefaults() *ParametersType {
	this := ParametersType{}
	return &this
}

func (o ParametersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParametersType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *ParametersType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableParametersType struct {
	value ParametersType
	isSet bool
}

func (v NullableParametersType) Get() ParametersType {
	return v.value
}

func (v *NullableParametersType) Set(val ParametersType) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersType) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersType(val ParametersType) *NullableParametersType {
	return &NullableParametersType{value: val, isSet: true}
}

func (v NullableParametersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


