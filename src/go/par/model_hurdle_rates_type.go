/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the HurdleRatesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HurdleRatesType{}

// HurdleRatesType Details for hurdle rate.
type HurdleRatesType struct {
	Items []HurdleRateType
}

// NewHurdleRatesType instantiates a new HurdleRatesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHurdleRatesType() *HurdleRatesType {
	this := HurdleRatesType{}
	return &this
}

// NewHurdleRatesTypeWithDefaults instantiates a new HurdleRatesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHurdleRatesTypeWithDefaults() *HurdleRatesType {
	this := HurdleRatesType{}
	return &this
}

func (o HurdleRatesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HurdleRatesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *HurdleRatesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableHurdleRatesType struct {
	value HurdleRatesType
	isSet bool
}

func (v NullableHurdleRatesType) Get() HurdleRatesType {
	return v.value
}

func (v *NullableHurdleRatesType) Set(val HurdleRatesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHurdleRatesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHurdleRatesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHurdleRatesType(val HurdleRatesType) *NullableHurdleRatesType {
	return &NullableHurdleRatesType{value: val, isSet: true}
}

func (v NullableHurdleRatesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHurdleRatesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


