/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
	"fmt"
)

// RateChangeTypeType Indicates the rate amount returned is first night or highest rate.
type RateChangeTypeType string

// List of rateChangeTypeType
const (
	RATECHANGETYPETYPE_FIRST_NIGHT RateChangeTypeType = "FirstNight"
	RATECHANGETYPETYPE_HIGHEST RateChangeTypeType = "Highest"
	RATECHANGETYPETYPE_LOWEST RateChangeTypeType = "Lowest"
	RATECHANGETYPETYPE_MOST_COMMON RateChangeTypeType = "MostCommon"
	RATECHANGETYPETYPE_AVERAGE RateChangeTypeType = "Average"
)

// All allowed values of RateChangeTypeType enum
var AllowedRateChangeTypeTypeEnumValues = []RateChangeTypeType{
	"FirstNight",
	"Highest",
	"Lowest",
	"MostCommon",
	"Average",
}

func (v *RateChangeTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RateChangeTypeType(value)
	for _, existing := range AllowedRateChangeTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RateChangeTypeType", value)
}

// NewRateChangeTypeTypeFromValue returns a pointer to a valid RateChangeTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRateChangeTypeTypeFromValue(v string) (*RateChangeTypeType, error) {
	ev := RateChangeTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RateChangeTypeType: valid values are %v", v, AllowedRateChangeTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RateChangeTypeType) IsValid() bool {
	for _, existing := range AllowedRateChangeTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rateChangeTypeType value
func (v RateChangeTypeType) Ptr() *RateChangeTypeType {
	return &v
}

type NullableRateChangeTypeType struct {
	value *RateChangeTypeType
	isSet bool
}

func (v NullableRateChangeTypeType) Get() *RateChangeTypeType {
	return v.value
}

func (v *NullableRateChangeTypeType) Set(val *RateChangeTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateChangeTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateChangeTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateChangeTypeType(val *RateChangeTypeType) *NullableRateChangeTypeType {
	return &NullableRateChangeTypeType{value: val, isSet: true}
}

func (v NullableRateChangeTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateChangeTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

