/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RequestedAvailablePreferenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestedAvailablePreferenceType{}

// RequestedAvailablePreferenceType struct for RequestedAvailablePreferenceType
type RequestedAvailablePreferenceType struct {
	AvailableCode *string `json:"availableCode,omitempty"`
	RequestedCode *string `json:"requestedCode,omitempty"`
}

// NewRequestedAvailablePreferenceType instantiates a new RequestedAvailablePreferenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestedAvailablePreferenceType() *RequestedAvailablePreferenceType {
	this := RequestedAvailablePreferenceType{}
	return &this
}

// NewRequestedAvailablePreferenceTypeWithDefaults instantiates a new RequestedAvailablePreferenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestedAvailablePreferenceTypeWithDefaults() *RequestedAvailablePreferenceType {
	this := RequestedAvailablePreferenceType{}
	return &this
}

// GetAvailableCode returns the AvailableCode field value if set, zero value otherwise.
func (o *RequestedAvailablePreferenceType) GetAvailableCode() string {
	if o == nil || IsNil(o.AvailableCode) {
		var ret string
		return ret
	}
	return *o.AvailableCode
}

// GetAvailableCodeOk returns a tuple with the AvailableCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedAvailablePreferenceType) GetAvailableCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableCode) {
		return nil, false
	}
	return o.AvailableCode, true
}

// HasAvailableCode returns a boolean if a field has been set.
func (o *RequestedAvailablePreferenceType) HasAvailableCode() bool {
	if o != nil && !IsNil(o.AvailableCode) {
		return true
	}

	return false
}

// SetAvailableCode gets a reference to the given string and assigns it to the AvailableCode field.
func (o *RequestedAvailablePreferenceType) SetAvailableCode(v string) {
	o.AvailableCode = &v
}

// GetRequestedCode returns the RequestedCode field value if set, zero value otherwise.
func (o *RequestedAvailablePreferenceType) GetRequestedCode() string {
	if o == nil || IsNil(o.RequestedCode) {
		var ret string
		return ret
	}
	return *o.RequestedCode
}

// GetRequestedCodeOk returns a tuple with the RequestedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedAvailablePreferenceType) GetRequestedCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedCode) {
		return nil, false
	}
	return o.RequestedCode, true
}

// HasRequestedCode returns a boolean if a field has been set.
func (o *RequestedAvailablePreferenceType) HasRequestedCode() bool {
	if o != nil && !IsNil(o.RequestedCode) {
		return true
	}

	return false
}

// SetRequestedCode gets a reference to the given string and assigns it to the RequestedCode field.
func (o *RequestedAvailablePreferenceType) SetRequestedCode(v string) {
	o.RequestedCode = &v
}

func (o RequestedAvailablePreferenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestedAvailablePreferenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableCode) {
		toSerialize["availableCode"] = o.AvailableCode
	}
	if !IsNil(o.RequestedCode) {
		toSerialize["requestedCode"] = o.RequestedCode
	}
	return toSerialize, nil
}

type NullableRequestedAvailablePreferenceType struct {
	value *RequestedAvailablePreferenceType
	isSet bool
}

func (v NullableRequestedAvailablePreferenceType) Get() *RequestedAvailablePreferenceType {
	return v.value
}

func (v *NullableRequestedAvailablePreferenceType) Set(val *RequestedAvailablePreferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedAvailablePreferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedAvailablePreferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedAvailablePreferenceType(val *RequestedAvailablePreferenceType) *NullableRequestedAvailablePreferenceType {
	return &NullableRequestedAvailablePreferenceType{value: val, isSet: true}
}

func (v NullableRequestedAvailablePreferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedAvailablePreferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


