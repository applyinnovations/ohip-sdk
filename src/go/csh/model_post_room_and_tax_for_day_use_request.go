/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostRoomAndTaxForDayUseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRoomAndTaxForDayUseRequest{}

// PostRoomAndTaxForDayUseRequest struct for PostRoomAndTaxForDayUseRequest
type PostRoomAndTaxForDayUseRequest struct {
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	ReservationId *UniqueIDType `json:"reservationId,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostRoomAndTaxForDayUseRequest instantiates a new PostRoomAndTaxForDayUseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRoomAndTaxForDayUseRequest() *PostRoomAndTaxForDayUseRequest {
	this := PostRoomAndTaxForDayUseRequest{}
	return &this
}

// NewPostRoomAndTaxForDayUseRequestWithDefaults instantiates a new PostRoomAndTaxForDayUseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRoomAndTaxForDayUseRequestWithDefaults() *PostRoomAndTaxForDayUseRequest {
	this := PostRoomAndTaxForDayUseRequest{}
	return &this
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *PostRoomAndTaxForDayUseRequest) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRoomAndTaxForDayUseRequest) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *PostRoomAndTaxForDayUseRequest) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *PostRoomAndTaxForDayUseRequest) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *PostRoomAndTaxForDayUseRequest) GetReservationId() UniqueIDType {
	if o == nil || IsNil(o.ReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRoomAndTaxForDayUseRequest) GetReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *PostRoomAndTaxForDayUseRequest) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given UniqueIDType and assigns it to the ReservationId field.
func (o *PostRoomAndTaxForDayUseRequest) SetReservationId(v UniqueIDType) {
	o.ReservationId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostRoomAndTaxForDayUseRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRoomAndTaxForDayUseRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostRoomAndTaxForDayUseRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostRoomAndTaxForDayUseRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostRoomAndTaxForDayUseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRoomAndTaxForDayUseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostRoomAndTaxForDayUseRequest struct {
	value *PostRoomAndTaxForDayUseRequest
	isSet bool
}

func (v NullablePostRoomAndTaxForDayUseRequest) Get() *PostRoomAndTaxForDayUseRequest {
	return v.value
}

func (v *NullablePostRoomAndTaxForDayUseRequest) Set(val *PostRoomAndTaxForDayUseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRoomAndTaxForDayUseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRoomAndTaxForDayUseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRoomAndTaxForDayUseRequest(val *PostRoomAndTaxForDayUseRequest) *NullablePostRoomAndTaxForDayUseRequest {
	return &NullablePostRoomAndTaxForDayUseRequest{value: val, isSet: true}
}

func (v NullablePostRoomAndTaxForDayUseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRoomAndTaxForDayUseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


