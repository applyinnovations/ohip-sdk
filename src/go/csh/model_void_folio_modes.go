/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// VoidFolioModes Different modes to perform void folio.
type VoidFolioModes string

// List of voidFolioModes
const (
	VOIDFOLIOMODES_INVOICE VoidFolioModes = "Invoice"
	VOIDFOLIOMODES_INFO_FOLIO VoidFolioModes = "InfoFolio"
	VOIDFOLIOMODES_CREDIT_FOLIO VoidFolioModes = "CreditFolio"
	VOIDFOLIOMODES_DEPOSIT_FOLIO VoidFolioModes = "DepositFolio"
	VOIDFOLIOMODES_POST_IT VoidFolioModes = "PostIt"
	VOIDFOLIOMODES_PASSER_BY VoidFolioModes = "PasserBy"
	VOIDFOLIOMODES_VOID_FOLIO VoidFolioModes = "VoidFolio"
	VOIDFOLIOMODES_SUPPLEMENTAL_FOLIO VoidFolioModes = "SupplementalFolio"
	VOIDFOLIOMODES_SEND_FISCAL_FOLIO VoidFolioModes = "SendFiscalFolio"
	VOIDFOLIOMODES_RESEND_FOLIO VoidFolioModes = "ResendFolio"
)

// All allowed values of VoidFolioModes enum
var AllowedVoidFolioModesEnumValues = []VoidFolioModes{
	"Invoice",
	"InfoFolio",
	"CreditFolio",
	"DepositFolio",
	"PostIt",
	"PasserBy",
	"VoidFolio",
	"SupplementalFolio",
	"SendFiscalFolio",
	"ResendFolio",
}

func (v *VoidFolioModes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VoidFolioModes(value)
	for _, existing := range AllowedVoidFolioModesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VoidFolioModes", value)
}

// NewVoidFolioModesFromValue returns a pointer to a valid VoidFolioModes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVoidFolioModesFromValue(v string) (*VoidFolioModes, error) {
	ev := VoidFolioModes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VoidFolioModes: valid values are %v", v, AllowedVoidFolioModesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VoidFolioModes) IsValid() bool {
	for _, existing := range AllowedVoidFolioModesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to voidFolioModes value
func (v VoidFolioModes) Ptr() *VoidFolioModes {
	return &v
}

type NullableVoidFolioModes struct {
	value *VoidFolioModes
	isSet bool
}

func (v NullableVoidFolioModes) Get() *VoidFolioModes {
	return v.value
}

func (v *NullableVoidFolioModes) Set(val *VoidFolioModes) {
	v.value = val
	v.isSet = true
}

func (v NullableVoidFolioModes) IsSet() bool {
	return v.isSet
}

func (v *NullableVoidFolioModes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoidFolioModes(val *VoidFolioModes) *NullableVoidFolioModes {
	return &NullableVoidFolioModes{value: val, isSet: true}
}

func (v NullableVoidFolioModes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoidFolioModes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

