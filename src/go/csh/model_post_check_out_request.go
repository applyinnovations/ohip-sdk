/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostCheckOutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCheckOutRequest{}

// PostCheckOutRequest struct for PostCheckOutRequest
type PostCheckOutRequest struct {
	Links *Links `json:"links,omitempty"`
	Reservation *CheckoutReservationType `json:"reservation,omitempty"`
	// VerificationOnly \"true\" validates the hotel code and reservation id supplied in the request. VerificationOnly \"false\" validates and then check-out the guest using the request details. Following codes might be returned during the verification: FOF00065 - The hotel code and/or reservation id is missing. FOF00066 - Reservation can't be found with the supplied hotel code and reservation id. FOF00107 - The guest's departure is not scheduled for today. Check-out not possible. FOF00109 - The guest's reservation is not in a valid status for check-out. FOF00108 - The guest has a balance. Check-out not possible.
	VerificationOnly *bool `json:"verificationOnly,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostCheckOutRequest instantiates a new PostCheckOutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCheckOutRequest() *PostCheckOutRequest {
	this := PostCheckOutRequest{}
	return &this
}

// NewPostCheckOutRequestWithDefaults instantiates a new PostCheckOutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCheckOutRequestWithDefaults() *PostCheckOutRequest {
	this := PostCheckOutRequest{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostCheckOutRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCheckOutRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostCheckOutRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostCheckOutRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *PostCheckOutRequest) GetReservation() CheckoutReservationType {
	if o == nil || IsNil(o.Reservation) {
		var ret CheckoutReservationType
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCheckOutRequest) GetReservationOk() (*CheckoutReservationType, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *PostCheckOutRequest) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given CheckoutReservationType and assigns it to the Reservation field.
func (o *PostCheckOutRequest) SetReservation(v CheckoutReservationType) {
	o.Reservation = &v
}

// GetVerificationOnly returns the VerificationOnly field value if set, zero value otherwise.
func (o *PostCheckOutRequest) GetVerificationOnly() bool {
	if o == nil || IsNil(o.VerificationOnly) {
		var ret bool
		return ret
	}
	return *o.VerificationOnly
}

// GetVerificationOnlyOk returns a tuple with the VerificationOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCheckOutRequest) GetVerificationOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.VerificationOnly) {
		return nil, false
	}
	return o.VerificationOnly, true
}

// HasVerificationOnly returns a boolean if a field has been set.
func (o *PostCheckOutRequest) HasVerificationOnly() bool {
	if o != nil && !IsNil(o.VerificationOnly) {
		return true
	}

	return false
}

// SetVerificationOnly gets a reference to the given bool and assigns it to the VerificationOnly field.
func (o *PostCheckOutRequest) SetVerificationOnly(v bool) {
	o.VerificationOnly = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostCheckOutRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCheckOutRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostCheckOutRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostCheckOutRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostCheckOutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCheckOutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	if !IsNil(o.VerificationOnly) {
		toSerialize["verificationOnly"] = o.VerificationOnly
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostCheckOutRequest struct {
	value *PostCheckOutRequest
	isSet bool
}

func (v NullablePostCheckOutRequest) Get() *PostCheckOutRequest {
	return v.value
}

func (v *NullablePostCheckOutRequest) Set(val *PostCheckOutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCheckOutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCheckOutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCheckOutRequest(val *PostCheckOutRequest) *NullablePostCheckOutRequest {
	return &NullablePostCheckOutRequest{value: val, isSet: true}
}

func (v NullablePostCheckOutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCheckOutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


