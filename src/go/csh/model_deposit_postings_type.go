/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the DepositPostingsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepositPostingsType{}

// DepositPostingsType A List of Deposit Payments.
type DepositPostingsType struct {
	Items []DepositPostingType
}

// NewDepositPostingsType instantiates a new DepositPostingsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositPostingsType() *DepositPostingsType {
	this := DepositPostingsType{}
	return &this
}

// NewDepositPostingsTypeWithDefaults instantiates a new DepositPostingsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositPostingsTypeWithDefaults() *DepositPostingsType {
	this := DepositPostingsType{}
	return &this
}

func (o DepositPostingsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepositPostingsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *DepositPostingsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableDepositPostingsType struct {
	value DepositPostingsType
	isSet bool
}

func (v NullableDepositPostingsType) Get() DepositPostingsType {
	return v.value
}

func (v *NullableDepositPostingsType) Set(val DepositPostingsType) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositPostingsType) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositPostingsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositPostingsType(val DepositPostingsType) *NullableDepositPostingsType {
	return &NullableDepositPostingsType{value: val, isSet: true}
}

func (v NullableDepositPostingsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositPostingsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


