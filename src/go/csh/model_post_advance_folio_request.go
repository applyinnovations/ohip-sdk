/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostAdvanceFolioRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAdvanceFolioRequest{}

// PostAdvanceFolioRequest struct for PostAdvanceFolioRequest
type PostAdvanceFolioRequest struct {
	BatchAdvanceFolio *BatchAdvanceFolioType `json:"batchAdvanceFolio,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPostAdvanceFolioRequest instantiates a new PostAdvanceFolioRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAdvanceFolioRequest() *PostAdvanceFolioRequest {
	this := PostAdvanceFolioRequest{}
	return &this
}

// NewPostAdvanceFolioRequestWithDefaults instantiates a new PostAdvanceFolioRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAdvanceFolioRequestWithDefaults() *PostAdvanceFolioRequest {
	this := PostAdvanceFolioRequest{}
	return &this
}

// GetBatchAdvanceFolio returns the BatchAdvanceFolio field value if set, zero value otherwise.
func (o *PostAdvanceFolioRequest) GetBatchAdvanceFolio() BatchAdvanceFolioType {
	if o == nil || IsNil(o.BatchAdvanceFolio) {
		var ret BatchAdvanceFolioType
		return ret
	}
	return *o.BatchAdvanceFolio
}

// GetBatchAdvanceFolioOk returns a tuple with the BatchAdvanceFolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAdvanceFolioRequest) GetBatchAdvanceFolioOk() (*BatchAdvanceFolioType, bool) {
	if o == nil || IsNil(o.BatchAdvanceFolio) {
		return nil, false
	}
	return o.BatchAdvanceFolio, true
}

// HasBatchAdvanceFolio returns a boolean if a field has been set.
func (o *PostAdvanceFolioRequest) HasBatchAdvanceFolio() bool {
	if o != nil && !IsNil(o.BatchAdvanceFolio) {
		return true
	}

	return false
}

// SetBatchAdvanceFolio gets a reference to the given BatchAdvanceFolioType and assigns it to the BatchAdvanceFolio field.
func (o *PostAdvanceFolioRequest) SetBatchAdvanceFolio(v BatchAdvanceFolioType) {
	o.BatchAdvanceFolio = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostAdvanceFolioRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAdvanceFolioRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostAdvanceFolioRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PostAdvanceFolioRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostAdvanceFolioRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAdvanceFolioRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostAdvanceFolioRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PostAdvanceFolioRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PostAdvanceFolioRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAdvanceFolioRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchAdvanceFolio) {
		toSerialize["batchAdvanceFolio"] = o.BatchAdvanceFolio
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostAdvanceFolioRequest struct {
	value *PostAdvanceFolioRequest
	isSet bool
}

func (v NullablePostAdvanceFolioRequest) Get() *PostAdvanceFolioRequest {
	return v.value
}

func (v *NullablePostAdvanceFolioRequest) Set(val *PostAdvanceFolioRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAdvanceFolioRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAdvanceFolioRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAdvanceFolioRequest(val *PostAdvanceFolioRequest) *NullablePostAdvanceFolioRequest {
	return &NullablePostAdvanceFolioRequest{value: val, isSet: true}
}

func (v NullablePostAdvanceFolioRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAdvanceFolioRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


