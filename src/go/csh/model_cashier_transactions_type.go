/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CashierTransactionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierTransactionsType{}

// CashierTransactionsType Cashier Shift Totals and Per Hotel transactions group by transaction code
type CashierTransactionsType struct {
	CashierInfo *CashierClosureNoType `json:"cashierInfo,omitempty"`
	// Hotel's transactions during Cashier Shift.
	HotelTransactionList []HotelCashierTransactionType `json:"hotelTransactionList,omitempty"`
	// Summary of all transactions during Cashier Shift.
	SummaryTransactionList []CashierTransactionType `json:"summaryTransactionList,omitempty"`
	TrxCodesInfo *TrxCodesInfoType `json:"trxCodesInfo,omitempty"`
}

// NewCashierTransactionsType instantiates a new CashierTransactionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierTransactionsType() *CashierTransactionsType {
	this := CashierTransactionsType{}
	return &this
}

// NewCashierTransactionsTypeWithDefaults instantiates a new CashierTransactionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierTransactionsTypeWithDefaults() *CashierTransactionsType {
	this := CashierTransactionsType{}
	return &this
}

// GetCashierInfo returns the CashierInfo field value if set, zero value otherwise.
func (o *CashierTransactionsType) GetCashierInfo() CashierClosureNoType {
	if o == nil || IsNil(o.CashierInfo) {
		var ret CashierClosureNoType
		return ret
	}
	return *o.CashierInfo
}

// GetCashierInfoOk returns a tuple with the CashierInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTransactionsType) GetCashierInfoOk() (*CashierClosureNoType, bool) {
	if o == nil || IsNil(o.CashierInfo) {
		return nil, false
	}
	return o.CashierInfo, true
}

// HasCashierInfo returns a boolean if a field has been set.
func (o *CashierTransactionsType) HasCashierInfo() bool {
	if o != nil && !IsNil(o.CashierInfo) {
		return true
	}

	return false
}

// SetCashierInfo gets a reference to the given CashierClosureNoType and assigns it to the CashierInfo field.
func (o *CashierTransactionsType) SetCashierInfo(v CashierClosureNoType) {
	o.CashierInfo = &v
}

// GetHotelTransactionList returns the HotelTransactionList field value if set, zero value otherwise.
func (o *CashierTransactionsType) GetHotelTransactionList() []HotelCashierTransactionType {
	if o == nil || IsNil(o.HotelTransactionList) {
		var ret []HotelCashierTransactionType
		return ret
	}
	return o.HotelTransactionList
}

// GetHotelTransactionListOk returns a tuple with the HotelTransactionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTransactionsType) GetHotelTransactionListOk() ([]HotelCashierTransactionType, bool) {
	if o == nil || IsNil(o.HotelTransactionList) {
		return nil, false
	}
	return o.HotelTransactionList, true
}

// HasHotelTransactionList returns a boolean if a field has been set.
func (o *CashierTransactionsType) HasHotelTransactionList() bool {
	if o != nil && !IsNil(o.HotelTransactionList) {
		return true
	}

	return false
}

// SetHotelTransactionList gets a reference to the given []HotelCashierTransactionType and assigns it to the HotelTransactionList field.
func (o *CashierTransactionsType) SetHotelTransactionList(v []HotelCashierTransactionType) {
	o.HotelTransactionList = v
}

// GetSummaryTransactionList returns the SummaryTransactionList field value if set, zero value otherwise.
func (o *CashierTransactionsType) GetSummaryTransactionList() []CashierTransactionType {
	if o == nil || IsNil(o.SummaryTransactionList) {
		var ret []CashierTransactionType
		return ret
	}
	return o.SummaryTransactionList
}

// GetSummaryTransactionListOk returns a tuple with the SummaryTransactionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTransactionsType) GetSummaryTransactionListOk() ([]CashierTransactionType, bool) {
	if o == nil || IsNil(o.SummaryTransactionList) {
		return nil, false
	}
	return o.SummaryTransactionList, true
}

// HasSummaryTransactionList returns a boolean if a field has been set.
func (o *CashierTransactionsType) HasSummaryTransactionList() bool {
	if o != nil && !IsNil(o.SummaryTransactionList) {
		return true
	}

	return false
}

// SetSummaryTransactionList gets a reference to the given []CashierTransactionType and assigns it to the SummaryTransactionList field.
func (o *CashierTransactionsType) SetSummaryTransactionList(v []CashierTransactionType) {
	o.SummaryTransactionList = v
}

// GetTrxCodesInfo returns the TrxCodesInfo field value if set, zero value otherwise.
func (o *CashierTransactionsType) GetTrxCodesInfo() TrxCodesInfoType {
	if o == nil || IsNil(o.TrxCodesInfo) {
		var ret TrxCodesInfoType
		return ret
	}
	return *o.TrxCodesInfo
}

// GetTrxCodesInfoOk returns a tuple with the TrxCodesInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTransactionsType) GetTrxCodesInfoOk() (*TrxCodesInfoType, bool) {
	if o == nil || IsNil(o.TrxCodesInfo) {
		return nil, false
	}
	return o.TrxCodesInfo, true
}

// HasTrxCodesInfo returns a boolean if a field has been set.
func (o *CashierTransactionsType) HasTrxCodesInfo() bool {
	if o != nil && !IsNil(o.TrxCodesInfo) {
		return true
	}

	return false
}

// SetTrxCodesInfo gets a reference to the given TrxCodesInfoType and assigns it to the TrxCodesInfo field.
func (o *CashierTransactionsType) SetTrxCodesInfo(v TrxCodesInfoType) {
	o.TrxCodesInfo = &v
}

func (o CashierTransactionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierTransactionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierInfo) {
		toSerialize["cashierInfo"] = o.CashierInfo
	}
	if !IsNil(o.HotelTransactionList) {
		toSerialize["hotelTransactionList"] = o.HotelTransactionList
	}
	if !IsNil(o.SummaryTransactionList) {
		toSerialize["summaryTransactionList"] = o.SummaryTransactionList
	}
	if !IsNil(o.TrxCodesInfo) {
		toSerialize["trxCodesInfo"] = o.TrxCodesInfo
	}
	return toSerialize, nil
}

type NullableCashierTransactionsType struct {
	value *CashierTransactionsType
	isSet bool
}

func (v NullableCashierTransactionsType) Get() *CashierTransactionsType {
	return v.value
}

func (v *NullableCashierTransactionsType) Set(val *CashierTransactionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierTransactionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierTransactionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierTransactionsType(val *CashierTransactionsType) *NullableCashierTransactionsType {
	return &NullableCashierTransactionsType{value: val, isSet: true}
}

func (v NullableCashierTransactionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierTransactionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


