/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the BenefitType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BenefitType{}

// BenefitType Basic information about membership benefit.
type BenefitType struct {
	// Benefit code associated with a membership.
	Code *string `json:"code,omitempty"`
	// Indicates whether membership benefit is active or inactive.
	Inactive *bool `json:"inactive,omitempty"`
	// Processing message for membership benefit.
	Message *string `json:"message,omitempty"`
}

// NewBenefitType instantiates a new BenefitType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenefitType() *BenefitType {
	this := BenefitType{}
	return &this
}

// NewBenefitTypeWithDefaults instantiates a new BenefitType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenefitTypeWithDefaults() *BenefitType {
	this := BenefitType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BenefitType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenefitType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BenefitType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BenefitType) SetCode(v string) {
	o.Code = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *BenefitType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenefitType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *BenefitType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *BenefitType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BenefitType) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenefitType) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BenefitType) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BenefitType) SetMessage(v string) {
	o.Message = &v
}

func (o BenefitType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BenefitType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableBenefitType struct {
	value *BenefitType
	isSet bool
}

func (v NullableBenefitType) Get() *BenefitType {
	return v.value
}

func (v *NullableBenefitType) Set(val *BenefitType) {
	v.value = val
	v.isSet = true
}

func (v NullableBenefitType) IsSet() bool {
	return v.isSet
}

func (v *NullableBenefitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenefitType(val *BenefitType) *NullableBenefitType {
	return &NullableBenefitType{value: val, isSet: true}
}

func (v NullableBenefitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenefitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


