/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the RoomRoutingRefreshCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomRoutingRefreshCriteriaType{}

// RoomRoutingRefreshCriteriaType Criteria for refreshing the routing instruction set.
type RoomRoutingRefreshCriteriaType struct {
	// Flag to indicate whether to fetch transaction from both reservations.
	FromBothResvs *bool `json:"fromBothResvs,omitempty"`
	// Property code where the routing instruction set exists.
	HotelId *string `json:"hotelId,omitempty"`
	Instructions *RoutingInstructionType `json:"instructions,omitempty"`
	OriginalTargetResvNameId *UniqueIDType `json:"originalTargetResvNameId,omitempty"`
	ResvNameId *UniqueIDType `json:"resvNameId,omitempty"`
	Status *RoutingInstructionStatusType `json:"status,omitempty"`
	TargetResvNameId *UniqueIDType `json:"targetResvNameId,omitempty"`
	// Unique Transaction Number of the transaction(posting) which need to be transferred.
	Transactions []float32 `json:"transactions,omitempty"`
}

// NewRoomRoutingRefreshCriteriaType instantiates a new RoomRoutingRefreshCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomRoutingRefreshCriteriaType() *RoomRoutingRefreshCriteriaType {
	this := RoomRoutingRefreshCriteriaType{}
	return &this
}

// NewRoomRoutingRefreshCriteriaTypeWithDefaults instantiates a new RoomRoutingRefreshCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomRoutingRefreshCriteriaTypeWithDefaults() *RoomRoutingRefreshCriteriaType {
	this := RoomRoutingRefreshCriteriaType{}
	return &this
}

// GetFromBothResvs returns the FromBothResvs field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetFromBothResvs() bool {
	if o == nil || IsNil(o.FromBothResvs) {
		var ret bool
		return ret
	}
	return *o.FromBothResvs
}

// GetFromBothResvsOk returns a tuple with the FromBothResvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetFromBothResvsOk() (*bool, bool) {
	if o == nil || IsNil(o.FromBothResvs) {
		return nil, false
	}
	return o.FromBothResvs, true
}

// HasFromBothResvs returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasFromBothResvs() bool {
	if o != nil && !IsNil(o.FromBothResvs) {
		return true
	}

	return false
}

// SetFromBothResvs gets a reference to the given bool and assigns it to the FromBothResvs field.
func (o *RoomRoutingRefreshCriteriaType) SetFromBothResvs(v bool) {
	o.FromBothResvs = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomRoutingRefreshCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetInstructions() RoutingInstructionType {
	if o == nil || IsNil(o.Instructions) {
		var ret RoutingInstructionType
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetInstructionsOk() (*RoutingInstructionType, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given RoutingInstructionType and assigns it to the Instructions field.
func (o *RoomRoutingRefreshCriteriaType) SetInstructions(v RoutingInstructionType) {
	o.Instructions = &v
}

// GetOriginalTargetResvNameId returns the OriginalTargetResvNameId field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetOriginalTargetResvNameId() UniqueIDType {
	if o == nil || IsNil(o.OriginalTargetResvNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.OriginalTargetResvNameId
}

// GetOriginalTargetResvNameIdOk returns a tuple with the OriginalTargetResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetOriginalTargetResvNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.OriginalTargetResvNameId) {
		return nil, false
	}
	return o.OriginalTargetResvNameId, true
}

// HasOriginalTargetResvNameId returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasOriginalTargetResvNameId() bool {
	if o != nil && !IsNil(o.OriginalTargetResvNameId) {
		return true
	}

	return false
}

// SetOriginalTargetResvNameId gets a reference to the given UniqueIDType and assigns it to the OriginalTargetResvNameId field.
func (o *RoomRoutingRefreshCriteriaType) SetOriginalTargetResvNameId(v UniqueIDType) {
	o.OriginalTargetResvNameId = &v
}

// GetResvNameId returns the ResvNameId field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetResvNameId() UniqueIDType {
	if o == nil || IsNil(o.ResvNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ResvNameId
}

// GetResvNameIdOk returns a tuple with the ResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetResvNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ResvNameId) {
		return nil, false
	}
	return o.ResvNameId, true
}

// HasResvNameId returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasResvNameId() bool {
	if o != nil && !IsNil(o.ResvNameId) {
		return true
	}

	return false
}

// SetResvNameId gets a reference to the given UniqueIDType and assigns it to the ResvNameId field.
func (o *RoomRoutingRefreshCriteriaType) SetResvNameId(v UniqueIDType) {
	o.ResvNameId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetStatus() RoutingInstructionStatusType {
	if o == nil || IsNil(o.Status) {
		var ret RoutingInstructionStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetStatusOk() (*RoutingInstructionStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RoutingInstructionStatusType and assigns it to the Status field.
func (o *RoomRoutingRefreshCriteriaType) SetStatus(v RoutingInstructionStatusType) {
	o.Status = &v
}

// GetTargetResvNameId returns the TargetResvNameId field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetTargetResvNameId() UniqueIDType {
	if o == nil || IsNil(o.TargetResvNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.TargetResvNameId
}

// GetTargetResvNameIdOk returns a tuple with the TargetResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetTargetResvNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.TargetResvNameId) {
		return nil, false
	}
	return o.TargetResvNameId, true
}

// HasTargetResvNameId returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasTargetResvNameId() bool {
	if o != nil && !IsNil(o.TargetResvNameId) {
		return true
	}

	return false
}

// SetTargetResvNameId gets a reference to the given UniqueIDType and assigns it to the TargetResvNameId field.
func (o *RoomRoutingRefreshCriteriaType) SetTargetResvNameId(v UniqueIDType) {
	o.TargetResvNameId = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *RoomRoutingRefreshCriteriaType) GetTransactions() []float32 {
	if o == nil || IsNil(o.Transactions) {
		var ret []float32
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRoutingRefreshCriteriaType) GetTransactionsOk() ([]float32, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *RoomRoutingRefreshCriteriaType) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []float32 and assigns it to the Transactions field.
func (o *RoomRoutingRefreshCriteriaType) SetTransactions(v []float32) {
	o.Transactions = v
}

func (o RoomRoutingRefreshCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomRoutingRefreshCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromBothResvs) {
		toSerialize["fromBothResvs"] = o.FromBothResvs
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.OriginalTargetResvNameId) {
		toSerialize["originalTargetResvNameId"] = o.OriginalTargetResvNameId
	}
	if !IsNil(o.ResvNameId) {
		toSerialize["resvNameId"] = o.ResvNameId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TargetResvNameId) {
		toSerialize["targetResvNameId"] = o.TargetResvNameId
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableRoomRoutingRefreshCriteriaType struct {
	value *RoomRoutingRefreshCriteriaType
	isSet bool
}

func (v NullableRoomRoutingRefreshCriteriaType) Get() *RoomRoutingRefreshCriteriaType {
	return v.value
}

func (v *NullableRoomRoutingRefreshCriteriaType) Set(val *RoomRoutingRefreshCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomRoutingRefreshCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomRoutingRefreshCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomRoutingRefreshCriteriaType(val *RoomRoutingRefreshCriteriaType) *NullableRoomRoutingRefreshCriteriaType {
	return &NullableRoomRoutingRefreshCriteriaType{value: val, isSet: true}
}

func (v NullableRoomRoutingRefreshCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomRoutingRefreshCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


