/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the TracesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracesType{}

// TracesType List of the traces
type TracesType struct {
	Items []MiscTraceType
}

// NewTracesType instantiates a new TracesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracesType() *TracesType {
	this := TracesType{}
	return &this
}

// NewTracesTypeWithDefaults instantiates a new TracesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracesTypeWithDefaults() *TracesType {
	this := TracesType{}
	return &this
}

func (o TracesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *TracesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableTracesType struct {
	value TracesType
	isSet bool
}

func (v NullableTracesType) Get() TracesType {
	return v.value
}

func (v *NullableTracesType) Set(val TracesType) {
	v.value = val
	v.isSet = true
}

func (v NullableTracesType) IsSet() bool {
	return v.isSet
}

func (v *NullableTracesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracesType(val TracesType) *NullableTracesType {
	return &NullableTracesType{value: val, isSet: true}
}

func (v NullableTracesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


