/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockChanged{}

// BlockChanged Response object for change/modification of block details. This object contains the block details with unique identifiers for each block. Also Success,Warnings and Errors related to this operation.
type BlockChanged struct {
	Blocks *BlocksType `json:"blocks,omitempty"`
	CateringEventsProcessedInfo *CateringEventsProcessedInfoList `json:"cateringEventsProcessedInfo,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewBlockChanged instantiates a new BlockChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockChanged() *BlockChanged {
	this := BlockChanged{}
	return &this
}

// NewBlockChangedWithDefaults instantiates a new BlockChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockChangedWithDefaults() *BlockChanged {
	this := BlockChanged{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *BlockChanged) GetBlocks() BlocksType {
	if o == nil || IsNil(o.Blocks) {
		var ret BlocksType
		return ret
	}
	return *o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChanged) GetBlocksOk() (*BlocksType, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *BlockChanged) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given BlocksType and assigns it to the Blocks field.
func (o *BlockChanged) SetBlocks(v BlocksType) {
	o.Blocks = &v
}

// GetCateringEventsProcessedInfo returns the CateringEventsProcessedInfo field value if set, zero value otherwise.
func (o *BlockChanged) GetCateringEventsProcessedInfo() CateringEventsProcessedInfoList {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		var ret CateringEventsProcessedInfoList
		return ret
	}
	return *o.CateringEventsProcessedInfo
}

// GetCateringEventsProcessedInfoOk returns a tuple with the CateringEventsProcessedInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChanged) GetCateringEventsProcessedInfoOk() (*CateringEventsProcessedInfoList, bool) {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		return nil, false
	}
	return o.CateringEventsProcessedInfo, true
}

// HasCateringEventsProcessedInfo returns a boolean if a field has been set.
func (o *BlockChanged) HasCateringEventsProcessedInfo() bool {
	if o != nil && !IsNil(o.CateringEventsProcessedInfo) {
		return true
	}

	return false
}

// SetCateringEventsProcessedInfo gets a reference to the given CateringEventsProcessedInfoList and assigns it to the CateringEventsProcessedInfo field.
func (o *BlockChanged) SetCateringEventsProcessedInfo(v CateringEventsProcessedInfoList) {
	o.CateringEventsProcessedInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlockChanged) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChanged) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlockChanged) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *BlockChanged) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BlockChanged) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChanged) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BlockChanged) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *BlockChanged) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o BlockChanged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.CateringEventsProcessedInfo) {
		toSerialize["cateringEventsProcessedInfo"] = o.CateringEventsProcessedInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBlockChanged struct {
	value *BlockChanged
	isSet bool
}

func (v NullableBlockChanged) Get() *BlockChanged {
	return v.value
}

func (v *NullableBlockChanged) Set(val *BlockChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockChanged(val *BlockChanged) *NullableBlockChanged {
	return &NullableBlockChanged{value: val, isSet: true}
}

func (v NullableBlockChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


