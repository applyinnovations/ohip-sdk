/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockInventoryControlType Simple type for block inventory control values. This determines if it is a Non Elastic, Elastic or Sell Limits block.
type BlockInventoryControlType string

// List of blockInventoryControlType
const (
	BLOCKINVENTORYCONTROLTYPE_NON_ELASTIC BlockInventoryControlType = "NonElastic"
	BLOCKINVENTORYCONTROLTYPE_ELASTIC BlockInventoryControlType = "Elastic"
	BLOCKINVENTORYCONTROLTYPE_SELL_LIMIT BlockInventoryControlType = "SellLimit"
)

// All allowed values of BlockInventoryControlType enum
var AllowedBlockInventoryControlTypeEnumValues = []BlockInventoryControlType{
	"NonElastic",
	"Elastic",
	"SellLimit",
}

func (v *BlockInventoryControlType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockInventoryControlType(value)
	for _, existing := range AllowedBlockInventoryControlTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockInventoryControlType", value)
}

// NewBlockInventoryControlTypeFromValue returns a pointer to a valid BlockInventoryControlType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockInventoryControlTypeFromValue(v string) (*BlockInventoryControlType, error) {
	ev := BlockInventoryControlType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockInventoryControlType: valid values are %v", v, AllowedBlockInventoryControlTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockInventoryControlType) IsValid() bool {
	for _, existing := range AllowedBlockInventoryControlTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockInventoryControlType value
func (v BlockInventoryControlType) Ptr() *BlockInventoryControlType {
	return &v
}

type NullableBlockInventoryControlType struct {
	value *BlockInventoryControlType
	isSet bool
}

func (v NullableBlockInventoryControlType) Get() *BlockInventoryControlType {
	return v.value
}

func (v *NullableBlockInventoryControlType) Set(val *BlockInventoryControlType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInventoryControlType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInventoryControlType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInventoryControlType(val *BlockInventoryControlType) *NullableBlockInventoryControlType {
	return &NullableBlockInventoryControlType{value: val, isSet: true}
}

func (v NullableBlockInventoryControlType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInventoryControlType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

