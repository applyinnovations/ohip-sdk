/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockApplyChangesToType Valid values are All, Same Arrival Date, Checked In, Selected, In House.
type BlockApplyChangesToType string

// List of blockApplyChangesToType
const (
	BLOCKAPPLYCHANGESTOTYPE_ALL BlockApplyChangesToType = "All"
	BLOCKAPPLYCHANGESTOTYPE_SAME_ARRIVAL_DATE BlockApplyChangesToType = "SameArrivalDate"
	BLOCKAPPLYCHANGESTOTYPE_CHECKED_IN BlockApplyChangesToType = "CheckedIn"
	BLOCKAPPLYCHANGESTOTYPE_RESERVATIONS BlockApplyChangesToType = "Reservations"
	BLOCKAPPLYCHANGESTOTYPE_STAY_ON BlockApplyChangesToType = "StayOn"
)

// All allowed values of BlockApplyChangesToType enum
var AllowedBlockApplyChangesToTypeEnumValues = []BlockApplyChangesToType{
	"All",
	"SameArrivalDate",
	"CheckedIn",
	"Reservations",
	"StayOn",
}

func (v *BlockApplyChangesToType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockApplyChangesToType(value)
	for _, existing := range AllowedBlockApplyChangesToTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockApplyChangesToType", value)
}

// NewBlockApplyChangesToTypeFromValue returns a pointer to a valid BlockApplyChangesToType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockApplyChangesToTypeFromValue(v string) (*BlockApplyChangesToType, error) {
	ev := BlockApplyChangesToType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockApplyChangesToType: valid values are %v", v, AllowedBlockApplyChangesToTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockApplyChangesToType) IsValid() bool {
	for _, existing := range AllowedBlockApplyChangesToTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockApplyChangesToType value
func (v BlockApplyChangesToType) Ptr() *BlockApplyChangesToType {
	return &v
}

type NullableBlockApplyChangesToType struct {
	value *BlockApplyChangesToType
	isSet bool
}

func (v NullableBlockApplyChangesToType) Get() *BlockApplyChangesToType {
	return v.value
}

func (v *NullableBlockApplyChangesToType) Set(val *BlockApplyChangesToType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockApplyChangesToType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockApplyChangesToType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockApplyChangesToType(val *BlockApplyChangesToType) *NullableBlockApplyChangesToType {
	return &NullableBlockApplyChangesToType{value: val, isSet: true}
}

func (v NullableBlockApplyChangesToType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockApplyChangesToType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

