/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the CateringNextStatusListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringNextStatusListType{}

// CateringNextStatusListType Next catering status of the business block.
type CateringNextStatusListType struct {
	Items []BookingStatusDetailType
}

// NewCateringNextStatusListType instantiates a new CateringNextStatusListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringNextStatusListType() *CateringNextStatusListType {
	this := CateringNextStatusListType{}
	return &this
}

// NewCateringNextStatusListTypeWithDefaults instantiates a new CateringNextStatusListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringNextStatusListTypeWithDefaults() *CateringNextStatusListType {
	this := CateringNextStatusListType{}
	return &this
}

func (o CateringNextStatusListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringNextStatusListType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *CateringNextStatusListType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableCateringNextStatusListType struct {
	value CateringNextStatusListType
	isSet bool
}

func (v NullableCateringNextStatusListType) Get() CateringNextStatusListType {
	return v.value
}

func (v *NullableCateringNextStatusListType) Set(val CateringNextStatusListType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringNextStatusListType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringNextStatusListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringNextStatusListType(val CateringNextStatusListType) *NullableCateringNextStatusListType {
	return &NullableCateringNextStatusListType{value: val, isSet: true}
}

func (v NullableCateringNextStatusListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringNextStatusListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


