/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockDailyRoomStatisticsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDailyRoomStatisticsType{}

// BlockDailyRoomStatisticsType Statistics information for the room type.
type BlockDailyRoomStatisticsType struct {
	// Pertain value for room type or generic room type (Room Pool) code.
	RoomType *string `json:"roomType,omitempty"`
	StatisticsInfo *BlockDailyStatisticsInfoType `json:"statisticsInfo,omitempty"`
}

// NewBlockDailyRoomStatisticsType instantiates a new BlockDailyRoomStatisticsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDailyRoomStatisticsType() *BlockDailyRoomStatisticsType {
	this := BlockDailyRoomStatisticsType{}
	return &this
}

// NewBlockDailyRoomStatisticsTypeWithDefaults instantiates a new BlockDailyRoomStatisticsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDailyRoomStatisticsTypeWithDefaults() *BlockDailyRoomStatisticsType {
	this := BlockDailyRoomStatisticsType{}
	return &this
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *BlockDailyRoomStatisticsType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDailyRoomStatisticsType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *BlockDailyRoomStatisticsType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *BlockDailyRoomStatisticsType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetStatisticsInfo returns the StatisticsInfo field value if set, zero value otherwise.
func (o *BlockDailyRoomStatisticsType) GetStatisticsInfo() BlockDailyStatisticsInfoType {
	if o == nil || IsNil(o.StatisticsInfo) {
		var ret BlockDailyStatisticsInfoType
		return ret
	}
	return *o.StatisticsInfo
}

// GetStatisticsInfoOk returns a tuple with the StatisticsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDailyRoomStatisticsType) GetStatisticsInfoOk() (*BlockDailyStatisticsInfoType, bool) {
	if o == nil || IsNil(o.StatisticsInfo) {
		return nil, false
	}
	return o.StatisticsInfo, true
}

// HasStatisticsInfo returns a boolean if a field has been set.
func (o *BlockDailyRoomStatisticsType) HasStatisticsInfo() bool {
	if o != nil && !IsNil(o.StatisticsInfo) {
		return true
	}

	return false
}

// SetStatisticsInfo gets a reference to the given BlockDailyStatisticsInfoType and assigns it to the StatisticsInfo field.
func (o *BlockDailyRoomStatisticsType) SetStatisticsInfo(v BlockDailyStatisticsInfoType) {
	o.StatisticsInfo = &v
}

func (o BlockDailyRoomStatisticsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDailyRoomStatisticsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.StatisticsInfo) {
		toSerialize["statisticsInfo"] = o.StatisticsInfo
	}
	return toSerialize, nil
}

type NullableBlockDailyRoomStatisticsType struct {
	value *BlockDailyRoomStatisticsType
	isSet bool
}

func (v NullableBlockDailyRoomStatisticsType) Get() *BlockDailyRoomStatisticsType {
	return v.value
}

func (v *NullableBlockDailyRoomStatisticsType) Set(val *BlockDailyRoomStatisticsType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDailyRoomStatisticsType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDailyRoomStatisticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDailyRoomStatisticsType(val *BlockDailyRoomStatisticsType) *NullableBlockDailyRoomStatisticsType {
	return &NullableBlockDailyRoomStatisticsType{value: val, isSet: true}
}

func (v NullableBlockDailyRoomStatisticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDailyRoomStatisticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


