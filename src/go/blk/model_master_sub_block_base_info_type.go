/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the MasterSubBlockBaseInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MasterSubBlockBaseInfoType{}

// MasterSubBlockBaseInfoType struct for MasterSubBlockBaseInfoType
type MasterSubBlockBaseInfoType struct {
	BlockIdList *BlockIdList `json:"blockIdList,omitempty"`
	// Block description.
	BlockName *string `json:"blockName,omitempty"`
	BlockStatus *BookingStatusType `json:"blockStatus,omitempty"`
	BlockType *BlockClassificationType `json:"blockType,omitempty"`
	CateringStatus *BookingStatusType `json:"cateringStatus,omitempty"`
	// Master/Sub Block's Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Pertain value for blocked rooms for a block.
	RoomNights *int32 `json:"roomNights,omitempty"`
	// Pertain value for reserved rooms for a block.
	RoomNightsPickedup *int32 `json:"roomNightsPickedup,omitempty"`
	// Indicates to check if Block Dates to be in sync.
	SyncBlockDates *bool `json:"syncBlockDates,omitempty"`
	// Indicates if Block Status Details to be in sync.
	SyncBlockStatusDetails *bool `json:"syncBlockStatusDetails,omitempty"`
	// Indicates whether other BlockDetails to be in Sync.
	SyncOtherBlockDetails *bool `json:"syncOtherBlockDetails,omitempty"`
	// Indicates if packages to be in Sync.
	SyncPackages *bool `json:"syncPackages,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewMasterSubBlockBaseInfoType instantiates a new MasterSubBlockBaseInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMasterSubBlockBaseInfoType() *MasterSubBlockBaseInfoType {
	this := MasterSubBlockBaseInfoType{}
	return &this
}

// NewMasterSubBlockBaseInfoTypeWithDefaults instantiates a new MasterSubBlockBaseInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMasterSubBlockBaseInfoTypeWithDefaults() *MasterSubBlockBaseInfoType {
	this := MasterSubBlockBaseInfoType{}
	return &this
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetBlockIdList() BlockIdList {
	if o == nil || IsNil(o.BlockIdList) {
		var ret BlockIdList
		return ret
	}
	return *o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetBlockIdListOk() (*BlockIdList, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given BlockIdList and assigns it to the BlockIdList field.
func (o *MasterSubBlockBaseInfoType) SetBlockIdList(v BlockIdList) {
	o.BlockIdList = &v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *MasterSubBlockBaseInfoType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetBlockStatus returns the BlockStatus field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetBlockStatus() BookingStatusType {
	if o == nil || IsNil(o.BlockStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.BlockStatus
}

// GetBlockStatusOk returns a tuple with the BlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetBlockStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.BlockStatus) {
		return nil, false
	}
	return o.BlockStatus, true
}

// HasBlockStatus returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasBlockStatus() bool {
	if o != nil && !IsNil(o.BlockStatus) {
		return true
	}

	return false
}

// SetBlockStatus gets a reference to the given BookingStatusType and assigns it to the BlockStatus field.
func (o *MasterSubBlockBaseInfoType) SetBlockStatus(v BookingStatusType) {
	o.BlockStatus = &v
}

// GetBlockType returns the BlockType field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetBlockType() BlockClassificationType {
	if o == nil || IsNil(o.BlockType) {
		var ret BlockClassificationType
		return ret
	}
	return *o.BlockType
}

// GetBlockTypeOk returns a tuple with the BlockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetBlockTypeOk() (*BlockClassificationType, bool) {
	if o == nil || IsNil(o.BlockType) {
		return nil, false
	}
	return o.BlockType, true
}

// HasBlockType returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasBlockType() bool {
	if o != nil && !IsNil(o.BlockType) {
		return true
	}

	return false
}

// SetBlockType gets a reference to the given BlockClassificationType and assigns it to the BlockType field.
func (o *MasterSubBlockBaseInfoType) SetBlockType(v BlockClassificationType) {
	o.BlockType = &v
}

// GetCateringStatus returns the CateringStatus field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetCateringStatus() BookingStatusType {
	if o == nil || IsNil(o.CateringStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.CateringStatus
}

// GetCateringStatusOk returns a tuple with the CateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetCateringStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.CateringStatus) {
		return nil, false
	}
	return o.CateringStatus, true
}

// HasCateringStatus returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasCateringStatus() bool {
	if o != nil && !IsNil(o.CateringStatus) {
		return true
	}

	return false
}

// SetCateringStatus gets a reference to the given BookingStatusType and assigns it to the CateringStatus field.
func (o *MasterSubBlockBaseInfoType) SetCateringStatus(v BookingStatusType) {
	o.CateringStatus = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MasterSubBlockBaseInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomNights returns the RoomNights field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetRoomNights() int32 {
	if o == nil || IsNil(o.RoomNights) {
		var ret int32
		return ret
	}
	return *o.RoomNights
}

// GetRoomNightsOk returns a tuple with the RoomNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetRoomNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomNights) {
		return nil, false
	}
	return o.RoomNights, true
}

// HasRoomNights returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasRoomNights() bool {
	if o != nil && !IsNil(o.RoomNights) {
		return true
	}

	return false
}

// SetRoomNights gets a reference to the given int32 and assigns it to the RoomNights field.
func (o *MasterSubBlockBaseInfoType) SetRoomNights(v int32) {
	o.RoomNights = &v
}

// GetRoomNightsPickedup returns the RoomNightsPickedup field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetRoomNightsPickedup() int32 {
	if o == nil || IsNil(o.RoomNightsPickedup) {
		var ret int32
		return ret
	}
	return *o.RoomNightsPickedup
}

// GetRoomNightsPickedupOk returns a tuple with the RoomNightsPickedup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetRoomNightsPickedupOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomNightsPickedup) {
		return nil, false
	}
	return o.RoomNightsPickedup, true
}

// HasRoomNightsPickedup returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasRoomNightsPickedup() bool {
	if o != nil && !IsNil(o.RoomNightsPickedup) {
		return true
	}

	return false
}

// SetRoomNightsPickedup gets a reference to the given int32 and assigns it to the RoomNightsPickedup field.
func (o *MasterSubBlockBaseInfoType) SetRoomNightsPickedup(v int32) {
	o.RoomNightsPickedup = &v
}

// GetSyncBlockDates returns the SyncBlockDates field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetSyncBlockDates() bool {
	if o == nil || IsNil(o.SyncBlockDates) {
		var ret bool
		return ret
	}
	return *o.SyncBlockDates
}

// GetSyncBlockDatesOk returns a tuple with the SyncBlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetSyncBlockDatesOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncBlockDates) {
		return nil, false
	}
	return o.SyncBlockDates, true
}

// HasSyncBlockDates returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasSyncBlockDates() bool {
	if o != nil && !IsNil(o.SyncBlockDates) {
		return true
	}

	return false
}

// SetSyncBlockDates gets a reference to the given bool and assigns it to the SyncBlockDates field.
func (o *MasterSubBlockBaseInfoType) SetSyncBlockDates(v bool) {
	o.SyncBlockDates = &v
}

// GetSyncBlockStatusDetails returns the SyncBlockStatusDetails field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetSyncBlockStatusDetails() bool {
	if o == nil || IsNil(o.SyncBlockStatusDetails) {
		var ret bool
		return ret
	}
	return *o.SyncBlockStatusDetails
}

// GetSyncBlockStatusDetailsOk returns a tuple with the SyncBlockStatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetSyncBlockStatusDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncBlockStatusDetails) {
		return nil, false
	}
	return o.SyncBlockStatusDetails, true
}

// HasSyncBlockStatusDetails returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasSyncBlockStatusDetails() bool {
	if o != nil && !IsNil(o.SyncBlockStatusDetails) {
		return true
	}

	return false
}

// SetSyncBlockStatusDetails gets a reference to the given bool and assigns it to the SyncBlockStatusDetails field.
func (o *MasterSubBlockBaseInfoType) SetSyncBlockStatusDetails(v bool) {
	o.SyncBlockStatusDetails = &v
}

// GetSyncOtherBlockDetails returns the SyncOtherBlockDetails field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetSyncOtherBlockDetails() bool {
	if o == nil || IsNil(o.SyncOtherBlockDetails) {
		var ret bool
		return ret
	}
	return *o.SyncOtherBlockDetails
}

// GetSyncOtherBlockDetailsOk returns a tuple with the SyncOtherBlockDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetSyncOtherBlockDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncOtherBlockDetails) {
		return nil, false
	}
	return o.SyncOtherBlockDetails, true
}

// HasSyncOtherBlockDetails returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasSyncOtherBlockDetails() bool {
	if o != nil && !IsNil(o.SyncOtherBlockDetails) {
		return true
	}

	return false
}

// SetSyncOtherBlockDetails gets a reference to the given bool and assigns it to the SyncOtherBlockDetails field.
func (o *MasterSubBlockBaseInfoType) SetSyncOtherBlockDetails(v bool) {
	o.SyncOtherBlockDetails = &v
}

// GetSyncPackages returns the SyncPackages field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetSyncPackages() bool {
	if o == nil || IsNil(o.SyncPackages) {
		var ret bool
		return ret
	}
	return *o.SyncPackages
}

// GetSyncPackagesOk returns a tuple with the SyncPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetSyncPackagesOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncPackages) {
		return nil, false
	}
	return o.SyncPackages, true
}

// HasSyncPackages returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasSyncPackages() bool {
	if o != nil && !IsNil(o.SyncPackages) {
		return true
	}

	return false
}

// SetSyncPackages gets a reference to the given bool and assigns it to the SyncPackages field.
func (o *MasterSubBlockBaseInfoType) SetSyncPackages(v bool) {
	o.SyncPackages = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *MasterSubBlockBaseInfoType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MasterSubBlockBaseInfoType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *MasterSubBlockBaseInfoType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *MasterSubBlockBaseInfoType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o MasterSubBlockBaseInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MasterSubBlockBaseInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.BlockStatus) {
		toSerialize["blockStatus"] = o.BlockStatus
	}
	if !IsNil(o.BlockType) {
		toSerialize["blockType"] = o.BlockType
	}
	if !IsNil(o.CateringStatus) {
		toSerialize["cateringStatus"] = o.CateringStatus
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomNights) {
		toSerialize["roomNights"] = o.RoomNights
	}
	if !IsNil(o.RoomNightsPickedup) {
		toSerialize["roomNightsPickedup"] = o.RoomNightsPickedup
	}
	if !IsNil(o.SyncBlockDates) {
		toSerialize["syncBlockDates"] = o.SyncBlockDates
	}
	if !IsNil(o.SyncBlockStatusDetails) {
		toSerialize["syncBlockStatusDetails"] = o.SyncBlockStatusDetails
	}
	if !IsNil(o.SyncOtherBlockDetails) {
		toSerialize["syncOtherBlockDetails"] = o.SyncOtherBlockDetails
	}
	if !IsNil(o.SyncPackages) {
		toSerialize["syncPackages"] = o.SyncPackages
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableMasterSubBlockBaseInfoType struct {
	value *MasterSubBlockBaseInfoType
	isSet bool
}

func (v NullableMasterSubBlockBaseInfoType) Get() *MasterSubBlockBaseInfoType {
	return v.value
}

func (v *NullableMasterSubBlockBaseInfoType) Set(val *MasterSubBlockBaseInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMasterSubBlockBaseInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMasterSubBlockBaseInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMasterSubBlockBaseInfoType(val *MasterSubBlockBaseInfoType) *NullableMasterSubBlockBaseInfoType {
	return &NullableMasterSubBlockBaseInfoType{value: val, isSet: true}
}

func (v NullableMasterSubBlockBaseInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMasterSubBlockBaseInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


