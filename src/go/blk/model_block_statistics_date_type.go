/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockStatisticsDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatisticsDateType{}

// BlockStatisticsDateType Holds the room type level statistics and total statistics for an allotment date.
type BlockStatisticsDateType struct {
	Date *string `json:"date,omitempty"`
	RoomStatisticsList *BlockRoomStatisticsListType `json:"roomStatisticsList,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewBlockStatisticsDateType instantiates a new BlockStatisticsDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatisticsDateType() *BlockStatisticsDateType {
	this := BlockStatisticsDateType{}
	return &this
}

// NewBlockStatisticsDateTypeWithDefaults instantiates a new BlockStatisticsDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatisticsDateTypeWithDefaults() *BlockStatisticsDateType {
	this := BlockStatisticsDateType{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BlockStatisticsDateType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDateType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BlockStatisticsDateType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BlockStatisticsDateType) SetDate(v string) {
	o.Date = &v
}

// GetRoomStatisticsList returns the RoomStatisticsList field value if set, zero value otherwise.
func (o *BlockStatisticsDateType) GetRoomStatisticsList() BlockRoomStatisticsListType {
	if o == nil || IsNil(o.RoomStatisticsList) {
		var ret BlockRoomStatisticsListType
		return ret
	}
	return *o.RoomStatisticsList
}

// GetRoomStatisticsListOk returns a tuple with the RoomStatisticsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDateType) GetRoomStatisticsListOk() (*BlockRoomStatisticsListType, bool) {
	if o == nil || IsNil(o.RoomStatisticsList) {
		return nil, false
	}
	return o.RoomStatisticsList, true
}

// HasRoomStatisticsList returns a boolean if a field has been set.
func (o *BlockStatisticsDateType) HasRoomStatisticsList() bool {
	if o != nil && !IsNil(o.RoomStatisticsList) {
		return true
	}

	return false
}

// SetRoomStatisticsList gets a reference to the given BlockRoomStatisticsListType and assigns it to the RoomStatisticsList field.
func (o *BlockStatisticsDateType) SetRoomStatisticsList(v BlockRoomStatisticsListType) {
	o.RoomStatisticsList = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *BlockStatisticsDateType) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDateType) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *BlockStatisticsDateType) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *BlockStatisticsDateType) SetTotal(v int32) {
	o.Total = &v
}

func (o BlockStatisticsDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatisticsDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.RoomStatisticsList) {
		toSerialize["roomStatisticsList"] = o.RoomStatisticsList
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableBlockStatisticsDateType struct {
	value *BlockStatisticsDateType
	isSet bool
}

func (v NullableBlockStatisticsDateType) Get() *BlockStatisticsDateType {
	return v.value
}

func (v *NullableBlockStatisticsDateType) Set(val *BlockStatisticsDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatisticsDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatisticsDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatisticsDateType(val *BlockStatisticsDateType) *NullableBlockStatisticsDateType {
	return &NullableBlockStatisticsDateType{value: val, isSet: true}
}

func (v NullableBlockStatisticsDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatisticsDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


