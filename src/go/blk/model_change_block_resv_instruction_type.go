/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// ChangeBlockResvInstructionType Sending this instruction would skip applying credit card payment types to other block reservations.
type ChangeBlockResvInstructionType string

// List of changeBlockResvInstructionType
const (
	CHANGEBLOCKRESVINSTRUCTIONTYPE_APPLY_RATE_TO_ALL_ROOM_TYPES ChangeBlockResvInstructionType = "ApplyRateToAllRoomTypes"
	CHANGEBLOCKRESVINSTRUCTIONTYPE_EXCLUDE_CREDIT_CARD_PAYMENT_TYPES ChangeBlockResvInstructionType = "ExcludeCreditCardPaymentTypes"
)

// All allowed values of ChangeBlockResvInstructionType enum
var AllowedChangeBlockResvInstructionTypeEnumValues = []ChangeBlockResvInstructionType{
	"ApplyRateToAllRoomTypes",
	"ExcludeCreditCardPaymentTypes",
}

func (v *ChangeBlockResvInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangeBlockResvInstructionType(value)
	for _, existing := range AllowedChangeBlockResvInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChangeBlockResvInstructionType", value)
}

// NewChangeBlockResvInstructionTypeFromValue returns a pointer to a valid ChangeBlockResvInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeBlockResvInstructionTypeFromValue(v string) (*ChangeBlockResvInstructionType, error) {
	ev := ChangeBlockResvInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeBlockResvInstructionType: valid values are %v", v, AllowedChangeBlockResvInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeBlockResvInstructionType) IsValid() bool {
	for _, existing := range AllowedChangeBlockResvInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to changeBlockResvInstructionType value
func (v ChangeBlockResvInstructionType) Ptr() *ChangeBlockResvInstructionType {
	return &v
}

type NullableChangeBlockResvInstructionType struct {
	value *ChangeBlockResvInstructionType
	isSet bool
}

func (v NullableChangeBlockResvInstructionType) Get() *ChangeBlockResvInstructionType {
	return v.value
}

func (v *NullableChangeBlockResvInstructionType) Set(val *ChangeBlockResvInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeBlockResvInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeBlockResvInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeBlockResvInstructionType(val *ChangeBlockResvInstructionType) *NullableChangeBlockResvInstructionType {
	return &NullableChangeBlockResvInstructionType{value: val, isSet: true}
}

func (v NullableChangeBlockResvInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeBlockResvInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

