/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangedBlockStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangedBlockStatus{}

// ChangedBlockStatus Response object for the request to change block status. Response contains information on the block whose status was successfully changed.
type ChangedBlockStatus struct {
	// Indicates whether block has any active PM reservations.
	AnyActivePMReservations *bool `json:"anyActivePMReservations,omitempty"`
	Block *BlockType `json:"block,omitempty"`
	BlockNextStatusList *BlockNextStatusListType `json:"blockNextStatusList,omitempty"`
	BlockStatusChangeHistory *BlockStatusChangeHistoryType `json:"blockStatusChangeHistory,omitempty"`
	CancellationDetails *CancellationDetailsType `json:"cancellationDetails,omitempty"`
	CateringEventsProcessedInfo *CateringEventsProcessedInfoList `json:"cateringEventsProcessedInfo,omitempty"`
	Links *Links `json:"links,omitempty"`
	ProcessId *UniqueIDType `json:"processId,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewChangedBlockStatus instantiates a new ChangedBlockStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangedBlockStatus() *ChangedBlockStatus {
	this := ChangedBlockStatus{}
	return &this
}

// NewChangedBlockStatusWithDefaults instantiates a new ChangedBlockStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangedBlockStatusWithDefaults() *ChangedBlockStatus {
	this := ChangedBlockStatus{}
	return &this
}

// GetAnyActivePMReservations returns the AnyActivePMReservations field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetAnyActivePMReservations() bool {
	if o == nil || IsNil(o.AnyActivePMReservations) {
		var ret bool
		return ret
	}
	return *o.AnyActivePMReservations
}

// GetAnyActivePMReservationsOk returns a tuple with the AnyActivePMReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetAnyActivePMReservationsOk() (*bool, bool) {
	if o == nil || IsNil(o.AnyActivePMReservations) {
		return nil, false
	}
	return o.AnyActivePMReservations, true
}

// HasAnyActivePMReservations returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasAnyActivePMReservations() bool {
	if o != nil && !IsNil(o.AnyActivePMReservations) {
		return true
	}

	return false
}

// SetAnyActivePMReservations gets a reference to the given bool and assigns it to the AnyActivePMReservations field.
func (o *ChangedBlockStatus) SetAnyActivePMReservations(v bool) {
	o.AnyActivePMReservations = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetBlock() BlockType {
	if o == nil || IsNil(o.Block) {
		var ret BlockType
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetBlockOk() (*BlockType, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given BlockType and assigns it to the Block field.
func (o *ChangedBlockStatus) SetBlock(v BlockType) {
	o.Block = &v
}

// GetBlockNextStatusList returns the BlockNextStatusList field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetBlockNextStatusList() BlockNextStatusListType {
	if o == nil || IsNil(o.BlockNextStatusList) {
		var ret BlockNextStatusListType
		return ret
	}
	return *o.BlockNextStatusList
}

// GetBlockNextStatusListOk returns a tuple with the BlockNextStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetBlockNextStatusListOk() (*BlockNextStatusListType, bool) {
	if o == nil || IsNil(o.BlockNextStatusList) {
		return nil, false
	}
	return o.BlockNextStatusList, true
}

// HasBlockNextStatusList returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasBlockNextStatusList() bool {
	if o != nil && !IsNil(o.BlockNextStatusList) {
		return true
	}

	return false
}

// SetBlockNextStatusList gets a reference to the given BlockNextStatusListType and assigns it to the BlockNextStatusList field.
func (o *ChangedBlockStatus) SetBlockNextStatusList(v BlockNextStatusListType) {
	o.BlockNextStatusList = &v
}

// GetBlockStatusChangeHistory returns the BlockStatusChangeHistory field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetBlockStatusChangeHistory() BlockStatusChangeHistoryType {
	if o == nil || IsNil(o.BlockStatusChangeHistory) {
		var ret BlockStatusChangeHistoryType
		return ret
	}
	return *o.BlockStatusChangeHistory
}

// GetBlockStatusChangeHistoryOk returns a tuple with the BlockStatusChangeHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetBlockStatusChangeHistoryOk() (*BlockStatusChangeHistoryType, bool) {
	if o == nil || IsNil(o.BlockStatusChangeHistory) {
		return nil, false
	}
	return o.BlockStatusChangeHistory, true
}

// HasBlockStatusChangeHistory returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasBlockStatusChangeHistory() bool {
	if o != nil && !IsNil(o.BlockStatusChangeHistory) {
		return true
	}

	return false
}

// SetBlockStatusChangeHistory gets a reference to the given BlockStatusChangeHistoryType and assigns it to the BlockStatusChangeHistory field.
func (o *ChangedBlockStatus) SetBlockStatusChangeHistory(v BlockStatusChangeHistoryType) {
	o.BlockStatusChangeHistory = &v
}

// GetCancellationDetails returns the CancellationDetails field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetCancellationDetails() CancellationDetailsType {
	if o == nil || IsNil(o.CancellationDetails) {
		var ret CancellationDetailsType
		return ret
	}
	return *o.CancellationDetails
}

// GetCancellationDetailsOk returns a tuple with the CancellationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetCancellationDetailsOk() (*CancellationDetailsType, bool) {
	if o == nil || IsNil(o.CancellationDetails) {
		return nil, false
	}
	return o.CancellationDetails, true
}

// HasCancellationDetails returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasCancellationDetails() bool {
	if o != nil && !IsNil(o.CancellationDetails) {
		return true
	}

	return false
}

// SetCancellationDetails gets a reference to the given CancellationDetailsType and assigns it to the CancellationDetails field.
func (o *ChangedBlockStatus) SetCancellationDetails(v CancellationDetailsType) {
	o.CancellationDetails = &v
}

// GetCateringEventsProcessedInfo returns the CateringEventsProcessedInfo field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetCateringEventsProcessedInfo() CateringEventsProcessedInfoList {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		var ret CateringEventsProcessedInfoList
		return ret
	}
	return *o.CateringEventsProcessedInfo
}

// GetCateringEventsProcessedInfoOk returns a tuple with the CateringEventsProcessedInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetCateringEventsProcessedInfoOk() (*CateringEventsProcessedInfoList, bool) {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		return nil, false
	}
	return o.CateringEventsProcessedInfo, true
}

// HasCateringEventsProcessedInfo returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasCateringEventsProcessedInfo() bool {
	if o != nil && !IsNil(o.CateringEventsProcessedInfo) {
		return true
	}

	return false
}

// SetCateringEventsProcessedInfo gets a reference to the given CateringEventsProcessedInfoList and assigns it to the CateringEventsProcessedInfo field.
func (o *ChangedBlockStatus) SetCateringEventsProcessedInfo(v CateringEventsProcessedInfoList) {
	o.CateringEventsProcessedInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *ChangedBlockStatus) SetLinks(v Links) {
	o.Links = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetProcessId() UniqueIDType {
	if o == nil || IsNil(o.ProcessId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetProcessIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given UniqueIDType and assigns it to the ProcessId field.
func (o *ChangedBlockStatus) SetProcessId(v UniqueIDType) {
	o.ProcessId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChangedBlockStatus) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangedBlockStatus) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChangedBlockStatus) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ChangedBlockStatus) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ChangedBlockStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangedBlockStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnyActivePMReservations) {
		toSerialize["anyActivePMReservations"] = o.AnyActivePMReservations
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.BlockNextStatusList) {
		toSerialize["blockNextStatusList"] = o.BlockNextStatusList
	}
	if !IsNil(o.BlockStatusChangeHistory) {
		toSerialize["blockStatusChangeHistory"] = o.BlockStatusChangeHistory
	}
	if !IsNil(o.CancellationDetails) {
		toSerialize["cancellationDetails"] = o.CancellationDetails
	}
	if !IsNil(o.CateringEventsProcessedInfo) {
		toSerialize["cateringEventsProcessedInfo"] = o.CateringEventsProcessedInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ProcessId) {
		toSerialize["processId"] = o.ProcessId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChangedBlockStatus struct {
	value *ChangedBlockStatus
	isSet bool
}

func (v NullableChangedBlockStatus) Get() *ChangedBlockStatus {
	return v.value
}

func (v *NullableChangedBlockStatus) Set(val *ChangedBlockStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableChangedBlockStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableChangedBlockStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangedBlockStatus(val *ChangedBlockStatus) *NullableChangedBlockStatus {
	return &NullableChangedBlockStatus{value: val, isSet: true}
}

func (v NullableChangedBlockStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangedBlockStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


