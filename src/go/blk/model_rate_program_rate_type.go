/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RateProgramRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateProgramRateType{}

// RateProgramRateType Room Pool Rate Program.
type RateProgramRateType struct {
	// Rate Program Commissionable Indicator.
	Commissionable *bool `json:"commissionable,omitempty"`
	// End date of the Room Pool Rate Program.
	EndDate *string `json:"endDate,omitempty"`
	// Rate Program Mobile Checkout Allowed Indicator.
	MobileCheckout *bool `json:"mobileCheckout,omitempty"`
	// Rate Program Primary Rate Code Indicator.
	Primary *bool `json:"primary,omitempty"`
	RateAmounts *BlockGridRatesType `json:"rateAmounts,omitempty"`
	// Rate Program Code.
	RateCode *string `json:"rateCode,omitempty"`
	RateMarketCode *CodeDescriptionType `json:"rateMarketCode,omitempty"`
	RoomTypes *RateProgramRoomType `json:"roomTypes,omitempty"`
	// Sequence Number of the Rate Program.
	Sequence *int32 `json:"sequence,omitempty"`
	// Start date of the Room Pool Rate Program.
	StartDate *string `json:"startDate,omitempty"`
}

// NewRateProgramRateType instantiates a new RateProgramRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateProgramRateType() *RateProgramRateType {
	this := RateProgramRateType{}
	return &this
}

// NewRateProgramRateTypeWithDefaults instantiates a new RateProgramRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateProgramRateTypeWithDefaults() *RateProgramRateType {
	this := RateProgramRateType{}
	return &this
}

// GetCommissionable returns the Commissionable field value if set, zero value otherwise.
func (o *RateProgramRateType) GetCommissionable() bool {
	if o == nil || IsNil(o.Commissionable) {
		var ret bool
		return ret
	}
	return *o.Commissionable
}

// GetCommissionableOk returns a tuple with the Commissionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetCommissionableOk() (*bool, bool) {
	if o == nil || IsNil(o.Commissionable) {
		return nil, false
	}
	return o.Commissionable, true
}

// HasCommissionable returns a boolean if a field has been set.
func (o *RateProgramRateType) HasCommissionable() bool {
	if o != nil && !IsNil(o.Commissionable) {
		return true
	}

	return false
}

// SetCommissionable gets a reference to the given bool and assigns it to the Commissionable field.
func (o *RateProgramRateType) SetCommissionable(v bool) {
	o.Commissionable = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *RateProgramRateType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *RateProgramRateType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *RateProgramRateType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetMobileCheckout returns the MobileCheckout field value if set, zero value otherwise.
func (o *RateProgramRateType) GetMobileCheckout() bool {
	if o == nil || IsNil(o.MobileCheckout) {
		var ret bool
		return ret
	}
	return *o.MobileCheckout
}

// GetMobileCheckoutOk returns a tuple with the MobileCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetMobileCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.MobileCheckout) {
		return nil, false
	}
	return o.MobileCheckout, true
}

// HasMobileCheckout returns a boolean if a field has been set.
func (o *RateProgramRateType) HasMobileCheckout() bool {
	if o != nil && !IsNil(o.MobileCheckout) {
		return true
	}

	return false
}

// SetMobileCheckout gets a reference to the given bool and assigns it to the MobileCheckout field.
func (o *RateProgramRateType) SetMobileCheckout(v bool) {
	o.MobileCheckout = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *RateProgramRateType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *RateProgramRateType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *RateProgramRateType) SetPrimary(v bool) {
	o.Primary = &v
}

// GetRateAmounts returns the RateAmounts field value if set, zero value otherwise.
func (o *RateProgramRateType) GetRateAmounts() BlockGridRatesType {
	if o == nil || IsNil(o.RateAmounts) {
		var ret BlockGridRatesType
		return ret
	}
	return *o.RateAmounts
}

// GetRateAmountsOk returns a tuple with the RateAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetRateAmountsOk() (*BlockGridRatesType, bool) {
	if o == nil || IsNil(o.RateAmounts) {
		return nil, false
	}
	return o.RateAmounts, true
}

// HasRateAmounts returns a boolean if a field has been set.
func (o *RateProgramRateType) HasRateAmounts() bool {
	if o != nil && !IsNil(o.RateAmounts) {
		return true
	}

	return false
}

// SetRateAmounts gets a reference to the given BlockGridRatesType and assigns it to the RateAmounts field.
func (o *RateProgramRateType) SetRateAmounts(v BlockGridRatesType) {
	o.RateAmounts = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *RateProgramRateType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *RateProgramRateType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *RateProgramRateType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetRateMarketCode returns the RateMarketCode field value if set, zero value otherwise.
func (o *RateProgramRateType) GetRateMarketCode() CodeDescriptionType {
	if o == nil || IsNil(o.RateMarketCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RateMarketCode
}

// GetRateMarketCodeOk returns a tuple with the RateMarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetRateMarketCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RateMarketCode) {
		return nil, false
	}
	return o.RateMarketCode, true
}

// HasRateMarketCode returns a boolean if a field has been set.
func (o *RateProgramRateType) HasRateMarketCode() bool {
	if o != nil && !IsNil(o.RateMarketCode) {
		return true
	}

	return false
}

// SetRateMarketCode gets a reference to the given CodeDescriptionType and assigns it to the RateMarketCode field.
func (o *RateProgramRateType) SetRateMarketCode(v CodeDescriptionType) {
	o.RateMarketCode = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *RateProgramRateType) GetRoomTypes() RateProgramRoomType {
	if o == nil || IsNil(o.RoomTypes) {
		var ret RateProgramRoomType
		return ret
	}
	return *o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetRoomTypesOk() (*RateProgramRoomType, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *RateProgramRateType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given RateProgramRoomType and assigns it to the RoomTypes field.
func (o *RateProgramRateType) SetRoomTypes(v RateProgramRoomType) {
	o.RoomTypes = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *RateProgramRateType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *RateProgramRateType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *RateProgramRateType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *RateProgramRateType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramRateType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *RateProgramRateType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *RateProgramRateType) SetStartDate(v string) {
	o.StartDate = &v
}

func (o RateProgramRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateProgramRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commissionable) {
		toSerialize["commissionable"] = o.Commissionable
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.MobileCheckout) {
		toSerialize["mobileCheckout"] = o.MobileCheckout
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.RateAmounts) {
		toSerialize["rateAmounts"] = o.RateAmounts
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.RateMarketCode) {
		toSerialize["rateMarketCode"] = o.RateMarketCode
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableRateProgramRateType struct {
	value *RateProgramRateType
	isSet bool
}

func (v NullableRateProgramRateType) Get() *RateProgramRateType {
	return v.value
}

func (v *NullableRateProgramRateType) Set(val *RateProgramRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateProgramRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateProgramRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateProgramRateType(val *RateProgramRateType) *NullableRateProgramRateType {
	return &NullableRateProgramRateType{value: val, isSet: true}
}

func (v NullableRateProgramRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateProgramRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


