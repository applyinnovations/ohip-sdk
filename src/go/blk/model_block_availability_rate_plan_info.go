/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailabilityRatePlanInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailabilityRatePlanInfo{}

// BlockAvailabilityRatePlanInfo Rate plan information including package details.
type BlockAvailabilityRatePlanInfo struct {
	RatePlanInfo *BlockAvailabilityRatePlanInfoRatePlanInfo `json:"ratePlanInfo,omitempty"`
}

// NewBlockAvailabilityRatePlanInfo instantiates a new BlockAvailabilityRatePlanInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailabilityRatePlanInfo() *BlockAvailabilityRatePlanInfo {
	this := BlockAvailabilityRatePlanInfo{}
	return &this
}

// NewBlockAvailabilityRatePlanInfoWithDefaults instantiates a new BlockAvailabilityRatePlanInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityRatePlanInfoWithDefaults() *BlockAvailabilityRatePlanInfo {
	this := BlockAvailabilityRatePlanInfo{}
	return &this
}

// GetRatePlanInfo returns the RatePlanInfo field value if set, zero value otherwise.
func (o *BlockAvailabilityRatePlanInfo) GetRatePlanInfo() BlockAvailabilityRatePlanInfoRatePlanInfo {
	if o == nil || IsNil(o.RatePlanInfo) {
		var ret BlockAvailabilityRatePlanInfoRatePlanInfo
		return ret
	}
	return *o.RatePlanInfo
}

// GetRatePlanInfoOk returns a tuple with the RatePlanInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRatePlanInfo) GetRatePlanInfoOk() (*BlockAvailabilityRatePlanInfoRatePlanInfo, bool) {
	if o == nil || IsNil(o.RatePlanInfo) {
		return nil, false
	}
	return o.RatePlanInfo, true
}

// HasRatePlanInfo returns a boolean if a field has been set.
func (o *BlockAvailabilityRatePlanInfo) HasRatePlanInfo() bool {
	if o != nil && !IsNil(o.RatePlanInfo) {
		return true
	}

	return false
}

// SetRatePlanInfo gets a reference to the given BlockAvailabilityRatePlanInfoRatePlanInfo and assigns it to the RatePlanInfo field.
func (o *BlockAvailabilityRatePlanInfo) SetRatePlanInfo(v BlockAvailabilityRatePlanInfoRatePlanInfo) {
	o.RatePlanInfo = &v
}

func (o BlockAvailabilityRatePlanInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailabilityRatePlanInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanInfo) {
		toSerialize["ratePlanInfo"] = o.RatePlanInfo
	}
	return toSerialize, nil
}

type NullableBlockAvailabilityRatePlanInfo struct {
	value *BlockAvailabilityRatePlanInfo
	isSet bool
}

func (v NullableBlockAvailabilityRatePlanInfo) Get() *BlockAvailabilityRatePlanInfo {
	return v.value
}

func (v *NullableBlockAvailabilityRatePlanInfo) Set(val *BlockAvailabilityRatePlanInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailabilityRatePlanInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailabilityRatePlanInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailabilityRatePlanInfo(val *BlockAvailabilityRatePlanInfo) *NullableBlockAvailabilityRatePlanInfo {
	return &NullableBlockAvailabilityRatePlanInfo{value: val, isSet: true}
}

func (v NullableBlockAvailabilityRatePlanInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailabilityRatePlanInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


