/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangeBlockStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeBlockStatusType{}

// ChangeBlockStatusType This holds the information required to change the booking status of the business block.
type ChangeBlockStatusType struct {
	// Indicates to apply block status code to catering status if existing values are same.
	ApplyChangesToCateringSatus *bool `json:"applyChangesToCateringSatus,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	// Indicates whether to cancel all PM reservations when canceling a block, if any.
	CancelAllPMReservations *bool `json:"cancelAllPMReservations,omitempty"`
	CancellationDetails *CancellationDetailsType `json:"cancellationDetails,omitempty"`
	// Current booking status of the business block.
	CurrentBlockStatus *string `json:"currentBlockStatus,omitempty"`
	// Opera Hotel code for the change block status operation.
	HotelId *string `json:"hotelId,omitempty"`
	MasterSubBlockInfo *MasterBlockInfoType `json:"masterSubBlockInfo,omitempty"`
	// New booking status of the business block.
	NewBlockStatus *string `json:"newBlockStatus,omitempty"`
	// Indicates whether to overbook when transitioning from a non-deduct to deduct inventory status.
	OverbookAll *bool `json:"overbookAll,omitempty"`
	// Indicates whether to ignore any warning during applying the changes to the events associated with the current block.
	OverrideEventsProcessingWarnings *bool `json:"overrideEventsProcessingWarnings,omitempty"`
	PMReservationsCancellationDetails *CancellationDetailsType `json:"pMReservationsCancellationDetails,omitempty"`
	// Reservation type of the business block.
	ReservationType *string `json:"reservationType,omitempty"`
}

// NewChangeBlockStatusType instantiates a new ChangeBlockStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeBlockStatusType() *ChangeBlockStatusType {
	this := ChangeBlockStatusType{}
	return &this
}

// NewChangeBlockStatusTypeWithDefaults instantiates a new ChangeBlockStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeBlockStatusTypeWithDefaults() *ChangeBlockStatusType {
	this := ChangeBlockStatusType{}
	return &this
}

// GetApplyChangesToCateringSatus returns the ApplyChangesToCateringSatus field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetApplyChangesToCateringSatus() bool {
	if o == nil || IsNil(o.ApplyChangesToCateringSatus) {
		var ret bool
		return ret
	}
	return *o.ApplyChangesToCateringSatus
}

// GetApplyChangesToCateringSatusOk returns a tuple with the ApplyChangesToCateringSatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetApplyChangesToCateringSatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyChangesToCateringSatus) {
		return nil, false
	}
	return o.ApplyChangesToCateringSatus, true
}

// HasApplyChangesToCateringSatus returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasApplyChangesToCateringSatus() bool {
	if o != nil && !IsNil(o.ApplyChangesToCateringSatus) {
		return true
	}

	return false
}

// SetApplyChangesToCateringSatus gets a reference to the given bool and assigns it to the ApplyChangesToCateringSatus field.
func (o *ChangeBlockStatusType) SetApplyChangesToCateringSatus(v bool) {
	o.ApplyChangesToCateringSatus = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *ChangeBlockStatusType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetCancelAllPMReservations returns the CancelAllPMReservations field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetCancelAllPMReservations() bool {
	if o == nil || IsNil(o.CancelAllPMReservations) {
		var ret bool
		return ret
	}
	return *o.CancelAllPMReservations
}

// GetCancelAllPMReservationsOk returns a tuple with the CancelAllPMReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetCancelAllPMReservationsOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelAllPMReservations) {
		return nil, false
	}
	return o.CancelAllPMReservations, true
}

// HasCancelAllPMReservations returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasCancelAllPMReservations() bool {
	if o != nil && !IsNil(o.CancelAllPMReservations) {
		return true
	}

	return false
}

// SetCancelAllPMReservations gets a reference to the given bool and assigns it to the CancelAllPMReservations field.
func (o *ChangeBlockStatusType) SetCancelAllPMReservations(v bool) {
	o.CancelAllPMReservations = &v
}

// GetCancellationDetails returns the CancellationDetails field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetCancellationDetails() CancellationDetailsType {
	if o == nil || IsNil(o.CancellationDetails) {
		var ret CancellationDetailsType
		return ret
	}
	return *o.CancellationDetails
}

// GetCancellationDetailsOk returns a tuple with the CancellationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetCancellationDetailsOk() (*CancellationDetailsType, bool) {
	if o == nil || IsNil(o.CancellationDetails) {
		return nil, false
	}
	return o.CancellationDetails, true
}

// HasCancellationDetails returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasCancellationDetails() bool {
	if o != nil && !IsNil(o.CancellationDetails) {
		return true
	}

	return false
}

// SetCancellationDetails gets a reference to the given CancellationDetailsType and assigns it to the CancellationDetails field.
func (o *ChangeBlockStatusType) SetCancellationDetails(v CancellationDetailsType) {
	o.CancellationDetails = &v
}

// GetCurrentBlockStatus returns the CurrentBlockStatus field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetCurrentBlockStatus() string {
	if o == nil || IsNil(o.CurrentBlockStatus) {
		var ret string
		return ret
	}
	return *o.CurrentBlockStatus
}

// GetCurrentBlockStatusOk returns a tuple with the CurrentBlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetCurrentBlockStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentBlockStatus) {
		return nil, false
	}
	return o.CurrentBlockStatus, true
}

// HasCurrentBlockStatus returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasCurrentBlockStatus() bool {
	if o != nil && !IsNil(o.CurrentBlockStatus) {
		return true
	}

	return false
}

// SetCurrentBlockStatus gets a reference to the given string and assigns it to the CurrentBlockStatus field.
func (o *ChangeBlockStatusType) SetCurrentBlockStatus(v string) {
	o.CurrentBlockStatus = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChangeBlockStatusType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMasterSubBlockInfo returns the MasterSubBlockInfo field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetMasterSubBlockInfo() MasterBlockInfoType {
	if o == nil || IsNil(o.MasterSubBlockInfo) {
		var ret MasterBlockInfoType
		return ret
	}
	return *o.MasterSubBlockInfo
}

// GetMasterSubBlockInfoOk returns a tuple with the MasterSubBlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetMasterSubBlockInfoOk() (*MasterBlockInfoType, bool) {
	if o == nil || IsNil(o.MasterSubBlockInfo) {
		return nil, false
	}
	return o.MasterSubBlockInfo, true
}

// HasMasterSubBlockInfo returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasMasterSubBlockInfo() bool {
	if o != nil && !IsNil(o.MasterSubBlockInfo) {
		return true
	}

	return false
}

// SetMasterSubBlockInfo gets a reference to the given MasterBlockInfoType and assigns it to the MasterSubBlockInfo field.
func (o *ChangeBlockStatusType) SetMasterSubBlockInfo(v MasterBlockInfoType) {
	o.MasterSubBlockInfo = &v
}

// GetNewBlockStatus returns the NewBlockStatus field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetNewBlockStatus() string {
	if o == nil || IsNil(o.NewBlockStatus) {
		var ret string
		return ret
	}
	return *o.NewBlockStatus
}

// GetNewBlockStatusOk returns a tuple with the NewBlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetNewBlockStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NewBlockStatus) {
		return nil, false
	}
	return o.NewBlockStatus, true
}

// HasNewBlockStatus returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasNewBlockStatus() bool {
	if o != nil && !IsNil(o.NewBlockStatus) {
		return true
	}

	return false
}

// SetNewBlockStatus gets a reference to the given string and assigns it to the NewBlockStatus field.
func (o *ChangeBlockStatusType) SetNewBlockStatus(v string) {
	o.NewBlockStatus = &v
}

// GetOverbookAll returns the OverbookAll field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetOverbookAll() bool {
	if o == nil || IsNil(o.OverbookAll) {
		var ret bool
		return ret
	}
	return *o.OverbookAll
}

// GetOverbookAllOk returns a tuple with the OverbookAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetOverbookAllOk() (*bool, bool) {
	if o == nil || IsNil(o.OverbookAll) {
		return nil, false
	}
	return o.OverbookAll, true
}

// HasOverbookAll returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasOverbookAll() bool {
	if o != nil && !IsNil(o.OverbookAll) {
		return true
	}

	return false
}

// SetOverbookAll gets a reference to the given bool and assigns it to the OverbookAll field.
func (o *ChangeBlockStatusType) SetOverbookAll(v bool) {
	o.OverbookAll = &v
}

// GetOverrideEventsProcessingWarnings returns the OverrideEventsProcessingWarnings field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetOverrideEventsProcessingWarnings() bool {
	if o == nil || IsNil(o.OverrideEventsProcessingWarnings) {
		var ret bool
		return ret
	}
	return *o.OverrideEventsProcessingWarnings
}

// GetOverrideEventsProcessingWarningsOk returns a tuple with the OverrideEventsProcessingWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetOverrideEventsProcessingWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideEventsProcessingWarnings) {
		return nil, false
	}
	return o.OverrideEventsProcessingWarnings, true
}

// HasOverrideEventsProcessingWarnings returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasOverrideEventsProcessingWarnings() bool {
	if o != nil && !IsNil(o.OverrideEventsProcessingWarnings) {
		return true
	}

	return false
}

// SetOverrideEventsProcessingWarnings gets a reference to the given bool and assigns it to the OverrideEventsProcessingWarnings field.
func (o *ChangeBlockStatusType) SetOverrideEventsProcessingWarnings(v bool) {
	o.OverrideEventsProcessingWarnings = &v
}

// GetPMReservationsCancellationDetails returns the PMReservationsCancellationDetails field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetPMReservationsCancellationDetails() CancellationDetailsType {
	if o == nil || IsNil(o.PMReservationsCancellationDetails) {
		var ret CancellationDetailsType
		return ret
	}
	return *o.PMReservationsCancellationDetails
}

// GetPMReservationsCancellationDetailsOk returns a tuple with the PMReservationsCancellationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetPMReservationsCancellationDetailsOk() (*CancellationDetailsType, bool) {
	if o == nil || IsNil(o.PMReservationsCancellationDetails) {
		return nil, false
	}
	return o.PMReservationsCancellationDetails, true
}

// HasPMReservationsCancellationDetails returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasPMReservationsCancellationDetails() bool {
	if o != nil && !IsNil(o.PMReservationsCancellationDetails) {
		return true
	}

	return false
}

// SetPMReservationsCancellationDetails gets a reference to the given CancellationDetailsType and assigns it to the PMReservationsCancellationDetails field.
func (o *ChangeBlockStatusType) SetPMReservationsCancellationDetails(v CancellationDetailsType) {
	o.PMReservationsCancellationDetails = &v
}

// GetReservationType returns the ReservationType field value if set, zero value otherwise.
func (o *ChangeBlockStatusType) GetReservationType() string {
	if o == nil || IsNil(o.ReservationType) {
		var ret string
		return ret
	}
	return *o.ReservationType
}

// GetReservationTypeOk returns a tuple with the ReservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockStatusType) GetReservationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationType) {
		return nil, false
	}
	return o.ReservationType, true
}

// HasReservationType returns a boolean if a field has been set.
func (o *ChangeBlockStatusType) HasReservationType() bool {
	if o != nil && !IsNil(o.ReservationType) {
		return true
	}

	return false
}

// SetReservationType gets a reference to the given string and assigns it to the ReservationType field.
func (o *ChangeBlockStatusType) SetReservationType(v string) {
	o.ReservationType = &v
}

func (o ChangeBlockStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeBlockStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplyChangesToCateringSatus) {
		toSerialize["applyChangesToCateringSatus"] = o.ApplyChangesToCateringSatus
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.CancelAllPMReservations) {
		toSerialize["cancelAllPMReservations"] = o.CancelAllPMReservations
	}
	if !IsNil(o.CancellationDetails) {
		toSerialize["cancellationDetails"] = o.CancellationDetails
	}
	if !IsNil(o.CurrentBlockStatus) {
		toSerialize["currentBlockStatus"] = o.CurrentBlockStatus
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MasterSubBlockInfo) {
		toSerialize["masterSubBlockInfo"] = o.MasterSubBlockInfo
	}
	if !IsNil(o.NewBlockStatus) {
		toSerialize["newBlockStatus"] = o.NewBlockStatus
	}
	if !IsNil(o.OverbookAll) {
		toSerialize["overbookAll"] = o.OverbookAll
	}
	if !IsNil(o.OverrideEventsProcessingWarnings) {
		toSerialize["overrideEventsProcessingWarnings"] = o.OverrideEventsProcessingWarnings
	}
	if !IsNil(o.PMReservationsCancellationDetails) {
		toSerialize["pMReservationsCancellationDetails"] = o.PMReservationsCancellationDetails
	}
	if !IsNil(o.ReservationType) {
		toSerialize["reservationType"] = o.ReservationType
	}
	return toSerialize, nil
}

type NullableChangeBlockStatusType struct {
	value *ChangeBlockStatusType
	isSet bool
}

func (v NullableChangeBlockStatusType) Get() *ChangeBlockStatusType {
	return v.value
}

func (v *NullableChangeBlockStatusType) Set(val *ChangeBlockStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeBlockStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeBlockStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeBlockStatusType(val *ChangeBlockStatusType) *NullableChangeBlockStatusType {
	return &NullableChangeBlockStatusType{value: val, isSet: true}
}

func (v NullableChangeBlockStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeBlockStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


