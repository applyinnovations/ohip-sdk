/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailabilityInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailabilityInfoType{}

// BlockAvailabilityInfoType Captures room availability information for the block.
type BlockAvailabilityInfoType struct {
	ExtendedStay *bool `json:"extendedStay,omitempty"`
	RoomInfo []BlockAvailabilityRoomInfoType `json:"roomInfo,omitempty"`
	StayDate *string `json:"stayDate,omitempty"`
}

// NewBlockAvailabilityInfoType instantiates a new BlockAvailabilityInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailabilityInfoType() *BlockAvailabilityInfoType {
	this := BlockAvailabilityInfoType{}
	return &this
}

// NewBlockAvailabilityInfoTypeWithDefaults instantiates a new BlockAvailabilityInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityInfoTypeWithDefaults() *BlockAvailabilityInfoType {
	this := BlockAvailabilityInfoType{}
	return &this
}

// GetExtendedStay returns the ExtendedStay field value if set, zero value otherwise.
func (o *BlockAvailabilityInfoType) GetExtendedStay() bool {
	if o == nil || IsNil(o.ExtendedStay) {
		var ret bool
		return ret
	}
	return *o.ExtendedStay
}

// GetExtendedStayOk returns a tuple with the ExtendedStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityInfoType) GetExtendedStayOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtendedStay) {
		return nil, false
	}
	return o.ExtendedStay, true
}

// HasExtendedStay returns a boolean if a field has been set.
func (o *BlockAvailabilityInfoType) HasExtendedStay() bool {
	if o != nil && !IsNil(o.ExtendedStay) {
		return true
	}

	return false
}

// SetExtendedStay gets a reference to the given bool and assigns it to the ExtendedStay field.
func (o *BlockAvailabilityInfoType) SetExtendedStay(v bool) {
	o.ExtendedStay = &v
}

// GetRoomInfo returns the RoomInfo field value if set, zero value otherwise.
func (o *BlockAvailabilityInfoType) GetRoomInfo() []BlockAvailabilityRoomInfoType {
	if o == nil || IsNil(o.RoomInfo) {
		var ret []BlockAvailabilityRoomInfoType
		return ret
	}
	return o.RoomInfo
}

// GetRoomInfoOk returns a tuple with the RoomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityInfoType) GetRoomInfoOk() ([]BlockAvailabilityRoomInfoType, bool) {
	if o == nil || IsNil(o.RoomInfo) {
		return nil, false
	}
	return o.RoomInfo, true
}

// HasRoomInfo returns a boolean if a field has been set.
func (o *BlockAvailabilityInfoType) HasRoomInfo() bool {
	if o != nil && !IsNil(o.RoomInfo) {
		return true
	}

	return false
}

// SetRoomInfo gets a reference to the given []BlockAvailabilityRoomInfoType and assigns it to the RoomInfo field.
func (o *BlockAvailabilityInfoType) SetRoomInfo(v []BlockAvailabilityRoomInfoType) {
	o.RoomInfo = v
}

// GetStayDate returns the StayDate field value if set, zero value otherwise.
func (o *BlockAvailabilityInfoType) GetStayDate() string {
	if o == nil || IsNil(o.StayDate) {
		var ret string
		return ret
	}
	return *o.StayDate
}

// GetStayDateOk returns a tuple with the StayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityInfoType) GetStayDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayDate) {
		return nil, false
	}
	return o.StayDate, true
}

// HasStayDate returns a boolean if a field has been set.
func (o *BlockAvailabilityInfoType) HasStayDate() bool {
	if o != nil && !IsNil(o.StayDate) {
		return true
	}

	return false
}

// SetStayDate gets a reference to the given string and assigns it to the StayDate field.
func (o *BlockAvailabilityInfoType) SetStayDate(v string) {
	o.StayDate = &v
}

func (o BlockAvailabilityInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailabilityInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtendedStay) {
		toSerialize["extendedStay"] = o.ExtendedStay
	}
	if !IsNil(o.RoomInfo) {
		toSerialize["roomInfo"] = o.RoomInfo
	}
	if !IsNil(o.StayDate) {
		toSerialize["stayDate"] = o.StayDate
	}
	return toSerialize, nil
}

type NullableBlockAvailabilityInfoType struct {
	value *BlockAvailabilityInfoType
	isSet bool
}

func (v NullableBlockAvailabilityInfoType) Get() *BlockAvailabilityInfoType {
	return v.value
}

func (v *NullableBlockAvailabilityInfoType) Set(val *BlockAvailabilityInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailabilityInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailabilityInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailabilityInfoType(val *BlockAvailabilityInfoType) *NullableBlockAvailabilityInfoType {
	return &NullableBlockAvailabilityInfoType{value: val, isSet: true}
}

func (v NullableBlockAvailabilityInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailabilityInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


