/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockWashSchedulesInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockWashSchedulesInfoType{}

// BlockWashSchedulesInfoType The criteria based on which the block wash schedules will be created/ changed.
type BlockWashSchedulesInfoType struct {
	BlockIdList *BlockIdList `json:"blockIdList,omitempty"`
	BlockWashSchedules *BlockWashSchedulesType `json:"blockWashSchedules,omitempty"`
	// Hotel Code to which the block wash schedules will be created/ changed.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewBlockWashSchedulesInfoType instantiates a new BlockWashSchedulesInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockWashSchedulesInfoType() *BlockWashSchedulesInfoType {
	this := BlockWashSchedulesInfoType{}
	return &this
}

// NewBlockWashSchedulesInfoTypeWithDefaults instantiates a new BlockWashSchedulesInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWashSchedulesInfoTypeWithDefaults() *BlockWashSchedulesInfoType {
	this := BlockWashSchedulesInfoType{}
	return &this
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *BlockWashSchedulesInfoType) GetBlockIdList() BlockIdList {
	if o == nil || IsNil(o.BlockIdList) {
		var ret BlockIdList
		return ret
	}
	return *o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockWashSchedulesInfoType) GetBlockIdListOk() (*BlockIdList, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *BlockWashSchedulesInfoType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given BlockIdList and assigns it to the BlockIdList field.
func (o *BlockWashSchedulesInfoType) SetBlockIdList(v BlockIdList) {
	o.BlockIdList = &v
}

// GetBlockWashSchedules returns the BlockWashSchedules field value if set, zero value otherwise.
func (o *BlockWashSchedulesInfoType) GetBlockWashSchedules() BlockWashSchedulesType {
	if o == nil || IsNil(o.BlockWashSchedules) {
		var ret BlockWashSchedulesType
		return ret
	}
	return *o.BlockWashSchedules
}

// GetBlockWashSchedulesOk returns a tuple with the BlockWashSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockWashSchedulesInfoType) GetBlockWashSchedulesOk() (*BlockWashSchedulesType, bool) {
	if o == nil || IsNil(o.BlockWashSchedules) {
		return nil, false
	}
	return o.BlockWashSchedules, true
}

// HasBlockWashSchedules returns a boolean if a field has been set.
func (o *BlockWashSchedulesInfoType) HasBlockWashSchedules() bool {
	if o != nil && !IsNil(o.BlockWashSchedules) {
		return true
	}

	return false
}

// SetBlockWashSchedules gets a reference to the given BlockWashSchedulesType and assigns it to the BlockWashSchedules field.
func (o *BlockWashSchedulesInfoType) SetBlockWashSchedules(v BlockWashSchedulesType) {
	o.BlockWashSchedules = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockWashSchedulesInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockWashSchedulesInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockWashSchedulesInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockWashSchedulesInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o BlockWashSchedulesInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockWashSchedulesInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.BlockWashSchedules) {
		toSerialize["blockWashSchedules"] = o.BlockWashSchedules
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableBlockWashSchedulesInfoType struct {
	value *BlockWashSchedulesInfoType
	isSet bool
}

func (v NullableBlockWashSchedulesInfoType) Get() *BlockWashSchedulesInfoType {
	return v.value
}

func (v *NullableBlockWashSchedulesInfoType) Set(val *BlockWashSchedulesInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockWashSchedulesInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockWashSchedulesInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockWashSchedulesInfoType(val *BlockWashSchedulesInfoType) *NullableBlockWashSchedulesInfoType {
	return &NullableBlockWashSchedulesInfoType{value: val, isSet: true}
}

func (v NullableBlockWashSchedulesInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockWashSchedulesInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


