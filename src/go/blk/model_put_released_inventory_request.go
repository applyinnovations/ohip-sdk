/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the PutReleasedInventoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutReleasedInventoryRequest{}

// PutReleasedInventoryRequest struct for PutReleasedInventoryRequest
type PutReleasedInventoryRequest struct {
	// The number of adults that are expected to stay in a room.
	AdultCount *int32 `json:"adultCount,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	ExistingReservationId *UniqueIDType `json:"existingReservationId,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	// The date and number of rooms to return to either a room type or House.
	InventoryToReturnList []InventoryToReturnType `json:"inventoryToReturnList,omitempty"`
	Links *Links `json:"links,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	RoomType *string `json:"roomType,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPutReleasedInventoryRequest instantiates a new PutReleasedInventoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutReleasedInventoryRequest() *PutReleasedInventoryRequest {
	this := PutReleasedInventoryRequest{}
	return &this
}

// NewPutReleasedInventoryRequestWithDefaults instantiates a new PutReleasedInventoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutReleasedInventoryRequestWithDefaults() *PutReleasedInventoryRequest {
	this := PutReleasedInventoryRequest{}
	return &this
}

// GetAdultCount returns the AdultCount field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetAdultCount() int32 {
	if o == nil || IsNil(o.AdultCount) {
		var ret int32
		return ret
	}
	return *o.AdultCount
}

// GetAdultCountOk returns a tuple with the AdultCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetAdultCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AdultCount) {
		return nil, false
	}
	return o.AdultCount, true
}

// HasAdultCount returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasAdultCount() bool {
	if o != nil && !IsNil(o.AdultCount) {
		return true
	}

	return false
}

// SetAdultCount gets a reference to the given int32 and assigns it to the AdultCount field.
func (o *PutReleasedInventoryRequest) SetAdultCount(v int32) {
	o.AdultCount = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *PutReleasedInventoryRequest) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetExistingReservationId returns the ExistingReservationId field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetExistingReservationId() UniqueIDType {
	if o == nil || IsNil(o.ExistingReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExistingReservationId
}

// GetExistingReservationIdOk returns a tuple with the ExistingReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetExistingReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExistingReservationId) {
		return nil, false
	}
	return o.ExistingReservationId, true
}

// HasExistingReservationId returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasExistingReservationId() bool {
	if o != nil && !IsNil(o.ExistingReservationId) {
		return true
	}

	return false
}

// SetExistingReservationId gets a reference to the given UniqueIDType and assigns it to the ExistingReservationId field.
func (o *PutReleasedInventoryRequest) SetExistingReservationId(v UniqueIDType) {
	o.ExistingReservationId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PutReleasedInventoryRequest) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInventoryToReturnList returns the InventoryToReturnList field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetInventoryToReturnList() []InventoryToReturnType {
	if o == nil || IsNil(o.InventoryToReturnList) {
		var ret []InventoryToReturnType
		return ret
	}
	return o.InventoryToReturnList
}

// GetInventoryToReturnListOk returns a tuple with the InventoryToReturnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetInventoryToReturnListOk() ([]InventoryToReturnType, bool) {
	if o == nil || IsNil(o.InventoryToReturnList) {
		return nil, false
	}
	return o.InventoryToReturnList, true
}

// HasInventoryToReturnList returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasInventoryToReturnList() bool {
	if o != nil && !IsNil(o.InventoryToReturnList) {
		return true
	}

	return false
}

// SetInventoryToReturnList gets a reference to the given []InventoryToReturnType and assigns it to the InventoryToReturnList field.
func (o *PutReleasedInventoryRequest) SetInventoryToReturnList(v []InventoryToReturnType) {
	o.InventoryToReturnList = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *PutReleasedInventoryRequest) SetLinks(v Links) {
	o.Links = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *PutReleasedInventoryRequest) SetRoomType(v string) {
	o.RoomType = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PutReleasedInventoryRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutReleasedInventoryRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PutReleasedInventoryRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PutReleasedInventoryRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PutReleasedInventoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutReleasedInventoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdultCount) {
		toSerialize["adultCount"] = o.AdultCount
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.ExistingReservationId) {
		toSerialize["existingReservationId"] = o.ExistingReservationId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InventoryToReturnList) {
		toSerialize["inventoryToReturnList"] = o.InventoryToReturnList
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePutReleasedInventoryRequest struct {
	value *PutReleasedInventoryRequest
	isSet bool
}

func (v NullablePutReleasedInventoryRequest) Get() *PutReleasedInventoryRequest {
	return v.value
}

func (v *NullablePutReleasedInventoryRequest) Set(val *PutReleasedInventoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutReleasedInventoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutReleasedInventoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutReleasedInventoryRequest(val *PutReleasedInventoryRequest) *NullablePutReleasedInventoryRequest {
	return &NullablePutReleasedInventoryRequest{value: val, isSet: true}
}

func (v NullablePutReleasedInventoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutReleasedInventoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


