/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RoomingList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomingList{}

// RoomingList Request object for creating rooming list reservations. The standard optional Opera Context element is also included.
type RoomingList struct {
	BlockInfo *RoomingListBlockInfoType `json:"blockInfo,omitempty"`
	Links *Links `json:"links,omitempty"`
	Reservations *RoomingListReservationsType `json:"reservations,omitempty"`
	Shares *RoomingListSharesType `json:"shares,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewRoomingList instantiates a new RoomingList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomingList() *RoomingList {
	this := RoomingList{}
	return &this
}

// NewRoomingListWithDefaults instantiates a new RoomingList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomingListWithDefaults() *RoomingList {
	this := RoomingList{}
	return &this
}

// GetBlockInfo returns the BlockInfo field value if set, zero value otherwise.
func (o *RoomingList) GetBlockInfo() RoomingListBlockInfoType {
	if o == nil || IsNil(o.BlockInfo) {
		var ret RoomingListBlockInfoType
		return ret
	}
	return *o.BlockInfo
}

// GetBlockInfoOk returns a tuple with the BlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetBlockInfoOk() (*RoomingListBlockInfoType, bool) {
	if o == nil || IsNil(o.BlockInfo) {
		return nil, false
	}
	return o.BlockInfo, true
}

// HasBlockInfo returns a boolean if a field has been set.
func (o *RoomingList) HasBlockInfo() bool {
	if o != nil && !IsNil(o.BlockInfo) {
		return true
	}

	return false
}

// SetBlockInfo gets a reference to the given RoomingListBlockInfoType and assigns it to the BlockInfo field.
func (o *RoomingList) SetBlockInfo(v RoomingListBlockInfoType) {
	o.BlockInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RoomingList) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RoomingList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *RoomingList) SetLinks(v Links) {
	o.Links = &v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *RoomingList) GetReservations() RoomingListReservationsType {
	if o == nil || IsNil(o.Reservations) {
		var ret RoomingListReservationsType
		return ret
	}
	return *o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetReservationsOk() (*RoomingListReservationsType, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *RoomingList) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given RoomingListReservationsType and assigns it to the Reservations field.
func (o *RoomingList) SetReservations(v RoomingListReservationsType) {
	o.Reservations = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *RoomingList) GetShares() RoomingListSharesType {
	if o == nil || IsNil(o.Shares) {
		var ret RoomingListSharesType
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetSharesOk() (*RoomingListSharesType, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *RoomingList) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given RoomingListSharesType and assigns it to the Shares field.
func (o *RoomingList) SetShares(v RoomingListSharesType) {
	o.Shares = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RoomingList) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RoomingList) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *RoomingList) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o RoomingList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomingList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockInfo) {
		toSerialize["blockInfo"] = o.BlockInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRoomingList struct {
	value *RoomingList
	isSet bool
}

func (v NullableRoomingList) Get() *RoomingList {
	return v.value
}

func (v *NullableRoomingList) Set(val *RoomingList) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomingList) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomingList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomingList(val *RoomingList) *NullableRoomingList {
	return &NullableRoomingList{value: val, isSet: true}
}

func (v NullableRoomingList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomingList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


