/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the RoomRotationRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomRotationRules{}

// RoomRotationRules Request object for saving changes to room type rotation rules.
type RoomRotationRules struct {
	// Indicates if Rotation points recalculation job should be re-triggered.
	ForceRecalculate *bool `json:"forceRecalculate,omitempty"`
	// Defines collection of Room Rotation Setup Rules.
	RotationRules []RotationRuleType `json:"rotationRules,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewRoomRotationRules instantiates a new RoomRotationRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomRotationRules() *RoomRotationRules {
	this := RoomRotationRules{}
	var forceRecalculate bool = false
	this.ForceRecalculate = &forceRecalculate
	return &this
}

// NewRoomRotationRulesWithDefaults instantiates a new RoomRotationRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomRotationRulesWithDefaults() *RoomRotationRules {
	this := RoomRotationRules{}
	var forceRecalculate bool = false
	this.ForceRecalculate = &forceRecalculate
	return &this
}

// GetForceRecalculate returns the ForceRecalculate field value if set, zero value otherwise.
func (o *RoomRotationRules) GetForceRecalculate() bool {
	if o == nil || IsNil(o.ForceRecalculate) {
		var ret bool
		return ret
	}
	return *o.ForceRecalculate
}

// GetForceRecalculateOk returns a tuple with the ForceRecalculate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRotationRules) GetForceRecalculateOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceRecalculate) {
		return nil, false
	}
	return o.ForceRecalculate, true
}

// HasForceRecalculate returns a boolean if a field has been set.
func (o *RoomRotationRules) HasForceRecalculate() bool {
	if o != nil && !IsNil(o.ForceRecalculate) {
		return true
	}

	return false
}

// SetForceRecalculate gets a reference to the given bool and assigns it to the ForceRecalculate field.
func (o *RoomRotationRules) SetForceRecalculate(v bool) {
	o.ForceRecalculate = &v
}

// GetRotationRules returns the RotationRules field value if set, zero value otherwise.
func (o *RoomRotationRules) GetRotationRules() []RotationRuleType {
	if o == nil || IsNil(o.RotationRules) {
		var ret []RotationRuleType
		return ret
	}
	return o.RotationRules
}

// GetRotationRulesOk returns a tuple with the RotationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRotationRules) GetRotationRulesOk() ([]RotationRuleType, bool) {
	if o == nil || IsNil(o.RotationRules) {
		return nil, false
	}
	return o.RotationRules, true
}

// HasRotationRules returns a boolean if a field has been set.
func (o *RoomRotationRules) HasRotationRules() bool {
	if o != nil && !IsNil(o.RotationRules) {
		return true
	}

	return false
}

// SetRotationRules gets a reference to the given []RotationRuleType and assigns it to the RotationRules field.
func (o *RoomRotationRules) SetRotationRules(v []RotationRuleType) {
	o.RotationRules = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RoomRotationRules) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomRotationRules) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RoomRotationRules) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *RoomRotationRules) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o RoomRotationRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomRotationRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceRecalculate) {
		toSerialize["forceRecalculate"] = o.ForceRecalculate
	}
	if !IsNil(o.RotationRules) {
		toSerialize["rotationRules"] = o.RotationRules
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRoomRotationRules struct {
	value *RoomRotationRules
	isSet bool
}

func (v NullableRoomRotationRules) Get() *RoomRotationRules {
	return v.value
}

func (v *NullableRoomRotationRules) Set(val *RoomRotationRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomRotationRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomRotationRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomRotationRules(val *RoomRotationRules) *NullableRoomRotationRules {
	return &NullableRoomRotationRules{value: val, isSet: true}
}

func (v NullableRoomRotationRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomRotationRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


