/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the RotationRevenueTransactionCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RotationRevenueTransactionCodesType{}

// RotationRevenueTransactionCodesType A revenue transaction code.
type RotationRevenueTransactionCodesType struct {
	Items []RotationRevenueTransactionCodeType
}

// NewRotationRevenueTransactionCodesType instantiates a new RotationRevenueTransactionCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotationRevenueTransactionCodesType() *RotationRevenueTransactionCodesType {
	this := RotationRevenueTransactionCodesType{}
	return &this
}

// NewRotationRevenueTransactionCodesTypeWithDefaults instantiates a new RotationRevenueTransactionCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotationRevenueTransactionCodesTypeWithDefaults() *RotationRevenueTransactionCodesType {
	this := RotationRevenueTransactionCodesType{}
	return &this
}

func (o RotationRevenueTransactionCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RotationRevenueTransactionCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *RotationRevenueTransactionCodesType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableRotationRevenueTransactionCodesType struct {
	value RotationRevenueTransactionCodesType
	isSet bool
}

func (v NullableRotationRevenueTransactionCodesType) Get() RotationRevenueTransactionCodesType {
	return v.value
}

func (v *NullableRotationRevenueTransactionCodesType) Set(val RotationRevenueTransactionCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRotationRevenueTransactionCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRotationRevenueTransactionCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotationRevenueTransactionCodesType(val RotationRevenueTransactionCodesType) *NullableRotationRevenueTransactionCodesType {
	return &NullableRotationRevenueTransactionCodesType{value: val, isSet: true}
}

func (v NullableRotationRevenueTransactionCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotationRevenueTransactionCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


