/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the ChangeRoomOwnerReferralDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeRoomOwnerReferralDetails{}

// ChangeRoomOwnerReferralDetails Request object for changing Room Owner Referral records.
type ChangeRoomOwnerReferralDetails struct {
	RoomOwnerReferral *RoomOwnerReferralType `json:"roomOwnerReferral,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewChangeRoomOwnerReferralDetails instantiates a new ChangeRoomOwnerReferralDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeRoomOwnerReferralDetails() *ChangeRoomOwnerReferralDetails {
	this := ChangeRoomOwnerReferralDetails{}
	return &this
}

// NewChangeRoomOwnerReferralDetailsWithDefaults instantiates a new ChangeRoomOwnerReferralDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeRoomOwnerReferralDetailsWithDefaults() *ChangeRoomOwnerReferralDetails {
	this := ChangeRoomOwnerReferralDetails{}
	return &this
}

// GetRoomOwnerReferral returns the RoomOwnerReferral field value if set, zero value otherwise.
func (o *ChangeRoomOwnerReferralDetails) GetRoomOwnerReferral() RoomOwnerReferralType {
	if o == nil || IsNil(o.RoomOwnerReferral) {
		var ret RoomOwnerReferralType
		return ret
	}
	return *o.RoomOwnerReferral
}

// GetRoomOwnerReferralOk returns a tuple with the RoomOwnerReferral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoomOwnerReferralDetails) GetRoomOwnerReferralOk() (*RoomOwnerReferralType, bool) {
	if o == nil || IsNil(o.RoomOwnerReferral) {
		return nil, false
	}
	return o.RoomOwnerReferral, true
}

// HasRoomOwnerReferral returns a boolean if a field has been set.
func (o *ChangeRoomOwnerReferralDetails) HasRoomOwnerReferral() bool {
	if o != nil && !IsNil(o.RoomOwnerReferral) {
		return true
	}

	return false
}

// SetRoomOwnerReferral gets a reference to the given RoomOwnerReferralType and assigns it to the RoomOwnerReferral field.
func (o *ChangeRoomOwnerReferralDetails) SetRoomOwnerReferral(v RoomOwnerReferralType) {
	o.RoomOwnerReferral = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChangeRoomOwnerReferralDetails) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoomOwnerReferralDetails) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChangeRoomOwnerReferralDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *ChangeRoomOwnerReferralDetails) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o ChangeRoomOwnerReferralDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeRoomOwnerReferralDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomOwnerReferral) {
		toSerialize["roomOwnerReferral"] = o.RoomOwnerReferral
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChangeRoomOwnerReferralDetails struct {
	value *ChangeRoomOwnerReferralDetails
	isSet bool
}

func (v NullableChangeRoomOwnerReferralDetails) Get() *ChangeRoomOwnerReferralDetails {
	return v.value
}

func (v *NullableChangeRoomOwnerReferralDetails) Set(val *ChangeRoomOwnerReferralDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeRoomOwnerReferralDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeRoomOwnerReferralDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeRoomOwnerReferralDetails(val *ChangeRoomOwnerReferralDetails) *NullableChangeRoomOwnerReferralDetails {
	return &NullableChangeRoomOwnerReferralDetails{value: val, isSet: true}
}

func (v NullableChangeRoomOwnerReferralDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeRoomOwnerReferralDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


