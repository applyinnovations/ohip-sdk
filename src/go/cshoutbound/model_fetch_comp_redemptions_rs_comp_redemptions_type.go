/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the FetchCompRedemptionsRSCompRedemptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchCompRedemptionsRSCompRedemptionsType{}

// FetchCompRedemptionsRSCompRedemptionsType Collection of Complimentary Redemption codes and their respective Available Amount.
type FetchCompRedemptionsRSCompRedemptionsType struct {
	Items []FetchCompRedemptionsRSCompRedemptionType
}

// NewFetchCompRedemptionsRSCompRedemptionsType instantiates a new FetchCompRedemptionsRSCompRedemptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchCompRedemptionsRSCompRedemptionsType() *FetchCompRedemptionsRSCompRedemptionsType {
	this := FetchCompRedemptionsRSCompRedemptionsType{}
	return &this
}

// NewFetchCompRedemptionsRSCompRedemptionsTypeWithDefaults instantiates a new FetchCompRedemptionsRSCompRedemptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchCompRedemptionsRSCompRedemptionsTypeWithDefaults() *FetchCompRedemptionsRSCompRedemptionsType {
	this := FetchCompRedemptionsRSCompRedemptionsType{}
	return &this
}

func (o FetchCompRedemptionsRSCompRedemptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchCompRedemptionsRSCompRedemptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *FetchCompRedemptionsRSCompRedemptionsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableFetchCompRedemptionsRSCompRedemptionsType struct {
	value FetchCompRedemptionsRSCompRedemptionsType
	isSet bool
}

func (v NullableFetchCompRedemptionsRSCompRedemptionsType) Get() FetchCompRedemptionsRSCompRedemptionsType {
	return v.value
}

func (v *NullableFetchCompRedemptionsRSCompRedemptionsType) Set(val FetchCompRedemptionsRSCompRedemptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchCompRedemptionsRSCompRedemptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchCompRedemptionsRSCompRedemptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchCompRedemptionsRSCompRedemptionsType(val FetchCompRedemptionsRSCompRedemptionsType) *NullableFetchCompRedemptionsRSCompRedemptionsType {
	return &NullableFetchCompRedemptionsRSCompRedemptionsType{value: val, isSet: true}
}

func (v NullableFetchCompRedemptionsRSCompRedemptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchCompRedemptionsRSCompRedemptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


