/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the SendCompTransactionsStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendCompTransactionsStatus{}

// SendCompTransactionsStatus struct for SendCompTransactionsStatus
type SendCompTransactionsStatus struct {
	CompPostings *CompTransactionsInfoType `json:"compPostings,omitempty"`
	Links *Links `json:"links,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewSendCompTransactionsStatus instantiates a new SendCompTransactionsStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendCompTransactionsStatus() *SendCompTransactionsStatus {
	this := SendCompTransactionsStatus{}
	return &this
}

// NewSendCompTransactionsStatusWithDefaults instantiates a new SendCompTransactionsStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendCompTransactionsStatusWithDefaults() *SendCompTransactionsStatus {
	this := SendCompTransactionsStatus{}
	return &this
}

// GetCompPostings returns the CompPostings field value if set, zero value otherwise.
func (o *SendCompTransactionsStatus) GetCompPostings() CompTransactionsInfoType {
	if o == nil || IsNil(o.CompPostings) {
		var ret CompTransactionsInfoType
		return ret
	}
	return *o.CompPostings
}

// GetCompPostingsOk returns a tuple with the CompPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCompTransactionsStatus) GetCompPostingsOk() (*CompTransactionsInfoType, bool) {
	if o == nil || IsNil(o.CompPostings) {
		return nil, false
	}
	return o.CompPostings, true
}

// HasCompPostings returns a boolean if a field has been set.
func (o *SendCompTransactionsStatus) HasCompPostings() bool {
	if o != nil && !IsNil(o.CompPostings) {
		return true
	}

	return false
}

// SetCompPostings gets a reference to the given CompTransactionsInfoType and assigns it to the CompPostings field.
func (o *SendCompTransactionsStatus) SetCompPostings(v CompTransactionsInfoType) {
	o.CompPostings = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SendCompTransactionsStatus) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCompTransactionsStatus) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SendCompTransactionsStatus) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *SendCompTransactionsStatus) SetLinks(v Links) {
	o.Links = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SendCompTransactionsStatus) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendCompTransactionsStatus) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SendCompTransactionsStatus) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *SendCompTransactionsStatus) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o SendCompTransactionsStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendCompTransactionsStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompPostings) {
		toSerialize["compPostings"] = o.CompPostings
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSendCompTransactionsStatus struct {
	value *SendCompTransactionsStatus
	isSet bool
}

func (v NullableSendCompTransactionsStatus) Get() *SendCompTransactionsStatus {
	return v.value
}

func (v *NullableSendCompTransactionsStatus) Set(val *SendCompTransactionsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSendCompTransactionsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSendCompTransactionsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendCompTransactionsStatus(val *SendCompTransactionsStatus) *NullableSendCompTransactionsStatus {
	return &NullableSendCompTransactionsStatus{value: val, isSet: true}
}

func (v NullableSendCompTransactionsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendCompTransactionsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


