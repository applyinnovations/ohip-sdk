/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the ReverseCompRedemptionsRQCompRedemptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseCompRedemptionsRQCompRedemptionsType{}

// ReverseCompRedemptionsRQCompRedemptionsType Collection of Complimentary Redemptions for reversal.
type ReverseCompRedemptionsRQCompRedemptionsType struct {
	Items []ReverseCompRedemptionsRQCompRedemptionType
}

// NewReverseCompRedemptionsRQCompRedemptionsType instantiates a new ReverseCompRedemptionsRQCompRedemptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseCompRedemptionsRQCompRedemptionsType() *ReverseCompRedemptionsRQCompRedemptionsType {
	this := ReverseCompRedemptionsRQCompRedemptionsType{}
	return &this
}

// NewReverseCompRedemptionsRQCompRedemptionsTypeWithDefaults instantiates a new ReverseCompRedemptionsRQCompRedemptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseCompRedemptionsRQCompRedemptionsTypeWithDefaults() *ReverseCompRedemptionsRQCompRedemptionsType {
	this := ReverseCompRedemptionsRQCompRedemptionsType{}
	return &this
}

func (o ReverseCompRedemptionsRQCompRedemptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseCompRedemptionsRQCompRedemptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *ReverseCompRedemptionsRQCompRedemptionsType) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableReverseCompRedemptionsRQCompRedemptionsType struct {
	value ReverseCompRedemptionsRQCompRedemptionsType
	isSet bool
}

func (v NullableReverseCompRedemptionsRQCompRedemptionsType) Get() ReverseCompRedemptionsRQCompRedemptionsType {
	return v.value
}

func (v *NullableReverseCompRedemptionsRQCompRedemptionsType) Set(val ReverseCompRedemptionsRQCompRedemptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseCompRedemptionsRQCompRedemptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseCompRedemptionsRQCompRedemptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseCompRedemptionsRQCompRedemptionsType(val ReverseCompRedemptionsRQCompRedemptionsType) *NullableReverseCompRedemptionsRQCompRedemptionsType {
	return &NullableReverseCompRedemptionsRQCompRedemptionsType{value: val, isSet: true}
}

func (v NullableReverseCompRedemptionsRQCompRedemptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseCompRedemptionsRQCompRedemptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


