/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelStatementAccountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelStatementAccountType{}

// ChannelStatementAccountType Channel account statement type to hold statement details. WS wont update any statement account information except Note and account details information.
type ChannelStatementAccountType struct {
	// Holds Account code of the channel account statement.
	AccountCode *string `json:"accountCode,omitempty"`
	// Holds begin date of the account statement.
	BeginDate *string `json:"beginDate,omitempty"`
	ChannelAccountStatementDetails *ChannelStatementDetailsType `json:"channelAccountStatementDetails,omitempty"`
	ContractId *UniqueIDType `json:"contractId,omitempty"`
	// Holds end date of the account statement.
	EndDate *string `json:"endDate,omitempty"`
	// Holds Note for the account statement.
	Note *string `json:"note,omitempty"`
	ProfileId *UniqueIDType `json:"profileId,omitempty"`
	TotalDetailsAmount *CurrencyAmountType `json:"totalDetailsAmount,omitempty"`
}

// NewChannelStatementAccountType instantiates a new ChannelStatementAccountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelStatementAccountType() *ChannelStatementAccountType {
	this := ChannelStatementAccountType{}
	return &this
}

// NewChannelStatementAccountTypeWithDefaults instantiates a new ChannelStatementAccountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelStatementAccountTypeWithDefaults() *ChannelStatementAccountType {
	this := ChannelStatementAccountType{}
	return &this
}

// GetAccountCode returns the AccountCode field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetAccountCode() string {
	if o == nil || IsNil(o.AccountCode) {
		var ret string
		return ret
	}
	return *o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetAccountCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountCode) {
		return nil, false
	}
	return o.AccountCode, true
}

// HasAccountCode returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasAccountCode() bool {
	if o != nil && !IsNil(o.AccountCode) {
		return true
	}

	return false
}

// SetAccountCode gets a reference to the given string and assigns it to the AccountCode field.
func (o *ChannelStatementAccountType) SetAccountCode(v string) {
	o.AccountCode = &v
}

// GetBeginDate returns the BeginDate field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetBeginDate() string {
	if o == nil || IsNil(o.BeginDate) {
		var ret string
		return ret
	}
	return *o.BeginDate
}

// GetBeginDateOk returns a tuple with the BeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.BeginDate) {
		return nil, false
	}
	return o.BeginDate, true
}

// HasBeginDate returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasBeginDate() bool {
	if o != nil && !IsNil(o.BeginDate) {
		return true
	}

	return false
}

// SetBeginDate gets a reference to the given string and assigns it to the BeginDate field.
func (o *ChannelStatementAccountType) SetBeginDate(v string) {
	o.BeginDate = &v
}

// GetChannelAccountStatementDetails returns the ChannelAccountStatementDetails field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetChannelAccountStatementDetails() ChannelStatementDetailsType {
	if o == nil || IsNil(o.ChannelAccountStatementDetails) {
		var ret ChannelStatementDetailsType
		return ret
	}
	return *o.ChannelAccountStatementDetails
}

// GetChannelAccountStatementDetailsOk returns a tuple with the ChannelAccountStatementDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetChannelAccountStatementDetailsOk() (*ChannelStatementDetailsType, bool) {
	if o == nil || IsNil(o.ChannelAccountStatementDetails) {
		return nil, false
	}
	return o.ChannelAccountStatementDetails, true
}

// HasChannelAccountStatementDetails returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasChannelAccountStatementDetails() bool {
	if o != nil && !IsNil(o.ChannelAccountStatementDetails) {
		return true
	}

	return false
}

// SetChannelAccountStatementDetails gets a reference to the given ChannelStatementDetailsType and assigns it to the ChannelAccountStatementDetails field.
func (o *ChannelStatementAccountType) SetChannelAccountStatementDetails(v ChannelStatementDetailsType) {
	o.ChannelAccountStatementDetails = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetContractId() UniqueIDType {
	if o == nil || IsNil(o.ContractId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetContractIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given UniqueIDType and assigns it to the ContractId field.
func (o *ChannelStatementAccountType) SetContractId(v UniqueIDType) {
	o.ContractId = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ChannelStatementAccountType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ChannelStatementAccountType) SetNote(v string) {
	o.Note = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetProfileId() UniqueIDType {
	if o == nil || IsNil(o.ProfileId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetProfileIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given UniqueIDType and assigns it to the ProfileId field.
func (o *ChannelStatementAccountType) SetProfileId(v UniqueIDType) {
	o.ProfileId = &v
}

// GetTotalDetailsAmount returns the TotalDetailsAmount field value if set, zero value otherwise.
func (o *ChannelStatementAccountType) GetTotalDetailsAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TotalDetailsAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalDetailsAmount
}

// GetTotalDetailsAmountOk returns a tuple with the TotalDetailsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelStatementAccountType) GetTotalDetailsAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalDetailsAmount) {
		return nil, false
	}
	return o.TotalDetailsAmount, true
}

// HasTotalDetailsAmount returns a boolean if a field has been set.
func (o *ChannelStatementAccountType) HasTotalDetailsAmount() bool {
	if o != nil && !IsNil(o.TotalDetailsAmount) {
		return true
	}

	return false
}

// SetTotalDetailsAmount gets a reference to the given CurrencyAmountType and assigns it to the TotalDetailsAmount field.
func (o *ChannelStatementAccountType) SetTotalDetailsAmount(v CurrencyAmountType) {
	o.TotalDetailsAmount = &v
}

func (o ChannelStatementAccountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelStatementAccountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountCode) {
		toSerialize["accountCode"] = o.AccountCode
	}
	if !IsNil(o.BeginDate) {
		toSerialize["beginDate"] = o.BeginDate
	}
	if !IsNil(o.ChannelAccountStatementDetails) {
		toSerialize["channelAccountStatementDetails"] = o.ChannelAccountStatementDetails
	}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.TotalDetailsAmount) {
		toSerialize["totalDetailsAmount"] = o.TotalDetailsAmount
	}
	return toSerialize, nil
}

type NullableChannelStatementAccountType struct {
	value *ChannelStatementAccountType
	isSet bool
}

func (v NullableChannelStatementAccountType) Get() *ChannelStatementAccountType {
	return v.value
}

func (v *NullableChannelStatementAccountType) Set(val *ChannelStatementAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelStatementAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelStatementAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelStatementAccountType(val *ChannelStatementAccountType) *NullableChannelStatementAccountType {
	return &NullableChannelStatementAccountType{value: val, isSet: true}
}

func (v NullableChannelStatementAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelStatementAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


