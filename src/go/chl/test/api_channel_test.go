/*
OPERA Cloud Channel Configuration API

Testing ChannelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package chl

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/chl"
)

func Test_chl_ChannelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelApiService CopyChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.CopyChannelAccountContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService CopyChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.CopyChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService CopyTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.CopyTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelAccountContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelCarriers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelErrors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRateCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRateLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRoomMapping(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRoomTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService DeleteTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.DeleteTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GenerateChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GenerateChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.GetChannel(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelAccount(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelAccountContractElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelAccountContractElements(context.Background(), contractId, accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelBillingStatement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelBillingStatement(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelBillingStatementDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelBillingStatementDetails(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelCardTypeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelCardTypeMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelGuaranteeCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelGuaranteeCodeMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelHotelCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelHotelCodeMapping(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelParameters(context.Background(), channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelPolicies(context.Background(), channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRateCodeGlobalDesc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRateCodeGlobalDesc(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRateRoomSeq", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRateRoomSeq(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRoomMapping(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRoomMappingById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRoomMappingById(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRoomTypeGlobalDesc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRoomTypeGlobalDesc(context.Background(), roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.GetHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetStatementDetailsStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelApi.GetStatementDetailsStatistics(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService GetTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.GetTotalPricingElements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService ManageChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.ManageChannelRoomMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelAccountContracts(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelCarriers(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelErrors(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelOrgMapping(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRateCategories(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRateLevels(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRoomMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRoomTypeRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelRoomType string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRoomTypeRate(context.Background(), channelRoomType, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRoomTypes(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PostTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PostTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PublishChannelAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PublishChannelAvailability(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PublishChannelRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PublishChannelRatePlans(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PublishChannelRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PublishChannelRestrictions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PublishHotelChannelRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PublishHotelChannelRatePlans(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelAccountContracts(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelCarriers(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelErrors(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelParameters(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRateCategories(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRateLevels(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRateRoomSeq", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRateRoomSeq(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRoomMapping(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRoomTypes(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutRateGlobalDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelRateCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelApi.PutRateGlobalDescription(context.Background(), channelRateCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutRoomDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutRoomDescription(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelApiService PutTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelApi.PutTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
