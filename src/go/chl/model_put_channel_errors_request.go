/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the PutChannelErrorsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutChannelErrorsRequest{}

// PutChannelErrorsRequest struct for PutChannelErrorsRequest
type PutChannelErrorsRequest struct {
	Errors *ChannelErrorsErrors `json:"errors,omitempty"`
	Warnings *WarningsType `json:"warnings,omitempty"`
}

// NewPutChannelErrorsRequest instantiates a new PutChannelErrorsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutChannelErrorsRequest() *PutChannelErrorsRequest {
	this := PutChannelErrorsRequest{}
	return &this
}

// NewPutChannelErrorsRequestWithDefaults instantiates a new PutChannelErrorsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutChannelErrorsRequestWithDefaults() *PutChannelErrorsRequest {
	this := PutChannelErrorsRequest{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *PutChannelErrorsRequest) GetErrors() ChannelErrorsErrors {
	if o == nil || IsNil(o.Errors) {
		var ret ChannelErrorsErrors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutChannelErrorsRequest) GetErrorsOk() (*ChannelErrorsErrors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *PutChannelErrorsRequest) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given ChannelErrorsErrors and assigns it to the Errors field.
func (o *PutChannelErrorsRequest) SetErrors(v ChannelErrorsErrors) {
	o.Errors = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PutChannelErrorsRequest) GetWarnings() WarningsType {
	if o == nil || IsNil(o.Warnings) {
		var ret WarningsType
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutChannelErrorsRequest) GetWarningsOk() (*WarningsType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PutChannelErrorsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given WarningsType and assigns it to the Warnings field.
func (o *PutChannelErrorsRequest) SetWarnings(v WarningsType) {
	o.Warnings = &v
}

func (o PutChannelErrorsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutChannelErrorsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePutChannelErrorsRequest struct {
	value *PutChannelErrorsRequest
	isSet bool
}

func (v NullablePutChannelErrorsRequest) Get() *PutChannelErrorsRequest {
	return v.value
}

func (v *NullablePutChannelErrorsRequest) Set(val *PutChannelErrorsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutChannelErrorsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutChannelErrorsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutChannelErrorsRequest(val *PutChannelErrorsRequest) *NullablePutChannelErrorsRequest {
	return &NullablePutChannelErrorsRequest{value: val, isSet: true}
}

func (v NullablePutChannelErrorsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutChannelErrorsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


