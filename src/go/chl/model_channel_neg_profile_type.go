/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelNegProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelNegProfileType{}

// ChannelNegProfileType A negotiated rate type
type ChannelNegProfileType struct {
	AccessInfoList []ChannelNegRateAccessType `json:"accessInfoList,omitempty"`
	FormerName *PersonNameType `json:"formerName,omitempty"`
	UniqueId *UniqueIDListType `json:"uniqueId,omitempty"`
}

// NewChannelNegProfileType instantiates a new ChannelNegProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelNegProfileType() *ChannelNegProfileType {
	this := ChannelNegProfileType{}
	return &this
}

// NewChannelNegProfileTypeWithDefaults instantiates a new ChannelNegProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelNegProfileTypeWithDefaults() *ChannelNegProfileType {
	this := ChannelNegProfileType{}
	return &this
}

// GetAccessInfoList returns the AccessInfoList field value if set, zero value otherwise.
func (o *ChannelNegProfileType) GetAccessInfoList() []ChannelNegRateAccessType {
	if o == nil || IsNil(o.AccessInfoList) {
		var ret []ChannelNegRateAccessType
		return ret
	}
	return o.AccessInfoList
}

// GetAccessInfoListOk returns a tuple with the AccessInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegProfileType) GetAccessInfoListOk() ([]ChannelNegRateAccessType, bool) {
	if o == nil || IsNil(o.AccessInfoList) {
		return nil, false
	}
	return o.AccessInfoList, true
}

// HasAccessInfoList returns a boolean if a field has been set.
func (o *ChannelNegProfileType) HasAccessInfoList() bool {
	if o != nil && !IsNil(o.AccessInfoList) {
		return true
	}

	return false
}

// SetAccessInfoList gets a reference to the given []ChannelNegRateAccessType and assigns it to the AccessInfoList field.
func (o *ChannelNegProfileType) SetAccessInfoList(v []ChannelNegRateAccessType) {
	o.AccessInfoList = v
}

// GetFormerName returns the FormerName field value if set, zero value otherwise.
func (o *ChannelNegProfileType) GetFormerName() PersonNameType {
	if o == nil || IsNil(o.FormerName) {
		var ret PersonNameType
		return ret
	}
	return *o.FormerName
}

// GetFormerNameOk returns a tuple with the FormerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegProfileType) GetFormerNameOk() (*PersonNameType, bool) {
	if o == nil || IsNil(o.FormerName) {
		return nil, false
	}
	return o.FormerName, true
}

// HasFormerName returns a boolean if a field has been set.
func (o *ChannelNegProfileType) HasFormerName() bool {
	if o != nil && !IsNil(o.FormerName) {
		return true
	}

	return false
}

// SetFormerName gets a reference to the given PersonNameType and assigns it to the FormerName field.
func (o *ChannelNegProfileType) SetFormerName(v PersonNameType) {
	o.FormerName = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *ChannelNegProfileType) GetUniqueId() UniqueIDListType {
	if o == nil || IsNil(o.UniqueId) {
		var ret UniqueIDListType
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegProfileType) GetUniqueIdOk() (*UniqueIDListType, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *ChannelNegProfileType) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given UniqueIDListType and assigns it to the UniqueId field.
func (o *ChannelNegProfileType) SetUniqueId(v UniqueIDListType) {
	o.UniqueId = &v
}

func (o ChannelNegProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelNegProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessInfoList) {
		toSerialize["accessInfoList"] = o.AccessInfoList
	}
	if !IsNil(o.FormerName) {
		toSerialize["formerName"] = o.FormerName
	}
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	return toSerialize, nil
}

type NullableChannelNegProfileType struct {
	value *ChannelNegProfileType
	isSet bool
}

func (v NullableChannelNegProfileType) Get() *ChannelNegProfileType {
	return v.value
}

func (v *NullableChannelNegProfileType) Set(val *ChannelNegProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelNegProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelNegProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelNegProfileType(val *ChannelNegProfileType) *NullableChannelNegProfileType {
	return &NullableChannelNegProfileType{value: val, isSet: true}
}

func (v NullableChannelNegProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelNegProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


