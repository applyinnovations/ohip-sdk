/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelAccountNotesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelAccountNotesType{}

// ChannelAccountNotesType Holds channel account notes information.
type ChannelAccountNotesType struct {
	// Holds Note for the account.
	Note *string `json:"note,omitempty"`
}

// NewChannelAccountNotesType instantiates a new ChannelAccountNotesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelAccountNotesType() *ChannelAccountNotesType {
	this := ChannelAccountNotesType{}
	return &this
}

// NewChannelAccountNotesTypeWithDefaults instantiates a new ChannelAccountNotesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelAccountNotesTypeWithDefaults() *ChannelAccountNotesType {
	this := ChannelAccountNotesType{}
	return &this
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ChannelAccountNotesType) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountNotesType) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ChannelAccountNotesType) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ChannelAccountNotesType) SetNote(v string) {
	o.Note = &v
}

func (o ChannelAccountNotesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelAccountNotesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableChannelAccountNotesType struct {
	value *ChannelAccountNotesType
	isSet bool
}

func (v NullableChannelAccountNotesType) Get() *ChannelAccountNotesType {
	return v.value
}

func (v *NullableChannelAccountNotesType) Set(val *ChannelAccountNotesType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelAccountNotesType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelAccountNotesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelAccountNotesType(val *ChannelAccountNotesType) *NullableChannelAccountNotesType {
	return &NullableChannelAccountNotesType{value: val, isSet: true}
}

func (v NullableChannelAccountNotesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelAccountNotesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


