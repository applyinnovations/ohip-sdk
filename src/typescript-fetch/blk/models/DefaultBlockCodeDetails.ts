/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object that returns a default block code based on template.
 * @export
 * @interface DefaultBlockCodeDetails
 */
export interface DefaultBlockCodeDetails {
    /**
     * Business Block Code.
     * @type {string}
     * @memberof DefaultBlockCodeDetails
     */
    blockCode?: string;
    /**
     * 
     * @type {Links}
     * @memberof DefaultBlockCodeDetails
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof DefaultBlockCodeDetails
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the DefaultBlockCodeDetails interface.
 */
export function instanceOfDefaultBlockCodeDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DefaultBlockCodeDetailsFromJSON(json: any): DefaultBlockCodeDetails {
    return DefaultBlockCodeDetailsFromJSONTyped(json, false);
}

export function DefaultBlockCodeDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DefaultBlockCodeDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function DefaultBlockCodeDetailsToJSON(value?: DefaultBlockCodeDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockCode': value.blockCode,
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

