/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockType } from './BlockType';
import {
    BlockTypeFromJSON,
    BlockTypeFromJSONTyped,
    BlockTypeToJSON,
} from './BlockType';
import type { BookingStatusDetailType } from './BookingStatusDetailType';
import {
    BookingStatusDetailTypeFromJSON,
    BookingStatusDetailTypeFromJSONTyped,
    BookingStatusDetailTypeToJSON,
} from './BookingStatusDetailType';
import type { BookingStatusHistoryType } from './BookingStatusHistoryType';
import {
    BookingStatusHistoryTypeFromJSON,
    BookingStatusHistoryTypeFromJSONTyped,
    BookingStatusHistoryTypeToJSON,
} from './BookingStatusHistoryType';
import type { CancellationDetailsType } from './CancellationDetailsType';
import {
    CancellationDetailsTypeFromJSON,
    CancellationDetailsTypeFromJSONTyped,
    CancellationDetailsTypeToJSON,
} from './CancellationDetailsType';
import type { CateringEventsProcessedInfoType } from './CateringEventsProcessedInfoType';
import {
    CateringEventsProcessedInfoTypeFromJSON,
    CateringEventsProcessedInfoTypeFromJSONTyped,
    CateringEventsProcessedInfoTypeToJSON,
} from './CateringEventsProcessedInfoType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for the request to change catering status. Response contains information on the block whose status was successfully changed.
 * @export
 * @interface ChangedCateringStatus
 */
export interface ChangedCateringStatus {
    /**
     * 
     * @type {BlockType}
     * @memberof ChangedCateringStatus
     */
    block?: BlockType;
    /**
     * 
     * @type {CancellationDetailsType}
     * @memberof ChangedCateringStatus
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * Status/Info of the processed events.
     * @type {Array<CateringEventsProcessedInfoType>}
     * @memberof ChangedCateringStatus
     */
    cateringEventsProcessedInfo?: Array<CateringEventsProcessedInfoType>;
    /**
     * Next catering status of the business block.
     * @type {Array<BookingStatusDetailType>}
     * @memberof ChangedCateringStatus
     */
    cateringNextStatusList?: Array<BookingStatusDetailType>;
    /**
     * Collection of catering status history.
     * @type {Array<BookingStatusHistoryType>}
     * @memberof ChangedCateringStatus
     */
    cateringStatusChangeHistory?: Array<BookingStatusHistoryType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ChangedCateringStatus
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ChangedCateringStatus
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ChangedCateringStatus interface.
 */
export function instanceOfChangedCateringStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangedCateringStatusFromJSON(json: any): ChangedCateringStatus {
    return ChangedCateringStatusFromJSONTyped(json, false);
}

export function ChangedCateringStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangedCateringStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'block': !exists(json, 'block') ? undefined : BlockTypeFromJSON(json['block']),
        'cancellationDetails': !exists(json, 'cancellationDetails') ? undefined : CancellationDetailsTypeFromJSON(json['cancellationDetails']),
        'cateringEventsProcessedInfo': !exists(json, 'cateringEventsProcessedInfo') ? undefined : ((json['cateringEventsProcessedInfo'] as Array<any>).map(CateringEventsProcessedInfoTypeFromJSON)),
        'cateringNextStatusList': !exists(json, 'cateringNextStatusList') ? undefined : ((json['cateringNextStatusList'] as Array<any>).map(BookingStatusDetailTypeFromJSON)),
        'cateringStatusChangeHistory': !exists(json, 'cateringStatusChangeHistory') ? undefined : ((json['cateringStatusChangeHistory'] as Array<any>).map(BookingStatusHistoryTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ChangedCateringStatusToJSON(value?: ChangedCateringStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'block': BlockTypeToJSON(value.block),
        'cancellationDetails': CancellationDetailsTypeToJSON(value.cancellationDetails),
        'cateringEventsProcessedInfo': value.cateringEventsProcessedInfo === undefined ? undefined : ((value.cateringEventsProcessedInfo as Array<any>).map(CateringEventsProcessedInfoTypeToJSON)),
        'cateringNextStatusList': value.cateringNextStatusList === undefined ? undefined : ((value.cateringNextStatusList as Array<any>).map(BookingStatusDetailTypeToJSON)),
        'cateringStatusChangeHistory': value.cateringStatusChangeHistory === undefined ? undefined : ((value.cateringStatusChangeHistory as Array<any>).map(BookingStatusHistoryTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

