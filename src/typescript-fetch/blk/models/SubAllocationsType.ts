/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SubAllocationsTypeSubAllocationInfoInner } from './SubAllocationsTypeSubAllocationInfoInner';
import {
    SubAllocationsTypeSubAllocationInfoInnerFromJSON,
    SubAllocationsTypeSubAllocationInfoInnerFromJSONTyped,
    SubAllocationsTypeSubAllocationInfoInnerToJSON,
} from './SubAllocationsTypeSubAllocationInfoInner';

/**
 * A collection of Sub Allocations or Unique IDs of Sub Allocation.
 * @export
 * @interface SubAllocationsType
 */
export interface SubAllocationsType {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof SubAllocationsType
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof SubAllocationsType
     */
    hasMore?: boolean;
    /**
     * A collection of Sub Allocations or Unique IDs of Sub Allocations.
     * @type {Array<SubAllocationsTypeSubAllocationInfoInner>}
     * @memberof SubAllocationsType
     */
    subAllocationInfo?: Array<SubAllocationsTypeSubAllocationInfoInner>;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof SubAllocationsType
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the SubAllocationsType interface.
 */
export function instanceOfSubAllocationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubAllocationsTypeFromJSON(json: any): SubAllocationsType {
    return SubAllocationsTypeFromJSONTyped(json, false);
}

export function SubAllocationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubAllocationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'subAllocationInfo': !exists(json, 'subAllocationInfo') ? undefined : ((json['subAllocationInfo'] as Array<any>).map(SubAllocationsTypeSubAllocationInfoInnerFromJSON)),
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function SubAllocationsTypeToJSON(value?: SubAllocationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'subAllocationInfo': value.subAllocationInfo === undefined ? undefined : ((value.subAllocationInfo as Array<any>).map(SubAllocationsTypeSubAllocationInfoInnerToJSON)),
        'totalResults': value.totalResults,
    };
}

