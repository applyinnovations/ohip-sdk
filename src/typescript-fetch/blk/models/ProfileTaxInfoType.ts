/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Profile information related to tax.
 * @export
 * @interface ProfileTaxInfoType
 */
export interface ProfileTaxInfoType {
    /**
     * The tax id of this profile. Usually issued by a government agency. Used by 1099 printing.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    tax1No?: string;
    /**
     * Tax 2 id of this profile.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    tax2No?: string;
    /**
     * Tax Category to be changed.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    taxCategory?: string;
    /**
     * Tax Office to be changed.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    taxOffice?: string;
    /**
     * Tax type to be changed.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    taxType?: string;
    /**
     * Business ID. The maximum length of this element should not exceed 120 characters.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    businessId?: string;
    /**
     * Business Registration Code. The maximum length of this element should not exceed 120 characters.
     * @type {string}
     * @memberof ProfileTaxInfoType
     */
    businessRegistration?: string;
}

/**
 * Check if a given object implements the ProfileTaxInfoType interface.
 */
export function instanceOfProfileTaxInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileTaxInfoTypeFromJSON(json: any): ProfileTaxInfoType {
    return ProfileTaxInfoTypeFromJSONTyped(json, false);
}

export function ProfileTaxInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileTaxInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tax1No': !exists(json, 'tax1No') ? undefined : json['tax1No'],
        'tax2No': !exists(json, 'tax2No') ? undefined : json['tax2No'],
        'taxCategory': !exists(json, 'taxCategory') ? undefined : json['taxCategory'],
        'taxOffice': !exists(json, 'taxOffice') ? undefined : json['taxOffice'],
        'taxType': !exists(json, 'taxType') ? undefined : json['taxType'],
        'businessId': !exists(json, 'businessId') ? undefined : json['businessId'],
        'businessRegistration': !exists(json, 'businessRegistration') ? undefined : json['businessRegistration'],
    };
}

export function ProfileTaxInfoTypeToJSON(value?: ProfileTaxInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tax1No': value.tax1No,
        'tax2No': value.tax2No,
        'taxCategory': value.taxCategory,
        'taxOffice': value.taxOffice,
        'taxType': value.taxType,
        'businessId': value.businessId,
        'businessRegistration': value.businessRegistration,
    };
}

