/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Access exclusion message.
 * @export
 * @interface BlockAccessExclusionMessageType
 */
export interface BlockAccessExclusionMessageType {
    /**
     * Access Exclusion message for the block.
     * @type {string}
     * @memberof BlockAccessExclusionMessageType
     */
    exclusionMessage?: string;
}

/**
 * Check if a given object implements the BlockAccessExclusionMessageType interface.
 */
export function instanceOfBlockAccessExclusionMessageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAccessExclusionMessageTypeFromJSON(json: any): BlockAccessExclusionMessageType {
    return BlockAccessExclusionMessageTypeFromJSONTyped(json, false);
}

export function BlockAccessExclusionMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAccessExclusionMessageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exclusionMessage': !exists(json, 'exclusionMessage') ? undefined : json['exclusionMessage'],
    };
}

export function BlockAccessExclusionMessageTypeToJSON(value?: BlockAccessExclusionMessageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exclusionMessage': value.exclusionMessage,
    };
}

