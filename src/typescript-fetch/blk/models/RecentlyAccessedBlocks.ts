/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RecentlyAccessedBlockType } from './RecentlyAccessedBlockType';
import {
    RecentlyAccessedBlockTypeFromJSON,
    RecentlyAccessedBlockTypeFromJSONTyped,
    RecentlyAccessedBlockTypeToJSON,
} from './RecentlyAccessedBlockType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface RecentlyAccessedBlocks
 */
export interface RecentlyAccessedBlocks {
    /**
     * A single recently accessed block.
     * @type {Array<RecentlyAccessedBlockType>}
     * @memberof RecentlyAccessedBlocks
     */
    blocks?: Array<RecentlyAccessedBlockType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RecentlyAccessedBlocks
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RecentlyAccessedBlocks
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RecentlyAccessedBlocks interface.
 */
export function instanceOfRecentlyAccessedBlocks(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RecentlyAccessedBlocksFromJSON(json: any): RecentlyAccessedBlocks {
    return RecentlyAccessedBlocksFromJSONTyped(json, false);
}

export function RecentlyAccessedBlocksFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecentlyAccessedBlocks {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blocks': !exists(json, 'blocks') ? undefined : ((json['blocks'] as Array<any>).map(RecentlyAccessedBlockTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RecentlyAccessedBlocksToJSON(value?: RecentlyAccessedBlocks | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blocks': value.blocks === undefined ? undefined : ((value.blocks as Array<any>).map(RecentlyAccessedBlockTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

