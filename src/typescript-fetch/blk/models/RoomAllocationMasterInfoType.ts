/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AllocationRoomTypeInfoType } from './AllocationRoomTypeInfoType';
import {
    AllocationRoomTypeInfoTypeFromJSON,
    AllocationRoomTypeInfoTypeFromJSONTyped,
    AllocationRoomTypeInfoTypeToJSON,
} from './AllocationRoomTypeInfoType';

/**
 * 
 * @export
 * @interface RoomAllocationMasterInfoType
 */
export interface RoomAllocationMasterInfoType {
    /**
     * Detailed information about Room Type in the Hotel.
     * @type {Array<AllocationRoomTypeInfoType>}
     * @memberof RoomAllocationMasterInfoType
     */
    roomTypes?: Array<AllocationRoomTypeInfoType>;
    /**
     * Detailed information about Room Type in the Hotel.
     * @type {Array<AllocationRoomTypeInfoType>}
     * @memberof RoomAllocationMasterInfoType
     */
    genericRoomTypes?: Array<AllocationRoomTypeInfoType>;
}

/**
 * Check if a given object implements the RoomAllocationMasterInfoType interface.
 */
export function instanceOfRoomAllocationMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomAllocationMasterInfoTypeFromJSON(json: any): RoomAllocationMasterInfoType {
    return RoomAllocationMasterInfoTypeFromJSONTyped(json, false);
}

export function RoomAllocationMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomAllocationMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomTypes': !exists(json, 'roomTypes') ? undefined : ((json['roomTypes'] as Array<any>).map(AllocationRoomTypeInfoTypeFromJSON)),
        'genericRoomTypes': !exists(json, 'genericRoomTypes') ? undefined : ((json['genericRoomTypes'] as Array<any>).map(AllocationRoomTypeInfoTypeFromJSON)),
    };
}

export function RoomAllocationMasterInfoTypeToJSON(value?: RoomAllocationMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomTypes': value.roomTypes === undefined ? undefined : ((value.roomTypes as Array<any>).map(AllocationRoomTypeInfoTypeToJSON)),
        'genericRoomTypes': value.genericRoomTypes === undefined ? undefined : ((value.genericRoomTypes as Array<any>).map(AllocationRoomTypeInfoTypeToJSON)),
    };
}

