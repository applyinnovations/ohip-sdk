/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Instructions which will be considered when copying from the template. If this element is not sent, all the flags will be ignored.
 * @export
 * @interface CopyBlockTypeCopyInstructions
 */
export interface CopyBlockTypeCopyInstructions {
    /**
     * When true, this will copy the source block's room allocation counts to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    rooms?: boolean;
    /**
     * When true, this will copy the source block's rate code to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    rateCode?: boolean;
    /**
     * When true, this will copy the source block's comments to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    blockComments?: boolean;
    /**
     * When true, this will copy the block code of the source block to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    blockCode?: boolean;
    /**
     * When true, this will copy the source block's catering information to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    catering?: boolean;
    /**
     * When true, this will copy the source block's events to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    events?: boolean;
    /**
     * When true, this will copy the source block's event comments to the events of the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    eventComments?: boolean;
    /**
     * When true, this will copy the source block's resources to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    resources?: boolean;
    /**
     * When true, this will copy the source block's resource comments to the resources of the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    resourceComments?: boolean;
    /**
     * When true, this will copy the source block's resource price amounts to the resources of the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    resourcePrices?: boolean;
    /**
     * When true, this will copy the source block's number of attendees to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    attendeesCount?: boolean;
    /**
     * When true, this will copy the source block's contract billing information to the new block and make the source block a Master Block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    contractBilling?: boolean;
    /**
     * When true, this will copy the source block's group profile to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    groupProfile?: boolean;
    /**
     * When true, this will copy the source block's alternate dates to the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    alternateDates?: boolean;
    /**
     * When true, this will copy the rate amounts of the source block's alternate dates to the alternate dates of the new block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    ratesOfAlternateDates?: boolean;
    /**
     * When true, this will create the new block in the same potential profile as the source block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    potentialProfile?: boolean;
    /**
     * When true, this will adjust the decision and followup date on the new block to the same offset as the source block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    adjustDecisionAndFollowupDate?: boolean;
    /**
     * When true, this will copy the new block as a sub block of the source block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    createAsSubBlock?: boolean;
    /**
     * When true, this will create the new block in the same tour series as the source block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    createAsTourBlock?: boolean;
    /**
     * When true, this will overbook the block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    overbook?: boolean;
    /**
     * Contract grid of the source Block will be copied to the contract grid of the new Block
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    contractGrid?: boolean;
    /**
     * Event notes of note code 'CH' will be copied from source events to new events on the Block copy.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    changeNotes?: boolean;
    /**
     * All event resources, such as menus and item resources are copied with the events to the new Block. Include Resource Notes and Copy Resource Prices are displayed and enabled.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    otherResources?: boolean;
    /**
     * Event forecast figures will be copied from the source to the events of the new Block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    eventForecastFigures?: boolean;
    /**
     * When true, Master block will be copied along with the sub blocks.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    masterBlock?: boolean;
    /**
     * When true, this sub block will be copied as a new regular block.
     * @type {boolean}
     * @memberof CopyBlockTypeCopyInstructions
     */
    copySubBlockAsRegularBlock?: boolean;
}

/**
 * Check if a given object implements the CopyBlockTypeCopyInstructions interface.
 */
export function instanceOfCopyBlockTypeCopyInstructions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyBlockTypeCopyInstructionsFromJSON(json: any): CopyBlockTypeCopyInstructions {
    return CopyBlockTypeCopyInstructionsFromJSONTyped(json, false);
}

export function CopyBlockTypeCopyInstructionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyBlockTypeCopyInstructions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rooms': !exists(json, 'rooms') ? undefined : json['rooms'],
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'blockComments': !exists(json, 'blockComments') ? undefined : json['blockComments'],
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'catering': !exists(json, 'catering') ? undefined : json['catering'],
        'events': !exists(json, 'events') ? undefined : json['events'],
        'eventComments': !exists(json, 'eventComments') ? undefined : json['eventComments'],
        'resources': !exists(json, 'resources') ? undefined : json['resources'],
        'resourceComments': !exists(json, 'resourceComments') ? undefined : json['resourceComments'],
        'resourcePrices': !exists(json, 'resourcePrices') ? undefined : json['resourcePrices'],
        'attendeesCount': !exists(json, 'attendeesCount') ? undefined : json['attendeesCount'],
        'contractBilling': !exists(json, 'contractBilling') ? undefined : json['contractBilling'],
        'groupProfile': !exists(json, 'groupProfile') ? undefined : json['groupProfile'],
        'alternateDates': !exists(json, 'alternateDates') ? undefined : json['alternateDates'],
        'ratesOfAlternateDates': !exists(json, 'ratesOfAlternateDates') ? undefined : json['ratesOfAlternateDates'],
        'potentialProfile': !exists(json, 'potentialProfile') ? undefined : json['potentialProfile'],
        'adjustDecisionAndFollowupDate': !exists(json, 'adjustDecisionAndFollowupDate') ? undefined : json['adjustDecisionAndFollowupDate'],
        'createAsSubBlock': !exists(json, 'createAsSubBlock') ? undefined : json['createAsSubBlock'],
        'createAsTourBlock': !exists(json, 'createAsTourBlock') ? undefined : json['createAsTourBlock'],
        'overbook': !exists(json, 'overbook') ? undefined : json['overbook'],
        'contractGrid': !exists(json, 'contractGrid') ? undefined : json['contractGrid'],
        'changeNotes': !exists(json, 'changeNotes') ? undefined : json['changeNotes'],
        'otherResources': !exists(json, 'otherResources') ? undefined : json['otherResources'],
        'eventForecastFigures': !exists(json, 'eventForecastFigures') ? undefined : json['eventForecastFigures'],
        'masterBlock': !exists(json, 'masterBlock') ? undefined : json['masterBlock'],
        'copySubBlockAsRegularBlock': !exists(json, 'copySubBlockAsRegularBlock') ? undefined : json['copySubBlockAsRegularBlock'],
    };
}

export function CopyBlockTypeCopyInstructionsToJSON(value?: CopyBlockTypeCopyInstructions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rooms': value.rooms,
        'rateCode': value.rateCode,
        'blockComments': value.blockComments,
        'blockCode': value.blockCode,
        'catering': value.catering,
        'events': value.events,
        'eventComments': value.eventComments,
        'resources': value.resources,
        'resourceComments': value.resourceComments,
        'resourcePrices': value.resourcePrices,
        'attendeesCount': value.attendeesCount,
        'contractBilling': value.contractBilling,
        'groupProfile': value.groupProfile,
        'alternateDates': value.alternateDates,
        'ratesOfAlternateDates': value.ratesOfAlternateDates,
        'potentialProfile': value.potentialProfile,
        'adjustDecisionAndFollowupDate': value.adjustDecisionAndFollowupDate,
        'createAsSubBlock': value.createAsSubBlock,
        'createAsTourBlock': value.createAsTourBlock,
        'overbook': value.overbook,
        'contractGrid': value.contractGrid,
        'changeNotes': value.changeNotes,
        'otherResources': value.otherResources,
        'eventForecastFigures': value.eventForecastFigures,
        'masterBlock': value.masterBlock,
        'copySubBlockAsRegularBlock': value.copySubBlockAsRegularBlock,
    };
}

