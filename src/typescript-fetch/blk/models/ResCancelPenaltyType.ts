/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OffsetUnitType } from './OffsetUnitType';
import {
    OffsetUnitTypeFromJSON,
    OffsetUnitTypeFromJSONTyped,
    OffsetUnitTypeToJSON,
} from './OffsetUnitType';
import type { PolicyAmountPercentType } from './PolicyAmountPercentType';
import {
    PolicyAmountPercentTypeFromJSON,
    PolicyAmountPercentTypeFromJSONTyped,
    PolicyAmountPercentTypeToJSON,
} from './PolicyAmountPercentType';
import type { PolicyDeadlineType } from './PolicyDeadlineType';
import {
    PolicyDeadlineTypeFromJSON,
    PolicyDeadlineTypeFromJSONTyped,
    PolicyDeadlineTypeToJSON,
} from './PolicyDeadlineType';

/**
 * The CancelPenalty class defines the cancellation policy of the hotel facility.
 * @export
 * @interface ResCancelPenaltyType
 */
export interface ResCancelPenaltyType {
    /**
     * 
     * @type {PolicyAmountPercentType}
     * @memberof ResCancelPenaltyType
     */
    amountPercent?: PolicyAmountPercentType;
    /**
     * 
     * @type {PolicyDeadlineType}
     * @memberof ResCancelPenaltyType
     */
    deadline?: PolicyDeadlineType;
    /**
     * Indicator if Cancellation Penalty is currently applicable or not.
     * @type {boolean}
     * @memberof ResCancelPenaltyType
     */
    effective?: boolean;
    /**
     * Formatted Text Rule of the Cancellation Penalty.
     * @type {string}
     * @memberof ResCancelPenaltyType
     */
    formattedRule?: string;
    /**
     * Flag to indicate if the cancellation policy is manual.
     * @type {boolean}
     * @memberof ResCancelPenaltyType
     */
    manual?: boolean;
    /**
     * Indicates if the amount is refundable if booking is canceled.
     * @type {boolean}
     * @memberof ResCancelPenaltyType
     */
    nonRefundable?: boolean;
    /**
     * 
     * @type {OffsetUnitType}
     * @memberof ResCancelPenaltyType
     */
    offsetUnit?: OffsetUnitType;
    /**
     * Text description of the Penalty in a given language.
     * @type {string}
     * @memberof ResCancelPenaltyType
     */
    penaltyDescription?: string;
    /**
     * Policy Code.
     * @type {string}
     * @memberof ResCancelPenaltyType
     */
    policyCode?: string;
}

/**
 * Check if a given object implements the ResCancelPenaltyType interface.
 */
export function instanceOfResCancelPenaltyType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResCancelPenaltyTypeFromJSON(json: any): ResCancelPenaltyType {
    return ResCancelPenaltyTypeFromJSONTyped(json, false);
}

export function ResCancelPenaltyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResCancelPenaltyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountPercent': !exists(json, 'amountPercent') ? undefined : PolicyAmountPercentTypeFromJSON(json['amountPercent']),
        'deadline': !exists(json, 'deadline') ? undefined : PolicyDeadlineTypeFromJSON(json['deadline']),
        'effective': !exists(json, 'effective') ? undefined : json['effective'],
        'formattedRule': !exists(json, 'formattedRule') ? undefined : json['formattedRule'],
        'manual': !exists(json, 'manual') ? undefined : json['manual'],
        'nonRefundable': !exists(json, 'nonRefundable') ? undefined : json['nonRefundable'],
        'offsetUnit': !exists(json, 'offsetUnit') ? undefined : OffsetUnitTypeFromJSON(json['offsetUnit']),
        'penaltyDescription': !exists(json, 'penaltyDescription') ? undefined : json['penaltyDescription'],
        'policyCode': !exists(json, 'policyCode') ? undefined : json['policyCode'],
    };
}

export function ResCancelPenaltyTypeToJSON(value?: ResCancelPenaltyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amountPercent': PolicyAmountPercentTypeToJSON(value.amountPercent),
        'deadline': PolicyDeadlineTypeToJSON(value.deadline),
        'effective': value.effective,
        'formattedRule': value.formattedRule,
        'manual': value.manual,
        'nonRefundable': value.nonRefundable,
        'offsetUnit': OffsetUnitTypeToJSON(value.offsetUnit),
        'penaltyDescription': value.penaltyDescription,
        'policyCode': value.policyCode,
    };
}

