/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockIdList } from './BlockIdList';
import {
    BlockIdListFromJSON,
    BlockIdListFromJSONTyped,
    BlockIdListToJSON,
} from './BlockIdList';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface ChangeRateOverrideRequest
 */
export interface ChangeRateOverrideRequest {
    /**
     * Indicates whether rates of a block can be overridden. Applicable only for blocks with a Rate Code.
     * @type {boolean}
     * @memberof ChangeRateOverrideRequest
     */
    allowRateOverride?: boolean;
    /**
     * 
     * @type {BlockIdList}
     * @memberof ChangeRateOverrideRequest
     */
    blockIdList?: BlockIdList;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ChangeRateOverrideRequest
     */
    hotelId?: string;
    /**
     * 
     * @type {Links}
     * @memberof ChangeRateOverrideRequest
     */
    links?: Links;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof ChangeRateOverrideRequest
     */
    rateOverrideReason?: CodeDescriptionType;
    /**
     * 
     * @type {WarningsType}
     * @memberof ChangeRateOverrideRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ChangeRateOverrideRequest interface.
 */
export function instanceOfChangeRateOverrideRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeRateOverrideRequestFromJSON(json: any): ChangeRateOverrideRequest {
    return ChangeRateOverrideRequestFromJSONTyped(json, false);
}

export function ChangeRateOverrideRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeRateOverrideRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowRateOverride': !exists(json, 'allowRateOverride') ? undefined : json['allowRateOverride'],
        'blockIdList': !exists(json, 'blockIdList') ? undefined : BlockIdListFromJSON(json['blockIdList']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'rateOverrideReason': !exists(json, 'rateOverrideReason') ? undefined : CodeDescriptionTypeFromJSON(json['rateOverrideReason']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ChangeRateOverrideRequestToJSON(value?: ChangeRateOverrideRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowRateOverride': value.allowRateOverride,
        'blockIdList': BlockIdListToJSON(value.blockIdList),
        'hotelId': value.hotelId,
        'links': LinksToJSON(value.links),
        'rateOverrideReason': CodeDescriptionTypeToJSON(value.rateOverrideReason),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

