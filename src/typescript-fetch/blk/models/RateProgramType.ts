/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateProgramRateType } from './RateProgramRateType';
import {
    RateProgramRateTypeFromJSON,
    RateProgramRateTypeFromJSONTyped,
    RateProgramRateTypeToJSON,
} from './RateProgramRateType';

/**
 * Rate Programs for the Block.
 * @export
 * @interface RateProgramType
 */
export interface RateProgramType {
    /**
     * Room Pool Code.
     * @type {string}
     * @memberof RateProgramType
     */
    roomPool?: string;
    /**
     * Block Rate Program Rates.
     * @type {Array<RateProgramRateType>}
     * @memberof RateProgramType
     */
    rates?: Array<RateProgramRateType>;
}

/**
 * Check if a given object implements the RateProgramType interface.
 */
export function instanceOfRateProgramType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateProgramTypeFromJSON(json: any): RateProgramType {
    return RateProgramTypeFromJSONTyped(json, false);
}

export function RateProgramTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateProgramType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomPool': !exists(json, 'roomPool') ? undefined : json['roomPool'],
        'rates': !exists(json, 'rates') ? undefined : ((json['rates'] as Array<any>).map(RateProgramRateTypeFromJSON)),
    };
}

export function RateProgramTypeToJSON(value?: RateProgramType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomPool': value.roomPool,
        'rates': value.rates === undefined ? undefined : ((value.rates as Array<any>).map(RateProgramRateTypeToJSON)),
    };
}

