/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomStatisticsType } from './RoomStatisticsType';
import {
    RoomStatisticsTypeFromJSON,
    RoomStatisticsTypeFromJSONTyped,
    RoomStatisticsTypeToJSON,
} from './RoomStatisticsType';

/**
 * 
 * @export
 * @interface BlockStatisticsType
 */
export interface BlockStatisticsType {
    /**
     * 
     * @type {RoomStatisticsType}
     * @memberof BlockStatisticsType
     */
    allocatedRoomStatistics?: RoomStatisticsType;
    /**
     * 
     * @type {RoomStatisticsType}
     * @memberof BlockStatisticsType
     */
    actualRoomStatistics?: RoomStatisticsType;
    /**
     * Indicates the catering revenue on the books.
     * @type {number}
     * @memberof BlockStatisticsType
     */
    cateringRevenueOnBooks?: number;
    /**
     * Indicates actualized catering revenue.
     * @type {number}
     * @memberof BlockStatisticsType
     */
    actualCateringRevenue?: number;
}

/**
 * Check if a given object implements the BlockStatisticsType interface.
 */
export function instanceOfBlockStatisticsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockStatisticsTypeFromJSON(json: any): BlockStatisticsType {
    return BlockStatisticsTypeFromJSONTyped(json, false);
}

export function BlockStatisticsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatisticsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocatedRoomStatistics': !exists(json, 'allocatedRoomStatistics') ? undefined : RoomStatisticsTypeFromJSON(json['allocatedRoomStatistics']),
        'actualRoomStatistics': !exists(json, 'actualRoomStatistics') ? undefined : RoomStatisticsTypeFromJSON(json['actualRoomStatistics']),
        'cateringRevenueOnBooks': !exists(json, 'cateringRevenueOnBooks') ? undefined : json['cateringRevenueOnBooks'],
        'actualCateringRevenue': !exists(json, 'actualCateringRevenue') ? undefined : json['actualCateringRevenue'],
    };
}

export function BlockStatisticsTypeToJSON(value?: BlockStatisticsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocatedRoomStatistics': RoomStatisticsTypeToJSON(value.allocatedRoomStatistics),
        'actualRoomStatistics': RoomStatisticsTypeToJSON(value.actualRoomStatistics),
        'cateringRevenueOnBooks': value.cateringRevenueOnBooks,
        'actualCateringRevenue': value.actualCateringRevenue,
    };
}

