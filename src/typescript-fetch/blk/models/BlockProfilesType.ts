/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockProfileTypeType } from './BlockProfileTypeType';
import {
    BlockProfileTypeTypeFromJSON,
    BlockProfileTypeTypeFromJSONTyped,
    BlockProfileTypeTypeToJSON,
} from './BlockProfileTypeType';
import type { ProfileType } from './ProfileType';
import {
    ProfileTypeFromJSON,
    ProfileTypeFromJSONTyped,
    ProfileTypeToJSON,
} from './ProfileType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * A collection of Profile objects or Unique IDs of Profiles.
 * @export
 * @interface BlockProfilesType
 */
export interface BlockProfilesType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockProfilesType
     */
    profileIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {ProfileType}
     * @memberof BlockProfilesType
     */
    profile?: ProfileType;
    /**
     * Is this profile attached to block is primary?
     * @type {boolean}
     * @memberof BlockProfilesType
     */
    primary?: boolean;
    /**
     * 
     * @type {BlockProfileTypeType}
     * @memberof BlockProfilesType
     */
    blockProfileType?: BlockProfileTypeType;
    /**
     * Indicates if profile is printable to customer reports by default.
     * @type {boolean}
     * @memberof BlockProfilesType
     */
    defaultPrint?: boolean;
}

/**
 * Check if a given object implements the BlockProfilesType interface.
 */
export function instanceOfBlockProfilesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockProfilesTypeFromJSON(json: any): BlockProfilesType {
    return BlockProfilesTypeFromJSONTyped(json, false);
}

export function BlockProfilesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockProfilesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileIdList': !exists(json, 'profileIdList') ? undefined : ((json['profileIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'profile': !exists(json, 'profile') ? undefined : ProfileTypeFromJSON(json['profile']),
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'blockProfileType': !exists(json, 'blockProfileType') ? undefined : BlockProfileTypeTypeFromJSON(json['blockProfileType']),
        'defaultPrint': !exists(json, 'defaultPrint') ? undefined : json['defaultPrint'],
    };
}

export function BlockProfilesTypeToJSON(value?: BlockProfilesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileIdList': value.profileIdList === undefined ? undefined : ((value.profileIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'profile': ProfileTypeToJSON(value.profile),
        'primary': value.primary,
        'blockProfileType': BlockProfileTypeTypeToJSON(value.blockProfileType),
        'defaultPrint': value.defaultPrint,
    };
}

