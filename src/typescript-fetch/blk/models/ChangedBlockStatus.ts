/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockNextStatusListType } from './BlockNextStatusListType';
import {
    BlockNextStatusListTypeFromJSON,
    BlockNextStatusListTypeFromJSONTyped,
    BlockNextStatusListTypeToJSON,
} from './BlockNextStatusListType';
import type { BlockStatusChangeHistoryType } from './BlockStatusChangeHistoryType';
import {
    BlockStatusChangeHistoryTypeFromJSON,
    BlockStatusChangeHistoryTypeFromJSONTyped,
    BlockStatusChangeHistoryTypeToJSON,
} from './BlockStatusChangeHistoryType';
import type { BlockType } from './BlockType';
import {
    BlockTypeFromJSON,
    BlockTypeFromJSONTyped,
    BlockTypeToJSON,
} from './BlockType';
import type { CancellationDetailsType } from './CancellationDetailsType';
import {
    CancellationDetailsTypeFromJSON,
    CancellationDetailsTypeFromJSONTyped,
    CancellationDetailsTypeToJSON,
} from './CancellationDetailsType';
import type { CateringEventsProcessedInfoList } from './CateringEventsProcessedInfoList';
import {
    CateringEventsProcessedInfoListFromJSON,
    CateringEventsProcessedInfoListFromJSONTyped,
    CateringEventsProcessedInfoListToJSON,
} from './CateringEventsProcessedInfoList';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object for the request to change block status. Response contains information on the block whose status was successfully changed.
 * @export
 * @interface ChangedBlockStatus
 */
export interface ChangedBlockStatus {
    /**
     * Indicates whether block has any active PM reservations.
     * @type {boolean}
     * @memberof ChangedBlockStatus
     */
    anyActivePMReservations?: boolean;
    /**
     * 
     * @type {BlockType}
     * @memberof ChangedBlockStatus
     */
    block?: BlockType;
    /**
     * 
     * @type {BlockNextStatusListType}
     * @memberof ChangedBlockStatus
     */
    blockNextStatusList?: BlockNextStatusListType;
    /**
     * 
     * @type {BlockStatusChangeHistoryType}
     * @memberof ChangedBlockStatus
     */
    blockStatusChangeHistory?: BlockStatusChangeHistoryType;
    /**
     * 
     * @type {CancellationDetailsType}
     * @memberof ChangedBlockStatus
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * 
     * @type {CateringEventsProcessedInfoList}
     * @memberof ChangedBlockStatus
     */
    cateringEventsProcessedInfo?: CateringEventsProcessedInfoList;
    /**
     * 
     * @type {Links}
     * @memberof ChangedBlockStatus
     */
    links?: Links;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChangedBlockStatus
     */
    processId?: UniqueIDType;
    /**
     * 
     * @type {WarningsType}
     * @memberof ChangedBlockStatus
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ChangedBlockStatus interface.
 */
export function instanceOfChangedBlockStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangedBlockStatusFromJSON(json: any): ChangedBlockStatus {
    return ChangedBlockStatusFromJSONTyped(json, false);
}

export function ChangedBlockStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangedBlockStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'anyActivePMReservations': !exists(json, 'anyActivePMReservations') ? undefined : json['anyActivePMReservations'],
        'block': !exists(json, 'block') ? undefined : BlockTypeFromJSON(json['block']),
        'blockNextStatusList': !exists(json, 'blockNextStatusList') ? undefined : BlockNextStatusListTypeFromJSON(json['blockNextStatusList']),
        'blockStatusChangeHistory': !exists(json, 'blockStatusChangeHistory') ? undefined : BlockStatusChangeHistoryTypeFromJSON(json['blockStatusChangeHistory']),
        'cancellationDetails': !exists(json, 'cancellationDetails') ? undefined : CancellationDetailsTypeFromJSON(json['cancellationDetails']),
        'cateringEventsProcessedInfo': !exists(json, 'cateringEventsProcessedInfo') ? undefined : CateringEventsProcessedInfoListFromJSON(json['cateringEventsProcessedInfo']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'processId': !exists(json, 'processId') ? undefined : UniqueIDTypeFromJSON(json['processId']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ChangedBlockStatusToJSON(value?: ChangedBlockStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'anyActivePMReservations': value.anyActivePMReservations,
        'block': BlockTypeToJSON(value.block),
        'blockNextStatusList': BlockNextStatusListTypeToJSON(value.blockNextStatusList),
        'blockStatusChangeHistory': BlockStatusChangeHistoryTypeToJSON(value.blockStatusChangeHistory),
        'cancellationDetails': CancellationDetailsTypeToJSON(value.cancellationDetails),
        'cateringEventsProcessedInfo': CateringEventsProcessedInfoListToJSON(value.cateringEventsProcessedInfo),
        'links': LinksToJSON(value.links),
        'processId': UniqueIDTypeToJSON(value.processId),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

