/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ECertificateClassficationType } from './ECertificateClassficationType';
import {
    ECertificateClassficationTypeFromJSON,
    ECertificateClassficationTypeFromJSONTyped,
    ECertificateClassficationTypeToJSON,
} from './ECertificateClassficationType';
import type { RequestActionType } from './RequestActionType';
import {
    RequestActionTypeFromJSON,
    RequestActionTypeFromJSONTyped,
    RequestActionTypeToJSON,
} from './RequestActionType';

/**
 * Reservation ECertificate Type Information.
 * @export
 * @interface ReservationECertificateType
 */
export interface ReservationECertificateType {
    /**
     * ECertificate Number for the reservation.
     * @type {string}
     * @memberof ReservationECertificateType
     */
    eCertificateNo?: string;
    /**
     * 
     * @type {RequestActionType}
     * @memberof ReservationECertificateType
     */
    actionType?: RequestActionType;
    /**
     * 
     * @type {ECertificateClassficationType}
     * @memberof ReservationECertificateType
     */
    eCertificateType?: ECertificateClassficationType;
}

/**
 * Check if a given object implements the ReservationECertificateType interface.
 */
export function instanceOfReservationECertificateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationECertificateTypeFromJSON(json: any): ReservationECertificateType {
    return ReservationECertificateTypeFromJSONTyped(json, false);
}

export function ReservationECertificateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationECertificateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eCertificateNo': !exists(json, 'eCertificateNo') ? undefined : json['eCertificateNo'],
        'actionType': !exists(json, 'actionType') ? undefined : RequestActionTypeFromJSON(json['actionType']),
        'eCertificateType': !exists(json, 'eCertificateType') ? undefined : ECertificateClassficationTypeFromJSON(json['eCertificateType']),
    };
}

export function ReservationECertificateTypeToJSON(value?: ReservationECertificateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eCertificateNo': value.eCertificateNo,
        'actionType': RequestActionTypeToJSON(value.actionType),
        'eCertificateType': ECertificateClassficationTypeToJSON(value.eCertificateType),
    };
}

