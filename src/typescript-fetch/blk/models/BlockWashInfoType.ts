/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockWashInfoTypeBlockInfo } from './BlockWashInfoTypeBlockInfo';
import {
    BlockWashInfoTypeBlockInfoFromJSON,
    BlockWashInfoTypeBlockInfoFromJSONTyped,
    BlockWashInfoTypeBlockInfoToJSON,
} from './BlockWashInfoTypeBlockInfo';

/**
 * Block information and allocated room types information for performing a wash operation.
 * @export
 * @interface BlockWashInfoType
 */
export interface BlockWashInfoType {
    /**
     * 
     * @type {BlockWashInfoTypeBlockInfo}
     * @memberof BlockWashInfoType
     */
    blockInfo?: BlockWashInfoTypeBlockInfo;
    /**
     * List of allocated room types for the block.
     * @type {Array<string>}
     * @memberof BlockWashInfoType
     */
    roomTypes?: Array<string>;
}

/**
 * Check if a given object implements the BlockWashInfoType interface.
 */
export function instanceOfBlockWashInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockWashInfoTypeFromJSON(json: any): BlockWashInfoType {
    return BlockWashInfoTypeFromJSONTyped(json, false);
}

export function BlockWashInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockWashInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockInfo': !exists(json, 'blockInfo') ? undefined : BlockWashInfoTypeBlockInfoFromJSON(json['blockInfo']),
        'roomTypes': !exists(json, 'roomTypes') ? undefined : json['roomTypes'],
    };
}

export function BlockWashInfoTypeToJSON(value?: BlockWashInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockInfo': BlockWashInfoTypeBlockInfoToJSON(value.blockInfo),
        'roomTypes': value.roomTypes,
    };
}

