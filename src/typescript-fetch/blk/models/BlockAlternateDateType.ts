/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockGridRatesType } from './BlockGridRatesType';
import {
    BlockGridRatesTypeFromJSON,
    BlockGridRatesTypeFromJSONTyped,
    BlockGridRatesTypeToJSON,
} from './BlockGridRatesType';

/**
 * Information for Alternate date types
 * @export
 * @interface BlockAlternateDateType
 */
export interface BlockAlternateDateType {
    /**
     * Alternate Begin date.
     * @type {string}
     * @memberof BlockAlternateDateType
     */
    alternateBeginDate?: string;
    /**
     * 
     * @type {BlockGridRatesType}
     * @memberof BlockAlternateDateType
     */
    blockRates?: BlockGridRatesType;
    /**
     * The Priority given to these alternate dates.
     * @type {number}
     * @memberof BlockAlternateDateType
     */
    priority?: number;
    /**
     * The Room Category Label
     * @type {string}
     * @memberof BlockAlternateDateType
     */
    roomCategory?: string;
}

/**
 * Check if a given object implements the BlockAlternateDateType interface.
 */
export function instanceOfBlockAlternateDateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAlternateDateTypeFromJSON(json: any): BlockAlternateDateType {
    return BlockAlternateDateTypeFromJSONTyped(json, false);
}

export function BlockAlternateDateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAlternateDateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alternateBeginDate': !exists(json, 'alternateBeginDate') ? undefined : json['alternateBeginDate'],
        'blockRates': !exists(json, 'blockRates') ? undefined : BlockGridRatesTypeFromJSON(json['blockRates']),
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'roomCategory': !exists(json, 'roomCategory') ? undefined : json['roomCategory'],
    };
}

export function BlockAlternateDateTypeToJSON(value?: BlockAlternateDateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alternateBeginDate': value.alternateBeginDate,
        'blockRates': BlockGridRatesTypeToJSON(value.blockRates),
        'priority': value.priority,
        'roomCategory': value.roomCategory,
    };
}

