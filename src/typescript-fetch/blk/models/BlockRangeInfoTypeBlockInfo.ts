/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { BlockInventoryControlType } from './BlockInventoryControlType';
import {
    BlockInventoryControlTypeFromJSON,
    BlockInventoryControlTypeFromJSONTyped,
    BlockInventoryControlTypeToJSON,
} from './BlockInventoryControlType';

/**
 * Block information needed to perform range operation on the block.
 * @export
 * @interface BlockRangeInfoTypeBlockInfo
 */
export interface BlockRangeInfoTypeBlockInfo {
    /**
     * Block Code
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    blockCode?: string;
    /**
     * 
     * @type {BlockId}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    blockId?: BlockId;
    /**
     * Block Status.
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    blockStatus?: string;
    /**
     * Block End Date
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    hotelId?: string;
    /**
     * 
     * @type {BlockInventoryControlType}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    inventoryControl?: BlockInventoryControlType;
    /**
     * Block Rate Code.
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    rateCode?: string;
    /**
     * Block Shoulder End Date.
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    shoulderEndDate?: string;
    /**
     * Block Shoulder Start Date.
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    shoulderStartDate?: string;
    /**
     * Block Start Date
     * @type {string}
     * @memberof BlockRangeInfoTypeBlockInfo
     */
    startDate?: string;
}

/**
 * Check if a given object implements the BlockRangeInfoTypeBlockInfo interface.
 */
export function instanceOfBlockRangeInfoTypeBlockInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockRangeInfoTypeBlockInfoFromJSON(json: any): BlockRangeInfoTypeBlockInfo {
    return BlockRangeInfoTypeBlockInfoFromJSONTyped(json, false);
}

export function BlockRangeInfoTypeBlockInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockRangeInfoTypeBlockInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'blockStatus': !exists(json, 'blockStatus') ? undefined : json['blockStatus'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inventoryControl': !exists(json, 'inventoryControl') ? undefined : BlockInventoryControlTypeFromJSON(json['inventoryControl']),
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'shoulderEndDate': !exists(json, 'shoulderEndDate') ? undefined : json['shoulderEndDate'],
        'shoulderStartDate': !exists(json, 'shoulderStartDate') ? undefined : json['shoulderStartDate'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
    };
}

export function BlockRangeInfoTypeBlockInfoToJSON(value?: BlockRangeInfoTypeBlockInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockCode': value.blockCode,
        'blockId': BlockIdToJSON(value.blockId),
        'blockStatus': value.blockStatus,
        'endDate': value.endDate,
        'hotelId': value.hotelId,
        'inventoryControl': BlockInventoryControlTypeToJSON(value.inventoryControl),
        'rateCode': value.rateCode,
        'shoulderEndDate': value.shoulderEndDate,
        'shoulderStartDate': value.shoulderStartDate,
        'startDate': value.startDate,
    };
}

