/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommissionPayoutToType } from './CommissionPayoutToType';
import {
    CommissionPayoutToTypeFromJSON,
    CommissionPayoutToTypeFromJSONTyped,
    CommissionPayoutToTypeToJSON,
} from './CommissionPayoutToType';
import type { ReservationProfileType } from './ReservationProfileType';
import {
    ReservationProfileTypeFromJSON,
    ReservationProfileTypeFromJSONTyped,
    ReservationProfileTypeToJSON,
} from './ReservationProfileType';

/**
 * Collection of guests associated with the reservation.
 * @export
 * @interface HotelReservationTypeReservationProfiles
 */
export interface HotelReservationTypeReservationProfiles {
    /**
     * 
     * @type {Array<ReservationProfileType>}
     * @memberof HotelReservationTypeReservationProfiles
     */
    reservationProfile?: Array<ReservationProfileType>;
    /**
     * 
     * @type {CommissionPayoutToType}
     * @memberof HotelReservationTypeReservationProfiles
     */
    commissionPayoutTo?: CommissionPayoutToType;
}

/**
 * Check if a given object implements the HotelReservationTypeReservationProfiles interface.
 */
export function instanceOfHotelReservationTypeReservationProfiles(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelReservationTypeReservationProfilesFromJSON(json: any): HotelReservationTypeReservationProfiles {
    return HotelReservationTypeReservationProfilesFromJSONTyped(json, false);
}

export function HotelReservationTypeReservationProfilesFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelReservationTypeReservationProfiles {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationProfile': !exists(json, 'reservationProfile') ? undefined : ((json['reservationProfile'] as Array<any>).map(ReservationProfileTypeFromJSON)),
        'commissionPayoutTo': !exists(json, 'commissionPayoutTo') ? undefined : CommissionPayoutToTypeFromJSON(json['commissionPayoutTo']),
    };
}

export function HotelReservationTypeReservationProfilesToJSON(value?: HotelReservationTypeReservationProfiles | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationProfile': value.reservationProfile === undefined ? undefined : ((value.reservationProfile as Array<any>).map(ReservationProfileTypeToJSON)),
        'commissionPayoutTo': CommissionPayoutToTypeToJSON(value.commissionPayoutTo),
    };
}

