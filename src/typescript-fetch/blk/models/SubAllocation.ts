/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockDetailInstructionType } from './BlockDetailInstructionType';
import {
    BlockDetailInstructionTypeFromJSON,
    BlockDetailInstructionTypeFromJSONTyped,
    BlockDetailInstructionTypeToJSON,
} from './BlockDetailInstructionType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { SubAllocationsType } from './SubAllocationsType';
import {
    SubAllocationsTypeFromJSON,
    SubAllocationsTypeFromJSONTyped,
    SubAllocationsTypeToJSON,
} from './SubAllocationsType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for creation of Sub Allocation. This object contains sub allocation details with unique identifiers for each sub allocation along with Master Allocation information. The standard optional Opera Context element is also included.
 * @export
 * @interface SubAllocation
 */
export interface SubAllocation {
    /**
     * The instruction to determine the block information to be returned in a successful create operation.
     * @type {Array<BlockDetailInstructionType>}
     * @memberof SubAllocation
     */
    fetchInstructions?: Array<BlockDetailInstructionType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof SubAllocation
     */
    links?: Array<InstanceLink>;
    /**
     * 
     * @type {SubAllocationsType}
     * @memberof SubAllocation
     */
    subAllocations?: SubAllocationsType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof SubAllocation
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the SubAllocation interface.
 */
export function instanceOfSubAllocation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubAllocationFromJSON(json: any): SubAllocation {
    return SubAllocationFromJSONTyped(json, false);
}

export function SubAllocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubAllocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fetchInstructions': !exists(json, 'fetchInstructions') ? undefined : ((json['fetchInstructions'] as Array<any>).map(BlockDetailInstructionTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'subAllocations': !exists(json, 'subAllocations') ? undefined : SubAllocationsTypeFromJSON(json['subAllocations']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function SubAllocationToJSON(value?: SubAllocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fetchInstructions': value.fetchInstructions === undefined ? undefined : ((value.fetchInstructions as Array<any>).map(BlockDetailInstructionTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'subAllocations': SubAllocationsTypeToJSON(value.subAllocations),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

