/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancelPenaltyType } from './CancelPenaltyType';
import {
    CancelPenaltyTypeFromJSON,
    CancelPenaltyTypeFromJSONTyped,
    CancelPenaltyTypeToJSON,
} from './CancelPenaltyType';
import type { GuaranteeType } from './GuaranteeType';
import {
    GuaranteeTypeFromJSON,
    GuaranteeTypeFromJSONTyped,
    GuaranteeTypeToJSON,
} from './GuaranteeType';
import type { MealPlanCodeType } from './MealPlanCodeType';
import {
    MealPlanCodeTypeFromJSON,
    MealPlanCodeTypeFromJSONTyped,
    MealPlanCodeTypeToJSON,
} from './MealPlanCodeType';

/**
 * Rate Plan info type extension for block.
 * @export
 * @interface BlockRatePlanInfoType
 */
export interface BlockRatePlanInfoType {
    /**
     * 
     * @type {CancelPenaltyType}
     * @memberof BlockRatePlanInfoType
     */
    cancelPenalty?: CancelPenaltyType;
    /**
     * Currency Code of the rate code.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    currencyCode?: string;
    /**
     * Description of the Rate Code.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    description?: string;
    /**
     * 
     * @type {GuaranteeType}
     * @memberof BlockRatePlanInfoType
     */
    guarantee?: GuaranteeType;
    /**
     * 
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    hotelId?: string;
    /**
     * Detail Information of the Rate Code.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    longInfo?: string;
    /**
     * Market Code associated with the RatePlanCode.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    marketCode?: string;
    /**
     * Meal plan codes associated with the rate codes.
     * @type {Array<MealPlanCodeType>}
     * @memberof BlockRatePlanInfoType
     */
    mealPlans?: Array<MealPlanCodeType>;
    /**
     * Indicates if the rate code is a negotiated rate code
     * @type {boolean}
     * @memberof BlockRatePlanInfoType
     */
    negotiated?: boolean;
    /**
     * Is it a primary rate plan?
     * @type {boolean}
     * @memberof BlockRatePlanInfoType
     */
    primary?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    ratePlanCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    ratePlanCode?: string;
    /**
     * All rate codes are associated with rate plan level ( or rate category )for Channels. So if rate plans are given in the request, get all rate codes associated with the rate plan level.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    ratePlanLevel?: string;
    /**
     * Indicates if service fee is included in the rate code amount.
     * @type {boolean}
     * @memberof BlockRatePlanInfoType
     */
    serviceFeeInclusive?: boolean;
    /**
     * Brief Information of the Rate Code.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    shortInfo?: string;
    /**
     * Is the rate amount to be shown?
     * @type {boolean}
     * @memberof BlockRatePlanInfoType
     */
    showRateAmount?: boolean;
    /**
     * Source Code associated with the RatePlanCode.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    sourceCode?: string;
    /**
     * Indicates if tax is included in the rate code amount.
     * @type {boolean}
     * @memberof BlockRatePlanInfoType
     */
    taxInclusive?: boolean;
    /**
     * URL providing more information about the Rate Code.
     * @type {string}
     * @memberof BlockRatePlanInfoType
     */
    webPage?: string;
}

/**
 * Check if a given object implements the BlockRatePlanInfoType interface.
 */
export function instanceOfBlockRatePlanInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockRatePlanInfoTypeFromJSON(json: any): BlockRatePlanInfoType {
    return BlockRatePlanInfoTypeFromJSONTyped(json, false);
}

export function BlockRatePlanInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockRatePlanInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cancelPenalty': !exists(json, 'cancelPenalty') ? undefined : CancelPenaltyTypeFromJSON(json['cancelPenalty']),
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'guarantee': !exists(json, 'guarantee') ? undefined : GuaranteeTypeFromJSON(json['guarantee']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'longInfo': !exists(json, 'longInfo') ? undefined : json['longInfo'],
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'mealPlans': !exists(json, 'mealPlans') ? undefined : ((json['mealPlans'] as Array<any>).map(MealPlanCodeTypeFromJSON)),
        'negotiated': !exists(json, 'negotiated') ? undefined : json['negotiated'],
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'ratePlanCategory': !exists(json, 'ratePlanCategory') ? undefined : json['ratePlanCategory'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'ratePlanLevel': !exists(json, 'ratePlanLevel') ? undefined : json['ratePlanLevel'],
        'serviceFeeInclusive': !exists(json, 'serviceFeeInclusive') ? undefined : json['serviceFeeInclusive'],
        'shortInfo': !exists(json, 'shortInfo') ? undefined : json['shortInfo'],
        'showRateAmount': !exists(json, 'showRateAmount') ? undefined : json['showRateAmount'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'taxInclusive': !exists(json, 'taxInclusive') ? undefined : json['taxInclusive'],
        'webPage': !exists(json, 'webPage') ? undefined : json['webPage'],
    };
}

export function BlockRatePlanInfoTypeToJSON(value?: BlockRatePlanInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cancelPenalty': CancelPenaltyTypeToJSON(value.cancelPenalty),
        'currencyCode': value.currencyCode,
        'description': value.description,
        'guarantee': GuaranteeTypeToJSON(value.guarantee),
        'hotelId': value.hotelId,
        'longInfo': value.longInfo,
        'marketCode': value.marketCode,
        'mealPlans': value.mealPlans === undefined ? undefined : ((value.mealPlans as Array<any>).map(MealPlanCodeTypeToJSON)),
        'negotiated': value.negotiated,
        'primary': value.primary,
        'ratePlanCategory': value.ratePlanCategory,
        'ratePlanCode': value.ratePlanCode,
        'ratePlanLevel': value.ratePlanLevel,
        'serviceFeeInclusive': value.serviceFeeInclusive,
        'shortInfo': value.shortInfo,
        'showRateAmount': value.showRateAmount,
        'sourceCode': value.sourceCode,
        'taxInclusive': value.taxInclusive,
        'webPage': value.webPage,
    };
}

