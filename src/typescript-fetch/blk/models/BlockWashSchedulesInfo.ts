/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockWashSchedulesInfoType } from './BlockWashSchedulesInfoType';
import {
    BlockWashSchedulesInfoTypeFromJSON,
    BlockWashSchedulesInfoTypeFromJSONTyped,
    BlockWashSchedulesInfoTypeToJSON,
} from './BlockWashSchedulesInfoType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object to change multiple Block Wash Schedules under the selected block.
 * @export
 * @interface BlockWashSchedulesInfo
 */
export interface BlockWashSchedulesInfo {
    /**
     * 
     * @type {BlockWashSchedulesInfoType}
     * @memberof BlockWashSchedulesInfo
     */
    blockWashSchedulesInfo?: BlockWashSchedulesInfoType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof BlockWashSchedulesInfo
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockWashSchedulesInfo
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the BlockWashSchedulesInfo interface.
 */
export function instanceOfBlockWashSchedulesInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockWashSchedulesInfoFromJSON(json: any): BlockWashSchedulesInfo {
    return BlockWashSchedulesInfoFromJSONTyped(json, false);
}

export function BlockWashSchedulesInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockWashSchedulesInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockWashSchedulesInfo': !exists(json, 'blockWashSchedulesInfo') ? undefined : BlockWashSchedulesInfoTypeFromJSON(json['blockWashSchedulesInfo']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function BlockWashSchedulesInfoToJSON(value?: BlockWashSchedulesInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockWashSchedulesInfo': BlockWashSchedulesInfoTypeToJSON(value.blockWashSchedulesInfo),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

