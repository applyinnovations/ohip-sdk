/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyBlockTypeCopyInstructions } from './CopyBlockTypeCopyInstructions';
import {
    CopyBlockTypeCopyInstructionsFromJSON,
    CopyBlockTypeCopyInstructionsFromJSONTyped,
    CopyBlockTypeCopyInstructionsToJSON,
} from './CopyBlockTypeCopyInstructions';
import type { CopySubBlockDetail } from './CopySubBlockDetail';
import {
    CopySubBlockDetailFromJSON,
    CopySubBlockDetailFromJSONTyped,
    CopySubBlockDetailToJSON,
} from './CopySubBlockDetail';
import type { NewBlockDetailsType } from './NewBlockDetailsType';
import {
    NewBlockDetailsTypeFromJSON,
    NewBlockDetailsTypeFromJSONTyped,
    NewBlockDetailsTypeToJSON,
} from './NewBlockDetailsType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * The source block will be used as a template to create the new copied block.
 * @export
 * @interface CopyBlockType
 */
export interface CopyBlockType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopyBlockType
     */
    sourceBlockId?: UniqueIDType;
    /**
     * 
     * @type {NewBlockDetailsType}
     * @memberof CopyBlockType
     */
    newBlock?: NewBlockDetailsType;
    /**
     * Collection of sub block details that will be copied along with the source master block.
     * @type {Array<CopySubBlockDetail>}
     * @memberof CopyBlockType
     */
    subBlocks?: Array<CopySubBlockDetail>;
    /**
     * 
     * @type {CopyBlockTypeCopyInstructions}
     * @memberof CopyBlockType
     */
    copyInstructions?: CopyBlockTypeCopyInstructions;
    /**
     * The hotel code of the source block.
     * @type {string}
     * @memberof CopyBlockType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the CopyBlockType interface.
 */
export function instanceOfCopyBlockType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyBlockTypeFromJSON(json: any): CopyBlockType {
    return CopyBlockTypeFromJSONTyped(json, false);
}

export function CopyBlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyBlockType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceBlockId': !exists(json, 'sourceBlockId') ? undefined : UniqueIDTypeFromJSON(json['sourceBlockId']),
        'newBlock': !exists(json, 'newBlock') ? undefined : NewBlockDetailsTypeFromJSON(json['newBlock']),
        'subBlocks': !exists(json, 'subBlocks') ? undefined : ((json['subBlocks'] as Array<any>).map(CopySubBlockDetailFromJSON)),
        'copyInstructions': !exists(json, 'copyInstructions') ? undefined : CopyBlockTypeCopyInstructionsFromJSON(json['copyInstructions']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function CopyBlockTypeToJSON(value?: CopyBlockType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceBlockId': UniqueIDTypeToJSON(value.sourceBlockId),
        'newBlock': NewBlockDetailsTypeToJSON(value.newBlock),
        'subBlocks': value.subBlocks === undefined ? undefined : ((value.subBlocks as Array<any>).map(CopySubBlockDetailToJSON)),
        'copyInstructions': CopyBlockTypeCopyInstructionsToJSON(value.copyInstructions),
        'hotelId': value.hotelId,
    };
}

