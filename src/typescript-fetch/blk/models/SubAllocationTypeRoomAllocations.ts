/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomAllocationMasterInfoType } from './RoomAllocationMasterInfoType';
import {
    RoomAllocationMasterInfoTypeFromJSON,
    RoomAllocationMasterInfoTypeFromJSONTyped,
    RoomAllocationMasterInfoTypeToJSON,
} from './RoomAllocationMasterInfoType';
import type { RoomAllocationTypeType } from './RoomAllocationTypeType';
import {
    RoomAllocationTypeTypeFromJSON,
    RoomAllocationTypeTypeFromJSONTyped,
    RoomAllocationTypeTypeToJSON,
} from './RoomAllocationTypeType';

/**
 * Room Allocations for the Block.
 * @export
 * @interface SubAllocationTypeRoomAllocations
 */
export interface SubAllocationTypeRoomAllocations {
    /**
     * 
     * @type {Array<RoomAllocationTypeType>}
     * @memberof SubAllocationTypeRoomAllocations
     */
    roomAllocationType?: Array<RoomAllocationTypeType>;
    /**
     * 
     * @type {RoomAllocationMasterInfoType}
     * @memberof SubAllocationTypeRoomAllocations
     */
    masterInfo?: RoomAllocationMasterInfoType;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof SubAllocationTypeRoomAllocations
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof SubAllocationTypeRoomAllocations
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof SubAllocationTypeRoomAllocations
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof SubAllocationTypeRoomAllocations
     */
    startDate?: string;
    /**
     * 
     * @type {number}
     * @memberof SubAllocationTypeRoomAllocations
     */
    numberOfDays?: number;
}

/**
 * Check if a given object implements the SubAllocationTypeRoomAllocations interface.
 */
export function instanceOfSubAllocationTypeRoomAllocations(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubAllocationTypeRoomAllocationsFromJSON(json: any): SubAllocationTypeRoomAllocations {
    return SubAllocationTypeRoomAllocationsFromJSONTyped(json, false);
}

export function SubAllocationTypeRoomAllocationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubAllocationTypeRoomAllocations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomAllocationType': !exists(json, 'roomAllocationType') ? undefined : ((json['roomAllocationType'] as Array<any>).map(RoomAllocationTypeTypeFromJSON)),
        'masterInfo': !exists(json, 'masterInfo') ? undefined : RoomAllocationMasterInfoTypeFromJSON(json['masterInfo']),
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'numberOfDays': !exists(json, 'numberOfDays') ? undefined : json['numberOfDays'],
    };
}

export function SubAllocationTypeRoomAllocationsToJSON(value?: SubAllocationTypeRoomAllocations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomAllocationType': value.roomAllocationType === undefined ? undefined : ((value.roomAllocationType as Array<any>).map(RoomAllocationTypeTypeToJSON)),
        'masterInfo': RoomAllocationMasterInfoTypeToJSON(value.masterInfo),
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'startDate': value.startDate,
        'numberOfDays': value.numberOfDays,
    };
}

