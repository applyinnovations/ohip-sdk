/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LeadInfoType } from './LeadInfoType';
import {
    LeadInfoTypeFromJSON,
    LeadInfoTypeFromJSONTyped,
    LeadInfoTypeToJSON,
} from './LeadInfoType';

/**
 * Basic information about the Central Lead and its linked Property Leads.
 * @export
 * @interface CentralSalesLeadsType
 */
export interface CentralSalesLeadsType {
    /**
     * 
     * @type {LeadInfoType}
     * @memberof CentralSalesLeadsType
     */
    centralLead?: LeadInfoType;
    /**
     * Basic information about the Property Leads.
     * @type {Array<LeadInfoType>}
     * @memberof CentralSalesLeadsType
     */
    propertyLeads?: Array<LeadInfoType>;
}

/**
 * Check if a given object implements the CentralSalesLeadsType interface.
 */
export function instanceOfCentralSalesLeadsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CentralSalesLeadsTypeFromJSON(json: any): CentralSalesLeadsType {
    return CentralSalesLeadsTypeFromJSONTyped(json, false);
}

export function CentralSalesLeadsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CentralSalesLeadsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'centralLead': !exists(json, 'centralLead') ? undefined : LeadInfoTypeFromJSON(json['centralLead']),
        'propertyLeads': !exists(json, 'propertyLeads') ? undefined : ((json['propertyLeads'] as Array<any>).map(LeadInfoTypeFromJSON)),
    };
}

export function CentralSalesLeadsTypeToJSON(value?: CentralSalesLeadsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'centralLead': LeadInfoTypeToJSON(value.centralLead),
        'propertyLeads': value.propertyLeads === undefined ? undefined : ((value.propertyLeads as Array<any>).map(LeadInfoTypeToJSON)),
    };
}

