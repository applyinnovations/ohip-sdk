/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Reservation eCoupon Type Information.
 * @export
 * @interface ECouponType
 */
export interface ECouponType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ECouponType
     */
    eCouponId?: UniqueIDType;
    /**
     * Code to attach the eCoupon to Reservation.
     * @type {string}
     * @memberof ECouponType
     */
    code?: string;
    /**
     * Description of the eCoupon attached to the Reservation.
     * @type {string}
     * @memberof ECouponType
     */
    description?: string;
    /**
     * Determines whether the eCoupon is attached through the Rate Code or not.
     * @type {boolean}
     * @memberof ECouponType
     */
    autoAttached?: boolean;
    /**
     * Assigned Quantity for the eCoupon when attached to Reservation.
     * @type {number}
     * @memberof ECouponType
     */
    issuedQuantity?: number;
    /**
     * Used Quantity of the eCoupon for the Reservation.
     * @type {number}
     * @memberof ECouponType
     */
    usedQuantity?: number;
    /**
     * Reason for attaching/modifing eCoupon.
     * @type {string}
     * @memberof ECouponType
     */
    reason?: string;
    /**
     * Rate plan of the attached eCoupon to Reservation.
     * @type {string}
     * @memberof ECouponType
     */
    ratePlanCode?: string;
    /**
     * Determines whether this eCoupon is eligible for welcome offer or not.
     * @type {boolean}
     * @memberof ECouponType
     */
    welcomeOffer?: boolean;
}

/**
 * Check if a given object implements the ECouponType interface.
 */
export function instanceOfECouponType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ECouponTypeFromJSON(json: any): ECouponType {
    return ECouponTypeFromJSONTyped(json, false);
}

export function ECouponTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECouponType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eCouponId': !exists(json, 'eCouponId') ? undefined : UniqueIDTypeFromJSON(json['eCouponId']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'autoAttached': !exists(json, 'autoAttached') ? undefined : json['autoAttached'],
        'issuedQuantity': !exists(json, 'issuedQuantity') ? undefined : json['issuedQuantity'],
        'usedQuantity': !exists(json, 'usedQuantity') ? undefined : json['usedQuantity'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'welcomeOffer': !exists(json, 'welcomeOffer') ? undefined : json['welcomeOffer'],
    };
}

export function ECouponTypeToJSON(value?: ECouponType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eCouponId': UniqueIDTypeToJSON(value.eCouponId),
        'code': value.code,
        'description': value.description,
        'autoAttached': value.autoAttached,
        'issuedQuantity': value.issuedQuantity,
        'usedQuantity': value.usedQuantity,
        'reason': value.reason,
        'ratePlanCode': value.ratePlanCode,
        'welcomeOffer': value.welcomeOffer,
    };
}

