/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FormattedTextTextType } from './FormattedTextTextType';
import {
    FormattedTextTextTypeFromJSON,
    FormattedTextTextTypeFromJSONTyped,
    FormattedTextTextTypeToJSON,
} from './FormattedTextTextType';

/**
 * An indication of a new paragraph for a sub-section of a formatted text message.
 * @export
 * @interface ParagraphType
 */
export interface ParagraphType {
    /**
     * An image for this paragraph.
     * @type {string}
     * @memberof ParagraphType
     */
    image?: string;
    /**
     * 
     * @type {FormattedTextTextType}
     * @memberof ParagraphType
     */
    text?: FormattedTextTextType;
    /**
     * A URL for this paragraph.
     * @type {string}
     * @memberof ParagraphType
     */
    url?: string;
}

/**
 * Check if a given object implements the ParagraphType interface.
 */
export function instanceOfParagraphType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParagraphTypeFromJSON(json: any): ParagraphType {
    return ParagraphTypeFromJSONTyped(json, false);
}

export function ParagraphTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParagraphType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'image': !exists(json, 'image') ? undefined : json['image'],
        'text': !exists(json, 'text') ? undefined : FormattedTextTextTypeFromJSON(json['text']),
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ParagraphTypeToJSON(value?: ParagraphType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'image': value.image,
        'text': FormattedTextTextTypeToJSON(value.text),
        'url': value.url,
    };
}

