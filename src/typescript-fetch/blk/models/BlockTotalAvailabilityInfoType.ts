/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAvailabilityRoomInfoType } from './BlockAvailabilityRoomInfoType';
import {
    BlockAvailabilityRoomInfoTypeFromJSON,
    BlockAvailabilityRoomInfoTypeFromJSONTyped,
    BlockAvailabilityRoomInfoTypeToJSON,
} from './BlockAvailabilityRoomInfoType';

/**
 * Captures total room availability information for the block by room type for the entire stay.
 * @export
 * @interface BlockTotalAvailabilityInfoType
 */
export interface BlockTotalAvailabilityInfoType {
    /**
     * Stay Start Date.
     * @type {string}
     * @memberof BlockTotalAvailabilityInfoType
     */
    stayStartDate?: string;
    /**
     * Stay End Date.
     * @type {string}
     * @memberof BlockTotalAvailabilityInfoType
     */
    stayEndDate?: string;
    /**
     * Total number of rooms.
     * @type {number}
     * @memberof BlockTotalAvailabilityInfoType
     */
    rooms?: number;
    /**
     * Total Block Availability per room type.
     * @type {Array<BlockAvailabilityRoomInfoType>}
     * @memberof BlockTotalAvailabilityInfoType
     */
    roomInfo?: Array<BlockAvailabilityRoomInfoType>;
}

/**
 * Check if a given object implements the BlockTotalAvailabilityInfoType interface.
 */
export function instanceOfBlockTotalAvailabilityInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockTotalAvailabilityInfoTypeFromJSON(json: any): BlockTotalAvailabilityInfoType {
    return BlockTotalAvailabilityInfoTypeFromJSONTyped(json, false);
}

export function BlockTotalAvailabilityInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockTotalAvailabilityInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stayStartDate': !exists(json, 'stayStartDate') ? undefined : json['stayStartDate'],
        'stayEndDate': !exists(json, 'stayEndDate') ? undefined : json['stayEndDate'],
        'rooms': !exists(json, 'rooms') ? undefined : json['rooms'],
        'roomInfo': !exists(json, 'roomInfo') ? undefined : ((json['roomInfo'] as Array<any>).map(BlockAvailabilityRoomInfoTypeFromJSON)),
    };
}

export function BlockTotalAvailabilityInfoTypeToJSON(value?: BlockTotalAvailabilityInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stayStartDate': value.stayStartDate,
        'stayEndDate': value.stayEndDate,
        'rooms': value.rooms,
        'roomInfo': value.roomInfo === undefined ? undefined : ((value.roomInfo as Array<any>).map(BlockAvailabilityRoomInfoTypeToJSON)),
    };
}

