/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdvanceCheckInType } from './AdvanceCheckInType';
import {
    AdvanceCheckInTypeFromJSON,
    AdvanceCheckInTypeFromJSONTyped,
    AdvanceCheckInTypeToJSON,
} from './AdvanceCheckInType';
import type { AlertType } from './AlertType';
import {
    AlertTypeFromJSON,
    AlertTypeFromJSONTyped,
    AlertTypeToJSON,
} from './AlertType';
import type { AssociatedResType } from './AssociatedResType';
import {
    AssociatedResTypeFromJSON,
    AssociatedResTypeFromJSONTyped,
    AssociatedResTypeToJSON,
} from './AssociatedResType';
import type { AttachmentType } from './AttachmentType';
import {
    AttachmentTypeFromJSON,
    AttachmentTypeFromJSONTyped,
    AttachmentTypeToJSON,
} from './AttachmentType';
import type { AwardType } from './AwardType';
import {
    AwardTypeFromJSON,
    AwardTypeFromJSONTyped,
    AwardTypeToJSON,
} from './AwardType';
import type { CallType } from './CallType';
import {
    CallTypeFromJSON,
    CallTypeFromJSONTyped,
    CallTypeToJSON,
} from './CallType';
import type { CateringResInfoType } from './CateringResInfoType';
import {
    CateringResInfoTypeFromJSON,
    CateringResInfoTypeFromJSONTyped,
    CateringResInfoTypeToJSON,
} from './CateringResInfoType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { CompAuthorizerInfoType } from './CompAuthorizerInfoType';
import {
    CompAuthorizerInfoTypeFromJSON,
    CompAuthorizerInfoTypeFromJSONTyped,
    CompAuthorizerInfoTypeToJSON,
} from './CompAuthorizerInfoType';
import type { ConfirmationType } from './ConfirmationType';
import {
    ConfirmationTypeFromJSON,
    ConfirmationTypeFromJSONTyped,
    ConfirmationTypeToJSON,
} from './ConfirmationType';
import type { CustomChargeExemptionType } from './CustomChargeExemptionType';
import {
    CustomChargeExemptionTypeFromJSON,
    CustomChargeExemptionTypeFromJSONTyped,
    CustomChargeExemptionTypeToJSON,
} from './CustomChargeExemptionType';
import type { ECouponType } from './ECouponType';
import {
    ECouponTypeFromJSON,
    ECouponTypeFromJSONTyped,
    ECouponTypeToJSON,
} from './ECouponType';
import type { ExternalReferenceType } from './ExternalReferenceType';
import {
    ExternalReferenceTypeFromJSON,
    ExternalReferenceTypeFromJSONTyped,
    ExternalReferenceTypeToJSON,
} from './ExternalReferenceType';
import type { FetchActivityBookingsType } from './FetchActivityBookingsType';
import {
    FetchActivityBookingsTypeFromJSON,
    FetchActivityBookingsTypeFromJSONTyped,
    FetchActivityBookingsTypeToJSON,
} from './FetchActivityBookingsType';
import type { FixedChargeType } from './FixedChargeType';
import {
    FixedChargeTypeFromJSON,
    FixedChargeTypeFromJSONTyped,
    FixedChargeTypeToJSON,
} from './FixedChargeType';
import type { GuestMessageType } from './GuestMessageType';
import {
    GuestMessageTypeFromJSON,
    GuestMessageTypeFromJSONTyped,
    GuestMessageTypeToJSON,
} from './GuestMessageType';
import type { HotelReservationTraceType } from './HotelReservationTraceType';
import {
    HotelReservationTraceTypeFromJSON,
    HotelReservationTraceTypeFromJSONTyped,
    HotelReservationTraceTypeToJSON,
} from './HotelReservationTraceType';
import type { HotelReservationTypeCancellation } from './HotelReservationTypeCancellation';
import {
    HotelReservationTypeCancellationFromJSON,
    HotelReservationTypeCancellationFromJSONTyped,
    HotelReservationTypeCancellationToJSON,
} from './HotelReservationTypeCancellation';
import type { HotelReservationTypeReservationProfiles } from './HotelReservationTypeReservationProfiles';
import {
    HotelReservationTypeReservationProfilesFromJSON,
    HotelReservationTypeReservationProfilesFromJSONTyped,
    HotelReservationTypeReservationProfilesToJSON,
} from './HotelReservationTypeReservationProfiles';
import type { HotelReservationTypeTransactionDiversions } from './HotelReservationTypeTransactionDiversions';
import {
    HotelReservationTypeTransactionDiversionsFromJSON,
    HotelReservationTypeTransactionDiversionsFromJSONTyped,
    HotelReservationTypeTransactionDiversionsToJSON,
} from './HotelReservationTypeTransactionDiversions';
import type { HotelReservationsType } from './HotelReservationsType';
import {
    HotelReservationsTypeFromJSON,
    HotelReservationsTypeFromJSONTyped,
    HotelReservationsTypeToJSON,
} from './HotelReservationsType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { LinkedReservationsInfoType } from './LinkedReservationsInfoType';
import {
    LinkedReservationsInfoTypeFromJSON,
    LinkedReservationsInfoTypeFromJSONTyped,
    LinkedReservationsInfoTypeToJSON,
} from './LinkedReservationsInfoType';
import type { MembershipType } from './MembershipType';
import {
    MembershipTypeFromJSON,
    MembershipTypeFromJSONTyped,
    MembershipTypeToJSON,
} from './MembershipType';
import type { NameValueDetailType } from './NameValueDetailType';
import {
    NameValueDetailTypeFromJSON,
    NameValueDetailTypeFromJSONTyped,
    NameValueDetailTypeToJSON,
} from './NameValueDetailType';
import type { OverrideInstructionType } from './OverrideInstructionType';
import {
    OverrideInstructionTypeFromJSON,
    OverrideInstructionTypeFromJSONTyped,
    OverrideInstructionTypeToJSON,
} from './OverrideInstructionType';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';
import type { PreferenceTypeType } from './PreferenceTypeType';
import {
    PreferenceTypeTypeFromJSON,
    PreferenceTypeTypeFromJSONTyped,
    PreferenceTypeTypeToJSON,
} from './PreferenceTypeType';
import type { PrepaidCardType } from './PrepaidCardType';
import {
    PrepaidCardTypeFromJSON,
    PrepaidCardTypeFromJSONTyped,
    PrepaidCardTypeToJSON,
} from './PrepaidCardType';
import type { ResAccessRestrictionType } from './ResAccessRestrictionType';
import {
    ResAccessRestrictionTypeFromJSON,
    ResAccessRestrictionTypeFromJSONTyped,
    ResAccessRestrictionTypeToJSON,
} from './ResAccessRestrictionType';
import type { ResCashieringType } from './ResCashieringType';
import {
    ResCashieringTypeFromJSON,
    ResCashieringTypeFromJSONTyped,
    ResCashieringTypeToJSON,
} from './ResCashieringType';
import type { ResCommunicationType } from './ResCommunicationType';
import {
    ResCommunicationTypeFromJSON,
    ResCommunicationTypeFromJSONTyped,
    ResCommunicationTypeToJSON,
} from './ResCommunicationType';
import type { ResGuestAdditionalInfoType } from './ResGuestAdditionalInfoType';
import {
    ResGuestAdditionalInfoTypeFromJSON,
    ResGuestAdditionalInfoTypeFromJSONTyped,
    ResGuestAdditionalInfoTypeToJSON,
} from './ResGuestAdditionalInfoType';
import type { ResGuestType } from './ResGuestType';
import {
    ResGuestTypeFromJSON,
    ResGuestTypeFromJSONTyped,
    ResGuestTypeToJSON,
} from './ResGuestType';
import type { ResHousekeepingType } from './ResHousekeepingType';
import {
    ResHousekeepingTypeFromJSON,
    ResHousekeepingTypeFromJSONTyped,
    ResHousekeepingTypeToJSON,
} from './ResHousekeepingType';
import type { ResInventoryItemsType } from './ResInventoryItemsType';
import {
    ResInventoryItemsTypeFromJSON,
    ResInventoryItemsTypeFromJSONTyped,
    ResInventoryItemsTypeToJSON,
} from './ResInventoryItemsType';
import type { ResSharedGuestInfoType } from './ResSharedGuestInfoType';
import {
    ResSharedGuestInfoTypeFromJSON,
    ResSharedGuestInfoTypeFromJSONTyped,
    ResSharedGuestInfoTypeToJSON,
} from './ResSharedGuestInfoType';
import type { ResStatClassificationType } from './ResStatClassificationType';
import {
    ResStatClassificationTypeFromJSON,
    ResStatClassificationTypeFromJSONTyped,
    ResStatClassificationTypeToJSON,
} from './ResStatClassificationType';
import type { ReservationAllowedActionType } from './ReservationAllowedActionType';
import {
    ReservationAllowedActionTypeFromJSON,
    ReservationAllowedActionTypeFromJSONTyped,
    ReservationAllowedActionTypeToJSON,
} from './ReservationAllowedActionType';
import type { ReservationECertificateType } from './ReservationECertificateType';
import {
    ReservationECertificateTypeFromJSON,
    ReservationECertificateTypeFromJSONTyped,
    ReservationECertificateTypeToJSON,
} from './ReservationECertificateType';
import type { ReservationLocatorType } from './ReservationLocatorType';
import {
    ReservationLocatorTypeFromJSON,
    ReservationLocatorTypeFromJSONTyped,
    ReservationLocatorTypeToJSON,
} from './ReservationLocatorType';
import type { ReservationMembershipType } from './ReservationMembershipType';
import {
    ReservationMembershipTypeFromJSON,
    ReservationMembershipTypeFromJSONTyped,
    ReservationMembershipTypeToJSON,
} from './ReservationMembershipType';
import type { ReservationPackageType } from './ReservationPackageType';
import {
    ReservationPackageTypeFromJSON,
    ReservationPackageTypeFromJSONTyped,
    ReservationPackageTypeToJSON,
} from './ReservationPackageType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { ReservationPoliciesType } from './ReservationPoliciesType';
import {
    ReservationPoliciesTypeFromJSON,
    ReservationPoliciesTypeFromJSONTyped,
    ReservationPoliciesTypeToJSON,
} from './ReservationPoliciesType';
import type { ReservationQueueInformationType } from './ReservationQueueInformationType';
import {
    ReservationQueueInformationTypeFromJSON,
    ReservationQueueInformationTypeFromJSONTyped,
    ReservationQueueInformationTypeToJSON,
} from './ReservationQueueInformationType';
import type { RoomStayType } from './RoomStayType';
import {
    RoomStayTypeFromJSON,
    RoomStayTypeFromJSONTyped,
    RoomStayTypeToJSON,
} from './RoomStayType';
import type { RoutingInfoType } from './RoutingInfoType';
import {
    RoutingInfoTypeFromJSON,
    RoutingInfoTypeFromJSONTyped,
    RoutingInfoTypeToJSON,
} from './RoutingInfoType';
import type { ServiceRequest } from './ServiceRequest';
import {
    ServiceRequestFromJSON,
    ServiceRequestFromJSONTyped,
    ServiceRequestToJSON,
} from './ServiceRequest';
import type { SourceOfSaleType } from './SourceOfSaleType';
import {
    SourceOfSaleTypeFromJSON,
    SourceOfSaleTypeFromJSONTyped,
    SourceOfSaleTypeToJSON,
} from './SourceOfSaleType';
import type { TicketType } from './TicketType';
import {
    TicketTypeFromJSON,
    TicketTypeFromJSONTyped,
    TicketTypeToJSON,
} from './TicketType';
import type { TrackItItemType } from './TrackItItemType';
import {
    TrackItItemTypeFromJSON,
    TrackItItemTypeFromJSONTyped,
    TrackItItemTypeToJSON,
} from './TrackItItemType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
import {
    UserDefinedFieldsTypeFromJSON,
    UserDefinedFieldsTypeFromJSONTyped,
    UserDefinedFieldsTypeToJSON,
} from './UserDefinedFieldsType';
import type { WaitlistResType } from './WaitlistResType';
import {
    WaitlistResTypeFromJSON,
    WaitlistResTypeFromJSONTyped,
    WaitlistResTypeToJSON,
} from './WaitlistResType';

/**
 * The Reservation class contains the current reservation being created or altered.
 * @export
 * @interface HotelReservationType
 */
export interface HotelReservationType {
    /**
     * 
     * @type {ResAccessRestrictionType}
     * @memberof HotelReservationType
     */
    accessRestriction?: ResAccessRestrictionType;
    /**
     * Configurable Access Restriction Message for Excluded Block or Rate Code.
     * @type {string}
     * @memberof HotelReservationType
     */
    accessRestrictionMessage?: string;
    /**
     * 
     * @type {ResGuestAdditionalInfoType}
     * @memberof HotelReservationType
     */
    additionalGuestInfo?: ResGuestAdditionalInfoType;
    /**
     * 
     * @type {AdvanceCheckInType}
     * @memberof HotelReservationType
     */
    advanceCheckIn?: AdvanceCheckInType;
    /**
     * List of alerts.
     * @type {Array<AlertType>}
     * @memberof HotelReservationType
     */
    alerts?: Array<AlertType>;
    /**
     * Flag to allow auto checkin
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowAutoCheckin?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowMobileCheckout?: boolean;
    /**
     * Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowMobileViewFolio?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowPreRegistration?: boolean;
    /**
     * Allowed action.
     * @type {Array<ReservationAllowedActionType>}
     * @memberof HotelReservationType
     */
    allowedActions?: Array<ReservationAllowedActionType>;
    /**
     * 
     * @type {AssociatedResType}
     * @memberof HotelReservationType
     */
    associatedReservations?: AssociatedResType;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof HotelReservationType
     */
    attachments?: Array<AttachmentType>;
    /**
     * This flag will force to borrow from house if borrow required for number of rooms requested, this will only applicable when reservation is attached to a Block.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    autoBorrowFromHouse?: boolean;
    /**
     * Holds call information.
     * @type {Array<CallType>}
     * @memberof HotelReservationType
     */
    callHistory?: Array<CallType>;
    /**
     * 
     * @type {HotelReservationTypeCancellation}
     * @memberof HotelReservationType
     */
    cancellation?: HotelReservationTypeCancellation;
    /**
     * 
     * @type {ResCashieringType}
     * @memberof HotelReservationType
     */
    cashiering?: ResCashieringType;
    /**
     * 
     * @type {CateringResInfoType}
     * @memberof HotelReservationType
     */
    catering?: CateringResInfoType;
    /**
     * This attribute represents Hotel charge card number. This number is generated automatically in OPERA when a reservation is created in OPERA. It is part of a functionality that provide the guest with the convenience of placing all their charges directly on their reservation folio.
     * @type {string}
     * @memberof HotelReservationType
     */
    chargeCardNumber?: string;
    /**
     * List of Notes for the Guest related to the reservation.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationType
     */
    comments?: Array<CommentInfoType>;
    /**
     * 
     * @type {CompAuthorizerInfoType}
     * @memberof HotelReservationType
     */
    compAuthorizer?: CompAuthorizerInfoType;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof HotelReservationType
     */
    computedReservationStatus?: PMSResStatusType;
    /**
     * List of confirmation letters.
     * @type {Array<ConfirmationType>}
     * @memberof HotelReservationType
     */
    confirmationLetters?: Array<ConfirmationType>;
    /**
     * Business Date when the reservation was created.
     * @type {Date}
     * @memberof HotelReservationType
     */
    createBusinessDate?: Date;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof HotelReservationType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof HotelReservationType
     */
    creatorId?: string;
    /**
     * List of Custom Charge Exemptions.
     * @type {Array<CustomChargeExemptionType>}
     * @memberof HotelReservationType
     */
    customChargeExemptionDetails?: Array<CustomChargeExemptionType>;
    /**
     * 
     * @type {NameValueDetailType}
     * @memberof HotelReservationType
     */
    customNameValueDetail?: NameValueDetailType;
    /**
     * Custom Reference to identify reservation.
     * @type {string}
     * @memberof HotelReservationType
     */
    customReference?: string;
    /**
     * The color to display this reservation on room grid displays.
     * @type {string}
     * @memberof HotelReservationType
     */
    displayColor?: string;
    /**
     * Collection of ECertificateType object.
     * @type {Array<ReservationECertificateType>}
     * @memberof HotelReservationType
     */
    eCertificates?: Array<ReservationECertificateType>;
    /**
     * Collection of ECouponType object.
     * @type {Array<ECouponType>}
     * @memberof HotelReservationType
     */
    eCoupons?: Array<ECouponType>;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    extSystemSync?: boolean;
    /**
     * This type contains unique information of external reference.
     * @type {Array<ExternalReferenceType>}
     * @memberof HotelReservationType
     */
    externalReferences?: Array<ExternalReferenceType>;
    /**
     * Holds fixed charge detail.
     * @type {Array<FixedChargeType>}
     * @memberof HotelReservationType
     */
    fixedCharges?: Array<FixedChargeType>;
    /**
     * List of Notes for the Guest related to the profile.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationType
     */
    guestComments?: Array<CommentInfoType>;
    /**
     * List of Memberships for the Guest related to the reservation.
     * @type {Array<MembershipType>}
     * @memberof HotelReservationType
     */
    guestMemberships?: Array<MembershipType>;
    /**
     * Holds the Message Information
     * @type {Array<GuestMessageType>}
     * @memberof HotelReservationType
     */
    guestMessages?: Array<GuestMessageType>;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    hasOpenFolio?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HotelReservationType
     */
    hotelId?: string;
    /**
     * 
     * @type {ResHousekeepingType}
     * @memberof HotelReservationType
     */
    housekeeping?: ResHousekeepingType;
    /**
     * 
     * @type {ResInventoryItemsType}
     * @memberof HotelReservationType
     */
    inventoryItems?: ResInventoryItemsType;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof HotelReservationType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof HotelReservationType
     */
    lastModifyDateTime?: string;
    /**
     * 
     * @type {LinkedReservationsInfoType}
     * @memberof HotelReservationType
     */
    linkedReservation?: LinkedReservationsInfoType;
    /**
     * Holds the Locator Information.
     * @type {Array<ReservationLocatorType>}
     * @memberof HotelReservationType
     */
    locators?: Array<ReservationLocatorType>;
    /**
     * An id representing the record lock for this reservation. When passed, update operation will verify that this lock is still valid.
     * @type {number}
     * @memberof HotelReservationType
     */
    lockHandle?: number;
    /**
     * Mark this reservation as recently accessed.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * Flag containing true or false value to determine if the guest has opted for communications pertaining to this reservation.Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is marked for communication. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    optedForCommunication?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideBlockRestriction?: boolean;
    /**
     * Forcefully override the create/update action on the Reservation. For real-time CRS interfaces, this element is used as force selling indicator in case of Create or Update Reservation
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideExternalChecks?: boolean;
    /**
     * List of override actions done.
     * @type {Array<OverrideInstructionType>}
     * @memberof HotelReservationType
     */
    overrideInstructions?: Array<OverrideInstructionType>;
    /**
     * Indicates to Override the Room Inventory Check if applicable.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideInventoryCheck?: boolean;
    /**
     * Party/PartyCode when reservation is part of a party(a small group).
     * @type {string}
     * @memberof HotelReservationType
     */
    party?: string;
    /**
     * Is the reservation pre-registered.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    preRegistered?: boolean;
    /**
     * Collection of reservation preferences.
     * @type {Array<PreferenceTypeType>}
     * @memberof HotelReservationType
     */
    preferenceCollection?: Array<PreferenceTypeType>;
    /**
     * Holds fixed charge detail.
     * @type {Array<PrepaidCardType>}
     * @memberof HotelReservationType
     */
    prepaidCards?: Array<PrepaidCardType>;
    /**
     * Name of the Chain for the primary enrollment
     * @type {string}
     * @memberof HotelReservationType
     */
    primaryEnrollmentChain?: string;
    /**
     * Name Of the Resort/Hotel for the primary enrollment
     * @type {string}
     * @memberof HotelReservationType
     */
    primaryEnrollmentResort?: string;
    /**
     * Indicates whether to show the rate or not on a printed document which includes the rate.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    printRate?: boolean;
    /**
     * List of awards.
     * @type {Array<AwardType>}
     * @memberof HotelReservationType
     */
    profileAwards?: Array<AwardType>;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof HotelReservationType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {ReservationQueueInformationType}
     * @memberof HotelReservationType
     */
    queue?: ReservationQueueInformationType;
    /**
     * Business Date when the reservation was last reinstated.
     * @type {Date}
     * @memberof HotelReservationType
     */
    reinstateDate?: Date;
    /**
     * Criteria for fetching Activity Bookings.
     * @type {Array<FetchActivityBookingsType>}
     * @memberof HotelReservationType
     */
    reservationActivities?: Array<FetchActivityBookingsType>;
    /**
     * List of awards.
     * @type {Array<AwardType>}
     * @memberof HotelReservationType
     */
    reservationAwards?: Array<AwardType>;
    /**
     * 
     * @type {ResCommunicationType}
     * @memberof HotelReservationType
     */
    reservationCommunication?: ResCommunicationType;
    /**
     * Collection of guests associated with the reservation.
     * @type {Array<ResGuestType>}
     * @memberof HotelReservationType
     */
    reservationGuests?: Array<ResGuestType>;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof HotelReservationType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof HotelReservationType
     */
    reservationIndicators?: Array<IndicatorType>;
    /**
     * List of reservation memberships.
     * @type {Array<ReservationMembershipType>}
     * @memberof HotelReservationType
     */
    reservationMemberships?: Array<ReservationMembershipType>;
    /**
     * A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
     * @type {Array<ReservationPackageType>}
     * @memberof HotelReservationType
     */
    reservationPackages?: Array<ReservationPackageType>;
    /**
     * Defines reservation payment methods.
     * @type {Array<ReservationPaymentMethodType>}
     * @memberof HotelReservationType
     */
    reservationPaymentMethods?: Array<ReservationPaymentMethodType>;
    /**
     * 
     * @type {ReservationPoliciesType}
     * @memberof HotelReservationType
     */
    reservationPolicies?: ReservationPoliciesType;
    /**
     * 
     * @type {HotelReservationTypeReservationProfiles}
     * @memberof HotelReservationType
     */
    reservationProfiles?: HotelReservationTypeReservationProfiles;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof HotelReservationType
     */
    reservationStatus?: PMSResStatusType;
    /**
     * 
     * @type {RoomStayType}
     * @memberof HotelReservationType
     */
    roomStay?: RoomStayType;
    /**
     * Boolean True if this reservation is reserving rooms. False if it is only reserving services.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    roomStayReservation?: boolean;
    /**
     * A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
     * @type {Array<RoutingInfoType>}
     * @memberof HotelReservationType
     */
    routingInstructions?: Array<RoutingInfoType>;
    /**
     * Criteria for fetching Activity Bookings.
     * @type {Array<FetchActivityBookingsType>}
     * @memberof HotelReservationType
     */
    scheduledActivities?: Array<FetchActivityBookingsType>;
    /**
     * Service request.
     * @type {Array<ServiceRequest>}
     * @memberof HotelReservationType
     */
    serviceRequests?: Array<ServiceRequest>;
    /**
     * Collection of shared guest reservations.
     * @type {Array<ResSharedGuestInfoType>}
     * @memberof HotelReservationType
     */
    sharedGuests?: Array<ResSharedGuestInfoType>;
    /**
     * 
     * @type {HotelReservationsType}
     * @memberof HotelReservationType
     */
    shares?: HotelReservationsType;
    /**
     * 
     * @type {SourceOfSaleType}
     * @memberof HotelReservationType
     */
    sourceOfSale?: SourceOfSaleType;
    /**
     * 
     * @type {ResStatClassificationType}
     * @memberof HotelReservationType
     */
    statisticalClassification?: ResStatClassificationType;
    /**
     * Collection of TicketType objects.
     * @type {Array<TicketType>}
     * @memberof HotelReservationType
     */
    tickets?: Array<TicketType>;
    /**
     * List of Reservation Traces.
     * @type {Array<HotelReservationTraceType>}
     * @memberof HotelReservationType
     */
    traces?: Array<HotelReservationTraceType>;
    /**
     * 
     * @type {Array<TrackItItemType>}
     * @memberof HotelReservationType
     */
    trackItItems?: Array<TrackItItemType>;
    /**
     * 
     * @type {HotelReservationTypeTransactionDiversions}
     * @memberof HotelReservationType
     */
    transactionDiversions?: HotelReservationTypeTransactionDiversions;
    /**
     * Indicates whether the reservation is eligible for upgrade.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    upgradeEligible?: boolean;
    /**
     * 
     * @type {UserDefinedFieldsType}
     * @memberof HotelReservationType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     * 
     * @type {WaitlistResType}
     * @memberof HotelReservationType
     */
    waitlist?: WaitlistResType;
    /**
     * When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    walkIn?: boolean;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof HotelReservationType
     */
    webRegistrationCards?: Array<AttachmentType>;
}

/**
 * Check if a given object implements the HotelReservationType interface.
 */
export function instanceOfHotelReservationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelReservationTypeFromJSON(json: any): HotelReservationType {
    return HotelReservationTypeFromJSONTyped(json, false);
}

export function HotelReservationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelReservationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessRestriction': !exists(json, 'accessRestriction') ? undefined : ResAccessRestrictionTypeFromJSON(json['accessRestriction']),
        'accessRestrictionMessage': !exists(json, 'accessRestrictionMessage') ? undefined : json['accessRestrictionMessage'],
        'additionalGuestInfo': !exists(json, 'additionalGuestInfo') ? undefined : ResGuestAdditionalInfoTypeFromJSON(json['additionalGuestInfo']),
        'advanceCheckIn': !exists(json, 'advanceCheckIn') ? undefined : AdvanceCheckInTypeFromJSON(json['advanceCheckIn']),
        'alerts': !exists(json, 'alerts') ? undefined : ((json['alerts'] as Array<any>).map(AlertTypeFromJSON)),
        'allowAutoCheckin': !exists(json, 'allowAutoCheckin') ? undefined : json['allowAutoCheckin'],
        'allowMobileCheckout': !exists(json, 'allowMobileCheckout') ? undefined : json['allowMobileCheckout'],
        'allowMobileViewFolio': !exists(json, 'allowMobileViewFolio') ? undefined : json['allowMobileViewFolio'],
        'allowPreRegistration': !exists(json, 'allowPreRegistration') ? undefined : json['allowPreRegistration'],
        'allowedActions': !exists(json, 'allowedActions') ? undefined : ((json['allowedActions'] as Array<any>).map(ReservationAllowedActionTypeFromJSON)),
        'associatedReservations': !exists(json, 'associatedReservations') ? undefined : AssociatedResTypeFromJSON(json['associatedReservations']),
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(AttachmentTypeFromJSON)),
        'autoBorrowFromHouse': !exists(json, 'autoBorrowFromHouse') ? undefined : json['autoBorrowFromHouse'],
        'callHistory': !exists(json, 'callHistory') ? undefined : ((json['callHistory'] as Array<any>).map(CallTypeFromJSON)),
        'cancellation': !exists(json, 'cancellation') ? undefined : HotelReservationTypeCancellationFromJSON(json['cancellation']),
        'cashiering': !exists(json, 'cashiering') ? undefined : ResCashieringTypeFromJSON(json['cashiering']),
        'catering': !exists(json, 'catering') ? undefined : CateringResInfoTypeFromJSON(json['catering']),
        'chargeCardNumber': !exists(json, 'chargeCardNumber') ? undefined : json['chargeCardNumber'],
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'compAuthorizer': !exists(json, 'compAuthorizer') ? undefined : CompAuthorizerInfoTypeFromJSON(json['compAuthorizer']),
        'computedReservationStatus': !exists(json, 'computedReservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['computedReservationStatus']),
        'confirmationLetters': !exists(json, 'confirmationLetters') ? undefined : ((json['confirmationLetters'] as Array<any>).map(ConfirmationTypeFromJSON)),
        'createBusinessDate': !exists(json, 'createBusinessDate') ? undefined : (new Date(json['createBusinessDate'])),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'customChargeExemptionDetails': !exists(json, 'customChargeExemptionDetails') ? undefined : ((json['customChargeExemptionDetails'] as Array<any>).map(CustomChargeExemptionTypeFromJSON)),
        'customNameValueDetail': !exists(json, 'customNameValueDetail') ? undefined : NameValueDetailTypeFromJSON(json['customNameValueDetail']),
        'customReference': !exists(json, 'customReference') ? undefined : json['customReference'],
        'displayColor': !exists(json, 'displayColor') ? undefined : json['displayColor'],
        'eCertificates': !exists(json, 'eCertificates') ? undefined : ((json['eCertificates'] as Array<any>).map(ReservationECertificateTypeFromJSON)),
        'eCoupons': !exists(json, 'eCoupons') ? undefined : ((json['eCoupons'] as Array<any>).map(ECouponTypeFromJSON)),
        'extSystemSync': !exists(json, 'extSystemSync') ? undefined : json['extSystemSync'],
        'externalReferences': !exists(json, 'externalReferences') ? undefined : ((json['externalReferences'] as Array<any>).map(ExternalReferenceTypeFromJSON)),
        'fixedCharges': !exists(json, 'fixedCharges') ? undefined : ((json['fixedCharges'] as Array<any>).map(FixedChargeTypeFromJSON)),
        'guestComments': !exists(json, 'guestComments') ? undefined : ((json['guestComments'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'guestMemberships': !exists(json, 'guestMemberships') ? undefined : ((json['guestMemberships'] as Array<any>).map(MembershipTypeFromJSON)),
        'guestMessages': !exists(json, 'guestMessages') ? undefined : ((json['guestMessages'] as Array<any>).map(GuestMessageTypeFromJSON)),
        'hasOpenFolio': !exists(json, 'hasOpenFolio') ? undefined : json['hasOpenFolio'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'housekeeping': !exists(json, 'housekeeping') ? undefined : ResHousekeepingTypeFromJSON(json['housekeeping']),
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ResInventoryItemsTypeFromJSON(json['inventoryItems']),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'linkedReservation': !exists(json, 'linkedReservation') ? undefined : LinkedReservationsInfoTypeFromJSON(json['linkedReservation']),
        'locators': !exists(json, 'locators') ? undefined : ((json['locators'] as Array<any>).map(ReservationLocatorTypeFromJSON)),
        'lockHandle': !exists(json, 'lockHandle') ? undefined : json['lockHandle'],
        'markAsRecentlyAccessed': !exists(json, 'markAsRecentlyAccessed') ? undefined : json['markAsRecentlyAccessed'],
        'optedForCommunication': !exists(json, 'optedForCommunication') ? undefined : json['optedForCommunication'],
        'overrideBlockRestriction': !exists(json, 'overrideBlockRestriction') ? undefined : json['overrideBlockRestriction'],
        'overrideExternalChecks': !exists(json, 'overrideExternalChecks') ? undefined : json['overrideExternalChecks'],
        'overrideInstructions': !exists(json, 'overrideInstructions') ? undefined : ((json['overrideInstructions'] as Array<any>).map(OverrideInstructionTypeFromJSON)),
        'overrideInventoryCheck': !exists(json, 'overrideInventoryCheck') ? undefined : json['overrideInventoryCheck'],
        'party': !exists(json, 'party') ? undefined : json['party'],
        'preRegistered': !exists(json, 'preRegistered') ? undefined : json['preRegistered'],
        'preferenceCollection': !exists(json, 'preferenceCollection') ? undefined : ((json['preferenceCollection'] as Array<any>).map(PreferenceTypeTypeFromJSON)),
        'prepaidCards': !exists(json, 'prepaidCards') ? undefined : ((json['prepaidCards'] as Array<any>).map(PrepaidCardTypeFromJSON)),
        'primaryEnrollmentChain': !exists(json, 'primaryEnrollmentChain') ? undefined : json['primaryEnrollmentChain'],
        'primaryEnrollmentResort': !exists(json, 'primaryEnrollmentResort') ? undefined : json['primaryEnrollmentResort'],
        'printRate': !exists(json, 'printRate') ? undefined : json['printRate'],
        'profileAwards': !exists(json, 'profileAwards') ? undefined : ((json['profileAwards'] as Array<any>).map(AwardTypeFromJSON)),
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'queue': !exists(json, 'queue') ? undefined : ReservationQueueInformationTypeFromJSON(json['queue']),
        'reinstateDate': !exists(json, 'reinstateDate') ? undefined : (new Date(json['reinstateDate'])),
        'reservationActivities': !exists(json, 'reservationActivities') ? undefined : ((json['reservationActivities'] as Array<any>).map(FetchActivityBookingsTypeFromJSON)),
        'reservationAwards': !exists(json, 'reservationAwards') ? undefined : ((json['reservationAwards'] as Array<any>).map(AwardTypeFromJSON)),
        'reservationCommunication': !exists(json, 'reservationCommunication') ? undefined : ResCommunicationTypeFromJSON(json['reservationCommunication']),
        'reservationGuests': !exists(json, 'reservationGuests') ? undefined : ((json['reservationGuests'] as Array<any>).map(ResGuestTypeFromJSON)),
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'reservationIndicators': !exists(json, 'reservationIndicators') ? undefined : ((json['reservationIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'reservationMemberships': !exists(json, 'reservationMemberships') ? undefined : ((json['reservationMemberships'] as Array<any>).map(ReservationMembershipTypeFromJSON)),
        'reservationPackages': !exists(json, 'reservationPackages') ? undefined : ((json['reservationPackages'] as Array<any>).map(ReservationPackageTypeFromJSON)),
        'reservationPaymentMethods': !exists(json, 'reservationPaymentMethods') ? undefined : ((json['reservationPaymentMethods'] as Array<any>).map(ReservationPaymentMethodTypeFromJSON)),
        'reservationPolicies': !exists(json, 'reservationPolicies') ? undefined : ReservationPoliciesTypeFromJSON(json['reservationPolicies']),
        'reservationProfiles': !exists(json, 'reservationProfiles') ? undefined : HotelReservationTypeReservationProfilesFromJSON(json['reservationProfiles']),
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
        'roomStay': !exists(json, 'roomStay') ? undefined : RoomStayTypeFromJSON(json['roomStay']),
        'roomStayReservation': !exists(json, 'roomStayReservation') ? undefined : json['roomStayReservation'],
        'routingInstructions': !exists(json, 'routingInstructions') ? undefined : ((json['routingInstructions'] as Array<any>).map(RoutingInfoTypeFromJSON)),
        'scheduledActivities': !exists(json, 'scheduledActivities') ? undefined : ((json['scheduledActivities'] as Array<any>).map(FetchActivityBookingsTypeFromJSON)),
        'serviceRequests': !exists(json, 'serviceRequests') ? undefined : ((json['serviceRequests'] as Array<any>).map(ServiceRequestFromJSON)),
        'sharedGuests': !exists(json, 'sharedGuests') ? undefined : ((json['sharedGuests'] as Array<any>).map(ResSharedGuestInfoTypeFromJSON)),
        'shares': !exists(json, 'shares') ? undefined : HotelReservationsTypeFromJSON(json['shares']),
        'sourceOfSale': !exists(json, 'sourceOfSale') ? undefined : SourceOfSaleTypeFromJSON(json['sourceOfSale']),
        'statisticalClassification': !exists(json, 'statisticalClassification') ? undefined : ResStatClassificationTypeFromJSON(json['statisticalClassification']),
        'tickets': !exists(json, 'tickets') ? undefined : ((json['tickets'] as Array<any>).map(TicketTypeFromJSON)),
        'traces': !exists(json, 'traces') ? undefined : ((json['traces'] as Array<any>).map(HotelReservationTraceTypeFromJSON)),
        'trackItItems': !exists(json, 'trackItItems') ? undefined : ((json['trackItItems'] as Array<any>).map(TrackItItemTypeFromJSON)),
        'transactionDiversions': !exists(json, 'transactionDiversions') ? undefined : HotelReservationTypeTransactionDiversionsFromJSON(json['transactionDiversions']),
        'upgradeEligible': !exists(json, 'upgradeEligible') ? undefined : json['upgradeEligible'],
        'userDefinedFields': !exists(json, 'userDefinedFields') ? undefined : UserDefinedFieldsTypeFromJSON(json['userDefinedFields']),
        'waitlist': !exists(json, 'waitlist') ? undefined : WaitlistResTypeFromJSON(json['waitlist']),
        'walkIn': !exists(json, 'walkIn') ? undefined : json['walkIn'],
        'webRegistrationCards': !exists(json, 'webRegistrationCards') ? undefined : ((json['webRegistrationCards'] as Array<any>).map(AttachmentTypeFromJSON)),
    };
}

export function HotelReservationTypeToJSON(value?: HotelReservationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessRestriction': ResAccessRestrictionTypeToJSON(value.accessRestriction),
        'accessRestrictionMessage': value.accessRestrictionMessage,
        'additionalGuestInfo': ResGuestAdditionalInfoTypeToJSON(value.additionalGuestInfo),
        'advanceCheckIn': AdvanceCheckInTypeToJSON(value.advanceCheckIn),
        'alerts': value.alerts === undefined ? undefined : ((value.alerts as Array<any>).map(AlertTypeToJSON)),
        'allowAutoCheckin': value.allowAutoCheckin,
        'allowMobileCheckout': value.allowMobileCheckout,
        'allowMobileViewFolio': value.allowMobileViewFolio,
        'allowPreRegistration': value.allowPreRegistration,
        'allowedActions': value.allowedActions === undefined ? undefined : ((value.allowedActions as Array<any>).map(ReservationAllowedActionTypeToJSON)),
        'associatedReservations': AssociatedResTypeToJSON(value.associatedReservations),
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(AttachmentTypeToJSON)),
        'autoBorrowFromHouse': value.autoBorrowFromHouse,
        'callHistory': value.callHistory === undefined ? undefined : ((value.callHistory as Array<any>).map(CallTypeToJSON)),
        'cancellation': HotelReservationTypeCancellationToJSON(value.cancellation),
        'cashiering': ResCashieringTypeToJSON(value.cashiering),
        'catering': CateringResInfoTypeToJSON(value.catering),
        'chargeCardNumber': value.chargeCardNumber,
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentInfoTypeToJSON)),
        'compAuthorizer': CompAuthorizerInfoTypeToJSON(value.compAuthorizer),
        'computedReservationStatus': PMSResStatusTypeToJSON(value.computedReservationStatus),
        'confirmationLetters': value.confirmationLetters === undefined ? undefined : ((value.confirmationLetters as Array<any>).map(ConfirmationTypeToJSON)),
        'createBusinessDate': value.createBusinessDate === undefined ? undefined : (value.createBusinessDate.toISOString().substring(0,10)),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'customChargeExemptionDetails': value.customChargeExemptionDetails === undefined ? undefined : ((value.customChargeExemptionDetails as Array<any>).map(CustomChargeExemptionTypeToJSON)),
        'customNameValueDetail': NameValueDetailTypeToJSON(value.customNameValueDetail),
        'customReference': value.customReference,
        'displayColor': value.displayColor,
        'eCertificates': value.eCertificates === undefined ? undefined : ((value.eCertificates as Array<any>).map(ReservationECertificateTypeToJSON)),
        'eCoupons': value.eCoupons === undefined ? undefined : ((value.eCoupons as Array<any>).map(ECouponTypeToJSON)),
        'extSystemSync': value.extSystemSync,
        'externalReferences': value.externalReferences === undefined ? undefined : ((value.externalReferences as Array<any>).map(ExternalReferenceTypeToJSON)),
        'fixedCharges': value.fixedCharges === undefined ? undefined : ((value.fixedCharges as Array<any>).map(FixedChargeTypeToJSON)),
        'guestComments': value.guestComments === undefined ? undefined : ((value.guestComments as Array<any>).map(CommentInfoTypeToJSON)),
        'guestMemberships': value.guestMemberships === undefined ? undefined : ((value.guestMemberships as Array<any>).map(MembershipTypeToJSON)),
        'guestMessages': value.guestMessages === undefined ? undefined : ((value.guestMessages as Array<any>).map(GuestMessageTypeToJSON)),
        'hasOpenFolio': value.hasOpenFolio,
        'hotelId': value.hotelId,
        'housekeeping': ResHousekeepingTypeToJSON(value.housekeeping),
        'inventoryItems': ResInventoryItemsTypeToJSON(value.inventoryItems),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'linkedReservation': LinkedReservationsInfoTypeToJSON(value.linkedReservation),
        'locators': value.locators === undefined ? undefined : ((value.locators as Array<any>).map(ReservationLocatorTypeToJSON)),
        'lockHandle': value.lockHandle,
        'markAsRecentlyAccessed': value.markAsRecentlyAccessed,
        'optedForCommunication': value.optedForCommunication,
        'overrideBlockRestriction': value.overrideBlockRestriction,
        'overrideExternalChecks': value.overrideExternalChecks,
        'overrideInstructions': value.overrideInstructions === undefined ? undefined : ((value.overrideInstructions as Array<any>).map(OverrideInstructionTypeToJSON)),
        'overrideInventoryCheck': value.overrideInventoryCheck,
        'party': value.party,
        'preRegistered': value.preRegistered,
        'preferenceCollection': value.preferenceCollection === undefined ? undefined : ((value.preferenceCollection as Array<any>).map(PreferenceTypeTypeToJSON)),
        'prepaidCards': value.prepaidCards === undefined ? undefined : ((value.prepaidCards as Array<any>).map(PrepaidCardTypeToJSON)),
        'primaryEnrollmentChain': value.primaryEnrollmentChain,
        'primaryEnrollmentResort': value.primaryEnrollmentResort,
        'printRate': value.printRate,
        'profileAwards': value.profileAwards === undefined ? undefined : ((value.profileAwards as Array<any>).map(AwardTypeToJSON)),
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substring(0,10)),
        'queue': ReservationQueueInformationTypeToJSON(value.queue),
        'reinstateDate': value.reinstateDate === undefined ? undefined : (value.reinstateDate.toISOString().substring(0,10)),
        'reservationActivities': value.reservationActivities === undefined ? undefined : ((value.reservationActivities as Array<any>).map(FetchActivityBookingsTypeToJSON)),
        'reservationAwards': value.reservationAwards === undefined ? undefined : ((value.reservationAwards as Array<any>).map(AwardTypeToJSON)),
        'reservationCommunication': ResCommunicationTypeToJSON(value.reservationCommunication),
        'reservationGuests': value.reservationGuests === undefined ? undefined : ((value.reservationGuests as Array<any>).map(ResGuestTypeToJSON)),
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'reservationIndicators': value.reservationIndicators === undefined ? undefined : ((value.reservationIndicators as Array<any>).map(IndicatorTypeToJSON)),
        'reservationMemberships': value.reservationMemberships === undefined ? undefined : ((value.reservationMemberships as Array<any>).map(ReservationMembershipTypeToJSON)),
        'reservationPackages': value.reservationPackages === undefined ? undefined : ((value.reservationPackages as Array<any>).map(ReservationPackageTypeToJSON)),
        'reservationPaymentMethods': value.reservationPaymentMethods === undefined ? undefined : ((value.reservationPaymentMethods as Array<any>).map(ReservationPaymentMethodTypeToJSON)),
        'reservationPolicies': ReservationPoliciesTypeToJSON(value.reservationPolicies),
        'reservationProfiles': HotelReservationTypeReservationProfilesToJSON(value.reservationProfiles),
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
        'roomStay': RoomStayTypeToJSON(value.roomStay),
        'roomStayReservation': value.roomStayReservation,
        'routingInstructions': value.routingInstructions === undefined ? undefined : ((value.routingInstructions as Array<any>).map(RoutingInfoTypeToJSON)),
        'scheduledActivities': value.scheduledActivities === undefined ? undefined : ((value.scheduledActivities as Array<any>).map(FetchActivityBookingsTypeToJSON)),
        'serviceRequests': value.serviceRequests === undefined ? undefined : ((value.serviceRequests as Array<any>).map(ServiceRequestToJSON)),
        'sharedGuests': value.sharedGuests === undefined ? undefined : ((value.sharedGuests as Array<any>).map(ResSharedGuestInfoTypeToJSON)),
        'shares': HotelReservationsTypeToJSON(value.shares),
        'sourceOfSale': SourceOfSaleTypeToJSON(value.sourceOfSale),
        'statisticalClassification': ResStatClassificationTypeToJSON(value.statisticalClassification),
        'tickets': value.tickets === undefined ? undefined : ((value.tickets as Array<any>).map(TicketTypeToJSON)),
        'traces': value.traces === undefined ? undefined : ((value.traces as Array<any>).map(HotelReservationTraceTypeToJSON)),
        'trackItItems': value.trackItItems === undefined ? undefined : ((value.trackItItems as Array<any>).map(TrackItItemTypeToJSON)),
        'transactionDiversions': HotelReservationTypeTransactionDiversionsToJSON(value.transactionDiversions),
        'upgradeEligible': value.upgradeEligible,
        'userDefinedFields': UserDefinedFieldsTypeToJSON(value.userDefinedFields),
        'waitlist': WaitlistResTypeToJSON(value.waitlist),
        'walkIn': value.walkIn,
        'webRegistrationCards': value.webRegistrationCards === undefined ? undefined : ((value.webRegistrationCards as Array<any>).map(AttachmentTypeToJSON)),
    };
}

