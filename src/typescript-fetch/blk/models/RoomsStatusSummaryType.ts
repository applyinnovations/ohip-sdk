/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Contains Block's room status summary info.
 * @export
 * @interface RoomsStatusSummaryType
 */
export interface RoomsStatusSummaryType {
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    assigned?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    unassigned?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    inspected?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    dirty?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    clean?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    pickup?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomsStatusSummaryType
     */
    outOfService?: number;
}

/**
 * Check if a given object implements the RoomsStatusSummaryType interface.
 */
export function instanceOfRoomsStatusSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomsStatusSummaryTypeFromJSON(json: any): RoomsStatusSummaryType {
    return RoomsStatusSummaryTypeFromJSONTyped(json, false);
}

export function RoomsStatusSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomsStatusSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assigned': !exists(json, 'assigned') ? undefined : json['assigned'],
        'unassigned': !exists(json, 'unassigned') ? undefined : json['unassigned'],
        'inspected': !exists(json, 'inspected') ? undefined : json['inspected'],
        'dirty': !exists(json, 'dirty') ? undefined : json['dirty'],
        'clean': !exists(json, 'clean') ? undefined : json['clean'],
        'pickup': !exists(json, 'pickup') ? undefined : json['pickup'],
        'outOfService': !exists(json, 'outOfService') ? undefined : json['outOfService'],
    };
}

export function RoomsStatusSummaryTypeToJSON(value?: RoomsStatusSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assigned': value.assigned,
        'unassigned': value.unassigned,
        'inspected': value.inspected,
        'dirty': value.dirty,
        'clean': value.clean,
        'pickup': value.pickup,
        'outOfService': value.outOfService,
    };
}

