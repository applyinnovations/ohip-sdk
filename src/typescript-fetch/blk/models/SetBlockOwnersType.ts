/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockOwnersType } from './BlockOwnersType';
import {
    BlockOwnersTypeFromJSON,
    BlockOwnersTypeFromJSONTyped,
    BlockOwnersTypeToJSON,
} from './BlockOwnersType';
import type { BlockOwnershipType } from './BlockOwnershipType';
import {
    BlockOwnershipTypeFromJSON,
    BlockOwnershipTypeFromJSONTyped,
    BlockOwnershipTypeToJSON,
} from './BlockOwnershipType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria to update block owners.
 * @export
 * @interface SetBlockOwnersType
 */
export interface SetBlockOwnersType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof SetBlockOwnersType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {BlockOwnersType}
     * @memberof SetBlockOwnersType
     */
    blockOwners?: BlockOwnersType;
    /**
     * Hotel Code of the business block
     * @type {string}
     * @memberof SetBlockOwnersType
     */
    hotelId?: string;
    /**
     * 
     * @type {BlockOwnershipType}
     * @memberof SetBlockOwnersType
     */
    ownership?: BlockOwnershipType;
}

/**
 * Check if a given object implements the SetBlockOwnersType interface.
 */
export function instanceOfSetBlockOwnersType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SetBlockOwnersTypeFromJSON(json: any): SetBlockOwnersType {
    return SetBlockOwnersTypeFromJSONTyped(json, false);
}

export function SetBlockOwnersTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetBlockOwnersType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockOwners': !exists(json, 'blockOwners') ? undefined : BlockOwnersTypeFromJSON(json['blockOwners']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'ownership': !exists(json, 'ownership') ? undefined : BlockOwnershipTypeFromJSON(json['ownership']),
    };
}

export function SetBlockOwnersTypeToJSON(value?: SetBlockOwnersType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockOwners': BlockOwnersTypeToJSON(value.blockOwners),
        'hotelId': value.hotelId,
        'ownership': BlockOwnershipTypeToJSON(value.ownership),
    };
}

