/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancelPenaltyType } from './CancelPenaltyType';
import {
    CancelPenaltyTypeFromJSON,
    CancelPenaltyTypeFromJSONTyped,
    CancelPenaltyTypeToJSON,
} from './CancelPenaltyType';
import type { DepositPolicyType } from './DepositPolicyType';
import {
    DepositPolicyTypeFromJSON,
    DepositPolicyTypeFromJSONTyped,
    DepositPolicyTypeToJSON,
} from './DepositPolicyType';
import type { RoomTypeAttributesType } from './RoomTypeAttributesType';
import {
    RoomTypeAttributesTypeFromJSON,
    RoomTypeAttributesTypeFromJSONTyped,
    RoomTypeAttributesTypeToJSON,
} from './RoomTypeAttributesType';

/**
 * Captures occupancy and rate information for a room type.
 * @export
 * @interface BlockAvailabilityRoomInfoType
 */
export interface BlockAvailabilityRoomInfoType {
    /**
     * Total occupancy allotted for the room type and stay date.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    inventory?: number;
    /**
     * The derived rate amount for the room type, stay date and number of adults.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    rate?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockAvailabilityRoomInfoType
     */
    roomType?: string;
    /**
     * 
     * @type {RoomTypeAttributesType}
     * @memberof BlockAvailabilityRoomInfoType
     */
    roomTypeAttributes?: RoomTypeAttributesType;
    /**
     * Available Sell Limit rooms for a Sell Limit block.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    sellLimit?: number;
    /**
     * Amount of an additional product or service that is sold as part of the rate or in addition to the rate.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    _package?: number;
    /**
     * Amount of tax generated separately on the revenue and package.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    tax?: number;
    /**
     * Amount of revenue and package excluding tax.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    gross?: number;
    /**
     * Amount of revenue and package including tax.
     * @type {number}
     * @memberof BlockAvailabilityRoomInfoType
     */
    net?: number;
    /**
     * 
     * @type {DepositPolicyType}
     * @memberof BlockAvailabilityRoomInfoType
     */
    depositPolicy?: DepositPolicyType;
    /**
     * 
     * @type {CancelPenaltyType}
     * @memberof BlockAvailabilityRoomInfoType
     */
    cancelPenalty?: CancelPenaltyType;
}

/**
 * Check if a given object implements the BlockAvailabilityRoomInfoType interface.
 */
export function instanceOfBlockAvailabilityRoomInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAvailabilityRoomInfoTypeFromJSON(json: any): BlockAvailabilityRoomInfoType {
    return BlockAvailabilityRoomInfoTypeFromJSONTyped(json, false);
}

export function BlockAvailabilityRoomInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAvailabilityRoomInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inventory': !exists(json, 'inventory') ? undefined : json['inventory'],
        'rate': !exists(json, 'rate') ? undefined : json['rate'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'roomTypeAttributes': !exists(json, 'roomTypeAttributes') ? undefined : RoomTypeAttributesTypeFromJSON(json['roomTypeAttributes']),
        'sellLimit': !exists(json, 'sellLimit') ? undefined : json['sellLimit'],
        '_package': !exists(json, 'package') ? undefined : json['package'],
        'tax': !exists(json, 'tax') ? undefined : json['tax'],
        'gross': !exists(json, 'gross') ? undefined : json['gross'],
        'net': !exists(json, 'net') ? undefined : json['net'],
        'depositPolicy': !exists(json, 'depositPolicy') ? undefined : DepositPolicyTypeFromJSON(json['depositPolicy']),
        'cancelPenalty': !exists(json, 'cancelPenalty') ? undefined : CancelPenaltyTypeFromJSON(json['cancelPenalty']),
    };
}

export function BlockAvailabilityRoomInfoTypeToJSON(value?: BlockAvailabilityRoomInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inventory': value.inventory,
        'rate': value.rate,
        'roomType': value.roomType,
        'roomTypeAttributes': RoomTypeAttributesTypeToJSON(value.roomTypeAttributes),
        'sellLimit': value.sellLimit,
        'package': value._package,
        'tax': value.tax,
        'gross': value.gross,
        'net': value.net,
        'depositPolicy': DepositPolicyTypeToJSON(value.depositPolicy),
        'cancelPenalty': CancelPenaltyTypeToJSON(value.cancelPenalty),
    };
}

