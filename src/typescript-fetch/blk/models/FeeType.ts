/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmountDeterminationType } from './AmountDeterminationType';
import {
    AmountDeterminationTypeFromJSON,
    AmountDeterminationTypeFromJSONTyped,
    AmountDeterminationTypeToJSON,
} from './AmountDeterminationType';

/**
 * Applicable service charges or fees.
 * @export
 * @interface FeeType
 */
export interface FeeType {
    /**
     * 
     * @type {string}
     * @memberof FeeType
     */
    description?: string;
    /**
     * 
     * @type {AmountDeterminationType}
     * @memberof FeeType
     */
    type?: AmountDeterminationType;
    /**
     * Code identifying the fee (e.g.,agency fee, municipality fee).
     * @type {string}
     * @memberof FeeType
     */
    code?: string;
    /**
     * A monetary amount.
     * @type {number}
     * @memberof FeeType
     */
    amount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof FeeType
     */
    currencyCode?: string;
}

/**
 * Check if a given object implements the FeeType interface.
 */
export function instanceOfFeeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FeeTypeFromJSON(json: any): FeeType {
    return FeeTypeFromJSONTyped(json, false);
}

export function FeeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : AmountDeterminationTypeFromJSON(json['type']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
    };
}

export function FeeTypeToJSON(value?: FeeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'type': AmountDeterminationTypeToJSON(value.type),
        'code': value.code,
        'amount': value.amount,
        'currencyCode': value.currencyCode,
    };
}

