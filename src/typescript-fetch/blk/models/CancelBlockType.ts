/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancellationDetailsType } from './CancellationDetailsType';
import {
    CancellationDetailsTypeFromJSON,
    CancellationDetailsTypeFromJSONTyped,
    CancellationDetailsTypeToJSON,
} from './CancellationDetailsType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * ID information of the cancelled Block.
 * @export
 * @interface CancelBlockType
 */
export interface CancelBlockType {
    /**
     * Opera Hotel code for the cancel block operation.
     * @type {string}
     * @memberof CancelBlockType
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof CancelBlockType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * Start date of the block to be cancelled.
     * @type {string}
     * @memberof CancelBlockType
     */
    startDate?: string;
    /**
     * 
     * @type {CancellationDetailsType}
     * @memberof CancelBlockType
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * 
     * @type {CancellationDetailsType}
     * @memberof CancelBlockType
     */
    pMReservationsCancellationDetails?: CancellationDetailsType;
}

/**
 * Check if a given object implements the CancelBlockType interface.
 */
export function instanceOfCancelBlockType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancelBlockTypeFromJSON(json: any): CancelBlockType {
    return CancelBlockTypeFromJSONTyped(json, false);
}

export function CancelBlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancelBlockType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'cancellationDetails': !exists(json, 'cancellationDetails') ? undefined : CancellationDetailsTypeFromJSON(json['cancellationDetails']),
        'pMReservationsCancellationDetails': !exists(json, 'pMReservationsCancellationDetails') ? undefined : CancellationDetailsTypeFromJSON(json['pMReservationsCancellationDetails']),
    };
}

export function CancelBlockTypeToJSON(value?: CancelBlockType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'startDate': value.startDate,
        'cancellationDetails': CancellationDetailsTypeToJSON(value.cancellationDetails),
        'pMReservationsCancellationDetails': CancellationDetailsTypeToJSON(value.pMReservationsCancellationDetails),
    };
}

