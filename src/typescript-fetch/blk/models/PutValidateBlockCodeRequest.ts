/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockIdList } from './BlockIdList';
import {
    BlockIdListFromJSON,
    BlockIdListFromJSONTyped,
    BlockIdListToJSON,
} from './BlockIdList';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface PutValidateBlockCodeRequest
 */
export interface PutValidateBlockCodeRequest {
    /**
     * 
     * @type {BlockIdList}
     * @memberof PutValidateBlockCodeRequest
     */
    blockIdList?: BlockIdList;
    /**
     * End date for this block.
     * @type {Date}
     * @memberof PutValidateBlockCodeRequest
     */
    endDate?: Date;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof PutValidateBlockCodeRequest
     */
    hotelId?: string;
    /**
     * 
     * @type {Links}
     * @memberof PutValidateBlockCodeRequest
     */
    links?: Links;
    /**
     * Start date for this block.
     * @type {Date}
     * @memberof PutValidateBlockCodeRequest
     */
    startDate?: Date;
    /**
     * 
     * @type {WarningsType}
     * @memberof PutValidateBlockCodeRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the PutValidateBlockCodeRequest interface.
 */
export function instanceOfPutValidateBlockCodeRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PutValidateBlockCodeRequestFromJSON(json: any): PutValidateBlockCodeRequest {
    return PutValidateBlockCodeRequestFromJSONTyped(json, false);
}

export function PutValidateBlockCodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutValidateBlockCodeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIdList': !exists(json, 'blockIdList') ? undefined : BlockIdListFromJSON(json['blockIdList']),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function PutValidateBlockCodeRequestToJSON(value?: PutValidateBlockCodeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIdList': BlockIdListToJSON(value.blockIdList),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'hotelId': value.hotelId,
        'links': LinksToJSON(value.links),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

