/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information related to a Task Code. Task Codes are used to generate task sheets in Rooms Management.
 * @export
 * @interface HousekeepingTaskCodeType
 */
export interface HousekeepingTaskCodeType {
    /**
     * The Code for the task.
     * @type {string}
     * @memberof HousekeepingTaskCodeType
     */
    code?: string;
    /**
     * Description of the Task Code.
     * @type {string}
     * @memberof HousekeepingTaskCodeType
     */
    description?: string;
    /**
     * Indicates if this task code is the default departure task for Facility Tasks. This requires
     * @type {boolean}
     * @memberof HousekeepingTaskCodeType
     */
    facilityDepartureTask?: boolean;
    /**
     * Property where this task code is configured.
     * @type {string}
     * @memberof HousekeepingTaskCodeType
     */
    hotelId?: string;
    /**
     * Instructions for this Task Code.
     * @type {string}
     * @memberof HousekeepingTaskCodeType
     */
    instructions?: string;
    /**
     * Indicates if a linen change is necessary.
     * @type {boolean}
     * @memberof HousekeepingTaskCodeType
     */
    linenChange?: boolean;
    /**
     * Ordering sequence for display.
     * @type {number}
     * @memberof HousekeepingTaskCodeType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the HousekeepingTaskCodeType interface.
 */
export function instanceOfHousekeepingTaskCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingTaskCodeTypeFromJSON(json: any): HousekeepingTaskCodeType {
    return HousekeepingTaskCodeTypeFromJSONTyped(json, false);
}

export function HousekeepingTaskCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingTaskCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'facilityDepartureTask': !exists(json, 'facilityDepartureTask') ? undefined : json['facilityDepartureTask'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'instructions': !exists(json, 'instructions') ? undefined : json['instructions'],
        'linenChange': !exists(json, 'linenChange') ? undefined : json['linenChange'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function HousekeepingTaskCodeTypeToJSON(value?: HousekeepingTaskCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'facilityDepartureTask': value.facilityDepartureTask,
        'hotelId': value.hotelId,
        'instructions': value.instructions,
        'linenChange': value.linenChange,
        'sequence': value.sequence,
    };
}

