/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RestrictionStatusesType } from './RestrictionStatusesType';
import {
    RestrictionStatusesTypeFromJSON,
    RestrictionStatusesTypeFromJSONTyped,
    RestrictionStatusesTypeToJSON,
} from './RestrictionStatusesType';

/**
 * The RestrictionStatusType is used to indicate the type of restriction applied. An enumerated restriction type is defined in the attribute group.
 * @export
 * @interface RestrictionStatusType
 */
export interface RestrictionStatusType {
    /**
     * 
     * @type {RestrictionStatusesType}
     * @memberof RestrictionStatusType
     */
    code?: RestrictionStatusesType;
    /**
     * Defines restriction in conjunction with Restriction Code. Value must be specified for Restriction Codes MinimumStayThrough, MaximumStayThrough, MinimumLengthOfStay, MaximumLengthOfStay, MinimumAdvanceBooking, MaximumAdvanceBooking.
     * @type {number}
     * @memberof RestrictionStatusType
     */
    unit?: number;
}

/**
 * Check if a given object implements the RestrictionStatusType interface.
 */
export function instanceOfRestrictionStatusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RestrictionStatusTypeFromJSON(json: any): RestrictionStatusType {
    return RestrictionStatusTypeFromJSONTyped(json, false);
}

export function RestrictionStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestrictionStatusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : RestrictionStatusesTypeFromJSON(json['code']),
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
    };
}

export function RestrictionStatusTypeToJSON(value?: RestrictionStatusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': RestrictionStatusesTypeToJSON(value.code),
        'unit': value.unit,
    };
}

