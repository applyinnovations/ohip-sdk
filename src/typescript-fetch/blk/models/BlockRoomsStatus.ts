/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RoomsStatusSummaryType } from './RoomsStatusSummaryType';
import {
    RoomsStatusSummaryTypeFromJSON,
    RoomsStatusSummaryTypeFromJSONTyped,
    RoomsStatusSummaryTypeToJSON,
} from './RoomsStatusSummaryType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * It also contains Success,Warnings and Errors related to this operation.
 * @export
 * @interface BlockRoomsStatus
 */
export interface BlockRoomsStatus {
    /**
     * 
     * @type {RoomsStatusSummaryType}
     * @memberof BlockRoomsStatus
     */
    roomsStatusSummary?: RoomsStatusSummaryType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof BlockRoomsStatus
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockRoomsStatus
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the BlockRoomsStatus interface.
 */
export function instanceOfBlockRoomsStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockRoomsStatusFromJSON(json: any): BlockRoomsStatus {
    return BlockRoomsStatusFromJSONTyped(json, false);
}

export function BlockRoomsStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockRoomsStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomsStatusSummary': !exists(json, 'roomsStatusSummary') ? undefined : RoomsStatusSummaryTypeFromJSON(json['roomsStatusSummary']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function BlockRoomsStatusToJSON(value?: BlockRoomsStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomsStatusSummary': RoomsStatusSummaryTypeToJSON(value.roomsStatusSummary),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

