/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RelationshipProfileType } from './RelationshipProfileType';
import {
    RelationshipProfileTypeFromJSON,
    RelationshipProfileTypeFromJSONTyped,
    RelationshipProfileTypeToJSON,
} from './RelationshipProfileType';

/**
 * Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
 * @export
 * @interface RelationshipInfoType
 */
export interface RelationshipInfoType {
    /**
     * 
     * @type {RelationshipProfileType}
     * @memberof RelationshipInfoType
     */
    relationshipProfile?: RelationshipProfileType;
    /**
     * Relationship identifier.
     * @type {string}
     * @memberof RelationshipInfoType
     */
    id?: string;
    /**
     * Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
     * @type {string}
     * @memberof RelationshipInfoType
     */
    relation?: string;
    /**
     * Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
     * @type {string}
     * @memberof RelationshipInfoType
     */
    targetRelation?: string;
}

/**
 * Check if a given object implements the RelationshipInfoType interface.
 */
export function instanceOfRelationshipInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RelationshipInfoTypeFromJSON(json: any): RelationshipInfoType {
    return RelationshipInfoTypeFromJSONTyped(json, false);
}

export function RelationshipInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationshipInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'relationshipProfile': !exists(json, 'relationshipProfile') ? undefined : RelationshipProfileTypeFromJSON(json['relationshipProfile']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'relation': !exists(json, 'relation') ? undefined : json['relation'],
        'targetRelation': !exists(json, 'targetRelation') ? undefined : json['targetRelation'],
    };
}

export function RelationshipInfoTypeToJSON(value?: RelationshipInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'relationshipProfile': RelationshipProfileTypeToJSON(value.relationshipProfile),
        'id': value.id,
        'relation': value.relation,
        'targetRelation': value.targetRelation,
    };
}

