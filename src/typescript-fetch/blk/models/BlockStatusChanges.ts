/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockStatusChangesDetailType } from './BlockStatusChangesDetailType';
import {
    BlockStatusChangesDetailTypeFromJSON,
    BlockStatusChangesDetailTypeFromJSONTyped,
    BlockStatusChangesDetailTypeToJSON,
} from './BlockStatusChangesDetailType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object to fetch Status Logs for blocks.
 * @export
 * @interface BlockStatusChanges
 */
export interface BlockStatusChanges {
    /**
     * Block Status Changes Details
     * @type {Array<BlockStatusChangesDetailType>}
     * @memberof BlockStatusChanges
     */
    blockStatusChanges?: Array<BlockStatusChangesDetailType>;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof BlockStatusChanges
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof BlockStatusChanges
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof BlockStatusChanges
     */
    limit?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof BlockStatusChanges
     */
    links?: Array<InstanceLink>;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof BlockStatusChanges
     */
    offset?: number;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof BlockStatusChanges
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof BlockStatusChanges
     */
    totalResults?: number;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockStatusChanges
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the BlockStatusChanges interface.
 */
export function instanceOfBlockStatusChanges(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockStatusChangesFromJSON(json: any): BlockStatusChanges {
    return BlockStatusChangesFromJSONTyped(json, false);
}

export function BlockStatusChangesFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatusChanges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockStatusChanges': !exists(json, 'blockStatusChanges') ? undefined : ((json['blockStatusChanges'] as Array<any>).map(BlockStatusChangesDetailTypeFromJSON)),
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function BlockStatusChangesToJSON(value?: BlockStatusChanges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockStatusChanges': value.blockStatusChanges === undefined ? undefined : ((value.blockStatusChanges as Array<any>).map(BlockStatusChangesDetailTypeToJSON)),
        'count': value.count,
        'hasMore': value.hasMore,
        'limit': value.limit,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'offset': value.offset,
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

