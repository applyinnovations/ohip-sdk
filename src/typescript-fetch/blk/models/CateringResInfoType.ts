/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventId } from './EventId';
import {
    EventIdFromJSON,
    EventIdFromJSONTyped,
    EventIdToJSON,
} from './EventId';

/**
 * Information regarding catering event and catering revenue type associated to the reservation.
 * @export
 * @interface CateringResInfoType
 */
export interface CateringResInfoType {
    /**
     * 
     * @type {EventId}
     * @memberof CateringResInfoType
     */
    eventId?: EventId;
    /**
     * Catering revenue type associated to the reservation.
     * @type {string}
     * @memberof CateringResInfoType
     */
    revenueType?: string;
}

/**
 * Check if a given object implements the CateringResInfoType interface.
 */
export function instanceOfCateringResInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringResInfoTypeFromJSON(json: any): CateringResInfoType {
    return CateringResInfoTypeFromJSONTyped(json, false);
}

export function CateringResInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringResInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventId': !exists(json, 'eventId') ? undefined : EventIdFromJSON(json['eventId']),
        'revenueType': !exists(json, 'revenueType') ? undefined : json['revenueType'],
    };
}

export function CateringResInfoTypeToJSON(value?: CateringResInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventId': EventIdToJSON(value.eventId),
        'revenueType': value.revenueType,
    };
}

