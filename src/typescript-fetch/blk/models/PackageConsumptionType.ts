/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Package Consumption Information. Includes information on quantity of the package used, allowance consumption etc.
 * @export
 * @interface PackageConsumptionType
 */
export interface PackageConsumptionType {
    /**
     * Indicates if Allowance(for POS packages) has been consumed/posted for today.
     * @type {boolean}
     * @memberof PackageConsumptionType
     */
    allowanceConsumed?: boolean;
    /**
     * The default quantity attached in the package.
     * @type {number}
     * @memberof PackageConsumptionType
     */
    defaultQuantity?: number;
    /**
     * The quantity which has been excluded in the package.
     * @type {number}
     * @memberof PackageConsumptionType
     */
    excludedQuantity?: number;
    /**
     * The total quantity of the package, calculated based on the calculation rule as defined in the PackageHeaderType.
     * @type {number}
     * @memberof PackageConsumptionType
     */
    totalQuantity?: number;
}

/**
 * Check if a given object implements the PackageConsumptionType interface.
 */
export function instanceOfPackageConsumptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PackageConsumptionTypeFromJSON(json: any): PackageConsumptionType {
    return PackageConsumptionTypeFromJSONTyped(json, false);
}

export function PackageConsumptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackageConsumptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowanceConsumed': !exists(json, 'allowanceConsumed') ? undefined : json['allowanceConsumed'],
        'defaultQuantity': !exists(json, 'defaultQuantity') ? undefined : json['defaultQuantity'],
        'excludedQuantity': !exists(json, 'excludedQuantity') ? undefined : json['excludedQuantity'],
        'totalQuantity': !exists(json, 'totalQuantity') ? undefined : json['totalQuantity'],
    };
}

export function PackageConsumptionTypeToJSON(value?: PackageConsumptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowanceConsumed': value.allowanceConsumed,
        'defaultQuantity': value.defaultQuantity,
        'excludedQuantity': value.excludedQuantity,
        'totalQuantity': value.totalQuantity,
    };
}

