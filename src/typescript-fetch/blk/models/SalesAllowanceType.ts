/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SalesAllowanceIDType } from './SalesAllowanceIDType';
import {
    SalesAllowanceIDTypeFromJSON,
    SalesAllowanceIDTypeFromJSONTyped,
    SalesAllowanceIDTypeToJSON,
} from './SalesAllowanceIDType';

/**
 * A single sales allowances.
 * @export
 * @interface SalesAllowanceType
 */
export interface SalesAllowanceType {
    /**
     * Number of Room nights booked at a deduct status for the date.
     * @type {number}
     * @memberof SalesAllowanceType
     */
    allotmentDeductQty?: number;
    /**
     * Number of rooms still available on the Sales Allowance.
     * @type {number}
     * @memberof SalesAllowanceType
     */
    available?: number;
    /**
     * Number of Rooms booked against the Sales Allowance.
     * @type {number}
     * @memberof SalesAllowanceType
     */
    booked?: number;
    /**
     * Ceiling date for the Sales Allowance.
     * @type {string}
     * @memberof SalesAllowanceType
     */
    ceilingDate?: string;
    /**
     * 
     * @type {SalesAllowanceIDType}
     * @memberof SalesAllowanceType
     */
    ceilingId?: SalesAllowanceIDType;
    /**
     * Properties for which sales allowances exist.
     * @type {string}
     * @memberof SalesAllowanceType
     */
    hotelId?: string;
    /**
     * Number of rooms booked that is more than the allotted Sales Allowance.
     * @type {number}
     * @memberof SalesAllowanceType
     */
    overBooked?: number;
    /**
     * Number of Rooms allotted for the Sales Allowance.
     * @type {number}
     * @memberof SalesAllowanceType
     */
    salesAllowance?: number;
}

/**
 * Check if a given object implements the SalesAllowanceType interface.
 */
export function instanceOfSalesAllowanceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SalesAllowanceTypeFromJSON(json: any): SalesAllowanceType {
    return SalesAllowanceTypeFromJSONTyped(json, false);
}

export function SalesAllowanceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesAllowanceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allotmentDeductQty': !exists(json, 'allotmentDeductQty') ? undefined : json['allotmentDeductQty'],
        'available': !exists(json, 'available') ? undefined : json['available'],
        'booked': !exists(json, 'booked') ? undefined : json['booked'],
        'ceilingDate': !exists(json, 'ceilingDate') ? undefined : json['ceilingDate'],
        'ceilingId': !exists(json, 'ceilingId') ? undefined : SalesAllowanceIDTypeFromJSON(json['ceilingId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'overBooked': !exists(json, 'overBooked') ? undefined : json['overBooked'],
        'salesAllowance': !exists(json, 'salesAllowance') ? undefined : json['salesAllowance'],
    };
}

export function SalesAllowanceTypeToJSON(value?: SalesAllowanceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allotmentDeductQty': value.allotmentDeductQty,
        'available': value.available,
        'booked': value.booked,
        'ceilingDate': value.ceilingDate,
        'ceilingId': SalesAllowanceIDTypeToJSON(value.ceilingId),
        'hotelId': value.hotelId,
        'overBooked': value.overBooked,
        'salesAllowance': value.salesAllowance,
    };
}

