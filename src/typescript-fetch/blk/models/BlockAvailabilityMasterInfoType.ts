/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAvailabilityRatePlanInfo } from './BlockAvailabilityRatePlanInfo';
import {
    BlockAvailabilityRatePlanInfoFromJSON,
    BlockAvailabilityRatePlanInfoFromJSONTyped,
    BlockAvailabilityRatePlanInfoToJSON,
} from './BlockAvailabilityRatePlanInfo';
import type { BlockAvailabilityRoomTypeInfo } from './BlockAvailabilityRoomTypeInfo';
import {
    BlockAvailabilityRoomTypeInfoFromJSON,
    BlockAvailabilityRoomTypeInfoFromJSONTyped,
    BlockAvailabilityRoomTypeInfoToJSON,
} from './BlockAvailabilityRoomTypeInfo';
import type { CurrencyExchangeRateType } from './CurrencyExchangeRateType';
import {
    CurrencyExchangeRateTypeFromJSON,
    CurrencyExchangeRateTypeFromJSONTyped,
    CurrencyExchangeRateTypeToJSON,
} from './CurrencyExchangeRateType';

/**
 * Holds master information for block availability.
 * @export
 * @interface BlockAvailabilityMasterInfoType
 */
export interface BlockAvailabilityMasterInfoType {
    /**
     * Currency exchange rate information.
     * @type {Array<CurrencyExchangeRateType>}
     * @memberof BlockAvailabilityMasterInfoType
     */
    currencyExchangeRates?: Array<CurrencyExchangeRateType>;
    /**
     * Details pertaining to a room type.
     * @type {Array<BlockAvailabilityRoomTypeInfo>}
     * @memberof BlockAvailabilityMasterInfoType
     */
    fetchedRoomTypes?: Array<BlockAvailabilityRoomTypeInfo>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BlockAvailabilityMasterInfoType
     */
    masterRoomTypes?: Array<string>;
    /**
     * Rate plan code details for the block.
     * @type {Array<BlockAvailabilityRatePlanInfo>}
     * @memberof BlockAvailabilityMasterInfoType
     */
    ratePlans?: Array<BlockAvailabilityRatePlanInfo>;
}

/**
 * Check if a given object implements the BlockAvailabilityMasterInfoType interface.
 */
export function instanceOfBlockAvailabilityMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAvailabilityMasterInfoTypeFromJSON(json: any): BlockAvailabilityMasterInfoType {
    return BlockAvailabilityMasterInfoTypeFromJSONTyped(json, false);
}

export function BlockAvailabilityMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAvailabilityMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyExchangeRates': !exists(json, 'currencyExchangeRates') ? undefined : ((json['currencyExchangeRates'] as Array<any>).map(CurrencyExchangeRateTypeFromJSON)),
        'fetchedRoomTypes': !exists(json, 'fetchedRoomTypes') ? undefined : ((json['fetchedRoomTypes'] as Array<any>).map(BlockAvailabilityRoomTypeInfoFromJSON)),
        'masterRoomTypes': !exists(json, 'masterRoomTypes') ? undefined : json['masterRoomTypes'],
        'ratePlans': !exists(json, 'ratePlans') ? undefined : ((json['ratePlans'] as Array<any>).map(BlockAvailabilityRatePlanInfoFromJSON)),
    };
}

export function BlockAvailabilityMasterInfoTypeToJSON(value?: BlockAvailabilityMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currencyExchangeRates': value.currencyExchangeRates === undefined ? undefined : ((value.currencyExchangeRates as Array<any>).map(CurrencyExchangeRateTypeToJSON)),
        'fetchedRoomTypes': value.fetchedRoomTypes === undefined ? undefined : ((value.fetchedRoomTypes as Array<any>).map(BlockAvailabilityRoomTypeInfoToJSON)),
        'masterRoomTypes': value.masterRoomTypes,
        'ratePlans': value.ratePlans === undefined ? undefined : ((value.ratePlans as Array<any>).map(BlockAvailabilityRatePlanInfoToJSON)),
    };
}

