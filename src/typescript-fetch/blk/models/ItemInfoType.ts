/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { TimeWindowType } from './TimeWindowType';
import {
    TimeWindowTypeFromJSON,
    TimeWindowTypeFromJSONTyped,
    TimeWindowTypeToJSON,
} from './TimeWindowType';

/**
 * Basic information regarding an Item.
 * @export
 * @interface ItemInfoType
 */
export interface ItemInfoType {
    /**
     * 
     * @type {TimeWindowType}
     * @memberof ItemInfoType
     */
    availabilityPeriod?: TimeWindowType;
    /**
     * Item Code.
     * @type {string}
     * @memberof ItemInfoType
     */
    code?: string;
    /**
     * Define the default duration in days when booking the item.
     * @type {number}
     * @memberof ItemInfoType
     */
    defaultDuration?: number;
    /**
     * Detail description of an item.
     * @type {string}
     * @memberof ItemInfoType
     */
    description?: string;
    /**
     * If true indicates that item has fixed charge when it is attached to a reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    fixedCharge?: boolean;
    /**
     * ID reference for the hold Item
     * @type {number}
     * @memberof ItemInfoType
     */
    itemHoldId?: number;
    /**
     * Indicates if it is an item pool. Not applicable for Item within the Item Pool.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    itemPool?: boolean;
    /**
     * Name of an item.
     * @type {string}
     * @memberof ItemInfoType
     */
    name?: string;
    /**
     * If true indicates that item could be held outside of the reservation stay days.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    outsideStay?: boolean;
    /**
     * Quantity of hold Item
     * @type {number}
     * @memberof ItemInfoType
     */
    quantity?: number;
    /**
     * If true indicates that item is required for the reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    requiredForBooking?: boolean;
    /**
     * If true indicates that item can be sold in event.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellInEvent?: boolean;
    /**
     * If true indicates that item can be sold in reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellInReservation?: boolean;
    /**
     * If true indicates that item is allowed to sell separately.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellSeparate?: boolean;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof ItemInfoType
     */
    timeSpan?: TimeSpanType;
}

/**
 * Check if a given object implements the ItemInfoType interface.
 */
export function instanceOfItemInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemInfoTypeFromJSON(json: any): ItemInfoType {
    return ItemInfoTypeFromJSONTyped(json, false);
}

export function ItemInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availabilityPeriod': !exists(json, 'availabilityPeriod') ? undefined : TimeWindowTypeFromJSON(json['availabilityPeriod']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'defaultDuration': !exists(json, 'defaultDuration') ? undefined : json['defaultDuration'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'fixedCharge': !exists(json, 'fixedCharge') ? undefined : json['fixedCharge'],
        'itemHoldId': !exists(json, 'itemHoldId') ? undefined : json['itemHoldId'],
        'itemPool': !exists(json, 'itemPool') ? undefined : json['itemPool'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'outsideStay': !exists(json, 'outsideStay') ? undefined : json['outsideStay'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'requiredForBooking': !exists(json, 'requiredForBooking') ? undefined : json['requiredForBooking'],
        'sellInEvent': !exists(json, 'sellInEvent') ? undefined : json['sellInEvent'],
        'sellInReservation': !exists(json, 'sellInReservation') ? undefined : json['sellInReservation'],
        'sellSeparate': !exists(json, 'sellSeparate') ? undefined : json['sellSeparate'],
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
    };
}

export function ItemInfoTypeToJSON(value?: ItemInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availabilityPeriod': TimeWindowTypeToJSON(value.availabilityPeriod),
        'code': value.code,
        'defaultDuration': value.defaultDuration,
        'description': value.description,
        'fixedCharge': value.fixedCharge,
        'itemHoldId': value.itemHoldId,
        'itemPool': value.itemPool,
        'name': value.name,
        'outsideStay': value.outsideStay,
        'quantity': value.quantity,
        'requiredForBooking': value.requiredForBooking,
        'sellInEvent': value.sellInEvent,
        'sellInReservation': value.sellInReservation,
        'sellSeparate': value.sellSeparate,
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
    };
}

