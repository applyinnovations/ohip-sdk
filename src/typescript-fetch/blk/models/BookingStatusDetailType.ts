/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockCancellationTypeType } from './BlockCancellationTypeType';
import {
    BlockCancellationTypeTypeFromJSON,
    BlockCancellationTypeTypeFromJSONTyped,
    BlockCancellationTypeTypeToJSON,
} from './BlockCancellationTypeType';
import type { BlockStatusTypeType } from './BlockStatusTypeType';
import {
    BlockStatusTypeTypeFromJSON,
    BlockStatusTypeTypeFromJSONTyped,
    BlockStatusTypeTypeToJSON,
} from './BlockStatusTypeType';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';

/**
 * Booking Status details of the business block.
 * @export
 * @interface BookingStatusDetailType
 */
export interface BookingStatusDetailType {
    /**
     * Indicates if business blocks with this status will be allowed for pickup or not.
     * @type {boolean}
     * @memberof BookingStatusDetailType
     */
    allowPickup?: boolean;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof BookingStatusDetailType
     */
    bookingStatus?: BookingStatusType;
    /**
     * 
     * @type {BlockCancellationTypeType}
     * @memberof BookingStatusDetailType
     */
    cancellationType?: BlockCancellationTypeType;
    /**
     * Indicates if catering event's spaces are deducted from inventory
     * @type {boolean}
     * @memberof BookingStatusDetailType
     */
    catDeductInventory?: boolean;
    /**
     * 
     * @type {BlockStatusTypeType}
     * @memberof BookingStatusDetailType
     */
    catStatusType?: BlockStatusTypeType;
    /**
     * Indicates if blocked rooms are deducted from inventory.
     * @type {boolean}
     * @memberof BookingStatusDetailType
     */
    deductInventory?: boolean;
    /**
     * Default reservation type for the booking status.
     * @type {string}
     * @memberof BookingStatusDetailType
     */
    defaultReservationType?: string;
    /**
     * Parent status of the booking status, if one exists.
     * @type {string}
     * @memberof BookingStatusDetailType
     */
    parentBookingStatus?: string;
    /**
     * Indicates if blocked rooms will be returned to availability or not.
     * @type {boolean}
     * @memberof BookingStatusDetailType
     */
    returnToInventory?: boolean;
    /**
     * 
     * @type {BlockStatusTypeType}
     * @memberof BookingStatusDetailType
     */
    statusType?: BlockStatusTypeType;
}

/**
 * Check if a given object implements the BookingStatusDetailType interface.
 */
export function instanceOfBookingStatusDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BookingStatusDetailTypeFromJSON(json: any): BookingStatusDetailType {
    return BookingStatusDetailTypeFromJSONTyped(json, false);
}

export function BookingStatusDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookingStatusDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowPickup': !exists(json, 'allowPickup') ? undefined : json['allowPickup'],
        'bookingStatus': !exists(json, 'bookingStatus') ? undefined : BookingStatusTypeFromJSON(json['bookingStatus']),
        'cancellationType': !exists(json, 'cancellationType') ? undefined : BlockCancellationTypeTypeFromJSON(json['cancellationType']),
        'catDeductInventory': !exists(json, 'catDeductInventory') ? undefined : json['catDeductInventory'],
        'catStatusType': !exists(json, 'catStatusType') ? undefined : BlockStatusTypeTypeFromJSON(json['catStatusType']),
        'deductInventory': !exists(json, 'deductInventory') ? undefined : json['deductInventory'],
        'defaultReservationType': !exists(json, 'defaultReservationType') ? undefined : json['defaultReservationType'],
        'parentBookingStatus': !exists(json, 'parentBookingStatus') ? undefined : json['parentBookingStatus'],
        'returnToInventory': !exists(json, 'returnToInventory') ? undefined : json['returnToInventory'],
        'statusType': !exists(json, 'statusType') ? undefined : BlockStatusTypeTypeFromJSON(json['statusType']),
    };
}

export function BookingStatusDetailTypeToJSON(value?: BookingStatusDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowPickup': value.allowPickup,
        'bookingStatus': BookingStatusTypeToJSON(value.bookingStatus),
        'cancellationType': BlockCancellationTypeTypeToJSON(value.cancellationType),
        'catDeductInventory': value.catDeductInventory,
        'catStatusType': BlockStatusTypeTypeToJSON(value.catStatusType),
        'deductInventory': value.deductInventory,
        'defaultReservationType': value.defaultReservationType,
        'parentBookingStatus': value.parentBookingStatus,
        'returnToInventory': value.returnToInventory,
        'statusType': BlockStatusTypeTypeToJSON(value.statusType),
    };
}

