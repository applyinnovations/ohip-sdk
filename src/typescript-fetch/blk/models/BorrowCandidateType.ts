/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { BorrowableInventoryType } from './BorrowableInventoryType';
import {
    BorrowableInventoryTypeFromJSON,
    BorrowableInventoryTypeFromJSONTyped,
    BorrowableInventoryTypeToJSON,
} from './BorrowableInventoryType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * This contains a collection of all dates and required rooms. It also contains the borrow candidates which could be room types or house.
 * @export
 * @interface BorrowCandidateType
 */
export interface BorrowCandidateType {
    /**
     * 
     * @type {BlockId}
     * @memberof BorrowCandidateType
     */
    blockId?: BlockId;
    /**
     * The date on which rooms need to be borrowed for the block.
     * @type {string}
     * @memberof BorrowCandidateType
     */
    borrowDate?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BorrowCandidateType
     */
    existingReservationId?: UniqueIDType;
    /**
     * The number of rooms that need to be borrowed.
     * @type {number}
     * @memberof BorrowCandidateType
     */
    requiredRooms?: number;
    /**
     * Holds the information about a borrowable room type and available rooms for each borrow date.
     * @type {Array<BorrowableInventoryType>}
     * @memberof BorrowCandidateType
     */
    borrowableInventoryList?: Array<BorrowableInventoryType>;
    /**
     * Specifies the hotel that the block belongs to.
     * @type {string}
     * @memberof BorrowCandidateType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the BorrowCandidateType interface.
 */
export function instanceOfBorrowCandidateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BorrowCandidateTypeFromJSON(json: any): BorrowCandidateType {
    return BorrowCandidateTypeFromJSONTyped(json, false);
}

export function BorrowCandidateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BorrowCandidateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'borrowDate': !exists(json, 'borrowDate') ? undefined : json['borrowDate'],
        'existingReservationId': !exists(json, 'existingReservationId') ? undefined : UniqueIDTypeFromJSON(json['existingReservationId']),
        'requiredRooms': !exists(json, 'requiredRooms') ? undefined : json['requiredRooms'],
        'borrowableInventoryList': !exists(json, 'borrowableInventoryList') ? undefined : ((json['borrowableInventoryList'] as Array<any>).map(BorrowableInventoryTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function BorrowCandidateTypeToJSON(value?: BorrowCandidateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockId': BlockIdToJSON(value.blockId),
        'borrowDate': value.borrowDate,
        'existingReservationId': UniqueIDTypeToJSON(value.existingReservationId),
        'requiredRooms': value.requiredRooms,
        'borrowableInventoryList': value.borrowableInventoryList === undefined ? undefined : ((value.borrowableInventoryList as Array<any>).map(BorrowableInventoryTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

