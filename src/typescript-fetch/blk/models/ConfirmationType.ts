/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfDeliveryInfoType } from './ConfDeliveryInfoType';
import {
    ConfDeliveryInfoTypeFromJSON,
    ConfDeliveryInfoTypeFromJSONTyped,
    ConfDeliveryInfoTypeToJSON,
} from './ConfDeliveryInfoType';
import type { ConfRecipientInfoType } from './ConfRecipientInfoType';
import {
    ConfRecipientInfoTypeFromJSON,
    ConfRecipientInfoTypeFromJSONTyped,
    ConfRecipientInfoTypeToJSON,
} from './ConfRecipientInfoType';
import type { ConfirmationStyle } from './ConfirmationStyle';
import {
    ConfirmationStyleFromJSON,
    ConfirmationStyleFromJSONTyped,
    ConfirmationStyleToJSON,
} from './ConfirmationStyle';

/**
 * 
 * @export
 * @interface ConfirmationType
 */
export interface ConfirmationType {
    /**
     * 
     * @type {ConfirmationStyle}
     * @memberof ConfirmationType
     */
    confirmationStyleInfo?: ConfirmationStyle;
    /**
     * List of confirmation letter delivery methods and their status
     * @type {Array<ConfDeliveryInfoType>}
     * @memberof ConfirmationType
     */
    deliveryInfo?: Array<ConfDeliveryInfoType>;
    /**
     * Senders Email address.
     * @type {string}
     * @memberof ConfirmationType
     */
    fromEmail?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof ConfirmationType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof ConfirmationType
     */
    idContext?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof ConfirmationType
     */
    idExtension?: number;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof ConfirmationType
     */
    instance?: string;
    /**
     * 
     * @type {ConfRecipientInfoType}
     * @memberof ConfirmationType
     */
    recipientInfo?: ConfRecipientInfoType;
    /**
     * Flag to indicate sending confirmation letter as text message.
     * @type {boolean}
     * @memberof ConfirmationType
     */
    sendTextMessage?: boolean;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof ConfirmationType
     */
    type?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof ConfirmationType
     */
    url?: string;
}

/**
 * Check if a given object implements the ConfirmationType interface.
 */
export function instanceOfConfirmationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfirmationTypeFromJSON(json: any): ConfirmationType {
    return ConfirmationTypeFromJSONTyped(json, false);
}

export function ConfirmationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfirmationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confirmationStyleInfo': !exists(json, 'confirmationStyleInfo') ? undefined : ConfirmationStyleFromJSON(json['confirmationStyleInfo']),
        'deliveryInfo': !exists(json, 'deliveryInfo') ? undefined : ((json['deliveryInfo'] as Array<any>).map(ConfDeliveryInfoTypeFromJSON)),
        'fromEmail': !exists(json, 'fromEmail') ? undefined : json['fromEmail'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'recipientInfo': !exists(json, 'recipientInfo') ? undefined : ConfRecipientInfoTypeFromJSON(json['recipientInfo']),
        'sendTextMessage': !exists(json, 'sendTextMessage') ? undefined : json['sendTextMessage'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ConfirmationTypeToJSON(value?: ConfirmationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confirmationStyleInfo': ConfirmationStyleToJSON(value.confirmationStyleInfo),
        'deliveryInfo': value.deliveryInfo === undefined ? undefined : ((value.deliveryInfo as Array<any>).map(ConfDeliveryInfoTypeToJSON)),
        'fromEmail': value.fromEmail,
        'id': value.id,
        'idContext': value.idContext,
        'idExtension': value.idExtension,
        'instance': value.instance,
        'recipientInfo': ConfRecipientInfoTypeToJSON(value.recipientInfo),
        'sendTextMessage': value.sendTextMessage,
        'type': value.type,
        'url': value.url,
    };
}

