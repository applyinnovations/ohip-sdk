/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAvailabilityInfoType } from './BlockAvailabilityInfoType';
import {
    BlockAvailabilityInfoTypeFromJSON,
    BlockAvailabilityInfoTypeFromJSONTyped,
    BlockAvailabilityInfoTypeToJSON,
} from './BlockAvailabilityInfoType';
import type { BlockAvailabilityMasterInfoType } from './BlockAvailabilityMasterInfoType';
import {
    BlockAvailabilityMasterInfoTypeFromJSON,
    BlockAvailabilityMasterInfoTypeFromJSONTyped,
    BlockAvailabilityMasterInfoTypeToJSON,
} from './BlockAvailabilityMasterInfoType';
import type { BlockHeaderInfoType } from './BlockHeaderInfoType';
import {
    BlockHeaderInfoTypeFromJSON,
    BlockHeaderInfoTypeFromJSONTyped,
    BlockHeaderInfoTypeToJSON,
} from './BlockHeaderInfoType';
import type { BlockTotalAvailabilityInfoType } from './BlockTotalAvailabilityInfoType';
import {
    BlockTotalAvailabilityInfoTypeFromJSON,
    BlockTotalAvailabilityInfoTypeFromJSONTyped,
    BlockTotalAvailabilityInfoTypeToJSON,
} from './BlockTotalAvailabilityInfoType';

/**
 * Holds block availability information.
 * @export
 * @interface BlockAvailabilityType
 */
export interface BlockAvailabilityType {
    /**
     * 
     * @type {BlockAvailabilityMasterInfoType}
     * @memberof BlockAvailabilityType
     */
    blockAvailabilityMasterInfo?: BlockAvailabilityMasterInfoType;
    /**
     * 
     * @type {BlockHeaderInfoType}
     * @memberof BlockAvailabilityType
     */
    blockHeaderInfo?: BlockHeaderInfoType;
    /**
     * Provides room allocation/availability information for a stay date.
     * @type {Array<BlockAvailabilityInfoType>}
     * @memberof BlockAvailabilityType
     */
    blockAvailability?: Array<BlockAvailabilityInfoType>;
    /**
     * 
     * @type {BlockTotalAvailabilityInfoType}
     * @memberof BlockAvailabilityType
     */
    blockTotalAvailability?: BlockTotalAvailabilityInfoType;
    /**
     * 
     * @type {BlockTotalAvailabilityInfoType}
     * @memberof BlockAvailabilityType
     */
    blockTotalAvailabilityRooms?: BlockTotalAvailabilityInfoType;
}

/**
 * Check if a given object implements the BlockAvailabilityType interface.
 */
export function instanceOfBlockAvailabilityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAvailabilityTypeFromJSON(json: any): BlockAvailabilityType {
    return BlockAvailabilityTypeFromJSONTyped(json, false);
}

export function BlockAvailabilityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAvailabilityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAvailabilityMasterInfo': !exists(json, 'blockAvailabilityMasterInfo') ? undefined : BlockAvailabilityMasterInfoTypeFromJSON(json['blockAvailabilityMasterInfo']),
        'blockHeaderInfo': !exists(json, 'blockHeaderInfo') ? undefined : BlockHeaderInfoTypeFromJSON(json['blockHeaderInfo']),
        'blockAvailability': !exists(json, 'blockAvailability') ? undefined : ((json['blockAvailability'] as Array<any>).map(BlockAvailabilityInfoTypeFromJSON)),
        'blockTotalAvailability': !exists(json, 'blockTotalAvailability') ? undefined : BlockTotalAvailabilityInfoTypeFromJSON(json['blockTotalAvailability']),
        'blockTotalAvailabilityRooms': !exists(json, 'blockTotalAvailabilityRooms') ? undefined : BlockTotalAvailabilityInfoTypeFromJSON(json['blockTotalAvailabilityRooms']),
    };
}

export function BlockAvailabilityTypeToJSON(value?: BlockAvailabilityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAvailabilityMasterInfo': BlockAvailabilityMasterInfoTypeToJSON(value.blockAvailabilityMasterInfo),
        'blockHeaderInfo': BlockHeaderInfoTypeToJSON(value.blockHeaderInfo),
        'blockAvailability': value.blockAvailability === undefined ? undefined : ((value.blockAvailability as Array<any>).map(BlockAvailabilityInfoTypeToJSON)),
        'blockTotalAvailability': BlockTotalAvailabilityInfoTypeToJSON(value.blockTotalAvailability),
        'blockTotalAvailabilityRooms': BlockTotalAvailabilityInfoTypeToJSON(value.blockTotalAvailabilityRooms),
    };
}

