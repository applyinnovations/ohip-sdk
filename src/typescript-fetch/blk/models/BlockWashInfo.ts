/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockWashInfoType } from './BlockWashInfoType';
import {
    BlockWashInfoTypeFromJSON,
    BlockWashInfoTypeFromJSONTyped,
    BlockWashInfoTypeToJSON,
} from './BlockWashInfoType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Block information required for performing a wash operation on a block.
 * @export
 * @interface BlockWashInfo
 */
export interface BlockWashInfo {
    /**
     * 
     * @type {BlockWashInfoType}
     * @memberof BlockWashInfo
     */
    blockWashInformation?: BlockWashInfoType;
    /**
     * 
     * @type {Links}
     * @memberof BlockWashInfo
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof BlockWashInfo
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the BlockWashInfo interface.
 */
export function instanceOfBlockWashInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockWashInfoFromJSON(json: any): BlockWashInfo {
    return BlockWashInfoFromJSONTyped(json, false);
}

export function BlockWashInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockWashInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockWashInformation': !exists(json, 'blockWashInformation') ? undefined : BlockWashInfoTypeFromJSON(json['blockWashInformation']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function BlockWashInfoToJSON(value?: BlockWashInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockWashInformation': BlockWashInfoTypeToJSON(value.blockWashInformation),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

