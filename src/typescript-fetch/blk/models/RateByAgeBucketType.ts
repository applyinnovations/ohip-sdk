/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Rate amount by age bucket.
 * @export
 * @interface RateByAgeBucketType
 */
export interface RateByAgeBucketType {
    /**
     * Maximum age for age bucket.
     * @type {number}
     * @memberof RateByAgeBucketType
     */
    maximumAge?: number;
    /**
     * Minimum age for age bucket.
     * @type {number}
     * @memberof RateByAgeBucketType
     */
    minimumAge?: number;
    /**
     * Rate amount by age bucket.
     * @type {number}
     * @memberof RateByAgeBucketType
     */
    rateAmount?: number;
}

/**
 * Check if a given object implements the RateByAgeBucketType interface.
 */
export function instanceOfRateByAgeBucketType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateByAgeBucketTypeFromJSON(json: any): RateByAgeBucketType {
    return RateByAgeBucketTypeFromJSONTyped(json, false);
}

export function RateByAgeBucketTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateByAgeBucketType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maximumAge': !exists(json, 'maximumAge') ? undefined : json['maximumAge'],
        'minimumAge': !exists(json, 'minimumAge') ? undefined : json['minimumAge'],
        'rateAmount': !exists(json, 'rateAmount') ? undefined : json['rateAmount'],
    };
}

export function RateByAgeBucketTypeToJSON(value?: RateByAgeBucketType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maximumAge': value.maximumAge,
        'minimumAge': value.minimumAge,
        'rateAmount': value.rateAmount,
    };
}

