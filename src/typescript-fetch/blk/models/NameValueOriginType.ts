/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NameValueModuleType } from './NameValueModuleType';
import {
    NameValueModuleTypeFromJSON,
    NameValueModuleTypeFromJSONTyped,
    NameValueModuleTypeToJSON,
} from './NameValueModuleType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Contains origin details.
 * @export
 * @interface NameValueOriginType
 */
export interface NameValueOriginType {
    /**
     * Contains destination column for Origin.
     * @type {string}
     * @memberof NameValueOriginType
     */
    destination?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof NameValueOriginType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof NameValueOriginType
     */
    idContext?: string;
    /**
     * 
     * @type {NameValueModuleType}
     * @memberof NameValueOriginType
     */
    originName?: NameValueModuleType;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof NameValueOriginType
     */
    type?: string;
    /**
     * 
     * @type {WarningsType}
     * @memberof NameValueOriginType
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the NameValueOriginType interface.
 */
export function instanceOfNameValueOriginType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NameValueOriginTypeFromJSON(json: any): NameValueOriginType {
    return NameValueOriginTypeFromJSONTyped(json, false);
}

export function NameValueOriginTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NameValueOriginType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'destination': !exists(json, 'destination') ? undefined : json['destination'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'originName': !exists(json, 'originName') ? undefined : NameValueModuleTypeFromJSON(json['originName']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function NameValueOriginTypeToJSON(value?: NameValueOriginType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'destination': value.destination,
        'id': value.id,
        'idContext': value.idContext,
        'originName': NameValueModuleTypeToJSON(value.originName),
        'type': value.type,
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

