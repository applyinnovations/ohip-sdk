/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HSKStatCategoryCodeType } from './HSKStatCategoryCodeType';
import {
    HSKStatCategoryCodeTypeFromJSON,
    HSKStatCategoryCodeTypeFromJSONTyped,
    HSKStatCategoryCodeTypeToJSON,
} from './HSKStatCategoryCodeType';
import type { HSKStatSetType } from './HSKStatSetType';
import {
    HSKStatSetTypeFromJSON,
    HSKStatSetTypeFromJSONTyped,
    HSKStatSetTypeToJSON,
} from './HSKStatSetType';

/**
 * Defines the codes and corresponding categories for which the data in the other elements has been gathered.
 * @export
 * @interface HSKStatCategoryType
 */
export interface HSKStatCategoryType {
    /**
     * 
     * @type {string}
     * @memberof HSKStatCategoryType
     */
    description?: string;
    /**
     * 
     * @type {HSKStatCategoryCodeType}
     * @memberof HSKStatCategoryType
     */
    statCategoryCode?: HSKStatCategoryCodeType;
    /**
     * Defines where this statistical data is applied.
     * @type {string}
     * @memberof HSKStatCategoryType
     */
    statCode?: string;
    /**
     * Classification of the statistical data.
     * @type {string}
     * @memberof HSKStatCategoryType
     */
    statCodeClass?: string;
    /**
     * 
     * @type {Array<HSKStatSetType>}
     * @memberof HSKStatCategoryType
     */
    statSet?: Array<HSKStatSetType>;
}

/**
 * Check if a given object implements the HSKStatCategoryType interface.
 */
export function instanceOfHSKStatCategoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HSKStatCategoryTypeFromJSON(json: any): HSKStatCategoryType {
    return HSKStatCategoryTypeFromJSONTyped(json, false);
}

export function HSKStatCategoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HSKStatCategoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'statCategoryCode': !exists(json, 'statCategoryCode') ? undefined : HSKStatCategoryCodeTypeFromJSON(json['statCategoryCode']),
        'statCode': !exists(json, 'statCode') ? undefined : json['statCode'],
        'statCodeClass': !exists(json, 'statCodeClass') ? undefined : json['statCodeClass'],
        'statSet': !exists(json, 'statSet') ? undefined : ((json['statSet'] as Array<any>).map(HSKStatSetTypeFromJSON)),
    };
}

export function HSKStatCategoryTypeToJSON(value?: HSKStatCategoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'statCategoryCode': HSKStatCategoryCodeTypeToJSON(value.statCategoryCode),
        'statCode': value.statCode,
        'statCodeClass': value.statCodeClass,
        'statSet': value.statSet === undefined ? undefined : ((value.statSet as Array<any>).map(HSKStatSetTypeToJSON)),
    };
}

