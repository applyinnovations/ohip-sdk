/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SourceCodeInfoType
 */
export interface SourceCodeInfoType {
    /**
     * 
     * @type {string}
     * @memberof SourceCodeInfoType
     */
    sourceCode?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceCodeInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceCodeInfoType
     */
    sourceGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceCodeInfoType
     */
    description?: string;
}

/**
 * Check if a given object implements the SourceCodeInfoType interface.
 */
export function instanceOfSourceCodeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SourceCodeInfoTypeFromJSON(json: any): SourceCodeInfoType {
    return SourceCodeInfoTypeFromJSONTyped(json, false);
}

export function SourceCodeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SourceCodeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'sourceGroup': !exists(json, 'sourceGroup') ? undefined : json['sourceGroup'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function SourceCodeInfoTypeToJSON(value?: SourceCodeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceCode': value.sourceCode,
        'hotelId': value.hotelId,
        'sourceGroup': value.sourceGroup,
        'description': value.description,
    };
}

