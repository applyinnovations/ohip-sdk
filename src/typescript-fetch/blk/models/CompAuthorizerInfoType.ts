/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Authorizer Information
 * @export
 * @interface CompAuthorizerInfoType
 */
export interface CompAuthorizerInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompAuthorizerInfoType
     */
    authorizerId?: UniqueIDType;
    /**
     * Application user name of the authorizer
     * @type {string}
     * @memberof CompAuthorizerInfoType
     */
    authorizerUserName?: string;
    /**
     * Full name of the authorizer.
     * @type {string}
     * @memberof CompAuthorizerInfoType
     */
    authorizerName?: string;
}

/**
 * Check if a given object implements the CompAuthorizerInfoType interface.
 */
export function instanceOfCompAuthorizerInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompAuthorizerInfoTypeFromJSON(json: any): CompAuthorizerInfoType {
    return CompAuthorizerInfoTypeFromJSONTyped(json, false);
}

export function CompAuthorizerInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompAuthorizerInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizerId': !exists(json, 'authorizerId') ? undefined : UniqueIDTypeFromJSON(json['authorizerId']),
        'authorizerUserName': !exists(json, 'authorizerUserName') ? undefined : json['authorizerUserName'],
        'authorizerName': !exists(json, 'authorizerName') ? undefined : json['authorizerName'],
    };
}

export function CompAuthorizerInfoTypeToJSON(value?: CompAuthorizerInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizerId': UniqueIDTypeToJSON(value.authorizerId),
        'authorizerUserName': value.authorizerUserName,
        'authorizerName': value.authorizerName,
    };
}

