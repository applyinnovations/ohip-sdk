/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorType } from './ErrorType';
import {
    ErrorTypeFromJSON,
    ErrorTypeFromJSONTyped,
    ErrorTypeToJSON,
} from './ErrorType';
import type { HotelReservationType } from './HotelReservationType';
import {
    HotelReservationTypeFromJSON,
    HotelReservationTypeFromJSONTyped,
    HotelReservationTypeToJSON,
} from './HotelReservationType';
import type { RoutingInfoType } from './RoutingInfoType';
import {
    RoutingInfoTypeFromJSON,
    RoutingInfoTypeFromJSONTyped,
    RoutingInfoTypeToJSON,
} from './RoutingInfoType';

/**
 * This is used when changing block reservations in bulk.
 * @export
 * @interface RoomingListReservationType
 */
export interface RoomingListReservationType {
    /**
     * An error that occurred during the processing of a message.
     * @type {Array<ErrorType>}
     * @memberof RoomingListReservationType
     */
    errors?: Array<ErrorType>;
    /**
     * 
     * @type {HotelReservationType}
     * @memberof RoomingListReservationType
     */
    hotelReservation?: HotelReservationType;
    /**
     * Unique identifier that identifies the sequence of an individual rooming list reservation. The sequence will be maintained across every request and response.
     * @type {number}
     * @memberof RoomingListReservationType
     */
    roomingListSequence?: number;
    /**
     * A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
     * @type {Array<RoutingInfoType>}
     * @memberof RoomingListReservationType
     */
    routingInstructions?: Array<RoutingInfoType>;
    /**
     * Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors.
     * @type {object}
     * @memberof RoomingListReservationType
     */
    success?: object;
}

/**
 * Check if a given object implements the RoomingListReservationType interface.
 */
export function instanceOfRoomingListReservationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomingListReservationTypeFromJSON(json: any): RoomingListReservationType {
    return RoomingListReservationTypeFromJSONTyped(json, false);
}

export function RoomingListReservationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomingListReservationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorTypeFromJSON)),
        'hotelReservation': !exists(json, 'hotelReservation') ? undefined : HotelReservationTypeFromJSON(json['hotelReservation']),
        'roomingListSequence': !exists(json, 'roomingListSequence') ? undefined : json['roomingListSequence'],
        'routingInstructions': !exists(json, 'routingInstructions') ? undefined : ((json['routingInstructions'] as Array<any>).map(RoutingInfoTypeFromJSON)),
        'success': !exists(json, 'success') ? undefined : json['success'],
    };
}

export function RoomingListReservationTypeToJSON(value?: RoomingListReservationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorTypeToJSON)),
        'hotelReservation': HotelReservationTypeToJSON(value.hotelReservation),
        'roomingListSequence': value.roomingListSequence,
        'routingInstructions': value.routingInstructions === undefined ? undefined : ((value.routingInstructions as Array<any>).map(RoutingInfoTypeToJSON)),
        'success': value.success,
    };
}

