/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HSKStatCodeType } from './HSKStatCodeType';
import {
    HSKStatCodeTypeFromJSON,
    HSKStatCodeTypeFromJSONTyped,
    HSKStatCodeTypeToJSON,
} from './HSKStatCodeType';
import type { StatUnitCategoryType } from './StatUnitCategoryType';
import {
    StatUnitCategoryTypeFromJSON,
    StatUnitCategoryTypeFromJSONTyped,
    StatUnitCategoryTypeToJSON,
} from './StatUnitCategoryType';

/**
 * Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.
 * @export
 * @interface HSKStatType
 */
export interface HSKStatType {
    /**
     * 
     * @type {HSKStatCodeType}
     * @memberof HSKStatType
     */
    code?: HSKStatCodeType;
    /**
     * 
     * @type {StatUnitCategoryType}
     * @memberof HSKStatType
     */
    unitCategory?: StatUnitCategoryType;
    /**
     * Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.
     * @type {string}
     * @memberof HSKStatType
     */
    unitType?: string;
    /**
     * Statistical value.
     * @type {number}
     * @memberof HSKStatType
     */
    unitValue?: number;
}

/**
 * Check if a given object implements the HSKStatType interface.
 */
export function instanceOfHSKStatType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HSKStatTypeFromJSON(json: any): HSKStatType {
    return HSKStatTypeFromJSONTyped(json, false);
}

export function HSKStatTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HSKStatType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : HSKStatCodeTypeFromJSON(json['code']),
        'unitCategory': !exists(json, 'unitCategory') ? undefined : StatUnitCategoryTypeFromJSON(json['unitCategory']),
        'unitType': !exists(json, 'unitType') ? undefined : json['unitType'],
        'unitValue': !exists(json, 'unitValue') ? undefined : json['unitValue'],
    };
}

export function HSKStatTypeToJSON(value?: HSKStatType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': HSKStatCodeTypeToJSON(value.code),
        'unitCategory': StatUnitCategoryTypeToJSON(value.unitCategory),
        'unitType': value.unitType,
        'unitValue': value.unitValue,
    };
}

