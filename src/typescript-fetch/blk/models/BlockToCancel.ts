/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancelBlockType } from './CancelBlockType';
import {
    CancelBlockTypeFromJSON,
    CancelBlockTypeFromJSONTyped,
    CancelBlockTypeToJSON,
} from './CancelBlockType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Request object for block cancelation. This object contains unique identifiers (Block unique id, Block Code and Block Start Date ) to identify the block to be Canceled and the standard optional Opera Context element.
 * @export
 * @interface BlockToCancel
 */
export interface BlockToCancel {
    /**
     * 
     * @type {CancelBlockType}
     * @memberof BlockToCancel
     */
    cancelBlock?: CancelBlockType;
    /**
     * 
     * @type {Links}
     * @memberof BlockToCancel
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof BlockToCancel
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the BlockToCancel interface.
 */
export function instanceOfBlockToCancel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockToCancelFromJSON(json: any): BlockToCancel {
    return BlockToCancelFromJSONTyped(json, false);
}

export function BlockToCancelFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockToCancel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cancelBlock': !exists(json, 'cancelBlock') ? undefined : CancelBlockTypeFromJSON(json['cancelBlock']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function BlockToCancelToJSON(value?: BlockToCancel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cancelBlock': CancelBlockTypeToJSON(value.cancelBlock),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

