/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAccessExclusionMessageType } from './BlockAccessExclusionMessageType';
import {
    BlockAccessExclusionMessageTypeFromJSON,
    BlockAccessExclusionMessageTypeFromJSONTyped,
    BlockAccessExclusionMessageTypeToJSON,
} from './BlockAccessExclusionMessageType';
import type { BlockAccessExclusionType } from './BlockAccessExclusionType';
import {
    BlockAccessExclusionTypeFromJSON,
    BlockAccessExclusionTypeFromJSONTyped,
    BlockAccessExclusionTypeToJSON,
} from './BlockAccessExclusionType';

/**
 * List of all access exclusion permissions for this block.
 * @export
 * @interface BlockAccessExclusionBlockAccessExclusions
 */
export interface BlockAccessExclusionBlockAccessExclusions {
    /**
     * 
     * @type {Array<BlockAccessExclusionType>}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    blockAccessExclusion?: Array<BlockAccessExclusionType>;
    /**
     * 
     * @type {BlockAccessExclusionMessageType}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    accessExclusionMessage?: BlockAccessExclusionMessageType;
    /**
     * Hotel code to which the block belongs to.
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    hotelId?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    url?: string;
    /**
     * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    type?: string;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    instance?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    idContext?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    id?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    idExtension?: number;
    /**
     * Indicates whether to overlay the list of existing access exclusions with the new list.
     * @type {boolean}
     * @memberof BlockAccessExclusionBlockAccessExclusions
     */
    overlay?: boolean;
}

/**
 * Check if a given object implements the BlockAccessExclusionBlockAccessExclusions interface.
 */
export function instanceOfBlockAccessExclusionBlockAccessExclusions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAccessExclusionBlockAccessExclusionsFromJSON(json: any): BlockAccessExclusionBlockAccessExclusions {
    return BlockAccessExclusionBlockAccessExclusionsFromJSONTyped(json, false);
}

export function BlockAccessExclusionBlockAccessExclusionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAccessExclusionBlockAccessExclusions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAccessExclusion': !exists(json, 'blockAccessExclusion') ? undefined : ((json['blockAccessExclusion'] as Array<any>).map(BlockAccessExclusionTypeFromJSON)),
        'accessExclusionMessage': !exists(json, 'accessExclusionMessage') ? undefined : BlockAccessExclusionMessageTypeFromJSON(json['accessExclusionMessage']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'overlay': !exists(json, 'overlay') ? undefined : json['overlay'],
    };
}

export function BlockAccessExclusionBlockAccessExclusionsToJSON(value?: BlockAccessExclusionBlockAccessExclusions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAccessExclusion': value.blockAccessExclusion === undefined ? undefined : ((value.blockAccessExclusion as Array<any>).map(BlockAccessExclusionTypeToJSON)),
        'accessExclusionMessage': BlockAccessExclusionMessageTypeToJSON(value.accessExclusionMessage),
        'hotelId': value.hotelId,
        'url': value.url,
        'type': value.type,
        'instance': value.instance,
        'idContext': value.idContext,
        'id': value.id,
        'idExtension': value.idExtension,
        'overlay': value.overlay,
    };
}

