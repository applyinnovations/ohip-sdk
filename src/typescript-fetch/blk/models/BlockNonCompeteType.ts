/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DatesType } from './DatesType';
import {
    DatesTypeFromJSON,
    DatesTypeFromJSONTyped,
    DatesTypeToJSON,
} from './DatesType';
import type { RateProtectionType } from './RateProtectionType';
import {
    RateProtectionTypeFromJSON,
    RateProtectionTypeFromJSONTyped,
    RateProtectionTypeToJSON,
} from './RateProtectionType';

/**
 * Block Non Compete code information.
 * @export
 * @interface BlockNonCompeteType
 */
export interface BlockNonCompeteType {
    /**
     * 
     * @type {RateProtectionType}
     * @memberof BlockNonCompeteType
     */
    criteria?: RateProtectionType;
    /**
     * Specifies the Non-Compete Industry.>
     * @type {string}
     * @memberof BlockNonCompeteType
     */
    industry?: string;
    /**
     * Specifies the Non-Compete Industry description.>
     * @type {string}
     * @memberof BlockNonCompeteType
     */
    industryDescription?: string;
    /**
     * 
     * @type {DatesType}
     * @memberof BlockNonCompeteType
     */
    protectedDates?: DatesType;
}

/**
 * Check if a given object implements the BlockNonCompeteType interface.
 */
export function instanceOfBlockNonCompeteType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockNonCompeteTypeFromJSON(json: any): BlockNonCompeteType {
    return BlockNonCompeteTypeFromJSONTyped(json, false);
}

export function BlockNonCompeteTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockNonCompeteType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'criteria': !exists(json, 'criteria') ? undefined : RateProtectionTypeFromJSON(json['criteria']),
        'industry': !exists(json, 'industry') ? undefined : json['industry'],
        'industryDescription': !exists(json, 'industryDescription') ? undefined : json['industryDescription'],
        'protectedDates': !exists(json, 'protectedDates') ? undefined : DatesTypeFromJSON(json['protectedDates']),
    };
}

export function BlockNonCompeteTypeToJSON(value?: BlockNonCompeteType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'criteria': RateProtectionTypeToJSON(value.criteria),
        'industry': value.industry,
        'industryDescription': value.industryDescription,
        'protectedDates': DatesTypeToJSON(value.protectedDates),
    };
}

