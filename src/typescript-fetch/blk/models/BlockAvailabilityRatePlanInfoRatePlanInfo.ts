/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingChannelMappingType } from './BookingChannelMappingType';
import {
    BookingChannelMappingTypeFromJSON,
    BookingChannelMappingTypeFromJSONTyped,
    BookingChannelMappingTypeToJSON,
} from './BookingChannelMappingType';
import type { CancelPenaltyType } from './CancelPenaltyType';
import {
    CancelPenaltyTypeFromJSON,
    CancelPenaltyTypeFromJSONTyped,
    CancelPenaltyTypeToJSON,
} from './CancelPenaltyType';
import type { GuaranteeType } from './GuaranteeType';
import {
    GuaranteeTypeFromJSON,
    GuaranteeTypeFromJSONTyped,
    GuaranteeTypeToJSON,
} from './GuaranteeType';
import type { MealPlanCodeType } from './MealPlanCodeType';
import {
    MealPlanCodeTypeFromJSON,
    MealPlanCodeTypeFromJSONTyped,
    MealPlanCodeTypeToJSON,
} from './MealPlanCodeType';
import type { ProfileTypeType } from './ProfileTypeType';
import {
    ProfileTypeTypeFromJSON,
    ProfileTypeTypeFromJSONTyped,
    ProfileTypeTypeToJSON,
} from './ProfileTypeType';
import type { RatePlanChannelInfoType } from './RatePlanChannelInfoType';
import {
    RatePlanChannelInfoTypeFromJSON,
    RatePlanChannelInfoTypeFromJSONTyped,
    RatePlanChannelInfoTypeToJSON,
} from './RatePlanChannelInfoType';
import type { RatePlanCommissionType } from './RatePlanCommissionType';
import {
    RatePlanCommissionTypeFromJSON,
    RatePlanCommissionTypeFromJSONTyped,
    RatePlanCommissionTypeToJSON,
} from './RatePlanCommissionType';

/**
 * Rate Plan details.
 * @export
 * @interface BlockAvailabilityRatePlanInfoRatePlanInfo
 */
export interface BlockAvailabilityRatePlanInfoRatePlanInfo {
    /**
     * Booking Channel mapping for the Rate Plan Code.
     * @type {Array<BookingChannelMappingType>}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    bookingChannelMappings?: Array<BookingChannelMappingType>;
    /**
     * 
     * @type {CancelPenaltyType}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    cancelPenalty?: CancelPenaltyType;
    /**
     * Currency Code of the rate code.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    currencyCode?: string;
    /**
     * Description of the Rate Code.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    description?: string;
    /**
     * 
     * @type {GuaranteeType}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    guarantee?: GuaranteeType;
    /**
     * 
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    hotelId?: string;
    /**
     * Detail Information of the Rate Code.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    longInfo?: string;
    /**
     * Meal plan codes associated with the rate codes.
     * @type {Array<MealPlanCodeType>}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    mealPlans?: Array<MealPlanCodeType>;
    /**
     * 
     * @type {ProfileTypeType}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    negotiatedBy?: ProfileTypeType;
    /**
     * 
     * @type {RatePlanCommissionType}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    rateCommission?: RatePlanCommissionType;
    /**
     * 
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    ratePlanCategory?: string;
    /**
     * 
     * @type {RatePlanChannelInfoType}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    ratePlanChannelInfo?: RatePlanChannelInfoType;
    /**
     * 
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    ratePlanCode?: string;
    /**
     * All rate codes are associated with rate plan level ( or rate category )for Channels. So if rate plans are given in the request, get all rate codes associated with the rate plan level.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    ratePlanLevel?: string;
    /**
     * Indicates if service fee is included in the rate code amount.
     * @type {boolean}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    serviceFeeInclusive?: boolean;
    /**
     * Brief Information of the Rate Code.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    shortInfo?: string;
    /**
     * Indicates if tax is included in the rate code amount.
     * @type {boolean}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    taxInclusive?: boolean;
    /**
     * URL providing more information about the Rate Code.
     * @type {string}
     * @memberof BlockAvailabilityRatePlanInfoRatePlanInfo
     */
    webPage?: string;
}

/**
 * Check if a given object implements the BlockAvailabilityRatePlanInfoRatePlanInfo interface.
 */
export function instanceOfBlockAvailabilityRatePlanInfoRatePlanInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAvailabilityRatePlanInfoRatePlanInfoFromJSON(json: any): BlockAvailabilityRatePlanInfoRatePlanInfo {
    return BlockAvailabilityRatePlanInfoRatePlanInfoFromJSONTyped(json, false);
}

export function BlockAvailabilityRatePlanInfoRatePlanInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAvailabilityRatePlanInfoRatePlanInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelMappings': !exists(json, 'bookingChannelMappings') ? undefined : ((json['bookingChannelMappings'] as Array<any>).map(BookingChannelMappingTypeFromJSON)),
        'cancelPenalty': !exists(json, 'cancelPenalty') ? undefined : CancelPenaltyTypeFromJSON(json['cancelPenalty']),
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'guarantee': !exists(json, 'guarantee') ? undefined : GuaranteeTypeFromJSON(json['guarantee']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'longInfo': !exists(json, 'longInfo') ? undefined : json['longInfo'],
        'mealPlans': !exists(json, 'mealPlans') ? undefined : ((json['mealPlans'] as Array<any>).map(MealPlanCodeTypeFromJSON)),
        'negotiatedBy': !exists(json, 'negotiatedBy') ? undefined : ProfileTypeTypeFromJSON(json['negotiatedBy']),
        'rateCommission': !exists(json, 'rateCommission') ? undefined : RatePlanCommissionTypeFromJSON(json['rateCommission']),
        'ratePlanCategory': !exists(json, 'ratePlanCategory') ? undefined : json['ratePlanCategory'],
        'ratePlanChannelInfo': !exists(json, 'ratePlanChannelInfo') ? undefined : RatePlanChannelInfoTypeFromJSON(json['ratePlanChannelInfo']),
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'ratePlanLevel': !exists(json, 'ratePlanLevel') ? undefined : json['ratePlanLevel'],
        'serviceFeeInclusive': !exists(json, 'serviceFeeInclusive') ? undefined : json['serviceFeeInclusive'],
        'shortInfo': !exists(json, 'shortInfo') ? undefined : json['shortInfo'],
        'taxInclusive': !exists(json, 'taxInclusive') ? undefined : json['taxInclusive'],
        'webPage': !exists(json, 'webPage') ? undefined : json['webPage'],
    };
}

export function BlockAvailabilityRatePlanInfoRatePlanInfoToJSON(value?: BlockAvailabilityRatePlanInfoRatePlanInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelMappings': value.bookingChannelMappings === undefined ? undefined : ((value.bookingChannelMappings as Array<any>).map(BookingChannelMappingTypeToJSON)),
        'cancelPenalty': CancelPenaltyTypeToJSON(value.cancelPenalty),
        'currencyCode': value.currencyCode,
        'description': value.description,
        'guarantee': GuaranteeTypeToJSON(value.guarantee),
        'hotelId': value.hotelId,
        'longInfo': value.longInfo,
        'mealPlans': value.mealPlans === undefined ? undefined : ((value.mealPlans as Array<any>).map(MealPlanCodeTypeToJSON)),
        'negotiatedBy': ProfileTypeTypeToJSON(value.negotiatedBy),
        'rateCommission': RatePlanCommissionTypeToJSON(value.rateCommission),
        'ratePlanCategory': value.ratePlanCategory,
        'ratePlanChannelInfo': RatePlanChannelInfoTypeToJSON(value.ratePlanChannelInfo),
        'ratePlanCode': value.ratePlanCode,
        'ratePlanLevel': value.ratePlanLevel,
        'serviceFeeInclusive': value.serviceFeeInclusive,
        'shortInfo': value.shortInfo,
        'taxInclusive': value.taxInclusive,
        'webPage': value.webPage,
    };
}

