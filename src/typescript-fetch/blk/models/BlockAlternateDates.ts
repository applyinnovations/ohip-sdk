/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAlternateDateType } from './BlockAlternateDateType';
import {
    BlockAlternateDateTypeFromJSON,
    BlockAlternateDateTypeFromJSONTyped,
    BlockAlternateDateTypeToJSON,
} from './BlockAlternateDateType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object to create block alternate dates.
 * @export
 * @interface BlockAlternateDates
 */
export interface BlockAlternateDates {
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof BlockAlternateDates
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockAlternateDates
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * Contains a list of Block Alternate Dates.
     * @type {Array<BlockAlternateDateType>}
     * @memberof BlockAlternateDates
     */
    blockAlternateDates?: Array<BlockAlternateDateType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof BlockAlternateDates
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockAlternateDates
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the BlockAlternateDates interface.
 */
export function instanceOfBlockAlternateDates(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAlternateDatesFromJSON(json: any): BlockAlternateDates {
    return BlockAlternateDatesFromJSONTyped(json, false);
}

export function BlockAlternateDatesFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAlternateDates {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockAlternateDates': !exists(json, 'blockAlternateDates') ? undefined : ((json['blockAlternateDates'] as Array<any>).map(BlockAlternateDateTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function BlockAlternateDatesToJSON(value?: BlockAlternateDates | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockAlternateDates': value.blockAlternateDates === undefined ? undefined : ((value.blockAlternateDates as Array<any>).map(BlockAlternateDateTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

