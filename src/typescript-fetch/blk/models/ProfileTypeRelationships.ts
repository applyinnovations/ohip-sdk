/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RelationshipInfoType } from './RelationshipInfoType';
import {
    RelationshipInfoTypeFromJSON,
    RelationshipInfoTypeFromJSONTyped,
    RelationshipInfoTypeToJSON,
} from './RelationshipInfoType';

/**
 * Contains a collection of profiles that have a relationship with this profile.
 * @export
 * @interface ProfileTypeRelationships
 */
export interface ProfileTypeRelationships {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof ProfileTypeRelationships
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof ProfileTypeRelationships
     */
    hasMore?: boolean;
    /**
     * A collection of the profiles that have a relationship with this profile.
     * @type {Array<RelationshipInfoType>}
     * @memberof ProfileTypeRelationships
     */
    relationship?: Array<RelationshipInfoType>;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof ProfileTypeRelationships
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the ProfileTypeRelationships interface.
 */
export function instanceOfProfileTypeRelationships(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileTypeRelationshipsFromJSON(json: any): ProfileTypeRelationships {
    return ProfileTypeRelationshipsFromJSONTyped(json, false);
}

export function ProfileTypeRelationshipsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileTypeRelationships {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'relationship': !exists(json, 'relationship') ? undefined : ((json['relationship'] as Array<any>).map(RelationshipInfoTypeFromJSON)),
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function ProfileTypeRelationshipsToJSON(value?: ProfileTypeRelationships | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'relationship': value.relationship === undefined ? undefined : ((value.relationship as Array<any>).map(RelationshipInfoTypeToJSON)),
        'totalResults': value.totalResults,
    };
}

