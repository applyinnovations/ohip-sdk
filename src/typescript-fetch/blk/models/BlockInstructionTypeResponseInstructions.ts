/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockDetailInstructionType } from './BlockDetailInstructionType';
import {
    BlockDetailInstructionTypeFromJSON,
    BlockDetailInstructionTypeFromJSONTyped,
    BlockDetailInstructionTypeToJSON,
} from './BlockDetailInstructionType';

/**
 * Collection of instructions to be returned as a set of block information.
 * @export
 * @interface BlockInstructionTypeResponseInstructions
 */
export interface BlockInstructionTypeResponseInstructions {
    /**
     * If this value is set to TRUE, then the operation will only return for a Success or Failed flag.
     * @type {boolean}
     * @memberof BlockInstructionTypeResponseInstructions
     */
    confirmationOnly?: boolean;
    /**
     * 
     * @type {Array<BlockDetailInstructionType>}
     * @memberof BlockInstructionTypeResponseInstructions
     */
    responseInstruction?: Array<BlockDetailInstructionType>;
}

/**
 * Check if a given object implements the BlockInstructionTypeResponseInstructions interface.
 */
export function instanceOfBlockInstructionTypeResponseInstructions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockInstructionTypeResponseInstructionsFromJSON(json: any): BlockInstructionTypeResponseInstructions {
    return BlockInstructionTypeResponseInstructionsFromJSONTyped(json, false);
}

export function BlockInstructionTypeResponseInstructionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInstructionTypeResponseInstructions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confirmationOnly': !exists(json, 'confirmationOnly') ? undefined : json['confirmationOnly'],
        'responseInstruction': !exists(json, 'responseInstruction') ? undefined : ((json['responseInstruction'] as Array<any>).map(BlockDetailInstructionTypeFromJSON)),
    };
}

export function BlockInstructionTypeResponseInstructionsToJSON(value?: BlockInstructionTypeResponseInstructions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confirmationOnly': value.confirmationOnly,
        'responseInstruction': value.responseInstruction === undefined ? undefined : ((value.responseInstruction as Array<any>).map(BlockDetailInstructionTypeToJSON)),
    };
}

