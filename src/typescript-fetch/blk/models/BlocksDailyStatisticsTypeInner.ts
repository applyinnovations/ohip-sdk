/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockDailyStatisticsDatesType } from './BlockDailyStatisticsDatesType';
import {
    BlockDailyStatisticsDatesTypeFromJSON,
    BlockDailyStatisticsDatesTypeFromJSONTyped,
    BlockDailyStatisticsDatesTypeToJSON,
} from './BlockDailyStatisticsDatesType';
import type { BlockIdList } from './BlockIdList';
import {
    BlockIdListFromJSON,
    BlockIdListFromJSONTyped,
    BlockIdListToJSON,
} from './BlockIdList';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * 
 * @export
 * @interface BlocksDailyStatisticsTypeInner
 */
export interface BlocksDailyStatisticsTypeInner {
    /**
     * Block code for the block.
     * @type {string}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    blockCode?: string;
    /**
     * 
     * @type {BlockIdList}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    blockIdList?: BlockIdList;
    /**
     * Name of the block.
     * @type {string}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    blockName?: string;
    /**
     * The Hotel Code the block belongs to.
     * @type {string}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    hotelId?: string;
    /**
     * Collection of daily statistics per allotment date.
     * @type {Array<BlockDailyStatisticsDatesType>}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    stayDates?: Array<BlockDailyStatisticsDatesType>;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof BlocksDailyStatisticsTypeInner
     */
    timeSpan?: TimeSpanType;
}

/**
 * Check if a given object implements the BlocksDailyStatisticsTypeInner interface.
 */
export function instanceOfBlocksDailyStatisticsTypeInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlocksDailyStatisticsTypeInnerFromJSON(json: any): BlocksDailyStatisticsTypeInner {
    return BlocksDailyStatisticsTypeInnerFromJSONTyped(json, false);
}

export function BlocksDailyStatisticsTypeInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlocksDailyStatisticsTypeInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'blockIdList': !exists(json, 'blockIdList') ? undefined : BlockIdListFromJSON(json['blockIdList']),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'stayDates': !exists(json, 'stayDates') ? undefined : ((json['stayDates'] as Array<any>).map(BlockDailyStatisticsDatesTypeFromJSON)),
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
    };
}

export function BlocksDailyStatisticsTypeInnerToJSON(value?: BlocksDailyStatisticsTypeInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockCode': value.blockCode,
        'blockIdList': BlockIdListToJSON(value.blockIdList),
        'blockName': value.blockName,
        'hotelId': value.hotelId,
        'stayDates': value.stayDates === undefined ? undefined : ((value.stayDates as Array<any>).map(BlockDailyStatisticsDatesTypeToJSON)),
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
    };
}

