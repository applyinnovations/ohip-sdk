/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';

/**
 * This is used when creating a copy of a block.
 * @export
 * @interface NewBlockDetailsType
 */
export interface NewBlockDetailsType {
    /**
     * The hotel code of the new block.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    hotelId?: string;
    /**
     * The block code of the new block.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    blockCode?: string;
    /**
     * The start date of the new block.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    startDate?: string;
    /**
     * The booking status of the new block.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    blockStatus?: string;
    /**
     * Origin information of the block PMS/ORS/SC/SFA
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    blockOrigin?: string;
    /**
     * The value in this field will be applied as the catering status of the new Block and all its events.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    cateringStatus?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof NewBlockDetailsType
     */
    blockDatesRange?: DateRangeType;
    /**
     * 
     * @type {DateRangeType}
     * @memberof NewBlockDetailsType
     */
    sourceDateRangeToCopy?: DateRangeType;
    /**
     * This is the source grid type, like Original, Current, Pickup, which will be copied to the target Business Block.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    gridType?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewBlockDetailsType
     */
    gridCategory?: Array<string>;
    /**
     * Stores the value for no of attendees.
     * @type {number}
     * @memberof NewBlockDetailsType
     */
    attendees?: number;
    /**
     * This is used to pass the market code when a block copy is done to a different property.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    marketCode?: string;
    /**
     * This is used to pass the Source code when a block copy is done to a different property.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    sourceCode?: string;
    /**
     * This is used to pass the Source code when a block copy is done to a different property.
     * @type {string}
     * @memberof NewBlockDetailsType
     */
    rateCode?: string;
}

/**
 * Check if a given object implements the NewBlockDetailsType interface.
 */
export function instanceOfNewBlockDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NewBlockDetailsTypeFromJSON(json: any): NewBlockDetailsType {
    return NewBlockDetailsTypeFromJSONTyped(json, false);
}

export function NewBlockDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NewBlockDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'blockStatus': !exists(json, 'blockStatus') ? undefined : json['blockStatus'],
        'blockOrigin': !exists(json, 'blockOrigin') ? undefined : json['blockOrigin'],
        'cateringStatus': !exists(json, 'cateringStatus') ? undefined : json['cateringStatus'],
        'blockDatesRange': !exists(json, 'blockDatesRange') ? undefined : DateRangeTypeFromJSON(json['blockDatesRange']),
        'sourceDateRangeToCopy': !exists(json, 'sourceDateRangeToCopy') ? undefined : DateRangeTypeFromJSON(json['sourceDateRangeToCopy']),
        'gridType': !exists(json, 'gridType') ? undefined : json['gridType'],
        'gridCategory': !exists(json, 'gridCategory') ? undefined : json['gridCategory'],
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
    };
}

export function NewBlockDetailsTypeToJSON(value?: NewBlockDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockCode': value.blockCode,
        'startDate': value.startDate,
        'blockStatus': value.blockStatus,
        'blockOrigin': value.blockOrigin,
        'cateringStatus': value.cateringStatus,
        'blockDatesRange': DateRangeTypeToJSON(value.blockDatesRange),
        'sourceDateRangeToCopy': DateRangeTypeToJSON(value.sourceDateRangeToCopy),
        'gridType': value.gridType,
        'gridCategory': value.gridCategory,
        'attendees': value.attendees,
        'marketCode': value.marketCode,
        'sourceCode': value.sourceCode,
        'rateCode': value.rateCode,
    };
}

