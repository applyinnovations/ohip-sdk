/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SellMessageConfigType } from './SellMessageConfigType';
import {
    SellMessageConfigTypeFromJSON,
    SellMessageConfigTypeFromJSONTyped,
    SellMessageConfigTypeToJSON,
} from './SellMessageConfigType';

/**
 * The SellMessageConfigsType is the list of sell messages, each comprising of all the sell message attributes and other details.
 * @export
 * @interface SellMessageConfigsType
 */
export interface SellMessageConfigsType {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof SellMessageConfigsType
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof SellMessageConfigsType
     */
    hasMore?: boolean;
    /**
     * 
     * @type {Array<SellMessageConfigType>}
     * @memberof SellMessageConfigsType
     */
    sellMessageConfig?: Array<SellMessageConfigType>;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof SellMessageConfigsType
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the SellMessageConfigsType interface.
 */
export function instanceOfSellMessageConfigsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SellMessageConfigsTypeFromJSON(json: any): SellMessageConfigsType {
    return SellMessageConfigsTypeFromJSONTyped(json, false);
}

export function SellMessageConfigsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SellMessageConfigsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'sellMessageConfig': !exists(json, 'sellMessageConfig') ? undefined : ((json['sellMessageConfig'] as Array<any>).map(SellMessageConfigTypeFromJSON)),
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function SellMessageConfigsTypeToJSON(value?: SellMessageConfigsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'sellMessageConfig': value.sellMessageConfig === undefined ? undefined : ((value.sellMessageConfig as Array<any>).map(SellMessageConfigTypeToJSON)),
        'totalResults': value.totalResults,
    };
}

