/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockRatePlanInfoType } from './BlockRatePlanInfoType';
import {
    BlockRatePlanInfoTypeFromJSON,
    BlockRatePlanInfoTypeFromJSONTyped,
    BlockRatePlanInfoTypeToJSON,
} from './BlockRatePlanInfoType';

/**
 * The shoulder rate plans which cover the block shoulder start and end dates.
 * @export
 * @interface BlockDetailsTypeShoulderRatePlanCode
 */
export interface BlockDetailsTypeShoulderRatePlanCode {
    /**
     * The Rate Plan(s) for the days between the actual block end date and the shoulder end date.
     * @type {Array<BlockRatePlanInfoType>}
     * @memberof BlockDetailsTypeShoulderRatePlanCode
     */
    shoulderEnd?: Array<BlockRatePlanInfoType>;
    /**
     * The Rate Plan(s) for the days between the shoulder start date and the actual block start date.
     * @type {Array<BlockRatePlanInfoType>}
     * @memberof BlockDetailsTypeShoulderRatePlanCode
     */
    shoulderStart?: Array<BlockRatePlanInfoType>;
}

/**
 * Check if a given object implements the BlockDetailsTypeShoulderRatePlanCode interface.
 */
export function instanceOfBlockDetailsTypeShoulderRatePlanCode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockDetailsTypeShoulderRatePlanCodeFromJSON(json: any): BlockDetailsTypeShoulderRatePlanCode {
    return BlockDetailsTypeShoulderRatePlanCodeFromJSONTyped(json, false);
}

export function BlockDetailsTypeShoulderRatePlanCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockDetailsTypeShoulderRatePlanCode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shoulderEnd': !exists(json, 'shoulderEnd') ? undefined : ((json['shoulderEnd'] as Array<any>).map(BlockRatePlanInfoTypeFromJSON)),
        'shoulderStart': !exists(json, 'shoulderStart') ? undefined : ((json['shoulderStart'] as Array<any>).map(BlockRatePlanInfoTypeFromJSON)),
    };
}

export function BlockDetailsTypeShoulderRatePlanCodeToJSON(value?: BlockDetailsTypeShoulderRatePlanCode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shoulderEnd': value.shoulderEnd === undefined ? undefined : ((value.shoulderEnd as Array<any>).map(BlockRatePlanInfoTypeToJSON)),
        'shoulderStart': value.shoulderStart === undefined ? undefined : ((value.shoulderStart as Array<any>).map(BlockRatePlanInfoTypeToJSON)),
    };
}

