/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TourSeriesBlockType } from './TourSeriesBlockType';
import {
    TourSeriesBlockTypeFromJSON,
    TourSeriesBlockTypeFromJSONTyped,
    TourSeriesBlockTypeToJSON,
} from './TourSeriesBlockType';
import type { TourSeriesTypeTourInstructions } from './TourSeriesTypeTourInstructions';
import {
    TourSeriesTypeTourInstructionsFromJSON,
    TourSeriesTypeTourInstructionsFromJSONTyped,
    TourSeriesTypeTourInstructionsToJSON,
} from './TourSeriesTypeTourInstructions';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * This contains information as the block code, block name, block status regarding the blocks to be created as tour series.
 * @export
 * @interface TourSeriesType
 */
export interface TourSeriesType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof TourSeriesType
     */
    tourBlockId?: UniqueIDType;
    /**
     * The tour code to be applied to the blocks that are part of this tour series.
     * @type {string}
     * @memberof TourSeriesType
     */
    tourCode?: string;
    /**
     * The master block code of the tour series blocks. When masterBlockCode is provided,the tour series should be created by adding a master without room grid as a copy of the Source Block, and making the source block the first sub tour block. All additionally entered records on the tour series will be created as sub blocks
     * @type {string}
     * @memberof TourSeriesType
     */
    masterBlockCode?: string;
    /**
     * When true, Itinerary type is enabled for tour series.
     * @type {boolean}
     * @memberof TourSeriesType
     */
    itinerary?: boolean;
    /**
     * Contains tour series blocks information.
     * @type {Array<TourSeriesBlockType>}
     * @memberof TourSeriesType
     */
    tourSeriesBlocks?: Array<TourSeriesBlockType>;
    /**
     * 
     * @type {TourSeriesTypeTourInstructions}
     * @memberof TourSeriesType
     */
    tourInstructions?: TourSeriesTypeTourInstructions;
    /**
     * The hotel code of the source block.
     * @type {string}
     * @memberof TourSeriesType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the TourSeriesType interface.
 */
export function instanceOfTourSeriesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TourSeriesTypeFromJSON(json: any): TourSeriesType {
    return TourSeriesTypeFromJSONTyped(json, false);
}

export function TourSeriesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TourSeriesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tourBlockId': !exists(json, 'tourBlockId') ? undefined : UniqueIDTypeFromJSON(json['tourBlockId']),
        'tourCode': !exists(json, 'tourCode') ? undefined : json['tourCode'],
        'masterBlockCode': !exists(json, 'masterBlockCode') ? undefined : json['masterBlockCode'],
        'itinerary': !exists(json, 'itinerary') ? undefined : json['itinerary'],
        'tourSeriesBlocks': !exists(json, 'tourSeriesBlocks') ? undefined : ((json['tourSeriesBlocks'] as Array<any>).map(TourSeriesBlockTypeFromJSON)),
        'tourInstructions': !exists(json, 'tourInstructions') ? undefined : TourSeriesTypeTourInstructionsFromJSON(json['tourInstructions']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function TourSeriesTypeToJSON(value?: TourSeriesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tourBlockId': UniqueIDTypeToJSON(value.tourBlockId),
        'tourCode': value.tourCode,
        'masterBlockCode': value.masterBlockCode,
        'itinerary': value.itinerary,
        'tourSeriesBlocks': value.tourSeriesBlocks === undefined ? undefined : ((value.tourSeriesBlocks as Array<any>).map(TourSeriesBlockTypeToJSON)),
        'tourInstructions': TourSeriesTypeTourInstructionsToJSON(value.tourInstructions),
        'hotelId': value.hotelId,
    };
}

