/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of sub blocks that will be copied along with the Source Master Block.
 * @export
 * @interface CopySubBlockDetail
 */
export interface CopySubBlockDetail {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopySubBlockDetail
     */
    sourceSubBlockId?: UniqueIDType;
    /**
     * The start date of the new sub block.
     * @type {string}
     * @memberof CopySubBlockDetail
     */
    startDate?: string;
    /**
     * The hotel code of the new sub block.
     * @type {string}
     * @memberof CopySubBlockDetail
     */
    hotelId?: string;
    /**
     * The block code of the new sub block.
     * @type {string}
     * @memberof CopySubBlockDetail
     */
    blockcode?: string;
}

/**
 * Check if a given object implements the CopySubBlockDetail interface.
 */
export function instanceOfCopySubBlockDetail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopySubBlockDetailFromJSON(json: any): CopySubBlockDetail {
    return CopySubBlockDetailFromJSONTyped(json, false);
}

export function CopySubBlockDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopySubBlockDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceSubBlockId': !exists(json, 'sourceSubBlockId') ? undefined : UniqueIDTypeFromJSON(json['sourceSubBlockId']),
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockcode': !exists(json, 'blockcode') ? undefined : json['blockcode'],
    };
}

export function CopySubBlockDetailToJSON(value?: CopySubBlockDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceSubBlockId': UniqueIDTypeToJSON(value.sourceSubBlockId),
        'startDate': value.startDate,
        'hotelId': value.hotelId,
        'blockcode': value.blockcode,
    };
}

