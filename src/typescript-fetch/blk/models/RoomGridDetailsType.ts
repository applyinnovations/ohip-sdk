/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockGridInvType } from './BlockGridInvType';
import {
    BlockGridInvTypeFromJSON,
    BlockGridInvTypeFromJSONTyped,
    BlockGridInvTypeToJSON,
} from './BlockGridInvType';
import type { BlockGridRatesType } from './BlockGridRatesType';
import {
    BlockGridRatesTypeFromJSON,
    BlockGridRatesTypeFromJSONTyped,
    BlockGridRatesTypeToJSON,
} from './BlockGridRatesType';

/**
 * Indicates the values of room inventory or rate amount per room type.
 * @export
 * @interface RoomGridDetailsType
 */
export interface RoomGridDetailsType {
    /**
     * Indicates the Generic Room Type (Room Pool) the Room Type belongs to.
     * @type {string}
     * @memberof RoomGridDetailsType
     */
    genericRoomType?: string;
    /**
     * 
     * @type {BlockGridInvType}
     * @memberof RoomGridDetailsType
     */
    inventory?: BlockGridInvType;
    /**
     * 
     * @type {BlockGridRatesType}
     * @memberof RoomGridDetailsType
     */
    rate?: BlockGridRatesType;
    /**
     * Indicates the room type for which the inventory or rate values are applicable.
     * @type {string}
     * @memberof RoomGridDetailsType
     */
    roomType?: string;
}

/**
 * Check if a given object implements the RoomGridDetailsType interface.
 */
export function instanceOfRoomGridDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomGridDetailsTypeFromJSON(json: any): RoomGridDetailsType {
    return RoomGridDetailsTypeFromJSONTyped(json, false);
}

export function RoomGridDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomGridDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'genericRoomType': !exists(json, 'genericRoomType') ? undefined : json['genericRoomType'],
        'inventory': !exists(json, 'inventory') ? undefined : BlockGridInvTypeFromJSON(json['inventory']),
        'rate': !exists(json, 'rate') ? undefined : BlockGridRatesTypeFromJSON(json['rate']),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
    };
}

export function RoomGridDetailsTypeToJSON(value?: RoomGridDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'genericRoomType': value.genericRoomType,
        'inventory': BlockGridInvTypeToJSON(value.inventory),
        'rate': BlockGridRatesTypeToJSON(value.rate),
        'roomType': value.roomType,
    };
}

