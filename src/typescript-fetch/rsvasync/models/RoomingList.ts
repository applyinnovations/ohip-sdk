/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RoomingListBlockInfoType } from './RoomingListBlockInfoType';
import {
    RoomingListBlockInfoTypeFromJSON,
    RoomingListBlockInfoTypeFromJSONTyped,
    RoomingListBlockInfoTypeToJSON,
} from './RoomingListBlockInfoType';
import type { RoomingListReservationsType } from './RoomingListReservationsType';
import {
    RoomingListReservationsTypeFromJSON,
    RoomingListReservationsTypeFromJSONTyped,
    RoomingListReservationsTypeToJSON,
} from './RoomingListReservationsType';
import type { RoomingListShareType } from './RoomingListShareType';
import {
    RoomingListShareTypeFromJSON,
    RoomingListShareTypeFromJSONTyped,
    RoomingListShareTypeToJSON,
} from './RoomingListShareType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for creating rooming list reservations. The standard optional Opera Context element is also included.
 * @export
 * @interface RoomingList
 */
export interface RoomingList {
    /**
     * 
     * @type {RoomingListBlockInfoType}
     * @memberof RoomingList
     */
    blockInfo?: RoomingListBlockInfoType;
    /**
     * 
     * @type {RoomingListReservationsType}
     * @memberof RoomingList
     */
    reservations?: RoomingListReservationsType;
    /**
     * Contains a set of rooming list reservations that need to be shared.
     * @type {Array<RoomingListShareType>}
     * @memberof RoomingList
     */
    shares?: Array<RoomingListShareType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RoomingList
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RoomingList
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RoomingList interface.
 */
export function instanceOfRoomingList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomingListFromJSON(json: any): RoomingList {
    return RoomingListFromJSONTyped(json, false);
}

export function RoomingListFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomingList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockInfo': !exists(json, 'blockInfo') ? undefined : RoomingListBlockInfoTypeFromJSON(json['blockInfo']),
        'reservations': !exists(json, 'reservations') ? undefined : RoomingListReservationsTypeFromJSON(json['reservations']),
        'shares': !exists(json, 'shares') ? undefined : ((json['shares'] as Array<any>).map(RoomingListShareTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RoomingListToJSON(value?: RoomingList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockInfo': RoomingListBlockInfoTypeToJSON(value.blockInfo),
        'reservations': RoomingListReservationsTypeToJSON(value.reservations),
        'shares': value.shares === undefined ? undefined : ((value.shares as Array<any>).map(RoomingListShareTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

