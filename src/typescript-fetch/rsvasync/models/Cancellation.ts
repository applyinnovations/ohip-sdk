/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information regarding why reservation has been/was cancelled. This could hold information as history even if reservation is no more in in Cancelled status.
 * @export
 * @interface Cancellation
 */
export interface Cancellation {
    /**
     * 
     * @type {string}
     * @memberof Cancellation
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Cancellation
     */
    code?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof Cancellation
     */
    cancellationNo?: UniqueIDType;
    /**
     * Date when reservation was last cancelled.
     * @type {string}
     * @memberof Cancellation
     */
    date?: string;
}

/**
 * Check if a given object implements the Cancellation interface.
 */
export function instanceOfCancellation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancellationFromJSON(json: any): Cancellation {
    return CancellationFromJSONTyped(json, false);
}

export function CancellationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cancellation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'cancellationNo': !exists(json, 'cancellationNo') ? undefined : UniqueIDTypeFromJSON(json['cancellationNo']),
        'date': !exists(json, 'date') ? undefined : json['date'],
    };
}

export function CancellationToJSON(value?: Cancellation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'code': value.code,
        'cancellationNo': UniqueIDTypeToJSON(value.cancellationNo),
        'date': value.date,
    };
}

