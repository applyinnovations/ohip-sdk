/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransportInfoType
 */
export interface TransportInfoType {
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    transportCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    carrierCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    stationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    dateTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransportInfoType
     */
    transportationReqd?: boolean;
}

/**
 * Check if a given object implements the TransportInfoType interface.
 */
export function instanceOfTransportInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransportInfoTypeFromJSON(json: any): TransportInfoType {
    return TransportInfoTypeFromJSONTyped(json, false);
}

export function TransportInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransportInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'transportCode': !exists(json, 'transportCode') ? undefined : json['transportCode'],
        'carrierCode': !exists(json, 'carrierCode') ? undefined : json['carrierCode'],
        'stationCode': !exists(json, 'stationCode') ? undefined : json['stationCode'],
        'dateTime': !exists(json, 'dateTime') ? undefined : json['dateTime'],
        'transportationReqd': !exists(json, 'transportationReqd') ? undefined : json['transportationReqd'],
    };
}

export function TransportInfoTypeToJSON(value?: TransportInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comments': value.comments,
        'type': value.type,
        'transportCode': value.transportCode,
        'carrierCode': value.carrierCode,
        'stationCode': value.stationCode,
        'dateTime': value.dateTime,
        'transportationReqd': value.transportationReqd,
    };
}

