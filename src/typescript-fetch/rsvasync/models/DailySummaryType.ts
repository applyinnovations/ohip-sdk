/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Statistic information related to a specific reservation stay date.
 * @export
 * @interface DailySummaryType
 */
export interface DailySummaryType {
    /**
     * The rate plan code of the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    rateCode?: string;
    /**
     * A monetary amount.
     * @type {number}
     * @memberof DailySummaryType
     */
    rateAmount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    rateAmountCurrency?: string;
    /**
     * Holds the code that relates to the market being sold (e.g., the corporate market, packages).
     * @type {string}
     * @memberof DailySummaryType
     */
    marketCode?: string;
    /**
     * Room type.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomType?: string;
    /**
     * Booked room type.
     * @type {string}
     * @memberof DailySummaryType
     */
    bookedRoomType?: string;
    /**
     * Room number.
     * @type {string}
     * @memberof DailySummaryType
     */
    room?: string;
    /**
     * Net Amount generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    netRateAmount?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    netRateAmountCurrency?: string;
    /**
     * Room Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    roomRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomRevenueCurrency?: string;
    /**
     * Food and Beverage Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    fbRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    fbRevenueCurrency?: string;
    /**
     * Other Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    otherRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    otherRevenueCurrency?: string;
    /**
     * Total Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    totalRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    totalRevenueCurrency?: string;
    /**
     * Package Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    packageRevenue?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    packageRevenueCurrency?: string;
    /**
     * Tax Revenue generated by the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    tax?: number;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof DailySummaryType
     */
    taxCurrency?: string;
    /**
     * Room type charged for the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    roomTypeCharged?: string;
    /**
     * Reservation stay date for which the daily statistics are projected.
     * @type {string}
     * @memberof DailySummaryType
     */
    trxDate?: string;
    /**
     * The entity/channel who made the reservation.
     * @type {string}
     * @memberof DailySummaryType
     */
    sourceCode?: string;
    /**
     * Classifies the Channel field on reservation screen through which the reservation is made.
     * @type {string}
     * @memberof DailySummaryType
     */
    channel?: string;
    /**
     * Number of adults of the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    adults?: number;
    /**
     * Number of children of the reservation.
     * @type {number}
     * @memberof DailySummaryType
     */
    children?: number;
}

/**
 * Check if a given object implements the DailySummaryType interface.
 */
export function instanceOfDailySummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DailySummaryTypeFromJSON(json: any): DailySummaryType {
    return DailySummaryTypeFromJSONTyped(json, false);
}

export function DailySummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DailySummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'rateAmount': !exists(json, 'rateAmount') ? undefined : json['rateAmount'],
        'rateAmountCurrency': !exists(json, 'rateAmountCurrency') ? undefined : json['rateAmountCurrency'],
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'bookedRoomType': !exists(json, 'bookedRoomType') ? undefined : json['bookedRoomType'],
        'room': !exists(json, 'room') ? undefined : json['room'],
        'netRateAmount': !exists(json, 'netRateAmount') ? undefined : json['netRateAmount'],
        'netRateAmountCurrency': !exists(json, 'netRateAmountCurrency') ? undefined : json['netRateAmountCurrency'],
        'roomRevenue': !exists(json, 'roomRevenue') ? undefined : json['roomRevenue'],
        'roomRevenueCurrency': !exists(json, 'roomRevenueCurrency') ? undefined : json['roomRevenueCurrency'],
        'fbRevenue': !exists(json, 'fbRevenue') ? undefined : json['fbRevenue'],
        'fbRevenueCurrency': !exists(json, 'fbRevenueCurrency') ? undefined : json['fbRevenueCurrency'],
        'otherRevenue': !exists(json, 'otherRevenue') ? undefined : json['otherRevenue'],
        'otherRevenueCurrency': !exists(json, 'otherRevenueCurrency') ? undefined : json['otherRevenueCurrency'],
        'totalRevenue': !exists(json, 'totalRevenue') ? undefined : json['totalRevenue'],
        'totalRevenueCurrency': !exists(json, 'totalRevenueCurrency') ? undefined : json['totalRevenueCurrency'],
        'packageRevenue': !exists(json, 'packageRevenue') ? undefined : json['packageRevenue'],
        'packageRevenueCurrency': !exists(json, 'packageRevenueCurrency') ? undefined : json['packageRevenueCurrency'],
        'tax': !exists(json, 'tax') ? undefined : json['tax'],
        'taxCurrency': !exists(json, 'taxCurrency') ? undefined : json['taxCurrency'],
        'roomTypeCharged': !exists(json, 'roomTypeCharged') ? undefined : json['roomTypeCharged'],
        'trxDate': !exists(json, 'trxDate') ? undefined : json['trxDate'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'channel': !exists(json, 'channel') ? undefined : json['channel'],
        'adults': !exists(json, 'adults') ? undefined : json['adults'],
        'children': !exists(json, 'children') ? undefined : json['children'],
    };
}

export function DailySummaryTypeToJSON(value?: DailySummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rateCode': value.rateCode,
        'rateAmount': value.rateAmount,
        'rateAmountCurrency': value.rateAmountCurrency,
        'marketCode': value.marketCode,
        'roomType': value.roomType,
        'bookedRoomType': value.bookedRoomType,
        'room': value.room,
        'netRateAmount': value.netRateAmount,
        'netRateAmountCurrency': value.netRateAmountCurrency,
        'roomRevenue': value.roomRevenue,
        'roomRevenueCurrency': value.roomRevenueCurrency,
        'fbRevenue': value.fbRevenue,
        'fbRevenueCurrency': value.fbRevenueCurrency,
        'otherRevenue': value.otherRevenue,
        'otherRevenueCurrency': value.otherRevenueCurrency,
        'totalRevenue': value.totalRevenue,
        'totalRevenueCurrency': value.totalRevenueCurrency,
        'packageRevenue': value.packageRevenue,
        'packageRevenueCurrency': value.packageRevenueCurrency,
        'tax': value.tax,
        'taxCurrency': value.taxCurrency,
        'roomTypeCharged': value.roomTypeCharged,
        'trxDate': value.trxDate,
        'sourceCode': value.sourceCode,
        'channel': value.channel,
        'adults': value.adults,
        'children': value.children,
    };
}

