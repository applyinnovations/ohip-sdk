/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileMembershipType } from './ProfileMembershipType';
import {
    ProfileMembershipTypeFromJSON,
    ProfileMembershipTypeFromJSONTyped,
    ProfileMembershipTypeToJSON,
} from './ProfileMembershipType';

/**
 * List of loyalty program(s) the profile is subscribed to.
 * @export
 * @interface ProfileTypeProfileMemberships
 */
export interface ProfileTypeProfileMemberships {
    /**
     * Collection of Detailed information on memberships for the customer.
     * @type {Array<ProfileMembershipType>}
     * @memberof ProfileTypeProfileMemberships
     */
    profileMembership?: Array<ProfileMembershipType>;
}

/**
 * Check if a given object implements the ProfileTypeProfileMemberships interface.
 */
export function instanceOfProfileTypeProfileMemberships(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileTypeProfileMembershipsFromJSON(json: any): ProfileTypeProfileMemberships {
    return ProfileTypeProfileMembershipsFromJSONTyped(json, false);
}

export function ProfileTypeProfileMembershipsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileTypeProfileMemberships {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileMembership': !exists(json, 'profileMembership') ? undefined : ((json['profileMembership'] as Array<any>).map(ProfileMembershipTypeFromJSON)),
    };
}

export function ProfileTypeProfileMembershipsToJSON(value?: ProfileTypeProfileMemberships | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileMembership': value.profileMembership === undefined ? undefined : ((value.profileMembership as Array<any>).map(ProfileMembershipTypeToJSON)),
    };
}

