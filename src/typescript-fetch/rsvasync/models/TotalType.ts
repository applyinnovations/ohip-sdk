/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeesType } from './FeesType';
import {
    FeesTypeFromJSON,
    FeesTypeFromJSONTyped,
    FeesTypeToJSON,
} from './FeesType';
import type { TaxesType } from './TaxesType';
import {
    TaxesTypeFromJSON,
    TaxesTypeFromJSONTyped,
    TaxesTypeToJSON,
} from './TaxesType';

/**
 * The total amount charged for the service including additional amounts and fees.
 * @export
 * @interface TotalType
 */
export interface TotalType {
    /**
     * 
     * @type {TaxesType}
     * @memberof TotalType
     */
    taxes?: TaxesType;
    /**
     * 
     * @type {FeesType}
     * @memberof TotalType
     */
    fees?: FeesType;
    /**
     * 
     * @type {string}
     * @memberof TotalType
     */
    description?: string;
    /**
     * The total amount not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
     * @type {number}
     * @memberof TotalType
     */
    amountBeforeTax?: number;
    /**
     * The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
     * @type {number}
     * @memberof TotalType
     */
    amountAfterTax?: number;
    /**
     * The code specifying a monetary unit. Use ISO 4217, three alpha code.
     * @type {string}
     * @memberof TotalType
     */
    currencyCode?: string;
    /**
     * The symbol for the currency, e.g, for currencyCode USD the symbol is $.
     * @type {string}
     * @memberof TotalType
     */
    currencySymbol?: string;
    /**
     * Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
     * @type {number}
     * @memberof TotalType
     */
    decimalPlaces?: number;
    /**
     * Type of charge.
     * @type {string}
     * @memberof TotalType
     */
    code?: string;
    /**
     * When true indicates that the rate amount has been overridden.
     * @type {boolean}
     * @memberof TotalType
     */
    rateOverride?: boolean;
}

/**
 * Check if a given object implements the TotalType interface.
 */
export function instanceOfTotalType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TotalTypeFromJSON(json: any): TotalType {
    return TotalTypeFromJSONTyped(json, false);
}

export function TotalTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TotalType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxes': !exists(json, 'taxes') ? undefined : TaxesTypeFromJSON(json['taxes']),
        'fees': !exists(json, 'fees') ? undefined : FeesTypeFromJSON(json['fees']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'amountBeforeTax': !exists(json, 'amountBeforeTax') ? undefined : json['amountBeforeTax'],
        'amountAfterTax': !exists(json, 'amountAfterTax') ? undefined : json['amountAfterTax'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'currencySymbol': !exists(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'decimalPlaces': !exists(json, 'decimalPlaces') ? undefined : json['decimalPlaces'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'rateOverride': !exists(json, 'rateOverride') ? undefined : json['rateOverride'],
    };
}

export function TotalTypeToJSON(value?: TotalType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxes': TaxesTypeToJSON(value.taxes),
        'fees': FeesTypeToJSON(value.fees),
        'description': value.description,
        'amountBeforeTax': value.amountBeforeTax,
        'amountAfterTax': value.amountAfterTax,
        'currencyCode': value.currencyCode,
        'currencySymbol': value.currencySymbol,
        'decimalPlaces': value.decimalPlaces,
        'code': value.code,
        'rateOverride': value.rateOverride,
    };
}

