/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Reservation Comment Type.
 * @export
 * @interface ReservationCommentType
 */
export interface ReservationCommentType {
    /**
     * Specifies Comment's Text
     * @type {string}
     * @memberof ReservationCommentType
     */
    text?: string;
    /**
     * Specifies Comment's Title.
     * @type {string}
     * @memberof ReservationCommentType
     */
    commentTitle?: string;
    /**
     * Notification Location associated with the Note.
     * @type {string}
     * @memberof ReservationCommentType
     */
    notificationLocation?: ReservationCommentTypeNotificationLocationEnum;
    /**
     * Specifies type of the comment.
     * @type {string}
     * @memberof ReservationCommentType
     */
    type?: string;
    /**
     * When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer.
     * @type {boolean}
     * @memberof ReservationCommentType
     */
    internal?: boolean;
}


/**
 * @export
 */
export const ReservationCommentTypeNotificationLocationEnum = {
    Cashier: 'CASHIER',
    General: 'GENERAL',
    InHouse: 'IN HOUSE',
    Reservation: 'RESERVATION'
} as const;
export type ReservationCommentTypeNotificationLocationEnum = typeof ReservationCommentTypeNotificationLocationEnum[keyof typeof ReservationCommentTypeNotificationLocationEnum];


/**
 * Check if a given object implements the ReservationCommentType interface.
 */
export function instanceOfReservationCommentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationCommentTypeFromJSON(json: any): ReservationCommentType {
    return ReservationCommentTypeFromJSONTyped(json, false);
}

export function ReservationCommentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationCommentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'text') ? undefined : json['text'],
        'commentTitle': !exists(json, 'commentTitle') ? undefined : json['commentTitle'],
        'notificationLocation': !exists(json, 'notificationLocation') ? undefined : json['notificationLocation'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
    };
}

export function ReservationCommentTypeToJSON(value?: ReservationCommentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'commentTitle': value.commentTitle,
        'notificationLocation': value.notificationLocation,
        'type': value.type,
        'internal': value.internal,
    };
}

