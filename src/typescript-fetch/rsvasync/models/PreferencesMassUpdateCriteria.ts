/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PreferencesTypeType } from './PreferencesTypeType';
import {
    PreferencesTypeTypeFromJSON,
    PreferencesTypeTypeFromJSONTyped,
    PreferencesTypeTypeToJSON,
} from './PreferencesTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Reservation Preferences Mass Update criteria.
 * @export
 * @interface PreferencesMassUpdateCriteria
 */
export interface PreferencesMassUpdateCriteria {
    /**
     * Unique ID of reservations to be updated.
     * @type {Array<UniqueIDType>}
     * @memberof PreferencesMassUpdateCriteria
     */
    reservationIds?: Array<UniqueIDType>;
    /**
     * Collection of reservation preferences.
     * @type {Array<PreferencesTypeType>}
     * @memberof PreferencesMassUpdateCriteria
     */
    preferenceCollection?: Array<PreferencesTypeType>;
    /**
     * Specifies whether to copy the reservation preference to the profile or not.
     * @type {boolean}
     * @memberof PreferencesMassUpdateCriteria
     */
    copyToProfile?: boolean;
}

/**
 * Check if a given object implements the PreferencesMassUpdateCriteria interface.
 */
export function instanceOfPreferencesMassUpdateCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PreferencesMassUpdateCriteriaFromJSON(json: any): PreferencesMassUpdateCriteria {
    return PreferencesMassUpdateCriteriaFromJSONTyped(json, false);
}

export function PreferencesMassUpdateCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PreferencesMassUpdateCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationIds': !exists(json, 'reservationIds') ? undefined : ((json['reservationIds'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'preferenceCollection': !exists(json, 'preferenceCollection') ? undefined : ((json['preferenceCollection'] as Array<any>).map(PreferencesTypeTypeFromJSON)),
        'copyToProfile': !exists(json, 'copyToProfile') ? undefined : json['copyToProfile'],
    };
}

export function PreferencesMassUpdateCriteriaToJSON(value?: PreferencesMassUpdateCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationIds': value.reservationIds === undefined ? undefined : ((value.reservationIds as Array<any>).map(UniqueIDTypeToJSON)),
        'preferenceCollection': value.preferenceCollection === undefined ? undefined : ((value.preferenceCollection as Array<any>).map(PreferencesTypeTypeToJSON)),
        'copyToProfile': value.copyToProfile,
    };
}

