/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { URLType } from './URLType';
import {
    URLTypeFromJSON,
    URLTypeFromJSONTyped,
    URLTypeToJSON,
} from './URLType';

/**
 * Identifies the kind of Parcel, Baggage, or Lost items or Valet-managed vehicles or services.
 * @export
 * @interface TrackItType
 */
export interface TrackItType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof TrackItType
     */
    type?: CodeDescriptionType;
    /**
     * 
     * @type {URLType}
     * @memberof TrackItType
     */
    url?: URLType;
}

/**
 * Check if a given object implements the TrackItType interface.
 */
export function instanceOfTrackItType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrackItTypeFromJSON(json: any): TrackItType {
    return TrackItTypeFromJSONTyped(json, false);
}

export function TrackItTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackItType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : CodeDescriptionTypeFromJSON(json['type']),
        'url': !exists(json, 'url') ? undefined : URLTypeFromJSON(json['url']),
    };
}

export function TrackItTypeToJSON(value?: TrackItType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': CodeDescriptionTypeToJSON(value.type),
        'url': URLTypeToJSON(value.url),
    };
}

