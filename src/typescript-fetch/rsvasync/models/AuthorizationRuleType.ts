/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Configured rule for computing the amount to authorize.
 * @export
 * @interface AuthorizationRuleType
 */
export interface AuthorizationRuleType {
    /**
     * The authorization rule code.
     * @type {number}
     * @memberof AuthorizationRuleType
     */
    code?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AuthorizationRuleType
     */
    amount?: CurrencyAmountType;
    /**
     * A percentage value if the authorization rule is percentage based.
     * @type {number}
     * @memberof AuthorizationRuleType
     */
    percent?: number;
}

/**
 * Check if a given object implements the AuthorizationRuleType interface.
 */
export function instanceOfAuthorizationRuleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizationRuleTypeFromJSON(json: any): AuthorizationRuleType {
    return AuthorizationRuleTypeFromJSONTyped(json, false);
}

export function AuthorizationRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizationRuleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'percent': !exists(json, 'percent') ? undefined : json['percent'],
    };
}

export function AuthorizationRuleTypeToJSON(value?: AuthorizationRuleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'percent': value.percent,
    };
}

